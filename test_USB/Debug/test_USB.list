
test_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008784  08008784  00018784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088e0  080088e0  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088e8  080088e8  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088e8  080088e8  000188e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088ec  080088ec  000188ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  080088f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008d8  20000200  08008af0  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad8  08008af0  00020ad8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016771  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003232  00000000  00000000  00036999  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00039bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  0003a898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000176de  00000000  00000000  0003b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014205  00000000  00000000  00052b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008299d  00000000  00000000  00066d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e96a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e34  00000000  00000000  000e96fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000200 	.word	0x20000200
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800876c 	.word	0x0800876c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000204 	.word	0x20000204
 8000104:	0800876c 	.word	0x0800876c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 f9b2 	bl	8000808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f808 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f8b0 	bl	800060c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ac:	f000 f87e 	bl	80005ac <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004b0:	f007 fb96 	bl	8007be0 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <main+0x18>
	...

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b09f      	sub	sp, #124	; 0x7c
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	2440      	movs	r4, #64	; 0x40
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2338      	movs	r3, #56	; 0x38
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f008 f87a 	bl	80085c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ce:	232c      	movs	r3, #44	; 0x2c
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2314      	movs	r3, #20
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f008 f872 	bl	80085c2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2328      	movs	r3, #40	; 0x28
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f008 f86b 	bl	80085c2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ec:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <SystemClock_Config+0xec>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a2d      	ldr	r2, [pc, #180]	; (80005a8 <SystemClock_Config+0xf0>)
 80004f2:	401a      	ands	r2, r3
 80004f4:	4b2b      	ldr	r3, [pc, #172]	; (80005a4 <SystemClock_Config+0xec>)
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0109      	lsls	r1, r1, #4
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2222      	movs	r2, #34	; 0x22
 8000504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2210      	movs	r2, #16
 8000510:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2202      	movs	r2, #2
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	02d2      	lsls	r2, r2, #11
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2280      	movs	r2, #128	; 0x80
 8000530:	03d2      	lsls	r2, r2, #15
 8000532:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000534:	187b      	adds	r3, r7, r1
 8000536:	0018      	movs	r0, r3
 8000538:	f002 fa8c 	bl	8002a54 <HAL_RCC_OscConfig>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000540:	f000 f87a 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000544:	212c      	movs	r1, #44	; 0x2c
 8000546:	187b      	adds	r3, r7, r1
 8000548:	220f      	movs	r2, #15
 800054a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2203      	movs	r2, #3
 8000550:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000552:	187b      	adds	r3, r7, r1
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2101      	movs	r1, #1
 8000568:	0018      	movs	r0, r3
 800056a:	f002 fe47 	bl	80031fc <HAL_RCC_ClockConfig>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000572:	f000 f861 	bl	8000638 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2242      	movs	r2, #66	; 0x42
 800057a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	04d2      	lsls	r2, r2, #19
 8000588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	0018      	movs	r0, r3
 800058e:	f003 f859 	bl	8003644 <HAL_RCCEx_PeriphCLKConfig>
 8000592:	1e03      	subs	r3, r0, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000596:	f000 f84f 	bl	8000638 <Error_Handler>
  }
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	b01f      	add	sp, #124	; 0x7c
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	40007000 	.word	0x40007000
 80005a8:	ffffe7ff 	.word	0xffffe7ff

080005ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005b2:	4a15      	ldr	r2, [pc, #84]	; (8000608 <MX_USART2_UART_Init+0x5c>)
 80005b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005b8:	22e1      	movs	r2, #225	; 0xe1
 80005ba:	0252      	lsls	r2, r2, #9
 80005bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005d2:	220c      	movs	r2, #12
 80005d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005dc:	4b09      	ldr	r3, [pc, #36]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005ee:	4b05      	ldr	r3, [pc, #20]	; (8000604 <MX_USART2_UART_Init+0x58>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 f99b 	bl	800392c <HAL_UART_Init>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005fa:	f000 f81d 	bl	8000638 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	2000022c 	.word	0x2000022c
 8000608:	40004400 	.word	0x40004400

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <MX_GPIO_Init+0x28>)
 8000614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <MX_GPIO_Init+0x28>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
 800061e:	4b05      	ldr	r3, [pc, #20]	; (8000634 <MX_GPIO_Init+0x28>)
 8000620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000648:	4b07      	ldr	r3, [pc, #28]	; (8000668 <HAL_MspInit+0x24>)
 800064a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_MspInit+0x24>)
 800064e:	2101      	movs	r1, #1
 8000650:	430a      	orrs	r2, r1
 8000652:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <HAL_MspInit+0x24>)
 8000656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000658:	4b03      	ldr	r3, [pc, #12]	; (8000668 <HAL_MspInit+0x24>)
 800065a:	2180      	movs	r1, #128	; 0x80
 800065c:	0549      	lsls	r1, r1, #21
 800065e:	430a      	orrs	r2, r1
 8000660:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	240c      	movs	r4, #12
 8000676:	193b      	adds	r3, r7, r4
 8000678:	0018      	movs	r0, r3
 800067a:	2314      	movs	r3, #20
 800067c:	001a      	movs	r2, r3
 800067e:	2100      	movs	r1, #0
 8000680:	f007 ff9f 	bl	80085c2 <memset>
  if(huart->Instance==USART2)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <HAL_UART_MspInit+0x80>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d129      	bne.n	80006e2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <HAL_UART_MspInit+0x84>)
 8000690:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <HAL_UART_MspInit+0x84>)
 8000694:	2180      	movs	r1, #128	; 0x80
 8000696:	0289      	lsls	r1, r1, #10
 8000698:	430a      	orrs	r2, r1
 800069a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <HAL_UART_MspInit+0x84>)
 800069e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <HAL_UART_MspInit+0x84>)
 80006a2:	2101      	movs	r1, #1
 80006a4:	430a      	orrs	r2, r1
 80006a6:	62da      	str	r2, [r3, #44]	; 0x2c
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <HAL_UART_MspInit+0x84>)
 80006aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006ac:	2201      	movs	r2, #1
 80006ae:	4013      	ands	r3, r2
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	220c      	movs	r2, #12
 80006ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2202      	movs	r2, #2
 80006c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2203      	movs	r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2204      	movs	r2, #4
 80006d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d4:	187a      	adds	r2, r7, r1
 80006d6:	23a0      	movs	r3, #160	; 0xa0
 80006d8:	05db      	lsls	r3, r3, #23
 80006da:	0011      	movs	r1, r2
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 f9e1 	bl	8000aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b009      	add	sp, #36	; 0x24
 80006e8:	bd90      	pop	{r4, r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40004400 	.word	0x40004400
 80006f0:	40021000 	.word	0x40021000

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f8ca 	bl	80008b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <USB_IRQHandler+0x14>)
 800072a:	0018      	movs	r0, r3
 800072c:	f000 fc6e 	bl	800100c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	200007d4 	.word	0x200007d4

0800073c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000744:	4a14      	ldr	r2, [pc, #80]	; (8000798 <_sbrk+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <_sbrk+0x60>)
 8000748:	1ad3      	subs	r3, r2, r3
 800074a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <_sbrk+0x64>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d102      	bne.n	800075e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <_sbrk+0x64>)
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <_sbrk+0x68>)
 800075c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <_sbrk+0x64>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	693a      	ldr	r2, [r7, #16]
 8000768:	429a      	cmp	r2, r3
 800076a:	d207      	bcs.n	800077c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800076c:	f007 fee2 	bl	8008534 <__errno>
 8000770:	0003      	movs	r3, r0
 8000772:	220c      	movs	r2, #12
 8000774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000776:	2301      	movs	r3, #1
 8000778:	425b      	negs	r3, r3
 800077a:	e009      	b.n	8000790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <_sbrk+0x64>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000782:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	18d2      	adds	r2, r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <_sbrk+0x64>)
 800078c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800078e:	68fb      	ldr	r3, [r7, #12]
}
 8000790:	0018      	movs	r0, r3
 8000792:	46bd      	mov	sp, r7
 8000794:	b006      	add	sp, #24
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20005000 	.word	0x20005000
 800079c:	00000400 	.word	0x00000400
 80007a0:	2000021c 	.word	0x2000021c
 80007a4:	20000ad8 	.word	0x20000ad8

080007a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80007b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b8:	480d      	ldr	r0, [pc, #52]	; (80007f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80007ba:	490e      	ldr	r1, [pc, #56]	; (80007f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007bc:	4a0e      	ldr	r2, [pc, #56]	; (80007f8 <LoopForever+0xe>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c0:	e002      	b.n	80007c8 <LoopCopyDataInit>

080007c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c6:	3304      	adds	r3, #4

080007c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007cc:	d3f9      	bcc.n	80007c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007d0:	4c0b      	ldr	r4, [pc, #44]	; (8000800 <LoopForever+0x16>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d4:	e001      	b.n	80007da <LoopFillZerobss>

080007d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d8:	3204      	adds	r2, #4

080007da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007dc:	d3fb      	bcc.n	80007d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007de:	f7ff ffe3 	bl	80007a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007e2:	f007 fead 	bl	8008540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff fe59 	bl	800049c <main>

080007ea <LoopForever>:

LoopForever:
    b LoopForever
 80007ea:	e7fe      	b.n	80007ea <LoopForever>
   ldr   r0, =_estack
 80007ec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80007f8:	080088f0 	.word	0x080088f0
  ldr r2, =_sbss
 80007fc:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8000800:	20000ad8 	.word	0x20000ad8

08000804 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC1_COMP_IRQHandler>
	...

08000808 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800080e:	1dfb      	adds	r3, r7, #7
 8000810:	2200      	movs	r2, #0
 8000812:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000814:	4b0b      	ldr	r3, [pc, #44]	; (8000844 <HAL_Init+0x3c>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_Init+0x3c>)
 800081a:	2140      	movs	r1, #64	; 0x40
 800081c:	430a      	orrs	r2, r1
 800081e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000820:	2003      	movs	r0, #3
 8000822:	f000 f811 	bl	8000848 <HAL_InitTick>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d003      	beq.n	8000832 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
 8000830:	e001      	b.n	8000836 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000832:	f7ff ff07 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000836:	1dfb      	adds	r3, r7, #7
 8000838:	781b      	ldrb	r3, [r3, #0]
}
 800083a:	0018      	movs	r0, r3
 800083c:	46bd      	mov	sp, r7
 800083e:	b002      	add	sp, #8
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	40022000 	.word	0x40022000

08000848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <HAL_InitTick+0x5c>)
 8000852:	681c      	ldr	r4, [r3, #0]
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <HAL_InitTick+0x60>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	0019      	movs	r1, r3
 800085a:	23fa      	movs	r3, #250	; 0xfa
 800085c:	0098      	lsls	r0, r3, #2
 800085e:	f7ff fc53 	bl	8000108 <__udivsi3>
 8000862:	0003      	movs	r3, r0
 8000864:	0019      	movs	r1, r3
 8000866:	0020      	movs	r0, r4
 8000868:	f7ff fc4e 	bl	8000108 <__udivsi3>
 800086c:	0003      	movs	r3, r0
 800086e:	0018      	movs	r0, r3
 8000870:	f000 f90b 	bl	8000a8a <HAL_SYSTICK_Config>
 8000874:	1e03      	subs	r3, r0, #0
 8000876:	d001      	beq.n	800087c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000878:	2301      	movs	r3, #1
 800087a:	e00f      	b.n	800089c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b03      	cmp	r3, #3
 8000880:	d80b      	bhi.n	800089a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	2301      	movs	r3, #1
 8000886:	425b      	negs	r3, r3
 8000888:	2200      	movs	r2, #0
 800088a:	0018      	movs	r0, r3
 800088c:	f000 f8d8 	bl	8000a40 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_InitTick+0x64>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b003      	add	sp, #12
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	20000000 	.word	0x20000000
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000004 	.word	0x20000004

080008b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <HAL_IncTick+0x1c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	001a      	movs	r2, r3
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <HAL_IncTick+0x20>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	18d2      	adds	r2, r2, r3
 80008c0:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <HAL_IncTick+0x20>)
 80008c2:	601a      	str	r2, [r3, #0]
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	20000008 	.word	0x20000008
 80008d0:	200002b0 	.word	0x200002b0

080008d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  return uwTick;
 80008d8:	4b02      	ldr	r3, [pc, #8]	; (80008e4 <HAL_GetTick+0x10>)
 80008da:	681b      	ldr	r3, [r3, #0]
}
 80008dc:	0018      	movs	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	200002b0 	.word	0x200002b0

080008e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b7f      	cmp	r3, #127	; 0x7f
 80008fa:	d809      	bhi.n	8000910 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	001a      	movs	r2, r3
 8000902:	231f      	movs	r3, #31
 8000904:	401a      	ands	r2, r3
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_EnableIRQ+0x30>)
 8000908:	2101      	movs	r1, #1
 800090a:	4091      	lsls	r1, r2
 800090c:	000a      	movs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
  }
}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	b002      	add	sp, #8
 8000916:	bd80      	pop	{r7, pc}
 8000918:	e000e100 	.word	0xe000e100

0800091c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	6039      	str	r1, [r7, #0]
 8000926:	1dfb      	adds	r3, r7, #7
 8000928:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b7f      	cmp	r3, #127	; 0x7f
 8000930:	d828      	bhi.n	8000984 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000932:	4a2f      	ldr	r2, [pc, #188]	; (80009f0 <__NVIC_SetPriority+0xd4>)
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b25b      	sxtb	r3, r3
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	33c0      	adds	r3, #192	; 0xc0
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	589b      	ldr	r3, [r3, r2]
 8000942:	1dfa      	adds	r2, r7, #7
 8000944:	7812      	ldrb	r2, [r2, #0]
 8000946:	0011      	movs	r1, r2
 8000948:	2203      	movs	r2, #3
 800094a:	400a      	ands	r2, r1
 800094c:	00d2      	lsls	r2, r2, #3
 800094e:	21ff      	movs	r1, #255	; 0xff
 8000950:	4091      	lsls	r1, r2
 8000952:	000a      	movs	r2, r1
 8000954:	43d2      	mvns	r2, r2
 8000956:	401a      	ands	r2, r3
 8000958:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	019b      	lsls	r3, r3, #6
 800095e:	22ff      	movs	r2, #255	; 0xff
 8000960:	401a      	ands	r2, r3
 8000962:	1dfb      	adds	r3, r7, #7
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	0018      	movs	r0, r3
 8000968:	2303      	movs	r3, #3
 800096a:	4003      	ands	r3, r0
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000970:	481f      	ldr	r0, [pc, #124]	; (80009f0 <__NVIC_SetPriority+0xd4>)
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	b25b      	sxtb	r3, r3
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	430a      	orrs	r2, r1
 800097c:	33c0      	adds	r3, #192	; 0xc0
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000982:	e031      	b.n	80009e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <__NVIC_SetPriority+0xd8>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	0019      	movs	r1, r3
 800098c:	230f      	movs	r3, #15
 800098e:	400b      	ands	r3, r1
 8000990:	3b08      	subs	r3, #8
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3306      	adds	r3, #6
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	18d3      	adds	r3, r2, r3
 800099a:	3304      	adds	r3, #4
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1dfa      	adds	r2, r7, #7
 80009a0:	7812      	ldrb	r2, [r2, #0]
 80009a2:	0011      	movs	r1, r2
 80009a4:	2203      	movs	r2, #3
 80009a6:	400a      	ands	r2, r1
 80009a8:	00d2      	lsls	r2, r2, #3
 80009aa:	21ff      	movs	r1, #255	; 0xff
 80009ac:	4091      	lsls	r1, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	019b      	lsls	r3, r3, #6
 80009ba:	22ff      	movs	r2, #255	; 0xff
 80009bc:	401a      	ands	r2, r3
 80009be:	1dfb      	adds	r3, r7, #7
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	0018      	movs	r0, r3
 80009c4:	2303      	movs	r3, #3
 80009c6:	4003      	ands	r3, r0
 80009c8:	00db      	lsls	r3, r3, #3
 80009ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009cc:	4809      	ldr	r0, [pc, #36]	; (80009f4 <__NVIC_SetPriority+0xd8>)
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	001c      	movs	r4, r3
 80009d4:	230f      	movs	r3, #15
 80009d6:	4023      	ands	r3, r4
 80009d8:	3b08      	subs	r3, #8
 80009da:	089b      	lsrs	r3, r3, #2
 80009dc:	430a      	orrs	r2, r1
 80009de:	3306      	adds	r3, #6
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	18c3      	adds	r3, r0, r3
 80009e4:	3304      	adds	r3, #4
 80009e6:	601a      	str	r2, [r3, #0]
}
 80009e8:	46c0      	nop			; (mov r8, r8)
 80009ea:	46bd      	mov	sp, r7
 80009ec:	b003      	add	sp, #12
 80009ee:	bd90      	pop	{r4, r7, pc}
 80009f0:	e000e100 	.word	0xe000e100
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	1e5a      	subs	r2, r3, #1
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	045b      	lsls	r3, r3, #17
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d301      	bcc.n	8000a10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	e010      	b.n	8000a32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <SysTick_Config+0x44>)
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	3a01      	subs	r2, #1
 8000a16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a18:	2301      	movs	r3, #1
 8000a1a:	425b      	negs	r3, r3
 8000a1c:	2103      	movs	r1, #3
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f7ff ff7c 	bl	800091c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x44>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x44>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	0018      	movs	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	b002      	add	sp, #8
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60b9      	str	r1, [r7, #8]
 8000a48:	607a      	str	r2, [r7, #4]
 8000a4a:	210f      	movs	r1, #15
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	1c02      	adds	r2, r0, #0
 8000a50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	187b      	adds	r3, r7, r1
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b25b      	sxtb	r3, r3
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff ff5d 	bl	800091c <__NVIC_SetPriority>
}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b004      	add	sp, #16
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b082      	sub	sp, #8
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	0002      	movs	r2, r0
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a76:	1dfb      	adds	r3, r7, #7
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff ff33 	bl	80008e8 <__NVIC_EnableIRQ>
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b002      	add	sp, #8
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff ffaf 	bl	80009f8 <SysTick_Config>
 8000a9a:	0003      	movs	r3, r0
}
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000aba:	e155      	b.n	8000d68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d100      	bne.n	8000ad4 <HAL_GPIO_Init+0x30>
 8000ad2:	e146      	b.n	8000d62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2203      	movs	r2, #3
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d005      	beq.n	8000aec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d130      	bne.n	8000b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	43da      	mvns	r2, r3
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	409a      	lsls	r2, r3
 8000b0e:	0013      	movs	r3, r2
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b22:	2201      	movs	r2, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
 8000b28:	0013      	movs	r3, r2
 8000b2a:	43da      	mvns	r2, r3
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4013      	ands	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	091b      	lsrs	r3, r3, #4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	401a      	ands	r2, r3
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	2203      	movs	r2, #3
 8000b54:	4013      	ands	r3, r2
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d017      	beq.n	8000b8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	2203      	movs	r2, #3
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2203      	movs	r2, #3
 8000b90:	4013      	ands	r3, r2
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d123      	bne.n	8000bde <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	3208      	adds	r2, #8
 8000b9e:	0092      	lsls	r2, r2, #2
 8000ba0:	58d3      	ldr	r3, [r2, r3]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2207      	movs	r2, #7
 8000ba8:	4013      	ands	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	220f      	movs	r2, #15
 8000bae:	409a      	lsls	r2, r3
 8000bb0:	0013      	movs	r3, r2
 8000bb2:	43da      	mvns	r2, r3
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691a      	ldr	r2, [r3, #16]
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2107      	movs	r1, #7
 8000bc2:	400b      	ands	r3, r1
 8000bc4:	009b      	lsls	r3, r3, #2
 8000bc6:	409a      	lsls	r2, r3
 8000bc8:	0013      	movs	r3, r2
 8000bca:	693a      	ldr	r2, [r7, #16]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	08da      	lsrs	r2, r3, #3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3208      	adds	r2, #8
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	2203      	movs	r2, #3
 8000bea:	409a      	lsls	r2, r3
 8000bec:	0013      	movs	r3, r2
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	23c0      	movs	r3, #192	; 0xc0
 8000c18:	029b      	lsls	r3, r3, #10
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	d100      	bne.n	8000c20 <HAL_GPIO_Init+0x17c>
 8000c1e:	e0a0      	b.n	8000d62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c20:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c24:	4b56      	ldr	r3, [pc, #344]	; (8000d80 <HAL_GPIO_Init+0x2dc>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c2c:	4a55      	ldr	r2, [pc, #340]	; (8000d84 <HAL_GPIO_Init+0x2e0>)
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	089b      	lsrs	r3, r3, #2
 8000c32:	3302      	adds	r3, #2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	589b      	ldr	r3, [r3, r2]
 8000c38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	4013      	ands	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	409a      	lsls	r2, r3
 8000c46:	0013      	movs	r3, r2
 8000c48:	43da      	mvns	r2, r3
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	23a0      	movs	r3, #160	; 0xa0
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d01f      	beq.n	8000c9a <HAL_GPIO_Init+0x1f6>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <HAL_GPIO_Init+0x2e4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d019      	beq.n	8000c96 <HAL_GPIO_Init+0x1f2>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4a49      	ldr	r2, [pc, #292]	; (8000d8c <HAL_GPIO_Init+0x2e8>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a48      	ldr	r2, [pc, #288]	; (8000d90 <HAL_GPIO_Init+0x2ec>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00d      	beq.n	8000c8e <HAL_GPIO_Init+0x1ea>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a47      	ldr	r2, [pc, #284]	; (8000d94 <HAL_GPIO_Init+0x2f0>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d007      	beq.n	8000c8a <HAL_GPIO_Init+0x1e6>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a46      	ldr	r2, [pc, #280]	; (8000d98 <HAL_GPIO_Init+0x2f4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_GPIO_Init+0x1e2>
 8000c82:	2305      	movs	r3, #5
 8000c84:	e00a      	b.n	8000c9c <HAL_GPIO_Init+0x1f8>
 8000c86:	2306      	movs	r3, #6
 8000c88:	e008      	b.n	8000c9c <HAL_GPIO_Init+0x1f8>
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	e006      	b.n	8000c9c <HAL_GPIO_Init+0x1f8>
 8000c8e:	2303      	movs	r3, #3
 8000c90:	e004      	b.n	8000c9c <HAL_GPIO_Init+0x1f8>
 8000c92:	2302      	movs	r3, #2
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_Init+0x1f8>
 8000c96:	2301      	movs	r3, #1
 8000c98:	e000      	b.n	8000c9c <HAL_GPIO_Init+0x1f8>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	2103      	movs	r1, #3
 8000ca0:	400a      	ands	r2, r1
 8000ca2:	0092      	lsls	r2, r2, #2
 8000ca4:	4093      	lsls	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cac:	4935      	ldr	r1, [pc, #212]	; (8000d84 <HAL_GPIO_Init+0x2e0>)
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cba:	4b38      	ldr	r3, [pc, #224]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685a      	ldr	r2, [r3, #4]
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	025b      	lsls	r3, r3, #9
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cde:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ce4:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	43da      	mvns	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	029b      	lsls	r3, r3, #10
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d00:	693a      	ldr	r2, [r7, #16]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d08:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	43da      	mvns	r2, r3
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685a      	ldr	r2, [r3, #4]
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	035b      	lsls	r3, r3, #13
 8000d26:	4013      	ands	r3, r2
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	43da      	mvns	r2, r3
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	039b      	lsls	r3, r3, #14
 8000d50:	4013      	ands	r3, r2
 8000d52:	d003      	beq.n	8000d5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <HAL_GPIO_Init+0x2f8>)
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	40da      	lsrs	r2, r3
 8000d70:	1e13      	subs	r3, r2, #0
 8000d72:	d000      	beq.n	8000d76 <HAL_GPIO_Init+0x2d2>
 8000d74:	e6a2      	b.n	8000abc <HAL_GPIO_Init+0x18>
  }
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	b006      	add	sp, #24
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40021000 	.word	0x40021000
 8000d84:	40010000 	.word	0x40010000
 8000d88:	50000400 	.word	0x50000400
 8000d8c:	50000800 	.word	0x50000800
 8000d90:	50000c00 	.word	0x50000c00
 8000d94:	50001000 	.word	0x50001000
 8000d98:	50001c00 	.word	0x50001c00
 8000d9c:	40010400 	.word	0x40010400

08000da0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	b08b      	sub	sp, #44	; 0x2c
 8000da4:	af06      	add	r7, sp, #24
 8000da6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e0ff      	b.n	8000fb2 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a81      	ldr	r2, [pc, #516]	; (8000fbc <HAL_PCD_Init+0x21c>)
 8000db6:	5c9b      	ldrb	r3, [r3, r2]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d108      	bne.n	8000dd0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	23aa      	movs	r3, #170	; 0xaa
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f007 f892 	bl	8007ef4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	; (8000fbc <HAL_PCD_Init+0x21c>)
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f003 fa8d 	bl	80042fc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000de2:	230f      	movs	r3, #15
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e058      	b.n	8000e9e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000dec:	200f      	movs	r0, #15
 8000dee:	183b      	adds	r3, r7, r0
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	1c5a      	adds	r2, r3, #1
 8000df6:	0013      	movs	r3, r2
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	189b      	adds	r3, r3, r2
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	18cb      	adds	r3, r1, r3
 8000e00:	3301      	adds	r3, #1
 8000e02:	2201      	movs	r2, #1
 8000e04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e06:	183b      	adds	r3, r7, r0
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	6879      	ldr	r1, [r7, #4]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	0013      	movs	r3, r2
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	189b      	adds	r3, r3, r2
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	183a      	adds	r2, r7, r0
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e1c:	0004      	movs	r4, r0
 8000e1e:	183b      	adds	r3, r7, r0
 8000e20:	781a      	ldrb	r2, [r3, #0]
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b298      	uxth	r0, r3
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	0013      	movs	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	189b      	adds	r3, r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	18cb      	adds	r3, r1, r3
 8000e34:	3336      	adds	r3, #54	; 0x36
 8000e36:	1c02      	adds	r2, r0, #0
 8000e38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	6879      	ldr	r1, [r7, #4]
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	0013      	movs	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	189b      	adds	r3, r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	18cb      	adds	r3, r1, r3
 8000e4c:	3303      	adds	r3, #3
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	0013      	movs	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	189b      	adds	r3, r3, r2
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	18cb      	adds	r3, r1, r3
 8000e62:	3338      	adds	r3, #56	; 0x38
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	0013      	movs	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	189b      	adds	r3, r3, r2
 8000e74:	00db      	lsls	r3, r3, #3
 8000e76:	18cb      	adds	r3, r1, r3
 8000e78:	333c      	adds	r3, #60	; 0x3c
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	781a      	ldrb	r2, [r3, #0]
 8000e82:	6879      	ldr	r1, [r7, #4]
 8000e84:	0013      	movs	r3, r2
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	189b      	adds	r3, r3, r2
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	18cb      	adds	r3, r1, r3
 8000e8e:	3340      	adds	r3, #64	; 0x40
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e94:	193b      	adds	r3, r7, r4
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	3201      	adds	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d39f      	bcc.n	8000dec <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e056      	b.n	8000f62 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000eb4:	240f      	movs	r4, #15
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	236a      	movs	r3, #106	; 0x6a
 8000ebe:	33ff      	adds	r3, #255	; 0xff
 8000ec0:	0019      	movs	r1, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	189b      	adds	r3, r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	18c3      	adds	r3, r0, r3
 8000ecc:	185b      	adds	r3, r3, r1
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	781a      	ldrb	r2, [r3, #0]
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	23b4      	movs	r3, #180	; 0xb4
 8000eda:	0059      	lsls	r1, r3, #1
 8000edc:	0013      	movs	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	189b      	adds	r3, r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	18c3      	adds	r3, r0, r3
 8000ee6:	185b      	adds	r3, r3, r1
 8000ee8:	193a      	adds	r2, r7, r4
 8000eea:	7812      	ldrb	r2, [r2, #0]
 8000eec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	236c      	movs	r3, #108	; 0x6c
 8000ef6:	33ff      	adds	r3, #255	; 0xff
 8000ef8:	0019      	movs	r1, r3
 8000efa:	0013      	movs	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	189b      	adds	r3, r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	18c3      	adds	r3, r0, r3
 8000f04:	185b      	adds	r3, r3, r1
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f0a:	193b      	adds	r3, r7, r4
 8000f0c:	781a      	ldrb	r2, [r3, #0]
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	23bc      	movs	r3, #188	; 0xbc
 8000f12:	0059      	lsls	r1, r3, #1
 8000f14:	0013      	movs	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	189b      	adds	r3, r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	18c3      	adds	r3, r0, r3
 8000f1e:	185b      	adds	r3, r3, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f24:	193b      	adds	r3, r7, r4
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	23be      	movs	r3, #190	; 0xbe
 8000f2c:	0059      	lsls	r1, r3, #1
 8000f2e:	0013      	movs	r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	189b      	adds	r3, r3, r2
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	18c3      	adds	r3, r0, r3
 8000f38:	185b      	adds	r3, r3, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	781a      	ldrb	r2, [r3, #0]
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	23c0      	movs	r3, #192	; 0xc0
 8000f46:	0059      	lsls	r1, r3, #1
 8000f48:	0013      	movs	r3, r2
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	18c3      	adds	r3, r0, r3
 8000f52:	185b      	adds	r3, r3, r1
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	193b      	adds	r3, r7, r4
 8000f5e:	3201      	adds	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	230f      	movs	r3, #15
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3a1      	bcc.n	8000eb4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6818      	ldr	r0, [r3, #0]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	466a      	mov	r2, sp
 8000f78:	0011      	movs	r1, r2
 8000f7a:	001a      	movs	r2, r3
 8000f7c:	3210      	adds	r2, #16
 8000f7e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000f80:	c170      	stmia	r1!, {r4, r5, r6}
 8000f82:	ca30      	ldmia	r2!, {r4, r5}
 8000f84:	c130      	stmia	r1!, {r4, r5}
 8000f86:	6859      	ldr	r1, [r3, #4]
 8000f88:	689a      	ldr	r2, [r3, #8]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	f003 f9d0 	bl	8004330 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2224      	movs	r2, #36	; 0x24
 8000f94:	2100      	movs	r1, #0
 8000f96:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_PCD_Init+0x21c>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d103      	bne.n	8000fb0 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	0018      	movs	r0, r3
 8000fac:	f001 fd1c 	bl	80029e8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b005      	add	sp, #20
 8000fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	000002a9 	.word	0x000002a9

08000fc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	23aa      	movs	r3, #170	; 0xaa
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_PCD_Start+0x18>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e014      	b.n	8001002 <HAL_PCD_Start+0x42>
 8000fd8:	687a      	ldr	r2, [r7, #4]
 8000fda:	23aa      	movs	r3, #170	; 0xaa
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	2101      	movs	r1, #1
 8000fe0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f003 f972 	bl	80042d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f005 f8cd 	bl	8006190 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	23aa      	movs	r3, #170	; 0xaa
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b002      	add	sp, #8
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	f005 f8cf 	bl	80061bc <USB_ReadInterrupts>
 800101e:	0002      	movs	r2, r0
 8001020:	2380      	movs	r3, #128	; 0x80
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	401a      	ands	r2, r3
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	429a      	cmp	r2, r3
 800102c:	d103      	bne.n	8001036 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fba3 	bl	800177c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	0018      	movs	r0, r3
 800103c:	f005 f8be 	bl	80061bc <USB_ReadInterrupts>
 8001040:	0002      	movs	r2, r0
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	401a      	ands	r2, r3
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	429a      	cmp	r2, r3
 800104e:	d114      	bne.n	800107a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2244      	movs	r2, #68	; 0x44
 8001056:	5a9b      	ldrh	r3, [r3, r2]
 8001058:	b29a      	uxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	49a2      	ldr	r1, [pc, #648]	; (80012e8 <HAL_PCD_IRQHandler+0x2dc>)
 8001060:	400a      	ands	r2, r1
 8001062:	b291      	uxth	r1, r2
 8001064:	2244      	movs	r2, #68	; 0x44
 8001066:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	f006 ffc5 	bl	8007ffa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2100      	movs	r1, #0
 8001074:	0018      	movs	r0, r3
 8001076:	f000 f945 	bl	8001304 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	f005 f89c 	bl	80061bc <USB_ReadInterrupts>
 8001084:	0002      	movs	r2, r0
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	01db      	lsls	r3, r3, #7
 800108a:	401a      	ands	r2, r3
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	429a      	cmp	r2, r3
 8001092:	d10b      	bne.n	80010ac <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2244      	movs	r2, #68	; 0x44
 800109a:	5a9b      	ldrh	r3, [r3, r2]
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4992      	ldr	r1, [pc, #584]	; (80012ec <HAL_PCD_IRQHandler+0x2e0>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	b291      	uxth	r1, r2
 80010a8:	2244      	movs	r2, #68	; 0x44
 80010aa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	0018      	movs	r0, r3
 80010b2:	f005 f883 	bl	80061bc <USB_ReadInterrupts>
 80010b6:	0002      	movs	r2, r0
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	019b      	lsls	r3, r3, #6
 80010bc:	401a      	ands	r2, r3
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	019b      	lsls	r3, r3, #6
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d10b      	bne.n	80010de <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2244      	movs	r2, #68	; 0x44
 80010cc:	5a9b      	ldrh	r3, [r3, r2]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4986      	ldr	r1, [pc, #536]	; (80012f0 <HAL_PCD_IRQHandler+0x2e4>)
 80010d6:	400a      	ands	r2, r1
 80010d8:	b291      	uxth	r1, r2
 80010da:	2244      	movs	r2, #68	; 0x44
 80010dc:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	0018      	movs	r0, r3
 80010e4:	f005 f86a 	bl	80061bc <USB_ReadInterrupts>
 80010e8:	0002      	movs	r2, r0
 80010ea:	2380      	movs	r3, #128	; 0x80
 80010ec:	015b      	lsls	r3, r3, #5
 80010ee:	401a      	ands	r2, r3
 80010f0:	2380      	movs	r3, #128	; 0x80
 80010f2:	015b      	lsls	r3, r3, #5
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d137      	bne.n	8001168 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2240      	movs	r2, #64	; 0x40
 80010fe:	5a9b      	ldrh	r3, [r3, r2]
 8001100:	b29a      	uxth	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2104      	movs	r1, #4
 8001108:	438a      	bics	r2, r1
 800110a:	b291      	uxth	r1, r2
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	5a9b      	ldrh	r3, [r3, r2]
 8001118:	b29a      	uxth	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2108      	movs	r1, #8
 8001120:	438a      	bics	r2, r1
 8001122:	b291      	uxth	r1, r2
 8001124:	2240      	movs	r2, #64	; 0x40
 8001126:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	23b8      	movs	r3, #184	; 0xb8
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	5cd3      	ldrb	r3, [r2, r3]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d109      	bne.n	8001148 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	23b8      	movs	r3, #184	; 0xb8
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	2100      	movs	r1, #0
 800113c:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2100      	movs	r1, #0
 8001142:	0018      	movs	r0, r3
 8001144:	f001 fc7a 	bl	8002a3c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	0018      	movs	r0, r3
 800114c:	f006 ff96 	bl	800807c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2244      	movs	r2, #68	; 0x44
 8001156:	5a9b      	ldrh	r3, [r3, r2]
 8001158:	b29a      	uxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4965      	ldr	r1, [pc, #404]	; (80012f4 <HAL_PCD_IRQHandler+0x2e8>)
 8001160:	400a      	ands	r2, r1
 8001162:	b291      	uxth	r1, r2
 8001164:	2244      	movs	r2, #68	; 0x44
 8001166:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0018      	movs	r0, r3
 800116e:	f005 f825 	bl	80061bc <USB_ReadInterrupts>
 8001172:	0002      	movs	r2, r0
 8001174:	2380      	movs	r3, #128	; 0x80
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	401a      	ands	r2, r3
 800117a:	2380      	movs	r3, #128	; 0x80
 800117c:	011b      	lsls	r3, r3, #4
 800117e:	429a      	cmp	r2, r3
 8001180:	d127      	bne.n	80011d2 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	5a9b      	ldrh	r3, [r3, r2]
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2108      	movs	r1, #8
 8001192:	430a      	orrs	r2, r1
 8001194:	b291      	uxth	r1, r2
 8001196:	2240      	movs	r2, #64	; 0x40
 8001198:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2244      	movs	r2, #68	; 0x44
 80011a0:	5a9b      	ldrh	r3, [r3, r2]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4953      	ldr	r1, [pc, #332]	; (80012f8 <HAL_PCD_IRQHandler+0x2ec>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	b291      	uxth	r1, r2
 80011ae:	2244      	movs	r2, #68	; 0x44
 80011b0:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	5a9b      	ldrh	r3, [r3, r2]
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2104      	movs	r1, #4
 80011c2:	430a      	orrs	r2, r1
 80011c4:	b291      	uxth	r1, r2
 80011c6:	2240      	movs	r2, #64	; 0x40
 80011c8:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	0018      	movs	r0, r3
 80011ce:	f006 ff39 	bl	8008044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f004 fff0 	bl	80061bc <USB_ReadInterrupts>
 80011dc:	0003      	movs	r3, r0
 80011de:	2280      	movs	r2, #128	; 0x80
 80011e0:	4013      	ands	r3, r2
 80011e2:	2b80      	cmp	r3, #128	; 0x80
 80011e4:	d145      	bne.n	8001272 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2244      	movs	r2, #68	; 0x44
 80011ec:	5a9b      	ldrh	r3, [r3, r2]
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2180      	movs	r1, #128	; 0x80
 80011f6:	438a      	bics	r2, r1
 80011f8:	b291      	uxth	r1, r2
 80011fa:	2244      	movs	r2, #68	; 0x44
 80011fc:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	23b8      	movs	r3, #184	; 0xb8
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d12f      	bne.n	800126a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	5a9b      	ldrh	r3, [r3, r2]
 8001212:	b29a      	uxth	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2104      	movs	r1, #4
 800121a:	430a      	orrs	r2, r1
 800121c:	b291      	uxth	r1, r2
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2240      	movs	r2, #64	; 0x40
 8001228:	5a9b      	ldrh	r3, [r3, r2]
 800122a:	b29a      	uxth	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2108      	movs	r1, #8
 8001232:	430a      	orrs	r2, r1
 8001234:	b291      	uxth	r1, r2
 8001236:	2240      	movs	r2, #64	; 0x40
 8001238:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	23b8      	movs	r3, #184	; 0xb8
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	2101      	movs	r1, #1
 8001242:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2254      	movs	r2, #84	; 0x54
 800124a:	5a9b      	ldrh	r3, [r3, r2]
 800124c:	b29b      	uxth	r3, r3
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	223c      	movs	r2, #60	; 0x3c
 8001252:	4013      	ands	r3, r2
 8001254:	0019      	movs	r1, r3
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	23b9      	movs	r3, #185	; 0xb9
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2101      	movs	r1, #1
 8001262:	0018      	movs	r0, r3
 8001264:	f001 fbea 	bl	8002a3c <HAL_PCDEx_LPM_Callback>
 8001268:	e003      	b.n	8001272 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	0018      	movs	r0, r3
 800126e:	f006 fee9 	bl	8008044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	0018      	movs	r0, r3
 8001278:	f004 ffa0 	bl	80061bc <USB_ReadInterrupts>
 800127c:	0002      	movs	r2, r0
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	401a      	ands	r2, r3
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d10f      	bne.n	80012ac <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2244      	movs	r2, #68	; 0x44
 8001292:	5a9b      	ldrh	r3, [r3, r2]
 8001294:	b29a      	uxth	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4918      	ldr	r1, [pc, #96]	; (80012fc <HAL_PCD_IRQHandler+0x2f0>)
 800129c:	400a      	ands	r2, r1
 800129e:	b291      	uxth	r1, r2
 80012a0:	2244      	movs	r2, #68	; 0x44
 80012a2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	0018      	movs	r0, r3
 80012a8:	f006 fe98 	bl	8007fdc <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f004 ff83 	bl	80061bc <USB_ReadInterrupts>
 80012b6:	0002      	movs	r2, r0
 80012b8:	2380      	movs	r3, #128	; 0x80
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	401a      	ands	r2, r3
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d10b      	bne.n	80012de <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2244      	movs	r2, #68	; 0x44
 80012cc:	5a9b      	ldrh	r3, [r3, r2]
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	490a      	ldr	r1, [pc, #40]	; (8001300 <HAL_PCD_IRQHandler+0x2f4>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	b291      	uxth	r1, r2
 80012da:	2244      	movs	r2, #68	; 0x44
 80012dc:	5299      	strh	r1, [r3, r2]
  }
}
 80012de:	46c0      	nop			; (mov r8, r8)
 80012e0:	46bd      	mov	sp, r7
 80012e2:	b002      	add	sp, #8
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			; (mov r8, r8)
 80012e8:	fffffbff 	.word	0xfffffbff
 80012ec:	ffffbfff 	.word	0xffffbfff
 80012f0:	ffffdfff 	.word	0xffffdfff
 80012f4:	ffffefff 	.word	0xffffefff
 80012f8:	fffff7ff 	.word	0xfffff7ff
 80012fc:	fffffdff 	.word	0xfffffdff
 8001300:	fffffeff 	.word	0xfffffeff

08001304 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	000a      	movs	r2, r1
 800130e:	1cfb      	adds	r3, r7, #3
 8001310:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	23aa      	movs	r3, #170	; 0xaa
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	5cd3      	ldrb	r3, [r2, r3]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_PCD_SetAddress+0x1e>
 800131e:	2302      	movs	r3, #2
 8001320:	e017      	b.n	8001352 <HAL_PCD_SetAddress+0x4e>
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	23aa      	movs	r3, #170	; 0xaa
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	2101      	movs	r1, #1
 800132a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	1cfa      	adds	r2, r7, #3
 8001330:	2124      	movs	r1, #36	; 0x24
 8001332:	7812      	ldrb	r2, [r2, #0]
 8001334:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	1cfb      	adds	r3, r7, #3
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0019      	movs	r1, r3
 8001340:	0010      	movs	r0, r2
 8001342:	f004 ff11 	bl	8006168 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	23aa      	movs	r3, #170	; 0xaa
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	2100      	movs	r1, #0
 800134e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b002      	add	sp, #8
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800135a:	b590      	push	{r4, r7, lr}
 800135c:	b085      	sub	sp, #20
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	000c      	movs	r4, r1
 8001364:	0010      	movs	r0, r2
 8001366:	0019      	movs	r1, r3
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	1c22      	adds	r2, r4, #0
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	003b      	movs	r3, r7
 8001370:	1c02      	adds	r2, r0, #0
 8001372:	801a      	strh	r2, [r3, #0]
 8001374:	1cbb      	adds	r3, r7, #2
 8001376:	1c0a      	adds	r2, r1, #0
 8001378:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800137a:	230b      	movs	r3, #11
 800137c:	18fb      	adds	r3, r7, r3
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001382:	1cfb      	adds	r3, r7, #3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	da0f      	bge.n	80013ac <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800138c:	1cfb      	adds	r3, r7, #3
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2207      	movs	r2, #7
 8001392:	4013      	ands	r3, r2
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	0013      	movs	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	189b      	adds	r3, r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2201      	movs	r2, #1
 80013a8:	705a      	strb	r2, [r3, #1]
 80013aa:	e00f      	b.n	80013cc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80013ac:	1cfb      	adds	r3, r7, #3
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2207      	movs	r2, #7
 80013b2:	401a      	ands	r2, r3
 80013b4:	0013      	movs	r3, r2
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	189b      	adds	r3, r3, r2
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	3369      	adds	r3, #105	; 0x69
 80013be:	33ff      	adds	r3, #255	; 0xff
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	18d3      	adds	r3, r2, r3
 80013c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80013cc:	1cfb      	adds	r3, r7, #3
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2207      	movs	r2, #7
 80013d2:	4013      	ands	r3, r2
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80013da:	003b      	movs	r3, r7
 80013dc:	881a      	ldrh	r2, [r3, #0]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1cba      	adds	r2, r7, #2
 80013e6:	7812      	ldrb	r2, [r2, #0]
 80013e8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d004      	beq.n	80013fc <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80013fc:	1cbb      	adds	r3, r7, #2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d102      	bne.n	800140a <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	2200      	movs	r2, #0
 8001408:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	23aa      	movs	r3, #170	; 0xaa
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d101      	bne.n	800141a <HAL_PCD_EP_Open+0xc0>
 8001416:	2302      	movs	r3, #2
 8001418:	e013      	b.n	8001442 <HAL_PCD_EP_Open+0xe8>
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	23aa      	movs	r3, #170	; 0xaa
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	2101      	movs	r1, #1
 8001422:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	0011      	movs	r1, r2
 800142c:	0018      	movs	r0, r3
 800142e:	f002 ffab 	bl	8004388 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	23aa      	movs	r3, #170	; 0xaa
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	2100      	movs	r1, #0
 800143a:	54d1      	strb	r1, [r2, r3]

  return ret;
 800143c:	230b      	movs	r3, #11
 800143e:	18fb      	adds	r3, r7, r3
 8001440:	781b      	ldrb	r3, [r3, #0]
}
 8001442:	0018      	movs	r0, r3
 8001444:	46bd      	mov	sp, r7
 8001446:	b005      	add	sp, #20
 8001448:	bd90      	pop	{r4, r7, pc}

0800144a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b084      	sub	sp, #16
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
 8001452:	000a      	movs	r2, r1
 8001454:	1cfb      	adds	r3, r7, #3
 8001456:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001458:	1cfb      	adds	r3, r7, #3
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	b25b      	sxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	da0f      	bge.n	8001482 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001462:	1cfb      	adds	r3, r7, #3
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2207      	movs	r2, #7
 8001468:	4013      	ands	r3, r2
 800146a:	1c5a      	adds	r2, r3, #1
 800146c:	0013      	movs	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	189b      	adds	r3, r3, r2
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	18d3      	adds	r3, r2, r3
 8001478:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	705a      	strb	r2, [r3, #1]
 8001480:	e00f      	b.n	80014a2 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001482:	1cfb      	adds	r3, r7, #3
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2207      	movs	r2, #7
 8001488:	401a      	ands	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	189b      	adds	r3, r3, r2
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	3369      	adds	r3, #105	; 0x69
 8001494:	33ff      	adds	r3, #255	; 0xff
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	18d3      	adds	r3, r2, r3
 800149a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80014a2:	1cfb      	adds	r3, r7, #3
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2207      	movs	r2, #7
 80014a8:	4013      	ands	r3, r2
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	23aa      	movs	r3, #170	; 0xaa
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	5cd3      	ldrb	r3, [r2, r3]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_PCD_EP_Close+0x76>
 80014bc:	2302      	movs	r3, #2
 80014be:	e011      	b.n	80014e4 <HAL_PCD_EP_Close+0x9a>
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	23aa      	movs	r3, #170	; 0xaa
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	2101      	movs	r1, #1
 80014c8:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	0011      	movs	r1, r2
 80014d2:	0018      	movs	r0, r3
 80014d4:	f003 facc 	bl	8004a70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	23aa      	movs	r3, #170	; 0xaa
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	2100      	movs	r1, #0
 80014e0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	0018      	movs	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	b004      	add	sp, #16
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	607a      	str	r2, [r7, #4]
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	200b      	movs	r0, #11
 80014fa:	183b      	adds	r3, r7, r0
 80014fc:	1c0a      	adds	r2, r1, #0
 80014fe:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001500:	0001      	movs	r1, r0
 8001502:	187b      	adds	r3, r7, r1
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2207      	movs	r2, #7
 8001508:	401a      	ands	r2, r3
 800150a:	0013      	movs	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	189b      	adds	r3, r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	3369      	adds	r3, #105	; 0x69
 8001514:	33ff      	adds	r3, #255	; 0xff
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	18d3      	adds	r3, r2, r3
 800151a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2200      	movs	r2, #0
 8001532:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2207      	movs	r2, #7
 800153a:	4013      	ands	r3, r2
 800153c:	b2da      	uxtb	r2, r3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001542:	187b      	adds	r3, r7, r1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2207      	movs	r2, #7
 8001548:	4013      	ands	r3, r2
 800154a:	d107      	bne.n	800155c <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f003 fc4b 	bl	8004df0 <USB_EPStartXfer>
 800155a:	e006      	b.n	800156a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	0011      	movs	r1, r2
 8001564:	0018      	movs	r0, r3
 8001566:	f003 fc43 	bl	8004df0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b006      	add	sp, #24
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	200b      	movs	r0, #11
 8001582:	183b      	adds	r3, r7, r0
 8001584:	1c0a      	adds	r2, r1, #0
 8001586:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001588:	183b      	adds	r3, r7, r0
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2207      	movs	r2, #7
 800158e:	4013      	ands	r3, r2
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	0013      	movs	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	189b      	adds	r3, r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	18d3      	adds	r3, r2, r3
 800159e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2224      	movs	r2, #36	; 0x24
 80015b0:	2101      	movs	r1, #1
 80015b2:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	683a      	ldr	r2, [r7, #0]
 80015b8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	2201      	movs	r2, #1
 80015c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80015c6:	183b      	adds	r3, r7, r0
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2207      	movs	r2, #7
 80015cc:	4013      	ands	r3, r2
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2207      	movs	r2, #7
 80015da:	4013      	ands	r3, r2
 80015dc:	d107      	bne.n	80015ee <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	0011      	movs	r1, r2
 80015e6:	0018      	movs	r0, r3
 80015e8:	f003 fc02 	bl	8004df0 <USB_EPStartXfer>
 80015ec:	e006      	b.n	80015fc <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	0011      	movs	r1, r2
 80015f6:	0018      	movs	r0, r3
 80015f8:	f003 fbfa 	bl	8004df0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b006      	add	sp, #24
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	000a      	movs	r2, r1
 8001610:	1cfb      	adds	r3, r7, #3
 8001612:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001614:	1cfb      	adds	r3, r7, #3
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2207      	movs	r2, #7
 800161a:	401a      	ands	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	429a      	cmp	r2, r3
 8001622:	d901      	bls.n	8001628 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e046      	b.n	80016b6 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001628:	1cfb      	adds	r3, r7, #3
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b25b      	sxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	da0f      	bge.n	8001652 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001632:	1cfb      	adds	r3, r7, #3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2207      	movs	r2, #7
 8001638:	4013      	ands	r3, r2
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	0013      	movs	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	189b      	adds	r3, r3, r2
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	18d3      	adds	r3, r2, r3
 8001648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2201      	movs	r2, #1
 800164e:	705a      	strb	r2, [r3, #1]
 8001650:	e00d      	b.n	800166e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001652:	1cfb      	adds	r3, r7, #3
 8001654:	781a      	ldrb	r2, [r3, #0]
 8001656:	0013      	movs	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	189b      	adds	r3, r3, r2
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	3369      	adds	r3, #105	; 0x69
 8001660:	33ff      	adds	r3, #255	; 0xff
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	18d3      	adds	r3, r2, r3
 8001666:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001674:	1cfb      	adds	r3, r7, #3
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2207      	movs	r2, #7
 800167a:	4013      	ands	r3, r2
 800167c:	b2da      	uxtb	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	23aa      	movs	r3, #170	; 0xaa
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d101      	bne.n	8001692 <HAL_PCD_EP_SetStall+0x8c>
 800168e:	2302      	movs	r3, #2
 8001690:	e011      	b.n	80016b6 <HAL_PCD_EP_SetStall+0xb0>
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	23aa      	movs	r3, #170	; 0xaa
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f004 fc5d 	bl	8005f64 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	23aa      	movs	r3, #170	; 0xaa
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	2100      	movs	r1, #0
 80016b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b004      	add	sp, #16
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	000a      	movs	r2, r1
 80016c8:	1cfb      	adds	r3, r7, #3
 80016ca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80016cc:	1cfb      	adds	r3, r7, #3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	220f      	movs	r2, #15
 80016d2:	401a      	ands	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d901      	bls.n	80016e0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e048      	b.n	8001772 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80016e0:	1cfb      	adds	r3, r7, #3
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	da0f      	bge.n	800170a <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016ea:	1cfb      	adds	r3, r7, #3
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2207      	movs	r2, #7
 80016f0:	4013      	ands	r3, r2
 80016f2:	1c5a      	adds	r2, r3, #1
 80016f4:	0013      	movs	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	189b      	adds	r3, r3, r2
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	18d3      	adds	r3, r2, r3
 8001700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2201      	movs	r2, #1
 8001706:	705a      	strb	r2, [r3, #1]
 8001708:	e00f      	b.n	800172a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800170a:	1cfb      	adds	r3, r7, #3
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2207      	movs	r2, #7
 8001710:	401a      	ands	r2, r3
 8001712:	0013      	movs	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	189b      	adds	r3, r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	3369      	adds	r3, #105	; 0x69
 800171c:	33ff      	adds	r3, #255	; 0xff
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	18d3      	adds	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001730:	1cfb      	adds	r3, r7, #3
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2207      	movs	r2, #7
 8001736:	4013      	ands	r3, r2
 8001738:	b2da      	uxtb	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	23aa      	movs	r3, #170	; 0xaa
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	5cd3      	ldrb	r3, [r2, r3]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_PCD_EP_ClrStall+0x90>
 800174a:	2302      	movs	r3, #2
 800174c:	e011      	b.n	8001772 <HAL_PCD_EP_ClrStall+0xb4>
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	23aa      	movs	r3, #170	; 0xaa
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	2101      	movs	r1, #1
 8001756:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68fa      	ldr	r2, [r7, #12]
 800175e:	0011      	movs	r1, r2
 8001760:	0018      	movs	r0, r3
 8001762:	f004 fc4f 	bl	8006004 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	23aa      	movs	r3, #170	; 0xaa
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	2100      	movs	r1, #0
 800176e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b004      	add	sp, #16
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800177c:	b5b0      	push	{r4, r5, r7, lr}
 800177e:	b096      	sub	sp, #88	; 0x58
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001784:	f000 fbd8 	bl	8001f38 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2056      	movs	r0, #86	; 0x56
 800178e:	183b      	adds	r3, r7, r0
 8001790:	2144      	movs	r1, #68	; 0x44
 8001792:	5a52      	ldrh	r2, [r2, r1]
 8001794:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001796:	183b      	adds	r3, r7, r0
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	2455      	movs	r4, #85	; 0x55
 800179e:	193b      	adds	r3, r7, r4
 80017a0:	210f      	movs	r1, #15
 80017a2:	400a      	ands	r2, r1
 80017a4:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80017a6:	193b      	adds	r3, r7, r4
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d000      	beq.n	80017b0 <PCD_EP_ISR_Handler+0x34>
 80017ae:	e179      	b.n	8001aa4 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80017b0:	183b      	adds	r3, r7, r0
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	2210      	movs	r2, #16
 80017b6:	4013      	ands	r3, r2
 80017b8:	d154      	bne.n	8001864 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	200e      	movs	r0, #14
 80017c4:	183b      	adds	r3, r7, r0
 80017c6:	49af      	ldr	r1, [pc, #700]	; (8001a84 <PCD_EP_ISR_Handler+0x308>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	801a      	strh	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	183a      	adds	r2, r7, r0
 80017d2:	8812      	ldrh	r2, [r2, #0]
 80017d4:	49ac      	ldr	r1, [pc, #688]	; (8001a88 <PCD_EP_ISR_Handler+0x30c>)
 80017d6:	430a      	orrs	r2, r1
 80017d8:	b292      	uxth	r2, r2
 80017da:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3328      	adds	r3, #40	; 0x28
 80017e0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2250      	movs	r2, #80	; 0x50
 80017e8:	5a9b      	ldrh	r3, [r3, r2]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	001a      	movs	r2, r3
 80017ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	18d2      	adds	r2, r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	18d3      	adds	r3, r2, r3
 80017fc:	4aa3      	ldr	r2, [pc, #652]	; (8001a8c <PCD_EP_ISR_Handler+0x310>)
 80017fe:	4694      	mov	ip, r2
 8001800:	4463      	add	r3, ip
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	059b      	lsls	r3, r3, #22
 8001806:	0d9a      	lsrs	r2, r3, #22
 8001808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800180c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800180e:	695a      	ldr	r2, [r3, #20]
 8001810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	18d2      	adds	r2, r2, r3
 8001816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001818:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2100      	movs	r1, #0
 800181e:	0018      	movs	r0, r3
 8001820:	f006 fbbe 	bl	8007fa0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2224      	movs	r2, #36	; 0x24
 8001828:	5c9b      	ldrb	r3, [r3, r2]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <PCD_EP_ISR_Handler+0xb8>
 8001830:	f000 fb82 	bl	8001f38 <PCD_EP_ISR_Handler+0x7bc>
 8001834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <PCD_EP_ISR_Handler+0xc4>
 800183c:	f000 fb7c 	bl	8001f38 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2224      	movs	r2, #36	; 0x24
 8001844:	5c9b      	ldrb	r3, [r3, r2]
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	4252      	negs	r2, r2
 800184c:	4313      	orrs	r3, r2
 800184e:	b2da      	uxtb	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b291      	uxth	r1, r2
 8001856:	224c      	movs	r2, #76	; 0x4c
 8001858:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2224      	movs	r2, #36	; 0x24
 800185e:	2100      	movs	r1, #0
 8001860:	5499      	strb	r1, [r3, r2]
 8001862:	e369      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3369      	adds	r3, #105	; 0x69
 8001868:	33ff      	adds	r3, #255	; 0xff
 800186a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2152      	movs	r1, #82	; 0x52
 8001872:	187b      	adds	r3, r7, r1
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001878:	187b      	adds	r3, r7, r1
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	4013      	ands	r3, r2
 8001882:	d037      	beq.n	80018f4 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2250      	movs	r2, #80	; 0x50
 800188a:	5a9b      	ldrh	r3, [r3, r2]
 800188c:	b29b      	uxth	r3, r3
 800188e:	001a      	movs	r2, r3
 8001890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	18d2      	adds	r2, r2, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	4a7c      	ldr	r2, [pc, #496]	; (8001a90 <PCD_EP_ISR_Handler+0x314>)
 80018a0:	4694      	mov	ip, r2
 80018a2:	4463      	add	r3, ip
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	059b      	lsls	r3, r3, #22
 80018a8:	0d9a      	lsrs	r2, r3, #22
 80018aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	22ac      	movs	r2, #172	; 0xac
 80018b6:	0092      	lsls	r2, r2, #2
 80018b8:	1899      	adds	r1, r3, r2
 80018ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018bc:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80018be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018c0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f004 fccc 	bl	8006260 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	881b      	ldrh	r3, [r3, #0]
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	2010      	movs	r0, #16
 80018d2:	183b      	adds	r3, r7, r0
 80018d4:	496f      	ldr	r1, [pc, #444]	; (8001a94 <PCD_EP_ISR_Handler+0x318>)
 80018d6:	400a      	ands	r2, r1
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	183a      	adds	r2, r7, r0
 80018e0:	8812      	ldrh	r2, [r2, #0]
 80018e2:	2180      	movs	r1, #128	; 0x80
 80018e4:	430a      	orrs	r2, r1
 80018e6:	b292      	uxth	r2, r2
 80018e8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f006 fb21 	bl	8007f34 <HAL_PCD_SetupStageCallback>
 80018f2:	e321      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80018f4:	2352      	movs	r3, #82	; 0x52
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	2200      	movs	r2, #0
 80018fa:	5e9b      	ldrsh	r3, [r3, r2]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	db00      	blt.n	8001902 <PCD_EP_ISR_Handler+0x186>
 8001900:	e31a      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	881b      	ldrh	r3, [r3, #0]
 8001908:	b29a      	uxth	r2, r3
 800190a:	201e      	movs	r0, #30
 800190c:	183b      	adds	r3, r7, r0
 800190e:	4961      	ldr	r1, [pc, #388]	; (8001a94 <PCD_EP_ISR_Handler+0x318>)
 8001910:	400a      	ands	r2, r1
 8001912:	801a      	strh	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	183a      	adds	r2, r7, r0
 800191a:	8812      	ldrh	r2, [r2, #0]
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	430a      	orrs	r2, r1
 8001920:	b292      	uxth	r2, r2
 8001922:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2250      	movs	r2, #80	; 0x50
 800192a:	5a9b      	ldrh	r3, [r3, r2]
 800192c:	b29b      	uxth	r3, r3
 800192e:	001a      	movs	r2, r3
 8001930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	18d2      	adds	r2, r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	18d3      	adds	r3, r2, r3
 800193e:	4a54      	ldr	r2, [pc, #336]	; (8001a90 <PCD_EP_ISR_Handler+0x314>)
 8001940:	4694      	mov	ip, r2
 8001942:	4463      	add	r3, ip
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	059b      	lsls	r3, r3, #22
 8001948:	0d9a      	lsrs	r2, r3, #22
 800194a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800194e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01a      	beq.n	800198c <PCD_EP_ISR_Handler+0x210>
 8001956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d016      	beq.n	800198c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6818      	ldr	r0, [r3, #0]
 8001962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001964:	6959      	ldr	r1, [r3, #20]
 8001966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001968:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800196a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800196c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800196e:	b29b      	uxth	r3, r3
 8001970:	f004 fc76 	bl	8006260 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	18d2      	adds	r2, r2, r3
 800197e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001980:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2100      	movs	r1, #0
 8001986:	0018      	movs	r0, r3
 8001988:	f006 fae9 	bl	8007f5e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	881b      	ldrh	r3, [r3, #0]
 8001992:	b29b      	uxth	r3, r3
 8001994:	001a      	movs	r2, r3
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	4013      	ands	r3, r2
 800199c:	d000      	beq.n	80019a0 <PCD_EP_ISR_Handler+0x224>
 800199e:	e2cb      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2250      	movs	r2, #80	; 0x50
 80019ac:	5a9b      	ldrh	r3, [r3, r2]
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	001a      	movs	r2, r3
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	189b      	adds	r3, r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	4a35      	ldr	r2, [pc, #212]	; (8001a90 <PCD_EP_ISR_Handler+0x314>)
 80019bc:	4694      	mov	ip, r2
 80019be:	4463      	add	r3, ip
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d110      	bne.n	80019ec <PCD_EP_ISR_Handler+0x270>
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	4a31      	ldr	r2, [pc, #196]	; (8001a98 <PCD_EP_ISR_Handler+0x31c>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	801a      	strh	r2, [r3, #0]
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4a29      	ldr	r2, [pc, #164]	; (8001a88 <PCD_EP_ISR_Handler+0x30c>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	801a      	strh	r2, [r3, #0]
 80019ea:	e02b      	b.n	8001a44 <PCD_EP_ISR_Handler+0x2c8>
 80019ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	2b3e      	cmp	r3, #62	; 0x3e
 80019f2:	d812      	bhi.n	8001a1a <PCD_EP_ISR_Handler+0x29e>
 80019f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019f6:	691b      	ldr	r3, [r3, #16]
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
 80019fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	2201      	movs	r2, #1
 8001a02:	4013      	ands	r3, r2
 8001a04:	d002      	beq.n	8001a0c <PCD_EP_ISR_Handler+0x290>
 8001a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a08:	3301      	adds	r3, #1
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	029b      	lsls	r3, r3, #10
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	801a      	strh	r2, [r3, #0]
 8001a18:	e014      	b.n	8001a44 <PCD_EP_ISR_Handler+0x2c8>
 8001a1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	647b      	str	r3, [r7, #68]	; 0x44
 8001a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	221f      	movs	r2, #31
 8001a28:	4013      	ands	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <PCD_EP_ISR_Handler+0x2b6>
 8001a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	647b      	str	r3, [r7, #68]	; 0x44
 8001a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	029b      	lsls	r3, r3, #10
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <PCD_EP_ISR_Handler+0x30c>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	2012      	movs	r0, #18
 8001a4e:	183b      	adds	r3, r7, r0
 8001a50:	4912      	ldr	r1, [pc, #72]	; (8001a9c <PCD_EP_ISR_Handler+0x320>)
 8001a52:	400a      	ands	r2, r1
 8001a54:	801a      	strh	r2, [r3, #0]
 8001a56:	183b      	adds	r3, r7, r0
 8001a58:	183a      	adds	r2, r7, r0
 8001a5a:	8812      	ldrh	r2, [r2, #0]
 8001a5c:	2180      	movs	r1, #128	; 0x80
 8001a5e:	0149      	lsls	r1, r1, #5
 8001a60:	404a      	eors	r2, r1
 8001a62:	801a      	strh	r2, [r3, #0]
 8001a64:	183b      	adds	r3, r7, r0
 8001a66:	183a      	adds	r2, r7, r0
 8001a68:	8812      	ldrh	r2, [r2, #0]
 8001a6a:	2180      	movs	r1, #128	; 0x80
 8001a6c:	0189      	lsls	r1, r1, #6
 8001a6e:	404a      	eors	r2, r1
 8001a70:	801a      	strh	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	183a      	adds	r2, r7, r0
 8001a78:	8812      	ldrh	r2, [r2, #0]
 8001a7a:	4909      	ldr	r1, [pc, #36]	; (8001aa0 <PCD_EP_ISR_Handler+0x324>)
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	b292      	uxth	r2, r2
 8001a80:	801a      	strh	r2, [r3, #0]
 8001a82:	e259      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
 8001a84:	ffff8f0f 	.word	0xffff8f0f
 8001a88:	ffff8000 	.word	0xffff8000
 8001a8c:	00000402 	.word	0x00000402
 8001a90:	00000406 	.word	0x00000406
 8001a94:	00000f8f 	.word	0x00000f8f
 8001a98:	ffff83ff 	.word	0xffff83ff
 8001a9c:	ffffbf8f 	.word	0xffffbf8f
 8001aa0:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	001a      	movs	r2, r3
 8001aaa:	2055      	movs	r0, #85	; 0x55
 8001aac:	183b      	adds	r3, r7, r0
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	18d2      	adds	r2, r2, r3
 8001ab4:	2152      	movs	r1, #82	; 0x52
 8001ab6:	187b      	adds	r3, r7, r1
 8001ab8:	8812      	ldrh	r2, [r2, #0]
 8001aba:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001abc:	187b      	adds	r3, r7, r1
 8001abe:	2200      	movs	r2, #0
 8001ac0:	5e9b      	ldrsh	r3, [r3, r2]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db00      	blt.n	8001ac8 <PCD_EP_ISR_Handler+0x34c>
 8001ac6:	e0fa      	b.n	8001cbe <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	001a      	movs	r2, r3
 8001ace:	183b      	adds	r3, r7, r0
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	18d3      	adds	r3, r2, r3
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2450      	movs	r4, #80	; 0x50
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	49cf      	ldr	r1, [pc, #828]	; (8001e1c <PCD_EP_ISR_Handler+0x6a0>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	801a      	strh	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	001a      	movs	r2, r3
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	18d3      	adds	r3, r2, r3
 8001af2:	193a      	adds	r2, r7, r4
 8001af4:	8812      	ldrh	r2, [r2, #0]
 8001af6:	2180      	movs	r1, #128	; 0x80
 8001af8:	430a      	orrs	r2, r1
 8001afa:	b292      	uxth	r2, r2
 8001afc:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001afe:	183b      	adds	r3, r7, r0
 8001b00:	781a      	ldrb	r2, [r3, #0]
 8001b02:	0013      	movs	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	3369      	adds	r3, #105	; 0x69
 8001b0c:	33ff      	adds	r3, #255	; 0xff
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	18d3      	adds	r3, r2, r3
 8001b12:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b16:	7b1b      	ldrb	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d125      	bne.n	8001b68 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2250      	movs	r2, #80	; 0x50
 8001b22:	5a9b      	ldrh	r3, [r3, r2]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	001a      	movs	r2, r3
 8001b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	18d2      	adds	r2, r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	18d3      	adds	r3, r2, r3
 8001b36:	4aba      	ldr	r2, [pc, #744]	; (8001e20 <PCD_EP_ISR_Handler+0x6a4>)
 8001b38:	4694      	mov	ip, r2
 8001b3a:	4463      	add	r3, ip
 8001b3c:	881a      	ldrh	r2, [r3, #0]
 8001b3e:	2448      	movs	r4, #72	; 0x48
 8001b40:	193b      	adds	r3, r7, r4
 8001b42:	0592      	lsls	r2, r2, #22
 8001b44:	0d92      	lsrs	r2, r2, #22
 8001b46:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001b48:	193b      	adds	r3, r7, r4
 8001b4a:	881b      	ldrh	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d100      	bne.n	8001b52 <PCD_EP_ISR_Handler+0x3d6>
 8001b50:	e08d      	b.n	8001c6e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
 8001b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b58:	6959      	ldr	r1, [r3, #20]
 8001b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b5c:	88da      	ldrh	r2, [r3, #6]
 8001b5e:	193b      	adds	r3, r7, r4
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	f004 fb7d 	bl	8006260 <USB_ReadPMA>
 8001b66:	e082      	b.n	8001c6e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b6a:	78db      	ldrb	r3, [r3, #3]
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d10c      	bne.n	8001b8a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b70:	2348      	movs	r3, #72	; 0x48
 8001b72:	18fc      	adds	r4, r7, r3
 8001b74:	2352      	movs	r3, #82	; 0x52
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	881a      	ldrh	r2, [r3, #0]
 8001b7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 f9ee 	bl	8001f60 <HAL_PCD_EP_DB_Receive>
 8001b84:	0003      	movs	r3, r0
 8001b86:	8023      	strh	r3, [r4, #0]
 8001b88:	e071      	b.n	8001c6e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	001a      	movs	r2, r3
 8001b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	18d3      	adds	r3, r2, r3
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	204a      	movs	r0, #74	; 0x4a
 8001b9e:	183b      	adds	r3, r7, r0
 8001ba0:	49a0      	ldr	r1, [pc, #640]	; (8001e24 <PCD_EP_ISR_Handler+0x6a8>)
 8001ba2:	400a      	ands	r2, r1
 8001ba4:	801a      	strh	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	001a      	movs	r2, r3
 8001bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	18d3      	adds	r3, r2, r3
 8001bb4:	183a      	adds	r2, r7, r0
 8001bb6:	8812      	ldrh	r2, [r2, #0]
 8001bb8:	499b      	ldr	r1, [pc, #620]	; (8001e28 <PCD_EP_ISR_Handler+0x6ac>)
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	b292      	uxth	r2, r2
 8001bbe:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	001a      	movs	r2, r3
 8001bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	001a      	movs	r2, r3
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d024      	beq.n	8001c26 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2250      	movs	r2, #80	; 0x50
 8001be2:	5a9b      	ldrh	r3, [r3, r2]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	001a      	movs	r2, r3
 8001be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	18d2      	adds	r2, r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	4a8d      	ldr	r2, [pc, #564]	; (8001e2c <PCD_EP_ISR_Handler+0x6b0>)
 8001bf8:	4694      	mov	ip, r2
 8001bfa:	4463      	add	r3, ip
 8001bfc:	881a      	ldrh	r2, [r3, #0]
 8001bfe:	2448      	movs	r4, #72	; 0x48
 8001c00:	193b      	adds	r3, r7, r4
 8001c02:	0592      	lsls	r2, r2, #22
 8001c04:	0d92      	lsrs	r2, r2, #22
 8001c06:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001c08:	193b      	adds	r3, r7, r4
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d02e      	beq.n	8001c6e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c16:	6959      	ldr	r1, [r3, #20]
 8001c18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1a:	891a      	ldrh	r2, [r3, #8]
 8001c1c:	193b      	adds	r3, r7, r4
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	f004 fb1e 	bl	8006260 <USB_ReadPMA>
 8001c24:	e023      	b.n	8001c6e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2250      	movs	r2, #80	; 0x50
 8001c2c:	5a9b      	ldrh	r3, [r3, r2]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	001a      	movs	r2, r3
 8001c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	18d2      	adds	r2, r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	18d3      	adds	r3, r2, r3
 8001c40:	4a77      	ldr	r2, [pc, #476]	; (8001e20 <PCD_EP_ISR_Handler+0x6a4>)
 8001c42:	4694      	mov	ip, r2
 8001c44:	4463      	add	r3, ip
 8001c46:	881a      	ldrh	r2, [r3, #0]
 8001c48:	2448      	movs	r4, #72	; 0x48
 8001c4a:	193b      	adds	r3, r7, r4
 8001c4c:	0592      	lsls	r2, r2, #22
 8001c4e:	0d92      	lsrs	r2, r2, #22
 8001c50:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001c52:	193b      	adds	r3, r7, r4
 8001c54:	881b      	ldrh	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6818      	ldr	r0, [r3, #0]
 8001c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c60:	6959      	ldr	r1, [r3, #20]
 8001c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c64:	895a      	ldrh	r2, [r3, #10]
 8001c66:	193b      	adds	r3, r7, r4
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	f004 faf9 	bl	8006260 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c70:	69da      	ldr	r2, [r3, #28]
 8001c72:	2148      	movs	r1, #72	; 0x48
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	18d2      	adds	r2, r2, r3
 8001c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c80:	695a      	ldr	r2, [r3, #20]
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	18d2      	adds	r2, r2, r3
 8001c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <PCD_EP_ISR_Handler+0x524>
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	881a      	ldrh	r2, [r3, #0]
 8001c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	0011      	movs	r1, r2
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f006 f958 	bl	8007f5e <HAL_PCD_DataOutStageCallback>
 8001cae:	e006      	b.n	8001cbe <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f003 f899 	bl	8004df0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001cbe:	2452      	movs	r4, #82	; 0x52
 8001cc0:	193b      	adds	r3, r7, r4
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d100      	bne.n	8001ccc <PCD_EP_ISR_Handler+0x550>
 8001cca:	e135      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8001ccc:	2055      	movs	r0, #85	; 0x55
 8001cce:	183b      	adds	r3, r7, r0
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	189b      	adds	r3, r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	18d3      	adds	r3, r2, r3
 8001ce0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	001a      	movs	r2, r3
 8001ce8:	183b      	adds	r3, r7, r0
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	18d3      	adds	r3, r2, r3
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2542      	movs	r5, #66	; 0x42
 8001cf6:	197b      	adds	r3, r7, r5
 8001cf8:	494d      	ldr	r1, [pc, #308]	; (8001e30 <PCD_EP_ISR_Handler+0x6b4>)
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	801a      	strh	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	001a      	movs	r2, r3
 8001d04:	183b      	adds	r3, r7, r0
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	18d3      	adds	r3, r2, r3
 8001d0c:	197a      	adds	r2, r7, r5
 8001d0e:	8812      	ldrh	r2, [r2, #0]
 8001d10:	4948      	ldr	r1, [pc, #288]	; (8001e34 <PCD_EP_ISR_Handler+0x6b8>)
 8001d12:	430a      	orrs	r2, r1
 8001d14:	b292      	uxth	r2, r2
 8001d16:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8001d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d1a:	78db      	ldrb	r3, [r3, #3]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d100      	bne.n	8001d22 <PCD_EP_ISR_Handler+0x5a6>
 8001d20:	e0ad      	b.n	8001e7e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2240      	movs	r2, #64	; 0x40
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d046      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d34:	785b      	ldrb	r3, [r3, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d125      	bne.n	8001d86 <PCD_EP_ISR_Handler+0x60a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2250      	movs	r2, #80	; 0x50
 8001d46:	5a9b      	ldrh	r3, [r3, r2]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
 8001d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	00da      	lsls	r2, r3, #3
 8001d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5a:	18d3      	adds	r3, r2, r3
 8001d5c:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <PCD_EP_ISR_Handler+0x6b0>)
 8001d5e:	4694      	mov	ip, r2
 8001d60:	4463      	add	r3, ip
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4a33      	ldr	r2, [pc, #204]	; (8001e38 <PCD_EP_ISR_Handler+0x6bc>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	801a      	strh	r2, [r3, #0]
 8001d74:	6a3b      	ldr	r3, [r7, #32]
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	4a2e      	ldr	r2, [pc, #184]	; (8001e34 <PCD_EP_ISR_Handler+0x6b8>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	801a      	strh	r2, [r3, #0]
 8001d84:	e073      	b.n	8001e6e <PCD_EP_ISR_Handler+0x6f2>
 8001d86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d88:	785b      	ldrb	r3, [r3, #1]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d16f      	bne.n	8001e6e <PCD_EP_ISR_Handler+0x6f2>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2250      	movs	r2, #80	; 0x50
 8001d9a:	5a9b      	ldrh	r3, [r3, r2]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	001a      	movs	r2, r3
 8001da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da2:	189b      	adds	r3, r3, r2
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	00da      	lsls	r2, r3, #3
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	18d3      	adds	r3, r2, r3
 8001db0:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <PCD_EP_ISR_Handler+0x6b0>)
 8001db2:	4694      	mov	ip, r2
 8001db4:	4463      	add	r3, ip
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dba:	2200      	movs	r2, #0
 8001dbc:	801a      	strh	r2, [r3, #0]
 8001dbe:	e056      	b.n	8001e6e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc8:	785b      	ldrb	r3, [r3, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d136      	bne.n	8001e3c <PCD_EP_ISR_Handler+0x6c0>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2250      	movs	r2, #80	; 0x50
 8001dda:	5a9b      	ldrh	r3, [r3, r2]
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	001a      	movs	r2, r3
 8001de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de2:	189b      	adds	r3, r3, r2
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
 8001de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	00da      	lsls	r2, r3, #3
 8001dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dee:	18d3      	adds	r3, r2, r3
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <PCD_EP_ISR_Handler+0x6a4>)
 8001df2:	4694      	mov	ip, r2
 8001df4:	4463      	add	r3, ip
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
 8001df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dfa:	881b      	ldrh	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	; (8001e38 <PCD_EP_ISR_Handler+0x6bc>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	801a      	strh	r2, [r3, #0]
 8001e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4a09      	ldr	r2, [pc, #36]	; (8001e34 <PCD_EP_ISR_Handler+0x6b8>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e16:	801a      	strh	r2, [r3, #0]
 8001e18:	e029      	b.n	8001e6e <PCD_EP_ISR_Handler+0x6f2>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	00000f8f 	.word	0x00000f8f
 8001e20:	00000406 	.word	0x00000406
 8001e24:	ffff8f8f 	.word	0xffff8f8f
 8001e28:	ffff80c0 	.word	0xffff80c0
 8001e2c:	00000402 	.word	0x00000402
 8001e30:	ffff8f0f 	.word	0xffff8f0f
 8001e34:	ffff8000 	.word	0xffff8000
 8001e38:	ffff83ff 	.word	0xffff83ff
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	785b      	ldrb	r3, [r3, #1]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d114      	bne.n	8001e6e <PCD_EP_ISR_Handler+0x6f2>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2250      	movs	r2, #80	; 0x50
 8001e4a:	5a9b      	ldrh	r3, [r3, r2]
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	001a      	movs	r2, r3
 8001e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e52:	189b      	adds	r3, r3, r2
 8001e54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	00da      	lsls	r2, r3, #3
 8001e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e5e:	18d3      	adds	r3, r2, r3
 8001e60:	4a3d      	ldr	r2, [pc, #244]	; (8001f58 <PCD_EP_ISR_Handler+0x7dc>)
 8001e62:	4694      	mov	ip, r2
 8001e64:	4463      	add	r3, ip
 8001e66:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e70:	781a      	ldrb	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0011      	movs	r1, r2
 8001e76:	0018      	movs	r0, r3
 8001e78:	f006 f892 	bl	8007fa0 <HAL_PCD_DataInStageCallback>
 8001e7c:	e05c      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d150      	bne.n	8001f28 <PCD_EP_ISR_Handler+0x7ac>
 8001e86:	2352      	movs	r3, #82	; 0x52
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	881a      	ldrh	r2, [r3, #0]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d149      	bne.n	8001f28 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2250      	movs	r2, #80	; 0x50
 8001e9a:	5a9b      	ldrh	r3, [r3, r2]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	001a      	movs	r2, r3
 8001ea0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	18d2      	adds	r2, r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	18d3      	adds	r3, r2, r3
 8001eae:	4a2b      	ldr	r2, [pc, #172]	; (8001f5c <PCD_EP_ISR_Handler+0x7e0>)
 8001eb0:	4694      	mov	ip, r2
 8001eb2:	4463      	add	r3, ip
 8001eb4:	881a      	ldrh	r2, [r3, #0]
 8001eb6:	2140      	movs	r1, #64	; 0x40
 8001eb8:	187b      	adds	r3, r7, r1
 8001eba:	0592      	lsls	r2, r2, #22
 8001ebc:	0d92      	lsrs	r2, r2, #22
 8001ebe:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ec2:	699a      	ldr	r2, [r3, #24]
 8001ec4:	187b      	adds	r3, r7, r1
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d907      	bls.n	8001edc <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	187b      	adds	r3, r7, r1
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	1ad2      	subs	r2, r2, r3
 8001ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ed8:	619a      	str	r2, [r3, #24]
 8001eda:	e002      	b.n	8001ee2 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8001edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d107      	bne.n	8001efa <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001eea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eec:	781a      	ldrb	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	0011      	movs	r1, r2
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	f006 f854 	bl	8007fa0 <HAL_PCD_DataInStageCallback>
 8001ef8:	e01e      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	2140      	movs	r1, #64	; 0x40
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	18d2      	adds	r2, r2, r3
 8001f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f08:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f0c:	69da      	ldr	r2, [r3, #28]
 8001f0e:	187b      	adds	r3, r7, r1
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	18d2      	adds	r2, r2, r3
 8001f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f16:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f1e:	0011      	movs	r1, r2
 8001f20:	0018      	movs	r0, r3
 8001f22:	f002 ff65 	bl	8004df0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f26:	e007      	b.n	8001f38 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f28:	2352      	movs	r3, #82	; 0x52
 8001f2a:	18fb      	adds	r3, r7, r3
 8001f2c:	881a      	ldrh	r2, [r3, #0]
 8001f2e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f930 	bl	8002198 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2244      	movs	r2, #68	; 0x44
 8001f3e:	5a9b      	ldrh	r3, [r3, r2]
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	b21b      	sxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	da01      	bge.n	8001f4c <PCD_EP_ISR_Handler+0x7d0>
 8001f48:	f7ff fc1e 	bl	8001788 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	0018      	movs	r0, r3
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b016      	add	sp, #88	; 0x58
 8001f54:	bdb0      	pop	{r4, r5, r7, pc}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	00000406 	.word	0x00000406
 8001f5c:	00000402 	.word	0x00000402

08001f60 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	1dbb      	adds	r3, r7, #6
 8001f6c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	881a      	ldrh	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	4013      	ands	r3, r2
 8001f78:	d100      	bne.n	8001f7c <HAL_PCD_EP_DB_Receive+0x1c>
 8001f7a:	e07d      	b.n	8002078 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2250      	movs	r2, #80	; 0x50
 8001f82:	5a9b      	ldrh	r3, [r3, r2]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	001a      	movs	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	18d2      	adds	r2, r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_PCD_EP_DB_Receive+0x220>)
 8001f98:	4694      	mov	ip, r2
 8001f9a:	4463      	add	r3, ip
 8001f9c:	881a      	ldrh	r2, [r3, #0]
 8001f9e:	211a      	movs	r1, #26
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	0592      	lsls	r2, r2, #22
 8001fa4:	0d92      	lsrs	r2, r2, #22
 8001fa6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	699a      	ldr	r2, [r3, #24]
 8001fac:	187b      	adds	r3, r7, r1
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d307      	bcc.n	8001fc4 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	1ad2      	subs	r2, r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	619a      	str	r2, [r3, #24]
 8001fc2:	e002      	b.n	8001fca <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d121      	bne.n	8002016 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	18d3      	adds	r3, r2, r3
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2018      	movs	r0, #24
 8001fe6:	183b      	adds	r3, r7, r0
 8001fe8:	4966      	ldr	r1, [pc, #408]	; (8002184 <HAL_PCD_EP_DB_Receive+0x224>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	801a      	strh	r2, [r3, #0]
 8001fee:	183b      	adds	r3, r7, r0
 8001ff0:	183a      	adds	r2, r7, r0
 8001ff2:	8812      	ldrh	r2, [r2, #0]
 8001ff4:	2180      	movs	r1, #128	; 0x80
 8001ff6:	0189      	lsls	r1, r1, #6
 8001ff8:	404a      	eors	r2, r1
 8001ffa:	801a      	strh	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	001a      	movs	r2, r3
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	18d3      	adds	r3, r2, r3
 800200a:	183a      	adds	r2, r7, r0
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	495e      	ldr	r1, [pc, #376]	; (8002188 <HAL_PCD_EP_DB_Receive+0x228>)
 8002010:	430a      	orrs	r2, r1
 8002012:	b292      	uxth	r2, r2
 8002014:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002016:	1dbb      	adds	r3, r7, #6
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	2240      	movs	r2, #64	; 0x40
 800201c:	4013      	ands	r3, r2
 800201e:	d01a      	beq.n	8002056 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	001a      	movs	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	b29a      	uxth	r2, r3
 8002032:	2016      	movs	r0, #22
 8002034:	183b      	adds	r3, r7, r0
 8002036:	4955      	ldr	r1, [pc, #340]	; (800218c <HAL_PCD_EP_DB_Receive+0x22c>)
 8002038:	400a      	ands	r2, r1
 800203a:	801a      	strh	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	001a      	movs	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	183a      	adds	r2, r7, r0
 800204c:	8812      	ldrh	r2, [r2, #0]
 800204e:	4950      	ldr	r1, [pc, #320]	; (8002190 <HAL_PCD_EP_DB_Receive+0x230>)
 8002050:	430a      	orrs	r2, r1
 8002052:	b292      	uxth	r2, r2
 8002054:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002056:	241a      	movs	r4, #26
 8002058:	193b      	adds	r3, r7, r4
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d100      	bne.n	8002062 <HAL_PCD_EP_DB_Receive+0x102>
 8002060:	e086      	b.n	8002170 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6959      	ldr	r1, [r3, #20]
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	891a      	ldrh	r2, [r3, #8]
 800206e:	193b      	adds	r3, r7, r4
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	f004 f8f5 	bl	8006260 <USB_ReadPMA>
 8002076:	e07b      	b.n	8002170 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2250      	movs	r2, #80	; 0x50
 800207e:	5a9b      	ldrh	r3, [r3, r2]
 8002080:	b29b      	uxth	r3, r3
 8002082:	001a      	movs	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	18d2      	adds	r2, r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	4a40      	ldr	r2, [pc, #256]	; (8002194 <HAL_PCD_EP_DB_Receive+0x234>)
 8002094:	4694      	mov	ip, r2
 8002096:	4463      	add	r3, ip
 8002098:	881a      	ldrh	r2, [r3, #0]
 800209a:	211a      	movs	r1, #26
 800209c:	187b      	adds	r3, r7, r1
 800209e:	0592      	lsls	r2, r2, #22
 80020a0:	0d92      	lsrs	r2, r2, #22
 80020a2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	881b      	ldrh	r3, [r3, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d307      	bcc.n	80020c0 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	699a      	ldr	r2, [r3, #24]
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	1ad2      	subs	r2, r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	619a      	str	r2, [r3, #24]
 80020be:	e002      	b.n	80020c6 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d121      	bne.n	8002112 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	001a      	movs	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	18d3      	adds	r3, r2, r3
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	b29a      	uxth	r2, r3
 80020e0:	201e      	movs	r0, #30
 80020e2:	183b      	adds	r3, r7, r0
 80020e4:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_PCD_EP_DB_Receive+0x224>)
 80020e6:	400a      	ands	r2, r1
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	183b      	adds	r3, r7, r0
 80020ec:	183a      	adds	r2, r7, r0
 80020ee:	8812      	ldrh	r2, [r2, #0]
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	0189      	lsls	r1, r1, #6
 80020f4:	404a      	eors	r2, r1
 80020f6:	801a      	strh	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	001a      	movs	r2, r3
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	18d3      	adds	r3, r2, r3
 8002106:	183a      	adds	r2, r7, r0
 8002108:	8812      	ldrh	r2, [r2, #0]
 800210a:	491f      	ldr	r1, [pc, #124]	; (8002188 <HAL_PCD_EP_DB_Receive+0x228>)
 800210c:	430a      	orrs	r2, r1
 800210e:	b292      	uxth	r2, r2
 8002110:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002112:	1dbb      	adds	r3, r7, #6
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	4013      	ands	r3, r2
 800211a:	d11a      	bne.n	8002152 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	001a      	movs	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	18d3      	adds	r3, r2, r3
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b29a      	uxth	r2, r3
 800212e:	201c      	movs	r0, #28
 8002130:	183b      	adds	r3, r7, r0
 8002132:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_PCD_EP_DB_Receive+0x22c>)
 8002134:	400a      	ands	r2, r1
 8002136:	801a      	strh	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	001a      	movs	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	18d3      	adds	r3, r2, r3
 8002146:	183a      	adds	r2, r7, r0
 8002148:	8812      	ldrh	r2, [r2, #0]
 800214a:	4911      	ldr	r1, [pc, #68]	; (8002190 <HAL_PCD_EP_DB_Receive+0x230>)
 800214c:	430a      	orrs	r2, r1
 800214e:	b292      	uxth	r2, r2
 8002150:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002152:	241a      	movs	r4, #26
 8002154:	193b      	adds	r3, r7, r4
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d009      	beq.n	8002170 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	6959      	ldr	r1, [r3, #20]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	895a      	ldrh	r2, [r3, #10]
 8002168:	193b      	adds	r3, r7, r4
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	f004 f878 	bl	8006260 <USB_ReadPMA>
    }
  }

  return count;
 8002170:	231a      	movs	r3, #26
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	881b      	ldrh	r3, [r3, #0]
}
 8002176:	0018      	movs	r0, r3
 8002178:	46bd      	mov	sp, r7
 800217a:	b009      	add	sp, #36	; 0x24
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	00000402 	.word	0x00000402
 8002184:	ffffbf8f 	.word	0xffffbf8f
 8002188:	ffff8080 	.word	0xffff8080
 800218c:	ffff8f8f 	.word	0xffff8f8f
 8002190:	ffff80c0 	.word	0xffff80c0
 8002194:	00000406 	.word	0x00000406

08002198 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b0a2      	sub	sp, #136	; 0x88
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	1dbb      	adds	r3, r7, #6
 80021a4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021a6:	1dbb      	adds	r3, r7, #6
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	2240      	movs	r2, #64	; 0x40
 80021ac:	4013      	ands	r3, r2
 80021ae:	d100      	bne.n	80021b2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80021b0:	e1c8      	b.n	8002544 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2250      	movs	r2, #80	; 0x50
 80021b8:	5a9b      	ldrh	r3, [r3, r2]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	001a      	movs	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	18d2      	adds	r2, r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	18d3      	adds	r3, r2, r3
 80021cc:	4ad7      	ldr	r2, [pc, #860]	; (800252c <HAL_PCD_EP_DB_Transmit+0x394>)
 80021ce:	4694      	mov	ip, r2
 80021d0:	4463      	add	r3, ip
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	214e      	movs	r1, #78	; 0x4e
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	0592      	lsls	r2, r2, #22
 80021da:	0d92      	lsrs	r2, r2, #22
 80021dc:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d907      	bls.n	80021fa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	1ad2      	subs	r2, r2, r3
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	619a      	str	r2, [r3, #24]
 80021f8:	e002      	b.n	8002200 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d000      	beq.n	800220a <HAL_PCD_EP_DB_Transmit+0x72>
 8002208:	e0b5      	b.n	8002376 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	785b      	ldrb	r3, [r3, #1]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d125      	bne.n	800225e <HAL_PCD_EP_DB_Transmit+0xc6>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2250      	movs	r2, #80	; 0x50
 800221e:	5a9b      	ldrh	r3, [r3, r2]
 8002220:	b29b      	uxth	r3, r3
 8002222:	001a      	movs	r2, r3
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	189b      	adds	r3, r3, r2
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	00da      	lsls	r2, r3, #3
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	18d3      	adds	r3, r2, r3
 8002234:	4abd      	ldr	r2, [pc, #756]	; (800252c <HAL_PCD_EP_DB_Transmit+0x394>)
 8002236:	4694      	mov	ip, r2
 8002238:	4463      	add	r3, ip
 800223a:	627b      	str	r3, [r7, #36]	; 0x24
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	881b      	ldrh	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4abb      	ldr	r2, [pc, #748]	; (8002530 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002244:	4013      	ands	r3, r2
 8002246:	b29a      	uxth	r2, r3
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	801a      	strh	r2, [r3, #0]
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	4ab8      	ldr	r2, [pc, #736]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002254:	4313      	orrs	r3, r2
 8002256:	b29a      	uxth	r2, r3
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	801a      	strh	r2, [r3, #0]
 800225c:	e01b      	b.n	8002296 <HAL_PCD_EP_DB_Transmit+0xfe>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	785b      	ldrb	r3, [r3, #1]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d117      	bne.n	8002296 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2250      	movs	r2, #80	; 0x50
 8002272:	5a9b      	ldrh	r3, [r3, r2]
 8002274:	b29b      	uxth	r3, r3
 8002276:	001a      	movs	r2, r3
 8002278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227a:	189b      	adds	r3, r3, r2
 800227c:	633b      	str	r3, [r7, #48]	; 0x30
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	00da      	lsls	r2, r3, #3
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	18d3      	adds	r3, r2, r3
 8002288:	4aa8      	ldr	r2, [pc, #672]	; (800252c <HAL_PCD_EP_DB_Transmit+0x394>)
 800228a:	4694      	mov	ip, r2
 800228c:	4463      	add	r3, ip
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	2200      	movs	r2, #0
 8002294:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	785b      	ldrb	r3, [r3, #1]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d125      	bne.n	80022f0 <HAL_PCD_EP_DB_Transmit+0x158>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2250      	movs	r2, #80	; 0x50
 80022b0:	5a9b      	ldrh	r3, [r3, r2]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	001a      	movs	r2, r3
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	189b      	adds	r3, r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	00da      	lsls	r2, r3, #3
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	18d3      	adds	r3, r2, r3
 80022c6:	4a9c      	ldr	r2, [pc, #624]	; (8002538 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80022c8:	4694      	mov	ip, r2
 80022ca:	4463      	add	r3, ip
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4a96      	ldr	r2, [pc, #600]	; (8002530 <HAL_PCD_EP_DB_Transmit+0x398>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	b29a      	uxth	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	801a      	strh	r2, [r3, #0]
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4a93      	ldr	r2, [pc, #588]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	801a      	strh	r2, [r3, #0]
 80022ee:	e018      	b.n	8002322 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d114      	bne.n	8002322 <HAL_PCD_EP_DB_Transmit+0x18a>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2250      	movs	r2, #80	; 0x50
 80022fe:	5a9b      	ldrh	r3, [r3, r2]
 8002300:	b29b      	uxth	r3, r3
 8002302:	001a      	movs	r2, r3
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	189b      	adds	r3, r3, r2
 8002308:	623b      	str	r3, [r7, #32]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	00da      	lsls	r2, r3, #3
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	18d3      	adds	r3, r2, r3
 8002314:	4a88      	ldr	r2, [pc, #544]	; (8002538 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002316:	4694      	mov	ip, r2
 8002318:	4463      	add	r3, ip
 800231a:	61fb      	str	r3, [r7, #28]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2200      	movs	r2, #0
 8002320:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	0011      	movs	r1, r2
 800232a:	0018      	movs	r0, r3
 800232c:	f005 fe38 	bl	8007fa0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002330:	1dbb      	adds	r3, r7, #6
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	01db      	lsls	r3, r3, #7
 8002338:	4013      	ands	r3, r2
 800233a:	d100      	bne.n	800233e <HAL_PCD_EP_DB_Transmit+0x1a6>
 800233c:	e2d4      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	001a      	movs	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	18d3      	adds	r3, r2, r3
 800234c:	881b      	ldrh	r3, [r3, #0]
 800234e:	b29a      	uxth	r2, r3
 8002350:	2012      	movs	r0, #18
 8002352:	183b      	adds	r3, r7, r0
 8002354:	4979      	ldr	r1, [pc, #484]	; (800253c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002356:	400a      	ands	r2, r1
 8002358:	801a      	strh	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	001a      	movs	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	18d3      	adds	r3, r2, r3
 8002368:	183a      	adds	r2, r7, r0
 800236a:	8812      	ldrh	r2, [r2, #0]
 800236c:	4974      	ldr	r1, [pc, #464]	; (8002540 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800236e:	430a      	orrs	r2, r1
 8002370:	b292      	uxth	r2, r2
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	e2b8      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002376:	1dbb      	adds	r3, r7, #6
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	01db      	lsls	r3, r3, #7
 800237e:	4013      	ands	r3, r2
 8002380:	d01a      	beq.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	001a      	movs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	18d3      	adds	r3, r2, r3
 8002390:	881b      	ldrh	r3, [r3, #0]
 8002392:	b29a      	uxth	r2, r3
 8002394:	2044      	movs	r0, #68	; 0x44
 8002396:	183b      	adds	r3, r7, r0
 8002398:	4968      	ldr	r1, [pc, #416]	; (800253c <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800239a:	400a      	ands	r2, r1
 800239c:	801a      	strh	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	001a      	movs	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	18d3      	adds	r3, r2, r3
 80023ac:	183a      	adds	r2, r7, r0
 80023ae:	8812      	ldrh	r2, [r2, #0]
 80023b0:	4963      	ldr	r1, [pc, #396]	; (8002540 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80023b2:	430a      	orrs	r2, r1
 80023b4:	b292      	uxth	r2, r2
 80023b6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	5c9b      	ldrb	r3, [r3, r2]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d000      	beq.n	80023c4 <HAL_PCD_EP_DB_Transmit+0x22c>
 80023c2:	e291      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	214e      	movs	r1, #78	; 0x4e
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	18d2      	adds	r2, r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	187b      	adds	r3, r7, r1
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	18d2      	adds	r2, r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6a1a      	ldr	r2, [r3, #32]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d309      	bcc.n	8002402 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	6a1a      	ldr	r2, [r3, #32]
 80023f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023fa:	1ad2      	subs	r2, r2, r3
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	621a      	str	r2, [r3, #32]
 8002400:	e016      	b.n	8002430 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d108      	bne.n	800241c <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800240a:	234e      	movs	r3, #78	; 0x4e
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	881b      	ldrh	r3, [r3, #0]
 8002410:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2224      	movs	r2, #36	; 0x24
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]
 800241a:	e009      	b.n	8002430 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2224      	movs	r2, #36	; 0x24
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	785b      	ldrb	r3, [r3, #1]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d150      	bne.n	80024da <HAL_PCD_EP_DB_Transmit+0x342>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	63bb      	str	r3, [r7, #56]	; 0x38
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2250      	movs	r2, #80	; 0x50
 8002444:	5a9b      	ldrh	r3, [r3, r2]
 8002446:	b29b      	uxth	r3, r3
 8002448:	001a      	movs	r2, r3
 800244a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244c:	189b      	adds	r3, r3, r2
 800244e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	00da      	lsls	r2, r3, #3
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	4a34      	ldr	r2, [pc, #208]	; (800252c <HAL_PCD_EP_DB_Transmit+0x394>)
 800245c:	4694      	mov	ip, r2
 800245e:	4463      	add	r3, ip
 8002460:	637b      	str	r3, [r7, #52]	; 0x34
 8002462:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002464:	2b00      	cmp	r3, #0
 8002466:	d110      	bne.n	800248a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8002468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29b      	uxth	r3, r3
 800246e:	4a30      	ldr	r2, [pc, #192]	; (8002530 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002470:	4013      	ands	r3, r2
 8002472:	b29a      	uxth	r2, r3
 8002474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002476:	801a      	strh	r2, [r3, #0]
 8002478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b29b      	uxth	r3, r3
 800247e:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002480:	4313      	orrs	r3, r2
 8002482:	b29a      	uxth	r2, r3
 8002484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002486:	801a      	strh	r2, [r3, #0]
 8002488:	e044      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x37c>
 800248a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800248c:	2b3e      	cmp	r3, #62	; 0x3e
 800248e:	d810      	bhi.n	80024b2 <HAL_PCD_EP_DB_Transmit+0x31a>
 8002490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	64bb      	str	r3, [r7, #72]	; 0x48
 8002496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002498:	2201      	movs	r2, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d002      	beq.n	80024a4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800249e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a0:	3301      	adds	r3, #1
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80024a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ae:	801a      	strh	r2, [r3, #0]
 80024b0:	e030      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x37c>
 80024b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80024b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024ba:	221f      	movs	r2, #31
 80024bc:	4013      	ands	r3, r2
 80024be:	d102      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x32e>
 80024c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c2:	3b01      	subs	r3, #1
 80024c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80024c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	4a19      	ldr	r2, [pc, #100]	; (8002534 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	801a      	strh	r2, [r3, #0]
 80024d8:	e01c      	b.n	8002514 <HAL_PCD_EP_DB_Transmit+0x37c>
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d118      	bne.n	8002514 <HAL_PCD_EP_DB_Transmit+0x37c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2250      	movs	r2, #80	; 0x50
 80024ee:	5a9b      	ldrh	r3, [r3, r2]
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	001a      	movs	r2, r3
 80024f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024f6:	189b      	adds	r3, r3, r2
 80024f8:	643b      	str	r3, [r7, #64]	; 0x40
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	00da      	lsls	r2, r3, #3
 8002500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002502:	18d3      	adds	r3, r2, r3
 8002504:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_PCD_EP_DB_Transmit+0x394>)
 8002506:	4694      	mov	ip, r2
 8002508:	4463      	add	r3, ip
 800250a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800250e:	b29a      	uxth	r2, r3
 8002510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002512:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	891a      	ldrh	r2, [r3, #8]
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	b29b      	uxth	r3, r3
 8002524:	f003 fe58 	bl	80061d8 <USB_WritePMA>
 8002528:	e1de      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	00000402 	.word	0x00000402
 8002530:	ffff83ff 	.word	0xffff83ff
 8002534:	ffff8000 	.word	0xffff8000
 8002538:	00000406 	.word	0x00000406
 800253c:	ffff8f8f 	.word	0xffff8f8f
 8002540:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2250      	movs	r2, #80	; 0x50
 800254a:	5a9b      	ldrh	r3, [r3, r2]
 800254c:	b29b      	uxth	r3, r3
 800254e:	001a      	movs	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	18d2      	adds	r2, r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	18d3      	adds	r3, r2, r3
 800255e:	4aca      	ldr	r2, [pc, #808]	; (8002888 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002560:	4694      	mov	ip, r2
 8002562:	4463      	add	r3, ip
 8002564:	881a      	ldrh	r2, [r3, #0]
 8002566:	214e      	movs	r1, #78	; 0x4e
 8002568:	187b      	adds	r3, r7, r1
 800256a:	0592      	lsls	r2, r2, #22
 800256c:	0d92      	lsrs	r2, r2, #22
 800256e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	699a      	ldr	r2, [r3, #24]
 8002574:	187b      	adds	r3, r7, r1
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d307      	bcc.n	800258c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	187b      	adds	r3, r7, r1
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	1ad2      	subs	r2, r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	619a      	str	r2, [r3, #24]
 800258a:	e002      	b.n	8002592 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	2200      	movs	r2, #0
 8002590:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d000      	beq.n	800259c <HAL_PCD_EP_DB_Transmit+0x404>
 800259a:	e0c0      	b.n	800271e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d125      	bne.n	80025f0 <HAL_PCD_EP_DB_Transmit+0x458>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2250      	movs	r2, #80	; 0x50
 80025b0:	5a9b      	ldrh	r3, [r3, r2]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	001a      	movs	r2, r3
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	189b      	adds	r3, r3, r2
 80025ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	00da      	lsls	r2, r3, #3
 80025c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c4:	18d3      	adds	r3, r2, r3
 80025c6:	4ab1      	ldr	r2, [pc, #708]	; (800288c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80025c8:	4694      	mov	ip, r2
 80025ca:	4463      	add	r3, ip
 80025cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80025ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4aae      	ldr	r2, [pc, #696]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	b29a      	uxth	r2, r3
 80025da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	4aab      	ldr	r2, [pc, #684]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025ec:	801a      	strh	r2, [r3, #0]
 80025ee:	e01b      	b.n	8002628 <HAL_PCD_EP_DB_Transmit+0x490>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	785b      	ldrb	r3, [r3, #1]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d117      	bne.n	8002628 <HAL_PCD_EP_DB_Transmit+0x490>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	677b      	str	r3, [r7, #116]	; 0x74
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2250      	movs	r2, #80	; 0x50
 8002604:	5a9b      	ldrh	r3, [r3, r2]
 8002606:	b29b      	uxth	r3, r3
 8002608:	001a      	movs	r2, r3
 800260a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800260c:	189b      	adds	r3, r3, r2
 800260e:	677b      	str	r3, [r7, #116]	; 0x74
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	00da      	lsls	r2, r3, #3
 8002616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002618:	18d3      	adds	r3, r2, r3
 800261a:	4a9c      	ldr	r2, [pc, #624]	; (800288c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800261c:	4694      	mov	ip, r2
 800261e:	4463      	add	r3, ip
 8002620:	673b      	str	r3, [r7, #112]	; 0x70
 8002622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002624:	2200      	movs	r2, #0
 8002626:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	67bb      	str	r3, [r7, #120]	; 0x78
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d130      	bne.n	8002698 <HAL_PCD_EP_DB_Transmit+0x500>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	187a      	adds	r2, r7, r1
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2250      	movs	r2, #80	; 0x50
 8002646:	5a9b      	ldrh	r3, [r3, r2]
 8002648:	b29b      	uxth	r3, r3
 800264a:	001a      	movs	r2, r3
 800264c:	187b      	adds	r3, r7, r1
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	189b      	adds	r3, r3, r2
 8002652:	187a      	adds	r2, r7, r1
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	00da      	lsls	r2, r3, #3
 800265c:	187b      	adds	r3, r7, r1
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	18d3      	adds	r3, r2, r3
 8002662:	4a89      	ldr	r2, [pc, #548]	; (8002888 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002664:	4694      	mov	ip, r2
 8002666:	4463      	add	r3, ip
 8002668:	2184      	movs	r1, #132	; 0x84
 800266a:	187a      	adds	r2, r7, r1
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	187b      	adds	r3, r7, r1
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	881b      	ldrh	r3, [r3, #0]
 8002674:	b29b      	uxth	r3, r3
 8002676:	4a86      	ldr	r2, [pc, #536]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002678:	4013      	ands	r3, r2
 800267a:	b29a      	uxth	r2, r3
 800267c:	187b      	adds	r3, r7, r1
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	801a      	strh	r2, [r3, #0]
 8002682:	187b      	adds	r3, r7, r1
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	b29b      	uxth	r3, r3
 800268a:	4a82      	ldr	r2, [pc, #520]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800268c:	4313      	orrs	r3, r2
 800268e:	b29a      	uxth	r2, r3
 8002690:	187b      	adds	r3, r7, r1
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	801a      	strh	r2, [r3, #0]
 8002696:	e018      	b.n	80026ca <HAL_PCD_EP_DB_Transmit+0x532>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	785b      	ldrb	r3, [r3, #1]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d114      	bne.n	80026ca <HAL_PCD_EP_DB_Transmit+0x532>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2250      	movs	r2, #80	; 0x50
 80026a6:	5a9b      	ldrh	r3, [r3, r2]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	001a      	movs	r2, r3
 80026ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ae:	189b      	adds	r3, r3, r2
 80026b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	00da      	lsls	r2, r3, #3
 80026b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ba:	18d3      	adds	r3, r2, r3
 80026bc:	4a72      	ldr	r2, [pc, #456]	; (8002888 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80026be:	4694      	mov	ip, r2
 80026c0:	4463      	add	r3, ip
 80026c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026c6:	2200      	movs	r2, #0
 80026c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	0011      	movs	r1, r2
 80026d2:	0018      	movs	r0, r3
 80026d4:	f005 fc64 	bl	8007fa0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026d8:	1dbb      	adds	r3, r7, #6
 80026da:	881a      	ldrh	r2, [r3, #0]
 80026dc:	2380      	movs	r3, #128	; 0x80
 80026de:	01db      	lsls	r3, r3, #7
 80026e0:	4013      	ands	r3, r2
 80026e2:	d000      	beq.n	80026e6 <HAL_PCD_EP_DB_Transmit+0x54e>
 80026e4:	e100      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	001a      	movs	r2, r3
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	18d3      	adds	r3, r2, r3
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	2046      	movs	r0, #70	; 0x46
 80026fa:	183b      	adds	r3, r7, r0
 80026fc:	4966      	ldr	r1, [pc, #408]	; (8002898 <HAL_PCD_EP_DB_Transmit+0x700>)
 80026fe:	400a      	ands	r2, r1
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	001a      	movs	r2, r3
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	18d3      	adds	r3, r2, r3
 8002710:	183a      	adds	r2, r7, r0
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	4961      	ldr	r1, [pc, #388]	; (800289c <HAL_PCD_EP_DB_Transmit+0x704>)
 8002716:	430a      	orrs	r2, r1
 8002718:	b292      	uxth	r2, r2
 800271a:	801a      	strh	r2, [r3, #0]
 800271c:	e0e4      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800271e:	1dbb      	adds	r3, r7, #6
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	01db      	lsls	r3, r3, #7
 8002726:	4013      	ands	r3, r2
 8002728:	d11a      	bne.n	8002760 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	001a      	movs	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	18d3      	adds	r3, r2, r3
 8002738:	881b      	ldrh	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
 800273c:	204c      	movs	r0, #76	; 0x4c
 800273e:	183b      	adds	r3, r7, r0
 8002740:	4955      	ldr	r1, [pc, #340]	; (8002898 <HAL_PCD_EP_DB_Transmit+0x700>)
 8002742:	400a      	ands	r2, r1
 8002744:	801a      	strh	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	001a      	movs	r2, r3
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	18d3      	adds	r3, r2, r3
 8002754:	183a      	adds	r2, r7, r0
 8002756:	8812      	ldrh	r2, [r2, #0]
 8002758:	4950      	ldr	r1, [pc, #320]	; (800289c <HAL_PCD_EP_DB_Transmit+0x704>)
 800275a:	430a      	orrs	r2, r1
 800275c:	b292      	uxth	r2, r2
 800275e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2224      	movs	r2, #36	; 0x24
 8002764:	5c9b      	ldrb	r3, [r3, r2]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d000      	beq.n	800276c <HAL_PCD_EP_DB_Transmit+0x5d4>
 800276a:	e0bd      	b.n	80028e8 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	214e      	movs	r1, #78	; 0x4e
 8002772:	187b      	adds	r3, r7, r1
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	18d2      	adds	r2, r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	69da      	ldr	r2, [r3, #28]
 8002780:	187b      	adds	r3, r7, r1
 8002782:	881b      	ldrh	r3, [r3, #0]
 8002784:	18d2      	adds	r2, r2, r3
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	6a1a      	ldr	r2, [r3, #32]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	429a      	cmp	r2, r3
 8002794:	d309      	bcc.n	80027aa <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a1a      	ldr	r2, [r3, #32]
 80027a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a2:	1ad2      	subs	r2, r2, r3
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	621a      	str	r2, [r3, #32]
 80027a8:	e016      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	6a1b      	ldr	r3, [r3, #32]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d108      	bne.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 80027b2:	234e      	movs	r3, #78	; 0x4e
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	881b      	ldrh	r3, [r3, #0]
 80027b8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2224      	movs	r2, #36	; 0x24
 80027be:	2100      	movs	r1, #0
 80027c0:	5499      	strb	r1, [r3, r2]
 80027c2:	e009      	b.n	80027d8 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2224      	movs	r2, #36	; 0x24
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	667b      	str	r3, [r7, #100]	; 0x64
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	785b      	ldrb	r3, [r3, #1]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d15c      	bne.n	80028a0 <HAL_PCD_EP_DB_Transmit+0x708>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2250      	movs	r2, #80	; 0x50
 80027f2:	5a9b      	ldrh	r3, [r3, r2]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	001a      	movs	r2, r3
 80027f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	00da      	lsls	r2, r3, #3
 8002804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002806:	18d3      	adds	r3, r2, r3
 8002808:	4a1f      	ldr	r2, [pc, #124]	; (8002888 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800280a:	4694      	mov	ip, r2
 800280c:	4463      	add	r3, ip
 800280e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002810:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002812:	2b00      	cmp	r3, #0
 8002814:	d110      	bne.n	8002838 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8002816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800281e:	4013      	ands	r3, r2
 8002820:	b29a      	uxth	r2, r3
 8002822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002824:	801a      	strh	r2, [r3, #0]
 8002826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	b29b      	uxth	r3, r3
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	b29a      	uxth	r2, r3
 8002832:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	e04d      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800283a:	2b3e      	cmp	r3, #62	; 0x3e
 800283c:	d810      	bhi.n	8002860 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800283e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	657b      	str	r3, [r7, #84]	; 0x54
 8002844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002846:	2201      	movs	r2, #1
 8002848:	4013      	ands	r3, r2
 800284a:	d002      	beq.n	8002852 <HAL_PCD_EP_DB_Transmit+0x6ba>
 800284c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800284e:	3301      	adds	r3, #1
 8002850:	657b      	str	r3, [r7, #84]	; 0x54
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	b29b      	uxth	r3, r3
 8002856:	029b      	lsls	r3, r3, #10
 8002858:	b29a      	uxth	r2, r3
 800285a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	e039      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	657b      	str	r3, [r7, #84]	; 0x54
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	221f      	movs	r2, #31
 800286a:	4013      	ands	r3, r2
 800286c:	d102      	bne.n	8002874 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800286e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002870:	3b01      	subs	r3, #1
 8002872:	657b      	str	r3, [r7, #84]	; 0x54
 8002874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002876:	b29b      	uxth	r3, r3
 8002878:	029b      	lsls	r3, r3, #10
 800287a:	b29b      	uxth	r3, r3
 800287c:	4a05      	ldr	r2, [pc, #20]	; (8002894 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	b29a      	uxth	r2, r3
 8002882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	e025      	b.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002888:	00000406 	.word	0x00000406
 800288c:	00000402 	.word	0x00000402
 8002890:	ffff83ff 	.word	0xffff83ff
 8002894:	ffff8000 	.word	0xffff8000
 8002898:	ffff8f8f 	.word	0xffff8f8f
 800289c:	ffffc080 	.word	0xffffc080
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	785b      	ldrb	r3, [r3, #1]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d115      	bne.n	80028d4 <HAL_PCD_EP_DB_Transmit+0x73c>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2250      	movs	r2, #80	; 0x50
 80028ae:	5a9b      	ldrh	r3, [r3, r2]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	001a      	movs	r2, r3
 80028b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	667b      	str	r3, [r7, #100]	; 0x64
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	00da      	lsls	r2, r3, #3
 80028c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028c2:	18d3      	adds	r3, r2, r3
 80028c4:	4a1e      	ldr	r2, [pc, #120]	; (8002940 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 80028c6:	4694      	mov	ip, r2
 80028c8:	4463      	add	r3, ip
 80028ca:	663b      	str	r3, [r7, #96]	; 0x60
 80028cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028d2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6818      	ldr	r0, [r3, #0]
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	6959      	ldr	r1, [r3, #20]
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	895a      	ldrh	r2, [r3, #10]
 80028e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	f003 fc78 	bl	80061d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	001a      	movs	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	18d3      	adds	r3, r2, r3
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	2010      	movs	r0, #16
 80028fc:	183b      	adds	r3, r7, r0
 80028fe:	4911      	ldr	r1, [pc, #68]	; (8002944 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8002900:	400a      	ands	r2, r1
 8002902:	801a      	strh	r2, [r3, #0]
 8002904:	183b      	adds	r3, r7, r0
 8002906:	183a      	adds	r2, r7, r0
 8002908:	8812      	ldrh	r2, [r2, #0]
 800290a:	2110      	movs	r1, #16
 800290c:	404a      	eors	r2, r1
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	183b      	adds	r3, r7, r0
 8002912:	183a      	adds	r2, r7, r0
 8002914:	8812      	ldrh	r2, [r2, #0]
 8002916:	2120      	movs	r1, #32
 8002918:	404a      	eors	r2, r1
 800291a:	801a      	strh	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	001a      	movs	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	183a      	adds	r2, r7, r0
 800292c:	8812      	ldrh	r2, [r2, #0]
 800292e:	4906      	ldr	r1, [pc, #24]	; (8002948 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8002930:	430a      	orrs	r2, r1
 8002932:	b292      	uxth	r2, r2
 8002934:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	0018      	movs	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	b022      	add	sp, #136	; 0x88
 800293e:	bd80      	pop	{r7, pc}
 8002940:	00000406 	.word	0x00000406
 8002944:	ffff8fbf 	.word	0xffff8fbf
 8002948:	ffff8080 	.word	0xffff8080

0800294c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	0008      	movs	r0, r1
 8002956:	0011      	movs	r1, r2
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	240a      	movs	r4, #10
 800295c:	193b      	adds	r3, r7, r4
 800295e:	1c02      	adds	r2, r0, #0
 8002960:	801a      	strh	r2, [r3, #0]
 8002962:	2308      	movs	r3, #8
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	1c0a      	adds	r2, r1, #0
 8002968:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800296a:	0021      	movs	r1, r4
 800296c:	187b      	adds	r3, r7, r1
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00c      	beq.n	8002994 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800297a:	187b      	adds	r3, r7, r1
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	2207      	movs	r2, #7
 8002980:	4013      	ands	r3, r2
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	0013      	movs	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	189b      	adds	r3, r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	18d3      	adds	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e00b      	b.n	80029ac <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002994:	230a      	movs	r3, #10
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	881a      	ldrh	r2, [r3, #0]
 800299a:	0013      	movs	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	3369      	adds	r3, #105	; 0x69
 80029a4:	33ff      	adds	r3, #255	; 0xff
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80029ac:	2308      	movs	r3, #8
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d107      	bne.n	80029c6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	80da      	strh	r2, [r3, #6]
 80029c4:	e00b      	b.n	80029de <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	2201      	movs	r2, #1
 80029ca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	0c1b      	lsrs	r3, r3, #16
 80029d8:	b29a      	uxth	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	0018      	movs	r0, r3
 80029e2:	46bd      	mov	sp, r7
 80029e4:	b007      	add	sp, #28
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	23ba      	movs	r3, #186	; 0xba
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	2101      	movs	r1, #1
 80029fe:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	23b8      	movs	r3, #184	; 0xb8
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	2100      	movs	r1, #0
 8002a08:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2254      	movs	r2, #84	; 0x54
 8002a0e:	5a9b      	ldrh	r3, [r3, r2]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	2201      	movs	r2, #1
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b299      	uxth	r1, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2254      	movs	r2, #84	; 0x54
 8002a1c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2254      	movs	r2, #84	; 0x54
 8002a22:	5a9b      	ldrh	r3, [r3, r2]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2202      	movs	r2, #2
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b299      	uxth	r1, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2254      	movs	r2, #84	; 0x54
 8002a30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	000a      	movs	r2, r1
 8002a46:	1cfb      	adds	r3, r7, #3
 8002a48:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b002      	add	sp, #8
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a54:	b5b0      	push	{r4, r5, r7, lr}
 8002a56:	b08a      	sub	sp, #40	; 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f000 fbbf 	bl	80031e6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a68:	4bc9      	ldr	r3, [pc, #804]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	220c      	movs	r2, #12
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a72:	4bc7      	ldr	r3, [pc, #796]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2201      	movs	r2, #1
 8002a84:	4013      	ands	r3, r2
 8002a86:	d100      	bne.n	8002a8a <HAL_RCC_OscConfig+0x36>
 8002a88:	e07e      	b.n	8002b88 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d007      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d112      	bne.n	8002abc <HAL_RCC_OscConfig+0x68>
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	025b      	lsls	r3, r3, #9
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d10d      	bne.n	8002abc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4bbb      	ldr	r3, [pc, #748]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	2380      	movs	r3, #128	; 0x80
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d100      	bne.n	8002aae <HAL_RCC_OscConfig+0x5a>
 8002aac:	e06b      	b.n	8002b86 <HAL_RCC_OscConfig+0x132>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d167      	bne.n	8002b86 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f000 fb95 	bl	80031e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	025b      	lsls	r3, r3, #9
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x84>
 8002ac8:	4bb1      	ldr	r3, [pc, #708]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4bb0      	ldr	r3, [pc, #704]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002ace:	2180      	movs	r1, #128	; 0x80
 8002ad0:	0249      	lsls	r1, r1, #9
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e027      	b.n	8002b28 <HAL_RCC_OscConfig+0xd4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	23a0      	movs	r3, #160	; 0xa0
 8002ade:	02db      	lsls	r3, r3, #11
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d10e      	bne.n	8002b02 <HAL_RCC_OscConfig+0xae>
 8002ae4:	4baa      	ldr	r3, [pc, #680]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4ba9      	ldr	r3, [pc, #676]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002aea:	2180      	movs	r1, #128	; 0x80
 8002aec:	02c9      	lsls	r1, r1, #11
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	4ba7      	ldr	r3, [pc, #668]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	4ba6      	ldr	r3, [pc, #664]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	0249      	lsls	r1, r1, #9
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e012      	b.n	8002b28 <HAL_RCC_OscConfig+0xd4>
 8002b02:	4ba3      	ldr	r3, [pc, #652]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4ba2      	ldr	r3, [pc, #648]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b08:	49a2      	ldr	r1, [pc, #648]	; (8002d94 <HAL_RCC_OscConfig+0x340>)
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	025b      	lsls	r3, r3, #9
 8002b16:	4013      	ands	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4b9c      	ldr	r3, [pc, #624]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b9b      	ldr	r3, [pc, #620]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b22:	499d      	ldr	r1, [pc, #628]	; (8002d98 <HAL_RCC_OscConfig+0x344>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d015      	beq.n	8002b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fd fed0 	bl	80008d4 <HAL_GetTick>
 8002b34:	0003      	movs	r3, r0
 8002b36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b38:	e009      	b.n	8002b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b3a:	f7fd fecb 	bl	80008d4 <HAL_GetTick>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d902      	bls.n	8002b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	f000 fb4c 	bl	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b4e:	4b90      	ldr	r3, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	2380      	movs	r3, #128	; 0x80
 8002b54:	029b      	lsls	r3, r3, #10
 8002b56:	4013      	ands	r3, r2
 8002b58:	d0ef      	beq.n	8002b3a <HAL_RCC_OscConfig+0xe6>
 8002b5a:	e015      	b.n	8002b88 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5c:	f7fd feba 	bl	80008d4 <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b66:	f7fd feb5 	bl	80008d4 <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e336      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b78:	4b85      	ldr	r3, [pc, #532]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	; 0x80
 8002b7e:	029b      	lsls	r3, r3, #10
 8002b80:	4013      	ands	r3, r2
 8002b82:	d1f0      	bne.n	8002b66 <HAL_RCC_OscConfig+0x112>
 8002b84:	e000      	b.n	8002b88 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d100      	bne.n	8002b94 <HAL_RCC_OscConfig+0x140>
 8002b92:	e099      	b.n	8002cc8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	2220      	movs	r2, #32
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d009      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002ba2:	4b7b      	ldr	r3, [pc, #492]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b7a      	ldr	r3, [pc, #488]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002ba8:	2120      	movs	r1, #32
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	4393      	bics	r3, r2
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d005      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b0c      	cmp	r3, #12
 8002bc0:	d13e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1ec>
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d13b      	bne.n	8002c40 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002bc8:	4b71      	ldr	r3, [pc, #452]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2204      	movs	r2, #4
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_RCC_OscConfig+0x188>
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e304      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a6e      	ldr	r2, [pc, #440]	; (8002d9c <HAL_RCC_OscConfig+0x348>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	0019      	movs	r1, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	021a      	lsls	r2, r3, #8
 8002bec:	4b68      	ldr	r3, [pc, #416]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002bf2:	4b67      	ldr	r3, [pc, #412]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2209      	movs	r2, #9
 8002bf8:	4393      	bics	r3, r2
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4b64      	ldr	r3, [pc, #400]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c04:	f000 fc42 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8002c08:	0001      	movs	r1, r0
 8002c0a:	4b61      	ldr	r3, [pc, #388]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	091b      	lsrs	r3, r3, #4
 8002c10:	220f      	movs	r2, #15
 8002c12:	4013      	ands	r3, r2
 8002c14:	4a62      	ldr	r2, [pc, #392]	; (8002da0 <HAL_RCC_OscConfig+0x34c>)
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
 8002c18:	000a      	movs	r2, r1
 8002c1a:	40da      	lsrs	r2, r3
 8002c1c:	4b61      	ldr	r3, [pc, #388]	; (8002da4 <HAL_RCC_OscConfig+0x350>)
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c20:	4b61      	ldr	r3, [pc, #388]	; (8002da8 <HAL_RCC_OscConfig+0x354>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2513      	movs	r5, #19
 8002c26:	197c      	adds	r4, r7, r5
 8002c28:	0018      	movs	r0, r3
 8002c2a:	f7fd fe0d 	bl	8000848 <HAL_InitTick>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c32:	197b      	adds	r3, r7, r5
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d046      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002c3a:	197b      	adds	r3, r7, r5
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	e2d2      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d027      	beq.n	8002c96 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c46:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2209      	movs	r2, #9
 8002c4c:	4393      	bics	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c58:	f7fd fe3c 	bl	80008d4 <HAL_GetTick>
 8002c5c:	0003      	movs	r3, r0
 8002c5e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fd fe37 	bl	80008d4 <HAL_GetTick>
 8002c66:	0002      	movs	r2, r0
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e2b8      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2204      	movs	r2, #4
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d0f1      	beq.n	8002c62 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b44      	ldr	r3, [pc, #272]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a46      	ldr	r2, [pc, #280]	; (8002d9c <HAL_RCC_OscConfig+0x348>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	021a      	lsls	r2, r3, #8
 8002c8e:	4b40      	ldr	r3, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	e018      	b.n	8002cc8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b3e      	ldr	r3, [pc, #248]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b3d      	ldr	r3, [pc, #244]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	438a      	bics	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fd fe17 	bl	80008d4 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cac:	f7fd fe12 	bl	80008d4 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e293      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cbe:	4b34      	ldr	r3, [pc, #208]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2204      	movs	r2, #4
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	d1f1      	bne.n	8002cac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2210      	movs	r2, #16
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d100      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x280>
 8002cd2:	e0a2      	b.n	8002e1a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d140      	bne.n	8002d5c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d005      	beq.n	8002cf2 <HAL_RCC_OscConfig+0x29e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	69db      	ldr	r3, [r3, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e279      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_RCC_OscConfig+0x358>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	0019      	movs	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d00:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002d02:	430a      	orrs	r2, r1
 8002d04:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d06:	4b22      	ldr	r3, [pc, #136]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	0a19      	lsrs	r1, r3, #8
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	061a      	lsls	r2, r3, #24
 8002d14:	4b1e      	ldr	r3, [pc, #120]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	0b5b      	lsrs	r3, r3, #13
 8002d20:	3301      	adds	r3, #1
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	0212      	lsls	r2, r2, #8
 8002d26:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	210f      	movs	r1, #15
 8002d30:	400b      	ands	r3, r1
 8002d32:	491b      	ldr	r1, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x34c>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <HAL_RCC_OscConfig+0x350>)
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_RCC_OscConfig+0x354>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2513      	movs	r5, #19
 8002d42:	197c      	adds	r4, r7, r5
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7fd fd7f 	bl	8000848 <HAL_InitTick>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d4e:	197b      	adds	r3, r7, r5
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d061      	beq.n	8002e1a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002d56:	197b      	adds	r3, r7, r5
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	e244      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d040      	beq.n	8002de6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_OscConfig+0x33c>)
 8002d6a:	2180      	movs	r1, #128	; 0x80
 8002d6c:	0049      	lsls	r1, r1, #1
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fd fdaf 	bl	80008d4 <HAL_GetTick>
 8002d76:	0003      	movs	r3, r0
 8002d78:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d7a:	e019      	b.n	8002db0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d7c:	f7fd fdaa 	bl	80008d4 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d912      	bls.n	8002db0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e22b      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	40021000 	.word	0x40021000
 8002d94:	fffeffff 	.word	0xfffeffff
 8002d98:	fffbffff 	.word	0xfffbffff
 8002d9c:	ffffe0ff 	.word	0xffffe0ff
 8002da0:	080087e4 	.word	0x080087e4
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004
 8002dac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002db0:	4bca      	ldr	r3, [pc, #808]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d0df      	beq.n	8002d7c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dbc:	4bc7      	ldr	r3, [pc, #796]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4ac7      	ldr	r2, [pc, #796]	; (80030e0 <HAL_RCC_OscConfig+0x68c>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dca:	4bc4      	ldr	r3, [pc, #784]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dd0:	4bc2      	ldr	r3, [pc, #776]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	021b      	lsls	r3, r3, #8
 8002dd6:	0a19      	lsrs	r1, r3, #8
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	061a      	lsls	r2, r3, #24
 8002dde:	4bbf      	ldr	r3, [pc, #764]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	e019      	b.n	8002e1a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002de6:	4bbd      	ldr	r3, [pc, #756]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4bbc      	ldr	r3, [pc, #752]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002dec:	49bd      	ldr	r1, [pc, #756]	; (80030e4 <HAL_RCC_OscConfig+0x690>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fd fd6f 	bl	80008d4 <HAL_GetTick>
 8002df6:	0003      	movs	r3, r0
 8002df8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dfc:	f7fd fd6a 	bl	80008d4 <HAL_GetTick>
 8002e00:	0002      	movs	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e1eb      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e0e:	4bb3      	ldr	r3, [pc, #716]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4013      	ands	r3, r2
 8002e18:	d1f0      	bne.n	8002dfc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2208      	movs	r2, #8
 8002e20:	4013      	ands	r3, r2
 8002e22:	d036      	beq.n	8002e92 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	695b      	ldr	r3, [r3, #20]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d019      	beq.n	8002e60 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e2c:	4bab      	ldr	r3, [pc, #684]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e30:	4baa      	ldr	r3, [pc, #680]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	430a      	orrs	r2, r1
 8002e36:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7fd fd4c 	bl	80008d4 <HAL_GetTick>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e42:	f7fd fd47 	bl	80008d4 <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e1c8      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e54:	4ba1      	ldr	r3, [pc, #644]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e58:	2202      	movs	r2, #2
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d0f1      	beq.n	8002e42 <HAL_RCC_OscConfig+0x3ee>
 8002e5e:	e018      	b.n	8002e92 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e60:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e64:	4b9d      	ldr	r3, [pc, #628]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e66:	2101      	movs	r1, #1
 8002e68:	438a      	bics	r2, r1
 8002e6a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6c:	f7fd fd32 	bl	80008d4 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e74:	e008      	b.n	8002e88 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fd fd2d 	bl	80008d4 <HAL_GetTick>
 8002e7a:	0002      	movs	r2, r0
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d901      	bls.n	8002e88 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e1ae      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e88:	4b94      	ldr	r3, [pc, #592]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d1f1      	bne.n	8002e76 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2204      	movs	r2, #4
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <HAL_RCC_OscConfig+0x44a>
 8002e9c:	e0ae      	b.n	8002ffc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e9e:	2023      	movs	r0, #35	; 0x23
 8002ea0:	183b      	adds	r3, r7, r0
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ea6:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002ea8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eaa:	2380      	movs	r3, #128	; 0x80
 8002eac:	055b      	lsls	r3, r3, #21
 8002eae:	4013      	ands	r3, r2
 8002eb0:	d109      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eb2:	4b8a      	ldr	r3, [pc, #552]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002eb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0549      	lsls	r1, r1, #21
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ec0:	183b      	adds	r3, r7, r0
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec6:	4b88      	ldr	r3, [pc, #544]	; (80030e8 <HAL_RCC_OscConfig+0x694>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d11a      	bne.n	8002f08 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ed2:	4b85      	ldr	r3, [pc, #532]	; (80030e8 <HAL_RCC_OscConfig+0x694>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4b84      	ldr	r3, [pc, #528]	; (80030e8 <HAL_RCC_OscConfig+0x694>)
 8002ed8:	2180      	movs	r1, #128	; 0x80
 8002eda:	0049      	lsls	r1, r1, #1
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ee0:	f7fd fcf8 	bl	80008d4 <HAL_GetTick>
 8002ee4:	0003      	movs	r3, r0
 8002ee6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eea:	f7fd fcf3 	bl	80008d4 <HAL_GetTick>
 8002eee:	0002      	movs	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b64      	cmp	r3, #100	; 0x64
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e174      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	4b7a      	ldr	r3, [pc, #488]	; (80030e8 <HAL_RCC_OscConfig+0x694>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	2380      	movs	r3, #128	; 0x80
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	4013      	ands	r3, r2
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d107      	bne.n	8002f24 <HAL_RCC_OscConfig+0x4d0>
 8002f14:	4b71      	ldr	r3, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f18:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	0049      	lsls	r1, r1, #1
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	651a      	str	r2, [r3, #80]	; 0x50
 8002f22:	e031      	b.n	8002f88 <HAL_RCC_OscConfig+0x534>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10c      	bne.n	8002f46 <HAL_RCC_OscConfig+0x4f2>
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f30:	4b6a      	ldr	r3, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f32:	496c      	ldr	r1, [pc, #432]	; (80030e4 <HAL_RCC_OscConfig+0x690>)
 8002f34:	400a      	ands	r2, r1
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f3c:	4b67      	ldr	r3, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f3e:	496b      	ldr	r1, [pc, #428]	; (80030ec <HAL_RCC_OscConfig+0x698>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	651a      	str	r2, [r3, #80]	; 0x50
 8002f44:	e020      	b.n	8002f88 <HAL_RCC_OscConfig+0x534>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	23a0      	movs	r3, #160	; 0xa0
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d10e      	bne.n	8002f70 <HAL_RCC_OscConfig+0x51c>
 8002f52:	4b62      	ldr	r3, [pc, #392]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f56:	4b61      	ldr	r3, [pc, #388]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	00c9      	lsls	r1, r1, #3
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f60:	4b5e      	ldr	r3, [pc, #376]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f64:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0049      	lsls	r1, r1, #1
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0x534>
 8002f70:	4b5a      	ldr	r3, [pc, #360]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f74:	4b59      	ldr	r3, [pc, #356]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f76:	495b      	ldr	r1, [pc, #364]	; (80030e4 <HAL_RCC_OscConfig+0x690>)
 8002f78:	400a      	ands	r2, r1
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f7c:	4b57      	ldr	r3, [pc, #348]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f80:	4b56      	ldr	r3, [pc, #344]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002f82:	495a      	ldr	r1, [pc, #360]	; (80030ec <HAL_RCC_OscConfig+0x698>)
 8002f84:	400a      	ands	r2, r1
 8002f86:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f90:	f7fd fca0 	bl	80008d4 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f98:	e009      	b.n	8002fae <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	f7fd fc9b 	bl	80008d4 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	4a52      	ldr	r2, [pc, #328]	; (80030f0 <HAL_RCC_OscConfig+0x69c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e11b      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fae:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d0ef      	beq.n	8002f9a <HAL_RCC_OscConfig+0x546>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fbc:	f7fd fc8a 	bl	80008d4 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc4:	e009      	b.n	8002fda <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fc6:	f7fd fc85 	bl	80008d4 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	4a47      	ldr	r2, [pc, #284]	; (80030f0 <HAL_RCC_OscConfig+0x69c>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e105      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fda:	4b40      	ldr	r3, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002fdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fde:	2380      	movs	r3, #128	; 0x80
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d1ef      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fe6:	2323      	movs	r3, #35	; 0x23
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff0:	4b3a      	ldr	r3, [pc, #232]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002ff2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8002ff6:	493f      	ldr	r1, [pc, #252]	; (80030f4 <HAL_RCC_OscConfig+0x6a0>)
 8002ff8:	400a      	ands	r2, r1
 8002ffa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2220      	movs	r2, #32
 8003002:	4013      	ands	r3, r2
 8003004:	d049      	beq.n	800309a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d026      	beq.n	800305c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800300e:	4b33      	ldr	r3, [pc, #204]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	4b32      	ldr	r3, [pc, #200]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8003014:	2101      	movs	r1, #1
 8003016:	430a      	orrs	r2, r1
 8003018:	609a      	str	r2, [r3, #8]
 800301a:	4b30      	ldr	r3, [pc, #192]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 800301c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800301e:	4b2f      	ldr	r3, [pc, #188]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8003020:	2101      	movs	r1, #1
 8003022:	430a      	orrs	r2, r1
 8003024:	635a      	str	r2, [r3, #52]	; 0x34
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x6a4>)
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <HAL_RCC_OscConfig+0x6a4>)
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	0189      	lsls	r1, r1, #6
 8003030:	430a      	orrs	r2, r1
 8003032:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003034:	f7fd fc4e 	bl	80008d4 <HAL_GetTick>
 8003038:	0003      	movs	r3, r0
 800303a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800303e:	f7fd fc49 	bl	80008d4 <HAL_GetTick>
 8003042:	0002      	movs	r2, r0
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e0ca      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2202      	movs	r2, #2
 8003056:	4013      	ands	r3, r2
 8003058:	d0f1      	beq.n	800303e <HAL_RCC_OscConfig+0x5ea>
 800305a:	e01e      	b.n	800309a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800305c:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8003062:	2101      	movs	r1, #1
 8003064:	438a      	bics	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	4b23      	ldr	r3, [pc, #140]	; (80030f8 <HAL_RCC_OscConfig+0x6a4>)
 800306a:	6a1a      	ldr	r2, [r3, #32]
 800306c:	4b22      	ldr	r3, [pc, #136]	; (80030f8 <HAL_RCC_OscConfig+0x6a4>)
 800306e:	4923      	ldr	r1, [pc, #140]	; (80030fc <HAL_RCC_OscConfig+0x6a8>)
 8003070:	400a      	ands	r2, r1
 8003072:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003074:	f7fd fc2e 	bl	80008d4 <HAL_GetTick>
 8003078:	0003      	movs	r3, r0
 800307a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800307e:	f7fd fc29 	bl	80008d4 <HAL_GetTick>
 8003082:	0002      	movs	r2, r0
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e0aa      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003090:	4b12      	ldr	r3, [pc, #72]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d1f1      	bne.n	800307e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d100      	bne.n	80030a4 <HAL_RCC_OscConfig+0x650>
 80030a2:	e09f      	b.n	80031e4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0c      	cmp	r3, #12
 80030a8:	d100      	bne.n	80030ac <HAL_RCC_OscConfig+0x658>
 80030aa:	e078      	b.n	800319e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d159      	bne.n	8003168 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	4b08      	ldr	r3, [pc, #32]	; (80030dc <HAL_RCC_OscConfig+0x688>)
 80030ba:	4911      	ldr	r1, [pc, #68]	; (8003100 <HAL_RCC_OscConfig+0x6ac>)
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7fd fc08 	bl	80008d4 <HAL_GetTick>
 80030c4:	0003      	movs	r3, r0
 80030c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030c8:	e01c      	b.n	8003104 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ca:	f7fd fc03 	bl	80008d4 <HAL_GetTick>
 80030ce:	0002      	movs	r2, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d915      	bls.n	8003104 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e084      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
 80030dc:	40021000 	.word	0x40021000
 80030e0:	ffff1fff 	.word	0xffff1fff
 80030e4:	fffffeff 	.word	0xfffffeff
 80030e8:	40007000 	.word	0x40007000
 80030ec:	fffffbff 	.word	0xfffffbff
 80030f0:	00001388 	.word	0x00001388
 80030f4:	efffffff 	.word	0xefffffff
 80030f8:	40010000 	.word	0x40010000
 80030fc:	ffffdfff 	.word	0xffffdfff
 8003100:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003104:	4b3a      	ldr	r3, [pc, #232]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	049b      	lsls	r3, r3, #18
 800310c:	4013      	ands	r3, r2
 800310e:	d1dc      	bne.n	80030ca <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003110:	4b37      	ldr	r3, [pc, #220]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a37      	ldr	r2, [pc, #220]	; (80031f4 <HAL_RCC_OscConfig+0x7a0>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003128:	431a      	orrs	r2, r3
 800312a:	4b31      	ldr	r3, [pc, #196]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 800312c:	430a      	orrs	r2, r1
 800312e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003130:	4b2f      	ldr	r3, [pc, #188]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	0449      	lsls	r1, r1, #17
 800313a:	430a      	orrs	r2, r1
 800313c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313e:	f7fd fbc9 	bl	80008d4 <HAL_GetTick>
 8003142:	0003      	movs	r3, r0
 8003144:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd fbc4 	bl	80008d4 <HAL_GetTick>
 800314c:	0002      	movs	r2, r0
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e045      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800315a:	4b25      	ldr	r3, [pc, #148]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	049b      	lsls	r3, r3, #18
 8003162:	4013      	ands	r3, r2
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0x6f4>
 8003166:	e03d      	b.n	80031e4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003168:	4b21      	ldr	r3, [pc, #132]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 800316e:	4922      	ldr	r1, [pc, #136]	; (80031f8 <HAL_RCC_OscConfig+0x7a4>)
 8003170:	400a      	ands	r2, r1
 8003172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003174:	f7fd fbae 	bl	80008d4 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800317c:	e008      	b.n	8003190 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800317e:	f7fd fba9 	bl	80008d4 <HAL_GetTick>
 8003182:	0002      	movs	r2, r0
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	2b02      	cmp	r3, #2
 800318a:	d901      	bls.n	8003190 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e02a      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	049b      	lsls	r3, r3, #18
 8003198:	4013      	ands	r3, r2
 800319a:	d1f0      	bne.n	800317e <HAL_RCC_OscConfig+0x72a>
 800319c:	e022      	b.n	80031e4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e01d      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031aa:	4b11      	ldr	r3, [pc, #68]	; (80031f0 <HAL_RCC_OscConfig+0x79c>)
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	025b      	lsls	r3, r3, #9
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	429a      	cmp	r2, r3
 80031be:	d10f      	bne.n	80031e0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	23f0      	movs	r3, #240	; 0xf0
 80031c4:	039b      	lsls	r3, r3, #14
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d001      	beq.n	80031e4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e000      	b.n	80031e6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	0018      	movs	r0, r3
 80031e8:	46bd      	mov	sp, r7
 80031ea:	b00a      	add	sp, #40	; 0x28
 80031ec:	bdb0      	pop	{r4, r5, r7, pc}
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	40021000 	.word	0x40021000
 80031f4:	ff02ffff 	.word	0xff02ffff
 80031f8:	feffffff 	.word	0xfeffffff

080031fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031fc:	b5b0      	push	{r4, r5, r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e128      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003210:	4b96      	ldr	r3, [pc, #600]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2201      	movs	r2, #1
 8003216:	4013      	ands	r3, r2
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d91e      	bls.n	800325c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321e:	4b93      	ldr	r3, [pc, #588]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4393      	bics	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	4b90      	ldr	r3, [pc, #576]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003230:	f7fd fb50 	bl	80008d4 <HAL_GetTick>
 8003234:	0003      	movs	r3, r0
 8003236:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003238:	e009      	b.n	800324e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323a:	f7fd fb4b 	bl	80008d4 <HAL_GetTick>
 800323e:	0002      	movs	r2, r0
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	4a8a      	ldr	r2, [pc, #552]	; (8003470 <HAL_RCC_ClockConfig+0x274>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e109      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b87      	ldr	r3, [pc, #540]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2201      	movs	r2, #1
 8003254:	4013      	ands	r3, r2
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d1ee      	bne.n	800323a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2202      	movs	r2, #2
 8003262:	4013      	ands	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003266:	4b83      	ldr	r3, [pc, #524]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	22f0      	movs	r2, #240	; 0xf0
 800326c:	4393      	bics	r3, r2
 800326e:	0019      	movs	r1, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	4b7f      	ldr	r3, [pc, #508]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003276:	430a      	orrs	r2, r1
 8003278:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2201      	movs	r2, #1
 8003280:	4013      	ands	r3, r2
 8003282:	d100      	bne.n	8003286 <HAL_RCC_ClockConfig+0x8a>
 8003284:	e089      	b.n	800339a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d107      	bne.n	800329e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800328e:	4b79      	ldr	r3, [pc, #484]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	029b      	lsls	r3, r3, #10
 8003296:	4013      	ands	r3, r2
 8003298:	d120      	bne.n	80032dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0e1      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d107      	bne.n	80032b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032a6:	4b73      	ldr	r3, [pc, #460]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	049b      	lsls	r3, r3, #18
 80032ae:	4013      	ands	r3, r2
 80032b0:	d114      	bne.n	80032dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e0d5      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032be:	4b6d      	ldr	r3, [pc, #436]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2204      	movs	r2, #4
 80032c4:	4013      	ands	r3, r2
 80032c6:	d109      	bne.n	80032dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0ca      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032cc:	4b69      	ldr	r3, [pc, #420]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	2380      	movs	r3, #128	; 0x80
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4013      	ands	r3, r2
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0c2      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032dc:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	2203      	movs	r2, #3
 80032e2:	4393      	bics	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	4b62      	ldr	r3, [pc, #392]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 80032ec:	430a      	orrs	r2, r1
 80032ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f0:	f7fd faf0 	bl	80008d4 <HAL_GetTick>
 80032f4:	0003      	movs	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d111      	bne.n	8003324 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003300:	e009      	b.n	8003316 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003302:	f7fd fae7 	bl	80008d4 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	4a58      	ldr	r2, [pc, #352]	; (8003470 <HAL_RCC_ClockConfig+0x274>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0a5      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003316:	4b57      	ldr	r3, [pc, #348]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	220c      	movs	r2, #12
 800331c:	4013      	ands	r3, r2
 800331e:	2b08      	cmp	r3, #8
 8003320:	d1ef      	bne.n	8003302 <HAL_RCC_ClockConfig+0x106>
 8003322:	e03a      	b.n	800339a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	2b03      	cmp	r3, #3
 800332a:	d111      	bne.n	8003350 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800332c:	e009      	b.n	8003342 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800332e:	f7fd fad1 	bl	80008d4 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	4a4d      	ldr	r2, [pc, #308]	; (8003470 <HAL_RCC_ClockConfig+0x274>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e08f      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003342:	4b4c      	ldr	r3, [pc, #304]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	220c      	movs	r2, #12
 8003348:	4013      	ands	r3, r2
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d1ef      	bne.n	800332e <HAL_RCC_ClockConfig+0x132>
 800334e:	e024      	b.n	800339a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d11b      	bne.n	8003390 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003358:	e009      	b.n	800336e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fd fabb 	bl	80008d4 <HAL_GetTick>
 800335e:	0002      	movs	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	4a42      	ldr	r2, [pc, #264]	; (8003470 <HAL_RCC_ClockConfig+0x274>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e079      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	4b41      	ldr	r3, [pc, #260]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	220c      	movs	r2, #12
 8003374:	4013      	ands	r3, r2
 8003376:	2b04      	cmp	r3, #4
 8003378:	d1ef      	bne.n	800335a <HAL_RCC_ClockConfig+0x15e>
 800337a:	e00e      	b.n	800339a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800337c:	f7fd faaa 	bl	80008d4 <HAL_GetTick>
 8003380:	0002      	movs	r2, r0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	4a3a      	ldr	r2, [pc, #232]	; (8003470 <HAL_RCC_ClockConfig+0x274>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e068      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003390:	4b38      	ldr	r3, [pc, #224]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	220c      	movs	r2, #12
 8003396:	4013      	ands	r3, r2
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800339a:	4b34      	ldr	r3, [pc, #208]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	4013      	ands	r3, r2
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d21e      	bcs.n	80033e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a8:	4b30      	ldr	r3, [pc, #192]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	4393      	bics	r3, r2
 80033b0:	0019      	movs	r1, r3
 80033b2:	4b2e      	ldr	r3, [pc, #184]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033ba:	f7fd fa8b 	bl	80008d4 <HAL_GetTick>
 80033be:	0003      	movs	r3, r0
 80033c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c2:	e009      	b.n	80033d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fd fa86 	bl	80008d4 <HAL_GetTick>
 80033c8:	0002      	movs	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	4a28      	ldr	r2, [pc, #160]	; (8003470 <HAL_RCC_ClockConfig+0x274>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e044      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d8:	4b24      	ldr	r3, [pc, #144]	; (800346c <HAL_RCC_ClockConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2201      	movs	r2, #1
 80033de:	4013      	ands	r3, r2
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d1ee      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2204      	movs	r2, #4
 80033ec:	4013      	ands	r3, r2
 80033ee:	d009      	beq.n	8003404 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_RCC_ClockConfig+0x27c>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	0019      	movs	r1, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68da      	ldr	r2, [r3, #12]
 80033fe:	4b1d      	ldr	r3, [pc, #116]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003400:	430a      	orrs	r2, r1
 8003402:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2208      	movs	r2, #8
 800340a:	4013      	ands	r3, r2
 800340c:	d00a      	beq.n	8003424 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800340e:	4b19      	ldr	r3, [pc, #100]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	4a1a      	ldr	r2, [pc, #104]	; (800347c <HAL_RCC_ClockConfig+0x280>)
 8003414:	4013      	ands	r3, r2
 8003416:	0019      	movs	r1, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	00da      	lsls	r2, r3, #3
 800341e:	4b15      	ldr	r3, [pc, #84]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 8003420:	430a      	orrs	r2, r1
 8003422:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003424:	f000 f832 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003428:	0001      	movs	r1, r0
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_ClockConfig+0x278>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	220f      	movs	r2, #15
 8003432:	4013      	ands	r3, r2
 8003434:	4a12      	ldr	r2, [pc, #72]	; (8003480 <HAL_RCC_ClockConfig+0x284>)
 8003436:	5cd3      	ldrb	r3, [r2, r3]
 8003438:	000a      	movs	r2, r1
 800343a:	40da      	lsrs	r2, r3
 800343c:	4b11      	ldr	r3, [pc, #68]	; (8003484 <HAL_RCC_ClockConfig+0x288>)
 800343e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <HAL_RCC_ClockConfig+0x28c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	250b      	movs	r5, #11
 8003446:	197c      	adds	r4, r7, r5
 8003448:	0018      	movs	r0, r3
 800344a:	f7fd f9fd 	bl	8000848 <HAL_InitTick>
 800344e:	0003      	movs	r3, r0
 8003450:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003452:	197b      	adds	r3, r7, r5
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800345a:	197b      	adds	r3, r7, r5
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	e000      	b.n	8003462 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	0018      	movs	r0, r3
 8003464:	46bd      	mov	sp, r7
 8003466:	b004      	add	sp, #16
 8003468:	bdb0      	pop	{r4, r5, r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	40022000 	.word	0x40022000
 8003470:	00001388 	.word	0x00001388
 8003474:	40021000 	.word	0x40021000
 8003478:	fffff8ff 	.word	0xfffff8ff
 800347c:	ffffc7ff 	.word	0xffffc7ff
 8003480:	080087e4 	.word	0x080087e4
 8003484:	20000000 	.word	0x20000000
 8003488:	20000004 	.word	0x20000004

0800348c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b08e      	sub	sp, #56	; 0x38
 8003490:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800349a:	230c      	movs	r3, #12
 800349c:	4013      	ands	r3, r2
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d014      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x40>
 80034a2:	d900      	bls.n	80034a6 <HAL_RCC_GetSysClockFreq+0x1a>
 80034a4:	e07b      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x112>
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x24>
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d00b      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ae:	e076      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034b0:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2210      	movs	r2, #16
 80034b6:	4013      	ands	r3, r2
 80034b8:	d002      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034ba:	4b43      	ldr	r3, [pc, #268]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034be:	e07c      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80034c0:	4b42      	ldr	r3, [pc, #264]	; (80035cc <HAL_RCC_GetSysClockFreq+0x140>)
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034c4:	e079      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034c6:	4b42      	ldr	r3, [pc, #264]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80034c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034ca:	e076      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	0c9a      	lsrs	r2, r3, #18
 80034d0:	230f      	movs	r3, #15
 80034d2:	401a      	ands	r2, r3
 80034d4:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034dc:	0d9a      	lsrs	r2, r3, #22
 80034de:	2303      	movs	r3, #3
 80034e0:	4013      	ands	r3, r2
 80034e2:	3301      	adds	r3, #1
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e6:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	025b      	lsls	r3, r3, #9
 80034ee:	4013      	ands	r3, r2
 80034f0:	d01a      	beq.n	8003528 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	61bb      	str	r3, [r7, #24]
 80034f6:	2300      	movs	r3, #0
 80034f8:	61fb      	str	r3, [r7, #28]
 80034fa:	4a35      	ldr	r2, [pc, #212]	; (80035d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80034fc:	2300      	movs	r3, #0
 80034fe:	69b8      	ldr	r0, [r7, #24]
 8003500:	69f9      	ldr	r1, [r7, #28]
 8003502:	f7fc fead 	bl	8000260 <__aeabi_lmul>
 8003506:	0002      	movs	r2, r0
 8003508:	000b      	movs	r3, r1
 800350a:	0010      	movs	r0, r2
 800350c:	0019      	movs	r1, r3
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f7fc fe81 	bl	8000220 <__aeabi_uldivmod>
 800351e:	0002      	movs	r2, r0
 8003520:	000b      	movs	r3, r1
 8003522:	0013      	movs	r3, r2
 8003524:	637b      	str	r3, [r7, #52]	; 0x34
 8003526:	e037      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003528:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	4013      	ands	r3, r2
 8003530:	d01a      	beq.n	8003568 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
 800353a:	4a23      	ldr	r2, [pc, #140]	; (80035c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800353c:	2300      	movs	r3, #0
 800353e:	68b8      	ldr	r0, [r7, #8]
 8003540:	68f9      	ldr	r1, [r7, #12]
 8003542:	f7fc fe8d 	bl	8000260 <__aeabi_lmul>
 8003546:	0002      	movs	r2, r0
 8003548:	000b      	movs	r3, r1
 800354a:	0010      	movs	r0, r2
 800354c:	0019      	movs	r1, r3
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f7fc fe61 	bl	8000220 <__aeabi_uldivmod>
 800355e:	0002      	movs	r2, r0
 8003560:	000b      	movs	r3, r1
 8003562:	0013      	movs	r3, r2
 8003564:	637b      	str	r3, [r7, #52]	; 0x34
 8003566:	e017      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	0018      	movs	r0, r3
 800356c:	2300      	movs	r3, #0
 800356e:	0019      	movs	r1, r3
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_RCC_GetSysClockFreq+0x140>)
 8003572:	2300      	movs	r3, #0
 8003574:	f7fc fe74 	bl	8000260 <__aeabi_lmul>
 8003578:	0002      	movs	r2, r0
 800357a:	000b      	movs	r3, r1
 800357c:	0010      	movs	r0, r2
 800357e:	0019      	movs	r1, r3
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	001c      	movs	r4, r3
 8003584:	2300      	movs	r3, #0
 8003586:	001d      	movs	r5, r3
 8003588:	0022      	movs	r2, r4
 800358a:	002b      	movs	r3, r5
 800358c:	f7fc fe48 	bl	8000220 <__aeabi_uldivmod>
 8003590:	0002      	movs	r2, r0
 8003592:	000b      	movs	r3, r1
 8003594:	0013      	movs	r3, r2
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800359a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800359c:	e00d      	b.n	80035ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0b5b      	lsrs	r3, r3, #13
 80035a4:	2207      	movs	r2, #7
 80035a6:	4013      	ands	r3, r2
 80035a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	3301      	adds	r3, #1
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	0212      	lsls	r2, r2, #8
 80035b2:	409a      	lsls	r2, r3
 80035b4:	0013      	movs	r3, r2
 80035b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b00e      	add	sp, #56	; 0x38
 80035c2:	bdb0      	pop	{r4, r5, r7, pc}
 80035c4:	40021000 	.word	0x40021000
 80035c8:	003d0900 	.word	0x003d0900
 80035cc:	00f42400 	.word	0x00f42400
 80035d0:	007a1200 	.word	0x007a1200
 80035d4:	080087fc 	.word	0x080087fc

080035d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035dc:	4b02      	ldr	r3, [pc, #8]	; (80035e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80035de:	681b      	ldr	r3, [r3, #0]
}
 80035e0:	0018      	movs	r0, r3
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	20000000 	.word	0x20000000

080035ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035f0:	f7ff fff2 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 80035f4:	0001      	movs	r1, r0
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	2207      	movs	r2, #7
 80035fe:	4013      	ands	r3, r2
 8003600:	4a04      	ldr	r2, [pc, #16]	; (8003614 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003602:	5cd3      	ldrb	r3, [r2, r3]
 8003604:	40d9      	lsrs	r1, r3
 8003606:	000b      	movs	r3, r1
}
 8003608:	0018      	movs	r0, r3
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	40021000 	.word	0x40021000
 8003614:	080087f4 	.word	0x080087f4

08003618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800361c:	f7ff ffdc 	bl	80035d8 <HAL_RCC_GetHCLKFreq>
 8003620:	0001      	movs	r1, r0
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	0adb      	lsrs	r3, r3, #11
 8003628:	2207      	movs	r2, #7
 800362a:	4013      	ands	r3, r2
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <HAL_RCC_GetPCLK2Freq+0x28>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	40d9      	lsrs	r1, r3
 8003632:	000b      	movs	r3, r1
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	46c0      	nop			; (mov r8, r8)
 800363c:	40021000 	.word	0x40021000
 8003640:	080087f4 	.word	0x080087f4

08003644 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800364c:	2317      	movs	r3, #23
 800364e:	18fb      	adds	r3, r7, r3
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2220      	movs	r2, #32
 800365a:	4013      	ands	r3, r2
 800365c:	d106      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4013      	ands	r3, r2
 8003668:	d100      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800366a:	e0d9      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366c:	4ba4      	ldr	r3, [pc, #656]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800366e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003670:	2380      	movs	r3, #128	; 0x80
 8003672:	055b      	lsls	r3, r3, #21
 8003674:	4013      	ands	r3, r2
 8003676:	d10a      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003678:	4ba1      	ldr	r3, [pc, #644]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800367a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800367c:	4ba0      	ldr	r3, [pc, #640]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800367e:	2180      	movs	r1, #128	; 0x80
 8003680:	0549      	lsls	r1, r1, #21
 8003682:	430a      	orrs	r2, r1
 8003684:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003686:	2317      	movs	r3, #23
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b9d      	ldr	r3, [pc, #628]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4013      	ands	r3, r2
 8003698:	d11a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b9a      	ldr	r3, [pc, #616]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b99      	ldr	r3, [pc, #612]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80036a0:	2180      	movs	r1, #128	; 0x80
 80036a2:	0049      	lsls	r1, r1, #1
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a8:	f7fd f914 	bl	80008d4 <HAL_GetTick>
 80036ac:	0003      	movs	r3, r0
 80036ae:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fd f90f 	bl	80008d4 <HAL_GetTick>
 80036b6:	0002      	movs	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b64      	cmp	r3, #100	; 0x64
 80036be:	d901      	bls.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e118      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c4:	4b8f      	ldr	r3, [pc, #572]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	2380      	movs	r3, #128	; 0x80
 80036ca:	005b      	lsls	r3, r3, #1
 80036cc:	4013      	ands	r3, r2
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80036d0:	4b8b      	ldr	r3, [pc, #556]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	23c0      	movs	r3, #192	; 0xc0
 80036d6:	039b      	lsls	r3, r3, #14
 80036d8:	4013      	ands	r3, r2
 80036da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	23c0      	movs	r3, #192	; 0xc0
 80036e2:	039b      	lsls	r3, r3, #14
 80036e4:	4013      	ands	r3, r2
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d107      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	039b      	lsls	r3, r3, #14
 80036f4:	4013      	ands	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d013      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	23c0      	movs	r3, #192	; 0xc0
 8003702:	029b      	lsls	r3, r3, #10
 8003704:	401a      	ands	r2, r3
 8003706:	23c0      	movs	r3, #192	; 0xc0
 8003708:	029b      	lsls	r3, r3, #10
 800370a:	429a      	cmp	r2, r3
 800370c:	d10a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800370e:	4b7c      	ldr	r3, [pc, #496]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	2380      	movs	r3, #128	; 0x80
 8003714:	029b      	lsls	r3, r3, #10
 8003716:	401a      	ands	r2, r3
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	029b      	lsls	r3, r3, #10
 800371c:	429a      	cmp	r2, r3
 800371e:	d101      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e0e8      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003724:	4b76      	ldr	r3, [pc, #472]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003728:	23c0      	movs	r3, #192	; 0xc0
 800372a:	029b      	lsls	r3, r3, #10
 800372c:	4013      	ands	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d049      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	23c0      	movs	r3, #192	; 0xc0
 800373c:	029b      	lsls	r3, r3, #10
 800373e:	4013      	ands	r3, r2
 8003740:	68fa      	ldr	r2, [r7, #12]
 8003742:	429a      	cmp	r2, r3
 8003744:	d004      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2220      	movs	r2, #32
 800374c:	4013      	ands	r3, r2
 800374e:	d10d      	bne.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	23c0      	movs	r3, #192	; 0xc0
 8003756:	029b      	lsls	r3, r3, #10
 8003758:	4013      	ands	r3, r2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	429a      	cmp	r2, r3
 800375e:	d034      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	2380      	movs	r3, #128	; 0x80
 8003766:	011b      	lsls	r3, r3, #4
 8003768:	4013      	ands	r3, r2
 800376a:	d02e      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800376c:	4b64      	ldr	r3, [pc, #400]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800376e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003770:	4a65      	ldr	r2, [pc, #404]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003772:	4013      	ands	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003776:	4b62      	ldr	r3, [pc, #392]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003778:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800377a:	4b61      	ldr	r3, [pc, #388]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800377c:	2180      	movs	r1, #128	; 0x80
 800377e:	0309      	lsls	r1, r1, #12
 8003780:	430a      	orrs	r2, r1
 8003782:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003784:	4b5e      	ldr	r3, [pc, #376]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003788:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800378a:	4960      	ldr	r1, [pc, #384]	; (800390c <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800378c:	400a      	ands	r2, r1
 800378e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003790:	4b5b      	ldr	r3, [pc, #364]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	2380      	movs	r3, #128	; 0x80
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4013      	ands	r3, r2
 800379e:	d014      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fd f898 	bl	80008d4 <HAL_GetTick>
 80037a4:	0003      	movs	r3, r0
 80037a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037a8:	e009      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037aa:	f7fd f893 	bl	80008d4 <HAL_GetTick>
 80037ae:	0002      	movs	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	4a56      	ldr	r2, [pc, #344]	; (8003910 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e09b      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037be:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4013      	ands	r3, r2
 80037c8:	d0ef      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	23c0      	movs	r3, #192	; 0xc0
 80037d0:	029b      	lsls	r3, r3, #10
 80037d2:	401a      	ands	r2, r3
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	029b      	lsls	r3, r3, #10
 80037d8:	429a      	cmp	r2, r3
 80037da:	d10c      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80037dc:	4b48      	ldr	r3, [pc, #288]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a4c      	ldr	r2, [pc, #304]	; (8003914 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80037e2:	4013      	ands	r3, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	23c0      	movs	r3, #192	; 0xc0
 80037ec:	039b      	lsls	r3, r3, #14
 80037ee:	401a      	ands	r2, r3
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037f2:	430a      	orrs	r2, r1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	23c0      	movs	r3, #192	; 0xc0
 8003800:	029b      	lsls	r3, r3, #10
 8003802:	401a      	ands	r2, r3
 8003804:	4b3e      	ldr	r3, [pc, #248]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003806:	430a      	orrs	r2, r1
 8003808:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800380a:	2317      	movs	r3, #23
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d105      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003814:	4b3a      	ldr	r3, [pc, #232]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003818:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800381a:	493f      	ldr	r1, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800381c:	400a      	ands	r2, r1
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2201      	movs	r2, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d009      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800382a:	4b35      	ldr	r3, [pc, #212]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800382c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800382e:	2203      	movs	r2, #3
 8003830:	4393      	bics	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	4b31      	ldr	r3, [pc, #196]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800383a:	430a      	orrs	r2, r1
 800383c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	2202      	movs	r2, #2
 8003844:	4013      	ands	r3, r2
 8003846:	d009      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800384a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384c:	220c      	movs	r2, #12
 800384e:	4393      	bics	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691a      	ldr	r2, [r3, #16]
 8003856:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003858:	430a      	orrs	r2, r1
 800385a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2204      	movs	r2, #4
 8003862:	4013      	ands	r3, r2
 8003864:	d009      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003866:	4b26      	ldr	r3, [pc, #152]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386a:	4a2c      	ldr	r2, [pc, #176]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003876:	430a      	orrs	r2, r1
 8003878:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2208      	movs	r2, #8
 8003880:	4013      	ands	r3, r2
 8003882:	d009      	beq.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003884:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003888:	4a25      	ldr	r2, [pc, #148]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800388a:	4013      	ands	r3, r2
 800388c:	0019      	movs	r1, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003894:	430a      	orrs	r2, r1
 8003896:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	2380      	movs	r3, #128	; 0x80
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4013      	ands	r3, r2
 80038a2:	d009      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80038a4:	4b16      	ldr	r3, [pc, #88]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a8:	4a17      	ldr	r2, [pc, #92]	; (8003908 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038aa:	4013      	ands	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038b4:	430a      	orrs	r2, r1
 80038b6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2240      	movs	r2, #64	; 0x40
 80038be:	4013      	ands	r3, r2
 80038c0:	d009      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	0019      	movs	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038d2:	430a      	orrs	r2, r1
 80038d4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	4013      	ands	r3, r2
 80038de:	d009      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e4:	4a10      	ldr	r2, [pc, #64]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1a      	ldr	r2, [r3, #32]
 80038ee:	4b04      	ldr	r3, [pc, #16]	; (8003900 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80038f0:	430a      	orrs	r2, r1
 80038f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b006      	add	sp, #24
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	40021000 	.word	0x40021000
 8003904:	40007000 	.word	0x40007000
 8003908:	fffcffff 	.word	0xfffcffff
 800390c:	fff7ffff 	.word	0xfff7ffff
 8003910:	00001388 	.word	0x00001388
 8003914:	ffcfffff 	.word	0xffcfffff
 8003918:	efffffff 	.word	0xefffffff
 800391c:	fffff3ff 	.word	0xfffff3ff
 8003920:	ffffcfff 	.word	0xffffcfff
 8003924:	fbffffff 	.word	0xfbffffff
 8003928:	fff3ffff 	.word	0xfff3ffff

0800392c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e044      	b.n	80039c8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003942:	2b00      	cmp	r3, #0
 8003944:	d107      	bne.n	8003956 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2274      	movs	r2, #116	; 0x74
 800394a:	2100      	movs	r1, #0
 800394c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	0018      	movs	r0, r3
 8003952:	f7fc fe8b 	bl	800066c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2224      	movs	r2, #36	; 0x24
 800395a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2101      	movs	r1, #1
 8003968:	438a      	bics	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	0018      	movs	r0, r3
 8003970:	f000 f830 	bl	80039d4 <UART_SetConfig>
 8003974:	0003      	movs	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e024      	b.n	80039c8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	0018      	movs	r0, r3
 800398a:	f000 fae1 	bl	8003f50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	490d      	ldr	r1, [pc, #52]	; (80039d0 <HAL_UART_Init+0xa4>)
 800399a:	400a      	ands	r2, r1
 800399c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689a      	ldr	r2, [r3, #8]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	212a      	movs	r1, #42	; 0x2a
 80039aa:	438a      	bics	r2, r1
 80039ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2101      	movs	r1, #1
 80039ba:	430a      	orrs	r2, r1
 80039bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	0018      	movs	r0, r3
 80039c2:	f000 fb79 	bl	80040b8 <UART_CheckIdleState>
 80039c6:	0003      	movs	r3, r0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	ffffb7ff 	.word	0xffffb7ff

080039d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039d4:	b5b0      	push	{r4, r5, r7, lr}
 80039d6:	b08e      	sub	sp, #56	; 0x38
 80039d8:	af00      	add	r7, sp, #0
 80039da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039dc:	231a      	movs	r3, #26
 80039de:	2218      	movs	r2, #24
 80039e0:	4694      	mov	ip, r2
 80039e2:	44bc      	add	ip, r7
 80039e4:	4463      	add	r3, ip
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	689a      	ldr	r2, [r3, #8]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4ab0      	ldr	r2, [pc, #704]	; (8003ccc <UART_SetConfig+0x2f8>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4aac      	ldr	r2, [pc, #688]	; (8003cd0 <UART_SetConfig+0x2fc>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4aa6      	ldr	r2, [pc, #664]	; (8003cd4 <UART_SetConfig+0x300>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a46:	4313      	orrs	r3, r2
 8003a48:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4aa1      	ldr	r2, [pc, #644]	; (8003cd8 <UART_SetConfig+0x304>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	0019      	movs	r1, r3
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a9d      	ldr	r2, [pc, #628]	; (8003cdc <UART_SetConfig+0x308>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d136      	bne.n	8003ad8 <UART_SetConfig+0x104>
 8003a6a:	4b9d      	ldr	r3, [pc, #628]	; (8003ce0 <UART_SetConfig+0x30c>)
 8003a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6e:	2203      	movs	r2, #3
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	d020      	beq.n	8003ab8 <UART_SetConfig+0xe4>
 8003a76:	d827      	bhi.n	8003ac8 <UART_SetConfig+0xf4>
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d00d      	beq.n	8003a98 <UART_SetConfig+0xc4>
 8003a7c:	d824      	bhi.n	8003ac8 <UART_SetConfig+0xf4>
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <UART_SetConfig+0xb4>
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d010      	beq.n	8003aa8 <UART_SetConfig+0xd4>
 8003a86:	e01f      	b.n	8003ac8 <UART_SetConfig+0xf4>
 8003a88:	231b      	movs	r3, #27
 8003a8a:	2218      	movs	r2, #24
 8003a8c:	4694      	mov	ip, r2
 8003a8e:	44bc      	add	ip, r7
 8003a90:	4463      	add	r3, ip
 8003a92:	2201      	movs	r2, #1
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	e0c5      	b.n	8003c24 <UART_SetConfig+0x250>
 8003a98:	231b      	movs	r3, #27
 8003a9a:	2218      	movs	r2, #24
 8003a9c:	4694      	mov	ip, r2
 8003a9e:	44bc      	add	ip, r7
 8003aa0:	4463      	add	r3, ip
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e0bd      	b.n	8003c24 <UART_SetConfig+0x250>
 8003aa8:	231b      	movs	r3, #27
 8003aaa:	2218      	movs	r2, #24
 8003aac:	4694      	mov	ip, r2
 8003aae:	44bc      	add	ip, r7
 8003ab0:	4463      	add	r3, ip
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e0b5      	b.n	8003c24 <UART_SetConfig+0x250>
 8003ab8:	231b      	movs	r3, #27
 8003aba:	2218      	movs	r2, #24
 8003abc:	4694      	mov	ip, r2
 8003abe:	44bc      	add	ip, r7
 8003ac0:	4463      	add	r3, ip
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e0ad      	b.n	8003c24 <UART_SetConfig+0x250>
 8003ac8:	231b      	movs	r3, #27
 8003aca:	2218      	movs	r2, #24
 8003acc:	4694      	mov	ip, r2
 8003ace:	44bc      	add	ip, r7
 8003ad0:	4463      	add	r3, ip
 8003ad2:	2210      	movs	r2, #16
 8003ad4:	701a      	strb	r2, [r3, #0]
 8003ad6:	e0a5      	b.n	8003c24 <UART_SetConfig+0x250>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a81      	ldr	r2, [pc, #516]	; (8003ce4 <UART_SetConfig+0x310>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d136      	bne.n	8003b50 <UART_SetConfig+0x17c>
 8003ae2:	4b7f      	ldr	r3, [pc, #508]	; (8003ce0 <UART_SetConfig+0x30c>)
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	220c      	movs	r2, #12
 8003ae8:	4013      	ands	r3, r2
 8003aea:	2b0c      	cmp	r3, #12
 8003aec:	d020      	beq.n	8003b30 <UART_SetConfig+0x15c>
 8003aee:	d827      	bhi.n	8003b40 <UART_SetConfig+0x16c>
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d00d      	beq.n	8003b10 <UART_SetConfig+0x13c>
 8003af4:	d824      	bhi.n	8003b40 <UART_SetConfig+0x16c>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <UART_SetConfig+0x12c>
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d010      	beq.n	8003b20 <UART_SetConfig+0x14c>
 8003afe:	e01f      	b.n	8003b40 <UART_SetConfig+0x16c>
 8003b00:	231b      	movs	r3, #27
 8003b02:	2218      	movs	r2, #24
 8003b04:	4694      	mov	ip, r2
 8003b06:	44bc      	add	ip, r7
 8003b08:	4463      	add	r3, ip
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e089      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b10:	231b      	movs	r3, #27
 8003b12:	2218      	movs	r2, #24
 8003b14:	4694      	mov	ip, r2
 8003b16:	44bc      	add	ip, r7
 8003b18:	4463      	add	r3, ip
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e081      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b20:	231b      	movs	r3, #27
 8003b22:	2218      	movs	r2, #24
 8003b24:	4694      	mov	ip, r2
 8003b26:	44bc      	add	ip, r7
 8003b28:	4463      	add	r3, ip
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e079      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b30:	231b      	movs	r3, #27
 8003b32:	2218      	movs	r2, #24
 8003b34:	4694      	mov	ip, r2
 8003b36:	44bc      	add	ip, r7
 8003b38:	4463      	add	r3, ip
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	701a      	strb	r2, [r3, #0]
 8003b3e:	e071      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b40:	231b      	movs	r3, #27
 8003b42:	2218      	movs	r2, #24
 8003b44:	4694      	mov	ip, r2
 8003b46:	44bc      	add	ip, r7
 8003b48:	4463      	add	r3, ip
 8003b4a:	2210      	movs	r2, #16
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e069      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a64      	ldr	r2, [pc, #400]	; (8003ce8 <UART_SetConfig+0x314>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d107      	bne.n	8003b6a <UART_SetConfig+0x196>
 8003b5a:	231b      	movs	r3, #27
 8003b5c:	2218      	movs	r2, #24
 8003b5e:	4694      	mov	ip, r2
 8003b60:	44bc      	add	ip, r7
 8003b62:	4463      	add	r3, ip
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
 8003b68:	e05c      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a5f      	ldr	r2, [pc, #380]	; (8003cec <UART_SetConfig+0x318>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d107      	bne.n	8003b84 <UART_SetConfig+0x1b0>
 8003b74:	231b      	movs	r3, #27
 8003b76:	2218      	movs	r2, #24
 8003b78:	4694      	mov	ip, r2
 8003b7a:	44bc      	add	ip, r7
 8003b7c:	4463      	add	r3, ip
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e04f      	b.n	8003c24 <UART_SetConfig+0x250>
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a52      	ldr	r2, [pc, #328]	; (8003cd4 <UART_SetConfig+0x300>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d143      	bne.n	8003c16 <UART_SetConfig+0x242>
 8003b8e:	4b54      	ldr	r3, [pc, #336]	; (8003ce0 <UART_SetConfig+0x30c>)
 8003b90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b92:	23c0      	movs	r3, #192	; 0xc0
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4013      	ands	r3, r2
 8003b98:	22c0      	movs	r2, #192	; 0xc0
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d02a      	beq.n	8003bf6 <UART_SetConfig+0x222>
 8003ba0:	22c0      	movs	r2, #192	; 0xc0
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d82e      	bhi.n	8003c06 <UART_SetConfig+0x232>
 8003ba8:	2280      	movs	r2, #128	; 0x80
 8003baa:	0112      	lsls	r2, r2, #4
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d012      	beq.n	8003bd6 <UART_SetConfig+0x202>
 8003bb0:	2280      	movs	r2, #128	; 0x80
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d826      	bhi.n	8003c06 <UART_SetConfig+0x232>
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <UART_SetConfig+0x1f2>
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	00d2      	lsls	r2, r2, #3
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d010      	beq.n	8003be6 <UART_SetConfig+0x212>
 8003bc4:	e01f      	b.n	8003c06 <UART_SetConfig+0x232>
 8003bc6:	231b      	movs	r3, #27
 8003bc8:	2218      	movs	r2, #24
 8003bca:	4694      	mov	ip, r2
 8003bcc:	44bc      	add	ip, r7
 8003bce:	4463      	add	r3, ip
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	701a      	strb	r2, [r3, #0]
 8003bd4:	e026      	b.n	8003c24 <UART_SetConfig+0x250>
 8003bd6:	231b      	movs	r3, #27
 8003bd8:	2218      	movs	r2, #24
 8003bda:	4694      	mov	ip, r2
 8003bdc:	44bc      	add	ip, r7
 8003bde:	4463      	add	r3, ip
 8003be0:	2202      	movs	r2, #2
 8003be2:	701a      	strb	r2, [r3, #0]
 8003be4:	e01e      	b.n	8003c24 <UART_SetConfig+0x250>
 8003be6:	231b      	movs	r3, #27
 8003be8:	2218      	movs	r2, #24
 8003bea:	4694      	mov	ip, r2
 8003bec:	44bc      	add	ip, r7
 8003bee:	4463      	add	r3, ip
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	701a      	strb	r2, [r3, #0]
 8003bf4:	e016      	b.n	8003c24 <UART_SetConfig+0x250>
 8003bf6:	231b      	movs	r3, #27
 8003bf8:	2218      	movs	r2, #24
 8003bfa:	4694      	mov	ip, r2
 8003bfc:	44bc      	add	ip, r7
 8003bfe:	4463      	add	r3, ip
 8003c00:	2208      	movs	r2, #8
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e00e      	b.n	8003c24 <UART_SetConfig+0x250>
 8003c06:	231b      	movs	r3, #27
 8003c08:	2218      	movs	r2, #24
 8003c0a:	4694      	mov	ip, r2
 8003c0c:	44bc      	add	ip, r7
 8003c0e:	4463      	add	r3, ip
 8003c10:	2210      	movs	r2, #16
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e006      	b.n	8003c24 <UART_SetConfig+0x250>
 8003c16:	231b      	movs	r3, #27
 8003c18:	2218      	movs	r2, #24
 8003c1a:	4694      	mov	ip, r2
 8003c1c:	44bc      	add	ip, r7
 8003c1e:	4463      	add	r3, ip
 8003c20:	2210      	movs	r2, #16
 8003c22:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a2a      	ldr	r2, [pc, #168]	; (8003cd4 <UART_SetConfig+0x300>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d000      	beq.n	8003c30 <UART_SetConfig+0x25c>
 8003c2e:	e09e      	b.n	8003d6e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c30:	231b      	movs	r3, #27
 8003c32:	2218      	movs	r2, #24
 8003c34:	4694      	mov	ip, r2
 8003c36:	44bc      	add	ip, r7
 8003c38:	4463      	add	r3, ip
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d01d      	beq.n	8003c7c <UART_SetConfig+0x2a8>
 8003c40:	dc20      	bgt.n	8003c84 <UART_SetConfig+0x2b0>
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d015      	beq.n	8003c72 <UART_SetConfig+0x29e>
 8003c46:	dc1d      	bgt.n	8003c84 <UART_SetConfig+0x2b0>
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d002      	beq.n	8003c52 <UART_SetConfig+0x27e>
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d005      	beq.n	8003c5c <UART_SetConfig+0x288>
 8003c50:	e018      	b.n	8003c84 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c52:	f7ff fccb 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8003c56:	0003      	movs	r3, r0
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c5a:	e01d      	b.n	8003c98 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c5c:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <UART_SetConfig+0x30c>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2210      	movs	r2, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	d002      	beq.n	8003c6c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c66:	4b22      	ldr	r3, [pc, #136]	; (8003cf0 <UART_SetConfig+0x31c>)
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c6a:	e015      	b.n	8003c98 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <UART_SetConfig+0x320>)
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c70:	e012      	b.n	8003c98 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7ff fc0b 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003c76:	0003      	movs	r3, r0
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c7a:	e00d      	b.n	8003c98 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c82:	e009      	b.n	8003c98 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c88:	231a      	movs	r3, #26
 8003c8a:	2218      	movs	r2, #24
 8003c8c:	4694      	mov	ip, r2
 8003c8e:	44bc      	add	ip, r7
 8003c90:	4463      	add	r3, ip
 8003c92:	2201      	movs	r2, #1
 8003c94:	701a      	strb	r2, [r3, #0]
        break;
 8003c96:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d100      	bne.n	8003ca0 <UART_SetConfig+0x2cc>
 8003c9e:	e13c      	b.n	8003f1a <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	0013      	movs	r3, r2
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	189b      	adds	r3, r3, r2
 8003caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d305      	bcc.n	8003cbc <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d91d      	bls.n	8003cf8 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003cbc:	231a      	movs	r3, #26
 8003cbe:	2218      	movs	r2, #24
 8003cc0:	4694      	mov	ip, r2
 8003cc2:	44bc      	add	ip, r7
 8003cc4:	4463      	add	r3, ip
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e126      	b.n	8003f1a <UART_SetConfig+0x546>
 8003ccc:	efff69f3 	.word	0xefff69f3
 8003cd0:	ffffcfff 	.word	0xffffcfff
 8003cd4:	40004800 	.word	0x40004800
 8003cd8:	fffff4ff 	.word	0xfffff4ff
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40004400 	.word	0x40004400
 8003ce8:	40004c00 	.word	0x40004c00
 8003cec:	40005000 	.word	0x40005000
 8003cf0:	003d0900 	.word	0x003d0900
 8003cf4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	617b      	str	r3, [r7, #20]
 8003d00:	6939      	ldr	r1, [r7, #16]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	000b      	movs	r3, r1
 8003d06:	0e1b      	lsrs	r3, r3, #24
 8003d08:	0010      	movs	r0, r2
 8003d0a:	0205      	lsls	r5, r0, #8
 8003d0c:	431d      	orrs	r5, r3
 8003d0e:	000b      	movs	r3, r1
 8003d10:	021c      	lsls	r4, r3, #8
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	60bb      	str	r3, [r7, #8]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	68b8      	ldr	r0, [r7, #8]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	1900      	adds	r0, r0, r4
 8003d24:	4169      	adcs	r1, r5
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f7fc fa74 	bl	8000220 <__aeabi_uldivmod>
 8003d38:	0002      	movs	r2, r0
 8003d3a:	000b      	movs	r3, r1
 8003d3c:	0013      	movs	r3, r2
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d42:	23c0      	movs	r3, #192	; 0xc0
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d309      	bcc.n	8003d5e <UART_SetConfig+0x38a>
 8003d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	035b      	lsls	r3, r3, #13
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d204      	bcs.n	8003d5e <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d5a:	60da      	str	r2, [r3, #12]
 8003d5c:	e0dd      	b.n	8003f1a <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003d5e:	231a      	movs	r3, #26
 8003d60:	2218      	movs	r2, #24
 8003d62:	4694      	mov	ip, r2
 8003d64:	44bc      	add	ip, r7
 8003d66:	4463      	add	r3, ip
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
 8003d6c:	e0d5      	b.n	8003f1a <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	69da      	ldr	r2, [r3, #28]
 8003d72:	2380      	movs	r3, #128	; 0x80
 8003d74:	021b      	lsls	r3, r3, #8
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d000      	beq.n	8003d7c <UART_SetConfig+0x3a8>
 8003d7a:	e074      	b.n	8003e66 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003d7c:	231b      	movs	r3, #27
 8003d7e:	2218      	movs	r2, #24
 8003d80:	4694      	mov	ip, r2
 8003d82:	44bc      	add	ip, r7
 8003d84:	4463      	add	r3, ip
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b08      	cmp	r3, #8
 8003d8a:	d822      	bhi.n	8003dd2 <UART_SetConfig+0x3fe>
 8003d8c:	009a      	lsls	r2, r3, #2
 8003d8e:	4b6b      	ldr	r3, [pc, #428]	; (8003f3c <UART_SetConfig+0x568>)
 8003d90:	18d3      	adds	r3, r2, r3
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d96:	f7ff fc29 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d9e:	e022      	b.n	8003de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003da0:	f7ff fc3a 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8003da4:	0003      	movs	r3, r0
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003da8:	e01d      	b.n	8003de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003daa:	4b65      	ldr	r3, [pc, #404]	; (8003f40 <UART_SetConfig+0x56c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2210      	movs	r2, #16
 8003db0:	4013      	ands	r3, r2
 8003db2:	d002      	beq.n	8003dba <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003db4:	4b63      	ldr	r3, [pc, #396]	; (8003f44 <UART_SetConfig+0x570>)
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003db8:	e015      	b.n	8003de6 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8003dba:	4b63      	ldr	r3, [pc, #396]	; (8003f48 <UART_SetConfig+0x574>)
 8003dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dbe:	e012      	b.n	8003de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dc0:	f7ff fb64 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003dc4:	0003      	movs	r3, r0
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dc8:	e00d      	b.n	8003de6 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dca:	2380      	movs	r3, #128	; 0x80
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dd0:	e009      	b.n	8003de6 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003dd6:	231a      	movs	r3, #26
 8003dd8:	2218      	movs	r2, #24
 8003dda:	4694      	mov	ip, r2
 8003ddc:	44bc      	add	ip, r7
 8003dde:	4463      	add	r3, ip
 8003de0:	2201      	movs	r2, #1
 8003de2:	701a      	strb	r2, [r3, #0]
        break;
 8003de4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d100      	bne.n	8003dee <UART_SetConfig+0x41a>
 8003dec:	e095      	b.n	8003f1a <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	005a      	lsls	r2, r3, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	18d2      	adds	r2, r2, r3
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	0019      	movs	r1, r3
 8003e00:	0010      	movs	r0, r2
 8003e02:	f7fc f981 	bl	8000108 <__udivsi3>
 8003e06:	0003      	movs	r3, r0
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d921      	bls.n	8003e56 <UART_SetConfig+0x482>
 8003e12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e14:	2380      	movs	r3, #128	; 0x80
 8003e16:	025b      	lsls	r3, r3, #9
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d21c      	bcs.n	8003e56 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	200e      	movs	r0, #14
 8003e22:	2418      	movs	r4, #24
 8003e24:	193b      	adds	r3, r7, r4
 8003e26:	181b      	adds	r3, r3, r0
 8003e28:	210f      	movs	r1, #15
 8003e2a:	438a      	bics	r2, r1
 8003e2c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e30:	085b      	lsrs	r3, r3, #1
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	2207      	movs	r2, #7
 8003e36:	4013      	ands	r3, r2
 8003e38:	b299      	uxth	r1, r3
 8003e3a:	193b      	adds	r3, r7, r4
 8003e3c:	181b      	adds	r3, r3, r0
 8003e3e:	193a      	adds	r2, r7, r4
 8003e40:	1812      	adds	r2, r2, r0
 8003e42:	8812      	ldrh	r2, [r2, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	193a      	adds	r2, r7, r4
 8003e4e:	1812      	adds	r2, r2, r0
 8003e50:	8812      	ldrh	r2, [r2, #0]
 8003e52:	60da      	str	r2, [r3, #12]
 8003e54:	e061      	b.n	8003f1a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003e56:	231a      	movs	r3, #26
 8003e58:	2218      	movs	r2, #24
 8003e5a:	4694      	mov	ip, r2
 8003e5c:	44bc      	add	ip, r7
 8003e5e:	4463      	add	r3, ip
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	e059      	b.n	8003f1a <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e66:	231b      	movs	r3, #27
 8003e68:	2218      	movs	r2, #24
 8003e6a:	4694      	mov	ip, r2
 8003e6c:	44bc      	add	ip, r7
 8003e6e:	4463      	add	r3, ip
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d822      	bhi.n	8003ebc <UART_SetConfig+0x4e8>
 8003e76:	009a      	lsls	r2, r3, #2
 8003e78:	4b34      	ldr	r3, [pc, #208]	; (8003f4c <UART_SetConfig+0x578>)
 8003e7a:	18d3      	adds	r3, r2, r3
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e80:	f7ff fbb4 	bl	80035ec <HAL_RCC_GetPCLK1Freq>
 8003e84:	0003      	movs	r3, r0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e88:	e022      	b.n	8003ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e8a:	f7ff fbc5 	bl	8003618 <HAL_RCC_GetPCLK2Freq>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e92:	e01d      	b.n	8003ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e94:	4b2a      	ldr	r3, [pc, #168]	; (8003f40 <UART_SetConfig+0x56c>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2210      	movs	r2, #16
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d002      	beq.n	8003ea4 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e9e:	4b29      	ldr	r3, [pc, #164]	; (8003f44 <UART_SetConfig+0x570>)
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ea2:	e015      	b.n	8003ed0 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <UART_SetConfig+0x574>)
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea8:	e012      	b.n	8003ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7ff faef 	bl	800348c <HAL_RCC_GetSysClockFreq>
 8003eae:	0003      	movs	r3, r0
 8003eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eb2:	e00d      	b.n	8003ed0 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb4:	2380      	movs	r3, #128	; 0x80
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eba:	e009      	b.n	8003ed0 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003ec0:	231a      	movs	r3, #26
 8003ec2:	2218      	movs	r2, #24
 8003ec4:	4694      	mov	ip, r2
 8003ec6:	44bc      	add	ip, r7
 8003ec8:	4463      	add	r3, ip
 8003eca:	2201      	movs	r2, #1
 8003ecc:	701a      	strb	r2, [r3, #0]
        break;
 8003ece:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d021      	beq.n	8003f1a <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	085a      	lsrs	r2, r3, #1
 8003edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ede:	18d2      	adds	r2, r2, r3
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	0019      	movs	r1, r3
 8003ee6:	0010      	movs	r0, r2
 8003ee8:	f7fc f90e 	bl	8000108 <__udivsi3>
 8003eec:	0003      	movs	r3, r0
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef4:	2b0f      	cmp	r3, #15
 8003ef6:	d909      	bls.n	8003f0c <UART_SetConfig+0x538>
 8003ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003efa:	2380      	movs	r3, #128	; 0x80
 8003efc:	025b      	lsls	r3, r3, #9
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d204      	bcs.n	8003f0c <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	e006      	b.n	8003f1a <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003f0c:	231a      	movs	r3, #26
 8003f0e:	2218      	movs	r2, #24
 8003f10:	4694      	mov	ip, r2
 8003f12:	44bc      	add	ip, r7
 8003f14:	4463      	add	r3, ip
 8003f16:	2201      	movs	r2, #1
 8003f18:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2200      	movs	r2, #0
 8003f24:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f26:	231a      	movs	r3, #26
 8003f28:	2218      	movs	r2, #24
 8003f2a:	4694      	mov	ip, r2
 8003f2c:	44bc      	add	ip, r7
 8003f2e:	4463      	add	r3, ip
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b00e      	add	sp, #56	; 0x38
 8003f38:	bdb0      	pop	{r4, r5, r7, pc}
 8003f3a:	46c0      	nop			; (mov r8, r8)
 8003f3c:	08008808 	.word	0x08008808
 8003f40:	40021000 	.word	0x40021000
 8003f44:	003d0900 	.word	0x003d0900
 8003f48:	00f42400 	.word	0x00f42400
 8003f4c:	0800882c 	.word	0x0800882c

08003f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b082      	sub	sp, #8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	4013      	ands	r3, r2
 8003f60:	d00b      	beq.n	8003f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a4a      	ldr	r2, [pc, #296]	; (8004094 <UART_AdvFeatureConfig+0x144>)
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	2202      	movs	r2, #2
 8003f80:	4013      	ands	r3, r2
 8003f82:	d00b      	beq.n	8003f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4a43      	ldr	r2, [pc, #268]	; (8004098 <UART_AdvFeatureConfig+0x148>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	0019      	movs	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2204      	movs	r2, #4
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	d00b      	beq.n	8003fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a3b      	ldr	r2, [pc, #236]	; (800409c <UART_AdvFeatureConfig+0x14c>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	2208      	movs	r2, #8
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4a34      	ldr	r2, [pc, #208]	; (80040a0 <UART_AdvFeatureConfig+0x150>)
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	0019      	movs	r1, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	2210      	movs	r2, #16
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	4a2c      	ldr	r2, [pc, #176]	; (80040a4 <UART_AdvFeatureConfig+0x154>)
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2220      	movs	r2, #32
 8004008:	4013      	ands	r3, r2
 800400a:	d00b      	beq.n	8004024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	4a25      	ldr	r2, [pc, #148]	; (80040a8 <UART_AdvFeatureConfig+0x158>)
 8004014:	4013      	ands	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2240      	movs	r2, #64	; 0x40
 800402a:	4013      	ands	r3, r2
 800402c:	d01d      	beq.n	800406a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4a1d      	ldr	r2, [pc, #116]	; (80040ac <UART_AdvFeatureConfig+0x15c>)
 8004036:	4013      	ands	r3, r2
 8004038:	0019      	movs	r1, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	035b      	lsls	r3, r3, #13
 800404e:	429a      	cmp	r2, r3
 8004050:	d10b      	bne.n	800406a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a15      	ldr	r2, [pc, #84]	; (80040b0 <UART_AdvFeatureConfig+0x160>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	2280      	movs	r2, #128	; 0x80
 8004070:	4013      	ands	r3, r2
 8004072:	d00b      	beq.n	800408c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a0e      	ldr	r2, [pc, #56]	; (80040b4 <UART_AdvFeatureConfig+0x164>)
 800407c:	4013      	ands	r3, r2
 800407e:	0019      	movs	r1, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	b002      	add	sp, #8
 8004092:	bd80      	pop	{r7, pc}
 8004094:	fffdffff 	.word	0xfffdffff
 8004098:	fffeffff 	.word	0xfffeffff
 800409c:	fffbffff 	.word	0xfffbffff
 80040a0:	ffff7fff 	.word	0xffff7fff
 80040a4:	ffffefff 	.word	0xffffefff
 80040a8:	ffffdfff 	.word	0xffffdfff
 80040ac:	ffefffff 	.word	0xffefffff
 80040b0:	ff9fffff 	.word	0xff9fffff
 80040b4:	fff7ffff 	.word	0xfff7ffff

080040b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af02      	add	r7, sp, #8
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2280      	movs	r2, #128	; 0x80
 80040c4:	2100      	movs	r1, #0
 80040c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040c8:	f7fc fc04 	bl	80008d4 <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2208      	movs	r2, #8
 80040d8:	4013      	ands	r3, r2
 80040da:	2b08      	cmp	r3, #8
 80040dc:	d10c      	bne.n	80040f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2280      	movs	r2, #128	; 0x80
 80040e2:	0391      	lsls	r1, r2, #14
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	4a17      	ldr	r2, [pc, #92]	; (8004144 <UART_CheckIdleState+0x8c>)
 80040e8:	9200      	str	r2, [sp, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f000 f82c 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 80040f0:	1e03      	subs	r3, r0, #0
 80040f2:	d001      	beq.n	80040f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e021      	b.n	800413c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2204      	movs	r2, #4
 8004100:	4013      	ands	r3, r2
 8004102:	2b04      	cmp	r3, #4
 8004104:	d10c      	bne.n	8004120 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2280      	movs	r2, #128	; 0x80
 800410a:	03d1      	lsls	r1, r2, #15
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	4a0d      	ldr	r2, [pc, #52]	; (8004144 <UART_CheckIdleState+0x8c>)
 8004110:	9200      	str	r2, [sp, #0]
 8004112:	2200      	movs	r2, #0
 8004114:	f000 f818 	bl	8004148 <UART_WaitOnFlagUntilTimeout>
 8004118:	1e03      	subs	r3, r0, #0
 800411a:	d001      	beq.n	8004120 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e00d      	b.n	800413c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2220      	movs	r2, #32
 800412a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2274      	movs	r2, #116	; 0x74
 8004136:	2100      	movs	r1, #0
 8004138:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	0018      	movs	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	b004      	add	sp, #16
 8004142:	bd80      	pop	{r7, pc}
 8004144:	01ffffff 	.word	0x01ffffff

08004148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b094      	sub	sp, #80	; 0x50
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	1dfb      	adds	r3, r7, #7
 8004156:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004158:	e0a3      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415c:	3301      	adds	r3, #1
 800415e:	d100      	bne.n	8004162 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004160:	e09f      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004162:	f7fc fbb7 	bl	80008d4 <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800416e:	429a      	cmp	r2, r3
 8004170:	d302      	bcc.n	8004178 <UART_WaitOnFlagUntilTimeout+0x30>
 8004172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004174:	2b00      	cmp	r3, #0
 8004176:	d13d      	bne.n	80041f4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004178:	f3ef 8310 	mrs	r3, PRIMASK
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004180:	647b      	str	r3, [r7, #68]	; 0x44
 8004182:	2301      	movs	r3, #1
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004188:	f383 8810 	msr	PRIMASK, r3
}
 800418c:	46c0      	nop			; (mov r8, r8)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	494c      	ldr	r1, [pc, #304]	; (80042cc <UART_WaitOnFlagUntilTimeout+0x184>)
 800419a:	400a      	ands	r2, r1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	f383 8810 	msr	PRIMASK, r3
}
 80041a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80041b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
 80041b4:	2301      	movs	r3, #1
 80041b6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2101      	movs	r1, #1
 80041cc:	438a      	bics	r2, r1
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	f383 8810 	msr	PRIMASK, r3
}
 80041da:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2220      	movs	r2, #32
 80041e0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2220      	movs	r2, #32
 80041e6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2274      	movs	r2, #116	; 0x74
 80041ec:	2100      	movs	r1, #0
 80041ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e067      	b.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2204      	movs	r2, #4
 80041fc:	4013      	ands	r3, r2
 80041fe:	d050      	beq.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69da      	ldr	r2, [r3, #28]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	011b      	lsls	r3, r3, #4
 800420a:	401a      	ands	r2, r3
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	429a      	cmp	r2, r3
 8004212:	d146      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	0112      	lsls	r2, r2, #4
 800421c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421e:	f3ef 8310 	mrs	r3, PRIMASK
 8004222:	613b      	str	r3, [r7, #16]
  return(result);
 8004224:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004228:	2301      	movs	r3, #1
 800422a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4923      	ldr	r1, [pc, #140]	; (80042cc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004240:	400a      	ands	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004246:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004250:	f3ef 8310 	mrs	r3, PRIMASK
 8004254:	61fb      	str	r3, [r7, #28]
  return(result);
 8004256:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004258:	64bb      	str	r3, [r7, #72]	; 0x48
 800425a:	2301      	movs	r3, #1
 800425c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	f383 8810 	msr	PRIMASK, r3
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	438a      	bics	r2, r1
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	f383 8810 	msr	PRIMASK, r3
}
 8004280:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2280      	movs	r2, #128	; 0x80
 8004292:	2120      	movs	r1, #32
 8004294:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2274      	movs	r2, #116	; 0x74
 800429a:	2100      	movs	r1, #0
 800429c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e010      	b.n	80042c4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69db      	ldr	r3, [r3, #28]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	425a      	negs	r2, r3
 80042b2:	4153      	adcs	r3, r2
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	001a      	movs	r2, r3
 80042b8:	1dfb      	adds	r3, r7, #7
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d100      	bne.n	80042c2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80042c0:	e74b      	b.n	800415a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	0018      	movs	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	b014      	add	sp, #80	; 0x50
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	fffffe5f 	.word	0xfffffe5f

080042d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2244      	movs	r2, #68	; 0x44
 80042dc:	2100      	movs	r1, #0
 80042de:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <USB_EnableGlobalInt+0x28>)
 80042e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	b299      	uxth	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2240      	movs	r2, #64	; 0x40
 80042ec:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b004      	add	sp, #16
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	0000bf80 	.word	0x0000bf80

080042fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <USB_DisableGlobalInt+0x30>)
 8004306:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2240      	movs	r2, #64	; 0x40
 800430c:	5a9b      	ldrh	r3, [r3, r2]
 800430e:	b29b      	uxth	r3, r3
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	b292      	uxth	r2, r2
 8004314:	43d2      	mvns	r2, r2
 8004316:	b292      	uxth	r2, r2
 8004318:	4013      	ands	r3, r2
 800431a:	b299      	uxth	r1, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2240      	movs	r2, #64	; 0x40
 8004320:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}
 800432c:	0000bf80 	.word	0x0000bf80

08004330 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004330:	b084      	sub	sp, #16
 8004332:	b590      	push	{r4, r7, lr}
 8004334:	46c6      	mov	lr, r8
 8004336:	b500      	push	{lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	2004      	movs	r0, #4
 8004340:	2410      	movs	r4, #16
 8004342:	46a4      	mov	ip, r4
 8004344:	2408      	movs	r4, #8
 8004346:	46a0      	mov	r8, r4
 8004348:	44b8      	add	r8, r7
 800434a:	44c4      	add	ip, r8
 800434c:	4460      	add	r0, ip
 800434e:	6001      	str	r1, [r0, #0]
 8004350:	6042      	str	r2, [r0, #4]
 8004352:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2240      	movs	r2, #64	; 0x40
 8004358:	2101      	movs	r1, #1
 800435a:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2240      	movs	r2, #64	; 0x40
 8004360:	2100      	movs	r1, #0
 8004362:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2244      	movs	r2, #68	; 0x44
 8004368:	2100      	movs	r1, #0
 800436a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2250      	movs	r2, #80	; 0x50
 8004370:	2100      	movs	r1, #0
 8004372:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	0018      	movs	r0, r3
 8004378:	46bd      	mov	sp, r7
 800437a:	b002      	add	sp, #8
 800437c:	bc80      	pop	{r7}
 800437e:	46b8      	mov	r8, r7
 8004380:	bc90      	pop	{r4, r7}
 8004382:	bc08      	pop	{r3}
 8004384:	b004      	add	sp, #16
 8004386:	4718      	bx	r3

08004388 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b09c      	sub	sp, #112	; 0x70
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004392:	236f      	movs	r3, #111	; 0x6f
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	18d3      	adds	r3, r2, r3
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	236c      	movs	r3, #108	; 0x6c
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	49cf      	ldr	r1, [pc, #828]	; (80046ec <USB_ActivateEndpoint+0x364>)
 80043ae:	400a      	ands	r2, r1
 80043b0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	78db      	ldrb	r3, [r3, #3]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d017      	beq.n	80043ea <USB_ActivateEndpoint+0x62>
 80043ba:	dc28      	bgt.n	800440e <USB_ActivateEndpoint+0x86>
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d00e      	beq.n	80043de <USB_ActivateEndpoint+0x56>
 80043c0:	dc25      	bgt.n	800440e <USB_ActivateEndpoint+0x86>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <USB_ActivateEndpoint+0x44>
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d018      	beq.n	80043fc <USB_ActivateEndpoint+0x74>
 80043ca:	e020      	b.n	800440e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043cc:	226c      	movs	r2, #108	; 0x6c
 80043ce:	18bb      	adds	r3, r7, r2
 80043d0:	18ba      	adds	r2, r7, r2
 80043d2:	8812      	ldrh	r2, [r2, #0]
 80043d4:	2180      	movs	r1, #128	; 0x80
 80043d6:	0089      	lsls	r1, r1, #2
 80043d8:	430a      	orrs	r2, r1
 80043da:	801a      	strh	r2, [r3, #0]
      break;
 80043dc:	e01c      	b.n	8004418 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80043de:	226c      	movs	r2, #108	; 0x6c
 80043e0:	18bb      	adds	r3, r7, r2
 80043e2:	18ba      	adds	r2, r7, r2
 80043e4:	8812      	ldrh	r2, [r2, #0]
 80043e6:	801a      	strh	r2, [r3, #0]
      break;
 80043e8:	e016      	b.n	8004418 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043ea:	226c      	movs	r2, #108	; 0x6c
 80043ec:	18bb      	adds	r3, r7, r2
 80043ee:	18ba      	adds	r2, r7, r2
 80043f0:	8812      	ldrh	r2, [r2, #0]
 80043f2:	21c0      	movs	r1, #192	; 0xc0
 80043f4:	00c9      	lsls	r1, r1, #3
 80043f6:	430a      	orrs	r2, r1
 80043f8:	801a      	strh	r2, [r3, #0]
      break;
 80043fa:	e00d      	b.n	8004418 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043fc:	226c      	movs	r2, #108	; 0x6c
 80043fe:	18bb      	adds	r3, r7, r2
 8004400:	18ba      	adds	r2, r7, r2
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	2180      	movs	r1, #128	; 0x80
 8004406:	00c9      	lsls	r1, r1, #3
 8004408:	430a      	orrs	r2, r1
 800440a:	801a      	strh	r2, [r3, #0]
      break;
 800440c:	e004      	b.n	8004418 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800440e:	236f      	movs	r3, #111	; 0x6f
 8004410:	18fb      	adds	r3, r7, r3
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
      break;
 8004416:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	18d3      	adds	r3, r2, r3
 8004422:	226c      	movs	r2, #108	; 0x6c
 8004424:	18ba      	adds	r2, r7, r2
 8004426:	8812      	ldrh	r2, [r2, #0]
 8004428:	49b1      	ldr	r1, [pc, #708]	; (80046f0 <USB_ActivateEndpoint+0x368>)
 800442a:	430a      	orrs	r2, r1
 800442c:	b292      	uxth	r2, r2
 800442e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	18d3      	adds	r3, r2, r3
 800443a:	881b      	ldrh	r3, [r3, #0]
 800443c:	b29b      	uxth	r3, r3
 800443e:	b21b      	sxth	r3, r3
 8004440:	4aac      	ldr	r2, [pc, #688]	; (80046f4 <USB_ActivateEndpoint+0x36c>)
 8004442:	4013      	ands	r3, r2
 8004444:	b21a      	sxth	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	b21b      	sxth	r3, r3
 800444c:	4313      	orrs	r3, r2
 800444e:	b21a      	sxth	r2, r3
 8004450:	2166      	movs	r1, #102	; 0x66
 8004452:	187b      	adds	r3, r7, r1
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	18d3      	adds	r3, r2, r3
 8004460:	187a      	adds	r2, r7, r1
 8004462:	8812      	ldrh	r2, [r2, #0]
 8004464:	49a2      	ldr	r1, [pc, #648]	; (80046f0 <USB_ActivateEndpoint+0x368>)
 8004466:	430a      	orrs	r2, r1
 8004468:	b292      	uxth	r2, r2
 800446a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	7b1b      	ldrb	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d000      	beq.n	8004476 <USB_ActivateEndpoint+0xee>
 8004474:	e150      	b.n	8004718 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	785b      	ldrb	r3, [r3, #1]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d100      	bne.n	8004480 <USB_ActivateEndpoint+0xf8>
 800447e:	e07a      	b.n	8004576 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2250      	movs	r2, #80	; 0x50
 8004488:	5a9b      	ldrh	r3, [r3, r2]
 800448a:	b29b      	uxth	r3, r3
 800448c:	001a      	movs	r2, r3
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	189b      	adds	r3, r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	00da      	lsls	r2, r3, #3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	18d3      	adds	r3, r2, r3
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	00d2      	lsls	r2, r2, #3
 80044a2:	4694      	mov	ip, r2
 80044a4:	4463      	add	r3, ip
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	88db      	ldrh	r3, [r3, #6]
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	18db      	adds	r3, r3, r3
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	18d2      	adds	r2, r2, r3
 80044c2:	2112      	movs	r1, #18
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	8812      	ldrh	r2, [r2, #0]
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	4013      	ands	r3, r2
 80044d2:	d016      	beq.n	8004502 <USB_ActivateEndpoint+0x17a>
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	18d3      	adds	r3, r2, r3
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	2010      	movs	r0, #16
 80044e4:	183b      	adds	r3, r7, r0
 80044e6:	4983      	ldr	r1, [pc, #524]	; (80046f4 <USB_ActivateEndpoint+0x36c>)
 80044e8:	400a      	ands	r2, r1
 80044ea:	801a      	strh	r2, [r3, #0]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	183a      	adds	r2, r7, r0
 80044f8:	8812      	ldrh	r2, [r2, #0]
 80044fa:	497f      	ldr	r1, [pc, #508]	; (80046f8 <USB_ActivateEndpoint+0x370>)
 80044fc:	430a      	orrs	r2, r1
 80044fe:	b292      	uxth	r2, r2
 8004500:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	78db      	ldrb	r3, [r3, #3]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d01d      	beq.n	8004546 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	18d3      	adds	r3, r2, r3
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b29a      	uxth	r2, r3
 8004518:	200c      	movs	r0, #12
 800451a:	183b      	adds	r3, r7, r0
 800451c:	4977      	ldr	r1, [pc, #476]	; (80046fc <USB_ActivateEndpoint+0x374>)
 800451e:	400a      	ands	r2, r1
 8004520:	801a      	strh	r2, [r3, #0]
 8004522:	183b      	adds	r3, r7, r0
 8004524:	183a      	adds	r2, r7, r0
 8004526:	8812      	ldrh	r2, [r2, #0]
 8004528:	2120      	movs	r1, #32
 800452a:	404a      	eors	r2, r1
 800452c:	801a      	strh	r2, [r3, #0]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	183a      	adds	r2, r7, r0
 800453a:	8812      	ldrh	r2, [r2, #0]
 800453c:	496c      	ldr	r1, [pc, #432]	; (80046f0 <USB_ActivateEndpoint+0x368>)
 800453e:	430a      	orrs	r2, r1
 8004540:	b292      	uxth	r2, r2
 8004542:	801a      	strh	r2, [r3, #0]
 8004544:	e27a      	b.n	8004a3c <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	18d3      	adds	r3, r2, r3
 8004550:	881b      	ldrh	r3, [r3, #0]
 8004552:	b29a      	uxth	r2, r3
 8004554:	200e      	movs	r0, #14
 8004556:	183b      	adds	r3, r7, r0
 8004558:	4968      	ldr	r1, [pc, #416]	; (80046fc <USB_ActivateEndpoint+0x374>)
 800455a:	400a      	ands	r2, r1
 800455c:	801a      	strh	r2, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	18d3      	adds	r3, r2, r3
 8004568:	183a      	adds	r2, r7, r0
 800456a:	8812      	ldrh	r2, [r2, #0]
 800456c:	4960      	ldr	r1, [pc, #384]	; (80046f0 <USB_ActivateEndpoint+0x368>)
 800456e:	430a      	orrs	r2, r1
 8004570:	b292      	uxth	r2, r2
 8004572:	801a      	strh	r2, [r3, #0]
 8004574:	e262      	b.n	8004a3c <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	633b      	str	r3, [r7, #48]	; 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2250      	movs	r2, #80	; 0x50
 800457e:	5a9b      	ldrh	r3, [r3, r2]
 8004580:	b29b      	uxth	r3, r3
 8004582:	001a      	movs	r2, r3
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	189b      	adds	r3, r3, r2
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	00da      	lsls	r2, r3, #3
 8004590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004592:	18d3      	adds	r3, r2, r3
 8004594:	4a5a      	ldr	r2, [pc, #360]	; (8004700 <USB_ActivateEndpoint+0x378>)
 8004596:	4694      	mov	ip, r2
 8004598:	4463      	add	r3, ip
 800459a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	88db      	ldrh	r3, [r3, #6]
 80045a0:	085b      	lsrs	r3, r3, #1
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	18db      	adds	r3, r3, r3
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2250      	movs	r2, #80	; 0x50
 80045b4:	5a9b      	ldrh	r3, [r3, r2]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	001a      	movs	r2, r3
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	189b      	adds	r3, r3, r2
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	00da      	lsls	r2, r3, #3
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	18d3      	adds	r3, r2, r3
 80045ca:	4a4e      	ldr	r2, [pc, #312]	; (8004704 <USB_ActivateEndpoint+0x37c>)
 80045cc:	4694      	mov	ip, r2
 80045ce:	4463      	add	r3, ip
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d110      	bne.n	80045fc <USB_ActivateEndpoint+0x274>
 80045da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	4a49      	ldr	r2, [pc, #292]	; (8004708 <USB_ActivateEndpoint+0x380>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4a46      	ldr	r2, [pc, #280]	; (800470c <USB_ActivateEndpoint+0x384>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	b29a      	uxth	r2, r3
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	801a      	strh	r2, [r3, #0]
 80045fa:	e02b      	b.n	8004654 <USB_ActivateEndpoint+0x2cc>
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	2b3e      	cmp	r3, #62	; 0x3e
 8004602:	d812      	bhi.n	800462a <USB_ActivateEndpoint+0x2a2>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	085b      	lsrs	r3, r3, #1
 800460a:	66bb      	str	r3, [r7, #104]	; 0x68
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	2201      	movs	r2, #1
 8004612:	4013      	ands	r3, r2
 8004614:	d002      	beq.n	800461c <USB_ActivateEndpoint+0x294>
 8004616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004618:	3301      	adds	r3, #1
 800461a:	66bb      	str	r3, [r7, #104]	; 0x68
 800461c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800461e:	b29b      	uxth	r3, r3
 8004620:	029b      	lsls	r3, r3, #10
 8004622:	b29a      	uxth	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	e014      	b.n	8004654 <USB_ActivateEndpoint+0x2cc>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	66bb      	str	r3, [r7, #104]	; 0x68
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	221f      	movs	r2, #31
 8004638:	4013      	ands	r3, r2
 800463a:	d102      	bne.n	8004642 <USB_ActivateEndpoint+0x2ba>
 800463c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800463e:	3b01      	subs	r3, #1
 8004640:	66bb      	str	r3, [r7, #104]	; 0x68
 8004642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004644:	b29b      	uxth	r3, r3
 8004646:	029b      	lsls	r3, r3, #10
 8004648:	b29b      	uxth	r3, r3
 800464a:	4a30      	ldr	r2, [pc, #192]	; (800470c <USB_ActivateEndpoint+0x384>)
 800464c:	4313      	orrs	r3, r2
 800464e:	b29a      	uxth	r2, r3
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	18d2      	adds	r2, r2, r3
 800465e:	2122      	movs	r1, #34	; 0x22
 8004660:	187b      	adds	r3, r7, r1
 8004662:	8812      	ldrh	r2, [r2, #0]
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	187b      	adds	r3, r7, r1
 8004668:	881a      	ldrh	r2, [r3, #0]
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	01db      	lsls	r3, r3, #7
 800466e:	4013      	ands	r3, r2
 8004670:	d016      	beq.n	80046a0 <USB_ActivateEndpoint+0x318>
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	18d3      	adds	r3, r2, r3
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29a      	uxth	r2, r3
 8004680:	2020      	movs	r0, #32
 8004682:	183b      	adds	r3, r7, r0
 8004684:	491b      	ldr	r1, [pc, #108]	; (80046f4 <USB_ActivateEndpoint+0x36c>)
 8004686:	400a      	ands	r2, r1
 8004688:	801a      	strh	r2, [r3, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	18d3      	adds	r3, r2, r3
 8004694:	183a      	adds	r2, r7, r0
 8004696:	8812      	ldrh	r2, [r2, #0]
 8004698:	491d      	ldr	r1, [pc, #116]	; (8004710 <USB_ActivateEndpoint+0x388>)
 800469a:	430a      	orrs	r2, r1
 800469c:	b292      	uxth	r2, r2
 800469e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	18d3      	adds	r3, r2, r3
 80046aa:	881b      	ldrh	r3, [r3, #0]
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	201e      	movs	r0, #30
 80046b0:	183b      	adds	r3, r7, r0
 80046b2:	4918      	ldr	r1, [pc, #96]	; (8004714 <USB_ActivateEndpoint+0x38c>)
 80046b4:	400a      	ands	r2, r1
 80046b6:	801a      	strh	r2, [r3, #0]
 80046b8:	183b      	adds	r3, r7, r0
 80046ba:	183a      	adds	r2, r7, r0
 80046bc:	8812      	ldrh	r2, [r2, #0]
 80046be:	2180      	movs	r1, #128	; 0x80
 80046c0:	0149      	lsls	r1, r1, #5
 80046c2:	404a      	eors	r2, r1
 80046c4:	801a      	strh	r2, [r3, #0]
 80046c6:	183b      	adds	r3, r7, r0
 80046c8:	183a      	adds	r2, r7, r0
 80046ca:	8812      	ldrh	r2, [r2, #0]
 80046cc:	2180      	movs	r1, #128	; 0x80
 80046ce:	0189      	lsls	r1, r1, #6
 80046d0:	404a      	eors	r2, r1
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	183a      	adds	r2, r7, r0
 80046e0:	8812      	ldrh	r2, [r2, #0]
 80046e2:	4903      	ldr	r1, [pc, #12]	; (80046f0 <USB_ActivateEndpoint+0x368>)
 80046e4:	430a      	orrs	r2, r1
 80046e6:	b292      	uxth	r2, r2
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e1a7      	b.n	8004a3c <USB_ActivateEndpoint+0x6b4>
 80046ec:	ffff898f 	.word	0xffff898f
 80046f0:	ffff8080 	.word	0xffff8080
 80046f4:	ffff8f8f 	.word	0xffff8f8f
 80046f8:	ffff80c0 	.word	0xffff80c0
 80046fc:	ffff8fbf 	.word	0xffff8fbf
 8004700:	00000404 	.word	0x00000404
 8004704:	00000406 	.word	0x00000406
 8004708:	ffff83ff 	.word	0xffff83ff
 800470c:	ffff8000 	.word	0xffff8000
 8004710:	ffffc080 	.word	0xffffc080
 8004714:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	78db      	ldrb	r3, [r3, #3]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d117      	bne.n	8004750 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	18d3      	adds	r3, r2, r3
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	b29a      	uxth	r2, r3
 800472e:	2062      	movs	r0, #98	; 0x62
 8004730:	183b      	adds	r3, r7, r0
 8004732:	49c6      	ldr	r1, [pc, #792]	; (8004a4c <USB_ActivateEndpoint+0x6c4>)
 8004734:	400a      	ands	r2, r1
 8004736:	801a      	strh	r2, [r3, #0]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	18d3      	adds	r3, r2, r3
 8004742:	183a      	adds	r2, r7, r0
 8004744:	8812      	ldrh	r2, [r2, #0]
 8004746:	49c2      	ldr	r1, [pc, #776]	; (8004a50 <USB_ActivateEndpoint+0x6c8>)
 8004748:	430a      	orrs	r2, r1
 800474a:	b292      	uxth	r2, r2
 800474c:	801a      	strh	r2, [r3, #0]
 800474e:	e016      	b.n	800477e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	18d3      	adds	r3, r2, r3
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	b29a      	uxth	r2, r3
 800475e:	2064      	movs	r0, #100	; 0x64
 8004760:	183b      	adds	r3, r7, r0
 8004762:	49bc      	ldr	r1, [pc, #752]	; (8004a54 <USB_ActivateEndpoint+0x6cc>)
 8004764:	400a      	ands	r2, r1
 8004766:	801a      	strh	r2, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	18d3      	adds	r3, r2, r3
 8004772:	183a      	adds	r2, r7, r0
 8004774:	8812      	ldrh	r2, [r2, #0]
 8004776:	49b8      	ldr	r1, [pc, #736]	; (8004a58 <USB_ActivateEndpoint+0x6d0>)
 8004778:	430a      	orrs	r2, r1
 800477a:	b292      	uxth	r2, r2
 800477c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2250      	movs	r2, #80	; 0x50
 8004786:	5a9b      	ldrh	r3, [r3, r2]
 8004788:	b29b      	uxth	r3, r3
 800478a:	001a      	movs	r2, r3
 800478c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800478e:	189b      	adds	r3, r3, r2
 8004790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	00da      	lsls	r2, r3, #3
 8004798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	2280      	movs	r2, #128	; 0x80
 800479e:	00d2      	lsls	r2, r2, #3
 80047a0:	4694      	mov	ip, r2
 80047a2:	4463      	add	r3, ip
 80047a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	891b      	ldrh	r3, [r3, #8]
 80047aa:	085b      	lsrs	r3, r3, #1
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	18db      	adds	r3, r3, r3
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b4:	801a      	strh	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	657b      	str	r3, [r7, #84]	; 0x54
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2250      	movs	r2, #80	; 0x50
 80047be:	5a9b      	ldrh	r3, [r3, r2]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	001a      	movs	r2, r3
 80047c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c6:	189b      	adds	r3, r3, r2
 80047c8:	657b      	str	r3, [r7, #84]	; 0x54
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00da      	lsls	r2, r3, #3
 80047d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d2:	18d3      	adds	r3, r2, r3
 80047d4:	4aa1      	ldr	r2, [pc, #644]	; (8004a5c <USB_ActivateEndpoint+0x6d4>)
 80047d6:	4694      	mov	ip, r2
 80047d8:	4463      	add	r3, ip
 80047da:	653b      	str	r3, [r7, #80]	; 0x50
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	895b      	ldrh	r3, [r3, #10]
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	18db      	adds	r3, r3, r3
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ea:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d000      	beq.n	80047f6 <USB_ActivateEndpoint+0x46e>
 80047f4:	e087      	b.n	8004906 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	18d2      	adds	r2, r2, r3
 8004800:	2140      	movs	r1, #64	; 0x40
 8004802:	187b      	adds	r3, r7, r1
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	801a      	strh	r2, [r3, #0]
 8004808:	187b      	adds	r3, r7, r1
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	2380      	movs	r3, #128	; 0x80
 800480e:	01db      	lsls	r3, r3, #7
 8004810:	4013      	ands	r3, r2
 8004812:	d016      	beq.n	8004842 <USB_ActivateEndpoint+0x4ba>
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	18d3      	adds	r3, r2, r3
 800481e:	881b      	ldrh	r3, [r3, #0]
 8004820:	b29a      	uxth	r2, r3
 8004822:	203e      	movs	r0, #62	; 0x3e
 8004824:	183b      	adds	r3, r7, r0
 8004826:	4989      	ldr	r1, [pc, #548]	; (8004a4c <USB_ActivateEndpoint+0x6c4>)
 8004828:	400a      	ands	r2, r1
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	183a      	adds	r2, r7, r0
 8004838:	8812      	ldrh	r2, [r2, #0]
 800483a:	4989      	ldr	r1, [pc, #548]	; (8004a60 <USB_ActivateEndpoint+0x6d8>)
 800483c:	430a      	orrs	r2, r1
 800483e:	b292      	uxth	r2, r2
 8004840:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	18d2      	adds	r2, r2, r3
 800484c:	213c      	movs	r1, #60	; 0x3c
 800484e:	187b      	adds	r3, r7, r1
 8004850:	8812      	ldrh	r2, [r2, #0]
 8004852:	801a      	strh	r2, [r3, #0]
 8004854:	187b      	adds	r3, r7, r1
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	2240      	movs	r2, #64	; 0x40
 800485a:	4013      	ands	r3, r2
 800485c:	d016      	beq.n	800488c <USB_ActivateEndpoint+0x504>
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	18d3      	adds	r3, r2, r3
 8004868:	881b      	ldrh	r3, [r3, #0]
 800486a:	b29a      	uxth	r2, r3
 800486c:	203a      	movs	r0, #58	; 0x3a
 800486e:	183b      	adds	r3, r7, r0
 8004870:	4976      	ldr	r1, [pc, #472]	; (8004a4c <USB_ActivateEndpoint+0x6c4>)
 8004872:	400a      	ands	r2, r1
 8004874:	801a      	strh	r2, [r3, #0]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	18d3      	adds	r3, r2, r3
 8004880:	183a      	adds	r2, r7, r0
 8004882:	8812      	ldrh	r2, [r2, #0]
 8004884:	4977      	ldr	r1, [pc, #476]	; (8004a64 <USB_ActivateEndpoint+0x6dc>)
 8004886:	430a      	orrs	r2, r1
 8004888:	b292      	uxth	r2, r2
 800488a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	18d3      	adds	r3, r2, r3
 8004896:	881b      	ldrh	r3, [r3, #0]
 8004898:	b29a      	uxth	r2, r3
 800489a:	2038      	movs	r0, #56	; 0x38
 800489c:	183b      	adds	r3, r7, r0
 800489e:	4972      	ldr	r1, [pc, #456]	; (8004a68 <USB_ActivateEndpoint+0x6e0>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	183b      	adds	r3, r7, r0
 80048a6:	183a      	adds	r2, r7, r0
 80048a8:	8812      	ldrh	r2, [r2, #0]
 80048aa:	2180      	movs	r1, #128	; 0x80
 80048ac:	0149      	lsls	r1, r1, #5
 80048ae:	404a      	eors	r2, r1
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	183b      	adds	r3, r7, r0
 80048b4:	183a      	adds	r2, r7, r0
 80048b6:	8812      	ldrh	r2, [r2, #0]
 80048b8:	2180      	movs	r1, #128	; 0x80
 80048ba:	0189      	lsls	r1, r1, #6
 80048bc:	404a      	eors	r2, r1
 80048be:	801a      	strh	r2, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	18d3      	adds	r3, r2, r3
 80048ca:	183a      	adds	r2, r7, r0
 80048cc:	8812      	ldrh	r2, [r2, #0]
 80048ce:	4962      	ldr	r1, [pc, #392]	; (8004a58 <USB_ActivateEndpoint+0x6d0>)
 80048d0:	430a      	orrs	r2, r1
 80048d2:	b292      	uxth	r2, r2
 80048d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	18d3      	adds	r3, r2, r3
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	2036      	movs	r0, #54	; 0x36
 80048e6:	183b      	adds	r3, r7, r0
 80048e8:	4960      	ldr	r1, [pc, #384]	; (8004a6c <USB_ActivateEndpoint+0x6e4>)
 80048ea:	400a      	ands	r2, r1
 80048ec:	801a      	strh	r2, [r3, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	18d3      	adds	r3, r2, r3
 80048f8:	183a      	adds	r2, r7, r0
 80048fa:	8812      	ldrh	r2, [r2, #0]
 80048fc:	4956      	ldr	r1, [pc, #344]	; (8004a58 <USB_ActivateEndpoint+0x6d0>)
 80048fe:	430a      	orrs	r2, r1
 8004900:	b292      	uxth	r2, r2
 8004902:	801a      	strh	r2, [r3, #0]
 8004904:	e09a      	b.n	8004a3c <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	18d2      	adds	r2, r2, r3
 8004910:	214e      	movs	r1, #78	; 0x4e
 8004912:	187b      	adds	r3, r7, r1
 8004914:	8812      	ldrh	r2, [r2, #0]
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	187b      	adds	r3, r7, r1
 800491a:	881a      	ldrh	r2, [r3, #0]
 800491c:	2380      	movs	r3, #128	; 0x80
 800491e:	01db      	lsls	r3, r3, #7
 8004920:	4013      	ands	r3, r2
 8004922:	d016      	beq.n	8004952 <USB_ActivateEndpoint+0x5ca>
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	18d3      	adds	r3, r2, r3
 800492e:	881b      	ldrh	r3, [r3, #0]
 8004930:	b29a      	uxth	r2, r3
 8004932:	204c      	movs	r0, #76	; 0x4c
 8004934:	183b      	adds	r3, r7, r0
 8004936:	4945      	ldr	r1, [pc, #276]	; (8004a4c <USB_ActivateEndpoint+0x6c4>)
 8004938:	400a      	ands	r2, r1
 800493a:	801a      	strh	r2, [r3, #0]
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	18d3      	adds	r3, r2, r3
 8004946:	183a      	adds	r2, r7, r0
 8004948:	8812      	ldrh	r2, [r2, #0]
 800494a:	4945      	ldr	r1, [pc, #276]	; (8004a60 <USB_ActivateEndpoint+0x6d8>)
 800494c:	430a      	orrs	r2, r1
 800494e:	b292      	uxth	r2, r2
 8004950:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	18d2      	adds	r2, r2, r3
 800495c:	214a      	movs	r1, #74	; 0x4a
 800495e:	187b      	adds	r3, r7, r1
 8004960:	8812      	ldrh	r2, [r2, #0]
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	187b      	adds	r3, r7, r1
 8004966:	881b      	ldrh	r3, [r3, #0]
 8004968:	2240      	movs	r2, #64	; 0x40
 800496a:	4013      	ands	r3, r2
 800496c:	d016      	beq.n	800499c <USB_ActivateEndpoint+0x614>
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	18d3      	adds	r3, r2, r3
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	b29a      	uxth	r2, r3
 800497c:	2048      	movs	r0, #72	; 0x48
 800497e:	183b      	adds	r3, r7, r0
 8004980:	4932      	ldr	r1, [pc, #200]	; (8004a4c <USB_ActivateEndpoint+0x6c4>)
 8004982:	400a      	ands	r2, r1
 8004984:	801a      	strh	r2, [r3, #0]
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	18d3      	adds	r3, r2, r3
 8004990:	183a      	adds	r2, r7, r0
 8004992:	8812      	ldrh	r2, [r2, #0]
 8004994:	4933      	ldr	r1, [pc, #204]	; (8004a64 <USB_ActivateEndpoint+0x6dc>)
 8004996:	430a      	orrs	r2, r1
 8004998:	b292      	uxth	r2, r2
 800499a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	78db      	ldrb	r3, [r3, #3]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d01d      	beq.n	80049e0 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	2044      	movs	r0, #68	; 0x44
 80049b4:	183b      	adds	r3, r7, r0
 80049b6:	492d      	ldr	r1, [pc, #180]	; (8004a6c <USB_ActivateEndpoint+0x6e4>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	801a      	strh	r2, [r3, #0]
 80049bc:	183b      	adds	r3, r7, r0
 80049be:	183a      	adds	r2, r7, r0
 80049c0:	8812      	ldrh	r2, [r2, #0]
 80049c2:	2120      	movs	r1, #32
 80049c4:	404a      	eors	r2, r1
 80049c6:	801a      	strh	r2, [r3, #0]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	18d3      	adds	r3, r2, r3
 80049d2:	183a      	adds	r2, r7, r0
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	4920      	ldr	r1, [pc, #128]	; (8004a58 <USB_ActivateEndpoint+0x6d0>)
 80049d8:	430a      	orrs	r2, r1
 80049da:	b292      	uxth	r2, r2
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e016      	b.n	8004a0e <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	2046      	movs	r0, #70	; 0x46
 80049f0:	183b      	adds	r3, r7, r0
 80049f2:	491e      	ldr	r1, [pc, #120]	; (8004a6c <USB_ActivateEndpoint+0x6e4>)
 80049f4:	400a      	ands	r2, r1
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	18d3      	adds	r3, r2, r3
 8004a02:	183a      	adds	r2, r7, r0
 8004a04:	8812      	ldrh	r2, [r2, #0]
 8004a06:	4914      	ldr	r1, [pc, #80]	; (8004a58 <USB_ActivateEndpoint+0x6d0>)
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	b292      	uxth	r2, r2
 8004a0c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	18d3      	adds	r3, r2, r3
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	2042      	movs	r0, #66	; 0x42
 8004a1e:	183b      	adds	r3, r7, r0
 8004a20:	4911      	ldr	r1, [pc, #68]	; (8004a68 <USB_ActivateEndpoint+0x6e0>)
 8004a22:	400a      	ands	r2, r1
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	18d3      	adds	r3, r2, r3
 8004a30:	183a      	adds	r2, r7, r0
 8004a32:	8812      	ldrh	r2, [r2, #0]
 8004a34:	4908      	ldr	r1, [pc, #32]	; (8004a58 <USB_ActivateEndpoint+0x6d0>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	b292      	uxth	r2, r2
 8004a3a:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004a3c:	236f      	movs	r3, #111	; 0x6f
 8004a3e:	18fb      	adds	r3, r7, r3
 8004a40:	781b      	ldrb	r3, [r3, #0]
}
 8004a42:	0018      	movs	r0, r3
 8004a44:	46bd      	mov	sp, r7
 8004a46:	b01c      	add	sp, #112	; 0x70
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	ffff8f8f 	.word	0xffff8f8f
 8004a50:	ffff8180 	.word	0xffff8180
 8004a54:	ffff8e8f 	.word	0xffff8e8f
 8004a58:	ffff8080 	.word	0xffff8080
 8004a5c:	00000404 	.word	0x00000404
 8004a60:	ffffc080 	.word	0xffffc080
 8004a64:	ffff80c0 	.word	0xffff80c0
 8004a68:	ffffbf8f 	.word	0xffffbf8f
 8004a6c:	ffff8fbf 	.word	0xffff8fbf

08004a70 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08c      	sub	sp, #48	; 0x30
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	7b1b      	ldrb	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d000      	beq.n	8004a84 <USB_DeactivateEndpoint+0x14>
 8004a82:	e07e      	b.n	8004b82 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	785b      	ldrb	r3, [r3, #1]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d03c      	beq.n	8004b06 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	18d2      	adds	r2, r2, r3
 8004a96:	210c      	movs	r1, #12
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	8812      	ldrh	r2, [r2, #0]
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	187b      	adds	r3, r7, r1
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	2240      	movs	r2, #64	; 0x40
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d016      	beq.n	8004ad6 <USB_DeactivateEndpoint+0x66>
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	18d3      	adds	r3, r2, r3
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	200a      	movs	r0, #10
 8004ab8:	183b      	adds	r3, r7, r0
 8004aba:	49c7      	ldr	r1, [pc, #796]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004abc:	400a      	ands	r2, r1
 8004abe:	801a      	strh	r2, [r3, #0]
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	183a      	adds	r2, r7, r0
 8004acc:	8812      	ldrh	r2, [r2, #0]
 8004ace:	49c3      	ldr	r1, [pc, #780]	; (8004ddc <USB_DeactivateEndpoint+0x36c>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	b292      	uxth	r2, r2
 8004ad4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	18d3      	adds	r3, r2, r3
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	2008      	movs	r0, #8
 8004ae6:	183b      	adds	r3, r7, r0
 8004ae8:	49bd      	ldr	r1, [pc, #756]	; (8004de0 <USB_DeactivateEndpoint+0x370>)
 8004aea:	400a      	ands	r2, r1
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	18d3      	adds	r3, r2, r3
 8004af8:	183a      	adds	r2, r7, r0
 8004afa:	8812      	ldrh	r2, [r2, #0]
 8004afc:	49b9      	ldr	r1, [pc, #740]	; (8004de4 <USB_DeactivateEndpoint+0x374>)
 8004afe:	430a      	orrs	r2, r1
 8004b00:	b292      	uxth	r2, r2
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e163      	b.n	8004dce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18d2      	adds	r2, r2, r3
 8004b10:	2112      	movs	r1, #18
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	8812      	ldrh	r2, [r2, #0]
 8004b16:	801a      	strh	r2, [r3, #0]
 8004b18:	187b      	adds	r3, r7, r1
 8004b1a:	881a      	ldrh	r2, [r3, #0]
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	01db      	lsls	r3, r3, #7
 8004b20:	4013      	ands	r3, r2
 8004b22:	d016      	beq.n	8004b52 <USB_DeactivateEndpoint+0xe2>
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	18d3      	adds	r3, r2, r3
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	2010      	movs	r0, #16
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	49a8      	ldr	r1, [pc, #672]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	801a      	strh	r2, [r3, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	18d3      	adds	r3, r2, r3
 8004b46:	183a      	adds	r2, r7, r0
 8004b48:	8812      	ldrh	r2, [r2, #0]
 8004b4a:	49a7      	ldr	r1, [pc, #668]	; (8004de8 <USB_DeactivateEndpoint+0x378>)
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	b292      	uxth	r2, r2
 8004b50:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	18d3      	adds	r3, r2, r3
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	200e      	movs	r0, #14
 8004b62:	183b      	adds	r3, r7, r0
 8004b64:	49a1      	ldr	r1, [pc, #644]	; (8004dec <USB_DeactivateEndpoint+0x37c>)
 8004b66:	400a      	ands	r2, r1
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	18d3      	adds	r3, r2, r3
 8004b74:	183a      	adds	r2, r7, r0
 8004b76:	8812      	ldrh	r2, [r2, #0]
 8004b78:	499a      	ldr	r1, [pc, #616]	; (8004de4 <USB_DeactivateEndpoint+0x374>)
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	b292      	uxth	r2, r2
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e125      	b.n	8004dce <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d000      	beq.n	8004b8c <USB_DeactivateEndpoint+0x11c>
 8004b8a:	e090      	b.n	8004cae <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	18d2      	adds	r2, r2, r3
 8004b96:	2120      	movs	r1, #32
 8004b98:	187b      	adds	r3, r7, r1
 8004b9a:	8812      	ldrh	r2, [r2, #0]
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	187b      	adds	r3, r7, r1
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	01db      	lsls	r3, r3, #7
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d016      	beq.n	8004bd8 <USB_DeactivateEndpoint+0x168>
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	18d3      	adds	r3, r2, r3
 8004bb4:	881b      	ldrh	r3, [r3, #0]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	201e      	movs	r0, #30
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	4986      	ldr	r1, [pc, #536]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004bbe:	400a      	ands	r2, r1
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	18d3      	adds	r3, r2, r3
 8004bcc:	183a      	adds	r2, r7, r0
 8004bce:	8812      	ldrh	r2, [r2, #0]
 8004bd0:	4985      	ldr	r1, [pc, #532]	; (8004de8 <USB_DeactivateEndpoint+0x378>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	b292      	uxth	r2, r2
 8004bd6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	18d2      	adds	r2, r2, r3
 8004be2:	211c      	movs	r1, #28
 8004be4:	187b      	adds	r3, r7, r1
 8004be6:	8812      	ldrh	r2, [r2, #0]
 8004be8:	801a      	strh	r2, [r3, #0]
 8004bea:	187b      	adds	r3, r7, r1
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	2240      	movs	r2, #64	; 0x40
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	d016      	beq.n	8004c22 <USB_DeactivateEndpoint+0x1b2>
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	18d3      	adds	r3, r2, r3
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	201a      	movs	r0, #26
 8004c04:	183b      	adds	r3, r7, r0
 8004c06:	4974      	ldr	r1, [pc, #464]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004c08:	400a      	ands	r2, r1
 8004c0a:	801a      	strh	r2, [r3, #0]
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	183a      	adds	r2, r7, r0
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	4970      	ldr	r1, [pc, #448]	; (8004ddc <USB_DeactivateEndpoint+0x36c>)
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	18d3      	adds	r3, r2, r3
 8004c2c:	881b      	ldrh	r3, [r3, #0]
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	2018      	movs	r0, #24
 8004c32:	183b      	adds	r3, r7, r0
 8004c34:	4968      	ldr	r1, [pc, #416]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004c36:	400a      	ands	r2, r1
 8004c38:	801a      	strh	r2, [r3, #0]
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	183a      	adds	r2, r7, r0
 8004c46:	8812      	ldrh	r2, [r2, #0]
 8004c48:	4964      	ldr	r1, [pc, #400]	; (8004ddc <USB_DeactivateEndpoint+0x36c>)
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	2016      	movs	r0, #22
 8004c60:	183b      	adds	r3, r7, r0
 8004c62:	4962      	ldr	r1, [pc, #392]	; (8004dec <USB_DeactivateEndpoint+0x37c>)
 8004c64:	400a      	ands	r2, r1
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	18d3      	adds	r3, r2, r3
 8004c72:	183a      	adds	r2, r7, r0
 8004c74:	8812      	ldrh	r2, [r2, #0]
 8004c76:	495b      	ldr	r1, [pc, #364]	; (8004de4 <USB_DeactivateEndpoint+0x374>)
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	18d3      	adds	r3, r2, r3
 8004c88:	881b      	ldrh	r3, [r3, #0]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	2014      	movs	r0, #20
 8004c8e:	183b      	adds	r3, r7, r0
 8004c90:	4953      	ldr	r1, [pc, #332]	; (8004de0 <USB_DeactivateEndpoint+0x370>)
 8004c92:	400a      	ands	r2, r1
 8004c94:	801a      	strh	r2, [r3, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	18d3      	adds	r3, r2, r3
 8004ca0:	183a      	adds	r2, r7, r0
 8004ca2:	8812      	ldrh	r2, [r2, #0]
 8004ca4:	494f      	ldr	r1, [pc, #316]	; (8004de4 <USB_DeactivateEndpoint+0x374>)
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	b292      	uxth	r2, r2
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e08f      	b.n	8004dce <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	18d2      	adds	r2, r2, r3
 8004cb8:	212e      	movs	r1, #46	; 0x2e
 8004cba:	187b      	adds	r3, r7, r1
 8004cbc:	8812      	ldrh	r2, [r2, #0]
 8004cbe:	801a      	strh	r2, [r3, #0]
 8004cc0:	187b      	adds	r3, r7, r1
 8004cc2:	881a      	ldrh	r2, [r3, #0]
 8004cc4:	2380      	movs	r3, #128	; 0x80
 8004cc6:	01db      	lsls	r3, r3, #7
 8004cc8:	4013      	ands	r3, r2
 8004cca:	d016      	beq.n	8004cfa <USB_DeactivateEndpoint+0x28a>
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	18d3      	adds	r3, r2, r3
 8004cd6:	881b      	ldrh	r3, [r3, #0]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	202c      	movs	r0, #44	; 0x2c
 8004cdc:	183b      	adds	r3, r7, r0
 8004cde:	493e      	ldr	r1, [pc, #248]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	801a      	strh	r2, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	18d3      	adds	r3, r2, r3
 8004cee:	183a      	adds	r2, r7, r0
 8004cf0:	8812      	ldrh	r2, [r2, #0]
 8004cf2:	493d      	ldr	r1, [pc, #244]	; (8004de8 <USB_DeactivateEndpoint+0x378>)
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	18d2      	adds	r2, r2, r3
 8004d04:	212a      	movs	r1, #42	; 0x2a
 8004d06:	187b      	adds	r3, r7, r1
 8004d08:	8812      	ldrh	r2, [r2, #0]
 8004d0a:	801a      	strh	r2, [r3, #0]
 8004d0c:	187b      	adds	r3, r7, r1
 8004d0e:	881b      	ldrh	r3, [r3, #0]
 8004d10:	2240      	movs	r2, #64	; 0x40
 8004d12:	4013      	ands	r3, r2
 8004d14:	d016      	beq.n	8004d44 <USB_DeactivateEndpoint+0x2d4>
 8004d16:	687a      	ldr	r2, [r7, #4]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	18d3      	adds	r3, r2, r3
 8004d20:	881b      	ldrh	r3, [r3, #0]
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	2028      	movs	r0, #40	; 0x28
 8004d26:	183b      	adds	r3, r7, r0
 8004d28:	492b      	ldr	r1, [pc, #172]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004d2a:	400a      	ands	r2, r1
 8004d2c:	801a      	strh	r2, [r3, #0]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	18d3      	adds	r3, r2, r3
 8004d38:	183a      	adds	r2, r7, r0
 8004d3a:	8812      	ldrh	r2, [r2, #0]
 8004d3c:	4927      	ldr	r1, [pc, #156]	; (8004ddc <USB_DeactivateEndpoint+0x36c>)
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	b292      	uxth	r2, r2
 8004d42:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	18d3      	adds	r3, r2, r3
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29a      	uxth	r2, r3
 8004d52:	2026      	movs	r0, #38	; 0x26
 8004d54:	183b      	adds	r3, r7, r0
 8004d56:	4920      	ldr	r1, [pc, #128]	; (8004dd8 <USB_DeactivateEndpoint+0x368>)
 8004d58:	400a      	ands	r2, r1
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	18d3      	adds	r3, r2, r3
 8004d66:	183a      	adds	r2, r7, r0
 8004d68:	8812      	ldrh	r2, [r2, #0]
 8004d6a:	491f      	ldr	r1, [pc, #124]	; (8004de8 <USB_DeactivateEndpoint+0x378>)
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	18d3      	adds	r3, r2, r3
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	2024      	movs	r0, #36	; 0x24
 8004d82:	183b      	adds	r3, r7, r0
 8004d84:	4916      	ldr	r1, [pc, #88]	; (8004de0 <USB_DeactivateEndpoint+0x370>)
 8004d86:	400a      	ands	r2, r1
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	18d3      	adds	r3, r2, r3
 8004d94:	183a      	adds	r2, r7, r0
 8004d96:	8812      	ldrh	r2, [r2, #0]
 8004d98:	4912      	ldr	r1, [pc, #72]	; (8004de4 <USB_DeactivateEndpoint+0x374>)
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	b292      	uxth	r2, r2
 8004d9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	18d3      	adds	r3, r2, r3
 8004daa:	881b      	ldrh	r3, [r3, #0]
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	2022      	movs	r0, #34	; 0x22
 8004db0:	183b      	adds	r3, r7, r0
 8004db2:	490e      	ldr	r1, [pc, #56]	; (8004dec <USB_DeactivateEndpoint+0x37c>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	801a      	strh	r2, [r3, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	18d3      	adds	r3, r2, r3
 8004dc2:	183a      	adds	r2, r7, r0
 8004dc4:	8812      	ldrh	r2, [r2, #0]
 8004dc6:	4907      	ldr	r1, [pc, #28]	; (8004de4 <USB_DeactivateEndpoint+0x374>)
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	0018      	movs	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b00c      	add	sp, #48	; 0x30
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	ffff8f8f 	.word	0xffff8f8f
 8004ddc:	ffff80c0 	.word	0xffff80c0
 8004de0:	ffff8fbf 	.word	0xffff8fbf
 8004de4:	ffff8080 	.word	0xffff8080
 8004de8:	ffffc080 	.word	0xffffc080
 8004dec:	ffffbf8f 	.word	0xffffbf8f

08004df0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b0c3      	sub	sp, #268	; 0x10c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d001      	beq.n	8004e06 <USB_EPStartXfer+0x16>
 8004e02:	f000 fcef 	bl	80057e4 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d905      	bls.n	8004e1e <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	1d7a      	adds	r2, r7, #5
 8004e18:	32ff      	adds	r2, #255	; 0xff
 8004e1a:	6013      	str	r3, [r2, #0]
 8004e1c:	e004      	b.n	8004e28 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	1d7a      	adds	r2, r7, #5
 8004e24:	32ff      	adds	r2, #255	; 0xff
 8004e26:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	7b1b      	ldrb	r3, [r3, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d125      	bne.n	8004e7c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6959      	ldr	r1, [r3, #20]
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	88da      	ldrh	r2, [r3, #6]
 8004e38:	1d7b      	adds	r3, r7, #5
 8004e3a:	33ff      	adds	r3, #255	; 0xff
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f001 f9c9 	bl	80061d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2250      	movs	r2, #80	; 0x50
 8004e4e:	5a9b      	ldrh	r3, [r3, r2]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	001a      	movs	r2, r3
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	00da      	lsls	r2, r3, #3
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	18d3      	adds	r3, r2, r3
 8004e64:	4acc      	ldr	r2, [pc, #816]	; (8005198 <USB_EPStartXfer+0x3a8>)
 8004e66:	4694      	mov	ip, r2
 8004e68:	4463      	add	r3, ip
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	1d7b      	adds	r3, r7, #5
 8004e6e:	33ff      	adds	r3, #255	; 0xff
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	801a      	strh	r2, [r3, #0]
 8004e78:	f000 fc8f 	bl	800579a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	78db      	ldrb	r3, [r3, #3]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d000      	beq.n	8004e86 <USB_EPStartXfer+0x96>
 8004e84:	e33a      	b.n	80054fc <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6a1a      	ldr	r2, [r3, #32]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d800      	bhi.n	8004e94 <USB_EPStartXfer+0xa4>
 8004e92:	e2df      	b.n	8005454 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	18d3      	adds	r3, r2, r3
 8004e9e:	881b      	ldrh	r3, [r3, #0]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	2056      	movs	r0, #86	; 0x56
 8004ea4:	183b      	adds	r3, r7, r0
 8004ea6:	49bd      	ldr	r1, [pc, #756]	; (800519c <USB_EPStartXfer+0x3ac>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	801a      	strh	r2, [r3, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	18d3      	adds	r3, r2, r3
 8004eb6:	183a      	adds	r2, r7, r0
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	49b9      	ldr	r1, [pc, #740]	; (80051a0 <USB_EPStartXfer+0x3b0>)
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	b292      	uxth	r2, r2
 8004ec0:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	1d7b      	adds	r3, r7, #5
 8004ec8:	33ff      	adds	r3, #255	; 0xff
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	1ad2      	subs	r2, r2, r3
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	18d3      	adds	r3, r2, r3
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	2340      	movs	r3, #64	; 0x40
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	d100      	bne.n	8004eea <USB_EPStartXfer+0xfa>
 8004ee8:	e162      	b.n	80051b0 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	633b      	str	r3, [r7, #48]	; 0x30
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	785b      	ldrb	r3, [r3, #1]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d16a      	bne.n	8004fcc <USB_EPStartXfer+0x1dc>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2250      	movs	r2, #80	; 0x50
 8004efe:	5a9b      	ldrh	r3, [r3, r2]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	001a      	movs	r2, r3
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	00da      	lsls	r2, r3, #3
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	18d3      	adds	r3, r2, r3
 8004f14:	4aa3      	ldr	r2, [pc, #652]	; (80051a4 <USB_EPStartXfer+0x3b4>)
 8004f16:	4694      	mov	ip, r2
 8004f18:	4463      	add	r3, ip
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8004f1c:	1d7b      	adds	r3, r7, #5
 8004f1e:	33ff      	adds	r3, #255	; 0xff
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d110      	bne.n	8004f48 <USB_EPStartXfer+0x158>
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	881b      	ldrh	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4a9e      	ldr	r2, [pc, #632]	; (80051a8 <USB_EPStartXfer+0x3b8>)
 8004f2e:	4013      	ands	r3, r2
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	801a      	strh	r2, [r3, #0]
 8004f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4a9b      	ldr	r2, [pc, #620]	; (80051ac <USB_EPStartXfer+0x3bc>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	801a      	strh	r2, [r3, #0]
 8004f46:	e05c      	b.n	8005002 <USB_EPStartXfer+0x212>
 8004f48:	1d7b      	adds	r3, r7, #5
 8004f4a:	33ff      	adds	r3, #255	; 0xff
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2b3e      	cmp	r3, #62	; 0x3e
 8004f50:	d81c      	bhi.n	8004f8c <USB_EPStartXfer+0x19c>
 8004f52:	1d7b      	adds	r3, r7, #5
 8004f54:	33ff      	adds	r3, #255	; 0xff
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	085b      	lsrs	r3, r3, #1
 8004f5a:	1c7a      	adds	r2, r7, #1
 8004f5c:	32ff      	adds	r2, #255	; 0xff
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	1d7b      	adds	r3, r7, #5
 8004f62:	33ff      	adds	r3, #255	; 0xff
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	2201      	movs	r2, #1
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d006      	beq.n	8004f7a <USB_EPStartXfer+0x18a>
 8004f6c:	1c7b      	adds	r3, r7, #1
 8004f6e:	33ff      	adds	r3, #255	; 0xff
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	1c7a      	adds	r2, r7, #1
 8004f76:	32ff      	adds	r2, #255	; 0xff
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	1c7b      	adds	r3, r7, #1
 8004f7c:	33ff      	adds	r3, #255	; 0xff
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f88:	801a      	strh	r2, [r3, #0]
 8004f8a:	e03a      	b.n	8005002 <USB_EPStartXfer+0x212>
 8004f8c:	1d7b      	adds	r3, r7, #5
 8004f8e:	33ff      	adds	r3, #255	; 0xff
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	1c7a      	adds	r2, r7, #1
 8004f96:	32ff      	adds	r2, #255	; 0xff
 8004f98:	6013      	str	r3, [r2, #0]
 8004f9a:	1d7b      	adds	r3, r7, #5
 8004f9c:	33ff      	adds	r3, #255	; 0xff
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	221f      	movs	r2, #31
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d106      	bne.n	8004fb4 <USB_EPStartXfer+0x1c4>
 8004fa6:	1c7b      	adds	r3, r7, #1
 8004fa8:	33ff      	adds	r3, #255	; 0xff
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	1c7a      	adds	r2, r7, #1
 8004fb0:	32ff      	adds	r2, #255	; 0xff
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	1c7b      	adds	r3, r7, #1
 8004fb6:	33ff      	adds	r3, #255	; 0xff
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	029b      	lsls	r3, r3, #10
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	4a7a      	ldr	r2, [pc, #488]	; (80051ac <USB_EPStartXfer+0x3bc>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	e01a      	b.n	8005002 <USB_EPStartXfer+0x212>
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	785b      	ldrb	r3, [r3, #1]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d116      	bne.n	8005002 <USB_EPStartXfer+0x212>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2250      	movs	r2, #80	; 0x50
 8004fd8:	5a9b      	ldrh	r3, [r3, r2]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	001a      	movs	r2, r3
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	189b      	adds	r3, r3, r2
 8004fe2:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	00da      	lsls	r2, r3, #3
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	18d3      	adds	r3, r2, r3
 8004fee:	4a6d      	ldr	r2, [pc, #436]	; (80051a4 <USB_EPStartXfer+0x3b4>)
 8004ff0:	4694      	mov	ip, r2
 8004ff2:	4463      	add	r3, ip
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff6:	1d7b      	adds	r3, r7, #5
 8004ff8:	33ff      	adds	r3, #255	; 0xff
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005002:	2076      	movs	r0, #118	; 0x76
 8005004:	183b      	adds	r3, r7, r0
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	8952      	ldrh	r2, [r2, #10]
 800500a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6959      	ldr	r1, [r3, #20]
 8005010:	1d7b      	adds	r3, r7, #5
 8005012:	33ff      	adds	r3, #255	; 0xff
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	b29c      	uxth	r4, r3
 8005018:	183b      	adds	r3, r7, r0
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	0023      	movs	r3, r4
 8005020:	f001 f8da 	bl	80061d8 <USB_WritePMA>
            ep->xfer_buff += len;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695a      	ldr	r2, [r3, #20]
 8005028:	1d7b      	adds	r3, r7, #5
 800502a:	33ff      	adds	r3, #255	; 0xff
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	18d2      	adds	r2, r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	429a      	cmp	r2, r3
 800503e:	d908      	bls.n	8005052 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	6a1a      	ldr	r2, [r3, #32]
 8005044:	1d7b      	adds	r3, r7, #5
 8005046:	33ff      	adds	r3, #255	; 0xff
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	1ad2      	subs	r2, r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	621a      	str	r2, [r3, #32]
 8005050:	e007      	b.n	8005062 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	1d7a      	adds	r2, r7, #5
 8005058:	32ff      	adds	r2, #255	; 0xff
 800505a:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2200      	movs	r2, #0
 8005060:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	785b      	ldrb	r3, [r3, #1]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d166      	bne.n	8005138 <USB_EPStartXfer+0x348>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2250      	movs	r2, #80	; 0x50
 8005072:	5a9b      	ldrh	r3, [r3, r2]
 8005074:	b29b      	uxth	r3, r3
 8005076:	001a      	movs	r2, r3
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	189b      	adds	r3, r3, r2
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	00da      	lsls	r2, r3, #3
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	18d3      	adds	r3, r2, r3
 8005088:	4a43      	ldr	r2, [pc, #268]	; (8005198 <USB_EPStartXfer+0x3a8>)
 800508a:	4694      	mov	ip, r2
 800508c:	4463      	add	r3, ip
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	1d7b      	adds	r3, r7, #5
 8005092:	33ff      	adds	r3, #255	; 0xff
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d110      	bne.n	80050bc <USB_EPStartXfer+0x2cc>
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4a41      	ldr	r2, [pc, #260]	; (80051a8 <USB_EPStartXfer+0x3b8>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	801a      	strh	r2, [r3, #0]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	4a3e      	ldr	r2, [pc, #248]	; (80051ac <USB_EPStartXfer+0x3bc>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b29a      	uxth	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	801a      	strh	r2, [r3, #0]
 80050ba:	e05a      	b.n	8005172 <USB_EPStartXfer+0x382>
 80050bc:	1d7b      	adds	r3, r7, #5
 80050be:	33ff      	adds	r3, #255	; 0xff
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b3e      	cmp	r3, #62	; 0x3e
 80050c4:	d81a      	bhi.n	80050fc <USB_EPStartXfer+0x30c>
 80050c6:	1d7b      	adds	r3, r7, #5
 80050c8:	33ff      	adds	r3, #255	; 0xff
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	085b      	lsrs	r3, r3, #1
 80050ce:	21fc      	movs	r1, #252	; 0xfc
 80050d0:	187a      	adds	r2, r7, r1
 80050d2:	6013      	str	r3, [r2, #0]
 80050d4:	1d7b      	adds	r3, r7, #5
 80050d6:	33ff      	adds	r3, #255	; 0xff
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2201      	movs	r2, #1
 80050dc:	4013      	ands	r3, r2
 80050de:	d004      	beq.n	80050ea <USB_EPStartXfer+0x2fa>
 80050e0:	187b      	adds	r3, r7, r1
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3301      	adds	r3, #1
 80050e6:	187a      	adds	r2, r7, r1
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	23fc      	movs	r3, #252	; 0xfc
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	029b      	lsls	r3, r3, #10
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	e03a      	b.n	8005172 <USB_EPStartXfer+0x382>
 80050fc:	1d7b      	adds	r3, r7, #5
 80050fe:	33ff      	adds	r3, #255	; 0xff
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	21fc      	movs	r1, #252	; 0xfc
 8005106:	187a      	adds	r2, r7, r1
 8005108:	6013      	str	r3, [r2, #0]
 800510a:	1d7b      	adds	r3, r7, #5
 800510c:	33ff      	adds	r3, #255	; 0xff
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	221f      	movs	r2, #31
 8005112:	4013      	ands	r3, r2
 8005114:	d104      	bne.n	8005120 <USB_EPStartXfer+0x330>
 8005116:	187b      	adds	r3, r7, r1
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3b01      	subs	r3, #1
 800511c:	187a      	adds	r2, r7, r1
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	23fc      	movs	r3, #252	; 0xfc
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	b29b      	uxth	r3, r3
 8005128:	029b      	lsls	r3, r3, #10
 800512a:	b29b      	uxth	r3, r3
 800512c:	4a1f      	ldr	r2, [pc, #124]	; (80051ac <USB_EPStartXfer+0x3bc>)
 800512e:	4313      	orrs	r3, r2
 8005130:	b29a      	uxth	r2, r3
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	801a      	strh	r2, [r3, #0]
 8005136:	e01c      	b.n	8005172 <USB_EPStartXfer+0x382>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	785b      	ldrb	r3, [r3, #1]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d118      	bne.n	8005172 <USB_EPStartXfer+0x382>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	623b      	str	r3, [r7, #32]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2250      	movs	r2, #80	; 0x50
 8005148:	5a9b      	ldrh	r3, [r3, r2]
 800514a:	b29b      	uxth	r3, r3
 800514c:	001a      	movs	r2, r3
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	189b      	adds	r3, r3, r2
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	00da      	lsls	r2, r3, #3
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	18d3      	adds	r3, r2, r3
 800515e:	4a0e      	ldr	r2, [pc, #56]	; (8005198 <USB_EPStartXfer+0x3a8>)
 8005160:	4694      	mov	ip, r2
 8005162:	4463      	add	r3, ip
 8005164:	61fb      	str	r3, [r7, #28]
 8005166:	1d7b      	adds	r3, r7, #5
 8005168:	33ff      	adds	r3, #255	; 0xff
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b29a      	uxth	r2, r3
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005172:	2076      	movs	r0, #118	; 0x76
 8005174:	183b      	adds	r3, r7, r0
 8005176:	683a      	ldr	r2, [r7, #0]
 8005178:	8912      	ldrh	r2, [r2, #8]
 800517a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6959      	ldr	r1, [r3, #20]
 8005180:	1d7b      	adds	r3, r7, #5
 8005182:	33ff      	adds	r3, #255	; 0xff
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	b29c      	uxth	r4, r3
 8005188:	183b      	adds	r3, r7, r0
 800518a:	881a      	ldrh	r2, [r3, #0]
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	0023      	movs	r3, r4
 8005190:	f001 f822 	bl	80061d8 <USB_WritePMA>
 8005194:	e301      	b.n	800579a <USB_EPStartXfer+0x9aa>
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	00000402 	.word	0x00000402
 800519c:	ffff8f8f 	.word	0xffff8f8f
 80051a0:	ffff8180 	.word	0xffff8180
 80051a4:	00000406 	.word	0x00000406
 80051a8:	ffff83ff 	.word	0xffff83ff
 80051ac:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	785b      	ldrb	r3, [r3, #1]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d166      	bne.n	8005286 <USB_EPStartXfer+0x496>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2250      	movs	r2, #80	; 0x50
 80051c0:	5a9b      	ldrh	r3, [r3, r2]
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	001a      	movs	r2, r3
 80051c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c8:	189b      	adds	r3, r3, r2
 80051ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00da      	lsls	r2, r3, #3
 80051d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d4:	18d3      	adds	r3, r2, r3
 80051d6:	4ac3      	ldr	r2, [pc, #780]	; (80054e4 <USB_EPStartXfer+0x6f4>)
 80051d8:	4694      	mov	ip, r2
 80051da:	4463      	add	r3, ip
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
 80051de:	1d7b      	adds	r3, r7, #5
 80051e0:	33ff      	adds	r3, #255	; 0xff
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d110      	bne.n	800520a <USB_EPStartXfer+0x41a>
 80051e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ea:	881b      	ldrh	r3, [r3, #0]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	4abe      	ldr	r2, [pc, #760]	; (80054e8 <USB_EPStartXfer+0x6f8>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	4abb      	ldr	r2, [pc, #748]	; (80054ec <USB_EPStartXfer+0x6fc>)
 8005200:	4313      	orrs	r3, r2
 8005202:	b29a      	uxth	r2, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	e05a      	b.n	80052c0 <USB_EPStartXfer+0x4d0>
 800520a:	1d7b      	adds	r3, r7, #5
 800520c:	33ff      	adds	r3, #255	; 0xff
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	2b3e      	cmp	r3, #62	; 0x3e
 8005212:	d81a      	bhi.n	800524a <USB_EPStartXfer+0x45a>
 8005214:	1d7b      	adds	r3, r7, #5
 8005216:	33ff      	adds	r3, #255	; 0xff
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	085b      	lsrs	r3, r3, #1
 800521c:	21f8      	movs	r1, #248	; 0xf8
 800521e:	187a      	adds	r2, r7, r1
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	1d7b      	adds	r3, r7, #5
 8005224:	33ff      	adds	r3, #255	; 0xff
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2201      	movs	r2, #1
 800522a:	4013      	ands	r3, r2
 800522c:	d004      	beq.n	8005238 <USB_EPStartXfer+0x448>
 800522e:	187b      	adds	r3, r7, r1
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3301      	adds	r3, #1
 8005234:	187a      	adds	r2, r7, r1
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	23f8      	movs	r3, #248	; 0xf8
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	b29b      	uxth	r3, r3
 8005240:	029b      	lsls	r3, r3, #10
 8005242:	b29a      	uxth	r2, r3
 8005244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005246:	801a      	strh	r2, [r3, #0]
 8005248:	e03a      	b.n	80052c0 <USB_EPStartXfer+0x4d0>
 800524a:	1d7b      	adds	r3, r7, #5
 800524c:	33ff      	adds	r3, #255	; 0xff
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	095b      	lsrs	r3, r3, #5
 8005252:	21f8      	movs	r1, #248	; 0xf8
 8005254:	187a      	adds	r2, r7, r1
 8005256:	6013      	str	r3, [r2, #0]
 8005258:	1d7b      	adds	r3, r7, #5
 800525a:	33ff      	adds	r3, #255	; 0xff
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	221f      	movs	r2, #31
 8005260:	4013      	ands	r3, r2
 8005262:	d104      	bne.n	800526e <USB_EPStartXfer+0x47e>
 8005264:	187b      	adds	r3, r7, r1
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	3b01      	subs	r3, #1
 800526a:	187a      	adds	r2, r7, r1
 800526c:	6013      	str	r3, [r2, #0]
 800526e:	23f8      	movs	r3, #248	; 0xf8
 8005270:	18fb      	adds	r3, r7, r3
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	b29b      	uxth	r3, r3
 800527a:	4a9c      	ldr	r2, [pc, #624]	; (80054ec <USB_EPStartXfer+0x6fc>)
 800527c:	4313      	orrs	r3, r2
 800527e:	b29a      	uxth	r2, r3
 8005280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005282:	801a      	strh	r2, [r3, #0]
 8005284:	e01c      	b.n	80052c0 <USB_EPStartXfer+0x4d0>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	785b      	ldrb	r3, [r3, #1]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d118      	bne.n	80052c0 <USB_EPStartXfer+0x4d0>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	653b      	str	r3, [r7, #80]	; 0x50
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2250      	movs	r2, #80	; 0x50
 8005296:	5a9b      	ldrh	r3, [r3, r2]
 8005298:	b29b      	uxth	r3, r3
 800529a:	001a      	movs	r2, r3
 800529c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800529e:	189b      	adds	r3, r3, r2
 80052a0:	653b      	str	r3, [r7, #80]	; 0x50
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	00da      	lsls	r2, r3, #3
 80052a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052aa:	18d3      	adds	r3, r2, r3
 80052ac:	4a8d      	ldr	r2, [pc, #564]	; (80054e4 <USB_EPStartXfer+0x6f4>)
 80052ae:	4694      	mov	ip, r2
 80052b0:	4463      	add	r3, ip
 80052b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b4:	1d7b      	adds	r3, r7, #5
 80052b6:	33ff      	adds	r3, #255	; 0xff
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052c0:	2076      	movs	r0, #118	; 0x76
 80052c2:	183b      	adds	r3, r7, r0
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	8912      	ldrh	r2, [r2, #8]
 80052c8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6959      	ldr	r1, [r3, #20]
 80052ce:	1d7b      	adds	r3, r7, #5
 80052d0:	33ff      	adds	r3, #255	; 0xff
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b29c      	uxth	r4, r3
 80052d6:	183b      	adds	r3, r7, r0
 80052d8:	881a      	ldrh	r2, [r3, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	0023      	movs	r3, r4
 80052de:	f000 ff7b 	bl	80061d8 <USB_WritePMA>
            ep->xfer_buff += len;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	695a      	ldr	r2, [r3, #20]
 80052e6:	1d7b      	adds	r3, r7, #5
 80052e8:	33ff      	adds	r3, #255	; 0xff
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	18d2      	adds	r2, r2, r3
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	6a1a      	ldr	r2, [r3, #32]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d908      	bls.n	8005310 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6a1a      	ldr	r2, [r3, #32]
 8005302:	1d7b      	adds	r3, r7, #5
 8005304:	33ff      	adds	r3, #255	; 0xff
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	1ad2      	subs	r2, r2, r3
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	621a      	str	r2, [r3, #32]
 800530e:	e007      	b.n	8005320 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	1d7a      	adds	r2, r7, #5
 8005316:	32ff      	adds	r2, #255	; 0xff
 8005318:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2200      	movs	r2, #0
 800531e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	643b      	str	r3, [r7, #64]	; 0x40
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	785b      	ldrb	r3, [r3, #1]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d166      	bne.n	80053fa <USB_EPStartXfer+0x60a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2250      	movs	r2, #80	; 0x50
 8005334:	5a9b      	ldrh	r3, [r3, r2]
 8005336:	b29b      	uxth	r3, r3
 8005338:	001a      	movs	r2, r3
 800533a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533c:	189b      	adds	r3, r3, r2
 800533e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	00da      	lsls	r2, r3, #3
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	18d3      	adds	r3, r2, r3
 800534a:	4a69      	ldr	r2, [pc, #420]	; (80054f0 <USB_EPStartXfer+0x700>)
 800534c:	4694      	mov	ip, r2
 800534e:	4463      	add	r3, ip
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
 8005352:	1d7b      	adds	r3, r7, #5
 8005354:	33ff      	adds	r3, #255	; 0xff
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d110      	bne.n	800537e <USB_EPStartXfer+0x58e>
 800535c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b29b      	uxth	r3, r3
 8005362:	4a61      	ldr	r2, [pc, #388]	; (80054e8 <USB_EPStartXfer+0x6f8>)
 8005364:	4013      	ands	r3, r2
 8005366:	b29a      	uxth	r2, r3
 8005368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536a:	801a      	strh	r2, [r3, #0]
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	b29b      	uxth	r3, r3
 8005372:	4a5e      	ldr	r2, [pc, #376]	; (80054ec <USB_EPStartXfer+0x6fc>)
 8005374:	4313      	orrs	r3, r2
 8005376:	b29a      	uxth	r2, r3
 8005378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800537a:	801a      	strh	r2, [r3, #0]
 800537c:	e058      	b.n	8005430 <USB_EPStartXfer+0x640>
 800537e:	1d7b      	adds	r3, r7, #5
 8005380:	33ff      	adds	r3, #255	; 0xff
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b3e      	cmp	r3, #62	; 0x3e
 8005386:	d81a      	bhi.n	80053be <USB_EPStartXfer+0x5ce>
 8005388:	1d7b      	adds	r3, r7, #5
 800538a:	33ff      	adds	r3, #255	; 0xff
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	21f4      	movs	r1, #244	; 0xf4
 8005392:	187a      	adds	r2, r7, r1
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	1d7b      	adds	r3, r7, #5
 8005398:	33ff      	adds	r3, #255	; 0xff
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2201      	movs	r2, #1
 800539e:	4013      	ands	r3, r2
 80053a0:	d004      	beq.n	80053ac <USB_EPStartXfer+0x5bc>
 80053a2:	187b      	adds	r3, r7, r1
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3301      	adds	r3, #1
 80053a8:	187a      	adds	r2, r7, r1
 80053aa:	6013      	str	r3, [r2, #0]
 80053ac:	23f4      	movs	r3, #244	; 0xf4
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	029b      	lsls	r3, r3, #10
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	801a      	strh	r2, [r3, #0]
 80053bc:	e038      	b.n	8005430 <USB_EPStartXfer+0x640>
 80053be:	1d7b      	adds	r3, r7, #5
 80053c0:	33ff      	adds	r3, #255	; 0xff
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	095b      	lsrs	r3, r3, #5
 80053c6:	21f4      	movs	r1, #244	; 0xf4
 80053c8:	187a      	adds	r2, r7, r1
 80053ca:	6013      	str	r3, [r2, #0]
 80053cc:	1d7b      	adds	r3, r7, #5
 80053ce:	33ff      	adds	r3, #255	; 0xff
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	221f      	movs	r2, #31
 80053d4:	4013      	ands	r3, r2
 80053d6:	d104      	bne.n	80053e2 <USB_EPStartXfer+0x5f2>
 80053d8:	187b      	adds	r3, r7, r1
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3b01      	subs	r3, #1
 80053de:	187a      	adds	r2, r7, r1
 80053e0:	6013      	str	r3, [r2, #0]
 80053e2:	23f4      	movs	r3, #244	; 0xf4
 80053e4:	18fb      	adds	r3, r7, r3
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	029b      	lsls	r3, r3, #10
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	4a3f      	ldr	r2, [pc, #252]	; (80054ec <USB_EPStartXfer+0x6fc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	801a      	strh	r2, [r3, #0]
 80053f8:	e01a      	b.n	8005430 <USB_EPStartXfer+0x640>
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d116      	bne.n	8005430 <USB_EPStartXfer+0x640>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2250      	movs	r2, #80	; 0x50
 8005406:	5a9b      	ldrh	r3, [r3, r2]
 8005408:	b29b      	uxth	r3, r3
 800540a:	001a      	movs	r2, r3
 800540c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800540e:	189b      	adds	r3, r3, r2
 8005410:	643b      	str	r3, [r7, #64]	; 0x40
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	00da      	lsls	r2, r3, #3
 8005418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800541a:	18d3      	adds	r3, r2, r3
 800541c:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <USB_EPStartXfer+0x700>)
 800541e:	4694      	mov	ip, r2
 8005420:	4463      	add	r3, ip
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005424:	1d7b      	adds	r3, r7, #5
 8005426:	33ff      	adds	r3, #255	; 0xff
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	b29a      	uxth	r2, r3
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005430:	2076      	movs	r0, #118	; 0x76
 8005432:	183b      	adds	r3, r7, r0
 8005434:	683a      	ldr	r2, [r7, #0]
 8005436:	8952      	ldrh	r2, [r2, #10]
 8005438:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6959      	ldr	r1, [r3, #20]
 800543e:	1d7b      	adds	r3, r7, #5
 8005440:	33ff      	adds	r3, #255	; 0xff
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b29c      	uxth	r4, r3
 8005446:	183b      	adds	r3, r7, r0
 8005448:	881a      	ldrh	r2, [r3, #0]
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	0023      	movs	r3, r4
 800544e:	f000 fec3 	bl	80061d8 <USB_WritePMA>
 8005452:	e1a2      	b.n	800579a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	1d7a      	adds	r2, r7, #5
 800545a:	32ff      	adds	r2, #255	; 0xff
 800545c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	18d3      	adds	r3, r2, r3
 8005468:	881b      	ldrh	r3, [r3, #0]
 800546a:	b29a      	uxth	r2, r3
 800546c:	2062      	movs	r0, #98	; 0x62
 800546e:	183b      	adds	r3, r7, r0
 8005470:	4920      	ldr	r1, [pc, #128]	; (80054f4 <USB_EPStartXfer+0x704>)
 8005472:	400a      	ands	r2, r1
 8005474:	801a      	strh	r2, [r3, #0]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	18d3      	adds	r3, r2, r3
 8005480:	183a      	adds	r2, r7, r0
 8005482:	8812      	ldrh	r2, [r2, #0]
 8005484:	491c      	ldr	r1, [pc, #112]	; (80054f8 <USB_EPStartXfer+0x708>)
 8005486:	430a      	orrs	r2, r1
 8005488:	b292      	uxth	r2, r2
 800548a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2250      	movs	r2, #80	; 0x50
 8005494:	5a9b      	ldrh	r3, [r3, r2]
 8005496:	b29b      	uxth	r3, r3
 8005498:	001a      	movs	r2, r3
 800549a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800549c:	189b      	adds	r3, r3, r2
 800549e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	00da      	lsls	r2, r3, #3
 80054a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a8:	18d3      	adds	r3, r2, r3
 80054aa:	4a0e      	ldr	r2, [pc, #56]	; (80054e4 <USB_EPStartXfer+0x6f4>)
 80054ac:	4694      	mov	ip, r2
 80054ae:	4463      	add	r3, ip
 80054b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80054b2:	1d7b      	adds	r3, r7, #5
 80054b4:	33ff      	adds	r3, #255	; 0xff
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054bc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80054be:	2076      	movs	r0, #118	; 0x76
 80054c0:	183b      	adds	r3, r7, r0
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	8912      	ldrh	r2, [r2, #8]
 80054c6:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6959      	ldr	r1, [r3, #20]
 80054cc:	1d7b      	adds	r3, r7, #5
 80054ce:	33ff      	adds	r3, #255	; 0xff
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	b29c      	uxth	r4, r3
 80054d4:	183b      	adds	r3, r7, r0
 80054d6:	881a      	ldrh	r2, [r3, #0]
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	0023      	movs	r3, r4
 80054dc:	f000 fe7c 	bl	80061d8 <USB_WritePMA>
 80054e0:	e15b      	b.n	800579a <USB_EPStartXfer+0x9aa>
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	00000402 	.word	0x00000402
 80054e8:	ffff83ff 	.word	0xffff83ff
 80054ec:	ffff8000 	.word	0xffff8000
 80054f0:	00000406 	.word	0x00000406
 80054f4:	ffff8e8f 	.word	0xffff8e8f
 80054f8:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	6a1a      	ldr	r2, [r3, #32]
 8005500:	1d7b      	adds	r3, r7, #5
 8005502:	33ff      	adds	r3, #255	; 0xff
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	1ad2      	subs	r2, r2, r3
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	001a      	movs	r2, r3
 800551c:	2340      	movs	r3, #64	; 0x40
 800551e:	4013      	ands	r3, r2
 8005520:	d100      	bne.n	8005524 <USB_EPStartXfer+0x734>
 8005522:	e099      	b.n	8005658 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	673b      	str	r3, [r7, #112]	; 0x70
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	785b      	ldrb	r3, [r3, #1]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d166      	bne.n	80055fe <USB_EPStartXfer+0x80e>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	66bb      	str	r3, [r7, #104]	; 0x68
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2250      	movs	r2, #80	; 0x50
 8005538:	5a9b      	ldrh	r3, [r3, r2]
 800553a:	b29b      	uxth	r3, r3
 800553c:	001a      	movs	r2, r3
 800553e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005540:	189b      	adds	r3, r3, r2
 8005542:	66bb      	str	r3, [r7, #104]	; 0x68
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	00da      	lsls	r2, r3, #3
 800554a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800554c:	18d3      	adds	r3, r2, r3
 800554e:	4ad0      	ldr	r2, [pc, #832]	; (8005890 <USB_EPStartXfer+0xaa0>)
 8005550:	4694      	mov	ip, r2
 8005552:	4463      	add	r3, ip
 8005554:	667b      	str	r3, [r7, #100]	; 0x64
 8005556:	1d7b      	adds	r3, r7, #5
 8005558:	33ff      	adds	r3, #255	; 0xff
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d110      	bne.n	8005582 <USB_EPStartXfer+0x792>
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	881b      	ldrh	r3, [r3, #0]
 8005564:	b29b      	uxth	r3, r3
 8005566:	4acb      	ldr	r2, [pc, #812]	; (8005894 <USB_EPStartXfer+0xaa4>)
 8005568:	4013      	ands	r3, r2
 800556a:	b29a      	uxth	r2, r3
 800556c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005572:	881b      	ldrh	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	4ac8      	ldr	r2, [pc, #800]	; (8005898 <USB_EPStartXfer+0xaa8>)
 8005578:	4313      	orrs	r3, r2
 800557a:	b29a      	uxth	r2, r3
 800557c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800557e:	801a      	strh	r2, [r3, #0]
 8005580:	e058      	b.n	8005634 <USB_EPStartXfer+0x844>
 8005582:	1d7b      	adds	r3, r7, #5
 8005584:	33ff      	adds	r3, #255	; 0xff
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b3e      	cmp	r3, #62	; 0x3e
 800558a:	d81a      	bhi.n	80055c2 <USB_EPStartXfer+0x7d2>
 800558c:	1d7b      	adds	r3, r7, #5
 800558e:	33ff      	adds	r3, #255	; 0xff
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	085b      	lsrs	r3, r3, #1
 8005594:	21f0      	movs	r1, #240	; 0xf0
 8005596:	187a      	adds	r2, r7, r1
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	1d7b      	adds	r3, r7, #5
 800559c:	33ff      	adds	r3, #255	; 0xff
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2201      	movs	r2, #1
 80055a2:	4013      	ands	r3, r2
 80055a4:	d004      	beq.n	80055b0 <USB_EPStartXfer+0x7c0>
 80055a6:	187b      	adds	r3, r7, r1
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3301      	adds	r3, #1
 80055ac:	187a      	adds	r2, r7, r1
 80055ae:	6013      	str	r3, [r2, #0]
 80055b0:	23f0      	movs	r3, #240	; 0xf0
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	029b      	lsls	r3, r3, #10
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055be:	801a      	strh	r2, [r3, #0]
 80055c0:	e038      	b.n	8005634 <USB_EPStartXfer+0x844>
 80055c2:	1d7b      	adds	r3, r7, #5
 80055c4:	33ff      	adds	r3, #255	; 0xff
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	21f0      	movs	r1, #240	; 0xf0
 80055cc:	187a      	adds	r2, r7, r1
 80055ce:	6013      	str	r3, [r2, #0]
 80055d0:	1d7b      	adds	r3, r7, #5
 80055d2:	33ff      	adds	r3, #255	; 0xff
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	221f      	movs	r2, #31
 80055d8:	4013      	ands	r3, r2
 80055da:	d104      	bne.n	80055e6 <USB_EPStartXfer+0x7f6>
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	187a      	adds	r2, r7, r1
 80055e4:	6013      	str	r3, [r2, #0]
 80055e6:	23f0      	movs	r3, #240	; 0xf0
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	029b      	lsls	r3, r3, #10
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	4aa9      	ldr	r2, [pc, #676]	; (8005898 <USB_EPStartXfer+0xaa8>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055fa:	801a      	strh	r2, [r3, #0]
 80055fc:	e01a      	b.n	8005634 <USB_EPStartXfer+0x844>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	785b      	ldrb	r3, [r3, #1]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d116      	bne.n	8005634 <USB_EPStartXfer+0x844>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2250      	movs	r2, #80	; 0x50
 800560a:	5a9b      	ldrh	r3, [r3, r2]
 800560c:	b29b      	uxth	r3, r3
 800560e:	001a      	movs	r2, r3
 8005610:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005612:	189b      	adds	r3, r3, r2
 8005614:	673b      	str	r3, [r7, #112]	; 0x70
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	00da      	lsls	r2, r3, #3
 800561c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800561e:	18d3      	adds	r3, r2, r3
 8005620:	4a9b      	ldr	r2, [pc, #620]	; (8005890 <USB_EPStartXfer+0xaa0>)
 8005622:	4694      	mov	ip, r2
 8005624:	4463      	add	r3, ip
 8005626:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005628:	1d7b      	adds	r3, r7, #5
 800562a:	33ff      	adds	r3, #255	; 0xff
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	b29a      	uxth	r2, r3
 8005630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005632:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005634:	2076      	movs	r0, #118	; 0x76
 8005636:	183b      	adds	r3, r7, r0
 8005638:	683a      	ldr	r2, [r7, #0]
 800563a:	8952      	ldrh	r2, [r2, #10]
 800563c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6959      	ldr	r1, [r3, #20]
 8005642:	1d7b      	adds	r3, r7, #5
 8005644:	33ff      	adds	r3, #255	; 0xff
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b29c      	uxth	r4, r3
 800564a:	183b      	adds	r3, r7, r0
 800564c:	881a      	ldrh	r2, [r3, #0]
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	0023      	movs	r3, r4
 8005652:	f000 fdc1 	bl	80061d8 <USB_WritePMA>
 8005656:	e0a0      	b.n	800579a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d166      	bne.n	800572e <USB_EPStartXfer+0x93e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2250      	movs	r2, #80	; 0x50
 8005668:	5a9b      	ldrh	r3, [r3, r2]
 800566a:	b29b      	uxth	r3, r3
 800566c:	001a      	movs	r2, r3
 800566e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005670:	189b      	adds	r3, r3, r2
 8005672:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	00da      	lsls	r2, r3, #3
 800567a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800567c:	18d3      	adds	r3, r2, r3
 800567e:	4a87      	ldr	r2, [pc, #540]	; (800589c <USB_EPStartXfer+0xaac>)
 8005680:	4694      	mov	ip, r2
 8005682:	4463      	add	r3, ip
 8005684:	67bb      	str	r3, [r7, #120]	; 0x78
 8005686:	1d7b      	adds	r3, r7, #5
 8005688:	33ff      	adds	r3, #255	; 0xff
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d110      	bne.n	80056b2 <USB_EPStartXfer+0x8c2>
 8005690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	b29b      	uxth	r3, r3
 8005696:	4a7f      	ldr	r2, [pc, #508]	; (8005894 <USB_EPStartXfer+0xaa4>)
 8005698:	4013      	ands	r3, r2
 800569a:	b29a      	uxth	r2, r3
 800569c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569e:	801a      	strh	r2, [r3, #0]
 80056a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	4a7c      	ldr	r2, [pc, #496]	; (8005898 <USB_EPStartXfer+0xaa8>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ae:	801a      	strh	r2, [r3, #0]
 80056b0:	e062      	b.n	8005778 <USB_EPStartXfer+0x988>
 80056b2:	1d7b      	adds	r3, r7, #5
 80056b4:	33ff      	adds	r3, #255	; 0xff
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b3e      	cmp	r3, #62	; 0x3e
 80056ba:	d81a      	bhi.n	80056f2 <USB_EPStartXfer+0x902>
 80056bc:	1d7b      	adds	r3, r7, #5
 80056be:	33ff      	adds	r3, #255	; 0xff
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	21ec      	movs	r1, #236	; 0xec
 80056c6:	187a      	adds	r2, r7, r1
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	1d7b      	adds	r3, r7, #5
 80056cc:	33ff      	adds	r3, #255	; 0xff
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2201      	movs	r2, #1
 80056d2:	4013      	ands	r3, r2
 80056d4:	d004      	beq.n	80056e0 <USB_EPStartXfer+0x8f0>
 80056d6:	187b      	adds	r3, r7, r1
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	187a      	adds	r2, r7, r1
 80056de:	6013      	str	r3, [r2, #0]
 80056e0:	23ec      	movs	r3, #236	; 0xec
 80056e2:	18fb      	adds	r3, r7, r3
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	b29b      	uxth	r3, r3
 80056e8:	029b      	lsls	r3, r3, #10
 80056ea:	b29a      	uxth	r2, r3
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	e042      	b.n	8005778 <USB_EPStartXfer+0x988>
 80056f2:	1d7b      	adds	r3, r7, #5
 80056f4:	33ff      	adds	r3, #255	; 0xff
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	21ec      	movs	r1, #236	; 0xec
 80056fc:	187a      	adds	r2, r7, r1
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	1d7b      	adds	r3, r7, #5
 8005702:	33ff      	adds	r3, #255	; 0xff
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	221f      	movs	r2, #31
 8005708:	4013      	ands	r3, r2
 800570a:	d104      	bne.n	8005716 <USB_EPStartXfer+0x926>
 800570c:	187b      	adds	r3, r7, r1
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3b01      	subs	r3, #1
 8005712:	187a      	adds	r2, r7, r1
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	23ec      	movs	r3, #236	; 0xec
 8005718:	18fb      	adds	r3, r7, r3
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b29b      	uxth	r3, r3
 800571e:	029b      	lsls	r3, r3, #10
 8005720:	b29b      	uxth	r3, r3
 8005722:	4a5d      	ldr	r2, [pc, #372]	; (8005898 <USB_EPStartXfer+0xaa8>)
 8005724:	4313      	orrs	r3, r2
 8005726:	b29a      	uxth	r2, r3
 8005728:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	e024      	b.n	8005778 <USB_EPStartXfer+0x988>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	785b      	ldrb	r3, [r3, #1]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d120      	bne.n	8005778 <USB_EPStartXfer+0x988>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2184      	movs	r1, #132	; 0x84
 800573a:	187a      	adds	r2, r7, r1
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2250      	movs	r2, #80	; 0x50
 8005742:	5a9b      	ldrh	r3, [r3, r2]
 8005744:	b29b      	uxth	r3, r3
 8005746:	001a      	movs	r2, r3
 8005748:	187b      	adds	r3, r7, r1
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	189b      	adds	r3, r3, r2
 800574e:	187a      	adds	r2, r7, r1
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	00da      	lsls	r2, r3, #3
 8005758:	187b      	adds	r3, r7, r1
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	18d3      	adds	r3, r2, r3
 800575e:	4a4f      	ldr	r2, [pc, #316]	; (800589c <USB_EPStartXfer+0xaac>)
 8005760:	4694      	mov	ip, r2
 8005762:	4463      	add	r3, ip
 8005764:	2180      	movs	r1, #128	; 0x80
 8005766:	187a      	adds	r2, r7, r1
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	1d7b      	adds	r3, r7, #5
 800576c:	33ff      	adds	r3, #255	; 0xff
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	b29a      	uxth	r2, r3
 8005772:	187b      	adds	r3, r7, r1
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005778:	2076      	movs	r0, #118	; 0x76
 800577a:	183b      	adds	r3, r7, r0
 800577c:	683a      	ldr	r2, [r7, #0]
 800577e:	8912      	ldrh	r2, [r2, #8]
 8005780:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6959      	ldr	r1, [r3, #20]
 8005786:	1d7b      	adds	r3, r7, #5
 8005788:	33ff      	adds	r3, #255	; 0xff
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	b29c      	uxth	r4, r3
 800578e:	183b      	adds	r3, r7, r0
 8005790:	881a      	ldrh	r2, [r3, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	0023      	movs	r3, r4
 8005796:	f000 fd1f 	bl	80061d8 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	18d3      	adds	r3, r2, r3
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	200a      	movs	r0, #10
 80057aa:	183b      	adds	r3, r7, r0
 80057ac:	493c      	ldr	r1, [pc, #240]	; (80058a0 <USB_EPStartXfer+0xab0>)
 80057ae:	400a      	ands	r2, r1
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	183b      	adds	r3, r7, r0
 80057b4:	183a      	adds	r2, r7, r0
 80057b6:	8812      	ldrh	r2, [r2, #0]
 80057b8:	2110      	movs	r1, #16
 80057ba:	404a      	eors	r2, r1
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	183b      	adds	r3, r7, r0
 80057c0:	183a      	adds	r2, r7, r0
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	2120      	movs	r1, #32
 80057c6:	404a      	eors	r2, r1
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	18d3      	adds	r3, r2, r3
 80057d4:	183a      	adds	r2, r7, r0
 80057d6:	8812      	ldrh	r2, [r2, #0]
 80057d8:	4932      	ldr	r1, [pc, #200]	; (80058a4 <USB_EPStartXfer+0xab4>)
 80057da:	430a      	orrs	r2, r1
 80057dc:	b292      	uxth	r2, r2
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	f000 fbaf 	bl	8005f42 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d000      	beq.n	80057ee <USB_EPStartXfer+0x9fe>
 80057ec:	e09e      	b.n	800592c <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d90d      	bls.n	8005816 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	1d7a      	adds	r2, r7, #5
 8005800:	32ff      	adds	r2, #255	; 0xff
 8005802:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	1d7b      	adds	r3, r7, #5
 800580a:	33ff      	adds	r3, #255	; 0xff
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	619a      	str	r2, [r3, #24]
 8005814:	e007      	b.n	8005826 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	1d7a      	adds	r2, r7, #5
 800581c:	32ff      	adds	r2, #255	; 0xff
 800581e:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2190      	movs	r1, #144	; 0x90
 800582a:	187a      	adds	r2, r7, r1
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2250      	movs	r2, #80	; 0x50
 8005832:	5a9b      	ldrh	r3, [r3, r2]
 8005834:	b29b      	uxth	r3, r3
 8005836:	001a      	movs	r2, r3
 8005838:	187b      	adds	r3, r7, r1
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	189b      	adds	r3, r3, r2
 800583e:	187a      	adds	r2, r7, r1
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	00da      	lsls	r2, r3, #3
 8005848:	187b      	adds	r3, r7, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	18d3      	adds	r3, r2, r3
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <USB_EPStartXfer+0xaa0>)
 8005850:	4694      	mov	ip, r2
 8005852:	4463      	add	r3, ip
 8005854:	218c      	movs	r1, #140	; 0x8c
 8005856:	187a      	adds	r2, r7, r1
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	1d7b      	adds	r3, r7, #5
 800585c:	33ff      	adds	r3, #255	; 0xff
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d121      	bne.n	80058a8 <USB_EPStartXfer+0xab8>
 8005864:	187b      	adds	r3, r7, r1
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	b29b      	uxth	r3, r3
 800586c:	4a09      	ldr	r2, [pc, #36]	; (8005894 <USB_EPStartXfer+0xaa4>)
 800586e:	4013      	ands	r3, r2
 8005870:	b29a      	uxth	r2, r3
 8005872:	187b      	adds	r3, r7, r1
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	801a      	strh	r2, [r3, #0]
 8005878:	187b      	adds	r3, r7, r1
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	881b      	ldrh	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	4a05      	ldr	r2, [pc, #20]	; (8005898 <USB_EPStartXfer+0xaa8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	b29a      	uxth	r2, r3
 8005886:	187b      	adds	r3, r7, r1
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	801a      	strh	r2, [r3, #0]
 800588c:	e334      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	00000406 	.word	0x00000406
 8005894:	ffff83ff 	.word	0xffff83ff
 8005898:	ffff8000 	.word	0xffff8000
 800589c:	00000402 	.word	0x00000402
 80058a0:	ffff8fbf 	.word	0xffff8fbf
 80058a4:	ffff8080 	.word	0xffff8080
 80058a8:	1d7b      	adds	r3, r7, #5
 80058aa:	33ff      	adds	r3, #255	; 0xff
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b3e      	cmp	r3, #62	; 0x3e
 80058b0:	d81c      	bhi.n	80058ec <USB_EPStartXfer+0xafc>
 80058b2:	1d7b      	adds	r3, r7, #5
 80058b4:	33ff      	adds	r3, #255	; 0xff
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	21e8      	movs	r1, #232	; 0xe8
 80058bc:	187a      	adds	r2, r7, r1
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	1d7b      	adds	r3, r7, #5
 80058c2:	33ff      	adds	r3, #255	; 0xff
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2201      	movs	r2, #1
 80058c8:	4013      	ands	r3, r2
 80058ca:	d004      	beq.n	80058d6 <USB_EPStartXfer+0xae6>
 80058cc:	187b      	adds	r3, r7, r1
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3301      	adds	r3, #1
 80058d2:	187a      	adds	r2, r7, r1
 80058d4:	6013      	str	r3, [r2, #0]
 80058d6:	23e8      	movs	r3, #232	; 0xe8
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	029b      	lsls	r3, r3, #10
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	238c      	movs	r3, #140	; 0x8c
 80058e4:	18fb      	adds	r3, r7, r3
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	e305      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
 80058ec:	1d7b      	adds	r3, r7, #5
 80058ee:	33ff      	adds	r3, #255	; 0xff
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	21e8      	movs	r1, #232	; 0xe8
 80058f6:	187a      	adds	r2, r7, r1
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	1d7b      	adds	r3, r7, #5
 80058fc:	33ff      	adds	r3, #255	; 0xff
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	221f      	movs	r2, #31
 8005902:	4013      	ands	r3, r2
 8005904:	d104      	bne.n	8005910 <USB_EPStartXfer+0xb20>
 8005906:	187b      	adds	r3, r7, r1
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	187a      	adds	r2, r7, r1
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	23e8      	movs	r3, #232	; 0xe8
 8005912:	18fb      	adds	r3, r7, r3
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	029b      	lsls	r3, r3, #10
 800591a:	b29b      	uxth	r3, r3
 800591c:	4aca      	ldr	r2, [pc, #808]	; (8005c48 <USB_EPStartXfer+0xe58>)
 800591e:	4313      	orrs	r3, r2
 8005920:	b29a      	uxth	r2, r3
 8005922:	238c      	movs	r3, #140	; 0x8c
 8005924:	18fb      	adds	r3, r7, r3
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	e2e5      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	78db      	ldrb	r3, [r3, #3]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d000      	beq.n	8005936 <USB_EPStartXfer+0xb46>
 8005934:	e16f      	b.n	8005c16 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d16f      	bne.n	8005a1e <USB_EPStartXfer+0xc2e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	21ac      	movs	r1, #172	; 0xac
 8005942:	187a      	adds	r2, r7, r1
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2250      	movs	r2, #80	; 0x50
 800594a:	5a9b      	ldrh	r3, [r3, r2]
 800594c:	b29b      	uxth	r3, r3
 800594e:	001a      	movs	r2, r3
 8005950:	187b      	adds	r3, r7, r1
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	189b      	adds	r3, r3, r2
 8005956:	187a      	adds	r2, r7, r1
 8005958:	6013      	str	r3, [r2, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	00da      	lsls	r2, r3, #3
 8005960:	187b      	adds	r3, r7, r1
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	4ab9      	ldr	r2, [pc, #740]	; (8005c4c <USB_EPStartXfer+0xe5c>)
 8005968:	4694      	mov	ip, r2
 800596a:	4463      	add	r3, ip
 800596c:	21a8      	movs	r1, #168	; 0xa8
 800596e:	187a      	adds	r2, r7, r1
 8005970:	6013      	str	r3, [r2, #0]
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d114      	bne.n	80059a4 <USB_EPStartXfer+0xbb4>
 800597a:	187b      	adds	r3, r7, r1
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	b29b      	uxth	r3, r3
 8005982:	4ab3      	ldr	r2, [pc, #716]	; (8005c50 <USB_EPStartXfer+0xe60>)
 8005984:	4013      	ands	r3, r2
 8005986:	b29a      	uxth	r2, r3
 8005988:	187b      	adds	r3, r7, r1
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	801a      	strh	r2, [r3, #0]
 800598e:	187b      	adds	r3, r7, r1
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	b29b      	uxth	r3, r3
 8005996:	4aac      	ldr	r2, [pc, #688]	; (8005c48 <USB_EPStartXfer+0xe58>)
 8005998:	4313      	orrs	r3, r2
 800599a:	b29a      	uxth	r2, r3
 800599c:	187b      	adds	r3, r7, r1
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	801a      	strh	r2, [r3, #0]
 80059a2:	e060      	b.n	8005a66 <USB_EPStartXfer+0xc76>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b3e      	cmp	r3, #62	; 0x3e
 80059aa:	d81a      	bhi.n	80059e2 <USB_EPStartXfer+0xbf2>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	21e4      	movs	r1, #228	; 0xe4
 80059b4:	187a      	adds	r2, r7, r1
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2201      	movs	r2, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	d004      	beq.n	80059cc <USB_EPStartXfer+0xbdc>
 80059c2:	187b      	adds	r3, r7, r1
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3301      	adds	r3, #1
 80059c8:	187a      	adds	r2, r7, r1
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	23e4      	movs	r3, #228	; 0xe4
 80059ce:	18fb      	adds	r3, r7, r3
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	029b      	lsls	r3, r3, #10
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	23a8      	movs	r3, #168	; 0xa8
 80059da:	18fb      	adds	r3, r7, r3
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	801a      	strh	r2, [r3, #0]
 80059e0:	e041      	b.n	8005a66 <USB_EPStartXfer+0xc76>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	21e4      	movs	r1, #228	; 0xe4
 80059ea:	187a      	adds	r2, r7, r1
 80059ec:	6013      	str	r3, [r2, #0]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	221f      	movs	r2, #31
 80059f4:	4013      	ands	r3, r2
 80059f6:	d104      	bne.n	8005a02 <USB_EPStartXfer+0xc12>
 80059f8:	187b      	adds	r3, r7, r1
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3b01      	subs	r3, #1
 80059fe:	187a      	adds	r2, r7, r1
 8005a00:	6013      	str	r3, [r2, #0]
 8005a02:	23e4      	movs	r3, #228	; 0xe4
 8005a04:	18fb      	adds	r3, r7, r3
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	029b      	lsls	r3, r3, #10
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	4a8e      	ldr	r2, [pc, #568]	; (8005c48 <USB_EPStartXfer+0xe58>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	23a8      	movs	r3, #168	; 0xa8
 8005a16:	18fb      	adds	r3, r7, r3
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	801a      	strh	r2, [r3, #0]
 8005a1c:	e023      	b.n	8005a66 <USB_EPStartXfer+0xc76>
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	785b      	ldrb	r3, [r3, #1]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d11f      	bne.n	8005a66 <USB_EPStartXfer+0xc76>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	21b4      	movs	r1, #180	; 0xb4
 8005a2a:	187a      	adds	r2, r7, r1
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2250      	movs	r2, #80	; 0x50
 8005a32:	5a9b      	ldrh	r3, [r3, r2]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	001a      	movs	r2, r3
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	189b      	adds	r3, r3, r2
 8005a3e:	187a      	adds	r2, r7, r1
 8005a40:	6013      	str	r3, [r2, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	00da      	lsls	r2, r3, #3
 8005a48:	187b      	adds	r3, r7, r1
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	18d3      	adds	r3, r2, r3
 8005a4e:	4a7f      	ldr	r2, [pc, #508]	; (8005c4c <USB_EPStartXfer+0xe5c>)
 8005a50:	4694      	mov	ip, r2
 8005a52:	4463      	add	r3, ip
 8005a54:	21b0      	movs	r1, #176	; 0xb0
 8005a56:	187a      	adds	r2, r7, r1
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	b29a      	uxth	r2, r3
 8005a60:	187b      	adds	r3, r7, r1
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	22a4      	movs	r2, #164	; 0xa4
 8005a6a:	18ba      	adds	r2, r7, r2
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	785b      	ldrb	r3, [r3, #1]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d16f      	bne.n	8005b56 <USB_EPStartXfer+0xd66>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	219c      	movs	r1, #156	; 0x9c
 8005a7a:	187a      	adds	r2, r7, r1
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2250      	movs	r2, #80	; 0x50
 8005a82:	5a9b      	ldrh	r3, [r3, r2]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	001a      	movs	r2, r3
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	189b      	adds	r3, r3, r2
 8005a8e:	187a      	adds	r2, r7, r1
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	00da      	lsls	r2, r3, #3
 8005a98:	187b      	adds	r3, r7, r1
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	18d3      	adds	r3, r2, r3
 8005a9e:	4a6d      	ldr	r2, [pc, #436]	; (8005c54 <USB_EPStartXfer+0xe64>)
 8005aa0:	4694      	mov	ip, r2
 8005aa2:	4463      	add	r3, ip
 8005aa4:	2198      	movs	r1, #152	; 0x98
 8005aa6:	187a      	adds	r2, r7, r1
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d114      	bne.n	8005adc <USB_EPStartXfer+0xcec>
 8005ab2:	187b      	adds	r3, r7, r1
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	881b      	ldrh	r3, [r3, #0]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	4a65      	ldr	r2, [pc, #404]	; (8005c50 <USB_EPStartXfer+0xe60>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	b29a      	uxth	r2, r3
 8005ac0:	187b      	adds	r3, r7, r1
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	801a      	strh	r2, [r3, #0]
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	4a5e      	ldr	r2, [pc, #376]	; (8005c48 <USB_EPStartXfer+0xe58>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	801a      	strh	r2, [r3, #0]
 8005ada:	e05d      	b.n	8005b98 <USB_EPStartXfer+0xda8>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ae2:	d81a      	bhi.n	8005b1a <USB_EPStartXfer+0xd2a>
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	21e0      	movs	r1, #224	; 0xe0
 8005aec:	187a      	adds	r2, r7, r1
 8005aee:	6013      	str	r3, [r2, #0]
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2201      	movs	r2, #1
 8005af6:	4013      	ands	r3, r2
 8005af8:	d004      	beq.n	8005b04 <USB_EPStartXfer+0xd14>
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	187a      	adds	r2, r7, r1
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	23e0      	movs	r3, #224	; 0xe0
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	b29a      	uxth	r2, r3
 8005b10:	2398      	movs	r3, #152	; 0x98
 8005b12:	18fb      	adds	r3, r7, r3
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	801a      	strh	r2, [r3, #0]
 8005b18:	e03e      	b.n	8005b98 <USB_EPStartXfer+0xda8>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	095b      	lsrs	r3, r3, #5
 8005b20:	21e0      	movs	r1, #224	; 0xe0
 8005b22:	187a      	adds	r2, r7, r1
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	221f      	movs	r2, #31
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d104      	bne.n	8005b3a <USB_EPStartXfer+0xd4a>
 8005b30:	187b      	adds	r3, r7, r1
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3b01      	subs	r3, #1
 8005b36:	187a      	adds	r2, r7, r1
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	23e0      	movs	r3, #224	; 0xe0
 8005b3c:	18fb      	adds	r3, r7, r3
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	029b      	lsls	r3, r3, #10
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	4a40      	ldr	r2, [pc, #256]	; (8005c48 <USB_EPStartXfer+0xe58>)
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	2398      	movs	r3, #152	; 0x98
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	e020      	b.n	8005b98 <USB_EPStartXfer+0xda8>
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d11c      	bne.n	8005b98 <USB_EPStartXfer+0xda8>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2250      	movs	r2, #80	; 0x50
 8005b62:	5a9b      	ldrh	r3, [r3, r2]
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	001a      	movs	r2, r3
 8005b68:	21a4      	movs	r1, #164	; 0xa4
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	189b      	adds	r3, r3, r2
 8005b70:	187a      	adds	r2, r7, r1
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	00da      	lsls	r2, r3, #3
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	18d3      	adds	r3, r2, r3
 8005b80:	4a34      	ldr	r2, [pc, #208]	; (8005c54 <USB_EPStartXfer+0xe64>)
 8005b82:	4694      	mov	ip, r2
 8005b84:	4463      	add	r3, ip
 8005b86:	21a0      	movs	r1, #160	; 0xa0
 8005b88:	187a      	adds	r2, r7, r1
 8005b8a:	6013      	str	r3, [r2, #0]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d100      	bne.n	8005ba2 <USB_EPStartXfer+0xdb2>
 8005ba0:	e1aa      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	18d2      	adds	r2, r2, r3
 8005bac:	2196      	movs	r1, #150	; 0x96
 8005bae:	187b      	adds	r3, r7, r1
 8005bb0:	8812      	ldrh	r2, [r2, #0]
 8005bb2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	881a      	ldrh	r2, [r3, #0]
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	01db      	lsls	r3, r3, #7
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	d004      	beq.n	8005bca <USB_EPStartXfer+0xdda>
 8005bc0:	187b      	adds	r3, r7, r1
 8005bc2:	881b      	ldrh	r3, [r3, #0]
 8005bc4:	2240      	movs	r2, #64	; 0x40
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	d10d      	bne.n	8005be6 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bca:	2196      	movs	r1, #150	; 0x96
 8005bcc:	187b      	adds	r3, r7, r1
 8005bce:	881a      	ldrh	r2, [r3, #0]
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	01db      	lsls	r3, r3, #7
 8005bd4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bd6:	d000      	beq.n	8005bda <USB_EPStartXfer+0xdea>
 8005bd8:	e18e      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bda:	187b      	adds	r3, r7, r1
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2240      	movs	r2, #64	; 0x40
 8005be0:	4013      	ands	r3, r2
 8005be2:	d000      	beq.n	8005be6 <USB_EPStartXfer+0xdf6>
 8005be4:	e188      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	18d3      	adds	r3, r2, r3
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	2094      	movs	r0, #148	; 0x94
 8005bf6:	183b      	adds	r3, r7, r0
 8005bf8:	4917      	ldr	r1, [pc, #92]	; (8005c58 <USB_EPStartXfer+0xe68>)
 8005bfa:	400a      	ands	r2, r1
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	18d3      	adds	r3, r2, r3
 8005c08:	183a      	adds	r2, r7, r0
 8005c0a:	8812      	ldrh	r2, [r2, #0]
 8005c0c:	4913      	ldr	r1, [pc, #76]	; (8005c5c <USB_EPStartXfer+0xe6c>)
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	b292      	uxth	r2, r2
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	e170      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	78db      	ldrb	r3, [r3, #3]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d000      	beq.n	8005c20 <USB_EPStartXfer+0xe30>
 8005c1e:	e169      	b.n	8005ef4 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	699a      	ldr	r2, [r3, #24]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	691b      	ldr	r3, [r3, #16]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d919      	bls.n	8005c60 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	1d7a      	adds	r2, r7, #5
 8005c32:	32ff      	adds	r2, #255	; 0xff
 8005c34:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	1d7b      	adds	r3, r7, #5
 8005c3c:	33ff      	adds	r3, #255	; 0xff
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	1ad2      	subs	r2, r2, r3
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	619a      	str	r2, [r3, #24]
 8005c46:	e013      	b.n	8005c70 <USB_EPStartXfer+0xe80>
 8005c48:	ffff8000 	.word	0xffff8000
 8005c4c:	00000402 	.word	0x00000402
 8005c50:	ffff83ff 	.word	0xffff83ff
 8005c54:	00000406 	.word	0x00000406
 8005c58:	ffff8f8f 	.word	0xffff8f8f
 8005c5c:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	1d7a      	adds	r2, r7, #5
 8005c66:	32ff      	adds	r2, #255	; 0xff
 8005c68:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	785b      	ldrb	r3, [r3, #1]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d000      	beq.n	8005c7a <USB_EPStartXfer+0xe8a>
 8005c78:	e075      	b.n	8005d66 <USB_EPStartXfer+0xf76>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	21cc      	movs	r1, #204	; 0xcc
 8005c7e:	187a      	adds	r2, r7, r1
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2250      	movs	r2, #80	; 0x50
 8005c86:	5a9b      	ldrh	r3, [r3, r2]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	001a      	movs	r2, r3
 8005c8c:	187b      	adds	r3, r7, r1
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	189b      	adds	r3, r3, r2
 8005c92:	187a      	adds	r2, r7, r1
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	00da      	lsls	r2, r3, #3
 8005c9c:	187b      	adds	r3, r7, r1
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	18d3      	adds	r3, r2, r3
 8005ca2:	4aaa      	ldr	r2, [pc, #680]	; (8005f4c <USB_EPStartXfer+0x115c>)
 8005ca4:	4694      	mov	ip, r2
 8005ca6:	4463      	add	r3, ip
 8005ca8:	21c8      	movs	r1, #200	; 0xc8
 8005caa:	187a      	adds	r2, r7, r1
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	1d7b      	adds	r3, r7, #5
 8005cb0:	33ff      	adds	r3, #255	; 0xff
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d114      	bne.n	8005ce2 <USB_EPStartXfer+0xef2>
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	4aa3      	ldr	r2, [pc, #652]	; (8005f50 <USB_EPStartXfer+0x1160>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	187b      	adds	r3, r7, r1
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	187b      	adds	r3, r7, r1
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	4a9f      	ldr	r2, [pc, #636]	; (8005f54 <USB_EPStartXfer+0x1164>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	e066      	b.n	8005db0 <USB_EPStartXfer+0xfc0>
 8005ce2:	1d7b      	adds	r3, r7, #5
 8005ce4:	33ff      	adds	r3, #255	; 0xff
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b3e      	cmp	r3, #62	; 0x3e
 8005cea:	d81c      	bhi.n	8005d26 <USB_EPStartXfer+0xf36>
 8005cec:	1d7b      	adds	r3, r7, #5
 8005cee:	33ff      	adds	r3, #255	; 0xff
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	21dc      	movs	r1, #220	; 0xdc
 8005cf6:	187a      	adds	r2, r7, r1
 8005cf8:	6013      	str	r3, [r2, #0]
 8005cfa:	1d7b      	adds	r3, r7, #5
 8005cfc:	33ff      	adds	r3, #255	; 0xff
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2201      	movs	r2, #1
 8005d02:	4013      	ands	r3, r2
 8005d04:	d004      	beq.n	8005d10 <USB_EPStartXfer+0xf20>
 8005d06:	187b      	adds	r3, r7, r1
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	187a      	adds	r2, r7, r1
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	23dc      	movs	r3, #220	; 0xdc
 8005d12:	18fb      	adds	r3, r7, r3
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	029b      	lsls	r3, r3, #10
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	23c8      	movs	r3, #200	; 0xc8
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	e044      	b.n	8005db0 <USB_EPStartXfer+0xfc0>
 8005d26:	1d7b      	adds	r3, r7, #5
 8005d28:	33ff      	adds	r3, #255	; 0xff
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	21dc      	movs	r1, #220	; 0xdc
 8005d30:	187a      	adds	r2, r7, r1
 8005d32:	6013      	str	r3, [r2, #0]
 8005d34:	1d7b      	adds	r3, r7, #5
 8005d36:	33ff      	adds	r3, #255	; 0xff
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	221f      	movs	r2, #31
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d104      	bne.n	8005d4a <USB_EPStartXfer+0xf5a>
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	187a      	adds	r2, r7, r1
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	23dc      	movs	r3, #220	; 0xdc
 8005d4c:	18fb      	adds	r3, r7, r3
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	029b      	lsls	r3, r3, #10
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	4a7f      	ldr	r2, [pc, #508]	; (8005f54 <USB_EPStartXfer+0x1164>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	23c8      	movs	r3, #200	; 0xc8
 8005d5e:	18fb      	adds	r3, r7, r3
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	e024      	b.n	8005db0 <USB_EPStartXfer+0xfc0>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	785b      	ldrb	r3, [r3, #1]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d120      	bne.n	8005db0 <USB_EPStartXfer+0xfc0>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	21d4      	movs	r1, #212	; 0xd4
 8005d72:	187a      	adds	r2, r7, r1
 8005d74:	6013      	str	r3, [r2, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2250      	movs	r2, #80	; 0x50
 8005d7a:	5a9b      	ldrh	r3, [r3, r2]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	001a      	movs	r2, r3
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	189b      	adds	r3, r3, r2
 8005d86:	187a      	adds	r2, r7, r1
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	00da      	lsls	r2, r3, #3
 8005d90:	187b      	adds	r3, r7, r1
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	18d3      	adds	r3, r2, r3
 8005d96:	4a6d      	ldr	r2, [pc, #436]	; (8005f4c <USB_EPStartXfer+0x115c>)
 8005d98:	4694      	mov	ip, r2
 8005d9a:	4463      	add	r3, ip
 8005d9c:	21d0      	movs	r1, #208	; 0xd0
 8005d9e:	187a      	adds	r2, r7, r1
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	1d7b      	adds	r3, r7, #5
 8005da4:	33ff      	adds	r3, #255	; 0xff
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	22c4      	movs	r2, #196	; 0xc4
 8005db4:	18ba      	adds	r2, r7, r2
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	785b      	ldrb	r3, [r3, #1]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d000      	beq.n	8005dc2 <USB_EPStartXfer+0xfd2>
 8005dc0:	e075      	b.n	8005eae <USB_EPStartXfer+0x10be>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	21bc      	movs	r1, #188	; 0xbc
 8005dc6:	187a      	adds	r2, r7, r1
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2250      	movs	r2, #80	; 0x50
 8005dce:	5a9b      	ldrh	r3, [r3, r2]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	001a      	movs	r2, r3
 8005dd4:	187b      	adds	r3, r7, r1
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	189b      	adds	r3, r3, r2
 8005dda:	187a      	adds	r2, r7, r1
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	00da      	lsls	r2, r3, #3
 8005de4:	187b      	adds	r3, r7, r1
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	18d3      	adds	r3, r2, r3
 8005dea:	4a5b      	ldr	r2, [pc, #364]	; (8005f58 <USB_EPStartXfer+0x1168>)
 8005dec:	4694      	mov	ip, r2
 8005dee:	4463      	add	r3, ip
 8005df0:	21b8      	movs	r1, #184	; 0xb8
 8005df2:	187a      	adds	r2, r7, r1
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	1d7b      	adds	r3, r7, #5
 8005df8:	33ff      	adds	r3, #255	; 0xff
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d114      	bne.n	8005e2a <USB_EPStartXfer+0x103a>
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	4a51      	ldr	r2, [pc, #324]	; (8005f50 <USB_EPStartXfer+0x1160>)
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	187b      	adds	r3, r7, r1
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	4a4d      	ldr	r2, [pc, #308]	; (8005f54 <USB_EPStartXfer+0x1164>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	187b      	adds	r3, r7, r1
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e066      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
 8005e2a:	1d7b      	adds	r3, r7, #5
 8005e2c:	33ff      	adds	r3, #255	; 0xff
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b3e      	cmp	r3, #62	; 0x3e
 8005e32:	d81c      	bhi.n	8005e6e <USB_EPStartXfer+0x107e>
 8005e34:	1d7b      	adds	r3, r7, #5
 8005e36:	33ff      	adds	r3, #255	; 0xff
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	21d8      	movs	r1, #216	; 0xd8
 8005e3e:	187a      	adds	r2, r7, r1
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	1d7b      	adds	r3, r7, #5
 8005e44:	33ff      	adds	r3, #255	; 0xff
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <USB_EPStartXfer+0x1068>
 8005e4e:	187b      	adds	r3, r7, r1
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3301      	adds	r3, #1
 8005e54:	187a      	adds	r2, r7, r1
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	23d8      	movs	r3, #216	; 0xd8
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	029b      	lsls	r3, r3, #10
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	23b8      	movs	r3, #184	; 0xb8
 8005e66:	18fb      	adds	r3, r7, r3
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	e044      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
 8005e6e:	1d7b      	adds	r3, r7, #5
 8005e70:	33ff      	adds	r3, #255	; 0xff
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	21d8      	movs	r1, #216	; 0xd8
 8005e78:	187a      	adds	r2, r7, r1
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	1d7b      	adds	r3, r7, #5
 8005e7e:	33ff      	adds	r3, #255	; 0xff
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	221f      	movs	r2, #31
 8005e84:	4013      	ands	r3, r2
 8005e86:	d104      	bne.n	8005e92 <USB_EPStartXfer+0x10a2>
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	187a      	adds	r2, r7, r1
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	23d8      	movs	r3, #216	; 0xd8
 8005e94:	18fb      	adds	r3, r7, r3
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	029b      	lsls	r3, r3, #10
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <USB_EPStartXfer+0x1164>)
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	23b8      	movs	r3, #184	; 0xb8
 8005ea6:	18fb      	adds	r3, r7, r3
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	e024      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	785b      	ldrb	r3, [r3, #1]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d120      	bne.n	8005ef8 <USB_EPStartXfer+0x1108>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2250      	movs	r2, #80	; 0x50
 8005eba:	5a9b      	ldrh	r3, [r3, r2]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	001a      	movs	r2, r3
 8005ec0:	21c4      	movs	r1, #196	; 0xc4
 8005ec2:	187b      	adds	r3, r7, r1
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	187a      	adds	r2, r7, r1
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	00da      	lsls	r2, r3, #3
 8005ed2:	187b      	adds	r3, r7, r1
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	18d3      	adds	r3, r2, r3
 8005ed8:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <USB_EPStartXfer+0x1168>)
 8005eda:	4694      	mov	ip, r2
 8005edc:	4463      	add	r3, ip
 8005ede:	21c0      	movs	r1, #192	; 0xc0
 8005ee0:	187a      	adds	r2, r7, r1
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	1d7b      	adds	r3, r7, #5
 8005ee6:	33ff      	adds	r3, #255	; 0xff
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	187b      	adds	r3, r7, r1
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	801a      	strh	r2, [r3, #0]
 8005ef2:	e001      	b.n	8005ef8 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e025      	b.n	8005f44 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	18d3      	adds	r3, r2, r3
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	208a      	movs	r0, #138	; 0x8a
 8005f08:	183b      	adds	r3, r7, r0
 8005f0a:	4914      	ldr	r1, [pc, #80]	; (8005f5c <USB_EPStartXfer+0x116c>)
 8005f0c:	400a      	ands	r2, r1
 8005f0e:	801a      	strh	r2, [r3, #0]
 8005f10:	183b      	adds	r3, r7, r0
 8005f12:	183a      	adds	r2, r7, r0
 8005f14:	8812      	ldrh	r2, [r2, #0]
 8005f16:	2180      	movs	r1, #128	; 0x80
 8005f18:	0149      	lsls	r1, r1, #5
 8005f1a:	404a      	eors	r2, r1
 8005f1c:	801a      	strh	r2, [r3, #0]
 8005f1e:	183b      	adds	r3, r7, r0
 8005f20:	183a      	adds	r2, r7, r0
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	2180      	movs	r1, #128	; 0x80
 8005f26:	0189      	lsls	r1, r1, #6
 8005f28:	404a      	eors	r2, r1
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	18d3      	adds	r3, r2, r3
 8005f36:	183a      	adds	r2, r7, r0
 8005f38:	8812      	ldrh	r2, [r2, #0]
 8005f3a:	4909      	ldr	r1, [pc, #36]	; (8005f60 <USB_EPStartXfer+0x1170>)
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	b292      	uxth	r2, r2
 8005f40:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	0018      	movs	r0, r3
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b043      	add	sp, #268	; 0x10c
 8005f4a:	bd90      	pop	{r4, r7, pc}
 8005f4c:	00000402 	.word	0x00000402
 8005f50:	ffff83ff 	.word	0xffff83ff
 8005f54:	ffff8000 	.word	0xffff8000
 8005f58:	00000406 	.word	0x00000406
 8005f5c:	ffffbf8f 	.word	0xffffbf8f
 8005f60:	ffff8080 	.word	0xffff8080

08005f64 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01d      	beq.n	8005fb2 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	18d3      	adds	r3, r2, r3
 8005f80:	881b      	ldrh	r3, [r3, #0]
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	200c      	movs	r0, #12
 8005f86:	183b      	adds	r3, r7, r0
 8005f88:	491b      	ldr	r1, [pc, #108]	; (8005ff8 <USB_EPSetStall+0x94>)
 8005f8a:	400a      	ands	r2, r1
 8005f8c:	801a      	strh	r2, [r3, #0]
 8005f8e:	183b      	adds	r3, r7, r0
 8005f90:	183a      	adds	r2, r7, r0
 8005f92:	8812      	ldrh	r2, [r2, #0]
 8005f94:	2110      	movs	r1, #16
 8005f96:	404a      	eors	r2, r1
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	18d3      	adds	r3, r2, r3
 8005fa4:	183a      	adds	r2, r7, r0
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	4914      	ldr	r1, [pc, #80]	; (8005ffc <USB_EPSetStall+0x98>)
 8005faa:	430a      	orrs	r2, r1
 8005fac:	b292      	uxth	r2, r2
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e01d      	b.n	8005fee <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	18d3      	adds	r3, r2, r3
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	200e      	movs	r0, #14
 8005fc2:	183b      	adds	r3, r7, r0
 8005fc4:	490e      	ldr	r1, [pc, #56]	; (8006000 <USB_EPSetStall+0x9c>)
 8005fc6:	400a      	ands	r2, r1
 8005fc8:	801a      	strh	r2, [r3, #0]
 8005fca:	183b      	adds	r3, r7, r0
 8005fcc:	183a      	adds	r2, r7, r0
 8005fce:	8812      	ldrh	r2, [r2, #0]
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	0149      	lsls	r1, r1, #5
 8005fd4:	404a      	eors	r2, r1
 8005fd6:	801a      	strh	r2, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	18d3      	adds	r3, r2, r3
 8005fe2:	183a      	adds	r2, r7, r0
 8005fe4:	8812      	ldrh	r2, [r2, #0]
 8005fe6:	4905      	ldr	r1, [pc, #20]	; (8005ffc <USB_EPSetStall+0x98>)
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	b292      	uxth	r2, r2
 8005fec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005fee:	2300      	movs	r3, #0
}
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	b004      	add	sp, #16
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	ffff8fbf 	.word	0xffff8fbf
 8005ffc:	ffff8080 	.word	0xffff8080
 8006000:	ffffbf8f 	.word	0xffffbf8f

08006004 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	7b1b      	ldrb	r3, [r3, #12]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d000      	beq.n	8006018 <USB_EPClearStall+0x14>
 8006016:	e095      	b.n	8006144 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d046      	beq.n	80060ae <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	18d2      	adds	r2, r2, r3
 800602a:	2110      	movs	r1, #16
 800602c:	187b      	adds	r3, r7, r1
 800602e:	8812      	ldrh	r2, [r2, #0]
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	187b      	adds	r3, r7, r1
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	2240      	movs	r2, #64	; 0x40
 8006038:	4013      	ands	r3, r2
 800603a:	d016      	beq.n	800606a <USB_EPClearStall+0x66>
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	18d3      	adds	r3, r2, r3
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	b29a      	uxth	r2, r3
 800604a:	200e      	movs	r0, #14
 800604c:	183b      	adds	r3, r7, r0
 800604e:	4940      	ldr	r1, [pc, #256]	; (8006150 <USB_EPClearStall+0x14c>)
 8006050:	400a      	ands	r2, r1
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	18d3      	adds	r3, r2, r3
 800605e:	183a      	adds	r2, r7, r0
 8006060:	8812      	ldrh	r2, [r2, #0]
 8006062:	493c      	ldr	r1, [pc, #240]	; (8006154 <USB_EPClearStall+0x150>)
 8006064:	430a      	orrs	r2, r1
 8006066:	b292      	uxth	r2, r2
 8006068:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	78db      	ldrb	r3, [r3, #3]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d068      	beq.n	8006144 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	18d3      	adds	r3, r2, r3
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29a      	uxth	r2, r3
 8006080:	200c      	movs	r0, #12
 8006082:	183b      	adds	r3, r7, r0
 8006084:	4934      	ldr	r1, [pc, #208]	; (8006158 <USB_EPClearStall+0x154>)
 8006086:	400a      	ands	r2, r1
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	183b      	adds	r3, r7, r0
 800608c:	183a      	adds	r2, r7, r0
 800608e:	8812      	ldrh	r2, [r2, #0]
 8006090:	2120      	movs	r1, #32
 8006092:	404a      	eors	r2, r1
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	183a      	adds	r2, r7, r0
 80060a2:	8812      	ldrh	r2, [r2, #0]
 80060a4:	492d      	ldr	r1, [pc, #180]	; (800615c <USB_EPClearStall+0x158>)
 80060a6:	430a      	orrs	r2, r1
 80060a8:	b292      	uxth	r2, r2
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	e04a      	b.n	8006144 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	18d2      	adds	r2, r2, r3
 80060b8:	2116      	movs	r1, #22
 80060ba:	187b      	adds	r3, r7, r1
 80060bc:	8812      	ldrh	r2, [r2, #0]
 80060be:	801a      	strh	r2, [r3, #0]
 80060c0:	187b      	adds	r3, r7, r1
 80060c2:	881a      	ldrh	r2, [r3, #0]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	01db      	lsls	r3, r3, #7
 80060c8:	4013      	ands	r3, r2
 80060ca:	d016      	beq.n	80060fa <USB_EPClearStall+0xf6>
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	18d3      	adds	r3, r2, r3
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	b29a      	uxth	r2, r3
 80060da:	2014      	movs	r0, #20
 80060dc:	183b      	adds	r3, r7, r0
 80060de:	491c      	ldr	r1, [pc, #112]	; (8006150 <USB_EPClearStall+0x14c>)
 80060e0:	400a      	ands	r2, r1
 80060e2:	801a      	strh	r2, [r3, #0]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	18d3      	adds	r3, r2, r3
 80060ee:	183a      	adds	r2, r7, r0
 80060f0:	8812      	ldrh	r2, [r2, #0]
 80060f2:	491b      	ldr	r1, [pc, #108]	; (8006160 <USB_EPClearStall+0x15c>)
 80060f4:	430a      	orrs	r2, r1
 80060f6:	b292      	uxth	r2, r2
 80060f8:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	18d3      	adds	r3, r2, r3
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	b29a      	uxth	r2, r3
 8006108:	2012      	movs	r0, #18
 800610a:	183b      	adds	r3, r7, r0
 800610c:	4915      	ldr	r1, [pc, #84]	; (8006164 <USB_EPClearStall+0x160>)
 800610e:	400a      	ands	r2, r1
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	183b      	adds	r3, r7, r0
 8006114:	183a      	adds	r2, r7, r0
 8006116:	8812      	ldrh	r2, [r2, #0]
 8006118:	2180      	movs	r1, #128	; 0x80
 800611a:	0149      	lsls	r1, r1, #5
 800611c:	404a      	eors	r2, r1
 800611e:	801a      	strh	r2, [r3, #0]
 8006120:	183b      	adds	r3, r7, r0
 8006122:	183a      	adds	r2, r7, r0
 8006124:	8812      	ldrh	r2, [r2, #0]
 8006126:	2180      	movs	r1, #128	; 0x80
 8006128:	0189      	lsls	r1, r1, #6
 800612a:	404a      	eors	r2, r1
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	18d3      	adds	r3, r2, r3
 8006138:	183a      	adds	r2, r7, r0
 800613a:	8812      	ldrh	r2, [r2, #0]
 800613c:	4907      	ldr	r1, [pc, #28]	; (800615c <USB_EPClearStall+0x158>)
 800613e:	430a      	orrs	r2, r1
 8006140:	b292      	uxth	r2, r2
 8006142:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	0018      	movs	r0, r3
 8006148:	46bd      	mov	sp, r7
 800614a:	b006      	add	sp, #24
 800614c:	bd80      	pop	{r7, pc}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	ffff8f8f 	.word	0xffff8f8f
 8006154:	ffff80c0 	.word	0xffff80c0
 8006158:	ffff8fbf 	.word	0xffff8fbf
 800615c:	ffff8080 	.word	0xffff8080
 8006160:	ffffc080 	.word	0xffffc080
 8006164:	ffffbf8f 	.word	0xffffbf8f

08006168 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	000a      	movs	r2, r1
 8006172:	1cfb      	adds	r3, r7, #3
 8006174:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006176:	1cfb      	adds	r3, r7, #3
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d103      	bne.n	8006186 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	224c      	movs	r2, #76	; 0x4c
 8006182:	2180      	movs	r1, #128	; 0x80
 8006184:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	0018      	movs	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	b002      	add	sp, #8
 800618e:	bd80      	pop	{r7, pc}

08006190 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2258      	movs	r2, #88	; 0x58
 800619c:	5a9b      	ldrh	r3, [r3, r2]
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4a05      	ldr	r2, [pc, #20]	; (80061b8 <USB_DevConnect+0x28>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	b299      	uxth	r1, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2258      	movs	r2, #88	; 0x58
 80061aa:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b002      	add	sp, #8
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	ffff8000 	.word	0xffff8000

080061bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2244      	movs	r2, #68	; 0x44
 80061c8:	5a9b      	ldrh	r3, [r3, r2]
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80061ce:	68fb      	ldr	r3, [r7, #12]
}
 80061d0:	0018      	movs	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	b004      	add	sp, #16
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b08c      	sub	sp, #48	; 0x30
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	0019      	movs	r1, r3
 80061e4:	1dbb      	adds	r3, r7, #6
 80061e6:	801a      	strh	r2, [r3, #0]
 80061e8:	1d3b      	adds	r3, r7, #4
 80061ea:	1c0a      	adds	r2, r1, #0
 80061ec:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80061ee:	1d3b      	adds	r3, r7, #4
 80061f0:	881b      	ldrh	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006200:	1dbb      	adds	r3, r7, #6
 8006202:	881a      	ldrh	r2, [r3, #0]
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	18d3      	adds	r3, r2, r3
 8006208:	2280      	movs	r2, #128	; 0x80
 800620a:	00d2      	lsls	r2, r2, #3
 800620c:	4694      	mov	ip, r2
 800620e:	4463      	add	r3, ip
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006216:	e01b      	b.n	8006250 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	3301      	adds	r3, #1
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b29b      	uxth	r3, r3
 800622a:	021b      	lsls	r3, r3, #8
 800622c:	b29b      	uxth	r3, r3
 800622e:	001a      	movs	r2, r3
 8006230:	69bb      	ldr	r3, [r7, #24]
 8006232:	4313      	orrs	r3, r2
 8006234:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	b29a      	uxth	r2, r3
 800623a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800623e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006240:	3302      	adds	r3, #2
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	3301      	adds	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800624a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624c:	3b01      	subs	r3, #1
 800624e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1e0      	bne.n	8006218 <USB_WritePMA+0x40>
  }
}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	46c0      	nop			; (mov r8, r8)
 800625a:	46bd      	mov	sp, r7
 800625c:	b00c      	add	sp, #48	; 0x30
 800625e:	bd80      	pop	{r7, pc}

08006260 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	; 0x28
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	0019      	movs	r1, r3
 800626c:	1dbb      	adds	r3, r7, #6
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	1d3b      	adds	r3, r7, #4
 8006272:	1c0a      	adds	r2, r1, #0
 8006274:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006276:	1d3b      	adds	r3, r7, #4
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	085b      	lsrs	r3, r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006288:	1dbb      	adds	r3, r7, #6
 800628a:	881a      	ldrh	r2, [r3, #0]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	18d3      	adds	r3, r2, r3
 8006290:	2280      	movs	r2, #128	; 0x80
 8006292:	00d2      	lsls	r2, r2, #3
 8006294:	4694      	mov	ip, r2
 8006296:	4463      	add	r3, ip
 8006298:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
 800629e:	e018      	b.n	80062d2 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	3302      	adds	r3, #2
 80062ac:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	3301      	adds	r3, #1
 80062ba:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	3301      	adds	r3, #1
 80062ca:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	3b01      	subs	r3, #1
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e3      	bne.n	80062a0 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80062d8:	1d3b      	adds	r3, r7, #4
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	2201      	movs	r2, #1
 80062de:	4013      	ands	r3, r2
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	b2da      	uxtb	r2, r3
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	701a      	strb	r2, [r3, #0]
  }
}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	46bd      	mov	sp, r7
 80062fa:	b00a      	add	sp, #40	; 0x28
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	1dfb      	adds	r3, r7, #7
 800630a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d101      	bne.n	8006316 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006312:	2302      	movs	r3, #2
 8006314:	e020      	b.n	8006358 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	23ad      	movs	r3, #173	; 0xad
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	58d3      	ldr	r3, [r2, r3]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d004      	beq.n	800632c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	23ad      	movs	r3, #173	; 0xad
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	2100      	movs	r1, #0
 800632a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d004      	beq.n	800633c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	23ac      	movs	r3, #172	; 0xac
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	68b9      	ldr	r1, [r7, #8]
 800633a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	23a7      	movs	r3, #167	; 0xa7
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	2101      	movs	r1, #1
 8006344:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	1dfa      	adds	r2, r7, #7
 800634a:	7812      	ldrb	r2, [r2, #0]
 800634c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	0018      	movs	r0, r3
 8006352:	f001 feb1 	bl	80080b8 <USBD_LL_Init>

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	0018      	movs	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	b004      	add	sp, #16
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800636a:	200f      	movs	r0, #15
 800636c:	183b      	adds	r3, r7, r0
 800636e:	2200      	movs	r2, #0
 8006370:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d008      	beq.n	800638a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	23ad      	movs	r3, #173	; 0xad
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006382:	183b      	adds	r3, r7, r0
 8006384:	2200      	movs	r2, #0
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e003      	b.n	8006392 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800638a:	230f      	movs	r3, #15
 800638c:	18fb      	adds	r3, r7, r3
 800638e:	2202      	movs	r2, #2
 8006390:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8006392:	230f      	movs	r3, #15
 8006394:	18fb      	adds	r3, r7, r3
 8006396:	781b      	ldrb	r3, [r3, #0]
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}

080063a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	0018      	movs	r0, r3
 80063ac:	f001 fedc 	bl	8008168 <USBD_LL_Start>

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b002      	add	sp, #8
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	0018      	movs	r0, r3
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b002      	add	sp, #8
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	000a      	movs	r2, r1
 80063d6:	1cfb      	adds	r3, r7, #3
 80063d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80063da:	240f      	movs	r4, #15
 80063dc:	193b      	adds	r3, r7, r4
 80063de:	2202      	movs	r2, #2
 80063e0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	23ad      	movs	r3, #173	; 0xad
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	58d3      	ldr	r3, [r2, r3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00e      	beq.n	800640c <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	23ad      	movs	r3, #173	; 0xad
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	58d3      	ldr	r3, [r2, r3]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	1cfa      	adds	r2, r7, #3
 80063fa:	7811      	ldrb	r1, [r2, #0]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	0010      	movs	r0, r2
 8006400:	4798      	blx	r3
 8006402:	1e03      	subs	r3, r0, #0
 8006404:	d102      	bne.n	800640c <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006406:	193b      	adds	r3, r7, r4
 8006408:	2200      	movs	r2, #0
 800640a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800640c:	230f      	movs	r3, #15
 800640e:	18fb      	adds	r3, r7, r3
 8006410:	781b      	ldrb	r3, [r3, #0]
}
 8006412:	0018      	movs	r0, r3
 8006414:	46bd      	mov	sp, r7
 8006416:	b005      	add	sp, #20
 8006418:	bd90      	pop	{r4, r7, pc}

0800641a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b082      	sub	sp, #8
 800641e:	af00      	add	r7, sp, #0
 8006420:	6078      	str	r0, [r7, #4]
 8006422:	000a      	movs	r2, r1
 8006424:	1cfb      	adds	r3, r7, #3
 8006426:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	23ad      	movs	r3, #173	; 0xad
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	58d3      	ldr	r3, [r2, r3]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	1cfa      	adds	r2, r7, #3
 8006434:	7811      	ldrb	r1, [r2, #0]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	0010      	movs	r0, r2
 800643a:	4798      	blx	r3

  return USBD_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	0018      	movs	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	b002      	add	sp, #8
 8006444:	bd80      	pop	{r7, pc}
	...

08006448 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	22aa      	movs	r2, #170	; 0xaa
 8006456:	0092      	lsls	r2, r2, #2
 8006458:	4694      	mov	ip, r2
 800645a:	4463      	add	r3, ip
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	0011      	movs	r1, r2
 8006460:	0018      	movs	r0, r3
 8006462:	f001 f810 	bl	8007486 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	23a5      	movs	r3, #165	; 0xa5
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	2101      	movs	r1, #1
 800646e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a23      	ldr	r2, [pc, #140]	; (8006500 <USBD_LL_SetupStage+0xb8>)
 8006474:	5a9b      	ldrh	r3, [r3, r2]
 8006476:	0019      	movs	r1, r3
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	23a6      	movs	r3, #166	; 0xa6
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	23aa      	movs	r3, #170	; 0xaa
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	001a      	movs	r2, r3
 800648a:	231f      	movs	r3, #31
 800648c:	4013      	ands	r3, r2
 800648e:	2b02      	cmp	r3, #2
 8006490:	d019      	beq.n	80064c6 <USBD_LL_SetupStage+0x7e>
 8006492:	d822      	bhi.n	80064da <USBD_LL_SetupStage+0x92>
 8006494:	2b00      	cmp	r3, #0
 8006496:	d002      	beq.n	800649e <USBD_LL_SetupStage+0x56>
 8006498:	2b01      	cmp	r3, #1
 800649a:	d00a      	beq.n	80064b2 <USBD_LL_SetupStage+0x6a>
 800649c:	e01d      	b.n	80064da <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	22aa      	movs	r2, #170	; 0xaa
 80064a2:	0092      	lsls	r2, r2, #2
 80064a4:	189a      	adds	r2, r3, r2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0011      	movs	r1, r2
 80064aa:	0018      	movs	r0, r3
 80064ac:	f000 fa10 	bl	80068d0 <USBD_StdDevReq>
      break;
 80064b0:	e020      	b.n	80064f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	22aa      	movs	r2, #170	; 0xaa
 80064b6:	0092      	lsls	r2, r2, #2
 80064b8:	189a      	adds	r2, r3, r2
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	0011      	movs	r1, r2
 80064be:	0018      	movs	r0, r3
 80064c0:	f000 fa78 	bl	80069b4 <USBD_StdItfReq>
      break;
 80064c4:	e016      	b.n	80064f4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	22aa      	movs	r2, #170	; 0xaa
 80064ca:	0092      	lsls	r2, r2, #2
 80064cc:	189a      	adds	r2, r3, r2
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	0011      	movs	r1, r2
 80064d2:	0018      	movs	r0, r3
 80064d4:	f000 fac5 	bl	8006a62 <USBD_StdEPReq>
      break;
 80064d8:	e00c      	b.n	80064f4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	23aa      	movs	r3, #170	; 0xaa
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	5cd3      	ldrb	r3, [r2, r3]
 80064e2:	227f      	movs	r2, #127	; 0x7f
 80064e4:	4393      	bics	r3, r2
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	0011      	movs	r1, r2
 80064ec:	0018      	movs	r0, r3
 80064ee:	f001 fec2 	bl	8008276 <USBD_LL_StallEP>
      break;
 80064f2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	0018      	movs	r0, r3
 80064f8:	46bd      	mov	sp, r7
 80064fa:	b002      	add	sp, #8
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	46c0      	nop			; (mov r8, r8)
 8006500:	000002ae 	.word	0x000002ae

08006504 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	607a      	str	r2, [r7, #4]
 800650e:	200b      	movs	r0, #11
 8006510:	183b      	adds	r3, r7, r0
 8006512:	1c0a      	adds	r2, r1, #0
 8006514:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006516:	183b      	adds	r3, r7, r0
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d154      	bne.n	80065c8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3355      	adds	r3, #85	; 0x55
 8006522:	33ff      	adds	r3, #255	; 0xff
 8006524:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	23a5      	movs	r3, #165	; 0xa5
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	58d3      	ldr	r3, [r2, r3]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d139      	bne.n	80065a6 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	429a      	cmp	r2, r3
 800653c:	d919      	bls.n	8006572 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	68da      	ldr	r2, [r3, #12]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006554:	429a      	cmp	r2, r3
 8006556:	d203      	bcs.n	8006560 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800655c:	b29b      	uxth	r3, r3
 800655e:	e002      	b.n	8006566 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006564:	b29b      	uxth	r3, r3
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	001a      	movs	r2, r3
 800656c:	f001 fafc 	bl	8007b68 <USBD_CtlContinueRx>
 8006570:	e045      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	23ad      	movs	r3, #173	; 0xad
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	58d3      	ldr	r3, [r2, r3]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00d      	beq.n	800659c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	23a7      	movs	r3, #167	; 0xa7
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006588:	2b03      	cmp	r3, #3
 800658a:	d107      	bne.n	800659c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	23ad      	movs	r3, #173	; 0xad
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	58d3      	ldr	r3, [r2, r3]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	0010      	movs	r0, r2
 800659a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	0018      	movs	r0, r3
 80065a0:	f001 faf5 	bl	8007b8e <USBD_CtlSendStatus>
 80065a4:	e02b      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	23a5      	movs	r3, #165	; 0xa5
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	58d3      	ldr	r3, [r2, r3]
 80065ae:	2b05      	cmp	r3, #5
 80065b0:	d125      	bne.n	80065fe <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	23a5      	movs	r3, #165	; 0xa5
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	2100      	movs	r1, #0
 80065ba:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2100      	movs	r1, #0
 80065c0:	0018      	movs	r0, r3
 80065c2:	f001 fe58 	bl	8008276 <USBD_LL_StallEP>
 80065c6:	e01a      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	23ad      	movs	r3, #173	; 0xad
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	58d3      	ldr	r3, [r2, r3]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d011      	beq.n	80065fa <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	23a7      	movs	r3, #167	; 0xa7
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80065de:	2b03      	cmp	r3, #3
 80065e0:	d10b      	bne.n	80065fa <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	23ad      	movs	r3, #173	; 0xad
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	58d3      	ldr	r3, [r2, r3]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	220b      	movs	r2, #11
 80065ee:	18ba      	adds	r2, r7, r2
 80065f0:	7811      	ldrb	r1, [r2, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	0010      	movs	r0, r2
 80065f6:	4798      	blx	r3
 80065f8:	e001      	b.n	80065fe <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80065fa:	2302      	movs	r3, #2
 80065fc:	e000      	b.n	8006600 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b006      	add	sp, #24
 8006606:	bd80      	pop	{r7, pc}

08006608 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	200b      	movs	r0, #11
 8006614:	183b      	adds	r3, r7, r0
 8006616:	1c0a      	adds	r2, r1, #0
 8006618:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800661a:	183b      	adds	r3, r7, r0
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d000      	beq.n	8006624 <USBD_LL_DataInStage+0x1c>
 8006622:	e08e      	b.n	8006742 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	3314      	adds	r3, #20
 8006628:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	23a5      	movs	r3, #165	; 0xa5
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	58d3      	ldr	r3, [r2, r3]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d164      	bne.n	8006700 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d915      	bls.n	800666e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	b29a      	uxth	r2, r3
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	0018      	movs	r0, r3
 800665c:	f001 fa4d 	bl	8007afa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	2300      	movs	r3, #0
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	f001 feee 	bl	8008448 <USBD_LL_PrepareReceive>
 800666c:	e059      	b.n	8006722 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	689a      	ldr	r2, [r3, #8]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	0019      	movs	r1, r3
 8006678:	0010      	movs	r0, r2
 800667a:	f7f9 fdcb 	bl	8000214 <__aeabi_uidivmod>
 800667e:	1e0b      	subs	r3, r1, #0
 8006680:	d11f      	bne.n	80066c2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800668a:	429a      	cmp	r2, r3
 800668c:	d319      	bcc.n	80066c2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	23a6      	movs	r3, #166	; 0xa6
 8006696:	009b      	lsls	r3, r3, #2
 8006698:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800669a:	429a      	cmp	r2, r3
 800669c:	d211      	bcs.n	80066c2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	2100      	movs	r1, #0
 80066a4:	0018      	movs	r0, r3
 80066a6:	f001 fa28 	bl	8007afa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	23a6      	movs	r3, #166	; 0xa6
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	2100      	movs	r1, #0
 80066b2:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	f001 fec4 	bl	8008448 <USBD_LL_PrepareReceive>
 80066c0:	e02f      	b.n	8006722 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	23ad      	movs	r3, #173	; 0xad
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	58d3      	ldr	r3, [r2, r3]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00d      	beq.n	80066ec <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	23a7      	movs	r3, #167	; 0xa7
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80066d8:	2b03      	cmp	r3, #3
 80066da:	d107      	bne.n	80066ec <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	23ad      	movs	r3, #173	; 0xad
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	58d3      	ldr	r3, [r2, r3]
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	0010      	movs	r0, r2
 80066ea:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2180      	movs	r1, #128	; 0x80
 80066f0:	0018      	movs	r0, r3
 80066f2:	f001 fdc0 	bl	8008276 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	0018      	movs	r0, r3
 80066fa:	f001 fa5c 	bl	8007bb6 <USBD_CtlReceiveStatus>
 80066fe:	e010      	b.n	8006722 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006700:	68fa      	ldr	r2, [r7, #12]
 8006702:	23a5      	movs	r3, #165	; 0xa5
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	58d3      	ldr	r3, [r2, r3]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d005      	beq.n	8006718 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	23a5      	movs	r3, #165	; 0xa5
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2180      	movs	r1, #128	; 0x80
 800671c:	0018      	movs	r0, r3
 800671e:	f001 fdaa 	bl	8008276 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	23a8      	movs	r3, #168	; 0xa8
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	5cd3      	ldrb	r3, [r2, r3]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d124      	bne.n	8006778 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	0018      	movs	r0, r3
 8006732:	f7ff fe42 	bl	80063ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	23a8      	movs	r3, #168	; 0xa8
 800673a:	009b      	lsls	r3, r3, #2
 800673c:	2100      	movs	r1, #0
 800673e:	54d1      	strb	r1, [r2, r3]
 8006740:	e01a      	b.n	8006778 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	23ad      	movs	r3, #173	; 0xad
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	58d3      	ldr	r3, [r2, r3]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d011      	beq.n	8006774 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	23a7      	movs	r3, #167	; 0xa7
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006758:	2b03      	cmp	r3, #3
 800675a:	d10b      	bne.n	8006774 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	23ad      	movs	r3, #173	; 0xad
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	58d3      	ldr	r3, [r2, r3]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	220b      	movs	r2, #11
 8006768:	18ba      	adds	r2, r7, r2
 800676a:	7811      	ldrb	r1, [r2, #0]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	0010      	movs	r0, r2
 8006770:	4798      	blx	r3
 8006772:	e001      	b.n	8006778 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006774:	2302      	movs	r3, #2
 8006776:	e000      	b.n	800677a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	0018      	movs	r0, r3
 800677c:	46bd      	mov	sp, r7
 800677e:	b006      	add	sp, #24
 8006780:	bd80      	pop	{r7, pc}

08006782 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	2340      	movs	r3, #64	; 0x40
 800678e:	2200      	movs	r2, #0
 8006790:	2100      	movs	r1, #0
 8006792:	f001 fd0e 	bl	80081b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	23ac      	movs	r3, #172	; 0xac
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	2101      	movs	r1, #1
 800679e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	23b2      	movs	r3, #178	; 0xb2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	2140      	movs	r1, #64	; 0x40
 80067a8:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	2340      	movs	r3, #64	; 0x40
 80067ae:	2200      	movs	r2, #0
 80067b0:	2180      	movs	r1, #128	; 0x80
 80067b2:	f001 fcfe 	bl	80081b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2240      	movs	r2, #64	; 0x40
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	23a7      	movs	r3, #167	; 0xa7
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	2101      	movs	r1, #1
 80067ca:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	23a5      	movs	r3, #165	; 0xa5
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	2100      	movs	r1, #0
 80067d4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	23a9      	movs	r3, #169	; 0xa9
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	2100      	movs	r1, #0
 80067e4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	23ae      	movs	r3, #174	; 0xae
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	58d3      	ldr	r3, [r2, r3]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	23ad      	movs	r3, #173	; 0xad
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	58d3      	ldr	r3, [r2, r3]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	b2d9      	uxtb	r1, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	0018      	movs	r0, r3
 8006806:	4790      	blx	r2
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	0018      	movs	r0, r3
 800680c:	46bd      	mov	sp, r7
 800680e:	b002      	add	sp, #8
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b082      	sub	sp, #8
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	000a      	movs	r2, r1
 800681c:	1cfb      	adds	r3, r7, #3
 800681e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	1cfa      	adds	r2, r7, #3
 8006824:	7812      	ldrb	r2, [r2, #0]
 8006826:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	0018      	movs	r0, r3
 800682c:	46bd      	mov	sp, r7
 800682e:	b002      	add	sp, #8
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	23a7      	movs	r3, #167	; 0xa7
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	5cd1      	ldrb	r1, [r2, r3]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a06      	ldr	r2, [pc, #24]	; (8006860 <USBD_LL_Suspend+0x2c>)
 8006848:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	23a7      	movs	r3, #167	; 0xa7
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	2104      	movs	r1, #4
 8006852:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	0018      	movs	r0, r3
 8006858:	46bd      	mov	sp, r7
 800685a:	b002      	add	sp, #8
 800685c:	bd80      	pop	{r7, pc}
 800685e:	46c0      	nop			; (mov r8, r8)
 8006860:	0000029d 	.word	0x0000029d

08006864 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	23a7      	movs	r3, #167	; 0xa7
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d106      	bne.n	8006886 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a05      	ldr	r2, [pc, #20]	; (8006890 <USBD_LL_Resume+0x2c>)
 800687c:	5c99      	ldrb	r1, [r3, r2]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	23a7      	movs	r3, #167	; 0xa7
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}
 8006890:	0000029d 	.word	0x0000029d

08006894 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	23a7      	movs	r3, #167	; 0xa7
 80068a0:	009b      	lsls	r3, r3, #2
 80068a2:	5cd3      	ldrb	r3, [r2, r3]
 80068a4:	2b03      	cmp	r3, #3
 80068a6:	d10e      	bne.n	80068c6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	23ad      	movs	r3, #173	; 0xad
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	58d3      	ldr	r3, [r2, r3]
 80068b0:	69db      	ldr	r3, [r3, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	23ad      	movs	r3, #173	; 0xad
 80068ba:	009b      	lsls	r3, r3, #2
 80068bc:	58d3      	ldr	r3, [r2, r3]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	0010      	movs	r0, r2
 80068c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80068da:	230f      	movs	r3, #15
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	001a      	movs	r2, r3
 80068e8:	2360      	movs	r3, #96	; 0x60
 80068ea:	4013      	ands	r3, r2
 80068ec:	2b40      	cmp	r3, #64	; 0x40
 80068ee:	d004      	beq.n	80068fa <USBD_StdDevReq+0x2a>
 80068f0:	d84f      	bhi.n	8006992 <USBD_StdDevReq+0xc2>
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00b      	beq.n	800690e <USBD_StdDevReq+0x3e>
 80068f6:	2b20      	cmp	r3, #32
 80068f8:	d14b      	bne.n	8006992 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	23ad      	movs	r3, #173	; 0xad
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	58d3      	ldr	r3, [r2, r3]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	687a      	ldr	r2, [r7, #4]
 8006908:	0010      	movs	r0, r2
 800690a:	4798      	blx	r3
      break;
 800690c:	e048      	b.n	80069a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b09      	cmp	r3, #9
 8006914:	d835      	bhi.n	8006982 <USBD_StdDevReq+0xb2>
 8006916:	009a      	lsls	r2, r3, #2
 8006918:	4b25      	ldr	r3, [pc, #148]	; (80069b0 <USBD_StdDevReq+0xe0>)
 800691a:	18d3      	adds	r3, r2, r3
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	0011      	movs	r1, r2
 8006926:	0018      	movs	r0, r3
 8006928:	f000 fa52 	bl	8006dd0 <USBD_GetDescriptor>
          break;
 800692c:	e030      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fbfd 	bl	8007134 <USBD_SetAddress>
          break;
 800693a:	e029      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800693c:	683a      	ldr	r2, [r7, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	0011      	movs	r1, r2
 8006942:	0018      	movs	r0, r3
 8006944:	f000 fc4a 	bl	80071dc <USBD_SetConfig>
          break;
 8006948:	e022      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f000 fce7 	bl	8007324 <USBD_GetConfig>
          break;
 8006956:	e01b      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	0011      	movs	r1, r2
 800695e:	0018      	movs	r0, r3
 8006960:	f000 fd1b 	bl	800739a <USBD_GetStatus>
          break;
 8006964:	e014      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0011      	movs	r1, r2
 800696c:	0018      	movs	r0, r3
 800696e:	f000 fd4e 	bl	800740e <USBD_SetFeature>
          break;
 8006972:	e00d      	b.n	8006990 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f000 fd5d 	bl	800743a <USBD_ClrFeature>
          break;
 8006980:	e006      	b.n	8006990 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	0011      	movs	r1, r2
 8006988:	0018      	movs	r0, r3
 800698a:	f000 fdb7 	bl	80074fc <USBD_CtlError>
          break;
 800698e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006990:	e006      	b.n	80069a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	0011      	movs	r1, r2
 8006998:	0018      	movs	r0, r3
 800699a:	f000 fdaf 	bl	80074fc <USBD_CtlError>
      break;
 800699e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80069a0:	230f      	movs	r3, #15
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	781b      	ldrb	r3, [r3, #0]
}
 80069a6:	0018      	movs	r0, r3
 80069a8:	46bd      	mov	sp, r7
 80069aa:	b004      	add	sp, #16
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	08008850 	.word	0x08008850

080069b4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80069b4:	b5b0      	push	{r4, r5, r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	230f      	movs	r3, #15
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	001a      	movs	r2, r3
 80069cc:	2360      	movs	r3, #96	; 0x60
 80069ce:	4013      	ands	r3, r2
 80069d0:	2b40      	cmp	r3, #64	; 0x40
 80069d2:	d004      	beq.n	80069de <USBD_StdItfReq+0x2a>
 80069d4:	d839      	bhi.n	8006a4a <USBD_StdItfReq+0x96>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <USBD_StdItfReq+0x2a>
 80069da:	2b20      	cmp	r3, #32
 80069dc:	d135      	bne.n	8006a4a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	23a7      	movs	r3, #167	; 0xa7
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	5cd3      	ldrb	r3, [r2, r3]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d825      	bhi.n	8006a38 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	889b      	ldrh	r3, [r3, #4]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d819      	bhi.n	8006a2a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	23ad      	movs	r3, #173	; 0xad
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	58d3      	ldr	r3, [r2, r3]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	250f      	movs	r5, #15
 8006a02:	197c      	adds	r4, r7, r5
 8006a04:	6839      	ldr	r1, [r7, #0]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	0010      	movs	r0, r2
 8006a0a:	4798      	blx	r3
 8006a0c:	0003      	movs	r3, r0
 8006a0e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d116      	bne.n	8006a46 <USBD_StdItfReq+0x92>
 8006a18:	197b      	adds	r3, r7, r5
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d112      	bne.n	8006a46 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	0018      	movs	r0, r3
 8006a24:	f001 f8b3 	bl	8007b8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a28:	e00d      	b.n	8006a46 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	0011      	movs	r1, r2
 8006a30:	0018      	movs	r0, r3
 8006a32:	f000 fd63 	bl	80074fc <USBD_CtlError>
          break;
 8006a36:	e006      	b.n	8006a46 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	0011      	movs	r1, r2
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 fd5c 	bl	80074fc <USBD_CtlError>
          break;
 8006a44:	e000      	b.n	8006a48 <USBD_StdItfReq+0x94>
          break;
 8006a46:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006a48:	e006      	b.n	8006a58 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	0011      	movs	r1, r2
 8006a50:	0018      	movs	r0, r3
 8006a52:	f000 fd53 	bl	80074fc <USBD_CtlError>
      break;
 8006a56:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b004      	add	sp, #16
 8006a60:	bdb0      	pop	{r4, r5, r7, pc}

08006a62 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006a62:	b5b0      	push	{r4, r5, r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
 8006a6a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a6c:	230f      	movs	r3, #15
 8006a6e:	18fb      	adds	r3, r7, r3
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	889a      	ldrh	r2, [r3, #4]
 8006a78:	230e      	movs	r3, #14
 8006a7a:	18fb      	adds	r3, r7, r3
 8006a7c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	001a      	movs	r2, r3
 8006a84:	2360      	movs	r3, #96	; 0x60
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b40      	cmp	r3, #64	; 0x40
 8006a8a:	d006      	beq.n	8006a9a <USBD_StdEPReq+0x38>
 8006a8c:	d900      	bls.n	8006a90 <USBD_StdEPReq+0x2e>
 8006a8e:	e190      	b.n	8006db2 <USBD_StdEPReq+0x350>
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00c      	beq.n	8006aae <USBD_StdEPReq+0x4c>
 8006a94:	2b20      	cmp	r3, #32
 8006a96:	d000      	beq.n	8006a9a <USBD_StdEPReq+0x38>
 8006a98:	e18b      	b.n	8006db2 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	23ad      	movs	r3, #173	; 0xad
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	58d3      	ldr	r3, [r2, r3]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	0010      	movs	r0, r2
 8006aaa:	4798      	blx	r3
      break;
 8006aac:	e188      	b.n	8006dc0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	001a      	movs	r2, r3
 8006ab4:	2360      	movs	r3, #96	; 0x60
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d10f      	bne.n	8006adc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	23ad      	movs	r3, #173	; 0xad
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	58d3      	ldr	r3, [r2, r3]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	250f      	movs	r5, #15
 8006ac8:	197c      	adds	r4, r7, r5
 8006aca:	6839      	ldr	r1, [r7, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	0010      	movs	r0, r2
 8006ad0:	4798      	blx	r3
 8006ad2:	0003      	movs	r3, r0
 8006ad4:	7023      	strb	r3, [r4, #0]

        return ret;
 8006ad6:	197b      	adds	r3, r7, r5
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	e174      	b.n	8006dc6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	785b      	ldrb	r3, [r3, #1]
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d007      	beq.n	8006af4 <USBD_StdEPReq+0x92>
 8006ae4:	dd00      	ble.n	8006ae8 <USBD_StdEPReq+0x86>
 8006ae6:	e15c      	b.n	8006da2 <USBD_StdEPReq+0x340>
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d100      	bne.n	8006aee <USBD_StdEPReq+0x8c>
 8006aec:	e092      	b.n	8006c14 <USBD_StdEPReq+0x1b2>
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d04b      	beq.n	8006b8a <USBD_StdEPReq+0x128>
 8006af2:	e156      	b.n	8006da2 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	23a7      	movs	r3, #167	; 0xa7
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	5cd3      	ldrb	r3, [r2, r3]
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d002      	beq.n	8006b06 <USBD_StdEPReq+0xa4>
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d01d      	beq.n	8006b40 <USBD_StdEPReq+0xde>
 8006b04:	e039      	b.n	8006b7a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b06:	220e      	movs	r2, #14
 8006b08:	18bb      	adds	r3, r7, r2
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <USBD_StdEPReq+0xd0>
 8006b10:	18bb      	adds	r3, r7, r2
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b80      	cmp	r3, #128	; 0x80
 8006b16:	d00c      	beq.n	8006b32 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b18:	18bb      	adds	r3, r7, r2
 8006b1a:	781a      	ldrb	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	0011      	movs	r1, r2
 8006b20:	0018      	movs	r0, r3
 8006b22:	f001 fba8 	bl	8008276 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f001 fba3 	bl	8008276 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b30:	e02a      	b.n	8006b88 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	0011      	movs	r1, r2
 8006b38:	0018      	movs	r0, r3
 8006b3a:	f000 fcdf 	bl	80074fc <USBD_CtlError>
              break;
 8006b3e:	e023      	b.n	8006b88 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	885b      	ldrh	r3, [r3, #2]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d113      	bne.n	8006b70 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006b48:	220e      	movs	r2, #14
 8006b4a:	18bb      	adds	r3, r7, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <USBD_StdEPReq+0x10e>
 8006b52:	18bb      	adds	r3, r7, r2
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b80      	cmp	r3, #128	; 0x80
 8006b58:	d00a      	beq.n	8006b70 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	88db      	ldrh	r3, [r3, #6]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b62:	18bb      	adds	r3, r7, r2
 8006b64:	781a      	ldrb	r2, [r3, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0011      	movs	r1, r2
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f001 fb83 	bl	8008276 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	0018      	movs	r0, r3
 8006b74:	f001 f80b 	bl	8007b8e <USBD_CtlSendStatus>

              break;
 8006b78:	e006      	b.n	8006b88 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	0011      	movs	r1, r2
 8006b80:	0018      	movs	r0, r3
 8006b82:	f000 fcbb 	bl	80074fc <USBD_CtlError>
              break;
 8006b86:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006b88:	e112      	b.n	8006db0 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	23a7      	movs	r3, #167	; 0xa7
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	5cd3      	ldrb	r3, [r2, r3]
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d002      	beq.n	8006b9c <USBD_StdEPReq+0x13a>
 8006b96:	2b03      	cmp	r3, #3
 8006b98:	d01d      	beq.n	8006bd6 <USBD_StdEPReq+0x174>
 8006b9a:	e032      	b.n	8006c02 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b9c:	220e      	movs	r2, #14
 8006b9e:	18bb      	adds	r3, r7, r2
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d010      	beq.n	8006bc8 <USBD_StdEPReq+0x166>
 8006ba6:	18bb      	adds	r3, r7, r2
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d00c      	beq.n	8006bc8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bae:	18bb      	adds	r3, r7, r2
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	0011      	movs	r1, r2
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f001 fb5d 	bl	8008276 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2180      	movs	r1, #128	; 0x80
 8006bc0:	0018      	movs	r0, r3
 8006bc2:	f001 fb58 	bl	8008276 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bc6:	e024      	b.n	8006c12 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	0011      	movs	r1, r2
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fc94 	bl	80074fc <USBD_CtlError>
              break;
 8006bd4:	e01d      	b.n	8006c12 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	885b      	ldrh	r3, [r3, #2]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d118      	bne.n	8006c10 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bde:	210e      	movs	r1, #14
 8006be0:	187b      	adds	r3, r7, r1
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	227f      	movs	r2, #127	; 0x7f
 8006be6:	4013      	ands	r3, r2
 8006be8:	d006      	beq.n	8006bf8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bea:	187b      	adds	r3, r7, r1
 8006bec:	781a      	ldrb	r2, [r3, #0]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0011      	movs	r1, r2
 8006bf2:	0018      	movs	r0, r3
 8006bf4:	f001 fb6a 	bl	80082cc <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	0018      	movs	r0, r3
 8006bfc:	f000 ffc7 	bl	8007b8e <USBD_CtlSendStatus>
              }
              break;
 8006c00:	e006      	b.n	8006c10 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0011      	movs	r1, r2
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f000 fc77 	bl	80074fc <USBD_CtlError>
              break;
 8006c0e:	e000      	b.n	8006c12 <USBD_StdEPReq+0x1b0>
              break;
 8006c10:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006c12:	e0cd      	b.n	8006db0 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	23a7      	movs	r3, #167	; 0xa7
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	5cd3      	ldrb	r3, [r2, r3]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d002      	beq.n	8006c26 <USBD_StdEPReq+0x1c4>
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d03c      	beq.n	8006c9e <USBD_StdEPReq+0x23c>
 8006c24:	e0b5      	b.n	8006d92 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c26:	220e      	movs	r2, #14
 8006c28:	18bb      	adds	r3, r7, r2
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00a      	beq.n	8006c46 <USBD_StdEPReq+0x1e4>
 8006c30:	18bb      	adds	r3, r7, r2
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b80      	cmp	r3, #128	; 0x80
 8006c36:	d006      	beq.n	8006c46 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	0011      	movs	r1, r2
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f000 fc5c 	bl	80074fc <USBD_CtlError>
                break;
 8006c44:	e0ac      	b.n	8006da0 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c46:	220e      	movs	r2, #14
 8006c48:	18bb      	adds	r3, r7, r2
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da0c      	bge.n	8006c6c <USBD_StdEPReq+0x20a>
 8006c52:	18bb      	adds	r3, r7, r2
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	227f      	movs	r2, #127	; 0x7f
 8006c58:	401a      	ands	r2, r3
 8006c5a:	0013      	movs	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	189b      	adds	r3, r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	3310      	adds	r3, #16
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	18d3      	adds	r3, r2, r3
 8006c68:	3304      	adds	r3, #4
 8006c6a:	e00d      	b.n	8006c88 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c6c:	230e      	movs	r3, #14
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	227f      	movs	r2, #127	; 0x7f
 8006c74:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c76:	0013      	movs	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	3351      	adds	r3, #81	; 0x51
 8006c80:	33ff      	adds	r3, #255	; 0xff
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	18d3      	adds	r3, r2, r3
 8006c86:	3304      	adds	r3, #4
 8006c88:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c90:	68b9      	ldr	r1, [r7, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2202      	movs	r2, #2
 8006c96:	0018      	movs	r0, r3
 8006c98:	f000 ff0f 	bl	8007aba <USBD_CtlSendData>
              break;
 8006c9c:	e080      	b.n	8006da0 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c9e:	220e      	movs	r2, #14
 8006ca0:	18bb      	adds	r3, r7, r2
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da14      	bge.n	8006cd4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006caa:	18bb      	adds	r3, r7, r2
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	220f      	movs	r2, #15
 8006cb0:	401a      	ands	r2, r3
 8006cb2:	6879      	ldr	r1, [r7, #4]
 8006cb4:	0013      	movs	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	18cb      	adds	r3, r1, r3
 8006cbe:	3318      	adds	r3, #24
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11e      	bne.n	8006d04 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	0011      	movs	r1, r2
 8006ccc:	0018      	movs	r0, r3
 8006cce:	f000 fc15 	bl	80074fc <USBD_CtlError>
                  break;
 8006cd2:	e065      	b.n	8006da0 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cd4:	230e      	movs	r3, #14
 8006cd6:	18fb      	adds	r3, r7, r3
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	220f      	movs	r2, #15
 8006cdc:	401a      	ands	r2, r3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	23ac      	movs	r3, #172	; 0xac
 8006ce2:	0059      	lsls	r1, r3, #1
 8006ce4:	0013      	movs	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	18c3      	adds	r3, r0, r3
 8006cee:	185b      	adds	r3, r3, r1
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0011      	movs	r1, r2
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	f000 fbfd 	bl	80074fc <USBD_CtlError>
                  break;
 8006d02:	e04d      	b.n	8006da0 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d04:	220e      	movs	r2, #14
 8006d06:	18bb      	adds	r3, r7, r2
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	b25b      	sxtb	r3, r3
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	da0c      	bge.n	8006d2a <USBD_StdEPReq+0x2c8>
 8006d10:	18bb      	adds	r3, r7, r2
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	227f      	movs	r2, #127	; 0x7f
 8006d16:	401a      	ands	r2, r3
 8006d18:	0013      	movs	r3, r2
 8006d1a:	009b      	lsls	r3, r3, #2
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	009b      	lsls	r3, r3, #2
 8006d20:	3310      	adds	r3, #16
 8006d22:	687a      	ldr	r2, [r7, #4]
 8006d24:	18d3      	adds	r3, r2, r3
 8006d26:	3304      	adds	r3, #4
 8006d28:	e00d      	b.n	8006d46 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d2a:	230e      	movs	r3, #14
 8006d2c:	18fb      	adds	r3, r7, r3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	227f      	movs	r2, #127	; 0x7f
 8006d32:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d34:	0013      	movs	r3, r2
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	189b      	adds	r3, r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	3351      	adds	r3, #81	; 0x51
 8006d3e:	33ff      	adds	r3, #255	; 0xff
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	18d3      	adds	r3, r2, r3
 8006d44:	3304      	adds	r3, #4
 8006d46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d48:	220e      	movs	r2, #14
 8006d4a:	18bb      	adds	r3, r7, r2
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d003      	beq.n	8006d5a <USBD_StdEPReq+0x2f8>
 8006d52:	18bb      	adds	r3, r7, r2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d103      	bne.n	8006d62 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	e010      	b.n	8006d84 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d62:	230e      	movs	r3, #14
 8006d64:	18fb      	adds	r3, r7, r3
 8006d66:	781a      	ldrb	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	0011      	movs	r1, r2
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f001 fad8 	bl	8008322 <USBD_LL_IsStallEP>
 8006d72:	1e03      	subs	r3, r0, #0
 8006d74:	d003      	beq.n	8006d7e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2201      	movs	r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e002      	b.n	8006d84 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d84:	68b9      	ldr	r1, [r7, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	0018      	movs	r0, r3
 8006d8c:	f000 fe95 	bl	8007aba <USBD_CtlSendData>
              break;
 8006d90:	e006      	b.n	8006da0 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	0011      	movs	r1, r2
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 fbaf 	bl	80074fc <USBD_CtlError>
              break;
 8006d9e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006da0:	e006      	b.n	8006db0 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006da2:	683a      	ldr	r2, [r7, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0011      	movs	r1, r2
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fba7 	bl	80074fc <USBD_CtlError>
          break;
 8006dae:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006db0:	e006      	b.n	8006dc0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006db2:	683a      	ldr	r2, [r7, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	0011      	movs	r1, r2
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 fb9f 	bl	80074fc <USBD_CtlError>
      break;
 8006dbe:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006dc0:	230f      	movs	r3, #15
 8006dc2:	18fb      	adds	r3, r7, r3
 8006dc4:	781b      	ldrb	r3, [r3, #0]
}
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	b004      	add	sp, #16
 8006dcc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006dd0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dda:	2308      	movs	r3, #8
 8006ddc:	18fb      	adds	r3, r7, r3
 8006dde:	2200      	movs	r2, #0
 8006de0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006de6:	230b      	movs	r3, #11
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	2200      	movs	r2, #0
 8006dec:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	0a1b      	lsrs	r3, r3, #8
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b07      	cmp	r3, #7
 8006df8:	d900      	bls.n	8006dfc <USBD_GetDescriptor+0x2c>
 8006dfa:	e159      	b.n	80070b0 <USBD_GetDescriptor+0x2e0>
 8006dfc:	009a      	lsls	r2, r3, #2
 8006dfe:	4bcb      	ldr	r3, [pc, #812]	; (800712c <USBD_GetDescriptor+0x35c>)
 8006e00:	18d3      	adds	r3, r2, r3
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	23ac      	movs	r3, #172	; 0xac
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	58d3      	ldr	r3, [r2, r3]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	7c12      	ldrb	r2, [r2, #16]
 8006e14:	2108      	movs	r1, #8
 8006e16:	1879      	adds	r1, r7, r1
 8006e18:	0010      	movs	r0, r2
 8006e1a:	4798      	blx	r3
 8006e1c:	0003      	movs	r3, r0
 8006e1e:	60fb      	str	r3, [r7, #12]
      break;
 8006e20:	e153      	b.n	80070ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	7c1b      	ldrb	r3, [r3, #16]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10f      	bne.n	8006e4a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	23ad      	movs	r3, #173	; 0xad
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	58d3      	ldr	r3, [r2, r3]
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	2208      	movs	r2, #8
 8006e36:	18ba      	adds	r2, r7, r2
 8006e38:	0010      	movs	r0, r2
 8006e3a:	4798      	blx	r3
 8006e3c:	0003      	movs	r3, r0
 8006e3e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	3301      	adds	r3, #1
 8006e44:	2202      	movs	r2, #2
 8006e46:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e48:	e13f      	b.n	80070ca <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	23ad      	movs	r3, #173	; 0xad
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	58d3      	ldr	r3, [r2, r3]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	2208      	movs	r2, #8
 8006e56:	18ba      	adds	r2, r7, r2
 8006e58:	0010      	movs	r0, r2
 8006e5a:	4798      	blx	r3
 8006e5c:	0003      	movs	r3, r0
 8006e5e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	3301      	adds	r3, #1
 8006e64:	2202      	movs	r2, #2
 8006e66:	701a      	strb	r2, [r3, #0]
      break;
 8006e68:	e12f      	b.n	80070ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b05      	cmp	r3, #5
 8006e72:	d900      	bls.n	8006e76 <USBD_GetDescriptor+0xa6>
 8006e74:	e0d0      	b.n	8007018 <USBD_GetDescriptor+0x248>
 8006e76:	009a      	lsls	r2, r3, #2
 8006e78:	4bad      	ldr	r3, [pc, #692]	; (8007130 <USBD_GetDescriptor+0x360>)
 8006e7a:	18d3      	adds	r3, r2, r3
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	23ac      	movs	r3, #172	; 0xac
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	58d3      	ldr	r3, [r2, r3]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00d      	beq.n	8006eaa <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	23ac      	movs	r3, #172	; 0xac
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	58d3      	ldr	r3, [r2, r3]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	2108      	movs	r1, #8
 8006e9e:	1879      	adds	r1, r7, r1
 8006ea0:	0010      	movs	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	0003      	movs	r3, r0
 8006ea6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea8:	e0c3      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	0011      	movs	r1, r2
 8006eb0:	0018      	movs	r0, r3
 8006eb2:	f000 fb23 	bl	80074fc <USBD_CtlError>
            err++;
 8006eb6:	210b      	movs	r1, #11
 8006eb8:	187b      	adds	r3, r7, r1
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	187b      	adds	r3, r7, r1
 8006ebe:	3201      	adds	r2, #1
 8006ec0:	701a      	strb	r2, [r3, #0]
          break;
 8006ec2:	e0b6      	b.n	8007032 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	23ac      	movs	r3, #172	; 0xac
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	58d3      	ldr	r3, [r2, r3]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00d      	beq.n	8006eee <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	23ac      	movs	r3, #172	; 0xac
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	58d3      	ldr	r3, [r2, r3]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7c12      	ldrb	r2, [r2, #16]
 8006ee0:	2108      	movs	r1, #8
 8006ee2:	1879      	adds	r1, r7, r1
 8006ee4:	0010      	movs	r0, r2
 8006ee6:	4798      	blx	r3
 8006ee8:	0003      	movs	r3, r0
 8006eea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eec:	e0a1      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	0011      	movs	r1, r2
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	f000 fb01 	bl	80074fc <USBD_CtlError>
            err++;
 8006efa:	210b      	movs	r1, #11
 8006efc:	187b      	adds	r3, r7, r1
 8006efe:	781a      	ldrb	r2, [r3, #0]
 8006f00:	187b      	adds	r3, r7, r1
 8006f02:	3201      	adds	r2, #1
 8006f04:	701a      	strb	r2, [r3, #0]
          break;
 8006f06:	e094      	b.n	8007032 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	23ac      	movs	r3, #172	; 0xac
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	58d3      	ldr	r3, [r2, r3]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00d      	beq.n	8006f32 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	23ac      	movs	r3, #172	; 0xac
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	58d3      	ldr	r3, [r2, r3]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7c12      	ldrb	r2, [r2, #16]
 8006f24:	2108      	movs	r1, #8
 8006f26:	1879      	adds	r1, r7, r1
 8006f28:	0010      	movs	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	0003      	movs	r3, r0
 8006f2e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f30:	e07f      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	0011      	movs	r1, r2
 8006f38:	0018      	movs	r0, r3
 8006f3a:	f000 fadf 	bl	80074fc <USBD_CtlError>
            err++;
 8006f3e:	210b      	movs	r1, #11
 8006f40:	187b      	adds	r3, r7, r1
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	3201      	adds	r2, #1
 8006f48:	701a      	strb	r2, [r3, #0]
          break;
 8006f4a:	e072      	b.n	8007032 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	23ac      	movs	r3, #172	; 0xac
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	58d3      	ldr	r3, [r2, r3]
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d00d      	beq.n	8006f76 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	23ac      	movs	r3, #172	; 0xac
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	58d3      	ldr	r3, [r2, r3]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	7c12      	ldrb	r2, [r2, #16]
 8006f68:	2108      	movs	r1, #8
 8006f6a:	1879      	adds	r1, r7, r1
 8006f6c:	0010      	movs	r0, r2
 8006f6e:	4798      	blx	r3
 8006f70:	0003      	movs	r3, r0
 8006f72:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f74:	e05d      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	0011      	movs	r1, r2
 8006f7c:	0018      	movs	r0, r3
 8006f7e:	f000 fabd 	bl	80074fc <USBD_CtlError>
            err++;
 8006f82:	210b      	movs	r1, #11
 8006f84:	187b      	adds	r3, r7, r1
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	3201      	adds	r2, #1
 8006f8c:	701a      	strb	r2, [r3, #0]
          break;
 8006f8e:	e050      	b.n	8007032 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	23ac      	movs	r3, #172	; 0xac
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	58d3      	ldr	r3, [r2, r3]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	23ac      	movs	r3, #172	; 0xac
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	58d3      	ldr	r3, [r2, r3]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7c12      	ldrb	r2, [r2, #16]
 8006fac:	2108      	movs	r1, #8
 8006fae:	1879      	adds	r1, r7, r1
 8006fb0:	0010      	movs	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fb8:	e03b      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	0011      	movs	r1, r2
 8006fc0:	0018      	movs	r0, r3
 8006fc2:	f000 fa9b 	bl	80074fc <USBD_CtlError>
            err++;
 8006fc6:	210b      	movs	r1, #11
 8006fc8:	187b      	adds	r3, r7, r1
 8006fca:	781a      	ldrb	r2, [r3, #0]
 8006fcc:	187b      	adds	r3, r7, r1
 8006fce:	3201      	adds	r2, #1
 8006fd0:	701a      	strb	r2, [r3, #0]
          break;
 8006fd2:	e02e      	b.n	8007032 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	23ac      	movs	r3, #172	; 0xac
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	58d3      	ldr	r3, [r2, r3]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00d      	beq.n	8006ffe <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	23ac      	movs	r3, #172	; 0xac
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	58d3      	ldr	r3, [r2, r3]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	687a      	ldr	r2, [r7, #4]
 8006fee:	7c12      	ldrb	r2, [r2, #16]
 8006ff0:	2108      	movs	r1, #8
 8006ff2:	1879      	adds	r1, r7, r1
 8006ff4:	0010      	movs	r0, r2
 8006ff6:	4798      	blx	r3
 8006ff8:	0003      	movs	r3, r0
 8006ffa:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ffc:	e019      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	0011      	movs	r1, r2
 8007004:	0018      	movs	r0, r3
 8007006:	f000 fa79 	bl	80074fc <USBD_CtlError>
            err++;
 800700a:	210b      	movs	r1, #11
 800700c:	187b      	adds	r3, r7, r1
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	187b      	adds	r3, r7, r1
 8007012:	3201      	adds	r2, #1
 8007014:	701a      	strb	r2, [r3, #0]
          break;
 8007016:	e00c      	b.n	8007032 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007018:	683a      	ldr	r2, [r7, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	0011      	movs	r1, r2
 800701e:	0018      	movs	r0, r3
 8007020:	f000 fa6c 	bl	80074fc <USBD_CtlError>
          err++;
 8007024:	210b      	movs	r1, #11
 8007026:	187b      	adds	r3, r7, r1
 8007028:	781a      	ldrb	r2, [r3, #0]
 800702a:	187b      	adds	r3, r7, r1
 800702c:	3201      	adds	r2, #1
 800702e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007030:	e04b      	b.n	80070ca <USBD_GetDescriptor+0x2fa>
 8007032:	e04a      	b.n	80070ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	7c1b      	ldrb	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	23ad      	movs	r3, #173	; 0xad
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	58d3      	ldr	r3, [r2, r3]
 8007044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007046:	2208      	movs	r2, #8
 8007048:	18ba      	adds	r2, r7, r2
 800704a:	0010      	movs	r0, r2
 800704c:	4798      	blx	r3
 800704e:	0003      	movs	r3, r0
 8007050:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007052:	e03a      	b.n	80070ca <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007054:	683a      	ldr	r2, [r7, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	0011      	movs	r1, r2
 800705a:	0018      	movs	r0, r3
 800705c:	f000 fa4e 	bl	80074fc <USBD_CtlError>
        err++;
 8007060:	210b      	movs	r1, #11
 8007062:	187b      	adds	r3, r7, r1
 8007064:	781a      	ldrb	r2, [r3, #0]
 8007066:	187b      	adds	r3, r7, r1
 8007068:	3201      	adds	r2, #1
 800706a:	701a      	strb	r2, [r3, #0]
      break;
 800706c:	e02d      	b.n	80070ca <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	7c1b      	ldrb	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10f      	bne.n	8007096 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	23ad      	movs	r3, #173	; 0xad
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	58d3      	ldr	r3, [r2, r3]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	2208      	movs	r2, #8
 8007082:	18ba      	adds	r2, r7, r2
 8007084:	0010      	movs	r0, r2
 8007086:	4798      	blx	r3
 8007088:	0003      	movs	r3, r0
 800708a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	2207      	movs	r2, #7
 8007092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007094:	e019      	b.n	80070ca <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f000 fa2d 	bl	80074fc <USBD_CtlError>
        err++;
 80070a2:	210b      	movs	r1, #11
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	781a      	ldrb	r2, [r3, #0]
 80070a8:	187b      	adds	r3, r7, r1
 80070aa:	3201      	adds	r2, #1
 80070ac:	701a      	strb	r2, [r3, #0]
      break;
 80070ae:	e00c      	b.n	80070ca <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	0011      	movs	r1, r2
 80070b6:	0018      	movs	r0, r3
 80070b8:	f000 fa20 	bl	80074fc <USBD_CtlError>
      err++;
 80070bc:	210b      	movs	r1, #11
 80070be:	187b      	adds	r3, r7, r1
 80070c0:	781a      	ldrb	r2, [r3, #0]
 80070c2:	187b      	adds	r3, r7, r1
 80070c4:	3201      	adds	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
      break;
 80070c8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 80070ca:	230b      	movs	r3, #11
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d127      	bne.n	8007124 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80070d4:	2108      	movs	r1, #8
 80070d6:	187b      	adds	r3, r7, r1
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d019      	beq.n	8007112 <USBD_GetDescriptor+0x342>
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d015      	beq.n	8007112 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	88da      	ldrh	r2, [r3, #6]
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	1c18      	adds	r0, r3, #0
 80070f0:	1c11      	adds	r1, r2, #0
 80070f2:	b28a      	uxth	r2, r1
 80070f4:	b283      	uxth	r3, r0
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d900      	bls.n	80070fc <USBD_GetDescriptor+0x32c>
 80070fa:	1c01      	adds	r1, r0, #0
 80070fc:	b28a      	uxth	r2, r1
 80070fe:	2108      	movs	r1, #8
 8007100:	187b      	adds	r3, r7, r1
 8007102:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007104:	187b      	adds	r3, r7, r1
 8007106:	881a      	ldrh	r2, [r3, #0]
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	0018      	movs	r0, r3
 800710e:	f000 fcd4 	bl	8007aba <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	88db      	ldrh	r3, [r3, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	0018      	movs	r0, r3
 800711e:	f000 fd36 	bl	8007b8e <USBD_CtlSendStatus>
 8007122:	e000      	b.n	8007126 <USBD_GetDescriptor+0x356>
    return;
 8007124:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007126:	46bd      	mov	sp, r7
 8007128:	b004      	add	sp, #16
 800712a:	bd80      	pop	{r7, pc}
 800712c:	08008878 	.word	0x08008878
 8007130:	08008898 	.word	0x08008898

08007134 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007134:	b590      	push	{r4, r7, lr}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	889b      	ldrh	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d13d      	bne.n	80071c2 <USBD_SetAddress+0x8e>
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88db      	ldrh	r3, [r3, #6]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d139      	bne.n	80071c2 <USBD_SetAddress+0x8e>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	885b      	ldrh	r3, [r3, #2]
 8007152:	2b7f      	cmp	r3, #127	; 0x7f
 8007154:	d835      	bhi.n	80071c2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	885b      	ldrh	r3, [r3, #2]
 800715a:	b2da      	uxtb	r2, r3
 800715c:	230f      	movs	r3, #15
 800715e:	18fb      	adds	r3, r7, r3
 8007160:	217f      	movs	r1, #127	; 0x7f
 8007162:	400a      	ands	r2, r1
 8007164:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	23a7      	movs	r3, #167	; 0xa7
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	5cd3      	ldrb	r3, [r2, r3]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d106      	bne.n	8007180 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	0011      	movs	r1, r2
 8007178:	0018      	movs	r0, r3
 800717a:	f000 f9bf 	bl	80074fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	e027      	b.n	80071d0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	240f      	movs	r4, #15
 8007184:	193a      	adds	r2, r7, r4
 8007186:	4914      	ldr	r1, [pc, #80]	; (80071d8 <USBD_SetAddress+0xa4>)
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800718c:	193b      	adds	r3, r7, r4
 800718e:	781a      	ldrb	r2, [r3, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	0011      	movs	r1, r2
 8007194:	0018      	movs	r0, r3
 8007196:	f001 f8f5 	bl	8008384 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	0018      	movs	r0, r3
 800719e:	f000 fcf6 	bl	8007b8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071a2:	193b      	adds	r3, r7, r4
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d005      	beq.n	80071b6 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	23a7      	movs	r3, #167	; 0xa7
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	2102      	movs	r1, #2
 80071b2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b4:	e00c      	b.n	80071d0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071b6:	687a      	ldr	r2, [r7, #4]
 80071b8:	23a7      	movs	r3, #167	; 0xa7
 80071ba:	009b      	lsls	r3, r3, #2
 80071bc:	2101      	movs	r1, #1
 80071be:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c0:	e006      	b.n	80071d0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	0011      	movs	r1, r2
 80071c8:	0018      	movs	r0, r3
 80071ca:	f000 f997 	bl	80074fc <USBD_CtlError>
  }
}
 80071ce:	46c0      	nop			; (mov r8, r8)
 80071d0:	46c0      	nop			; (mov r8, r8)
 80071d2:	46bd      	mov	sp, r7
 80071d4:	b005      	add	sp, #20
 80071d6:	bd90      	pop	{r4, r7, pc}
 80071d8:	0000029e 	.word	0x0000029e

080071dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	885b      	ldrh	r3, [r3, #2]
 80071ea:	b2da      	uxtb	r2, r3
 80071ec:	4b4c      	ldr	r3, [pc, #304]	; (8007320 <USBD_SetConfig+0x144>)
 80071ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80071f0:	4b4b      	ldr	r3, [pc, #300]	; (8007320 <USBD_SetConfig+0x144>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d906      	bls.n	8007206 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	0011      	movs	r1, r2
 80071fe:	0018      	movs	r0, r3
 8007200:	f000 f97c 	bl	80074fc <USBD_CtlError>
 8007204:	e088      	b.n	8007318 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	23a7      	movs	r3, #167	; 0xa7
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	5cd3      	ldrb	r3, [r2, r3]
 800720e:	2b02      	cmp	r3, #2
 8007210:	d002      	beq.n	8007218 <USBD_SetConfig+0x3c>
 8007212:	2b03      	cmp	r3, #3
 8007214:	d029      	beq.n	800726a <USBD_SetConfig+0x8e>
 8007216:	e071      	b.n	80072fc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007218:	4b41      	ldr	r3, [pc, #260]	; (8007320 <USBD_SetConfig+0x144>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d01f      	beq.n	8007260 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007220:	4b3f      	ldr	r3, [pc, #252]	; (8007320 <USBD_SetConfig+0x144>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	001a      	movs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	23a7      	movs	r3, #167	; 0xa7
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	2103      	movs	r1, #3
 8007232:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007234:	4b3a      	ldr	r3, [pc, #232]	; (8007320 <USBD_SetConfig+0x144>)
 8007236:	781a      	ldrb	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	0011      	movs	r1, r2
 800723c:	0018      	movs	r0, r3
 800723e:	f7ff f8c5 	bl	80063cc <USBD_SetClassConfig>
 8007242:	0003      	movs	r3, r0
 8007244:	2b02      	cmp	r3, #2
 8007246:	d106      	bne.n	8007256 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	0011      	movs	r1, r2
 800724e:	0018      	movs	r0, r3
 8007250:	f000 f954 	bl	80074fc <USBD_CtlError>
            return;
 8007254:	e060      	b.n	8007318 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	0018      	movs	r0, r3
 800725a:	f000 fc98 	bl	8007b8e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800725e:	e05b      	b.n	8007318 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	0018      	movs	r0, r3
 8007264:	f000 fc93 	bl	8007b8e <USBD_CtlSendStatus>
        break;
 8007268:	e056      	b.n	8007318 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800726a:	4b2d      	ldr	r3, [pc, #180]	; (8007320 <USBD_SetConfig+0x144>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d115      	bne.n	800729e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	23a7      	movs	r3, #167	; 0xa7
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	2102      	movs	r1, #2
 800727a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800727c:	4b28      	ldr	r3, [pc, #160]	; (8007320 <USBD_SetConfig+0x144>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	001a      	movs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007286:	4b26      	ldr	r3, [pc, #152]	; (8007320 <USBD_SetConfig+0x144>)
 8007288:	781a      	ldrb	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	0011      	movs	r1, r2
 800728e:	0018      	movs	r0, r3
 8007290:	f7ff f8c3 	bl	800641a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	0018      	movs	r0, r3
 8007298:	f000 fc79 	bl	8007b8e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800729c:	e03c      	b.n	8007318 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800729e:	4b20      	ldr	r3, [pc, #128]	; (8007320 <USBD_SetConfig+0x144>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	001a      	movs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d022      	beq.n	80072f2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	0011      	movs	r1, r2
 80072b6:	0018      	movs	r0, r3
 80072b8:	f7ff f8af 	bl	800641a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80072bc:	4b18      	ldr	r3, [pc, #96]	; (8007320 <USBD_SetConfig+0x144>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	001a      	movs	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80072c6:	4b16      	ldr	r3, [pc, #88]	; (8007320 <USBD_SetConfig+0x144>)
 80072c8:	781a      	ldrb	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	0011      	movs	r1, r2
 80072ce:	0018      	movs	r0, r3
 80072d0:	f7ff f87c 	bl	80063cc <USBD_SetClassConfig>
 80072d4:	0003      	movs	r3, r0
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d106      	bne.n	80072e8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0011      	movs	r1, r2
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 f90b 	bl	80074fc <USBD_CtlError>
            return;
 80072e6:	e017      	b.n	8007318 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0018      	movs	r0, r3
 80072ec:	f000 fc4f 	bl	8007b8e <USBD_CtlSendStatus>
        break;
 80072f0:	e012      	b.n	8007318 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	0018      	movs	r0, r3
 80072f6:	f000 fc4a 	bl	8007b8e <USBD_CtlSendStatus>
        break;
 80072fa:	e00d      	b.n	8007318 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 80072fc:	683a      	ldr	r2, [r7, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	0011      	movs	r1, r2
 8007302:	0018      	movs	r0, r3
 8007304:	f000 f8fa 	bl	80074fc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007308:	4b05      	ldr	r3, [pc, #20]	; (8007320 <USBD_SetConfig+0x144>)
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	0011      	movs	r1, r2
 8007310:	0018      	movs	r0, r3
 8007312:	f7ff f882 	bl	800641a <USBD_ClrClassConfig>
        break;
 8007316:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007318:	46bd      	mov	sp, r7
 800731a:	b002      	add	sp, #8
 800731c:	bd80      	pop	{r7, pc}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	20000220 	.word	0x20000220

08007324 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	88db      	ldrh	r3, [r3, #6]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d006      	beq.n	8007344 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	0011      	movs	r1, r2
 800733c:	0018      	movs	r0, r3
 800733e:	f000 f8dd 	bl	80074fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007342:	e026      	b.n	8007392 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	23a7      	movs	r3, #167	; 0xa7
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	5cd3      	ldrb	r3, [r2, r3]
 800734c:	2b02      	cmp	r3, #2
 800734e:	dc02      	bgt.n	8007356 <USBD_GetConfig+0x32>
 8007350:	2b00      	cmp	r3, #0
 8007352:	dc03      	bgt.n	800735c <USBD_GetConfig+0x38>
 8007354:	e016      	b.n	8007384 <USBD_GetConfig+0x60>
 8007356:	2b03      	cmp	r3, #3
 8007358:	d00c      	beq.n	8007374 <USBD_GetConfig+0x50>
 800735a:	e013      	b.n	8007384 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	3308      	adds	r3, #8
 8007366:	0019      	movs	r1, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	0018      	movs	r0, r3
 800736e:	f000 fba4 	bl	8007aba <USBD_CtlSendData>
        break;
 8007372:	e00e      	b.n	8007392 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1d19      	adds	r1, r3, #4
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	0018      	movs	r0, r3
 800737e:	f000 fb9c 	bl	8007aba <USBD_CtlSendData>
        break;
 8007382:	e006      	b.n	8007392 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	0011      	movs	r1, r2
 800738a:	0018      	movs	r0, r3
 800738c:	f000 f8b6 	bl	80074fc <USBD_CtlError>
        break;
 8007390:	46c0      	nop			; (mov r8, r8)
}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	46bd      	mov	sp, r7
 8007396:	b002      	add	sp, #8
 8007398:	bd80      	pop	{r7, pc}

0800739a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b082      	sub	sp, #8
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	23a7      	movs	r3, #167	; 0xa7
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	5cd3      	ldrb	r3, [r2, r3]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d822      	bhi.n	80073f8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	88db      	ldrh	r3, [r3, #6]
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d006      	beq.n	80073c8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	0011      	movs	r1, r2
 80073c0:	0018      	movs	r0, r3
 80073c2:	f000 f89b 	bl	80074fc <USBD_CtlError>
        break;
 80073c6:	e01e      	b.n	8007406 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	23a9      	movs	r3, #169	; 0xa9
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	58d3      	ldr	r3, [r2, r3]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	2202      	movs	r2, #2
 80073e0:	431a      	orrs	r2, r3
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	330c      	adds	r3, #12
 80073ea:	0019      	movs	r1, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	0018      	movs	r0, r3
 80073f2:	f000 fb62 	bl	8007aba <USBD_CtlSendData>
      break;
 80073f6:	e006      	b.n	8007406 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	0011      	movs	r1, r2
 80073fe:	0018      	movs	r0, r3
 8007400:	f000 f87c 	bl	80074fc <USBD_CtlError>
      break;
 8007404:	46c0      	nop			; (mov r8, r8)
  }
}
 8007406:	46c0      	nop			; (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	b002      	add	sp, #8
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	885b      	ldrh	r3, [r3, #2]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d108      	bne.n	8007432 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	23a9      	movs	r3, #169	; 0xa9
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	2101      	movs	r1, #1
 8007428:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	0018      	movs	r0, r3
 800742e:	f000 fbae 	bl	8007b8e <USBD_CtlSendStatus>
  }
}
 8007432:	46c0      	nop			; (mov r8, r8)
 8007434:	46bd      	mov	sp, r7
 8007436:	b002      	add	sp, #8
 8007438:	bd80      	pop	{r7, pc}

0800743a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b082      	sub	sp, #8
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	23a7      	movs	r3, #167	; 0xa7
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	5cd3      	ldrb	r3, [r2, r3]
 800744c:	3b01      	subs	r3, #1
 800744e:	2b02      	cmp	r3, #2
 8007450:	d80d      	bhi.n	800746e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d110      	bne.n	800747c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	23a9      	movs	r3, #169	; 0xa9
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	2100      	movs	r1, #0
 8007462:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	0018      	movs	r0, r3
 8007468:	f000 fb91 	bl	8007b8e <USBD_CtlSendStatus>
      }
      break;
 800746c:	e006      	b.n	800747c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	0011      	movs	r1, r2
 8007474:	0018      	movs	r0, r3
 8007476:	f000 f841 	bl	80074fc <USBD_CtlError>
      break;
 800747a:	e000      	b.n	800747e <USBD_ClrFeature+0x44>
      break;
 800747c:	46c0      	nop			; (mov r8, r8)
  }
}
 800747e:	46c0      	nop			; (mov r8, r8)
 8007480:	46bd      	mov	sp, r7
 8007482:	b002      	add	sp, #8
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
 800748e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	781a      	ldrb	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	785a      	ldrb	r2, [r3, #1]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	3302      	adds	r3, #2
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	b29a      	uxth	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	3303      	adds	r3, #3
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	021b      	lsls	r3, r3, #8
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	18d3      	adds	r3, r2, r3
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	3304      	adds	r3, #4
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	b29a      	uxth	r2, r3
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	3305      	adds	r3, #5
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	021b      	lsls	r3, r3, #8
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	18d3      	adds	r3, r2, r3
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	3306      	adds	r3, #6
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b29a      	uxth	r2, r3
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	3307      	adds	r3, #7
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	18d3      	adds	r3, r2, r3
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	80da      	strh	r2, [r3, #6]

}
 80074f4:	46c0      	nop			; (mov r8, r8)
 80074f6:	46bd      	mov	sp, r7
 80074f8:	b002      	add	sp, #8
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2180      	movs	r1, #128	; 0x80
 800750a:	0018      	movs	r0, r3
 800750c:	f000 feb3 	bl	8008276 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2100      	movs	r1, #0
 8007514:	0018      	movs	r0, r3
 8007516:	f000 feae 	bl	8008276 <USBD_LL_StallEP>
}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	46bd      	mov	sp, r7
 800751e:	b002      	add	sp, #8
 8007520:	bd80      	pop	{r7, pc}

08007522 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007522:	b590      	push	{r4, r7, lr}
 8007524:	b087      	sub	sp, #28
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800752e:	2417      	movs	r4, #23
 8007530:	193b      	adds	r3, r7, r4
 8007532:	2200      	movs	r2, #0
 8007534:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d03c      	beq.n	80075b6 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	0018      	movs	r0, r3
 8007540:	f000 f83d 	bl	80075be <USBD_GetLen>
 8007544:	0003      	movs	r3, r0
 8007546:	3301      	adds	r3, #1
 8007548:	b29b      	uxth	r3, r3
 800754a:	18db      	adds	r3, r3, r3
 800754c:	b29a      	uxth	r2, r3
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007552:	193b      	adds	r3, r7, r4
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	193a      	adds	r2, r7, r4
 8007558:	1c59      	adds	r1, r3, #1
 800755a:	7011      	strb	r1, [r2, #0]
 800755c:	001a      	movs	r2, r3
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	189b      	adds	r3, r3, r2
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	7812      	ldrb	r2, [r2, #0]
 8007566:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007568:	193b      	adds	r3, r7, r4
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	193a      	adds	r2, r7, r4
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	7011      	strb	r1, [r2, #0]
 8007572:	001a      	movs	r2, r3
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	189b      	adds	r3, r3, r2
 8007578:	2203      	movs	r2, #3
 800757a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800757c:	e017      	b.n	80075ae <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	60fa      	str	r2, [r7, #12]
 8007584:	2417      	movs	r4, #23
 8007586:	193a      	adds	r2, r7, r4
 8007588:	7812      	ldrb	r2, [r2, #0]
 800758a:	1939      	adds	r1, r7, r4
 800758c:	1c50      	adds	r0, r2, #1
 800758e:	7008      	strb	r0, [r1, #0]
 8007590:	0011      	movs	r1, r2
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	1852      	adds	r2, r2, r1
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800759a:	193b      	adds	r3, r7, r4
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	193a      	adds	r2, r7, r4
 80075a0:	1c59      	adds	r1, r3, #1
 80075a2:	7011      	strb	r1, [r2, #0]
 80075a4:	001a      	movs	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	189b      	adds	r3, r3, r2
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e3      	bne.n	800757e <USBD_GetString+0x5c>
    }
  }
}
 80075b6:	46c0      	nop			; (mov r8, r8)
 80075b8:	46bd      	mov	sp, r7
 80075ba:	b007      	add	sp, #28
 80075bc:	bd90      	pop	{r4, r7, pc}

080075be <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b084      	sub	sp, #16
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075c6:	230f      	movs	r3, #15
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80075ce:	e008      	b.n	80075e2 <USBD_GetLen+0x24>
  {
    len++;
 80075d0:	210f      	movs	r1, #15
 80075d2:	187b      	adds	r3, r7, r1
 80075d4:	781a      	ldrb	r2, [r3, #0]
 80075d6:	187b      	adds	r3, r7, r1
 80075d8:	3201      	adds	r2, #1
 80075da:	701a      	strb	r2, [r3, #0]
    buf++;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	3301      	adds	r3, #1
 80075e0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1f2      	bne.n	80075d0 <USBD_GetLen+0x12>
  }

  return len;
 80075ea:	230f      	movs	r3, #15
 80075ec:	18fb      	adds	r3, r7, r3
 80075ee:	781b      	ldrb	r3, [r3, #0]
}
 80075f0:	0018      	movs	r0, r3
 80075f2:	46bd      	mov	sp, r7
 80075f4:	b004      	add	sp, #16
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80075f8:	b590      	push	{r4, r7, lr}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	000a      	movs	r2, r1
 8007602:	1cfb      	adds	r3, r7, #3
 8007604:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8007606:	240f      	movs	r4, #15
 8007608:	193b      	adds	r3, r7, r4
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	235c      	movs	r3, #92	; 0x5c
 8007612:	2203      	movs	r2, #3
 8007614:	2181      	movs	r1, #129	; 0x81
 8007616:	f000 fdcc 	bl	80081b2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	235c      	movs	r3, #92	; 0x5c
 8007624:	2203      	movs	r2, #3
 8007626:	2101      	movs	r1, #1
 8007628:	f000 fdc3 	bl	80081b2 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	23b6      	movs	r3, #182	; 0xb6
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	2101      	movs	r1, #1
 8007634:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007636:	2070      	movs	r0, #112	; 0x70
 8007638:	f000 ffa6 	bl	8008588 <malloc>
 800763c:	0003      	movs	r3, r0
 800763e:	0019      	movs	r1, r3
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	23ae      	movs	r3, #174	; 0xae
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	23ae      	movs	r3, #174	; 0xae
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	58d3      	ldr	r3, [r2, r3]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d103      	bne.n	800765c <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 8007654:	193b      	adds	r3, r7, r4
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
 800765a:	e014      	b.n	8007686 <USBD_CUSTOM_HID_Init+0x8e>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	23ae      	movs	r3, #174	; 0xae
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	58d3      	ldr	r3, [r2, r3]
 8007664:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	226c      	movs	r2, #108	; 0x6c
 800766a:	2100      	movs	r1, #0
 800766c:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	23af      	movs	r3, #175	; 0xaf
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	58d3      	ldr	r3, [r2, r3]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	235c      	movs	r3, #92	; 0x5c
 8007680:	2101      	movs	r1, #1
 8007682:	f000 fee1 	bl	8008448 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007686:	230f      	movs	r3, #15
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	781b      	ldrb	r3, [r3, #0]
}
 800768c:	0018      	movs	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	b005      	add	sp, #20
 8007692:	bd90      	pop	{r4, r7, pc}

08007694 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	000a      	movs	r2, r1
 800769e:	1cfb      	adds	r3, r7, #3
 80076a0:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2181      	movs	r1, #129	; 0x81
 80076a6:	0018      	movs	r0, r3
 80076a8:	f000 fdba 	bl	8008220 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2101      	movs	r1, #1
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 fdb2 	bl	8008220 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	23b6      	movs	r3, #182	; 0xb6
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	2100      	movs	r1, #0
 80076c4:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	23ae      	movs	r3, #174	; 0xae
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	58d3      	ldr	r3, [r2, r3]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d011      	beq.n	80076f6 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	23af      	movs	r3, #175	; 0xaf
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	58d3      	ldr	r3, [r2, r3]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	23ae      	movs	r3, #174	; 0xae
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	58d3      	ldr	r3, [r2, r3]
 80076e6:	0018      	movs	r0, r3
 80076e8:	f000 ff58 	bl	800859c <free>
    pdev->pClassData = NULL;
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	23ae      	movs	r3, #174	; 0xae
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	2100      	movs	r1, #0
 80076f4:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 80076f6:	2300      	movs	r3, #0
}
 80076f8:	0018      	movs	r0, r3
 80076fa:	46bd      	mov	sp, r7
 80076fc:	b002      	add	sp, #8
 80076fe:	bd80      	pop	{r7, pc}

08007700 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	23ae      	movs	r3, #174	; 0xae
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	58d3      	ldr	r3, [r2, r3]
 8007712:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007714:	231e      	movs	r3, #30
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	2200      	movs	r2, #0
 800771a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 800771c:	2300      	movs	r3, #0
 800771e:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007720:	230e      	movs	r3, #14
 8007722:	18fb      	adds	r3, r7, r3
 8007724:	2200      	movs	r2, #0
 8007726:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8007728:	2317      	movs	r3, #23
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	2200      	movs	r2, #0
 800772e:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	001a      	movs	r2, r3
 8007736:	2360      	movs	r3, #96	; 0x60
 8007738:	4013      	ands	r3, r2
 800773a:	d044      	beq.n	80077c6 <USBD_CUSTOM_HID_Setup+0xc6>
 800773c:	2b20      	cmp	r3, #32
 800773e:	d000      	beq.n	8007742 <USBD_CUSTOM_HID_Setup+0x42>
 8007740:	e0d8      	b.n	80078f4 <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	785b      	ldrb	r3, [r3, #1]
 8007746:	2b0b      	cmp	r3, #11
 8007748:	d831      	bhi.n	80077ae <USBD_CUSTOM_HID_Setup+0xae>
 800774a:	009a      	lsls	r2, r3, #2
 800774c:	4b72      	ldr	r3, [pc, #456]	; (8007918 <USBD_CUSTOM_HID_Setup+0x218>)
 800774e:	18d3      	adds	r3, r2, r3
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	885b      	ldrh	r3, [r3, #2]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	001a      	movs	r2, r3
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	65da      	str	r2, [r3, #92]	; 0x5c
          break;
 8007760:	e030      	b.n	80077c4 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007762:	693b      	ldr	r3, [r7, #16]
 8007764:	335c      	adds	r3, #92	; 0x5c
 8007766:	0019      	movs	r1, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	0018      	movs	r0, r3
 800776e:	f000 f9a4 	bl	8007aba <USBD_CtlSendData>
          break;
 8007772:	e027      	b.n	80077c4 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	885b      	ldrh	r3, [r3, #2]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	b29b      	uxth	r3, r3
 800777c:	b2db      	uxtb	r3, r3
 800777e:	001a      	movs	r2, r3
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	661a      	str	r2, [r3, #96]	; 0x60
          break;
 8007784:	e01e      	b.n	80077c4 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	3360      	adds	r3, #96	; 0x60
 800778a:	0019      	movs	r1, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2201      	movs	r2, #1
 8007790:	0018      	movs	r0, r3
 8007792:	f000 f992 	bl	8007aba <USBD_CtlSendData>
          break;
 8007796:	e015      	b.n	80077c4 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	2201      	movs	r2, #1
 800779c:	669a      	str	r2, [r3, #104]	; 0x68
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800779e:	6939      	ldr	r1, [r7, #16]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	88da      	ldrh	r2, [r3, #6]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	0018      	movs	r0, r3
 80077a8:	f000 f9ba 	bl	8007b20 <USBD_CtlPrepareRx>
          break;
 80077ac:	e00a      	b.n	80077c4 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	0011      	movs	r1, r2
 80077b4:	0018      	movs	r0, r3
 80077b6:	f7ff fea1 	bl	80074fc <USBD_CtlError>
          ret = USBD_FAIL;
 80077ba:	2317      	movs	r3, #23
 80077bc:	18fb      	adds	r3, r7, r3
 80077be:	2202      	movs	r2, #2
 80077c0:	701a      	strb	r2, [r3, #0]
          break;
 80077c2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80077c4:	e0a1      	b.n	800790a <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	785b      	ldrb	r3, [r3, #1]
 80077ca:	2b0b      	cmp	r3, #11
 80077cc:	d100      	bne.n	80077d0 <USBD_CUSTOM_HID_Setup+0xd0>
 80077ce:	e06d      	b.n	80078ac <USBD_CUSTOM_HID_Setup+0x1ac>
 80077d0:	dd00      	ble.n	80077d4 <USBD_CUSTOM_HID_Setup+0xd4>
 80077d2:	e083      	b.n	80078dc <USBD_CUSTOM_HID_Setup+0x1dc>
 80077d4:	2b0a      	cmp	r3, #10
 80077d6:	d04f      	beq.n	8007878 <USBD_CUSTOM_HID_Setup+0x178>
 80077d8:	dd00      	ble.n	80077dc <USBD_CUSTOM_HID_Setup+0xdc>
 80077da:	e07f      	b.n	80078dc <USBD_CUSTOM_HID_Setup+0x1dc>
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <USBD_CUSTOM_HID_Setup+0xe6>
 80077e0:	2b06      	cmp	r3, #6
 80077e2:	d019      	beq.n	8007818 <USBD_CUSTOM_HID_Setup+0x118>
 80077e4:	e07a      	b.n	80078dc <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	23a7      	movs	r3, #167	; 0xa7
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	5cd3      	ldrb	r3, [r2, r3]
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d107      	bne.n	8007802 <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80077f2:	230e      	movs	r3, #14
 80077f4:	18f9      	adds	r1, r7, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2202      	movs	r2, #2
 80077fa:	0018      	movs	r0, r3
 80077fc:	f000 f95d 	bl	8007aba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007800:	e077      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	0011      	movs	r1, r2
 8007808:	0018      	movs	r0, r3
 800780a:	f7ff fe77 	bl	80074fc <USBD_CtlError>
            ret = USBD_FAIL;
 800780e:	2317      	movs	r3, #23
 8007810:	18fb      	adds	r3, r7, r3
 8007812:	2202      	movs	r2, #2
 8007814:	701a      	strb	r2, [r3, #0]
          break;
 8007816:	e06c      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	885b      	ldrh	r3, [r3, #2]
 800781c:	0a1b      	lsrs	r3, r3, #8
 800781e:	b29b      	uxth	r3, r3
 8007820:	2b22      	cmp	r3, #34	; 0x22
 8007822:	d10f      	bne.n	8007844 <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	88db      	ldrh	r3, [r3, #6]
 8007828:	221e      	movs	r2, #30
 800782a:	18ba      	adds	r2, r7, r2
 800782c:	b299      	uxth	r1, r3
 800782e:	295c      	cmp	r1, #92	; 0x5c
 8007830:	d900      	bls.n	8007834 <USBD_CUSTOM_HID_Setup+0x134>
 8007832:	235c      	movs	r3, #92	; 0x5c
 8007834:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	23af      	movs	r3, #175	; 0xaf
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	58d3      	ldr	r3, [r2, r3]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	e010      	b.n	8007866 <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	885b      	ldrh	r3, [r3, #2]
 8007848:	0a1b      	lsrs	r3, r3, #8
 800784a:	b29b      	uxth	r3, r3
 800784c:	2b21      	cmp	r3, #33	; 0x21
 800784e:	d10a      	bne.n	8007866 <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007850:	4b32      	ldr	r3, [pc, #200]	; (800791c <USBD_CUSTOM_HID_Setup+0x21c>)
 8007852:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	88db      	ldrh	r3, [r3, #6]
 8007858:	221e      	movs	r2, #30
 800785a:	18ba      	adds	r2, r7, r2
 800785c:	b299      	uxth	r1, r3
 800785e:	2909      	cmp	r1, #9
 8007860:	d900      	bls.n	8007864 <USBD_CUSTOM_HID_Setup+0x164>
 8007862:	2309      	movs	r3, #9
 8007864:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007866:	231e      	movs	r3, #30
 8007868:	18fb      	adds	r3, r7, r3
 800786a:	881a      	ldrh	r2, [r3, #0]
 800786c:	69b9      	ldr	r1, [r7, #24]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	0018      	movs	r0, r3
 8007872:	f000 f922 	bl	8007aba <USBD_CtlSendData>
          break;
 8007876:	e03c      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	23a7      	movs	r3, #167	; 0xa7
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	5cd3      	ldrb	r3, [r2, r3]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d108      	bne.n	8007896 <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	3364      	adds	r3, #100	; 0x64
 8007888:	0019      	movs	r1, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	0018      	movs	r0, r3
 8007890:	f000 f913 	bl	8007aba <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007894:	e02d      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	0011      	movs	r1, r2
 800789c:	0018      	movs	r0, r3
 800789e:	f7ff fe2d 	bl	80074fc <USBD_CtlError>
            ret = USBD_FAIL;
 80078a2:	2317      	movs	r3, #23
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	2202      	movs	r2, #2
 80078a8:	701a      	strb	r2, [r3, #0]
          break;
 80078aa:	e022      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	23a7      	movs	r3, #167	; 0xa7
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	5cd3      	ldrb	r3, [r2, r3]
 80078b4:	2b03      	cmp	r3, #3
 80078b6:	d106      	bne.n	80078c6 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	885b      	ldrh	r3, [r3, #2]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	001a      	movs	r2, r3
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	665a      	str	r2, [r3, #100]	; 0x64
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078c4:	e015      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	0011      	movs	r1, r2
 80078cc:	0018      	movs	r0, r3
 80078ce:	f7ff fe15 	bl	80074fc <USBD_CtlError>
            ret = USBD_FAIL;
 80078d2:	2317      	movs	r3, #23
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	2202      	movs	r2, #2
 80078d8:	701a      	strb	r2, [r3, #0]
          break;
 80078da:	e00a      	b.n	80078f2 <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 80078dc:	683a      	ldr	r2, [r7, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	0011      	movs	r1, r2
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7ff fe0a 	bl	80074fc <USBD_CtlError>
          ret = USBD_FAIL;
 80078e8:	2317      	movs	r3, #23
 80078ea:	18fb      	adds	r3, r7, r3
 80078ec:	2202      	movs	r2, #2
 80078ee:	701a      	strb	r2, [r3, #0]
          break;
 80078f0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80078f2:	e00a      	b.n	800790a <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	0011      	movs	r1, r2
 80078fa:	0018      	movs	r0, r3
 80078fc:	f7ff fdfe 	bl	80074fc <USBD_CtlError>
      ret = USBD_FAIL;
 8007900:	2317      	movs	r3, #23
 8007902:	18fb      	adds	r3, r7, r3
 8007904:	2202      	movs	r2, #2
 8007906:	701a      	strb	r2, [r3, #0]
      break;
 8007908:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 800790a:	2317      	movs	r3, #23
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	781b      	ldrb	r3, [r3, #0]
}
 8007910:	0018      	movs	r0, r3
 8007912:	46bd      	mov	sp, r7
 8007914:	b008      	add	sp, #32
 8007916:	bd80      	pop	{r7, pc}
 8007918:	080088b0 	.word	0x080088b0
 800791c:	200000c8 	.word	0x200000c8

08007920 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	1dbb      	adds	r3, r7, #6
 800792c:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	23ae      	movs	r3, #174	; 0xae
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	58d3      	ldr	r3, [r2, r3]
 8007936:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	23a7      	movs	r3, #167	; 0xa7
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	5cd3      	ldrb	r3, [r2, r3]
 8007940:	2b03      	cmp	r3, #3
 8007942:	d112      	bne.n	800796a <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	226c      	movs	r2, #108	; 0x6c
 8007948:	5c9b      	ldrb	r3, [r3, r2]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10b      	bne.n	8007966 <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	226c      	movs	r2, #108	; 0x6c
 8007952:	2101      	movs	r1, #1
 8007954:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007956:	1dbb      	adds	r3, r7, #6
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	68f8      	ldr	r0, [r7, #12]
 800795e:	2181      	movs	r1, #129	; 0x81
 8007960:	f000 fd3b 	bl	80083da <USBD_LL_Transmit>
 8007964:	e001      	b.n	800796a <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	0018      	movs	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	b006      	add	sp, #24
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2229      	movs	r2, #41	; 0x29
 8007980:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007982:	4b02      	ldr	r3, [pc, #8]	; (800798c <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	b002      	add	sp, #8
 800798a:	bd80      	pop	{r7, pc}
 800798c:	20000044 	.word	0x20000044

08007990 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2229      	movs	r2, #41	; 0x29
 800799c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800799e:	4b02      	ldr	r3, [pc, #8]	; (80079a8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 80079a0:	0018      	movs	r0, r3
 80079a2:	46bd      	mov	sp, r7
 80079a4:	b002      	add	sp, #8
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20000070 	.word	0x20000070

080079ac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b082      	sub	sp, #8
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2229      	movs	r2, #41	; 0x29
 80079b8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80079ba:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80079bc:	0018      	movs	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	b002      	add	sp, #8
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	2000009c 	.word	0x2000009c

080079c8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	000a      	movs	r2, r1
 80079d2:	1cfb      	adds	r3, r7, #3
 80079d4:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	23ae      	movs	r3, #174	; 0xae
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	58d3      	ldr	r3, [r2, r3]
 80079de:	226c      	movs	r2, #108	; 0x6c
 80079e0:	2100      	movs	r1, #0
 80079e2:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	0018      	movs	r0, r3
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b002      	add	sp, #8
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b084      	sub	sp, #16
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	000a      	movs	r2, r1
 80079f8:	1cfb      	adds	r3, r7, #3
 80079fa:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	23ae      	movs	r3, #174	; 0xae
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	58d3      	ldr	r3, [r2, r3]
 8007a04:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	23af      	movs	r3, #175	; 0xaf
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	58d3      	ldr	r3, [r2, r3]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	0010      	movs	r0, r2
 8007a14:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	235c      	movs	r3, #92	; 0x5c
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	f000 fd13 	bl	8008448 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007a22:	2300      	movs	r3, #0
}
 8007a24:	0018      	movs	r0, r3
 8007a26:	46bd      	mov	sp, r7
 8007a28:	b004      	add	sp, #16
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	23ae      	movs	r3, #174	; 0xae
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	58d3      	ldr	r3, [r2, r3]
 8007a3c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d10a      	bne.n	8007a5c <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	23af      	movs	r3, #175	; 0xaf
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	58d3      	ldr	r3, [r2, r3]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	0010      	movs	r0, r2
 8007a54:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  return USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	0018      	movs	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	b004      	add	sp, #16
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	220a      	movs	r2, #10
 8007a74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007a76:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8007a78:	0018      	movs	r0, r3
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	b002      	add	sp, #8
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	200000d4 	.word	0x200000d4

08007a84 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007a8e:	200f      	movs	r0, #15
 8007a90:	183b      	adds	r3, r7, r0
 8007a92:	2202      	movs	r2, #2
 8007a94:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d007      	beq.n	8007aac <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	23af      	movs	r3, #175	; 0xaf
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007aa6:	183b      	adds	r3, r7, r0
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007aac:	230f      	movs	r3, #15
 8007aae:	18fb      	adds	r3, r7, r3
 8007ab0:	781b      	ldrb	r3, [r3, #0]
}
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b004      	add	sp, #16
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b084      	sub	sp, #16
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	1dbb      	adds	r3, r7, #6
 8007ac6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	23a5      	movs	r3, #165	; 0xa5
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	2102      	movs	r1, #2
 8007ad0:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007ad2:	1dbb      	adds	r3, r7, #6
 8007ad4:	881a      	ldrh	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007ada:	1dbb      	adds	r3, r7, #6
 8007adc:	881a      	ldrh	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ae2:	1dbb      	adds	r3, r7, #6
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	2100      	movs	r1, #0
 8007aec:	f000 fc75 	bl	80083da <USBD_LL_Transmit>

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	0018      	movs	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	b004      	add	sp, #16
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	1dbb      	adds	r3, r7, #6
 8007b06:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b08:	1dbb      	adds	r3, r7, #6
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	68ba      	ldr	r2, [r7, #8]
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	2100      	movs	r1, #0
 8007b12:	f000 fc62 	bl	80083da <USBD_LL_Transmit>

  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	0018      	movs	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b004      	add	sp, #16
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	1dbb      	adds	r3, r7, #6
 8007b2c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	23a5      	movs	r3, #165	; 0xa5
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	2103      	movs	r1, #3
 8007b36:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8007b38:	1dbb      	adds	r3, r7, #6
 8007b3a:	8819      	ldrh	r1, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	23ae      	movs	r3, #174	; 0xae
 8007b40:	005b      	lsls	r3, r3, #1
 8007b42:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8007b44:	1dbb      	adds	r3, r7, #6
 8007b46:	8819      	ldrh	r1, [r3, #0]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	23b0      	movs	r3, #176	; 0xb0
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b50:	1dbb      	adds	r3, r7, #6
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f000 fc75 	bl	8008448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	0018      	movs	r0, r3
 8007b62:	46bd      	mov	sp, r7
 8007b64:	b004      	add	sp, #16
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	60b9      	str	r1, [r7, #8]
 8007b72:	1dbb      	adds	r3, r7, #6
 8007b74:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b76:	1dbb      	adds	r3, r7, #6
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	2100      	movs	r1, #0
 8007b80:	f000 fc62 	bl	8008448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	0018      	movs	r0, r3
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	b004      	add	sp, #16
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	23a5      	movs	r3, #165	; 0xa5
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	2104      	movs	r1, #4
 8007b9e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	f000 fc17 	bl	80083da <USBD_LL_Transmit>

  return USBD_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	0018      	movs	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b002      	add	sp, #8
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b082      	sub	sp, #8
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	23a5      	movs	r3, #165	; 0xa5
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	2105      	movs	r1, #5
 8007bc6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2200      	movs	r2, #0
 8007bce:	2100      	movs	r1, #0
 8007bd0:	f000 fc3a 	bl	8008448 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b002      	add	sp, #8
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007be4:	4914      	ldr	r1, [pc, #80]	; (8007c38 <MX_USB_DEVICE_Init+0x58>)
 8007be6:	4b15      	ldr	r3, [pc, #84]	; (8007c3c <MX_USB_DEVICE_Init+0x5c>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	0018      	movs	r0, r3
 8007bec:	f7fe fb87 	bl	80062fe <USBD_Init>
 8007bf0:	1e03      	subs	r3, r0, #0
 8007bf2:	d001      	beq.n	8007bf8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007bf4:	f7f8 fd20 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007bf8:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <MX_USB_DEVICE_Init+0x60>)
 8007bfa:	4b10      	ldr	r3, [pc, #64]	; (8007c3c <MX_USB_DEVICE_Init+0x5c>)
 8007bfc:	0011      	movs	r1, r2
 8007bfe:	0018      	movs	r0, r3
 8007c00:	f7fe fbae 	bl	8006360 <USBD_RegisterClass>
 8007c04:	1e03      	subs	r3, r0, #0
 8007c06:	d001      	beq.n	8007c0c <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007c08:	f7f8 fd16 	bl	8000638 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007c0c:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <MX_USB_DEVICE_Init+0x64>)
 8007c0e:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <MX_USB_DEVICE_Init+0x5c>)
 8007c10:	0011      	movs	r1, r2
 8007c12:	0018      	movs	r0, r3
 8007c14:	f7ff ff36 	bl	8007a84 <USBD_CUSTOM_HID_RegisterInterface>
 8007c18:	1e03      	subs	r3, r0, #0
 8007c1a:	d001      	beq.n	8007c20 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8007c1c:	f7f8 fd0c 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <MX_USB_DEVICE_Init+0x5c>)
 8007c22:	0018      	movs	r0, r3
 8007c24:	f7fe fbbc 	bl	80063a0 <USBD_Start>
 8007c28:	1e03      	subs	r3, r0, #0
 8007c2a:	d001      	beq.n	8007c30 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8007c2c:	f7f8 fd04 	bl	8000638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c30:	46c0      	nop			; (mov r8, r8)
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	46c0      	nop			; (mov r8, r8)
 8007c38:	2000014c 	.word	0x2000014c
 8007c3c:	200002b4 	.word	0x200002b4
 8007c40:	2000000c 	.word	0x2000000c
 8007c44:	2000013c 	.word	0x2000013c

08007c48 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007c4c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007c4e:	0018      	movs	r0, r3
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007c58:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t* state)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	memcpy(buffer, state, 0x5c);
 8007c68:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <CUSTOM_HID_OutEvent_FS+0x30>)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	0010      	movs	r0, r2
 8007c6e:	0019      	movs	r1, r3
 8007c70:	235c      	movs	r3, #92	; 0x5c
 8007c72:	001a      	movs	r2, r3
 8007c74:	f000 fc9c 	bl	80085b0 <memcpy>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, 0x5c);
 8007c78:	4905      	ldr	r1, [pc, #20]	; (8007c90 <CUSTOM_HID_OutEvent_FS+0x30>)
 8007c7a:	4b06      	ldr	r3, [pc, #24]	; (8007c94 <CUSTOM_HID_OutEvent_FS+0x34>)
 8007c7c:	225c      	movs	r2, #92	; 0x5c
 8007c7e:	0018      	movs	r0, r3
 8007c80:	f7ff fe4e 	bl	8007920 <USBD_CUSTOM_HID_SendReport>
  return (USBD_OK);
 8007c84:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c86:	0018      	movs	r0, r3
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	b002      	add	sp, #8
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	46c0      	nop			; (mov r8, r8)
 8007c90:	20000578 	.word	0x20000578
 8007c94:	200002b4 	.word	0x200002b4

08007c98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	0002      	movs	r2, r0
 8007ca0:	6039      	str	r1, [r7, #0]
 8007ca2:	1dfb      	adds	r3, r7, #7
 8007ca4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2212      	movs	r2, #18
 8007caa:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007cac:	4b02      	ldr	r3, [pc, #8]	; (8007cb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007cae:	0018      	movs	r0, r3
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	b002      	add	sp, #8
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	46c0      	nop			; (mov r8, r8)
 8007cb8:	20000168 	.word	0x20000168

08007cbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	0002      	movs	r2, r0
 8007cc4:	6039      	str	r1, [r7, #0]
 8007cc6:	1dfb      	adds	r3, r7, #7
 8007cc8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2204      	movs	r2, #4
 8007cce:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cd0:	4b02      	ldr	r3, [pc, #8]	; (8007cdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cd2:	0018      	movs	r0, r3
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b002      	add	sp, #8
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	46c0      	nop			; (mov r8, r8)
 8007cdc:	2000017c 	.word	0x2000017c

08007ce0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	0002      	movs	r2, r0
 8007ce8:	6039      	str	r1, [r7, #0]
 8007cea:	1dfb      	adds	r3, r7, #7
 8007cec:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007cee:	1dfb      	adds	r3, r7, #7
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d106      	bne.n	8007d04 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cf6:	683a      	ldr	r2, [r7, #0]
 8007cf8:	4908      	ldr	r1, [pc, #32]	; (8007d1c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <USBD_FS_ProductStrDescriptor+0x40>)
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	f7ff fc10 	bl	8007522 <USBD_GetString>
 8007d02:	e005      	b.n	8007d10 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	4905      	ldr	r1, [pc, #20]	; (8007d1c <USBD_FS_ProductStrDescriptor+0x3c>)
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <USBD_FS_ProductStrDescriptor+0x40>)
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f7ff fc09 	bl	8007522 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d10:	4b02      	ldr	r3, [pc, #8]	; (8007d1c <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b002      	add	sp, #8
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	46c0      	nop			; (mov r8, r8)
 8007d1c:	200005d4 	.word	0x200005d4
 8007d20:	08008784 	.word	0x08008784

08007d24 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	0002      	movs	r2, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	1dfb      	adds	r3, r7, #7
 8007d30:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4904      	ldr	r1, [pc, #16]	; (8007d48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7ff fbf2 	bl	8007522 <USBD_GetString>
  return USBD_StrDesc;
 8007d3e:	4b02      	ldr	r3, [pc, #8]	; (8007d48 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007d40:	0018      	movs	r0, r3
 8007d42:	46bd      	mov	sp, r7
 8007d44:	b002      	add	sp, #8
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	200005d4 	.word	0x200005d4
 8007d4c:	080087a4 	.word	0x080087a4

08007d50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	0002      	movs	r2, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	1dfb      	adds	r3, r7, #7
 8007d5c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	221a      	movs	r2, #26
 8007d62:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d64:	f000 f84c 	bl	8007e00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d68:	4b02      	ldr	r3, [pc, #8]	; (8007d74 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007d6a:	0018      	movs	r0, r3
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	b002      	add	sp, #8
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	20000180 	.word	0x20000180

08007d78 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b082      	sub	sp, #8
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	0002      	movs	r2, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	1dfb      	adds	r3, r7, #7
 8007d84:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007d86:	1dfb      	adds	r3, r7, #7
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d106      	bne.n	8007d9c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4908      	ldr	r1, [pc, #32]	; (8007db4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007d94:	0018      	movs	r0, r3
 8007d96:	f7ff fbc4 	bl	8007522 <USBD_GetString>
 8007d9a:	e005      	b.n	8007da8 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	4905      	ldr	r1, [pc, #20]	; (8007db4 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007da0:	4b05      	ldr	r3, [pc, #20]	; (8007db8 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007da2:	0018      	movs	r0, r3
 8007da4:	f7ff fbbd 	bl	8007522 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007da8:	4b02      	ldr	r3, [pc, #8]	; (8007db4 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b002      	add	sp, #8
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	200005d4 	.word	0x200005d4
 8007db8:	080087b8 	.word	0x080087b8

08007dbc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b082      	sub	sp, #8
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	0002      	movs	r2, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	1dfb      	adds	r3, r7, #7
 8007dc8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007dca:	1dfb      	adds	r3, r7, #7
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d106      	bne.n	8007de0 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	4908      	ldr	r1, [pc, #32]	; (8007df8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007dd6:	4b09      	ldr	r3, [pc, #36]	; (8007dfc <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007dd8:	0018      	movs	r0, r3
 8007dda:	f7ff fba2 	bl	8007522 <USBD_GetString>
 8007dde:	e005      	b.n	8007dec <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	4905      	ldr	r1, [pc, #20]	; (8007df8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007de4:	4b05      	ldr	r3, [pc, #20]	; (8007dfc <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007de6:	0018      	movs	r0, r3
 8007de8:	f7ff fb9b 	bl	8007522 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007dee:	0018      	movs	r0, r3
 8007df0:	46bd      	mov	sp, r7
 8007df2:	b002      	add	sp, #8
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	200005d4 	.word	0x200005d4
 8007dfc:	080087cc 	.word	0x080087cc

08007e00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <Get_SerialNum+0x48>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e0c:	4b0f      	ldr	r3, [pc, #60]	; (8007e4c <Get_SerialNum+0x4c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <Get_SerialNum+0x50>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	18d3      	adds	r3, r2, r3
 8007e1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e26:	490b      	ldr	r1, [pc, #44]	; (8007e54 <Get_SerialNum+0x54>)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f000 f815 	bl	8007e5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e32:	4909      	ldr	r1, [pc, #36]	; (8007e58 <Get_SerialNum+0x58>)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	2204      	movs	r2, #4
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f000 f80f 	bl	8007e5c <IntToUnicode>
  }
}
 8007e3e:	46c0      	nop			; (mov r8, r8)
 8007e40:	46bd      	mov	sp, r7
 8007e42:	b004      	add	sp, #16
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	1ff80050 	.word	0x1ff80050
 8007e4c:	1ff80054 	.word	0x1ff80054
 8007e50:	1ff80058 	.word	0x1ff80058
 8007e54:	20000182 	.word	0x20000182
 8007e58:	20000192 	.word	0x20000192

08007e5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b086      	sub	sp, #24
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	1dfb      	adds	r3, r7, #7
 8007e68:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007e6a:	2117      	movs	r1, #23
 8007e6c:	187b      	adds	r3, r7, r1
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007e72:	187b      	adds	r3, r7, r1
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
 8007e78:	e02f      	b.n	8007eda <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	0f1b      	lsrs	r3, r3, #28
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d80d      	bhi.n	8007e9e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	0f1b      	lsrs	r3, r3, #28
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	2317      	movs	r3, #23
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	0019      	movs	r1, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	185b      	adds	r3, r3, r1
 8007e96:	3230      	adds	r2, #48	; 0x30
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]
 8007e9c:	e00c      	b.n	8007eb8 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	0f1b      	lsrs	r3, r3, #28
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	2317      	movs	r3, #23
 8007ea6:	18fb      	adds	r3, r7, r3
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	0019      	movs	r1, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	185b      	adds	r3, r3, r1
 8007eb2:	3237      	adds	r2, #55	; 0x37
 8007eb4:	b2d2      	uxtb	r2, r2
 8007eb6:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ebe:	2117      	movs	r1, #23
 8007ec0:	187b      	adds	r3, r7, r1
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	18d3      	adds	r3, r2, r3
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ed0:	187b      	adds	r3, r7, r1
 8007ed2:	781a      	ldrb	r2, [r3, #0]
 8007ed4:	187b      	adds	r3, r7, r1
 8007ed6:	3201      	adds	r2, #1
 8007ed8:	701a      	strb	r2, [r3, #0]
 8007eda:	2317      	movs	r3, #23
 8007edc:	18fa      	adds	r2, r7, r3
 8007ede:	1dfb      	adds	r3, r7, #7
 8007ee0:	7812      	ldrb	r2, [r2, #0]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d3c8      	bcc.n	8007e7a <IntToUnicode+0x1e>
  }
}
 8007ee8:	46c0      	nop			; (mov r8, r8)
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b006      	add	sp, #24
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a0a      	ldr	r2, [pc, #40]	; (8007f2c <HAL_PCD_MspInit+0x38>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10e      	bne.n	8007f24 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007f06:	4b0a      	ldr	r3, [pc, #40]	; (8007f30 <HAL_PCD_MspInit+0x3c>)
 8007f08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f0a:	4b09      	ldr	r3, [pc, #36]	; (8007f30 <HAL_PCD_MspInit+0x3c>)
 8007f0c:	2180      	movs	r1, #128	; 0x80
 8007f0e:	0409      	lsls	r1, r1, #16
 8007f10:	430a      	orrs	r2, r1
 8007f12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2100      	movs	r1, #0
 8007f18:	201f      	movs	r0, #31
 8007f1a:	f7f8 fd91 	bl	8000a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007f1e:	201f      	movs	r0, #31
 8007f20:	f7f8 fda3 	bl	8000a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007f24:	46c0      	nop			; (mov r8, r8)
 8007f26:	46bd      	mov	sp, r7
 8007f28:	b002      	add	sp, #8
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40005c00 	.word	0x40005c00
 8007f30:	40021000 	.word	0x40021000

08007f34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	23bc      	movs	r3, #188	; 0xbc
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	58d2      	ldr	r2, [r2, r3]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	21ac      	movs	r1, #172	; 0xac
 8007f48:	0089      	lsls	r1, r1, #2
 8007f4a:	468c      	mov	ip, r1
 8007f4c:	4463      	add	r3, ip
 8007f4e:	0019      	movs	r1, r3
 8007f50:	0010      	movs	r0, r2
 8007f52:	f7fe fa79 	bl	8006448 <USBD_LL_SetupStage>
}
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	b002      	add	sp, #8
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f5e:	b590      	push	{r4, r7, lr}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
 8007f66:	000a      	movs	r2, r1
 8007f68:	1cfb      	adds	r3, r7, #3
 8007f6a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	23bc      	movs	r3, #188	; 0xbc
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	58d4      	ldr	r4, [r2, r3]
 8007f74:	1cfb      	adds	r3, r7, #3
 8007f76:	781a      	ldrb	r2, [r3, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	23be      	movs	r3, #190	; 0xbe
 8007f7c:	0059      	lsls	r1, r3, #1
 8007f7e:	0013      	movs	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	189b      	adds	r3, r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	18c3      	adds	r3, r0, r3
 8007f88:	185b      	adds	r3, r3, r1
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	1cfb      	adds	r3, r7, #3
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	0019      	movs	r1, r3
 8007f92:	0020      	movs	r0, r4
 8007f94:	f7fe fab6 	bl	8006504 <USBD_LL_DataOutStage>
}
 8007f98:	46c0      	nop			; (mov r8, r8)
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	b003      	add	sp, #12
 8007f9e:	bd90      	pop	{r4, r7, pc}

08007fa0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b082      	sub	sp, #8
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	000a      	movs	r2, r1
 8007faa:	1cfb      	adds	r3, r7, #3
 8007fac:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	23bc      	movs	r3, #188	; 0xbc
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	58d0      	ldr	r0, [r2, r3]
 8007fb6:	1cfb      	adds	r3, r7, #3
 8007fb8:	781a      	ldrb	r2, [r3, #0]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	0013      	movs	r3, r2
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	189b      	adds	r3, r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	18cb      	adds	r3, r1, r3
 8007fc6:	333c      	adds	r3, #60	; 0x3c
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	1cfb      	adds	r3, r7, #3
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	0019      	movs	r1, r3
 8007fd0:	f7fe fb1a 	bl	8006608 <USBD_LL_DataInStage>
}
 8007fd4:	46c0      	nop			; (mov r8, r8)
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	b002      	add	sp, #8
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	23bc      	movs	r3, #188	; 0xbc
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	58d3      	ldr	r3, [r2, r3]
 8007fec:	0018      	movs	r0, r3
 8007fee:	f7fe fc51 	bl	8006894 <USBD_LL_SOF>
}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	b002      	add	sp, #8
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008002:	230f      	movs	r3, #15
 8008004:	18fb      	adds	r3, r7, r3
 8008006:	2201      	movs	r2, #1
 8008008:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d001      	beq.n	8008016 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008012:	f7f8 fb11 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	23bc      	movs	r3, #188	; 0xbc
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	58d2      	ldr	r2, [r2, r3]
 800801e:	230f      	movs	r3, #15
 8008020:	18fb      	adds	r3, r7, r3
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	0019      	movs	r1, r3
 8008026:	0010      	movs	r0, r2
 8008028:	f7fe fbf3 	bl	8006812 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	23bc      	movs	r3, #188	; 0xbc
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	58d3      	ldr	r3, [r2, r3]
 8008034:	0018      	movs	r0, r3
 8008036:	f7fe fba4 	bl	8006782 <USBD_LL_Reset>
}
 800803a:	46c0      	nop			; (mov r8, r8)
 800803c:	46bd      	mov	sp, r7
 800803e:	b004      	add	sp, #16
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	23bc      	movs	r3, #188	; 0xbc
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	58d3      	ldr	r3, [r2, r3]
 8008054:	0018      	movs	r0, r3
 8008056:	f7fe fbed 	bl	8006834 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d005      	beq.n	800806e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <HAL_PCD_SuspendCallback+0x34>)
 8008064:	691a      	ldr	r2, [r3, #16]
 8008066:	4b04      	ldr	r3, [pc, #16]	; (8008078 <HAL_PCD_SuspendCallback+0x34>)
 8008068:	2106      	movs	r1, #6
 800806a:	430a      	orrs	r2, r1
 800806c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800806e:	46c0      	nop			; (mov r8, r8)
 8008070:	46bd      	mov	sp, r7
 8008072:	b002      	add	sp, #8
 8008074:	bd80      	pop	{r7, pc}
 8008076:	46c0      	nop			; (mov r8, r8)
 8008078:	e000ed00 	.word	0xe000ed00

0800807c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d007      	beq.n	800809c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800808c:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <HAL_PCD_ResumeCallback+0x38>)
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <HAL_PCD_ResumeCallback+0x38>)
 8008092:	2106      	movs	r1, #6
 8008094:	438a      	bics	r2, r1
 8008096:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008098:	f000 fa0d 	bl	80084b6 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	23bc      	movs	r3, #188	; 0xbc
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	58d3      	ldr	r3, [r2, r3]
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7fe fbdd 	bl	8006864 <USBD_LL_Resume>
}
 80080aa:	46c0      	nop			; (mov r8, r8)
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b002      	add	sp, #8
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	46c0      	nop			; (mov r8, r8)
 80080b4:	e000ed00 	.word	0xe000ed00

080080b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80080c0:	4a27      	ldr	r2, [pc, #156]	; (8008160 <USBD_LL_Init+0xa8>)
 80080c2:	23bc      	movs	r3, #188	; 0xbc
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	23b0      	movs	r3, #176	; 0xb0
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4923      	ldr	r1, [pc, #140]	; (8008160 <USBD_LL_Init+0xa8>)
 80080d2:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 80080d4:	4b22      	ldr	r3, [pc, #136]	; (8008160 <USBD_LL_Init+0xa8>)
 80080d6:	4a23      	ldr	r2, [pc, #140]	; (8008164 <USBD_LL_Init+0xac>)
 80080d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80080da:	4b21      	ldr	r3, [pc, #132]	; (8008160 <USBD_LL_Init+0xa8>)
 80080dc:	2208      	movs	r2, #8
 80080de:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80080e0:	4b1f      	ldr	r3, [pc, #124]	; (8008160 <USBD_LL_Init+0xa8>)
 80080e2:	2202      	movs	r2, #2
 80080e4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80080e6:	4b1e      	ldr	r3, [pc, #120]	; (8008160 <USBD_LL_Init+0xa8>)
 80080e8:	2202      	movs	r2, #2
 80080ea:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80080ec:	4b1c      	ldr	r3, [pc, #112]	; (8008160 <USBD_LL_Init+0xa8>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80080f2:	4b1b      	ldr	r3, [pc, #108]	; (8008160 <USBD_LL_Init+0xa8>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80080f8:	4b19      	ldr	r3, [pc, #100]	; (8008160 <USBD_LL_Init+0xa8>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80080fe:	4b18      	ldr	r3, [pc, #96]	; (8008160 <USBD_LL_Init+0xa8>)
 8008100:	0018      	movs	r0, r3
 8008102:	f7f8 fe4d 	bl	8000da0 <HAL_PCD_Init>
 8008106:	1e03      	subs	r3, r0, #0
 8008108:	d001      	beq.n	800810e <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800810a:	f7f8 fa95 	bl	8000638 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23b0      	movs	r3, #176	; 0xb0
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58d0      	ldr	r0, [r2, r3]
 8008116:	2318      	movs	r3, #24
 8008118:	2200      	movs	r2, #0
 800811a:	2100      	movs	r1, #0
 800811c:	f7fa fc16 	bl	800294c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	23b0      	movs	r3, #176	; 0xb0
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	58d0      	ldr	r0, [r2, r3]
 8008128:	2358      	movs	r3, #88	; 0x58
 800812a:	2200      	movs	r2, #0
 800812c:	2180      	movs	r1, #128	; 0x80
 800812e:	f7fa fc0d 	bl	800294c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	23b0      	movs	r3, #176	; 0xb0
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	58d0      	ldr	r0, [r2, r3]
 800813a:	2398      	movs	r3, #152	; 0x98
 800813c:	2200      	movs	r2, #0
 800813e:	2181      	movs	r1, #129	; 0x81
 8008140:	f7fa fc04 	bl	800294c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	23b0      	movs	r3, #176	; 0xb0
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	58d0      	ldr	r0, [r2, r3]
 800814c:	23d8      	movs	r3, #216	; 0xd8
 800814e:	2200      	movs	r2, #0
 8008150:	2101      	movs	r1, #1
 8008152:	f7fa fbfb 	bl	800294c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	0018      	movs	r0, r3
 800815a:	46bd      	mov	sp, r7
 800815c:	b002      	add	sp, #8
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200007d4 	.word	0x200007d4
 8008164:	40005c00 	.word	0x40005c00

08008168 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008170:	210f      	movs	r1, #15
 8008172:	187b      	adds	r3, r7, r1
 8008174:	2200      	movs	r2, #0
 8008176:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008178:	260e      	movs	r6, #14
 800817a:	19bb      	adds	r3, r7, r6
 800817c:	2200      	movs	r2, #0
 800817e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	23b0      	movs	r3, #176	; 0xb0
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	58d3      	ldr	r3, [r2, r3]
 8008188:	000d      	movs	r5, r1
 800818a:	187c      	adds	r4, r7, r1
 800818c:	0018      	movs	r0, r3
 800818e:	f7f8 ff17 	bl	8000fc0 <HAL_PCD_Start>
 8008192:	0003      	movs	r3, r0
 8008194:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008196:	19bc      	adds	r4, r7, r6
 8008198:	197b      	adds	r3, r7, r5
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	0018      	movs	r0, r3
 800819e:	f000 f991 	bl	80084c4 <USBD_Get_USB_Status>
 80081a2:	0003      	movs	r3, r0
 80081a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80081a6:	19bb      	adds	r3, r7, r6
 80081a8:	781b      	ldrb	r3, [r3, #0]
}
 80081aa:	0018      	movs	r0, r3
 80081ac:	46bd      	mov	sp, r7
 80081ae:	b005      	add	sp, #20
 80081b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b4:	b085      	sub	sp, #20
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
 80081ba:	000c      	movs	r4, r1
 80081bc:	0010      	movs	r0, r2
 80081be:	0019      	movs	r1, r3
 80081c0:	1cfb      	adds	r3, r7, #3
 80081c2:	1c22      	adds	r2, r4, #0
 80081c4:	701a      	strb	r2, [r3, #0]
 80081c6:	1cbb      	adds	r3, r7, #2
 80081c8:	1c02      	adds	r2, r0, #0
 80081ca:	701a      	strb	r2, [r3, #0]
 80081cc:	003b      	movs	r3, r7
 80081ce:	1c0a      	adds	r2, r1, #0
 80081d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d2:	260f      	movs	r6, #15
 80081d4:	19bb      	adds	r3, r7, r6
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	250e      	movs	r5, #14
 80081dc:	197b      	adds	r3, r7, r5
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	23b0      	movs	r3, #176	; 0xb0
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	58d0      	ldr	r0, [r2, r3]
 80081ea:	19bc      	adds	r4, r7, r6
 80081ec:	1cbb      	adds	r3, r7, #2
 80081ee:	781d      	ldrb	r5, [r3, #0]
 80081f0:	003b      	movs	r3, r7
 80081f2:	881a      	ldrh	r2, [r3, #0]
 80081f4:	1cfb      	adds	r3, r7, #3
 80081f6:	7819      	ldrb	r1, [r3, #0]
 80081f8:	002b      	movs	r3, r5
 80081fa:	f7f9 f8ae 	bl	800135a <HAL_PCD_EP_Open>
 80081fe:	0003      	movs	r3, r0
 8008200:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008202:	250e      	movs	r5, #14
 8008204:	197c      	adds	r4, r7, r5
 8008206:	19bb      	adds	r3, r7, r6
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	0018      	movs	r0, r3
 800820c:	f000 f95a 	bl	80084c4 <USBD_Get_USB_Status>
 8008210:	0003      	movs	r3, r0
 8008212:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008214:	197b      	adds	r3, r7, r5
 8008216:	781b      	ldrb	r3, [r3, #0]
}
 8008218:	0018      	movs	r0, r3
 800821a:	46bd      	mov	sp, r7
 800821c:	b005      	add	sp, #20
 800821e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008220 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008222:	b085      	sub	sp, #20
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	000a      	movs	r2, r1
 800822a:	1cfb      	adds	r3, r7, #3
 800822c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800822e:	210f      	movs	r1, #15
 8008230:	187b      	adds	r3, r7, r1
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008236:	260e      	movs	r6, #14
 8008238:	19bb      	adds	r3, r7, r6
 800823a:	2200      	movs	r2, #0
 800823c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	23b0      	movs	r3, #176	; 0xb0
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	58d2      	ldr	r2, [r2, r3]
 8008246:	000d      	movs	r5, r1
 8008248:	187c      	adds	r4, r7, r1
 800824a:	1cfb      	adds	r3, r7, #3
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	0019      	movs	r1, r3
 8008250:	0010      	movs	r0, r2
 8008252:	f7f9 f8fa 	bl	800144a <HAL_PCD_EP_Close>
 8008256:	0003      	movs	r3, r0
 8008258:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800825a:	19bc      	adds	r4, r7, r6
 800825c:	197b      	adds	r3, r7, r5
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	0018      	movs	r0, r3
 8008262:	f000 f92f 	bl	80084c4 <USBD_Get_USB_Status>
 8008266:	0003      	movs	r3, r0
 8008268:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800826a:	19bb      	adds	r3, r7, r6
 800826c:	781b      	ldrb	r3, [r3, #0]
}
 800826e:	0018      	movs	r0, r3
 8008270:	46bd      	mov	sp, r7
 8008272:	b005      	add	sp, #20
 8008274:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008276 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008276:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	000a      	movs	r2, r1
 8008280:	1cfb      	adds	r3, r7, #3
 8008282:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008284:	210f      	movs	r1, #15
 8008286:	187b      	adds	r3, r7, r1
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800828c:	260e      	movs	r6, #14
 800828e:	19bb      	adds	r3, r7, r6
 8008290:	2200      	movs	r2, #0
 8008292:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	23b0      	movs	r3, #176	; 0xb0
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	58d2      	ldr	r2, [r2, r3]
 800829c:	000d      	movs	r5, r1
 800829e:	187c      	adds	r4, r7, r1
 80082a0:	1cfb      	adds	r3, r7, #3
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	0019      	movs	r1, r3
 80082a6:	0010      	movs	r0, r2
 80082a8:	f7f9 f9ad 	bl	8001606 <HAL_PCD_EP_SetStall>
 80082ac:	0003      	movs	r3, r0
 80082ae:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082b0:	19bc      	adds	r4, r7, r6
 80082b2:	197b      	adds	r3, r7, r5
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	0018      	movs	r0, r3
 80082b8:	f000 f904 	bl	80084c4 <USBD_Get_USB_Status>
 80082bc:	0003      	movs	r3, r0
 80082be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80082c0:	19bb      	adds	r3, r7, r6
 80082c2:	781b      	ldrb	r3, [r3, #0]
}
 80082c4:	0018      	movs	r0, r3
 80082c6:	46bd      	mov	sp, r7
 80082c8:	b005      	add	sp, #20
 80082ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082cc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082ce:	b085      	sub	sp, #20
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	000a      	movs	r2, r1
 80082d6:	1cfb      	adds	r3, r7, #3
 80082d8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082da:	210f      	movs	r1, #15
 80082dc:	187b      	adds	r3, r7, r1
 80082de:	2200      	movs	r2, #0
 80082e0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082e2:	260e      	movs	r6, #14
 80082e4:	19bb      	adds	r3, r7, r6
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	23b0      	movs	r3, #176	; 0xb0
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	58d2      	ldr	r2, [r2, r3]
 80082f2:	000d      	movs	r5, r1
 80082f4:	187c      	adds	r4, r7, r1
 80082f6:	1cfb      	adds	r3, r7, #3
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	0019      	movs	r1, r3
 80082fc:	0010      	movs	r0, r2
 80082fe:	f7f9 f9de 	bl	80016be <HAL_PCD_EP_ClrStall>
 8008302:	0003      	movs	r3, r0
 8008304:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008306:	19bc      	adds	r4, r7, r6
 8008308:	197b      	adds	r3, r7, r5
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	0018      	movs	r0, r3
 800830e:	f000 f8d9 	bl	80084c4 <USBD_Get_USB_Status>
 8008312:	0003      	movs	r3, r0
 8008314:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008316:	19bb      	adds	r3, r7, r6
 8008318:	781b      	ldrb	r3, [r3, #0]
}
 800831a:	0018      	movs	r0, r3
 800831c:	46bd      	mov	sp, r7
 800831e:	b005      	add	sp, #20
 8008320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008322 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	000a      	movs	r2, r1
 800832c:	1cfb      	adds	r3, r7, #3
 800832e:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	23b0      	movs	r3, #176	; 0xb0
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	58d3      	ldr	r3, [r2, r3]
 8008338:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800833a:	1cfb      	adds	r3, r7, #3
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	b25b      	sxtb	r3, r3
 8008340:	2b00      	cmp	r3, #0
 8008342:	da0d      	bge.n	8008360 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008344:	1cfb      	adds	r3, r7, #3
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	227f      	movs	r2, #127	; 0x7f
 800834a:	4013      	ands	r3, r2
 800834c:	68f9      	ldr	r1, [r7, #12]
 800834e:	1c5a      	adds	r2, r3, #1
 8008350:	0013      	movs	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	189b      	adds	r3, r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	18cb      	adds	r3, r1, r3
 800835a:	3302      	adds	r3, #2
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	e00d      	b.n	800837c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008360:	1cfb      	adds	r3, r7, #3
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	227f      	movs	r2, #127	; 0x7f
 8008366:	401a      	ands	r2, r3
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	23b5      	movs	r3, #181	; 0xb5
 800836c:	0059      	lsls	r1, r3, #1
 800836e:	0013      	movs	r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	189b      	adds	r3, r3, r2
 8008374:	00db      	lsls	r3, r3, #3
 8008376:	18c3      	adds	r3, r0, r3
 8008378:	185b      	adds	r3, r3, r1
 800837a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800837c:	0018      	movs	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	b004      	add	sp, #16
 8008382:	bd80      	pop	{r7, pc}

08008384 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008386:	b085      	sub	sp, #20
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
 800838c:	000a      	movs	r2, r1
 800838e:	1cfb      	adds	r3, r7, #3
 8008390:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008392:	210f      	movs	r1, #15
 8008394:	187b      	adds	r3, r7, r1
 8008396:	2200      	movs	r2, #0
 8008398:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800839a:	260e      	movs	r6, #14
 800839c:	19bb      	adds	r3, r7, r6
 800839e:	2200      	movs	r2, #0
 80083a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	23b0      	movs	r3, #176	; 0xb0
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	58d2      	ldr	r2, [r2, r3]
 80083aa:	000d      	movs	r5, r1
 80083ac:	187c      	adds	r4, r7, r1
 80083ae:	1cfb      	adds	r3, r7, #3
 80083b0:	781b      	ldrb	r3, [r3, #0]
 80083b2:	0019      	movs	r1, r3
 80083b4:	0010      	movs	r0, r2
 80083b6:	f7f8 ffa5 	bl	8001304 <HAL_PCD_SetAddress>
 80083ba:	0003      	movs	r3, r0
 80083bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083be:	19bc      	adds	r4, r7, r6
 80083c0:	197b      	adds	r3, r7, r5
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	0018      	movs	r0, r3
 80083c6:	f000 f87d 	bl	80084c4 <USBD_Get_USB_Status>
 80083ca:	0003      	movs	r3, r0
 80083cc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80083ce:	19bb      	adds	r3, r7, r6
 80083d0:	781b      	ldrb	r3, [r3, #0]
}
 80083d2:	0018      	movs	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	b005      	add	sp, #20
 80083d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083dc:	b087      	sub	sp, #28
 80083de:	af00      	add	r7, sp, #0
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	0008      	movs	r0, r1
 80083e4:	607a      	str	r2, [r7, #4]
 80083e6:	0019      	movs	r1, r3
 80083e8:	230b      	movs	r3, #11
 80083ea:	18fb      	adds	r3, r7, r3
 80083ec:	1c02      	adds	r2, r0, #0
 80083ee:	701a      	strb	r2, [r3, #0]
 80083f0:	2408      	movs	r4, #8
 80083f2:	193b      	adds	r3, r7, r4
 80083f4:	1c0a      	adds	r2, r1, #0
 80083f6:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083f8:	2117      	movs	r1, #23
 80083fa:	187b      	adds	r3, r7, r1
 80083fc:	2200      	movs	r2, #0
 80083fe:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008400:	2516      	movs	r5, #22
 8008402:	197b      	adds	r3, r7, r5
 8008404:	2200      	movs	r2, #0
 8008406:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	23b0      	movs	r3, #176	; 0xb0
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	58d0      	ldr	r0, [r2, r3]
 8008410:	193b      	adds	r3, r7, r4
 8008412:	881d      	ldrh	r5, [r3, #0]
 8008414:	000e      	movs	r6, r1
 8008416:	187c      	adds	r4, r7, r1
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	230b      	movs	r3, #11
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	7819      	ldrb	r1, [r3, #0]
 8008420:	002b      	movs	r3, r5
 8008422:	f7f9 f8a7 	bl	8001574 <HAL_PCD_EP_Transmit>
 8008426:	0003      	movs	r3, r0
 8008428:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842a:	2516      	movs	r5, #22
 800842c:	197c      	adds	r4, r7, r5
 800842e:	19bb      	adds	r3, r7, r6
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	0018      	movs	r0, r3
 8008434:	f000 f846 	bl	80084c4 <USBD_Get_USB_Status>
 8008438:	0003      	movs	r3, r0
 800843a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800843c:	197b      	adds	r3, r7, r5
 800843e:	781b      	ldrb	r3, [r3, #0]
}
 8008440:	0018      	movs	r0, r3
 8008442:	46bd      	mov	sp, r7
 8008444:	b007      	add	sp, #28
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008448 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	0008      	movs	r0, r1
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	0019      	movs	r1, r3
 8008456:	230b      	movs	r3, #11
 8008458:	18fb      	adds	r3, r7, r3
 800845a:	1c02      	adds	r2, r0, #0
 800845c:	701a      	strb	r2, [r3, #0]
 800845e:	2408      	movs	r4, #8
 8008460:	193b      	adds	r3, r7, r4
 8008462:	1c0a      	adds	r2, r1, #0
 8008464:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008466:	2117      	movs	r1, #23
 8008468:	187b      	adds	r3, r7, r1
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846e:	2516      	movs	r5, #22
 8008470:	197b      	adds	r3, r7, r5
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	23b0      	movs	r3, #176	; 0xb0
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	58d0      	ldr	r0, [r2, r3]
 800847e:	193b      	adds	r3, r7, r4
 8008480:	881d      	ldrh	r5, [r3, #0]
 8008482:	000e      	movs	r6, r1
 8008484:	187c      	adds	r4, r7, r1
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	230b      	movs	r3, #11
 800848a:	18fb      	adds	r3, r7, r3
 800848c:	7819      	ldrb	r1, [r3, #0]
 800848e:	002b      	movs	r3, r5
 8008490:	f7f9 f82c 	bl	80014ec <HAL_PCD_EP_Receive>
 8008494:	0003      	movs	r3, r0
 8008496:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008498:	2516      	movs	r5, #22
 800849a:	197c      	adds	r4, r7, r5
 800849c:	19bb      	adds	r3, r7, r6
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	0018      	movs	r0, r3
 80084a2:	f000 f80f 	bl	80084c4 <USBD_Get_USB_Status>
 80084a6:	0003      	movs	r3, r0
 80084a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80084aa:	197b      	adds	r3, r7, r5
 80084ac:	781b      	ldrb	r3, [r3, #0]
}
 80084ae:	0018      	movs	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	b007      	add	sp, #28
 80084b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084b6 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80084ba:	f7f7 fffd 	bl	80004b8 <SystemClock_Config>
}
 80084be:	46c0      	nop			; (mov r8, r8)
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	0002      	movs	r2, r0
 80084cc:	1dfb      	adds	r3, r7, #7
 80084ce:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	230f      	movs	r3, #15
 80084d2:	18fb      	adds	r3, r7, r3
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 80084d8:	1dfb      	adds	r3, r7, #7
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d017      	beq.n	8008510 <USBD_Get_USB_Status+0x4c>
 80084e0:	dc1b      	bgt.n	800851a <USBD_Get_USB_Status+0x56>
 80084e2:	2b02      	cmp	r3, #2
 80084e4:	d00f      	beq.n	8008506 <USBD_Get_USB_Status+0x42>
 80084e6:	dc18      	bgt.n	800851a <USBD_Get_USB_Status+0x56>
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <USBD_Get_USB_Status+0x2e>
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d005      	beq.n	80084fc <USBD_Get_USB_Status+0x38>
 80084f0:	e013      	b.n	800851a <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084f2:	230f      	movs	r3, #15
 80084f4:	18fb      	adds	r3, r7, r3
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
    break;
 80084fa:	e013      	b.n	8008524 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084fc:	230f      	movs	r3, #15
 80084fe:	18fb      	adds	r3, r7, r3
 8008500:	2202      	movs	r2, #2
 8008502:	701a      	strb	r2, [r3, #0]
    break;
 8008504:	e00e      	b.n	8008524 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008506:	230f      	movs	r3, #15
 8008508:	18fb      	adds	r3, r7, r3
 800850a:	2201      	movs	r2, #1
 800850c:	701a      	strb	r2, [r3, #0]
    break;
 800850e:	e009      	b.n	8008524 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008510:	230f      	movs	r3, #15
 8008512:	18fb      	adds	r3, r7, r3
 8008514:	2202      	movs	r2, #2
 8008516:	701a      	strb	r2, [r3, #0]
    break;
 8008518:	e004      	b.n	8008524 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800851a:	230f      	movs	r3, #15
 800851c:	18fb      	adds	r3, r7, r3
 800851e:	2202      	movs	r2, #2
 8008520:	701a      	strb	r2, [r3, #0]
    break;
 8008522:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008524:	230f      	movs	r3, #15
 8008526:	18fb      	adds	r3, r7, r3
 8008528:	781b      	ldrb	r3, [r3, #0]
}
 800852a:	0018      	movs	r0, r3
 800852c:	46bd      	mov	sp, r7
 800852e:	b004      	add	sp, #16
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <__errno>:
 8008534:	4b01      	ldr	r3, [pc, #4]	; (800853c <__errno+0x8>)
 8008536:	6818      	ldr	r0, [r3, #0]
 8008538:	4770      	bx	lr
 800853a:	46c0      	nop			; (mov r8, r8)
 800853c:	2000019c 	.word	0x2000019c

08008540 <__libc_init_array>:
 8008540:	b570      	push	{r4, r5, r6, lr}
 8008542:	2600      	movs	r6, #0
 8008544:	4d0c      	ldr	r5, [pc, #48]	; (8008578 <__libc_init_array+0x38>)
 8008546:	4c0d      	ldr	r4, [pc, #52]	; (800857c <__libc_init_array+0x3c>)
 8008548:	1b64      	subs	r4, r4, r5
 800854a:	10a4      	asrs	r4, r4, #2
 800854c:	42a6      	cmp	r6, r4
 800854e:	d109      	bne.n	8008564 <__libc_init_array+0x24>
 8008550:	2600      	movs	r6, #0
 8008552:	f000 f90b 	bl	800876c <_init>
 8008556:	4d0a      	ldr	r5, [pc, #40]	; (8008580 <__libc_init_array+0x40>)
 8008558:	4c0a      	ldr	r4, [pc, #40]	; (8008584 <__libc_init_array+0x44>)
 800855a:	1b64      	subs	r4, r4, r5
 800855c:	10a4      	asrs	r4, r4, #2
 800855e:	42a6      	cmp	r6, r4
 8008560:	d105      	bne.n	800856e <__libc_init_array+0x2e>
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	00b3      	lsls	r3, r6, #2
 8008566:	58eb      	ldr	r3, [r5, r3]
 8008568:	4798      	blx	r3
 800856a:	3601      	adds	r6, #1
 800856c:	e7ee      	b.n	800854c <__libc_init_array+0xc>
 800856e:	00b3      	lsls	r3, r6, #2
 8008570:	58eb      	ldr	r3, [r5, r3]
 8008572:	4798      	blx	r3
 8008574:	3601      	adds	r6, #1
 8008576:	e7f2      	b.n	800855e <__libc_init_array+0x1e>
 8008578:	080088e8 	.word	0x080088e8
 800857c:	080088e8 	.word	0x080088e8
 8008580:	080088e8 	.word	0x080088e8
 8008584:	080088ec 	.word	0x080088ec

08008588 <malloc>:
 8008588:	b510      	push	{r4, lr}
 800858a:	4b03      	ldr	r3, [pc, #12]	; (8008598 <malloc+0x10>)
 800858c:	0001      	movs	r1, r0
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	f000 f86a 	bl	8008668 <_malloc_r>
 8008594:	bd10      	pop	{r4, pc}
 8008596:	46c0      	nop			; (mov r8, r8)
 8008598:	2000019c 	.word	0x2000019c

0800859c <free>:
 800859c:	b510      	push	{r4, lr}
 800859e:	4b03      	ldr	r3, [pc, #12]	; (80085ac <free+0x10>)
 80085a0:	0001      	movs	r1, r0
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	f000 f816 	bl	80085d4 <_free_r>
 80085a8:	bd10      	pop	{r4, pc}
 80085aa:	46c0      	nop			; (mov r8, r8)
 80085ac:	2000019c 	.word	0x2000019c

080085b0 <memcpy>:
 80085b0:	2300      	movs	r3, #0
 80085b2:	b510      	push	{r4, lr}
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d100      	bne.n	80085ba <memcpy+0xa>
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	5ccc      	ldrb	r4, [r1, r3]
 80085bc:	54c4      	strb	r4, [r0, r3]
 80085be:	3301      	adds	r3, #1
 80085c0:	e7f8      	b.n	80085b4 <memcpy+0x4>

080085c2 <memset>:
 80085c2:	0003      	movs	r3, r0
 80085c4:	1882      	adds	r2, r0, r2
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d100      	bne.n	80085cc <memset+0xa>
 80085ca:	4770      	bx	lr
 80085cc:	7019      	strb	r1, [r3, #0]
 80085ce:	3301      	adds	r3, #1
 80085d0:	e7f9      	b.n	80085c6 <memset+0x4>
	...

080085d4 <_free_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	0005      	movs	r5, r0
 80085d8:	2900      	cmp	r1, #0
 80085da:	d010      	beq.n	80085fe <_free_r+0x2a>
 80085dc:	1f0c      	subs	r4, r1, #4
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	da00      	bge.n	80085e6 <_free_r+0x12>
 80085e4:	18e4      	adds	r4, r4, r3
 80085e6:	0028      	movs	r0, r5
 80085e8:	f000 f8ae 	bl	8008748 <__malloc_lock>
 80085ec:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <_free_r+0x90>)
 80085ee:	6813      	ldr	r3, [r2, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d105      	bne.n	8008600 <_free_r+0x2c>
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	6014      	str	r4, [r2, #0]
 80085f8:	0028      	movs	r0, r5
 80085fa:	f000 f8ad 	bl	8008758 <__malloc_unlock>
 80085fe:	bd70      	pop	{r4, r5, r6, pc}
 8008600:	42a3      	cmp	r3, r4
 8008602:	d908      	bls.n	8008616 <_free_r+0x42>
 8008604:	6821      	ldr	r1, [r4, #0]
 8008606:	1860      	adds	r0, r4, r1
 8008608:	4283      	cmp	r3, r0
 800860a:	d1f3      	bne.n	80085f4 <_free_r+0x20>
 800860c:	6818      	ldr	r0, [r3, #0]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	1841      	adds	r1, r0, r1
 8008612:	6021      	str	r1, [r4, #0]
 8008614:	e7ee      	b.n	80085f4 <_free_r+0x20>
 8008616:	001a      	movs	r2, r3
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <_free_r+0x4e>
 800861e:	42a3      	cmp	r3, r4
 8008620:	d9f9      	bls.n	8008616 <_free_r+0x42>
 8008622:	6811      	ldr	r1, [r2, #0]
 8008624:	1850      	adds	r0, r2, r1
 8008626:	42a0      	cmp	r0, r4
 8008628:	d10b      	bne.n	8008642 <_free_r+0x6e>
 800862a:	6820      	ldr	r0, [r4, #0]
 800862c:	1809      	adds	r1, r1, r0
 800862e:	1850      	adds	r0, r2, r1
 8008630:	6011      	str	r1, [r2, #0]
 8008632:	4283      	cmp	r3, r0
 8008634:	d1e0      	bne.n	80085f8 <_free_r+0x24>
 8008636:	6818      	ldr	r0, [r3, #0]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	1841      	adds	r1, r0, r1
 800863c:	6011      	str	r1, [r2, #0]
 800863e:	6053      	str	r3, [r2, #4]
 8008640:	e7da      	b.n	80085f8 <_free_r+0x24>
 8008642:	42a0      	cmp	r0, r4
 8008644:	d902      	bls.n	800864c <_free_r+0x78>
 8008646:	230c      	movs	r3, #12
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	e7d5      	b.n	80085f8 <_free_r+0x24>
 800864c:	6821      	ldr	r1, [r4, #0]
 800864e:	1860      	adds	r0, r4, r1
 8008650:	4283      	cmp	r3, r0
 8008652:	d103      	bne.n	800865c <_free_r+0x88>
 8008654:	6818      	ldr	r0, [r3, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	1841      	adds	r1, r0, r1
 800865a:	6021      	str	r1, [r4, #0]
 800865c:	6063      	str	r3, [r4, #4]
 800865e:	6054      	str	r4, [r2, #4]
 8008660:	e7ca      	b.n	80085f8 <_free_r+0x24>
 8008662:	46c0      	nop			; (mov r8, r8)
 8008664:	20000224 	.word	0x20000224

08008668 <_malloc_r>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	2303      	movs	r3, #3
 800866c:	1ccd      	adds	r5, r1, #3
 800866e:	439d      	bics	r5, r3
 8008670:	3508      	adds	r5, #8
 8008672:	0006      	movs	r6, r0
 8008674:	2d0c      	cmp	r5, #12
 8008676:	d21f      	bcs.n	80086b8 <_malloc_r+0x50>
 8008678:	250c      	movs	r5, #12
 800867a:	42a9      	cmp	r1, r5
 800867c:	d81e      	bhi.n	80086bc <_malloc_r+0x54>
 800867e:	0030      	movs	r0, r6
 8008680:	f000 f862 	bl	8008748 <__malloc_lock>
 8008684:	4925      	ldr	r1, [pc, #148]	; (800871c <_malloc_r+0xb4>)
 8008686:	680a      	ldr	r2, [r1, #0]
 8008688:	0014      	movs	r4, r2
 800868a:	2c00      	cmp	r4, #0
 800868c:	d11a      	bne.n	80086c4 <_malloc_r+0x5c>
 800868e:	4f24      	ldr	r7, [pc, #144]	; (8008720 <_malloc_r+0xb8>)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d104      	bne.n	80086a0 <_malloc_r+0x38>
 8008696:	0021      	movs	r1, r4
 8008698:	0030      	movs	r0, r6
 800869a:	f000 f843 	bl	8008724 <_sbrk_r>
 800869e:	6038      	str	r0, [r7, #0]
 80086a0:	0029      	movs	r1, r5
 80086a2:	0030      	movs	r0, r6
 80086a4:	f000 f83e 	bl	8008724 <_sbrk_r>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d12b      	bne.n	8008704 <_malloc_r+0x9c>
 80086ac:	230c      	movs	r3, #12
 80086ae:	0030      	movs	r0, r6
 80086b0:	6033      	str	r3, [r6, #0]
 80086b2:	f000 f851 	bl	8008758 <__malloc_unlock>
 80086b6:	e003      	b.n	80086c0 <_malloc_r+0x58>
 80086b8:	2d00      	cmp	r5, #0
 80086ba:	dade      	bge.n	800867a <_malloc_r+0x12>
 80086bc:	230c      	movs	r3, #12
 80086be:	6033      	str	r3, [r6, #0]
 80086c0:	2000      	movs	r0, #0
 80086c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c4:	6823      	ldr	r3, [r4, #0]
 80086c6:	1b5b      	subs	r3, r3, r5
 80086c8:	d419      	bmi.n	80086fe <_malloc_r+0x96>
 80086ca:	2b0b      	cmp	r3, #11
 80086cc:	d903      	bls.n	80086d6 <_malloc_r+0x6e>
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	18e4      	adds	r4, r4, r3
 80086d2:	6025      	str	r5, [r4, #0]
 80086d4:	e003      	b.n	80086de <_malloc_r+0x76>
 80086d6:	6863      	ldr	r3, [r4, #4]
 80086d8:	42a2      	cmp	r2, r4
 80086da:	d10e      	bne.n	80086fa <_malloc_r+0x92>
 80086dc:	600b      	str	r3, [r1, #0]
 80086de:	0030      	movs	r0, r6
 80086e0:	f000 f83a 	bl	8008758 <__malloc_unlock>
 80086e4:	0020      	movs	r0, r4
 80086e6:	2207      	movs	r2, #7
 80086e8:	300b      	adds	r0, #11
 80086ea:	1d23      	adds	r3, r4, #4
 80086ec:	4390      	bics	r0, r2
 80086ee:	1ac2      	subs	r2, r0, r3
 80086f0:	4298      	cmp	r0, r3
 80086f2:	d0e6      	beq.n	80086c2 <_malloc_r+0x5a>
 80086f4:	1a1b      	subs	r3, r3, r0
 80086f6:	50a3      	str	r3, [r4, r2]
 80086f8:	e7e3      	b.n	80086c2 <_malloc_r+0x5a>
 80086fa:	6053      	str	r3, [r2, #4]
 80086fc:	e7ef      	b.n	80086de <_malloc_r+0x76>
 80086fe:	0022      	movs	r2, r4
 8008700:	6864      	ldr	r4, [r4, #4]
 8008702:	e7c2      	b.n	800868a <_malloc_r+0x22>
 8008704:	2303      	movs	r3, #3
 8008706:	1cc4      	adds	r4, r0, #3
 8008708:	439c      	bics	r4, r3
 800870a:	42a0      	cmp	r0, r4
 800870c:	d0e1      	beq.n	80086d2 <_malloc_r+0x6a>
 800870e:	1a21      	subs	r1, r4, r0
 8008710:	0030      	movs	r0, r6
 8008712:	f000 f807 	bl	8008724 <_sbrk_r>
 8008716:	1c43      	adds	r3, r0, #1
 8008718:	d1db      	bne.n	80086d2 <_malloc_r+0x6a>
 800871a:	e7c7      	b.n	80086ac <_malloc_r+0x44>
 800871c:	20000224 	.word	0x20000224
 8008720:	20000228 	.word	0x20000228

08008724 <_sbrk_r>:
 8008724:	2300      	movs	r3, #0
 8008726:	b570      	push	{r4, r5, r6, lr}
 8008728:	4d06      	ldr	r5, [pc, #24]	; (8008744 <_sbrk_r+0x20>)
 800872a:	0004      	movs	r4, r0
 800872c:	0008      	movs	r0, r1
 800872e:	602b      	str	r3, [r5, #0]
 8008730:	f7f8 f804 	bl	800073c <_sbrk>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d103      	bne.n	8008740 <_sbrk_r+0x1c>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d000      	beq.n	8008740 <_sbrk_r+0x1c>
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	bd70      	pop	{r4, r5, r6, pc}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	20000ac8 	.word	0x20000ac8

08008748 <__malloc_lock>:
 8008748:	b510      	push	{r4, lr}
 800874a:	4802      	ldr	r0, [pc, #8]	; (8008754 <__malloc_lock+0xc>)
 800874c:	f000 f80c 	bl	8008768 <__retarget_lock_acquire_recursive>
 8008750:	bd10      	pop	{r4, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	20000ad0 	.word	0x20000ad0

08008758 <__malloc_unlock>:
 8008758:	b510      	push	{r4, lr}
 800875a:	4802      	ldr	r0, [pc, #8]	; (8008764 <__malloc_unlock+0xc>)
 800875c:	f000 f805 	bl	800876a <__retarget_lock_release_recursive>
 8008760:	bd10      	pop	{r4, pc}
 8008762:	46c0      	nop			; (mov r8, r8)
 8008764:	20000ad0 	.word	0x20000ad0

08008768 <__retarget_lock_acquire_recursive>:
 8008768:	4770      	bx	lr

0800876a <__retarget_lock_release_recursive>:
 800876a:	4770      	bx	lr

0800876c <_init>:
 800876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876e:	46c0      	nop			; (mov r8, r8)
 8008770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008772:	bc08      	pop	{r3}
 8008774:	469e      	mov	lr, r3
 8008776:	4770      	bx	lr

08008778 <_fini>:
 8008778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800877a:	46c0      	nop			; (mov r8, r8)
 800877c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877e:	bc08      	pop	{r3}
 8008780:	469e      	mov	lr, r3
 8008782:	4770      	bx	lr
