
Simulator_HID_CUSTOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a54  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009b14  08009b14  00019b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c70  08009c70  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009c70  08009c70  00019c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c78  08009c78  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008fc  200001fc  08009e7c  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20000af8  08009e7c  00020af8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cce  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003693  00000000  00000000  00038ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0003c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0003d3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a9  00000000  00000000  0003e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149b5  00000000  00000000  00056539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086ccc  00000000  00000000  0006aeee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003318  00000000  00000000  000f1c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009afc 	.word	0x08009afc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	08009afc 	.word	0x08009afc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b09b      	sub	sp, #108	; 0x6c
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t ADC_VAL[5];
	char msg[80];

	pumahid.hat0 = 0x00;
 80004a2:	4bbf      	ldr	r3, [pc, #764]	; (80007a0 <main+0x304>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	pumahid.hat1 = 0x00;
 80004a8:	4bbd      	ldr	r3, [pc, #756]	; (80007a0 <main+0x304>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	705a      	strb	r2, [r3, #1]
	pumahid.hat2 = 0x00;
 80004ae:	4bbc      	ldr	r3, [pc, #752]	; (80007a0 <main+0x304>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	709a      	strb	r2, [r3, #2]
	pumahid.key3 = 0x00;
 80004b4:	4bba      	ldr	r3, [pc, #744]	; (80007a0 <main+0x304>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	70da      	strb	r2, [r3, #3]
	pumahid.but0 = 0x00;
 80004ba:	4bb9      	ldr	r3, [pc, #740]	; (80007a0 <main+0x304>)
 80004bc:	2200      	movs	r2, #0
 80004be:	711a      	strb	r2, [r3, #4]
	pumahid.but1 = 0x00;
 80004c0:	4bb7      	ldr	r3, [pc, #732]	; (80007a0 <main+0x304>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	715a      	strb	r2, [r3, #5]
	pumahid.but2 = 0x00;
 80004c6:	4bb6      	ldr	r3, [pc, #728]	; (80007a0 <main+0x304>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	719a      	strb	r2, [r3, #6]
	pumahid.but3 = 0x00;
 80004cc:	4bb4      	ldr	r3, [pc, #720]	; (80007a0 <main+0x304>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	71da      	strb	r2, [r3, #7]
	pumahid.x = 0x0000;
 80004d2:	4bb3      	ldr	r3, [pc, #716]	; (80007a0 <main+0x304>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	811a      	strh	r2, [r3, #8]
	pumahid.y = 0x0000;
 80004d8:	4bb1      	ldr	r3, [pc, #708]	; (80007a0 <main+0x304>)
 80004da:	2200      	movs	r2, #0
 80004dc:	815a      	strh	r2, [r3, #10]
	pumahid.z = 0x0000;
 80004de:	4bb0      	ldr	r3, [pc, #704]	; (80007a0 <main+0x304>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	819a      	strh	r2, [r3, #12]
	pumahid.rx = 0x0000;
 80004e4:	4bae      	ldr	r3, [pc, #696]	; (80007a0 <main+0x304>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	81da      	strh	r2, [r3, #14]
	pumahid.ry = 0x0000;
 80004ea:	4bad      	ldr	r3, [pc, #692]	; (80007a0 <main+0x304>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fde6 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 facc 	bl	8000a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 fc14 	bl	8000d24 <MX_GPIO_Init>
  MX_ADC_Init();
 80004fc:	f000 fb42 	bl	8000b84 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000500:	f000 fbe0 	bl	8000cc4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000504:	f008 fd50 	bl	8008fa8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	00d9      	lsls	r1, r3, #3
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	2201      	movs	r2, #1
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fe0b 	bl	800212e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	48a1      	ldr	r0, [pc, #644]	; (80007a4 <main+0x308>)
 800051e:	2200      	movs	r2, #0
 8000520:	0019      	movs	r1, r3
 8000522:	f001 fe04 	bl	800212e <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);		// Calibration de l'ADC
 8000526:	4ba0      	ldr	r3, [pc, #640]	; (80007a8 <main+0x30c>)
 8000528:	2100      	movs	r1, #0
 800052a:	0018      	movs	r0, r3
 800052c:	f001 fae8 	bl	8001b00 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);				// Entrée CH pour le débouncer
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	005b      	lsls	r3, r3, #1
 8000534:	4a9b      	ldr	r2, [pc, #620]	; (80007a4 <main+0x308>)
 8000536:	0019      	movs	r1, r3
 8000538:	0010      	movs	r0, r2
 800053a:	f001 fddb 	bl	80020f4 <HAL_GPIO_ReadPin>
 800053e:	0003      	movs	r3, r0
 8000540:	001a      	movs	r2, r3
 8000542:	4b9a      	ldr	r3, [pc, #616]	; (80007ac <main+0x310>)
 8000544:	701a      	strb	r2, [r3, #0]

	  /******************** LECTURE DES BOUTONS POUSSOIRS ********************/

	  /************ BOUTON SUR MANCHE ************/

	  BP_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);			// Lecture bouton 1
 8000546:	4b97      	ldr	r3, [pc, #604]	; (80007a4 <main+0x308>)
 8000548:	2140      	movs	r1, #64	; 0x40
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fdd2 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000550:	0003      	movs	r3, r0
 8000552:	001a      	movs	r2, r3
 8000554:	4b96      	ldr	r3, [pc, #600]	; (80007b0 <main+0x314>)
 8000556:	701a      	strb	r2, [r3, #0]
	  BP_3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);			// Lecture bouton 3
 8000558:	4b92      	ldr	r3, [pc, #584]	; (80007a4 <main+0x308>)
 800055a:	2120      	movs	r1, #32
 800055c:	0018      	movs	r0, r3
 800055e:	f001 fdc9 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000562:	0003      	movs	r3, r0
 8000564:	001a      	movs	r2, r3
 8000566:	4b93      	ldr	r3, [pc, #588]	; (80007b4 <main+0x318>)
 8000568:	701a      	strb	r2, [r3, #0]
	  hat_east = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);		// Lecture chapeau est
 800056a:	4b8e      	ldr	r3, [pc, #568]	; (80007a4 <main+0x308>)
 800056c:	2110      	movs	r1, #16
 800056e:	0018      	movs	r0, r3
 8000570:	f001 fdc0 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000574:	0003      	movs	r3, r0
 8000576:	001a      	movs	r2, r3
 8000578:	4b8f      	ldr	r3, [pc, #572]	; (80007b8 <main+0x31c>)
 800057a:	701a      	strb	r2, [r3, #0]

	  hat_north = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);		// Lecture chapeau nord
 800057c:	4b89      	ldr	r3, [pc, #548]	; (80007a4 <main+0x308>)
 800057e:	2108      	movs	r1, #8
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fdb7 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000586:	0003      	movs	r3, r0
 8000588:	001a      	movs	r2, r3
 800058a:	4b8c      	ldr	r3, [pc, #560]	; (80007bc <main+0x320>)
 800058c:	701a      	strb	r2, [r3, #0]
	  hat_west = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);		// Lecture chapeau ouest
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	021a      	lsls	r2, r3, #8
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fdab 	bl	80020f4 <HAL_GPIO_ReadPin>
 800059e:	0003      	movs	r3, r0
 80005a0:	001a      	movs	r2, r3
 80005a2:	4b87      	ldr	r3, [pc, #540]	; (80007c0 <main+0x324>)
 80005a4:	701a      	strb	r2, [r3, #0]

	  BP_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);			// Lecture bouton 2
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	009a      	lsls	r2, r3, #2
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd9f 	bl	80020f4 <HAL_GPIO_ReadPin>
 80005b6:	0003      	movs	r3, r0
 80005b8:	001a      	movs	r2, r3
 80005ba:	4b82      	ldr	r3, [pc, #520]	; (80007c4 <main+0x328>)
 80005bc:	701a      	strb	r2, [r3, #0]
	  BP_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);			// Lecture bouton 4
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	005a      	lsls	r2, r3, #1
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	05db      	lsls	r3, r3, #23
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 fd93 	bl	80020f4 <HAL_GPIO_ReadPin>
 80005ce:	0003      	movs	r3, r0
 80005d0:	001a      	movs	r2, r3
 80005d2:	4b7d      	ldr	r3, [pc, #500]	; (80007c8 <main+0x32c>)
 80005d4:	701a      	strb	r2, [r3, #0]
	  hat_south = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);		// Lecture chapeau sud
 80005d6:	2380      	movs	r3, #128	; 0x80
 80005d8:	021b      	lsls	r3, r3, #8
 80005da:	4a72      	ldr	r2, [pc, #456]	; (80007a4 <main+0x308>)
 80005dc:	0019      	movs	r1, r3
 80005de:	0010      	movs	r0, r2
 80005e0:	f001 fd88 	bl	80020f4 <HAL_GPIO_ReadPin>
 80005e4:	0003      	movs	r3, r0
 80005e6:	001a      	movs	r2, r3
 80005e8:	4b78      	ldr	r3, [pc, #480]	; (80007cc <main+0x330>)
 80005ea:	701a      	strb	r2, [r3, #0]

	  /************ BOUTON SUR CONLLECTIVE ************/

	  BP_5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);			// Lecture bouton 5 rouge
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	019b      	lsls	r3, r3, #6
 80005f0:	4a6c      	ldr	r2, [pc, #432]	; (80007a4 <main+0x308>)
 80005f2:	0019      	movs	r1, r3
 80005f4:	0010      	movs	r0, r2
 80005f6:	f001 fd7d 	bl	80020f4 <HAL_GPIO_ReadPin>
 80005fa:	0003      	movs	r3, r0
 80005fc:	001a      	movs	r2, r3
 80005fe:	4b74      	ldr	r3, [pc, #464]	; (80007d0 <main+0x334>)
 8000600:	701a      	strb	r2, [r3, #0]
	  BP_6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);			// Lecture bouton 6 rouge
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	01db      	lsls	r3, r3, #7
 8000606:	4a67      	ldr	r2, [pc, #412]	; (80007a4 <main+0x308>)
 8000608:	0019      	movs	r1, r3
 800060a:	0010      	movs	r0, r2
 800060c:	f001 fd72 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000610:	0003      	movs	r3, r0
 8000612:	001a      	movs	r2, r3
 8000614:	4b6f      	ldr	r3, [pc, #444]	; (80007d4 <main+0x338>)
 8000616:	701a      	strb	r2, [r3, #0]

	  BP_7 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);			// Lecture switch rouge position haut
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	011b      	lsls	r3, r3, #4
 800061c:	4a61      	ldr	r2, [pc, #388]	; (80007a4 <main+0x308>)
 800061e:	0019      	movs	r1, r3
 8000620:	0010      	movs	r0, r2
 8000622:	f001 fd67 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000626:	0003      	movs	r3, r0
 8000628:	001a      	movs	r2, r3
 800062a:	4b6b      	ldr	r3, [pc, #428]	; (80007d8 <main+0x33c>)
 800062c:	701a      	strb	r2, [r3, #0]
	  BP_8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);			// Lecture switch rouge position bas
 800062e:	2380      	movs	r3, #128	; 0x80
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	4a5c      	ldr	r2, [pc, #368]	; (80007a4 <main+0x308>)
 8000634:	0019      	movs	r1, r3
 8000636:	0010      	movs	r0, r2
 8000638:	f001 fd5c 	bl	80020f4 <HAL_GPIO_ReadPin>
 800063c:	0003      	movs	r3, r0
 800063e:	001a      	movs	r2, r3
 8000640:	4b66      	ldr	r3, [pc, #408]	; (80007dc <main+0x340>)
 8000642:	701a      	strb	r2, [r3, #0]

	  BP_20 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);			// Lecture swtich noir config 1 position haut
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <main+0x308>)
 8000646:	2104      	movs	r1, #4
 8000648:	0018      	movs	r0, r3
 800064a:	f001 fd53 	bl	80020f4 <HAL_GPIO_ReadPin>
 800064e:	0003      	movs	r3, r0
 8000650:	001a      	movs	r2, r3
 8000652:	4b63      	ldr	r3, [pc, #396]	; (80007e0 <main+0x344>)
 8000654:	701a      	strb	r2, [r3, #0]
	  BP_11 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);			// Lecture switch noir config 1 position bas
 8000656:	4b53      	ldr	r3, [pc, #332]	; (80007a4 <main+0x308>)
 8000658:	2102      	movs	r1, #2
 800065a:	0018      	movs	r0, r3
 800065c:	f001 fd4a 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000660:	0003      	movs	r3, r0
 8000662:	001a      	movs	r2, r3
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <main+0x348>)
 8000666:	701a      	strb	r2, [r3, #0]
	  BP_21 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);			// Lecture switch noir config 2 position haut
 8000668:	4b4e      	ldr	r3, [pc, #312]	; (80007a4 <main+0x308>)
 800066a:	2101      	movs	r1, #1
 800066c:	0018      	movs	r0, r3
 800066e:	f001 fd41 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000672:	0003      	movs	r3, r0
 8000674:	001a      	movs	r2, r3
 8000676:	4b5c      	ldr	r3, [pc, #368]	; (80007e8 <main+0x34c>)
 8000678:	701a      	strb	r2, [r3, #0]
	  BP_30 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);			// Lecture switch noir config 2 position bas
 800067a:	23a0      	movs	r3, #160	; 0xa0
 800067c:	05db      	lsls	r3, r3, #23
 800067e:	2180      	movs	r1, #128	; 0x80
 8000680:	0018      	movs	r0, r3
 8000682:	f001 fd37 	bl	80020f4 <HAL_GPIO_ReadPin>
 8000686:	0003      	movs	r3, r0
 8000688:	001a      	movs	r2, r3
 800068a:	4b58      	ldr	r3, [pc, #352]	; (80007ec <main+0x350>)
 800068c:	701a      	strb	r2, [r3, #0]

	  /******************** CONVERSION DES DONNEES ANALOGIQUE ********************/

	  HAL_ADC_Start(&hadc);								// Scan des entrées ADC
 800068e:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <main+0x30c>)
 8000690:	0018      	movs	r0, r3
 8000692:	f000 ff1d 	bl	80014d0 <HAL_ADC_Start>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc);					// ADC channel 0
 8000696:	4b44      	ldr	r3, [pc, #272]	; (80007a8 <main+0x30c>)
 8000698:	0018      	movs	r0, r3
 800069a:	f001 f849 	bl	8001730 <HAL_ADC_GetValue>
 800069e:	0002      	movs	r2, r0
 80006a0:	2454      	movs	r4, #84	; 0x54
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	601a      	str	r2, [r3, #0]
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc);					// ADC channel 1
 80006a6:	4b40      	ldr	r3, [pc, #256]	; (80007a8 <main+0x30c>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 f841 	bl	8001730 <HAL_ADC_GetValue>
 80006ae:	0002      	movs	r2, r0
 80006b0:	193b      	adds	r3, r7, r4
 80006b2:	605a      	str	r2, [r3, #4]
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc);					// ADC channel 4
 80006b4:	4b3c      	ldr	r3, [pc, #240]	; (80007a8 <main+0x30c>)
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 f83a 	bl	8001730 <HAL_ADC_GetValue>
 80006bc:	0002      	movs	r2, r0
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	609a      	str	r2, [r3, #8]
	  ADC_VAL[3] = HAL_ADC_GetValue(&hadc);					// ADC channel 5
 80006c2:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <main+0x30c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 f833 	bl	8001730 <HAL_ADC_GetValue>
 80006ca:	0002      	movs	r2, r0
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	60da      	str	r2, [r3, #12]
	  ADC_VAL[4] = HAL_ADC_GetValue(&hadc);					// ADC channel 6
 80006d0:	4b35      	ldr	r3, [pc, #212]	; (80007a8 <main+0x30c>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f001 f82c 	bl	8001730 <HAL_ADC_GetValue>
 80006d8:	0002      	movs	r2, r0
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	611a      	str	r2, [r3, #16]
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);		// Fin de conversion
 80006de:	2301      	movs	r3, #1
 80006e0:	425a      	negs	r2, r3
 80006e2:	4b31      	ldr	r3, [pc, #196]	; (80007a8 <main+0x30c>)
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 ff86 	bl	80015f8 <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc);									// Stop la conversion
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <main+0x30c>)
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 ff42 	bl	8001578 <HAL_ADC_Stop>

	  if (hat_north == 0) pumahid.hat0 = 0x00;				// Appuie sur chapeau nord
 80006f4:	4b31      	ldr	r3, [pc, #196]	; (80007bc <main+0x320>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d103      	bne.n	8000704 <main+0x268>
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <main+0x304>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
 8000702:	e01a      	b.n	800073a <main+0x29e>
	  else if (hat_west == 0) pumahid.hat0 = 0x06;			// Appuie sur chapeau ouest
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <main+0x324>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d103      	bne.n	8000714 <main+0x278>
 800070c:	4b24      	ldr	r3, [pc, #144]	; (80007a0 <main+0x304>)
 800070e:	2206      	movs	r2, #6
 8000710:	701a      	strb	r2, [r3, #0]
 8000712:	e012      	b.n	800073a <main+0x29e>
	  else if (hat_east == 0) pumahid.hat0 = 0x02;			// Appuie sur chapeau est
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <main+0x31c>)
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d103      	bne.n	8000724 <main+0x288>
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <main+0x304>)
 800071e:	2202      	movs	r2, #2
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e00a      	b.n	800073a <main+0x29e>
	  else if (hat_south == 0) pumahid.hat0 = 0x04;			// Appuie sur chapeau sud
 8000724:	4b29      	ldr	r3, [pc, #164]	; (80007cc <main+0x330>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d103      	bne.n	8000734 <main+0x298>
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <main+0x304>)
 800072e:	2204      	movs	r2, #4
 8000730:	701a      	strb	r2, [r3, #0]
 8000732:	e002      	b.n	800073a <main+0x29e>
	  else pumahid.hat0 = 0x07;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <main+0x304>)
 8000736:	2207      	movs	r2, #7
 8000738:	701a      	strb	r2, [r3, #0]

	  if (BP_1 == 0) pumahid.but0 = 0x01;					// Appuie sur bouton 1
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <main+0x314>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d103      	bne.n	800074a <main+0x2ae>
 8000742:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <main+0x304>)
 8000744:	2201      	movs	r2, #1
 8000746:	711a      	strb	r2, [r3, #4]
 8000748:	e01a      	b.n	8000780 <main+0x2e4>
	  else if (BP_3 == 0) pumahid.but0 = 0x02;				// Appuie sur bouton 3
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <main+0x318>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d103      	bne.n	800075a <main+0x2be>
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <main+0x304>)
 8000754:	2202      	movs	r2, #2
 8000756:	711a      	strb	r2, [r3, #4]
 8000758:	e012      	b.n	8000780 <main+0x2e4>
	  else if (BP_2 == 0) pumahid.but0 = 0x04;				// Appuie sur bouton 2
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <main+0x328>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d103      	bne.n	800076a <main+0x2ce>
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <main+0x304>)
 8000764:	2204      	movs	r2, #4
 8000766:	711a      	strb	r2, [r3, #4]
 8000768:	e00a      	b.n	8000780 <main+0x2e4>
	  else if (BP_4 == 0) pumahid.but0 = 0X08;				// Appuie sur bouton 4
 800076a:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <main+0x32c>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <main+0x2de>
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <main+0x304>)
 8000774:	2208      	movs	r2, #8
 8000776:	711a      	strb	r2, [r3, #4]
 8000778:	e002      	b.n	8000780 <main+0x2e4>
	  else pumahid.but0 = 0x10;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <main+0x304>)
 800077c:	2210      	movs	r2, #16
 800077e:	711a      	strb	r2, [r3, #4]

	  if (BP_5 == 0) pumahid.but1 = 0x01;					// Appuie sur bouton 5
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0x334>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d103      	bne.n	8000790 <main+0x2f4>
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <main+0x304>)
 800078a:	2201      	movs	r2, #1
 800078c:	715a      	strb	r2, [r3, #5]
 800078e:	e032      	b.n	80007f6 <main+0x35a>
	  else if (BP_6 == 0) pumahid.but1 = 0x02;				// Appuie sur bouton 6
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <main+0x338>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d12b      	bne.n	80007f0 <main+0x354>
 8000798:	4b01      	ldr	r3, [pc, #4]	; (80007a0 <main+0x304>)
 800079a:	2202      	movs	r2, #2
 800079c:	715a      	strb	r2, [r3, #5]
 800079e:	e02a      	b.n	80007f6 <main+0x35a>
 80007a0:	20000238 	.word	0x20000238
 80007a4:	50000400 	.word	0x50000400
 80007a8:	200002d0 	.word	0x200002d0
 80007ac:	2000022a 	.word	0x2000022a
 80007b0:	20000231 	.word	0x20000231
 80007b4:	20000236 	.word	0x20000236
 80007b8:	2000022d 	.word	0x2000022d
 80007bc:	20000235 	.word	0x20000235
 80007c0:	2000024a 	.word	0x2000024a
 80007c4:	2000022c 	.word	0x2000022c
 80007c8:	2000022e 	.word	0x2000022e
 80007cc:	20000232 	.word	0x20000232
 80007d0:	20000230 	.word	0x20000230
 80007d4:	20000228 	.word	0x20000228
 80007d8:	20000229 	.word	0x20000229
 80007dc:	2000024b 	.word	0x2000024b
 80007e0:	2000022f 	.word	0x2000022f
 80007e4:	2000022b 	.word	0x2000022b
 80007e8:	20000233 	.word	0x20000233
 80007ec:	20000234 	.word	0x20000234
	  else pumahid.but1 = 0x04;
 80007f0:	4b9a      	ldr	r3, [pc, #616]	; (8000a5c <main+0x5c0>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	715a      	strb	r2, [r3, #5]


	  if (BP_7 == 0)
 80007f6:	4b9a      	ldr	r3, [pc, #616]	; (8000a60 <main+0x5c4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10d      	bne.n	800081a <main+0x37e>
	  {
		  if (BP_11 == 0) pumahid.but2 = 0x01;
 80007fe:	4b99      	ldr	r3, [pc, #612]	; (8000a64 <main+0x5c8>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <main+0x370>
 8000806:	4b95      	ldr	r3, [pc, #596]	; (8000a5c <main+0x5c0>)
 8000808:	2201      	movs	r2, #1
 800080a:	719a      	strb	r2, [r3, #6]
		  if (BP_20 == 0) pumahid.but2 = 0x02; // À revoir
 800080c:	4b96      	ldr	r3, [pc, #600]	; (8000a68 <main+0x5cc>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <main+0x37e>
 8000814:	4b91      	ldr	r3, [pc, #580]	; (8000a5c <main+0x5c0>)
 8000816:	2202      	movs	r2, #2
 8000818:	719a      	strb	r2, [r3, #6]
	  else if (BP_21 == 1) pumahid.but3 = 3;
	  else if (BP_30 == 1) pumahid.but3 = 4;
	  else pumahid.but3 = 5;*/


	  ADC_VAL[0] -= 1725;											// AXE X
 800081a:	2154      	movs	r1, #84	; 0x54
 800081c:	187b      	adds	r3, r7, r1
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a92      	ldr	r2, [pc, #584]	; (8000a6c <main+0x5d0>)
 8000822:	189a      	adds	r2, r3, r2
 8000824:	187b      	adds	r3, r7, r1
 8000826:	601a      	str	r2, [r3, #0]
	  if (ADC_VAL[0] < 0 | ADC_VAL[0] > 60000) ADC_VAL[0] = 0;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a90      	ldr	r2, [pc, #576]	; (8000a70 <main+0x5d4>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d902      	bls.n	8000838 <main+0x39c>
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
	  ADC_VAL[0] = (ADC_VAL[0]*255)/511;
 8000838:	2454      	movs	r4, #84	; 0x54
 800083a:	193b      	adds	r3, r7, r4
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	0013      	movs	r3, r2
 8000840:	021b      	lsls	r3, r3, #8
 8000842:	1a9b      	subs	r3, r3, r2
 8000844:	498b      	ldr	r1, [pc, #556]	; (8000a74 <main+0x5d8>)
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff fc5e 	bl	8000108 <__udivsi3>
 800084c:	0003      	movs	r3, r0
 800084e:	001a      	movs	r2, r3
 8000850:	193b      	adds	r3, r7, r4
 8000852:	601a      	str	r2, [r3, #0]
	  if (ADC_VAL[0] > 255 & ADC_VAL[0] < 50000) ADC_VAL[0] = 255;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	22ff      	movs	r2, #255	; 0xff
 800085a:	429a      	cmp	r2, r3
 800085c:	419b      	sbcs	r3, r3
 800085e:	425b      	negs	r3, r3
 8000860:	b2da      	uxtb	r2, r3
 8000862:	193b      	adds	r3, r7, r4
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	4884      	ldr	r0, [pc, #528]	; (8000a78 <main+0x5dc>)
 8000868:	2300      	movs	r3, #0
 800086a:	4288      	cmp	r0, r1
 800086c:	415b      	adcs	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	4013      	ands	r3, r2
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b00      	cmp	r3, #0
 8000876:	d002      	beq.n	800087e <main+0x3e2>
 8000878:	193b      	adds	r3, r7, r4
 800087a:	22ff      	movs	r2, #255	; 0xff
 800087c:	601a      	str	r2, [r3, #0]

	  ADC_VAL[1] -= 1766;											// AXE Y
 800087e:	2154      	movs	r1, #84	; 0x54
 8000880:	187b      	adds	r3, r7, r1
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	4a7d      	ldr	r2, [pc, #500]	; (8000a7c <main+0x5e0>)
 8000886:	189a      	adds	r2, r3, r2
 8000888:	187b      	adds	r3, r7, r1
 800088a:	605a      	str	r2, [r3, #4]
	  if (ADC_VAL[1] < 0 | ADC_VAL[1] > 60000) ADC_VAL[1] = 0;
 800088c:	187b      	adds	r3, r7, r1
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	4a77      	ldr	r2, [pc, #476]	; (8000a70 <main+0x5d4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d902      	bls.n	800089c <main+0x400>
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
	  ADC_VAL[1] = (ADC_VAL[1]*255)/490;
 800089c:	2454      	movs	r4, #84	; 0x54
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	0013      	movs	r3, r2
 80008a4:	021b      	lsls	r3, r3, #8
 80008a6:	1a9b      	subs	r3, r3, r2
 80008a8:	22f5      	movs	r2, #245	; 0xf5
 80008aa:	0051      	lsls	r1, r2, #1
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fc2b 	bl	8000108 <__udivsi3>
 80008b2:	0003      	movs	r3, r0
 80008b4:	001a      	movs	r2, r3
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	605a      	str	r2, [r3, #4]
	  if (ADC_VAL[1] > 255 & ADC_VAL[1] < 50000) ADC_VAL[1] = 255;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	22ff      	movs	r2, #255	; 0xff
 80008c0:	429a      	cmp	r2, r3
 80008c2:	419b      	sbcs	r3, r3
 80008c4:	425b      	negs	r3, r3
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	6859      	ldr	r1, [r3, #4]
 80008cc:	486a      	ldr	r0, [pc, #424]	; (8000a78 <main+0x5dc>)
 80008ce:	2300      	movs	r3, #0
 80008d0:	4288      	cmp	r0, r1
 80008d2:	415b      	adcs	r3, r3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4013      	ands	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <main+0x448>
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	22ff      	movs	r2, #255	; 0xff
 80008e2:	605a      	str	r2, [r3, #4]

	  ADC_VAL[2] -= 1850;											// COLLECTIVE AXE Z
 80008e4:	2154      	movs	r1, #84	; 0x54
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	4a65      	ldr	r2, [pc, #404]	; (8000a80 <main+0x5e4>)
 80008ec:	189a      	adds	r2, r3, r2
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	609a      	str	r2, [r3, #8]
	  if (ADC_VAL[2] < 0 | ADC_VAL[2] > 60000) ADC_VAL[2] = 0;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	4a5e      	ldr	r2, [pc, #376]	; (8000a70 <main+0x5d4>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d902      	bls.n	8000902 <main+0x466>
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
	  ADC_VAL[2] = (ADC_VAL[2]*255)/700;
 8000902:	2454      	movs	r4, #84	; 0x54
 8000904:	193b      	adds	r3, r7, r4
 8000906:	689a      	ldr	r2, [r3, #8]
 8000908:	0013      	movs	r3, r2
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	1a9b      	subs	r3, r3, r2
 800090e:	22af      	movs	r2, #175	; 0xaf
 8000910:	0091      	lsls	r1, r2, #2
 8000912:	0018      	movs	r0, r3
 8000914:	f7ff fbf8 	bl	8000108 <__udivsi3>
 8000918:	0003      	movs	r3, r0
 800091a:	001a      	movs	r2, r3
 800091c:	193b      	adds	r3, r7, r4
 800091e:	609a      	str	r2, [r3, #8]
	  if (ADC_VAL[2] > 255 & ADC_VAL[2] < 50000) ADC_VAL[2] = 255;
 8000920:	193b      	adds	r3, r7, r4
 8000922:	689b      	ldr	r3, [r3, #8]
 8000924:	22ff      	movs	r2, #255	; 0xff
 8000926:	429a      	cmp	r2, r3
 8000928:	419b      	sbcs	r3, r3
 800092a:	425b      	negs	r3, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	193b      	adds	r3, r7, r4
 8000930:	6899      	ldr	r1, [r3, #8]
 8000932:	4851      	ldr	r0, [pc, #324]	; (8000a78 <main+0x5dc>)
 8000934:	2300      	movs	r3, #0
 8000936:	4288      	cmp	r0, r1
 8000938:	415b      	adcs	r3, r3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4013      	ands	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	d002      	beq.n	800094a <main+0x4ae>
 8000944:	193b      	adds	r3, r7, r4
 8000946:	22ff      	movs	r2, #255	; 0xff
 8000948:	609a      	str	r2, [r3, #8]

	  ADC_VAL[3] -= 3912;											// PEDAL X ROTATION
 800094a:	2154      	movs	r1, #84	; 0x54
 800094c:	187b      	adds	r3, r7, r1
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a4c      	ldr	r2, [pc, #304]	; (8000a84 <main+0x5e8>)
 8000952:	189a      	adds	r2, r3, r2
 8000954:	187b      	adds	r3, r7, r1
 8000956:	60da      	str	r2, [r3, #12]
	  if (ADC_VAL[3] < 0 | ADC_VAL[3] > 60000) ADC_VAL[3] = 0;
 8000958:	187b      	adds	r3, r7, r1
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a44      	ldr	r2, [pc, #272]	; (8000a70 <main+0x5d4>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d902      	bls.n	8000968 <main+0x4cc>
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
	  ADC_VAL[3] = (ADC_VAL[3]*255)/38;
 8000968:	2454      	movs	r4, #84	; 0x54
 800096a:	193b      	adds	r3, r7, r4
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	0013      	movs	r3, r2
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	1a9b      	subs	r3, r3, r2
 8000974:	2126      	movs	r1, #38	; 0x26
 8000976:	0018      	movs	r0, r3
 8000978:	f7ff fbc6 	bl	8000108 <__udivsi3>
 800097c:	0003      	movs	r3, r0
 800097e:	001a      	movs	r2, r3
 8000980:	193b      	adds	r3, r7, r4
 8000982:	60da      	str	r2, [r3, #12]
	  if (ADC_VAL[3] > 255 & ADC_VAL[3] < 50000) ADC_VAL[3] = 255;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	22ff      	movs	r2, #255	; 0xff
 800098a:	429a      	cmp	r2, r3
 800098c:	419b      	sbcs	r3, r3
 800098e:	425b      	negs	r3, r3
 8000990:	b2da      	uxtb	r2, r3
 8000992:	193b      	adds	r3, r7, r4
 8000994:	68d9      	ldr	r1, [r3, #12]
 8000996:	4838      	ldr	r0, [pc, #224]	; (8000a78 <main+0x5dc>)
 8000998:	2300      	movs	r3, #0
 800099a:	4288      	cmp	r0, r1
 800099c:	415b      	adcs	r3, r3
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	4013      	ands	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <main+0x512>
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	22ff      	movs	r2, #255	; 0xff
 80009ac:	60da      	str	r2, [r3, #12]

	  ADC_VAL[4] -= 2264;											// COLLECTIVE Y ROTATION
 80009ae:	2154      	movs	r1, #84	; 0x54
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	691b      	ldr	r3, [r3, #16]
 80009b4:	4a34      	ldr	r2, [pc, #208]	; (8000a88 <main+0x5ec>)
 80009b6:	189a      	adds	r2, r3, r2
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	611a      	str	r2, [r3, #16]
	  if (ADC_VAL[4] < 0 | ADC_VAL[4] > 60000) ADC_VAL[4] = 0;
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	4a2b      	ldr	r2, [pc, #172]	; (8000a70 <main+0x5d4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d902      	bls.n	80009cc <main+0x530>
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
	  ADC_VAL[4] = (ADC_VAL[4]*255)/104;
 80009cc:	2454      	movs	r4, #84	; 0x54
 80009ce:	193b      	adds	r3, r7, r4
 80009d0:	691a      	ldr	r2, [r3, #16]
 80009d2:	0013      	movs	r3, r2
 80009d4:	021b      	lsls	r3, r3, #8
 80009d6:	1a9b      	subs	r3, r3, r2
 80009d8:	2168      	movs	r1, #104	; 0x68
 80009da:	0018      	movs	r0, r3
 80009dc:	f7ff fb94 	bl	8000108 <__udivsi3>
 80009e0:	0003      	movs	r3, r0
 80009e2:	001a      	movs	r2, r3
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	611a      	str	r2, [r3, #16]
	  if (ADC_VAL[4] > 255 & ADC_VAL[4] < 50000) ADC_VAL[4] = 255;
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	691b      	ldr	r3, [r3, #16]
 80009ec:	22ff      	movs	r2, #255	; 0xff
 80009ee:	429a      	cmp	r2, r3
 80009f0:	419b      	sbcs	r3, r3
 80009f2:	425b      	negs	r3, r3
 80009f4:	b2da      	uxtb	r2, r3
 80009f6:	193b      	adds	r3, r7, r4
 80009f8:	6919      	ldr	r1, [r3, #16]
 80009fa:	481f      	ldr	r0, [pc, #124]	; (8000a78 <main+0x5dc>)
 80009fc:	2300      	movs	r3, #0
 80009fe:	4288      	cmp	r0, r1
 8000a00:	415b      	adcs	r3, r3
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	4013      	ands	r3, r2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d002      	beq.n	8000a12 <main+0x576>
 8000a0c:	193b      	adds	r3, r7, r4
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	611a      	str	r2, [r3, #16]

	  /*********** Attribution des valeurs analogiques aux différents axes ***********/

	  pumahid.x = ADC_VAL[0];
 8000a12:	2154      	movs	r1, #84	; 0x54
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b29a      	uxth	r2, r3
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <main+0x5c0>)
 8000a1c:	811a      	strh	r2, [r3, #8]
	  pumahid.y = ADC_VAL[1];
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <main+0x5c0>)
 8000a26:	815a      	strh	r2, [r3, #10]
	  pumahid.z = ADC_VAL[2];
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <main+0x5c0>)
 8000a30:	819a      	strh	r2, [r3, #12]
	  pumahid.rx = ADC_VAL[3];
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <main+0x5c0>)
 8000a3a:	81da      	strh	r2, [r3, #14]
	  pumahid.ry = ADC_VAL[4];
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	691b      	ldr	r3, [r3, #16]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <main+0x5c0>)
 8000a44:	821a      	strh	r2, [r3, #16]

	  /*********** Envoie des valeurs par USB ***********/
	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));
 8000a46:	4905      	ldr	r1, [pc, #20]	; (8000a5c <main+0x5c0>)
 8000a48:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <main+0x5f0>)
 8000a4a:	2212      	movs	r2, #18
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f006 ffcf 	bl	80079f0 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(10);
 8000a52:	200a      	movs	r0, #10
 8000a54:	f000 fba4 	bl	80011a0 <HAL_Delay>
	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);				// Entrée CH pour le débouncer
 8000a58:	e56a      	b.n	8000530 <main+0x94>
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	20000238 	.word	0x20000238
 8000a60:	20000229 	.word	0x20000229
 8000a64:	2000022b 	.word	0x2000022b
 8000a68:	2000022f 	.word	0x2000022f
 8000a6c:	fffff943 	.word	0xfffff943
 8000a70:	0000ea60 	.word	0x0000ea60
 8000a74:	000001ff 	.word	0x000001ff
 8000a78:	0000c34f 	.word	0x0000c34f
 8000a7c:	fffff91a 	.word	0xfffff91a
 8000a80:	fffff8c6 	.word	0xfffff8c6
 8000a84:	fffff0b8 	.word	0xfffff0b8
 8000a88:	fffff728 	.word	0xfffff728
 8000a8c:	20000330 	.word	0x20000330

08000a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a90:	b590      	push	{r4, r7, lr}
 8000a92:	b09f      	sub	sp, #124	; 0x7c
 8000a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a96:	2440      	movs	r4, #64	; 0x40
 8000a98:	193b      	adds	r3, r7, r4
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	2338      	movs	r3, #56	; 0x38
 8000a9e:	001a      	movs	r2, r3
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	f008 ff57 	bl	8009954 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa6:	232c      	movs	r3, #44	; 0x2c
 8000aa8:	18fb      	adds	r3, r7, r3
 8000aaa:	0018      	movs	r0, r3
 8000aac:	2314      	movs	r3, #20
 8000aae:	001a      	movs	r2, r3
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	f008 ff4f 	bl	8009954 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	0018      	movs	r0, r3
 8000aba:	2328      	movs	r3, #40	; 0x28
 8000abc:	001a      	movs	r2, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	f008 ff48 	bl	8009954 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <SystemClock_Config+0xec>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a2d      	ldr	r2, [pc, #180]	; (8000b80 <SystemClock_Config+0xf0>)
 8000aca:	401a      	ands	r2, r3
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <SystemClock_Config+0xec>)
 8000ace:	2180      	movs	r1, #128	; 0x80
 8000ad0:	0109      	lsls	r1, r1, #4
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000ad6:	0021      	movs	r1, r4
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2222      	movs	r2, #34	; 0x22
 8000adc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2201      	movs	r2, #1
 8000aee:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2202      	movs	r2, #2
 8000af4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	02d2      	lsls	r2, r2, #11
 8000b02:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2280      	movs	r2, #128	; 0x80
 8000b08:	03d2      	lsls	r2, r2, #15
 8000b0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f003 f984 	bl	8003e1c <HAL_RCC_OscConfig>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b18:	f000 f9ae 	bl	8000e78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	212c      	movs	r1, #44	; 0x2c
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	220f      	movs	r2, #15
 8000b22:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2203      	movs	r2, #3
 8000b28:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2101      	movs	r1, #1
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 fd3f 	bl	80045c4 <HAL_RCC_ClockConfig>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b4a:	f000 f995 	bl	8000e78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000b4e:	1d3b      	adds	r3, r7, #4
 8000b50:	2242      	movs	r2, #66	; 0x42
 8000b52:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	04d2      	lsls	r2, r2, #19
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	0018      	movs	r0, r3
 8000b66:	f003 ff51 	bl	8004a0c <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000b6e:	f000 f983 	bl	8000e78 <Error_Handler>
  }
}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b01f      	add	sp, #124	; 0x7c
 8000b78:	bd90      	pop	{r4, r7, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	40007000 	.word	0x40007000
 8000b80:	ffffe7ff 	.word	0xffffe7ff

08000b84 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2308      	movs	r3, #8
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f008 fede 	bl	8009954 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b98:	4b44      	ldr	r3, [pc, #272]	; (8000cac <MX_ADC_Init+0x128>)
 8000b9a:	4a45      	ldr	r2, [pc, #276]	; (8000cb0 <MX_ADC_Init+0x12c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b9e:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_ADC_Init+0x128>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ba4:	4b41      	ldr	r3, [pc, #260]	; (8000cac <MX_ADC_Init+0x128>)
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	05d2      	lsls	r2, r2, #23
 8000baa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bac:	4b3f      	ldr	r3, [pc, #252]	; (8000cac <MX_ADC_Init+0x128>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <MX_ADC_Init+0x128>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000bb8:	4b3c      	ldr	r3, [pc, #240]	; (8000cac <MX_ADC_Init+0x128>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bbe:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <MX_ADC_Init+0x128>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000bc4:	4b39      	ldr	r3, [pc, #228]	; (8000cac <MX_ADC_Init+0x128>)
 8000bc6:	2220      	movs	r2, #32
 8000bc8:	2101      	movs	r1, #1
 8000bca:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_ADC_Init+0x128>)
 8000bce:	2221      	movs	r2, #33	; 0x21
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd4:	4b35      	ldr	r3, [pc, #212]	; (8000cac <MX_ADC_Init+0x128>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_ADC_Init+0x128>)
 8000bdc:	22c2      	movs	r2, #194	; 0xc2
 8000bde:	32ff      	adds	r2, #255	; 0xff
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000be2:	4b32      	ldr	r3, [pc, #200]	; (8000cac <MX_ADC_Init+0x128>)
 8000be4:	222c      	movs	r2, #44	; 0x2c
 8000be6:	2100      	movs	r1, #0
 8000be8:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bea:	4b30      	ldr	r3, [pc, #192]	; (8000cac <MX_ADC_Init+0x128>)
 8000bec:	2204      	movs	r2, #4
 8000bee:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_ADC_Init+0x128>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <MX_ADC_Init+0x128>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_ADC_Init+0x128>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_ADC_Init+0x128>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_ADC_Init+0x128>)
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 faec 	bl	80011e8 <HAL_ADC_Init>
 8000c10:	1e03      	subs	r3, r0, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000c14:	f000 f930 	bl	8000e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0152      	lsls	r2, r2, #5
 8000c24:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c26:	003a      	movs	r2, r7
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <MX_ADC_Init+0x128>)
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f000 fd8b 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c36:	f000 f91f 	bl	8000e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	4a1d      	ldr	r2, [pc, #116]	; (8000cb4 <MX_ADC_Init+0x130>)
 8000c3e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c40:	003a      	movs	r2, r7
 8000c42:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_ADC_Init+0x128>)
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 fd7e 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000c50:	f000 f912 	bl	8000e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c54:	003b      	movs	r3, r7
 8000c56:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <MX_ADC_Init+0x134>)
 8000c58:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5a:	003a      	movs	r2, r7
 8000c5c:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_ADC_Init+0x128>)
 8000c5e:	0011      	movs	r1, r2
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 fd71 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000c6a:	f000 f905 	bl	8000e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c6e:	003b      	movs	r3, r7
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <MX_ADC_Init+0x138>)
 8000c72:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c74:	003a      	movs	r2, r7
 8000c76:	4b0d      	ldr	r3, [pc, #52]	; (8000cac <MX_ADC_Init+0x128>)
 8000c78:	0011      	movs	r1, r2
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f000 fd64 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000c80:	1e03      	subs	r3, r0, #0
 8000c82:	d001      	beq.n	8000c88 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000c84:	f000 f8f8 	bl	8000e78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c88:	003b      	movs	r3, r7
 8000c8a:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <MX_ADC_Init+0x13c>)
 8000c8c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c8e:	003a      	movs	r2, r7
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_ADC_Init+0x128>)
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f000 fd57 	bl	8001748 <HAL_ADC_ConfigChannel>
 8000c9a:	1e03      	subs	r3, r0, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000c9e:	f000 f8eb 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ca2:	46c0      	nop			; (mov r8, r8)
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	b002      	add	sp, #8
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	200002d0 	.word	0x200002d0
 8000cb0:	40012400 	.word	0x40012400
 8000cb4:	04000002 	.word	0x04000002
 8000cb8:	10000010 	.word	0x10000010
 8000cbc:	14000020 	.word	0x14000020
 8000cc0:	18000040 	.word	0x18000040

08000cc4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cca:	4a15      	ldr	r2, [pc, #84]	; (8000d20 <MX_USART2_UART_Init+0x5c>)
 8000ccc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cce:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cd0:	22e1      	movs	r2, #225	; 0xe1
 8000cd2:	0252      	lsls	r2, r2, #9
 8000cd4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <MX_USART2_UART_Init+0x58>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f003 fff3 	bl	8004cf4 <HAL_UART_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d12:	f000 f8b1 	bl	8000e78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	2000024c 	.word	0x2000024c
 8000d20:	40004400 	.word	0x40004400

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	240c      	movs	r4, #12
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	0018      	movs	r0, r3
 8000d30:	2314      	movs	r3, #20
 8000d32:	001a      	movs	r2, r3
 8000d34:	2100      	movs	r1, #0
 8000d36:	f008 fe0d 	bl	8009954 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b4a      	ldr	r3, [pc, #296]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000d40:	2101      	movs	r1, #1
 8000d42:	430a      	orrs	r2, r1
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d46:	4b47      	ldr	r3, [pc, #284]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000d58:	2102      	movs	r1, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <MX_GPIO_Init+0x140>)
 8000d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_RESET);
 8000d6a:	2380      	movs	r3, #128	; 0x80
 8000d6c:	00d9      	lsls	r1, r3, #3
 8000d6e:	23a0      	movs	r3, #160	; 0xa0
 8000d70:	05db      	lsls	r3, r3, #23
 8000d72:	2200      	movs	r2, #0
 8000d74:	0018      	movs	r0, r3
 8000d76:	f001 f9da 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000d7a:	2380      	movs	r3, #128	; 0x80
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	483a      	ldr	r0, [pc, #232]	; (8000e68 <MX_GPIO_Init+0x144>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	0019      	movs	r1, r3
 8000d84:	f001 f9d3 	bl	800212e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BP30_Pin BP4_Pin HAT_WEST_Pin */
  GPIO_InitStruct.Pin = BP30_Pin|BP4_Pin|HAT_WEST_Pin;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	4a38      	ldr	r2, [pc, #224]	; (8000e6c <MX_GPIO_Init+0x148>)
 8000d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2200      	movs	r2, #0
 8000d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2201      	movs	r2, #1
 8000d98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	193a      	adds	r2, r7, r4
 8000d9c:	23a0      	movs	r3, #160	; 0xa0
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f001 f828 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP21_Pin BP11_Pin BP8_Pin BP7_Pin
                           HAT_SOUTH_Pin HAT_NORTH_Pin HAT_EAST_Pin BP3_Pin
                           BP1_Pin */
  GPIO_InitStruct.Pin = BP21_Pin|BP11_Pin|BP8_Pin|BP7_Pin
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <MX_GPIO_Init+0x14c>)
 8000dac:	601a      	str	r2, [r3, #0]
                          |HAT_SOUTH_Pin|HAT_NORTH_Pin|HAT_EAST_Pin|BP3_Pin
                          |BP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2200      	movs	r2, #0
 8000db2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	2201      	movs	r2, #1
 8000db8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dba:	193b      	adds	r3, r7, r4
 8000dbc:	4a2a      	ldr	r2, [pc, #168]	; (8000e68 <MX_GPIO_Init+0x144>)
 8000dbe:	0019      	movs	r1, r3
 8000dc0:	0010      	movs	r0, r2
 8000dc2:	f001 f819 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP20_Pin BP5_Pin BP6_Pin CH_Pin */
  GPIO_InitStruct.Pin = BP20_Pin|BP5_Pin|BP6_Pin|CH_Pin;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	4a2a      	ldr	r2, [pc, #168]	; (8000e74 <MX_GPIO_Init+0x150>)
 8000dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dd2:	193b      	adds	r3, r7, r4
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	193b      	adds	r3, r7, r4
 8000dda:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <MX_GPIO_Init+0x144>)
 8000ddc:	0019      	movs	r1, r3
 8000dde:	0010      	movs	r0, r2
 8000de0:	f001 f80a 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BP2_Pin */
  GPIO_InitStruct.Pin = BP2_Pin;
 8000de4:	193b      	adds	r3, r7, r4
 8000de6:	2280      	movs	r2, #128	; 0x80
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2200      	movs	r2, #0
 8000df0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 8000df8:	193a      	adds	r2, r7, r4
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 fff9 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_V_Pin */
  GPIO_InitStruct.Pin = LED_V_Pin;
 8000e06:	0021      	movs	r1, r4
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	000c      	movs	r4, r1
 8000e12:	193b      	adds	r3, r7, r4
 8000e14:	2201      	movs	r2, #1
 8000e16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	193b      	adds	r3, r7, r4
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_V_GPIO_Port, &GPIO_InitStruct);
 8000e24:	193a      	adds	r2, r7, r4
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	0011      	movs	r1, r2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 ffe3 	bl	8001df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000e32:	0021      	movs	r1, r4
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2280      	movs	r2, #128	; 0x80
 8000e38:	0092      	lsls	r2, r2, #2
 8000e3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2201      	movs	r2, #1
 8000e40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	2202      	movs	r2, #2
 8000e46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <MX_GPIO_Init+0x144>)
 8000e52:	0019      	movs	r1, r3
 8000e54:	0010      	movs	r0, r2
 8000e56:	f000 ffcf 	bl	8001df8 <HAL_GPIO_Init>

}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b009      	add	sp, #36	; 0x24
 8000e60:	bd90      	pop	{r4, r7, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40021000 	.word	0x40021000
 8000e68:	50000400 	.word	0x50000400
 8000e6c:	00008180 	.word	0x00008180
 8000e70:	00008c7b 	.word	0x00008c7b
 8000e74:	00006104 	.word	0x00006104

08000e78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7c:	b672      	cpsid	i
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <Error_Handler+0x8>
	...

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_MspInit+0x24>)
 8000e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x24>)
 8000e8e:	2101      	movs	r1, #1
 8000e90:	430a      	orrs	r2, r1
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_MspInit+0x24>)
 8000e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <HAL_MspInit+0x24>)
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	0549      	lsls	r1, r1, #21
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40021000 	.word	0x40021000

08000eac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	240c      	movs	r4, #12
 8000eb6:	193b      	adds	r3, r7, r4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	2314      	movs	r3, #20
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f008 fd48 	bl	8009954 <memset>
  if(hadc->Instance==ADC1)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <HAL_ADC_MspInit+0x70>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d122      	bne.n	8000f14 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_ADC_MspInit+0x74>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_ADC_MspInit+0x74>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0089      	lsls	r1, r1, #2
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000edc:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_ADC_MspInit+0x74>)
 8000ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_ADC_MspInit+0x74>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_ADC_MspInit+0x74>)
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	2201      	movs	r2, #1
 8000eee:	4013      	ands	r3, r2
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = AXE_X_Pin|AXE_Y_Pin|AXE_Z_Pin|COLLECTIVE_Y_Pin
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2273      	movs	r2, #115	; 0x73
 8000ef8:	601a      	str	r2, [r3, #0]
                          |PEDALE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2203      	movs	r2, #3
 8000efe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	193a      	adds	r2, r7, r4
 8000f08:	23a0      	movs	r3, #160	; 0xa0
 8000f0a:	05db      	lsls	r3, r3, #23
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 ff72 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f14:	46c0      	nop			; (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b009      	add	sp, #36	; 0x24
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	40012400 	.word	0x40012400
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	240c      	movs	r4, #12
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	0018      	movs	r0, r3
 8000f32:	2314      	movs	r3, #20
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f008 fd0c 	bl	8009954 <memset>
  if(huart->Instance==USART2)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a18      	ldr	r2, [pc, #96]	; (8000fa4 <HAL_UART_MspInit+0x80>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d129      	bne.n	8000f9a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f46:	4b18      	ldr	r3, [pc, #96]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f4a:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	0289      	lsls	r1, r1, #10
 8000f50:	430a      	orrs	r2, r1
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	430a      	orrs	r2, r1
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <HAL_UART_MspInit+0x84>)
 8000f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f64:	2201      	movs	r2, #1
 8000f66:	4013      	ands	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f6c:	0021      	movs	r1, r4
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	220c      	movs	r2, #12
 8000f72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2202      	movs	r2, #2
 8000f78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2203      	movs	r2, #3
 8000f84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2204      	movs	r2, #4
 8000f8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	187a      	adds	r2, r7, r1
 8000f8e:	23a0      	movs	r3, #160	; 0xa0
 8000f90:	05db      	lsls	r3, r3, #23
 8000f92:	0011      	movs	r1, r2
 8000f94:	0018      	movs	r0, r3
 8000f96:	f000 ff2f 	bl	8001df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b009      	add	sp, #36	; 0x24
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)
 8000fa4:	40004400 	.word	0x40004400
 8000fa8:	40021000 	.word	0x40021000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <HardFault_Handler+0x4>

08000fb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f8ca 	bl	8001168 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <USB_IRQHandler+0x14>)
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f001 f9f6 	bl	80023d4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000fe8:	46c0      	nop			; (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	200007f4 	.word	0x200007f4

08000ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <_sbrk+0x5c>)
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <_sbrk+0x60>)
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <_sbrk+0x64>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <_sbrk+0x68>)
 8001014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	429a      	cmp	r2, r3
 8001022:	d207      	bcs.n	8001034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001024:	f008 fc58 	bl	80098d8 <__errno>
 8001028:	0003      	movs	r3, r0
 800102a:	220c      	movs	r2, #12
 800102c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102e:	2301      	movs	r3, #1
 8001030:	425b      	negs	r3, r3
 8001032:	e009      	b.n	8001048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	18d2      	adds	r2, r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	; (8001058 <_sbrk+0x64>)
 8001044:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001046:	68fb      	ldr	r3, [r7, #12]
}
 8001048:	0018      	movs	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	b006      	add	sp, #24
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20005000 	.word	0x20005000
 8001054:	00000400 	.word	0x00000400
 8001058:	20000218 	.word	0x20000218
 800105c:	20000af8 	.word	0x20000af8

08001060 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	46c0      	nop			; (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0b      	ldr	r4, [pc, #44]	; (80010b8 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001096:	f7ff ffe3 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109a:	f008 fc23 	bl	80098e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109e:	f7ff f9fd 	bl	800049c <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
   ldr   r0, =_estack
 80010a4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80010b0:	08009c80 	.word	0x08009c80
  ldr r2, =_sbss
 80010b4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80010b8:	20000af8 	.word	0x20000af8

080010bc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_COMP_IRQHandler>
	...

080010c0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x3c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Init+0x3c>)
 80010d2:	2140      	movs	r1, #64	; 0x40
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f811 	bl	8001100 <HAL_InitTick>
 80010de:	1e03      	subs	r3, r0, #0
 80010e0:	d003      	beq.n	80010ea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
 80010e8:	e001      	b.n	80010ee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ea:	f7ff fecb 	bl	8000e84 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ee:	1dfb      	adds	r3, r7, #7
 80010f0:	781b      	ldrb	r3, [r3, #0]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b002      	add	sp, #8
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_InitTick+0x5c>)
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <HAL_InitTick+0x60>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	0019      	movs	r1, r3
 8001112:	23fa      	movs	r3, #250	; 0xfa
 8001114:	0098      	lsls	r0, r3, #2
 8001116:	f7fe fff7 	bl	8000108 <__udivsi3>
 800111a:	0003      	movs	r3, r0
 800111c:	0019      	movs	r1, r3
 800111e:	0020      	movs	r0, r4
 8001120:	f7fe fff2 	bl	8000108 <__udivsi3>
 8001124:	0003      	movs	r3, r0
 8001126:	0018      	movs	r0, r3
 8001128:	f000 fe59 	bl	8001dde <HAL_SYSTICK_Config>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d001      	beq.n	8001134 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00f      	b.n	8001154 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2b03      	cmp	r3, #3
 8001138:	d80b      	bhi.n	8001152 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	2301      	movs	r3, #1
 800113e:	425b      	negs	r3, r3
 8001140:	2200      	movs	r2, #0
 8001142:	0018      	movs	r0, r3
 8001144:	f000 fe26 	bl	8001d94 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001148:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_InitTick+0x64>)
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e000      	b.n	8001154 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
}
 8001154:	0018      	movs	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	b003      	add	sp, #12
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	20000000 	.word	0x20000000
 8001160:	20000008 	.word	0x20000008
 8001164:	20000004 	.word	0x20000004

08001168 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x1c>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	001a      	movs	r2, r3
 8001172:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_IncTick+0x20>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	18d2      	adds	r2, r2, r3
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <HAL_IncTick+0x20>)
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000008 	.word	0x20000008
 8001188:	2000032c 	.word	0x2000032c

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b02      	ldr	r3, [pc, #8]	; (800119c <HAL_GetTick+0x10>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	2000032c 	.word	0x2000032c

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a8:	f7ff fff0 	bl	800118c <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3301      	adds	r3, #1
 80011b8:	d005      	beq.n	80011c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_Delay+0x44>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	001a      	movs	r2, r3
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	189b      	adds	r3, r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	f7ff ffe0 	bl	800118c <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d8f7      	bhi.n	80011c8 <HAL_Delay+0x28>
  {
  }
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	20000008 	.word	0x20000008

080011e8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e159      	b.n	80014ae <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10a      	bne.n	8001218 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2250      	movs	r2, #80	; 0x50
 800120c:	2100      	movs	r1, #0
 800120e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff fe4a 	bl	8000eac <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121c:	2210      	movs	r2, #16
 800121e:	4013      	ands	r3, r2
 8001220:	2b10      	cmp	r3, #16
 8001222:	d005      	beq.n	8001230 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2204      	movs	r2, #4
 800122c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800122e:	d00b      	beq.n	8001248 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001234:	2210      	movs	r2, #16
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2250      	movs	r2, #80	; 0x50
 8001240:	2100      	movs	r1, #0
 8001242:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e132      	b.n	80014ae <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124c:	4a9a      	ldr	r2, [pc, #616]	; (80014b8 <HAL_ADC_Init+0x2d0>)
 800124e:	4013      	ands	r3, r2
 8001250:	2202      	movs	r2, #2
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	2b01      	cmp	r3, #1
 8001264:	d108      	bne.n	8001278 <HAL_ADC_Init+0x90>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADC_Init+0x90>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_ADC_Init+0x92>
 8001278:	2300      	movs	r3, #0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d149      	bne.n	8001312 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	23c0      	movs	r3, #192	; 0xc0
 8001284:	061b      	lsls	r3, r3, #24
 8001286:	429a      	cmp	r2, r3
 8001288:	d00b      	beq.n	80012a2 <HAL_ADC_Init+0xba>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d005      	beq.n	80012a2 <HAL_ADC_Init+0xba>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	061b      	lsls	r3, r3, #24
 800129e:	429a      	cmp	r2, r3
 80012a0:	d111      	bne.n	80012c6 <HAL_ADC_Init+0xde>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	691a      	ldr	r2, [r3, #16]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	0092      	lsls	r2, r2, #2
 80012ae:	0892      	lsrs	r2, r2, #2
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6919      	ldr	r1, [r3, #16]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	430a      	orrs	r2, r1
 80012c2:	611a      	str	r2, [r3, #16]
 80012c4:	e014      	b.n	80012f0 <HAL_ADC_Init+0x108>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	691a      	ldr	r2, [r3, #16]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	0092      	lsls	r2, r2, #2
 80012d2:	0892      	lsrs	r2, r2, #2
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	4b79      	ldr	r3, [pc, #484]	; (80014bc <HAL_ADC_Init+0x2d4>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4b78      	ldr	r3, [pc, #480]	; (80014bc <HAL_ADC_Init+0x2d4>)
 80012dc:	4978      	ldr	r1, [pc, #480]	; (80014c0 <HAL_ADC_Init+0x2d8>)
 80012de:	400a      	ands	r2, r1
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	4b76      	ldr	r3, [pc, #472]	; (80014bc <HAL_ADC_Init+0x2d4>)
 80012e4:	6819      	ldr	r1, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	4b74      	ldr	r3, [pc, #464]	; (80014bc <HAL_ADC_Init+0x2d4>)
 80012ec:	430a      	orrs	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2118      	movs	r1, #24
 80012fc:	438a      	bics	r2, r1
 80012fe:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68d9      	ldr	r1, [r3, #12]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689a      	ldr	r2, [r3, #8]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001312:	4b6a      	ldr	r3, [pc, #424]	; (80014bc <HAL_ADC_Init+0x2d4>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	4b69      	ldr	r3, [pc, #420]	; (80014bc <HAL_ADC_Init+0x2d4>)
 8001318:	496a      	ldr	r1, [pc, #424]	; (80014c4 <HAL_ADC_Init+0x2dc>)
 800131a:	400a      	ands	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800131e:	4b67      	ldr	r3, [pc, #412]	; (80014bc <HAL_ADC_Init+0x2d4>)
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001326:	065a      	lsls	r2, r3, #25
 8001328:	4b64      	ldr	r3, [pc, #400]	; (80014bc <HAL_ADC_Init+0x2d4>)
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	055b      	lsls	r3, r3, #21
 8001338:	4013      	ands	r3, r2
 800133a:	d108      	bne.n	800134e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0549      	lsls	r1, r1, #21
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	495b      	ldr	r1, [pc, #364]	; (80014c8 <HAL_ADC_Init+0x2e0>)
 800135a:	400a      	ands	r2, r1
 800135c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68d9      	ldr	r1, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d101      	bne.n	8001374 <HAL_ADC_Init+0x18c>
 8001370:	2304      	movs	r3, #4
 8001372:	e000      	b.n	8001376 <HAL_ADC_Init+0x18e>
 8001374:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001376:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2020      	movs	r0, #32
 800137c:	5c1b      	ldrb	r3, [r3, r0]
 800137e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001380:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	202c      	movs	r0, #44	; 0x2c
 8001386:	5c1b      	ldrb	r3, [r3, r0]
 8001388:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800138a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001390:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001398:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80013a0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ae:	23c2      	movs	r3, #194	; 0xc2
 80013b0:	33ff      	adds	r3, #255	; 0xff
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d00b      	beq.n	80013ce <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68d9      	ldr	r1, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80013c4:	431a      	orrs	r2, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2221      	movs	r2, #33	; 0x21
 80013d2:	5c9b      	ldrb	r3, [r3, r2]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d11a      	bne.n	800140e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	5c9b      	ldrb	r3, [r3, r2]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d109      	bne.n	80013f6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0249      	lsls	r1, r1, #9
 80013f0:	430a      	orrs	r2, r1
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	e00b      	b.n	800140e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fa:	2220      	movs	r2, #32
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	2201      	movs	r2, #1
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001412:	2b01      	cmp	r3, #1
 8001414:	d11f      	bne.n	8001456 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	492a      	ldr	r1, [pc, #168]	; (80014cc <HAL_ADC_Init+0x2e4>)
 8001422:	400a      	ands	r2, r1
 8001424:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6919      	ldr	r1, [r3, #16]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001434:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800143a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	430a      	orrs	r2, r1
 8001442:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	691a      	ldr	r2, [r3, #16]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	611a      	str	r2, [r3, #16]
 8001454:	e00e      	b.n	8001474 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	2201      	movs	r2, #1
 800145e:	4013      	ands	r3, r2
 8001460:	2b01      	cmp	r3, #1
 8001462:	d107      	bne.n	8001474 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691a      	ldr	r2, [r3, #16]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2107      	movs	r1, #7
 8001480:	438a      	bics	r2, r1
 8001482:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6959      	ldr	r1, [r3, #20]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a0:	2203      	movs	r2, #3
 80014a2:	4393      	bics	r3, r2
 80014a4:	2201      	movs	r2, #1
 80014a6:	431a      	orrs	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	fffffefd 	.word	0xfffffefd
 80014bc:	40012708 	.word	0x40012708
 80014c0:	ffc3ffff 	.word	0xffc3ffff
 80014c4:	fdffffff 	.word	0xfdffffff
 80014c8:	fffe0219 	.word	0xfffe0219
 80014cc:	fffffc03 	.word	0xfffffc03

080014d0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014d8:	230f      	movs	r3, #15
 80014da:	18fb      	adds	r3, r7, r3
 80014dc:	2200      	movs	r2, #0
 80014de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d138      	bne.n	800155e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2250      	movs	r2, #80	; 0x50
 80014f0:	5c9b      	ldrb	r3, [r3, r2]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Start+0x2a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e038      	b.n	800156c <HAL_ADC_Start+0x9c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2250      	movs	r2, #80	; 0x50
 80014fe:	2101      	movs	r1, #1
 8001500:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d007      	beq.n	800151a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800150a:	230f      	movs	r3, #15
 800150c:	18fc      	adds	r4, r7, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	0018      	movs	r0, r3
 8001512:	f000 f9b9 	bl	8001888 <ADC_Enable>
 8001516:	0003      	movs	r3, r0
 8001518:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800151a:	230f      	movs	r3, #15
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d120      	bne.n	8001566 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <HAL_ADC_Start+0xa4>)
 800152a:	4013      	ands	r3, r2
 800152c:	2280      	movs	r2, #128	; 0x80
 800152e:	0052      	lsls	r2, r2, #1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2250      	movs	r2, #80	; 0x50
 8001540:	2100      	movs	r1, #0
 8001542:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	221c      	movs	r2, #28
 800154a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2104      	movs	r1, #4
 8001558:	430a      	orrs	r2, r1
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	e003      	b.n	8001566 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	2202      	movs	r2, #2
 8001564:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001566:	230f      	movs	r3, #15
 8001568:	18fb      	adds	r3, r7, r3
 800156a:	781b      	ldrb	r3, [r3, #0]
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b005      	add	sp, #20
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	fffff0fe 	.word	0xfffff0fe

08001578 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001578:	b5b0      	push	{r4, r5, r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001580:	230f      	movs	r3, #15
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	2200      	movs	r2, #0
 8001586:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2250      	movs	r2, #80	; 0x50
 800158c:	5c9b      	ldrb	r3, [r3, r2]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Stop+0x1e>
 8001592:	2302      	movs	r3, #2
 8001594:	e029      	b.n	80015ea <HAL_ADC_Stop+0x72>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2250      	movs	r2, #80	; 0x50
 800159a:	2101      	movs	r1, #1
 800159c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800159e:	250f      	movs	r5, #15
 80015a0:	197c      	adds	r4, r7, r5
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 fa3e 	bl	8001a26 <ADC_ConversionStop>
 80015aa:	0003      	movs	r3, r0
 80015ac:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80015ae:	197b      	adds	r3, r7, r5
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d112      	bne.n	80015dc <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80015b6:	197c      	adds	r4, r7, r5
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 f9cc 	bl	8001958 <ADC_Disable>
 80015c0:	0003      	movs	r3, r0
 80015c2:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80015c4:	197b      	adds	r3, r7, r5
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d107      	bne.n	80015dc <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d0:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HAL_ADC_Stop+0x7c>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	2201      	movs	r2, #1
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2250      	movs	r2, #80	; 0x50
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	781b      	ldrb	r3, [r3, #0]
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bdb0      	pop	{r4, r5, r7, pc}
 80015f2:	46c0      	nop			; (mov r8, r8)
 80015f4:	fffffefe 	.word	0xfffffefe

080015f8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d102      	bne.n	8001618 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001612:	2308      	movs	r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e014      	b.n	8001642 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	2201      	movs	r2, #1
 8001620:	4013      	ands	r3, r2
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10b      	bne.n	800163e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	2220      	movs	r2, #32
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2250      	movs	r2, #80	; 0x50
 8001636:	2100      	movs	r1, #0
 8001638:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e072      	b.n	8001724 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800163e:	230c      	movs	r3, #12
 8001640:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001642:	f7ff fda3 	bl	800118c <HAL_GetTick>
 8001646:	0003      	movs	r3, r0
 8001648:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800164a:	e01f      	b.n	800168c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	3301      	adds	r3, #1
 8001650:	d01c      	beq.n	800168c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d007      	beq.n	8001668 <HAL_ADC_PollForConversion+0x70>
 8001658:	f7ff fd98 	bl	800118c <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d211      	bcs.n	800168c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	d10b      	bne.n	800168c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001678:	2204      	movs	r2, #4
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2250      	movs	r2, #80	; 0x50
 8001684:	2100      	movs	r1, #0
 8001686:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e04b      	b.n	8001724 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	d0d9      	beq.n	800164c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	2280      	movs	r2, #128	; 0x80
 800169e:	0092      	lsls	r2, r2, #2
 80016a0:	431a      	orrs	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	23c0      	movs	r3, #192	; 0xc0
 80016ae:	011b      	lsls	r3, r3, #4
 80016b0:	4013      	ands	r3, r2
 80016b2:	d12e      	bne.n	8001712 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2220      	movs	r2, #32
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d129      	bne.n	8001712 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2208      	movs	r2, #8
 80016c6:	4013      	ands	r3, r2
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d122      	bne.n	8001712 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2204      	movs	r2, #4
 80016d4:	4013      	ands	r3, r2
 80016d6:	d110      	bne.n	80016fa <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	210c      	movs	r1, #12
 80016e4:	438a      	bics	r2, r1
 80016e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <HAL_ADC_PollForConversion+0x134>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	2201      	movs	r2, #1
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	655a      	str	r2, [r3, #84]	; 0x54
 80016f8:	e00b      	b.n	8001712 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fe:	2220      	movs	r2, #32
 8001700:	431a      	orrs	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	2201      	movs	r2, #1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d103      	bne.n	8001722 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	0018      	movs	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	b004      	add	sp, #16
 800172a:	bd80      	pop	{r7, pc}
 800172c:	fffffefe 	.word	0xfffffefe

08001730 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2250      	movs	r2, #80	; 0x50
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x18>
 800175c:	2302      	movs	r3, #2
 800175e:	e085      	b.n	800186c <HAL_ADC_ConfigChannel+0x124>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2250      	movs	r2, #80	; 0x50
 8001764:	2101      	movs	r1, #1
 8001766:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2204      	movs	r2, #4
 8001770:	4013      	ands	r3, r2
 8001772:	d00b      	beq.n	800178c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	2220      	movs	r2, #32
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2250      	movs	r2, #80	; 0x50
 8001784:	2100      	movs	r1, #0
 8001786:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e06f      	b.n	800186c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_ADC_ConfigChannel+0x12c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d035      	beq.n	8001802 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	035b      	lsls	r3, r3, #13
 80017a2:	0b5a      	lsrs	r2, r3, #13
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	02db      	lsls	r3, r3, #11
 80017b4:	4013      	ands	r3, r2
 80017b6:	d009      	beq.n	80017cc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80017b8:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 80017be:	2180      	movs	r1, #128	; 0x80
 80017c0:	0409      	lsls	r1, r1, #16
 80017c2:	430a      	orrs	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80017c6:	200a      	movs	r0, #10
 80017c8:	f000 f97a 	bl	8001ac0 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4013      	ands	r3, r2
 80017d6:	d006      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	03c9      	lsls	r1, r1, #15
 80017e2:	430a      	orrs	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	4013      	ands	r3, r2
 80017f0:	d037      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80017f2:	4b21      	ldr	r3, [pc, #132]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	4b20      	ldr	r3, [pc, #128]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 80017f8:	2180      	movs	r1, #128	; 0x80
 80017fa:	0449      	lsls	r1, r1, #17
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	e02f      	b.n	8001862 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	035b      	lsls	r3, r3, #13
 800180e:	0b5b      	lsrs	r3, r3, #13
 8001810:	43d9      	mvns	r1, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	400a      	ands	r2, r1
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	02db      	lsls	r3, r3, #11
 8001822:	4013      	ands	r3, r2
 8001824:	d005      	beq.n	8001832 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b13      	ldr	r3, [pc, #76]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 800182c:	4913      	ldr	r1, [pc, #76]	; (800187c <HAL_ADC_ConfigChannel+0x134>)
 800182e:	400a      	ands	r2, r1
 8001830:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	029b      	lsls	r3, r3, #10
 800183a:	4013      	ands	r3, r2
 800183c:	d005      	beq.n	800184a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_ADC_ConfigChannel+0x138>)
 8001846:	400a      	ands	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	4013      	ands	r3, r2
 8001854:	d005      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <HAL_ADC_ConfigChannel+0x130>)
 800185c:	4909      	ldr	r1, [pc, #36]	; (8001884 <HAL_ADC_ConfigChannel+0x13c>)
 800185e:	400a      	ands	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2250      	movs	r2, #80	; 0x50
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	0018      	movs	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}
 8001874:	00001001 	.word	0x00001001
 8001878:	40012708 	.word	0x40012708
 800187c:	ff7fffff 	.word	0xff7fffff
 8001880:	ffbfffff 	.word	0xffbfffff
 8001884:	feffffff 	.word	0xfeffffff

08001888 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	2203      	movs	r2, #3
 800189c:	4013      	ands	r3, r2
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d108      	bne.n	80018b4 <ADC_Enable+0x2c>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <ADC_Enable+0x2c>
 80018b0:	2301      	movs	r3, #1
 80018b2:	e000      	b.n	80018b6 <ADC_Enable+0x2e>
 80018b4:	2300      	movs	r3, #0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d146      	bne.n	8001948 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	4a24      	ldr	r2, [pc, #144]	; (8001954 <ADC_Enable+0xcc>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	d00d      	beq.n	80018e2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	2210      	movs	r2, #16
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	2201      	movs	r2, #1
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e033      	b.n	800194a <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2101      	movs	r1, #1
 80018ee:	430a      	orrs	r2, r1
 80018f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f000 f8e4 	bl	8001ac0 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80018f8:	f7ff fc48 	bl	800118c <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001900:	e01b      	b.n	800193a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001902:	f7ff fc43 	bl	800118c <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b0a      	cmp	r3, #10
 800190e:	d914      	bls.n	800193a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2201      	movs	r2, #1
 8001918:	4013      	ands	r3, r2
 800191a:	2b01      	cmp	r3, #1
 800191c:	d00d      	beq.n	800193a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001922:	2210      	movs	r2, #16
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	2201      	movs	r2, #1
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e007      	b.n	800194a <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	4013      	ands	r3, r2
 8001944:	2b01      	cmp	r3, #1
 8001946:	d1dc      	bne.n	8001902 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	0018      	movs	r0, r3
 800194c:	46bd      	mov	sp, r7
 800194e:	b004      	add	sp, #16
 8001950:	bd80      	pop	{r7, pc}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	80000017 	.word	0x80000017

08001958 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2203      	movs	r2, #3
 800196c:	4013      	ands	r3, r2
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <ADC_Disable+0x2c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <ADC_Disable+0x2c>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <ADC_Disable+0x2e>
 8001984:	2300      	movs	r3, #0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d048      	beq.n	8001a1c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2205      	movs	r2, #5
 8001992:	4013      	ands	r3, r2
 8001994:	2b01      	cmp	r3, #1
 8001996:	d110      	bne.n	80019ba <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2102      	movs	r1, #2
 80019a4:	430a      	orrs	r2, r1
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2203      	movs	r2, #3
 80019ae:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019b0:	f7ff fbec 	bl	800118c <HAL_GetTick>
 80019b4:	0003      	movs	r3, r0
 80019b6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019b8:	e029      	b.n	8001a0e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	2210      	movs	r2, #16
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	2201      	movs	r2, #1
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e023      	b.n	8001a1e <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019d6:	f7ff fbd9 	bl	800118c <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b0a      	cmp	r3, #10
 80019e2:	d914      	bls.n	8001a0e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	2201      	movs	r2, #1
 80019ec:	4013      	ands	r3, r2
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d10d      	bne.n	8001a0e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f6:	2210      	movs	r2, #16
 80019f8:	431a      	orrs	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a02:	2201      	movs	r2, #1
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e007      	b.n	8001a1e <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2201      	movs	r2, #1
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d0dc      	beq.n	80019d6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b084      	sub	sp, #16
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d03a      	beq.n	8001ab4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2204      	movs	r2, #4
 8001a46:	4013      	ands	r3, r2
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d10d      	bne.n	8001a68 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2202      	movs	r2, #2
 8001a54:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a56:	d107      	bne.n	8001a68 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2110      	movs	r1, #16
 8001a64:	430a      	orrs	r2, r1
 8001a66:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a68:	f7ff fb90 	bl	800118c <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a70:	e01a      	b.n	8001aa8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a72:	f7ff fb8b 	bl	800118c <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b0a      	cmp	r3, #10
 8001a7e:	d913      	bls.n	8001aa8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d00d      	beq.n	8001aa8 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	2210      	movs	r2, #16
 8001a92:	431a      	orrs	r2, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e006      	b.n	8001ab6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2204      	movs	r2, #4
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d1de      	bne.n	8001a72 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <ADC_DelayMicroSecond+0x38>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	490b      	ldr	r1, [pc, #44]	; (8001afc <ADC_DelayMicroSecond+0x3c>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7fe fb1a 	bl	8000108 <__udivsi3>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	001a      	movs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4353      	muls	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001ade:	e002      	b.n	8001ae6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f9      	bne.n	8001ae0 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	20000000 	.word	0x20000000
 8001afc:	000f4240 	.word	0x000f4240

08001b00 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b0a:	2317      	movs	r3, #23
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2250      	movs	r2, #80	; 0x50
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d101      	bne.n	8001b28 <HAL_ADCEx_Calibration_Start+0x28>
 8001b24:	2302      	movs	r3, #2
 8001b26:	e083      	b.n	8001c30 <HAL_ADCEx_Calibration_Start+0x130>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2250      	movs	r2, #80	; 0x50
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	2203      	movs	r2, #3
 8001b38:	4013      	ands	r3, r2
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d108      	bne.n	8001b50 <HAL_ADCEx_Calibration_Start+0x50>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADCEx_Calibration_Start+0x50>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <HAL_ADCEx_Calibration_Start+0x52>
 8001b50:	2300      	movs	r3, #0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d15b      	bne.n	8001c0e <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	4a37      	ldr	r2, [pc, #220]	; (8001c38 <HAL_ADCEx_Calibration_Start+0x138>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	2202      	movs	r2, #2
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2103      	movs	r1, #3
 8001b7e:	438a      	bics	r2, r1
 8001b80:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2180      	movs	r1, #128	; 0x80
 8001b8e:	0609      	lsls	r1, r1, #24
 8001b90:	430a      	orrs	r2, r1
 8001b92:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b94:	f7ff fafa 	bl	800118c <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b9c:	e01d      	b.n	8001bda <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b9e:	f7ff faf5 	bl	800118c <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b0a      	cmp	r3, #10
 8001baa:	d916      	bls.n	8001bda <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	0fdb      	lsrs	r3, r3, #31
 8001bb4:	07da      	lsls	r2, r3, #31
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	061b      	lsls	r3, r3, #24
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d10d      	bne.n	8001bda <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	2212      	movs	r2, #18
 8001bc4:	4393      	bics	r3, r2
 8001bc6:	2210      	movs	r2, #16
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2250      	movs	r2, #80	; 0x50
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e02a      	b.n	8001c30 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	0fdb      	lsrs	r3, r3, #31
 8001be2:	07da      	lsls	r2, r3, #31
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	061b      	lsls	r3, r3, #24
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d0d8      	beq.n	8001b9e <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68d9      	ldr	r1, [r3, #12]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c00:	2203      	movs	r2, #3
 8001c02:	4393      	bics	r3, r2
 8001c04:	2201      	movs	r2, #1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54
 8001c0c:	e009      	b.n	8001c22 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	2220      	movs	r2, #32
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001c1a:	2317      	movs	r3, #23
 8001c1c:	18fb      	adds	r3, r7, r3
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2250      	movs	r2, #80	; 0x50
 8001c26:	2100      	movs	r1, #0
 8001c28:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001c2a:	2317      	movs	r3, #23
 8001c2c:	18fb      	adds	r3, r7, r3
 8001c2e:	781b      	ldrb	r3, [r3, #0]
}
 8001c30:	0018      	movs	r0, r3
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b006      	add	sp, #24
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	fffffefd 	.word	0xfffffefd

08001c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	0002      	movs	r2, r0
 8001c44:	1dfb      	adds	r3, r7, #7
 8001c46:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c48:	1dfb      	adds	r3, r7, #7
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c4e:	d809      	bhi.n	8001c64 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c50:	1dfb      	adds	r3, r7, #7
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	001a      	movs	r2, r3
 8001c56:	231f      	movs	r3, #31
 8001c58:	401a      	ands	r2, r3
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <__NVIC_EnableIRQ+0x30>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	4091      	lsls	r1, r2
 8001c60:	000a      	movs	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
  }
}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	e000e100 	.word	0xe000e100

08001c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	0002      	movs	r2, r0
 8001c78:	6039      	str	r1, [r7, #0]
 8001c7a:	1dfb      	adds	r3, r7, #7
 8001c7c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	1dfb      	adds	r3, r7, #7
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b7f      	cmp	r3, #127	; 0x7f
 8001c84:	d828      	bhi.n	8001cd8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c86:	4a2f      	ldr	r2, [pc, #188]	; (8001d44 <__NVIC_SetPriority+0xd4>)
 8001c88:	1dfb      	adds	r3, r7, #7
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	33c0      	adds	r3, #192	; 0xc0
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	589b      	ldr	r3, [r3, r2]
 8001c96:	1dfa      	adds	r2, r7, #7
 8001c98:	7812      	ldrb	r2, [r2, #0]
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	400a      	ands	r2, r1
 8001ca0:	00d2      	lsls	r2, r2, #3
 8001ca2:	21ff      	movs	r1, #255	; 0xff
 8001ca4:	4091      	lsls	r1, r2
 8001ca6:	000a      	movs	r2, r1
 8001ca8:	43d2      	mvns	r2, r2
 8001caa:	401a      	ands	r2, r3
 8001cac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	22ff      	movs	r2, #255	; 0xff
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	0018      	movs	r0, r3
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	4003      	ands	r3, r0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cc4:	481f      	ldr	r0, [pc, #124]	; (8001d44 <__NVIC_SetPriority+0xd4>)
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b25b      	sxtb	r3, r3
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	33c0      	adds	r3, #192	; 0xc0
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001cd6:	e031      	b.n	8001d3c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <__NVIC_SetPriority+0xd8>)
 8001cda:	1dfb      	adds	r3, r7, #7
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	0019      	movs	r1, r3
 8001ce0:	230f      	movs	r3, #15
 8001ce2:	400b      	ands	r3, r1
 8001ce4:	3b08      	subs	r3, #8
 8001ce6:	089b      	lsrs	r3, r3, #2
 8001ce8:	3306      	adds	r3, #6
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	18d3      	adds	r3, r2, r3
 8001cee:	3304      	adds	r3, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	1dfa      	adds	r2, r7, #7
 8001cf4:	7812      	ldrb	r2, [r2, #0]
 8001cf6:	0011      	movs	r1, r2
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	00d2      	lsls	r2, r2, #3
 8001cfe:	21ff      	movs	r1, #255	; 0xff
 8001d00:	4091      	lsls	r1, r2
 8001d02:	000a      	movs	r2, r1
 8001d04:	43d2      	mvns	r2, r2
 8001d06:	401a      	ands	r2, r3
 8001d08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	019b      	lsls	r3, r3, #6
 8001d0e:	22ff      	movs	r2, #255	; 0xff
 8001d10:	401a      	ands	r2, r3
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	0018      	movs	r0, r3
 8001d18:	2303      	movs	r3, #3
 8001d1a:	4003      	ands	r3, r0
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d20:	4809      	ldr	r0, [pc, #36]	; (8001d48 <__NVIC_SetPriority+0xd8>)
 8001d22:	1dfb      	adds	r3, r7, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	001c      	movs	r4, r3
 8001d28:	230f      	movs	r3, #15
 8001d2a:	4023      	ands	r3, r4
 8001d2c:	3b08      	subs	r3, #8
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	430a      	orrs	r2, r1
 8001d32:	3306      	adds	r3, #6
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	18c3      	adds	r3, r0, r3
 8001d38:	3304      	adds	r3, #4
 8001d3a:	601a      	str	r2, [r3, #0]
}
 8001d3c:	46c0      	nop			; (mov r8, r8)
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b003      	add	sp, #12
 8001d42:	bd90      	pop	{r4, r7, pc}
 8001d44:	e000e100 	.word	0xe000e100
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	1e5a      	subs	r2, r3, #1
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	045b      	lsls	r3, r3, #17
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d301      	bcc.n	8001d64 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d60:	2301      	movs	r3, #1
 8001d62:	e010      	b.n	8001d86 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d64:	4b0a      	ldr	r3, [pc, #40]	; (8001d90 <SysTick_Config+0x44>)
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	3a01      	subs	r2, #1
 8001d6a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	425b      	negs	r3, r3
 8001d70:	2103      	movs	r1, #3
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7ff ff7c 	bl	8001c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <SysTick_Config+0x44>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7e:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <SysTick_Config+0x44>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b002      	add	sp, #8
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	e000e010 	.word	0xe000e010

08001d94 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	210f      	movs	r1, #15
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	1c02      	adds	r2, r0, #0
 8001da4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b25b      	sxtb	r3, r3
 8001dae:	0011      	movs	r1, r2
 8001db0:	0018      	movs	r0, r3
 8001db2:	f7ff ff5d 	bl	8001c70 <__NVIC_SetPriority>
}
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b004      	add	sp, #16
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	0002      	movs	r2, r0
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b25b      	sxtb	r3, r3
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f7ff ff33 	bl	8001c3c <__NVIC_EnableIRQ>
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b082      	sub	sp, #8
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	0018      	movs	r0, r3
 8001dea:	f7ff ffaf 	bl	8001d4c <SysTick_Config>
 8001dee:	0003      	movs	r3, r0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b002      	add	sp, #8
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e0e:	e155      	b.n	80020bc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4091      	lsls	r1, r2
 8001e1a:	000a      	movs	r2, r1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d100      	bne.n	8001e28 <HAL_GPIO_Init+0x30>
 8001e26:	e146      	b.n	80020b6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d005      	beq.n	8001e40 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d130      	bne.n	8001ea2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	409a      	lsls	r2, r3
 8001e4e:	0013      	movs	r3, r2
 8001e50:	43da      	mvns	r2, r3
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	409a      	lsls	r2, r3
 8001e62:	0013      	movs	r3, r2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	0013      	movs	r3, r2
 8001e7e:	43da      	mvns	r2, r3
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	401a      	ands	r2, r3
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	409a      	lsls	r2, r3
 8001e94:	0013      	movs	r3, r2
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d017      	beq.n	8001ede <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	409a      	lsls	r2, r3
 8001ed0:	0013      	movs	r3, r2
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d123      	bne.n	8001f32 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	58d3      	ldr	r3, [r2, r3]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2207      	movs	r2, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	409a      	lsls	r2, r3
 8001f04:	0013      	movs	r3, r2
 8001f06:	43da      	mvns	r2, r3
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2107      	movs	r1, #7
 8001f16:	400b      	ands	r3, r1
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	0013      	movs	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	0092      	lsls	r2, r2, #2
 8001f2e:	6939      	ldr	r1, [r7, #16]
 8001f30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	0013      	movs	r3, r2
 8001f42:	43da      	mvns	r2, r3
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2203      	movs	r2, #3
 8001f50:	401a      	ands	r2, r3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	409a      	lsls	r2, r3
 8001f58:	0013      	movs	r3, r2
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	23c0      	movs	r3, #192	; 0xc0
 8001f6c:	029b      	lsls	r3, r3, #10
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d100      	bne.n	8001f74 <HAL_GPIO_Init+0x17c>
 8001f72:	e0a0      	b.n	80020b6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f74:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <HAL_GPIO_Init+0x2dc>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <HAL_GPIO_Init+0x2dc>)
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f80:	4a55      	ldr	r2, [pc, #340]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	589b      	ldr	r3, [r3, r2]
 8001f8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2203      	movs	r2, #3
 8001f92:	4013      	ands	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	0013      	movs	r3, r2
 8001f9c:	43da      	mvns	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	23a0      	movs	r3, #160	; 0xa0
 8001fa8:	05db      	lsls	r3, r3, #23
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d01f      	beq.n	8001fee <HAL_GPIO_Init+0x1f6>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_GPIO_Init+0x2e4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d019      	beq.n	8001fea <HAL_GPIO_Init+0x1f2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a49      	ldr	r2, [pc, #292]	; (80020e0 <HAL_GPIO_Init+0x2e8>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0x1ee>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a48      	ldr	r2, [pc, #288]	; (80020e4 <HAL_GPIO_Init+0x2ec>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x1ea>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a47      	ldr	r2, [pc, #284]	; (80020e8 <HAL_GPIO_Init+0x2f0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x1e6>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a46      	ldr	r2, [pc, #280]	; (80020ec <HAL_GPIO_Init+0x2f4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x1e2>
 8001fd6:	2305      	movs	r3, #5
 8001fd8:	e00a      	b.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x1f8>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	2103      	movs	r1, #3
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002000:	4935      	ldr	r1, [pc, #212]	; (80020d8 <HAL_GPIO_Init+0x2e0>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800200e:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43da      	mvns	r2, r3
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	2380      	movs	r3, #128	; 0x80
 8002024:	025b      	lsls	r3, r3, #9
 8002026:	4013      	ands	r3, r2
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002032:	4b2f      	ldr	r3, [pc, #188]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43da      	mvns	r2, r3
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685a      	ldr	r2, [r3, #4]
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	029b      	lsls	r3, r3, #10
 8002050:	4013      	ands	r3, r2
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002062:	4b23      	ldr	r3, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43da      	mvns	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	035b      	lsls	r3, r3, #13
 800207a:	4013      	ands	r3, r2
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800208c:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43da      	mvns	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	039b      	lsls	r3, r3, #14
 80020a4:	4013      	ands	r3, r2
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_GPIO_Init+0x2f8>)
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	40da      	lsrs	r2, r3
 80020c4:	1e13      	subs	r3, r2, #0
 80020c6:	d000      	beq.n	80020ca <HAL_GPIO_Init+0x2d2>
 80020c8:	e6a2      	b.n	8001e10 <HAL_GPIO_Init+0x18>
  }
}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	46c0      	nop			; (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40010000 	.word	0x40010000
 80020dc:	50000400 	.word	0x50000400
 80020e0:	50000800 	.word	0x50000800
 80020e4:	50000c00 	.word	0x50000c00
 80020e8:	50001000 	.word	0x50001000
 80020ec:	50001c00 	.word	0x50001c00
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	000a      	movs	r2, r1
 80020fe:	1cbb      	adds	r3, r7, #2
 8002100:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	1cba      	adds	r2, r7, #2
 8002108:	8812      	ldrh	r2, [r2, #0]
 800210a:	4013      	ands	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800210e:	230f      	movs	r3, #15
 8002110:	18fb      	adds	r3, r7, r3
 8002112:	2201      	movs	r2, #1
 8002114:	701a      	strb	r2, [r3, #0]
 8002116:	e003      	b.n	8002120 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002118:	230f      	movs	r3, #15
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002120:	230f      	movs	r3, #15
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
}
 8002126:	0018      	movs	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	b004      	add	sp, #16
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	0008      	movs	r0, r1
 8002138:	0011      	movs	r1, r2
 800213a:	1cbb      	adds	r3, r7, #2
 800213c:	1c02      	adds	r2, r0, #0
 800213e:	801a      	strh	r2, [r3, #0]
 8002140:	1c7b      	adds	r3, r7, #1
 8002142:	1c0a      	adds	r2, r1, #0
 8002144:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002146:	1c7b      	adds	r3, r7, #1
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800214e:	1cbb      	adds	r3, r7, #2
 8002150:	881a      	ldrh	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002156:	e003      	b.n	8002160 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002158:	1cbb      	adds	r3, r7, #2
 800215a:	881a      	ldrh	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800216a:	b08b      	sub	sp, #44	; 0x2c
 800216c:	af06      	add	r7, sp, #24
 800216e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0ff      	b.n	800237a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a81      	ldr	r2, [pc, #516]	; (8002384 <HAL_PCD_Init+0x21c>)
 800217e:	5c9b      	ldrb	r3, [r3, r2]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d108      	bne.n	8002198 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	23aa      	movs	r3, #170	; 0xaa
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	2100      	movs	r1, #0
 800218e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f007 f880 	bl	8009298 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a7a      	ldr	r2, [pc, #488]	; (8002384 <HAL_PCD_Init+0x21c>)
 800219c:	2103      	movs	r1, #3
 800219e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f003 fa8d 	bl	80056c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021aa:	230f      	movs	r3, #15
 80021ac:	18fb      	adds	r3, r7, r3
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
 80021b2:	e058      	b.n	8002266 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021b4:	200f      	movs	r0, #15
 80021b6:	183b      	adds	r3, r7, r0
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	0013      	movs	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	18cb      	adds	r3, r1, r3
 80021c8:	3301      	adds	r3, #1
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021ce:	183b      	adds	r3, r7, r0
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	0013      	movs	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	183a      	adds	r2, r7, r0
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021e4:	0004      	movs	r4, r0
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	193b      	adds	r3, r7, r4
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	b298      	uxth	r0, r3
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	0013      	movs	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	18cb      	adds	r3, r1, r3
 80021fc:	3336      	adds	r3, #54	; 0x36
 80021fe:	1c02      	adds	r2, r0, #0
 8002200:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002202:	193b      	adds	r3, r7, r4
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	0013      	movs	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	189b      	adds	r3, r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	18cb      	adds	r3, r1, r3
 8002214:	3303      	adds	r3, #3
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	0013      	movs	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	189b      	adds	r3, r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	18cb      	adds	r3, r1, r3
 800222a:	3338      	adds	r3, #56	; 0x38
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002230:	193b      	adds	r3, r7, r4
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	6879      	ldr	r1, [r7, #4]
 8002236:	0013      	movs	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	189b      	adds	r3, r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	18cb      	adds	r3, r1, r3
 8002240:	333c      	adds	r3, #60	; 0x3c
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002246:	193b      	adds	r3, r7, r4
 8002248:	781a      	ldrb	r2, [r3, #0]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	0013      	movs	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	189b      	adds	r3, r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	18cb      	adds	r3, r1, r3
 8002256:	3340      	adds	r3, #64	; 0x40
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225c:	193b      	adds	r3, r7, r4
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	193b      	adds	r3, r7, r4
 8002262:	3201      	adds	r2, #1
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	210f      	movs	r1, #15
 8002268:	187b      	adds	r3, r7, r1
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	429a      	cmp	r2, r3
 8002272:	d39f      	bcc.n	80021b4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
 800227a:	e056      	b.n	800232a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800227c:	240f      	movs	r4, #15
 800227e:	193b      	adds	r3, r7, r4
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	236a      	movs	r3, #106	; 0x6a
 8002286:	33ff      	adds	r3, #255	; 0xff
 8002288:	0019      	movs	r1, r3
 800228a:	0013      	movs	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	189b      	adds	r3, r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	18c3      	adds	r3, r0, r3
 8002294:	185b      	adds	r3, r3, r1
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800229a:	193b      	adds	r3, r7, r4
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	23b4      	movs	r3, #180	; 0xb4
 80022a2:	0059      	lsls	r1, r3, #1
 80022a4:	0013      	movs	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	189b      	adds	r3, r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	18c3      	adds	r3, r0, r3
 80022ae:	185b      	adds	r3, r3, r1
 80022b0:	193a      	adds	r2, r7, r4
 80022b2:	7812      	ldrb	r2, [r2, #0]
 80022b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b6:	193b      	adds	r3, r7, r4
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	236c      	movs	r3, #108	; 0x6c
 80022be:	33ff      	adds	r3, #255	; 0xff
 80022c0:	0019      	movs	r1, r3
 80022c2:	0013      	movs	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	189b      	adds	r3, r3, r2
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	18c3      	adds	r3, r0, r3
 80022cc:	185b      	adds	r3, r3, r1
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	781a      	ldrb	r2, [r3, #0]
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	23bc      	movs	r3, #188	; 0xbc
 80022da:	0059      	lsls	r1, r3, #1
 80022dc:	0013      	movs	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	189b      	adds	r3, r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	18c3      	adds	r3, r0, r3
 80022e6:	185b      	adds	r3, r3, r1
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022ec:	193b      	adds	r3, r7, r4
 80022ee:	781a      	ldrb	r2, [r3, #0]
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	23be      	movs	r3, #190	; 0xbe
 80022f4:	0059      	lsls	r1, r3, #1
 80022f6:	0013      	movs	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	189b      	adds	r3, r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	18c3      	adds	r3, r0, r3
 8002300:	185b      	adds	r3, r3, r1
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002306:	193b      	adds	r3, r7, r4
 8002308:	781a      	ldrb	r2, [r3, #0]
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	23c0      	movs	r3, #192	; 0xc0
 800230e:	0059      	lsls	r1, r3, #1
 8002310:	0013      	movs	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	189b      	adds	r3, r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	18c3      	adds	r3, r0, r3
 800231a:	185b      	adds	r3, r3, r1
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002320:	193b      	adds	r3, r7, r4
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	193b      	adds	r3, r7, r4
 8002326:	3201      	adds	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
 800232a:	230f      	movs	r3, #15
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	d3a1      	bcc.n	800227c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6818      	ldr	r0, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	466a      	mov	r2, sp
 8002340:	0011      	movs	r1, r2
 8002342:	001a      	movs	r2, r3
 8002344:	3210      	adds	r2, #16
 8002346:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002348:	c170      	stmia	r1!, {r4, r5, r6}
 800234a:	ca30      	ldmia	r2!, {r4, r5}
 800234c:	c130      	stmia	r1!, {r4, r5}
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 f9d0 	bl	80056f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	; 0x24
 800235c:	2100      	movs	r1, #0
 800235e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_PCD_Init+0x21c>)
 8002364:	2101      	movs	r1, #1
 8002366:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d103      	bne.n	8002378 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0018      	movs	r0, r3
 8002374:	f001 fd1c 	bl	8003db0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b005      	add	sp, #20
 8002380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	000002a9 	.word	0x000002a9

08002388 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	23aa      	movs	r3, #170	; 0xaa
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	5cd3      	ldrb	r3, [r2, r3]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <HAL_PCD_Start+0x18>
 800239c:	2302      	movs	r3, #2
 800239e:	e014      	b.n	80023ca <HAL_PCD_Start+0x42>
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	23aa      	movs	r3, #170	; 0xaa
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	2101      	movs	r1, #1
 80023a8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f003 f972 	bl	8005698 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f005 f8cd 	bl	8007558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	23aa      	movs	r3, #170	; 0xaa
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	2100      	movs	r1, #0
 80023c6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80023c8:	2300      	movs	r3, #0
}
 80023ca:	0018      	movs	r0, r3
 80023cc:	46bd      	mov	sp, r7
 80023ce:	b002      	add	sp, #8
 80023d0:	bd80      	pop	{r7, pc}
	...

080023d4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f005 f8cf 	bl	8007584 <USB_ReadInterrupts>
 80023e6:	0002      	movs	r2, r0
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	401a      	ands	r2, r3
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	021b      	lsls	r3, r3, #8
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d103      	bne.n	80023fe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 fba3 	bl	8002b44 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0018      	movs	r0, r3
 8002404:	f005 f8be 	bl	8007584 <USB_ReadInterrupts>
 8002408:	0002      	movs	r2, r0
 800240a:	2380      	movs	r3, #128	; 0x80
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	401a      	ands	r2, r3
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	429a      	cmp	r2, r3
 8002416:	d114      	bne.n	8002442 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2244      	movs	r2, #68	; 0x44
 800241e:	5a9b      	ldrh	r3, [r3, r2]
 8002420:	b29a      	uxth	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	49a2      	ldr	r1, [pc, #648]	; (80026b0 <HAL_PCD_IRQHandler+0x2dc>)
 8002428:	400a      	ands	r2, r1
 800242a:	b291      	uxth	r1, r2
 800242c:	2244      	movs	r2, #68	; 0x44
 800242e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f006 ffb3 	bl	800939e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2100      	movs	r1, #0
 800243c:	0018      	movs	r0, r3
 800243e:	f000 f945 	bl	80026cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0018      	movs	r0, r3
 8002448:	f005 f89c 	bl	8007584 <USB_ReadInterrupts>
 800244c:	0002      	movs	r2, r0
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	01db      	lsls	r3, r3, #7
 8002452:	401a      	ands	r2, r3
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	01db      	lsls	r3, r3, #7
 8002458:	429a      	cmp	r2, r3
 800245a:	d10b      	bne.n	8002474 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2244      	movs	r2, #68	; 0x44
 8002462:	5a9b      	ldrh	r3, [r3, r2]
 8002464:	b29a      	uxth	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4992      	ldr	r1, [pc, #584]	; (80026b4 <HAL_PCD_IRQHandler+0x2e0>)
 800246c:	400a      	ands	r2, r1
 800246e:	b291      	uxth	r1, r2
 8002470:	2244      	movs	r2, #68	; 0x44
 8002472:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0018      	movs	r0, r3
 800247a:	f005 f883 	bl	8007584 <USB_ReadInterrupts>
 800247e:	0002      	movs	r2, r0
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	019b      	lsls	r3, r3, #6
 8002484:	401a      	ands	r2, r3
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	019b      	lsls	r3, r3, #6
 800248a:	429a      	cmp	r2, r3
 800248c:	d10b      	bne.n	80024a6 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2244      	movs	r2, #68	; 0x44
 8002494:	5a9b      	ldrh	r3, [r3, r2]
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4986      	ldr	r1, [pc, #536]	; (80026b8 <HAL_PCD_IRQHandler+0x2e4>)
 800249e:	400a      	ands	r2, r1
 80024a0:	b291      	uxth	r1, r2
 80024a2:	2244      	movs	r2, #68	; 0x44
 80024a4:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f005 f86a 	bl	8007584 <USB_ReadInterrupts>
 80024b0:	0002      	movs	r2, r0
 80024b2:	2380      	movs	r3, #128	; 0x80
 80024b4:	015b      	lsls	r3, r3, #5
 80024b6:	401a      	ands	r2, r3
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	015b      	lsls	r3, r3, #5
 80024bc:	429a      	cmp	r2, r3
 80024be:	d137      	bne.n	8002530 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	5a9b      	ldrh	r3, [r3, r2]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2104      	movs	r1, #4
 80024d0:	438a      	bics	r2, r1
 80024d2:	b291      	uxth	r1, r2
 80024d4:	2240      	movs	r2, #64	; 0x40
 80024d6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2240      	movs	r2, #64	; 0x40
 80024de:	5a9b      	ldrh	r3, [r3, r2]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2108      	movs	r1, #8
 80024e8:	438a      	bics	r2, r1
 80024ea:	b291      	uxth	r1, r2
 80024ec:	2240      	movs	r2, #64	; 0x40
 80024ee:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	23b8      	movs	r3, #184	; 0xb8
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d109      	bne.n	8002510 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	23b8      	movs	r3, #184	; 0xb8
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	2100      	movs	r1, #0
 8002504:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2100      	movs	r1, #0
 800250a:	0018      	movs	r0, r3
 800250c:	f001 fc7a 	bl	8003e04 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	0018      	movs	r0, r3
 8002514:	f006 ff84 	bl	8009420 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2244      	movs	r2, #68	; 0x44
 800251e:	5a9b      	ldrh	r3, [r3, r2]
 8002520:	b29a      	uxth	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4965      	ldr	r1, [pc, #404]	; (80026bc <HAL_PCD_IRQHandler+0x2e8>)
 8002528:	400a      	ands	r2, r1
 800252a:	b291      	uxth	r1, r2
 800252c:	2244      	movs	r2, #68	; 0x44
 800252e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0018      	movs	r0, r3
 8002536:	f005 f825 	bl	8007584 <USB_ReadInterrupts>
 800253a:	0002      	movs	r2, r0
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	401a      	ands	r2, r3
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	429a      	cmp	r2, r3
 8002548:	d127      	bne.n	800259a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2240      	movs	r2, #64	; 0x40
 8002550:	5a9b      	ldrh	r3, [r3, r2]
 8002552:	b29a      	uxth	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2108      	movs	r1, #8
 800255a:	430a      	orrs	r2, r1
 800255c:	b291      	uxth	r1, r2
 800255e:	2240      	movs	r2, #64	; 0x40
 8002560:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2244      	movs	r2, #68	; 0x44
 8002568:	5a9b      	ldrh	r3, [r3, r2]
 800256a:	b29a      	uxth	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4953      	ldr	r1, [pc, #332]	; (80026c0 <HAL_PCD_IRQHandler+0x2ec>)
 8002572:	400a      	ands	r2, r1
 8002574:	b291      	uxth	r1, r2
 8002576:	2244      	movs	r2, #68	; 0x44
 8002578:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2240      	movs	r2, #64	; 0x40
 8002580:	5a9b      	ldrh	r3, [r3, r2]
 8002582:	b29a      	uxth	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2104      	movs	r1, #4
 800258a:	430a      	orrs	r2, r1
 800258c:	b291      	uxth	r1, r2
 800258e:	2240      	movs	r2, #64	; 0x40
 8002590:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	0018      	movs	r0, r3
 8002596:	f006 ff27 	bl	80093e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	0018      	movs	r0, r3
 80025a0:	f004 fff0 	bl	8007584 <USB_ReadInterrupts>
 80025a4:	0003      	movs	r3, r0
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	4013      	ands	r3, r2
 80025aa:	2b80      	cmp	r3, #128	; 0x80
 80025ac:	d145      	bne.n	800263a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2244      	movs	r2, #68	; 0x44
 80025b4:	5a9b      	ldrh	r3, [r3, r2]
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2180      	movs	r1, #128	; 0x80
 80025be:	438a      	bics	r2, r1
 80025c0:	b291      	uxth	r1, r2
 80025c2:	2244      	movs	r2, #68	; 0x44
 80025c4:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	23b8      	movs	r3, #184	; 0xb8
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d12f      	bne.n	8002632 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2240      	movs	r2, #64	; 0x40
 80025d8:	5a9b      	ldrh	r3, [r3, r2]
 80025da:	b29a      	uxth	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2104      	movs	r1, #4
 80025e2:	430a      	orrs	r2, r1
 80025e4:	b291      	uxth	r1, r2
 80025e6:	2240      	movs	r2, #64	; 0x40
 80025e8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	5a9b      	ldrh	r3, [r3, r2]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2108      	movs	r1, #8
 80025fa:	430a      	orrs	r2, r1
 80025fc:	b291      	uxth	r1, r2
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	23b8      	movs	r3, #184	; 0xb8
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	2101      	movs	r1, #1
 800260a:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2254      	movs	r2, #84	; 0x54
 8002612:	5a9b      	ldrh	r3, [r3, r2]
 8002614:	b29b      	uxth	r3, r3
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	223c      	movs	r2, #60	; 0x3c
 800261a:	4013      	ands	r3, r2
 800261c:	0019      	movs	r1, r3
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	23b9      	movs	r3, #185	; 0xb9
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2101      	movs	r1, #1
 800262a:	0018      	movs	r0, r3
 800262c:	f001 fbea 	bl	8003e04 <HAL_PCDEx_LPM_Callback>
 8002630:	e003      	b.n	800263a <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	0018      	movs	r0, r3
 8002636:	f006 fed7 	bl	80093e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0018      	movs	r0, r3
 8002640:	f004 ffa0 	bl	8007584 <USB_ReadInterrupts>
 8002644:	0002      	movs	r2, r0
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	401a      	ands	r2, r3
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	429a      	cmp	r2, r3
 8002652:	d10f      	bne.n	8002674 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2244      	movs	r2, #68	; 0x44
 800265a:	5a9b      	ldrh	r3, [r3, r2]
 800265c:	b29a      	uxth	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4918      	ldr	r1, [pc, #96]	; (80026c4 <HAL_PCD_IRQHandler+0x2f0>)
 8002664:	400a      	ands	r2, r1
 8002666:	b291      	uxth	r1, r2
 8002668:	2244      	movs	r2, #68	; 0x44
 800266a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	0018      	movs	r0, r3
 8002670:	f006 fe86 	bl	8009380 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	0018      	movs	r0, r3
 800267a:	f004 ff83 	bl	8007584 <USB_ReadInterrupts>
 800267e:	0002      	movs	r2, r0
 8002680:	2380      	movs	r3, #128	; 0x80
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	401a      	ands	r2, r3
 8002686:	2380      	movs	r3, #128	; 0x80
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	429a      	cmp	r2, r3
 800268c:	d10b      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2244      	movs	r2, #68	; 0x44
 8002694:	5a9b      	ldrh	r3, [r3, r2]
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	490a      	ldr	r1, [pc, #40]	; (80026c8 <HAL_PCD_IRQHandler+0x2f4>)
 800269e:	400a      	ands	r2, r1
 80026a0:	b291      	uxth	r1, r2
 80026a2:	2244      	movs	r2, #68	; 0x44
 80026a4:	5299      	strh	r1, [r3, r2]
  }
}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	46bd      	mov	sp, r7
 80026aa:	b002      	add	sp, #8
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	fffffbff 	.word	0xfffffbff
 80026b4:	ffffbfff 	.word	0xffffbfff
 80026b8:	ffffdfff 	.word	0xffffdfff
 80026bc:	ffffefff 	.word	0xffffefff
 80026c0:	fffff7ff 	.word	0xfffff7ff
 80026c4:	fffffdff 	.word	0xfffffdff
 80026c8:	fffffeff 	.word	0xfffffeff

080026cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	000a      	movs	r2, r1
 80026d6:	1cfb      	adds	r3, r7, #3
 80026d8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	23aa      	movs	r3, #170	; 0xaa
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d101      	bne.n	80026ea <HAL_PCD_SetAddress+0x1e>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e017      	b.n	800271a <HAL_PCD_SetAddress+0x4e>
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	23aa      	movs	r3, #170	; 0xaa
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	2101      	movs	r1, #1
 80026f2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	1cfa      	adds	r2, r7, #3
 80026f8:	2124      	movs	r1, #36	; 0x24
 80026fa:	7812      	ldrb	r2, [r2, #0]
 80026fc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	1cfb      	adds	r3, r7, #3
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	0019      	movs	r1, r3
 8002708:	0010      	movs	r0, r2
 800270a:	f004 ff11 	bl	8007530 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	23aa      	movs	r3, #170	; 0xaa
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	2100      	movs	r1, #0
 8002716:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	0018      	movs	r0, r3
 800271c:	46bd      	mov	sp, r7
 800271e:	b002      	add	sp, #8
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002722:	b590      	push	{r4, r7, lr}
 8002724:	b085      	sub	sp, #20
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
 800272a:	000c      	movs	r4, r1
 800272c:	0010      	movs	r0, r2
 800272e:	0019      	movs	r1, r3
 8002730:	1cfb      	adds	r3, r7, #3
 8002732:	1c22      	adds	r2, r4, #0
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	003b      	movs	r3, r7
 8002738:	1c02      	adds	r2, r0, #0
 800273a:	801a      	strh	r2, [r3, #0]
 800273c:	1cbb      	adds	r3, r7, #2
 800273e:	1c0a      	adds	r2, r1, #0
 8002740:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002742:	230b      	movs	r3, #11
 8002744:	18fb      	adds	r3, r7, r3
 8002746:	2200      	movs	r2, #0
 8002748:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800274a:	1cfb      	adds	r3, r7, #3
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b25b      	sxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	da0f      	bge.n	8002774 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002754:	1cfb      	adds	r3, r7, #3
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2207      	movs	r2, #7
 800275a:	4013      	ands	r3, r2
 800275c:	1c5a      	adds	r2, r3, #1
 800275e:	0013      	movs	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	189b      	adds	r3, r3, r2
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	18d3      	adds	r3, r2, r3
 800276a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	705a      	strb	r2, [r3, #1]
 8002772:	e00f      	b.n	8002794 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002774:	1cfb      	adds	r3, r7, #3
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2207      	movs	r2, #7
 800277a:	401a      	ands	r2, r3
 800277c:	0013      	movs	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	189b      	adds	r3, r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	3369      	adds	r3, #105	; 0x69
 8002786:	33ff      	adds	r3, #255	; 0xff
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	18d3      	adds	r3, r2, r3
 800278c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002794:	1cfb      	adds	r3, r7, #3
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2207      	movs	r2, #7
 800279a:	4013      	ands	r3, r2
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027a2:	003b      	movs	r3, r7
 80027a4:	881a      	ldrh	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1cba      	adds	r2, r7, #2
 80027ae:	7812      	ldrb	r2, [r2, #0]
 80027b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	785b      	ldrb	r3, [r3, #1]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027c4:	1cbb      	adds	r3, r7, #2
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d102      	bne.n	80027d2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	23aa      	movs	r3, #170	; 0xaa
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_PCD_EP_Open+0xc0>
 80027de:	2302      	movs	r3, #2
 80027e0:	e013      	b.n	800280a <HAL_PCD_EP_Open+0xe8>
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	23aa      	movs	r3, #170	; 0xaa
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	2101      	movs	r1, #1
 80027ea:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	0011      	movs	r1, r2
 80027f4:	0018      	movs	r0, r3
 80027f6:	f002 ffab 	bl	8005750 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	23aa      	movs	r3, #170	; 0xaa
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	2100      	movs	r1, #0
 8002802:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002804:	230b      	movs	r3, #11
 8002806:	18fb      	adds	r3, r7, r3
 8002808:	781b      	ldrb	r3, [r3, #0]
}
 800280a:	0018      	movs	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	b005      	add	sp, #20
 8002810:	bd90      	pop	{r4, r7, pc}

08002812 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	000a      	movs	r2, r1
 800281c:	1cfb      	adds	r3, r7, #3
 800281e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002820:	1cfb      	adds	r3, r7, #3
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	b25b      	sxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	da0f      	bge.n	800284a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800282a:	1cfb      	adds	r3, r7, #3
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2207      	movs	r2, #7
 8002830:	4013      	ands	r3, r2
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	0013      	movs	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	189b      	adds	r3, r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	18d3      	adds	r3, r2, r3
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2201      	movs	r2, #1
 8002846:	705a      	strb	r2, [r3, #1]
 8002848:	e00f      	b.n	800286a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800284a:	1cfb      	adds	r3, r7, #3
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2207      	movs	r2, #7
 8002850:	401a      	ands	r2, r3
 8002852:	0013      	movs	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	189b      	adds	r3, r3, r2
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	3369      	adds	r3, #105	; 0x69
 800285c:	33ff      	adds	r3, #255	; 0xff
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	18d3      	adds	r3, r2, r3
 8002862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800286a:	1cfb      	adds	r3, r7, #3
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2207      	movs	r2, #7
 8002870:	4013      	ands	r3, r2
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	23aa      	movs	r3, #170	; 0xaa
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_PCD_EP_Close+0x76>
 8002884:	2302      	movs	r3, #2
 8002886:	e011      	b.n	80028ac <HAL_PCD_EP_Close+0x9a>
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	23aa      	movs	r3, #170	; 0xaa
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	2101      	movs	r1, #1
 8002890:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	0011      	movs	r1, r2
 800289a:	0018      	movs	r0, r3
 800289c:	f003 facc 	bl	8005e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	23aa      	movs	r3, #170	; 0xaa
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	2100      	movs	r1, #0
 80028a8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b004      	add	sp, #16
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	60f8      	str	r0, [r7, #12]
 80028bc:	607a      	str	r2, [r7, #4]
 80028be:	603b      	str	r3, [r7, #0]
 80028c0:	200b      	movs	r0, #11
 80028c2:	183b      	adds	r3, r7, r0
 80028c4:	1c0a      	adds	r2, r1, #0
 80028c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c8:	0001      	movs	r1, r0
 80028ca:	187b      	adds	r3, r7, r1
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2207      	movs	r2, #7
 80028d0:	401a      	ands	r2, r3
 80028d2:	0013      	movs	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	3369      	adds	r3, #105	; 0x69
 80028dc:	33ff      	adds	r3, #255	; 0xff
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	18d3      	adds	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2200      	movs	r2, #0
 80028fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2207      	movs	r2, #7
 8002902:	4013      	ands	r3, r2
 8002904:	b2da      	uxtb	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800290a:	187b      	adds	r3, r7, r1
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2207      	movs	r2, #7
 8002910:	4013      	ands	r3, r2
 8002912:	d107      	bne.n	8002924 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	0011      	movs	r1, r2
 800291c:	0018      	movs	r0, r3
 800291e:	f003 fc4b 	bl	80061b8 <USB_EPStartXfer>
 8002922:	e006      	b.n	8002932 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	0011      	movs	r1, r2
 800292c:	0018      	movs	r0, r3
 800292e:	f003 fc43 	bl	80061b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b006      	add	sp, #24
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	200b      	movs	r0, #11
 800294a:	183b      	adds	r3, r7, r0
 800294c:	1c0a      	adds	r2, r1, #0
 800294e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002950:	183b      	adds	r3, r7, r0
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2207      	movs	r2, #7
 8002956:	4013      	ands	r3, r2
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	0013      	movs	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	189b      	adds	r3, r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	2224      	movs	r2, #36	; 0x24
 8002978:	2101      	movs	r1, #1
 800297a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2200      	movs	r2, #0
 8002986:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2201      	movs	r2, #1
 800298c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800298e:	183b      	adds	r3, r7, r0
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2207      	movs	r2, #7
 8002994:	4013      	ands	r3, r2
 8002996:	b2da      	uxtb	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800299c:	183b      	adds	r3, r7, r0
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2207      	movs	r2, #7
 80029a2:	4013      	ands	r3, r2
 80029a4:	d107      	bne.n	80029b6 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	0011      	movs	r1, r2
 80029ae:	0018      	movs	r0, r3
 80029b0:	f003 fc02 	bl	80061b8 <USB_EPStartXfer>
 80029b4:	e006      	b.n	80029c4 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	0011      	movs	r1, r2
 80029be:	0018      	movs	r0, r3
 80029c0:	f003 fbfa 	bl	80061b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b006      	add	sp, #24
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	000a      	movs	r2, r1
 80029d8:	1cfb      	adds	r3, r7, #3
 80029da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029dc:	1cfb      	adds	r3, r7, #3
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2207      	movs	r2, #7
 80029e2:	401a      	ands	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d901      	bls.n	80029f0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e046      	b.n	8002a7e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029f0:	1cfb      	adds	r3, r7, #3
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	b25b      	sxtb	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da0f      	bge.n	8002a1a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029fa:	1cfb      	adds	r3, r7, #3
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2207      	movs	r2, #7
 8002a00:	4013      	ands	r3, r2
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	0013      	movs	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	189b      	adds	r3, r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	18d3      	adds	r3, r2, r3
 8002a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	705a      	strb	r2, [r3, #1]
 8002a18:	e00d      	b.n	8002a36 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a1a:	1cfb      	adds	r3, r7, #3
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	0013      	movs	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	189b      	adds	r3, r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	3369      	adds	r3, #105	; 0x69
 8002a28:	33ff      	adds	r3, #255	; 0xff
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	18d3      	adds	r3, r2, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3c:	1cfb      	adds	r3, r7, #3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2207      	movs	r2, #7
 8002a42:	4013      	ands	r3, r2
 8002a44:	b2da      	uxtb	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	23aa      	movs	r3, #170	; 0xaa
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_PCD_EP_SetStall+0x8c>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e011      	b.n	8002a7e <HAL_PCD_EP_SetStall+0xb0>
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	23aa      	movs	r3, #170	; 0xaa
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	2101      	movs	r1, #1
 8002a62:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	0011      	movs	r1, r2
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f004 fc5d 	bl	800732c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	23aa      	movs	r3, #170	; 0xaa
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	2100      	movs	r1, #0
 8002a7a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	0018      	movs	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	b004      	add	sp, #16
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	000a      	movs	r2, r1
 8002a90:	1cfb      	adds	r3, r7, #3
 8002a92:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a94:	1cfb      	adds	r3, r7, #3
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	220f      	movs	r2, #15
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d901      	bls.n	8002aa8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e048      	b.n	8002b3a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aa8:	1cfb      	adds	r3, r7, #3
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b25b      	sxtb	r3, r3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	da0f      	bge.n	8002ad2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab2:	1cfb      	adds	r3, r7, #3
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	0013      	movs	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	189b      	adds	r3, r3, r2
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	18d3      	adds	r3, r2, r3
 8002ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	705a      	strb	r2, [r3, #1]
 8002ad0:	e00f      	b.n	8002af2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ad2:	1cfb      	adds	r3, r7, #3
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	401a      	ands	r2, r3
 8002ada:	0013      	movs	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	3369      	adds	r3, #105	; 0x69
 8002ae4:	33ff      	adds	r3, #255	; 0xff
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af8:	1cfb      	adds	r3, r7, #3
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2207      	movs	r2, #7
 8002afe:	4013      	ands	r3, r2
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	23aa      	movs	r3, #170	; 0xaa
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d101      	bne.n	8002b16 <HAL_PCD_EP_ClrStall+0x90>
 8002b12:	2302      	movs	r3, #2
 8002b14:	e011      	b.n	8002b3a <HAL_PCD_EP_ClrStall+0xb4>
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	23aa      	movs	r3, #170	; 0xaa
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f004 fc4f 	bl	80073cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	23aa      	movs	r3, #170	; 0xaa
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	2100      	movs	r1, #0
 8002b36:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b44:	b5b0      	push	{r4, r5, r7, lr}
 8002b46:	b096      	sub	sp, #88	; 0x58
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b4c:	f000 fbd8 	bl	8003300 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	2056      	movs	r0, #86	; 0x56
 8002b56:	183b      	adds	r3, r7, r0
 8002b58:	2144      	movs	r1, #68	; 0x44
 8002b5a:	5a52      	ldrh	r2, [r2, r1]
 8002b5c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b5e:	183b      	adds	r3, r7, r0
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	2455      	movs	r4, #85	; 0x55
 8002b66:	193b      	adds	r3, r7, r4
 8002b68:	210f      	movs	r1, #15
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002b6e:	193b      	adds	r3, r7, r4
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d000      	beq.n	8002b78 <PCD_EP_ISR_Handler+0x34>
 8002b76:	e179      	b.n	8002e6c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b78:	183b      	adds	r3, r7, r0
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d154      	bne.n	8002c2c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	881b      	ldrh	r3, [r3, #0]
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	200e      	movs	r0, #14
 8002b8c:	183b      	adds	r3, r7, r0
 8002b8e:	49af      	ldr	r1, [pc, #700]	; (8002e4c <PCD_EP_ISR_Handler+0x308>)
 8002b90:	400a      	ands	r2, r1
 8002b92:	801a      	strh	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	183a      	adds	r2, r7, r0
 8002b9a:	8812      	ldrh	r2, [r2, #0]
 8002b9c:	49ac      	ldr	r1, [pc, #688]	; (8002e50 <PCD_EP_ISR_Handler+0x30c>)
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3328      	adds	r3, #40	; 0x28
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2250      	movs	r2, #80	; 0x50
 8002bb0:	5a9b      	ldrh	r3, [r3, r2]
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	001a      	movs	r2, r3
 8002bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	18d2      	adds	r2, r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	18d3      	adds	r3, r2, r3
 8002bc4:	4aa3      	ldr	r2, [pc, #652]	; (8002e54 <PCD_EP_ISR_Handler+0x310>)
 8002bc6:	4694      	mov	ip, r2
 8002bc8:	4463      	add	r3, ip
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	059b      	lsls	r3, r3, #22
 8002bce:	0d9a      	lsrs	r2, r3, #22
 8002bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	18d2      	adds	r2, r2, r3
 8002bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002be0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2100      	movs	r1, #0
 8002be6:	0018      	movs	r0, r3
 8002be8:	f006 fbac 	bl	8009344 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2224      	movs	r2, #36	; 0x24
 8002bf0:	5c9b      	ldrb	r3, [r3, r2]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <PCD_EP_ISR_Handler+0xb8>
 8002bf8:	f000 fb82 	bl	8003300 <PCD_EP_ISR_Handler+0x7bc>
 8002bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <PCD_EP_ISR_Handler+0xc4>
 8002c04:	f000 fb7c 	bl	8003300 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	5c9b      	ldrb	r3, [r3, r2]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	4252      	negs	r2, r2
 8002c14:	4313      	orrs	r3, r2
 8002c16:	b2da      	uxtb	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b291      	uxth	r1, r2
 8002c1e:	224c      	movs	r2, #76	; 0x4c
 8002c20:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2224      	movs	r2, #36	; 0x24
 8002c26:	2100      	movs	r1, #0
 8002c28:	5499      	strb	r1, [r3, r2]
 8002c2a:	e369      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3369      	adds	r3, #105	; 0x69
 8002c30:	33ff      	adds	r3, #255	; 0xff
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2152      	movs	r1, #82	; 0x52
 8002c3a:	187b      	adds	r3, r7, r1
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c40:	187b      	adds	r3, r7, r1
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d037      	beq.n	8002cbc <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2250      	movs	r2, #80	; 0x50
 8002c52:	5a9b      	ldrh	r3, [r3, r2]
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	001a      	movs	r2, r3
 8002c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	18d2      	adds	r2, r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	4a7c      	ldr	r2, [pc, #496]	; (8002e58 <PCD_EP_ISR_Handler+0x314>)
 8002c68:	4694      	mov	ip, r2
 8002c6a:	4463      	add	r3, ip
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	059b      	lsls	r3, r3, #22
 8002c70:	0d9a      	lsrs	r2, r3, #22
 8002c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	22ac      	movs	r2, #172	; 0xac
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	1899      	adds	r1, r3, r2
 8002c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c84:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c88:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	f004 fccc 	bl	8007628 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	2010      	movs	r0, #16
 8002c9a:	183b      	adds	r3, r7, r0
 8002c9c:	496f      	ldr	r1, [pc, #444]	; (8002e5c <PCD_EP_ISR_Handler+0x318>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	801a      	strh	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	183a      	adds	r2, r7, r0
 8002ca8:	8812      	ldrh	r2, [r2, #0]
 8002caa:	2180      	movs	r1, #128	; 0x80
 8002cac:	430a      	orrs	r2, r1
 8002cae:	b292      	uxth	r2, r2
 8002cb0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f006 fb0f 	bl	80092d8 <HAL_PCD_SetupStageCallback>
 8002cba:	e321      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002cbc:	2352      	movs	r3, #82	; 0x52
 8002cbe:	18fb      	adds	r3, r7, r3
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	5e9b      	ldrsh	r3, [r3, r2]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db00      	blt.n	8002cca <PCD_EP_ISR_Handler+0x186>
 8002cc8:	e31a      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	881b      	ldrh	r3, [r3, #0]
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	201e      	movs	r0, #30
 8002cd4:	183b      	adds	r3, r7, r0
 8002cd6:	4961      	ldr	r1, [pc, #388]	; (8002e5c <PCD_EP_ISR_Handler+0x318>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	801a      	strh	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	183a      	adds	r2, r7, r0
 8002ce2:	8812      	ldrh	r2, [r2, #0]
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2250      	movs	r2, #80	; 0x50
 8002cf2:	5a9b      	ldrh	r3, [r3, r2]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	18d2      	adds	r2, r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	4a54      	ldr	r2, [pc, #336]	; (8002e58 <PCD_EP_ISR_Handler+0x314>)
 8002d08:	4694      	mov	ip, r2
 8002d0a:	4463      	add	r3, ip
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	059b      	lsls	r3, r3, #22
 8002d10:	0d9a      	lsrs	r2, r3, #22
 8002d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d14:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d01a      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x210>
 8002d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d016      	beq.n	8002d54 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d2c:	6959      	ldr	r1, [r3, #20]
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d30:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d34:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	f004 fc76 	bl	8007628 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	18d2      	adds	r2, r2, r3
 8002d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d48:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	0018      	movs	r0, r3
 8002d50:	f006 fad7 	bl	8009302 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4013      	ands	r3, r2
 8002d64:	d000      	beq.n	8002d68 <PCD_EP_ISR_Handler+0x224>
 8002d66:	e2cb      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2250      	movs	r2, #80	; 0x50
 8002d74:	5a9b      	ldrh	r3, [r3, r2]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	001a      	movs	r2, r3
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	189b      	adds	r3, r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	4a35      	ldr	r2, [pc, #212]	; (8002e58 <PCD_EP_ISR_Handler+0x314>)
 8002d84:	4694      	mov	ip, r2
 8002d86:	4463      	add	r3, ip
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d110      	bne.n	8002db4 <PCD_EP_ISR_Handler+0x270>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	881b      	ldrh	r3, [r3, #0]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	4a31      	ldr	r2, [pc, #196]	; (8002e60 <PCD_EP_ISR_Handler+0x31c>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	b29a      	uxth	r2, r3
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	801a      	strh	r2, [r3, #0]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <PCD_EP_ISR_Handler+0x30c>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	e02b      	b.n	8002e0c <PCD_EP_ISR_Handler+0x2c8>
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	2b3e      	cmp	r3, #62	; 0x3e
 8002dba:	d812      	bhi.n	8002de2 <PCD_EP_ISR_Handler+0x29e>
 8002dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	085b      	lsrs	r3, r3, #1
 8002dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d002      	beq.n	8002dd4 <PCD_EP_ISR_Handler+0x290>
 8002dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	029b      	lsls	r3, r3, #10
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	801a      	strh	r2, [r3, #0]
 8002de0:	e014      	b.n	8002e0c <PCD_EP_ISR_Handler+0x2c8>
 8002de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	221f      	movs	r2, #31
 8002df0:	4013      	ands	r3, r2
 8002df2:	d102      	bne.n	8002dfa <PCD_EP_ISR_Handler+0x2b6>
 8002df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df6:	3b01      	subs	r3, #1
 8002df8:	647b      	str	r3, [r7, #68]	; 0x44
 8002dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	029b      	lsls	r3, r3, #10
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4a13      	ldr	r2, [pc, #76]	; (8002e50 <PCD_EP_ISR_Handler+0x30c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	2012      	movs	r0, #18
 8002e16:	183b      	adds	r3, r7, r0
 8002e18:	4912      	ldr	r1, [pc, #72]	; (8002e64 <PCD_EP_ISR_Handler+0x320>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	183b      	adds	r3, r7, r0
 8002e20:	183a      	adds	r2, r7, r0
 8002e22:	8812      	ldrh	r2, [r2, #0]
 8002e24:	2180      	movs	r1, #128	; 0x80
 8002e26:	0149      	lsls	r1, r1, #5
 8002e28:	404a      	eors	r2, r1
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	183b      	adds	r3, r7, r0
 8002e2e:	183a      	adds	r2, r7, r0
 8002e30:	8812      	ldrh	r2, [r2, #0]
 8002e32:	2180      	movs	r1, #128	; 0x80
 8002e34:	0189      	lsls	r1, r1, #6
 8002e36:	404a      	eors	r2, r1
 8002e38:	801a      	strh	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	183a      	adds	r2, r7, r0
 8002e40:	8812      	ldrh	r2, [r2, #0]
 8002e42:	4909      	ldr	r1, [pc, #36]	; (8002e68 <PCD_EP_ISR_Handler+0x324>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	b292      	uxth	r2, r2
 8002e48:	801a      	strh	r2, [r3, #0]
 8002e4a:	e259      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
 8002e4c:	ffff8f0f 	.word	0xffff8f0f
 8002e50:	ffff8000 	.word	0xffff8000
 8002e54:	00000402 	.word	0x00000402
 8002e58:	00000406 	.word	0x00000406
 8002e5c:	00000f8f 	.word	0x00000f8f
 8002e60:	ffff83ff 	.word	0xffff83ff
 8002e64:	ffffbf8f 	.word	0xffffbf8f
 8002e68:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	001a      	movs	r2, r3
 8002e72:	2055      	movs	r0, #85	; 0x55
 8002e74:	183b      	adds	r3, r7, r0
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	18d2      	adds	r2, r2, r3
 8002e7c:	2152      	movs	r1, #82	; 0x52
 8002e7e:	187b      	adds	r3, r7, r1
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e84:	187b      	adds	r3, r7, r1
 8002e86:	2200      	movs	r2, #0
 8002e88:	5e9b      	ldrsh	r3, [r3, r2]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	db00      	blt.n	8002e90 <PCD_EP_ISR_Handler+0x34c>
 8002e8e:	e0fa      	b.n	8003086 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	001a      	movs	r2, r3
 8002e96:	183b      	adds	r3, r7, r0
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	18d3      	adds	r3, r2, r3
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	b29a      	uxth	r2, r3
 8002ea2:	2450      	movs	r4, #80	; 0x50
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	49cf      	ldr	r1, [pc, #828]	; (80031e4 <PCD_EP_ISR_Handler+0x6a0>)
 8002ea8:	400a      	ands	r2, r1
 8002eaa:	801a      	strh	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	001a      	movs	r2, r3
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	18d3      	adds	r3, r2, r3
 8002eba:	193a      	adds	r2, r7, r4
 8002ebc:	8812      	ldrh	r2, [r2, #0]
 8002ebe:	2180      	movs	r1, #128	; 0x80
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	0013      	movs	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	3369      	adds	r3, #105	; 0x69
 8002ed4:	33ff      	adds	r3, #255	; 0xff
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	18d3      	adds	r3, r2, r3
 8002eda:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	7b1b      	ldrb	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d125      	bne.n	8002f30 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2250      	movs	r2, #80	; 0x50
 8002eea:	5a9b      	ldrh	r3, [r3, r2]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	001a      	movs	r2, r3
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	18d2      	adds	r2, r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	18d3      	adds	r3, r2, r3
 8002efe:	4aba      	ldr	r2, [pc, #744]	; (80031e8 <PCD_EP_ISR_Handler+0x6a4>)
 8002f00:	4694      	mov	ip, r2
 8002f02:	4463      	add	r3, ip
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	2448      	movs	r4, #72	; 0x48
 8002f08:	193b      	adds	r3, r7, r4
 8002f0a:	0592      	lsls	r2, r2, #22
 8002f0c:	0d92      	lsrs	r2, r2, #22
 8002f0e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002f10:	193b      	adds	r3, r7, r4
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d100      	bne.n	8002f1a <PCD_EP_ISR_Handler+0x3d6>
 8002f18:	e08d      	b.n	8003036 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
 8002f1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f20:	6959      	ldr	r1, [r3, #20]
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	88da      	ldrh	r2, [r3, #6]
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f004 fb7d 	bl	8007628 <USB_ReadPMA>
 8002f2e:	e082      	b.n	8003036 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f32:	78db      	ldrb	r3, [r3, #3]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d10c      	bne.n	8002f52 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f38:	2348      	movs	r3, #72	; 0x48
 8002f3a:	18fc      	adds	r4, r7, r3
 8002f3c:	2352      	movs	r3, #82	; 0x52
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	0018      	movs	r0, r3
 8002f48:	f000 f9ee 	bl	8003328 <HAL_PCD_EP_DB_Receive>
 8002f4c:	0003      	movs	r3, r0
 8002f4e:	8023      	strh	r3, [r4, #0]
 8002f50:	e071      	b.n	8003036 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	001a      	movs	r2, r3
 8002f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	18d3      	adds	r3, r2, r3
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	204a      	movs	r0, #74	; 0x4a
 8002f66:	183b      	adds	r3, r7, r0
 8002f68:	49a0      	ldr	r1, [pc, #640]	; (80031ec <PCD_EP_ISR_Handler+0x6a8>)
 8002f6a:	400a      	ands	r2, r1
 8002f6c:	801a      	strh	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	001a      	movs	r2, r3
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	18d3      	adds	r3, r2, r3
 8002f7c:	183a      	adds	r2, r7, r0
 8002f7e:	8812      	ldrh	r2, [r2, #0]
 8002f80:	499b      	ldr	r1, [pc, #620]	; (80031f0 <PCD_EP_ISR_Handler+0x6ac>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	b292      	uxth	r2, r2
 8002f86:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	001a      	movs	r2, r3
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	01db      	lsls	r3, r3, #7
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d024      	beq.n	8002fee <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2250      	movs	r2, #80	; 0x50
 8002faa:	5a9b      	ldrh	r3, [r3, r2]
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	001a      	movs	r2, r3
 8002fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	18d2      	adds	r2, r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	18d3      	adds	r3, r2, r3
 8002fbe:	4a8d      	ldr	r2, [pc, #564]	; (80031f4 <PCD_EP_ISR_Handler+0x6b0>)
 8002fc0:	4694      	mov	ip, r2
 8002fc2:	4463      	add	r3, ip
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	2448      	movs	r4, #72	; 0x48
 8002fc8:	193b      	adds	r3, r7, r4
 8002fca:	0592      	lsls	r2, r2, #22
 8002fcc:	0d92      	lsrs	r2, r2, #22
 8002fce:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002fd0:	193b      	adds	r3, r7, r4
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d02e      	beq.n	8003036 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6818      	ldr	r0, [r3, #0]
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	6959      	ldr	r1, [r3, #20]
 8002fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe2:	891a      	ldrh	r2, [r3, #8]
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	f004 fb1e 	bl	8007628 <USB_ReadPMA>
 8002fec:	e023      	b.n	8003036 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2250      	movs	r2, #80	; 0x50
 8002ff4:	5a9b      	ldrh	r3, [r3, r2]
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	001a      	movs	r2, r3
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	18d2      	adds	r2, r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	18d3      	adds	r3, r2, r3
 8003008:	4a77      	ldr	r2, [pc, #476]	; (80031e8 <PCD_EP_ISR_Handler+0x6a4>)
 800300a:	4694      	mov	ip, r2
 800300c:	4463      	add	r3, ip
 800300e:	881a      	ldrh	r2, [r3, #0]
 8003010:	2448      	movs	r4, #72	; 0x48
 8003012:	193b      	adds	r3, r7, r4
 8003014:	0592      	lsls	r2, r2, #22
 8003016:	0d92      	lsrs	r2, r2, #22
 8003018:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800301a:	193b      	adds	r3, r7, r4
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d009      	beq.n	8003036 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003028:	6959      	ldr	r1, [r3, #20]
 800302a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302c:	895a      	ldrh	r2, [r3, #10]
 800302e:	193b      	adds	r3, r7, r4
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	f004 faf9 	bl	8007628 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	2148      	movs	r1, #72	; 0x48
 800303c:	187b      	adds	r3, r7, r1
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	18d2      	adds	r2, r2, r3
 8003042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003044:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003048:	695a      	ldr	r2, [r3, #20]
 800304a:	187b      	adds	r3, r7, r1
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	18d2      	adds	r2, r2, r3
 8003050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003052:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d005      	beq.n	8003068 <PCD_EP_ISR_Handler+0x524>
 800305c:	187b      	adds	r3, r7, r1
 800305e:	881a      	ldrh	r2, [r3, #0]
 8003060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003068:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800306a:	781a      	ldrb	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	0011      	movs	r1, r2
 8003070:	0018      	movs	r0, r3
 8003072:	f006 f946 	bl	8009302 <HAL_PCD_DataOutStageCallback>
 8003076:	e006      	b.n	8003086 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800307e:	0011      	movs	r1, r2
 8003080:	0018      	movs	r0, r3
 8003082:	f003 f899 	bl	80061b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003086:	2452      	movs	r4, #82	; 0x52
 8003088:	193b      	adds	r3, r7, r4
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	2280      	movs	r2, #128	; 0x80
 800308e:	4013      	ands	r3, r2
 8003090:	d100      	bne.n	8003094 <PCD_EP_ISR_Handler+0x550>
 8003092:	e135      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003094:	2055      	movs	r0, #85	; 0x55
 8003096:	183b      	adds	r3, r7, r0
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	0013      	movs	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	189b      	adds	r3, r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	001a      	movs	r2, r3
 80030b0:	183b      	adds	r3, r7, r0
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	18d3      	adds	r3, r2, r3
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	2542      	movs	r5, #66	; 0x42
 80030be:	197b      	adds	r3, r7, r5
 80030c0:	494d      	ldr	r1, [pc, #308]	; (80031f8 <PCD_EP_ISR_Handler+0x6b4>)
 80030c2:	400a      	ands	r2, r1
 80030c4:	801a      	strh	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	001a      	movs	r2, r3
 80030cc:	183b      	adds	r3, r7, r0
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	18d3      	adds	r3, r2, r3
 80030d4:	197a      	adds	r2, r7, r5
 80030d6:	8812      	ldrh	r2, [r2, #0]
 80030d8:	4948      	ldr	r1, [pc, #288]	; (80031fc <PCD_EP_ISR_Handler+0x6b8>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	b292      	uxth	r2, r2
 80030de:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80030e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e2:	78db      	ldrb	r3, [r3, #3]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d100      	bne.n	80030ea <PCD_EP_ISR_Handler+0x5a6>
 80030e8:	e0ad      	b.n	8003246 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030f0:	193b      	adds	r3, r7, r4
 80030f2:	881b      	ldrh	r3, [r3, #0]
 80030f4:	2240      	movs	r2, #64	; 0x40
 80030f6:	4013      	ands	r3, r2
 80030f8:	d046      	beq.n	8003188 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d125      	bne.n	800314e <PCD_EP_ISR_Handler+0x60a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2250      	movs	r2, #80	; 0x50
 800310e:	5a9b      	ldrh	r3, [r3, r2]
 8003110:	b29b      	uxth	r3, r3
 8003112:	001a      	movs	r2, r3
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	189b      	adds	r3, r3, r2
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	00da      	lsls	r2, r3, #3
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	18d3      	adds	r3, r2, r3
 8003124:	4a33      	ldr	r2, [pc, #204]	; (80031f4 <PCD_EP_ISR_Handler+0x6b0>)
 8003126:	4694      	mov	ip, r2
 8003128:	4463      	add	r3, ip
 800312a:	623b      	str	r3, [r7, #32]
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	881b      	ldrh	r3, [r3, #0]
 8003130:	b29b      	uxth	r3, r3
 8003132:	4a33      	ldr	r2, [pc, #204]	; (8003200 <PCD_EP_ISR_Handler+0x6bc>)
 8003134:	4013      	ands	r3, r2
 8003136:	b29a      	uxth	r2, r3
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4a2e      	ldr	r2, [pc, #184]	; (80031fc <PCD_EP_ISR_Handler+0x6b8>)
 8003144:	4313      	orrs	r3, r2
 8003146:	b29a      	uxth	r2, r3
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	e073      	b.n	8003236 <PCD_EP_ISR_Handler+0x6f2>
 800314e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003150:	785b      	ldrb	r3, [r3, #1]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d16f      	bne.n	8003236 <PCD_EP_ISR_Handler+0x6f2>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2250      	movs	r2, #80	; 0x50
 8003162:	5a9b      	ldrh	r3, [r3, r2]
 8003164:	b29b      	uxth	r3, r3
 8003166:	001a      	movs	r2, r3
 8003168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316a:	189b      	adds	r3, r3, r2
 800316c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	00da      	lsls	r2, r3, #3
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003176:	18d3      	adds	r3, r2, r3
 8003178:	4a1e      	ldr	r2, [pc, #120]	; (80031f4 <PCD_EP_ISR_Handler+0x6b0>)
 800317a:	4694      	mov	ip, r2
 800317c:	4463      	add	r3, ip
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	2200      	movs	r2, #0
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	e056      	b.n	8003236 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800318e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d136      	bne.n	8003204 <PCD_EP_ISR_Handler+0x6c0>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	637b      	str	r3, [r7, #52]	; 0x34
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2250      	movs	r2, #80	; 0x50
 80031a2:	5a9b      	ldrh	r3, [r3, r2]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	001a      	movs	r2, r3
 80031a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031aa:	189b      	adds	r3, r3, r2
 80031ac:	637b      	str	r3, [r7, #52]	; 0x34
 80031ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	00da      	lsls	r2, r3, #3
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	18d3      	adds	r3, r2, r3
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <PCD_EP_ISR_Handler+0x6a4>)
 80031ba:	4694      	mov	ip, r2
 80031bc:	4463      	add	r3, ip
 80031be:	633b      	str	r3, [r7, #48]	; 0x30
 80031c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <PCD_EP_ISR_Handler+0x6bc>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ce:	801a      	strh	r2, [r3, #0]
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4a09      	ldr	r2, [pc, #36]	; (80031fc <PCD_EP_ISR_Handler+0x6b8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	b29a      	uxth	r2, r3
 80031dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031de:	801a      	strh	r2, [r3, #0]
 80031e0:	e029      	b.n	8003236 <PCD_EP_ISR_Handler+0x6f2>
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	00000f8f 	.word	0x00000f8f
 80031e8:	00000406 	.word	0x00000406
 80031ec:	ffff8f8f 	.word	0xffff8f8f
 80031f0:	ffff80c0 	.word	0xffff80c0
 80031f4:	00000402 	.word	0x00000402
 80031f8:	ffff8f0f 	.word	0xffff8f0f
 80031fc:	ffff8000 	.word	0xffff8000
 8003200:	ffff83ff 	.word	0xffff83ff
 8003204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003206:	785b      	ldrb	r3, [r3, #1]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d114      	bne.n	8003236 <PCD_EP_ISR_Handler+0x6f2>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2250      	movs	r2, #80	; 0x50
 8003212:	5a9b      	ldrh	r3, [r3, r2]
 8003214:	b29b      	uxth	r3, r3
 8003216:	001a      	movs	r2, r3
 8003218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321a:	189b      	adds	r3, r3, r2
 800321c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800321e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	00da      	lsls	r2, r3, #3
 8003224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003226:	18d3      	adds	r3, r2, r3
 8003228:	4a3d      	ldr	r2, [pc, #244]	; (8003320 <PCD_EP_ISR_Handler+0x7dc>)
 800322a:	4694      	mov	ip, r2
 800322c:	4463      	add	r3, ip
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	2200      	movs	r2, #0
 8003234:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003238:	781a      	ldrb	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0011      	movs	r1, r2
 800323e:	0018      	movs	r0, r3
 8003240:	f006 f880 	bl	8009344 <HAL_PCD_DataInStageCallback>
 8003244:	e05c      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8003246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003248:	78db      	ldrb	r3, [r3, #3]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d150      	bne.n	80032f0 <PCD_EP_ISR_Handler+0x7ac>
 800324e:	2352      	movs	r3, #82	; 0x52
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	881a      	ldrh	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d149      	bne.n	80032f0 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2250      	movs	r2, #80	; 0x50
 8003262:	5a9b      	ldrh	r3, [r3, r2]
 8003264:	b29b      	uxth	r3, r3
 8003266:	001a      	movs	r2, r3
 8003268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	00db      	lsls	r3, r3, #3
 800326e:	18d2      	adds	r2, r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	18d3      	adds	r3, r2, r3
 8003276:	4a2b      	ldr	r2, [pc, #172]	; (8003324 <PCD_EP_ISR_Handler+0x7e0>)
 8003278:	4694      	mov	ip, r2
 800327a:	4463      	add	r3, ip
 800327c:	881a      	ldrh	r2, [r3, #0]
 800327e:	2140      	movs	r1, #64	; 0x40
 8003280:	187b      	adds	r3, r7, r1
 8003282:	0592      	lsls	r2, r2, #22
 8003284:	0d92      	lsrs	r2, r2, #22
 8003286:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	187b      	adds	r3, r7, r1
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d907      	bls.n	80032a4 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003296:	699a      	ldr	r2, [r3, #24]
 8003298:	187b      	adds	r3, r7, r1
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	1ad2      	subs	r2, r2, r3
 800329e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	e002      	b.n	80032aa <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 80032a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80032aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d107      	bne.n	80032c2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b4:	781a      	ldrb	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f006 f842 	bl	8009344 <HAL_PCD_DataInStageCallback>
 80032c0:	e01e      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80032c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	2140      	movs	r1, #64	; 0x40
 80032c8:	187b      	adds	r3, r7, r1
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	18d2      	adds	r2, r2, r3
 80032ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80032d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	187b      	adds	r3, r7, r1
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	18d2      	adds	r2, r2, r3
 80032dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032de:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032e6:	0011      	movs	r1, r2
 80032e8:	0018      	movs	r0, r3
 80032ea:	f002 ff65 	bl	80061b8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80032ee:	e007      	b.n	8003300 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032f0:	2352      	movs	r3, #82	; 0x52
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	881a      	ldrh	r2, [r3, #0]
 80032f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 f930 	bl	8003560 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2244      	movs	r2, #68	; 0x44
 8003306:	5a9b      	ldrh	r3, [r3, r2]
 8003308:	b29b      	uxth	r3, r3
 800330a:	b21b      	sxth	r3, r3
 800330c:	2b00      	cmp	r3, #0
 800330e:	da01      	bge.n	8003314 <PCD_EP_ISR_Handler+0x7d0>
 8003310:	f7ff fc1e 	bl	8002b50 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	0018      	movs	r0, r3
 8003318:	46bd      	mov	sp, r7
 800331a:	b016      	add	sp, #88	; 0x58
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	00000406 	.word	0x00000406
 8003324:	00000402 	.word	0x00000402

08003328 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b089      	sub	sp, #36	; 0x24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	1dbb      	adds	r3, r7, #6
 8003334:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003336:	1dbb      	adds	r3, r7, #6
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	01db      	lsls	r3, r3, #7
 800333e:	4013      	ands	r3, r2
 8003340:	d100      	bne.n	8003344 <HAL_PCD_EP_DB_Receive+0x1c>
 8003342:	e07d      	b.n	8003440 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2250      	movs	r2, #80	; 0x50
 800334a:	5a9b      	ldrh	r3, [r3, r2]
 800334c:	b29b      	uxth	r3, r3
 800334e:	001a      	movs	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	18d2      	adds	r2, r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	18d3      	adds	r3, r2, r3
 800335e:	4a7a      	ldr	r2, [pc, #488]	; (8003548 <HAL_PCD_EP_DB_Receive+0x220>)
 8003360:	4694      	mov	ip, r2
 8003362:	4463      	add	r3, ip
 8003364:	881a      	ldrh	r2, [r3, #0]
 8003366:	211a      	movs	r1, #26
 8003368:	187b      	adds	r3, r7, r1
 800336a:	0592      	lsls	r2, r2, #22
 800336c:	0d92      	lsrs	r2, r2, #22
 800336e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	699a      	ldr	r2, [r3, #24]
 8003374:	187b      	adds	r3, r7, r1
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d307      	bcc.n	800338c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	699a      	ldr	r2, [r3, #24]
 8003380:	187b      	adds	r3, r7, r1
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	1ad2      	subs	r2, r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	619a      	str	r2, [r3, #24]
 800338a:	e002      	b.n	8003392 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2200      	movs	r2, #0
 8003390:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d121      	bne.n	80033de <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	001a      	movs	r2, r3
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	18d3      	adds	r3, r2, r3
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	2018      	movs	r0, #24
 80033ae:	183b      	adds	r3, r7, r0
 80033b0:	4966      	ldr	r1, [pc, #408]	; (800354c <HAL_PCD_EP_DB_Receive+0x224>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	183b      	adds	r3, r7, r0
 80033b8:	183a      	adds	r2, r7, r0
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	2180      	movs	r1, #128	; 0x80
 80033be:	0189      	lsls	r1, r1, #6
 80033c0:	404a      	eors	r2, r1
 80033c2:	801a      	strh	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	001a      	movs	r2, r3
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	183a      	adds	r2, r7, r0
 80033d4:	8812      	ldrh	r2, [r2, #0]
 80033d6:	495e      	ldr	r1, [pc, #376]	; (8003550 <HAL_PCD_EP_DB_Receive+0x228>)
 80033d8:	430a      	orrs	r2, r1
 80033da:	b292      	uxth	r2, r2
 80033dc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033de:	1dbb      	adds	r3, r7, #6
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	4013      	ands	r3, r2
 80033e6:	d01a      	beq.n	800341e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	001a      	movs	r2, r3
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	18d3      	adds	r3, r2, r3
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	2016      	movs	r0, #22
 80033fc:	183b      	adds	r3, r7, r0
 80033fe:	4955      	ldr	r1, [pc, #340]	; (8003554 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003400:	400a      	ands	r2, r1
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	001a      	movs	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	18d3      	adds	r3, r2, r3
 8003412:	183a      	adds	r2, r7, r0
 8003414:	8812      	ldrh	r2, [r2, #0]
 8003416:	4950      	ldr	r1, [pc, #320]	; (8003558 <HAL_PCD_EP_DB_Receive+0x230>)
 8003418:	430a      	orrs	r2, r1
 800341a:	b292      	uxth	r2, r2
 800341c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800341e:	241a      	movs	r4, #26
 8003420:	193b      	adds	r3, r7, r4
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d100      	bne.n	800342a <HAL_PCD_EP_DB_Receive+0x102>
 8003428:	e086      	b.n	8003538 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6959      	ldr	r1, [r3, #20]
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	891a      	ldrh	r2, [r3, #8]
 8003436:	193b      	adds	r3, r7, r4
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	f004 f8f5 	bl	8007628 <USB_ReadPMA>
 800343e:	e07b      	b.n	8003538 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2250      	movs	r2, #80	; 0x50
 8003446:	5a9b      	ldrh	r3, [r3, r2]
 8003448:	b29b      	uxth	r3, r3
 800344a:	001a      	movs	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	18d2      	adds	r2, r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	4a40      	ldr	r2, [pc, #256]	; (800355c <HAL_PCD_EP_DB_Receive+0x234>)
 800345c:	4694      	mov	ip, r2
 800345e:	4463      	add	r3, ip
 8003460:	881a      	ldrh	r2, [r3, #0]
 8003462:	211a      	movs	r1, #26
 8003464:	187b      	adds	r3, r7, r1
 8003466:	0592      	lsls	r2, r2, #22
 8003468:	0d92      	lsrs	r2, r2, #22
 800346a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	699a      	ldr	r2, [r3, #24]
 8003470:	187b      	adds	r3, r7, r1
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d307      	bcc.n	8003488 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	187b      	adds	r3, r7, r1
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	619a      	str	r2, [r3, #24]
 8003486:	e002      	b.n	800348e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2200      	movs	r2, #0
 800348c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d121      	bne.n	80034da <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	001a      	movs	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	18d3      	adds	r3, r2, r3
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	201e      	movs	r0, #30
 80034aa:	183b      	adds	r3, r7, r0
 80034ac:	4927      	ldr	r1, [pc, #156]	; (800354c <HAL_PCD_EP_DB_Receive+0x224>)
 80034ae:	400a      	ands	r2, r1
 80034b0:	801a      	strh	r2, [r3, #0]
 80034b2:	183b      	adds	r3, r7, r0
 80034b4:	183a      	adds	r2, r7, r0
 80034b6:	8812      	ldrh	r2, [r2, #0]
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0189      	lsls	r1, r1, #6
 80034bc:	404a      	eors	r2, r1
 80034be:	801a      	strh	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	001a      	movs	r2, r3
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	18d3      	adds	r3, r2, r3
 80034ce:	183a      	adds	r2, r7, r0
 80034d0:	8812      	ldrh	r2, [r2, #0]
 80034d2:	491f      	ldr	r1, [pc, #124]	; (8003550 <HAL_PCD_EP_DB_Receive+0x228>)
 80034d4:	430a      	orrs	r2, r1
 80034d6:	b292      	uxth	r2, r2
 80034d8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034da:	1dbb      	adds	r3, r7, #6
 80034dc:	881b      	ldrh	r3, [r3, #0]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	4013      	ands	r3, r2
 80034e2:	d11a      	bne.n	800351a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	001a      	movs	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	18d3      	adds	r3, r2, r3
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	201c      	movs	r0, #28
 80034f8:	183b      	adds	r3, r7, r0
 80034fa:	4916      	ldr	r1, [pc, #88]	; (8003554 <HAL_PCD_EP_DB_Receive+0x22c>)
 80034fc:	400a      	ands	r2, r1
 80034fe:	801a      	strh	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	001a      	movs	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	18d3      	adds	r3, r2, r3
 800350e:	183a      	adds	r2, r7, r0
 8003510:	8812      	ldrh	r2, [r2, #0]
 8003512:	4911      	ldr	r1, [pc, #68]	; (8003558 <HAL_PCD_EP_DB_Receive+0x230>)
 8003514:	430a      	orrs	r2, r1
 8003516:	b292      	uxth	r2, r2
 8003518:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800351a:	241a      	movs	r4, #26
 800351c:	193b      	adds	r3, r7, r4
 800351e:	881b      	ldrh	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6959      	ldr	r1, [r3, #20]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	895a      	ldrh	r2, [r3, #10]
 8003530:	193b      	adds	r3, r7, r4
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	f004 f878 	bl	8007628 <USB_ReadPMA>
    }
  }

  return count;
 8003538:	231a      	movs	r3, #26
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	881b      	ldrh	r3, [r3, #0]
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b009      	add	sp, #36	; 0x24
 8003544:	bd90      	pop	{r4, r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	00000402 	.word	0x00000402
 800354c:	ffffbf8f 	.word	0xffffbf8f
 8003550:	ffff8080 	.word	0xffff8080
 8003554:	ffff8f8f 	.word	0xffff8f8f
 8003558:	ffff80c0 	.word	0xffff80c0
 800355c:	00000406 	.word	0x00000406

08003560 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b0a2      	sub	sp, #136	; 0x88
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	1dbb      	adds	r3, r7, #6
 800356c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800356e:	1dbb      	adds	r3, r7, #6
 8003570:	881b      	ldrh	r3, [r3, #0]
 8003572:	2240      	movs	r2, #64	; 0x40
 8003574:	4013      	ands	r3, r2
 8003576:	d100      	bne.n	800357a <HAL_PCD_EP_DB_Transmit+0x1a>
 8003578:	e1c8      	b.n	800390c <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2250      	movs	r2, #80	; 0x50
 8003580:	5a9b      	ldrh	r3, [r3, r2]
 8003582:	b29b      	uxth	r3, r3
 8003584:	001a      	movs	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	18d2      	adds	r2, r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	18d3      	adds	r3, r2, r3
 8003594:	4ad7      	ldr	r2, [pc, #860]	; (80038f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003596:	4694      	mov	ip, r2
 8003598:	4463      	add	r3, ip
 800359a:	881a      	ldrh	r2, [r3, #0]
 800359c:	214e      	movs	r1, #78	; 0x4e
 800359e:	187b      	adds	r3, r7, r1
 80035a0:	0592      	lsls	r2, r2, #22
 80035a2:	0d92      	lsrs	r2, r2, #22
 80035a4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	699a      	ldr	r2, [r3, #24]
 80035aa:	187b      	adds	r3, r7, r1
 80035ac:	881b      	ldrh	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d907      	bls.n	80035c2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	699a      	ldr	r2, [r3, #24]
 80035b6:	187b      	adds	r3, r7, r1
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	1ad2      	subs	r2, r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	619a      	str	r2, [r3, #24]
 80035c0:	e002      	b.n	80035c8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d000      	beq.n	80035d2 <HAL_PCD_EP_DB_Transmit+0x72>
 80035d0:	e0b5      	b.n	800373e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	785b      	ldrb	r3, [r3, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d125      	bne.n	8003626 <HAL_PCD_EP_DB_Transmit+0xc6>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2250      	movs	r2, #80	; 0x50
 80035e6:	5a9b      	ldrh	r3, [r3, r2]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	001a      	movs	r2, r3
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	189b      	adds	r3, r3, r2
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	00da      	lsls	r2, r3, #3
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	18d3      	adds	r3, r2, r3
 80035fc:	4abd      	ldr	r2, [pc, #756]	; (80038f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 80035fe:	4694      	mov	ip, r2
 8003600:	4463      	add	r3, ip
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	b29b      	uxth	r3, r3
 800360a:	4abb      	ldr	r2, [pc, #748]	; (80038f8 <HAL_PCD_EP_DB_Transmit+0x398>)
 800360c:	4013      	ands	r3, r2
 800360e:	b29a      	uxth	r2, r3
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	801a      	strh	r2, [r3, #0]
 8003614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	4ab8      	ldr	r2, [pc, #736]	; (80038fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 800361c:	4313      	orrs	r3, r2
 800361e:	b29a      	uxth	r2, r3
 8003620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003622:	801a      	strh	r2, [r3, #0]
 8003624:	e01b      	b.n	800365e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	785b      	ldrb	r3, [r3, #1]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d117      	bne.n	800365e <HAL_PCD_EP_DB_Transmit+0xfe>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	633b      	str	r3, [r7, #48]	; 0x30
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2250      	movs	r2, #80	; 0x50
 800363a:	5a9b      	ldrh	r3, [r3, r2]
 800363c:	b29b      	uxth	r3, r3
 800363e:	001a      	movs	r2, r3
 8003640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003642:	189b      	adds	r3, r3, r2
 8003644:	633b      	str	r3, [r7, #48]	; 0x30
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	00da      	lsls	r2, r3, #3
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	18d3      	adds	r3, r2, r3
 8003650:	4aa8      	ldr	r2, [pc, #672]	; (80038f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003652:	4694      	mov	ip, r2
 8003654:	4463      	add	r3, ip
 8003656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365a:	2200      	movs	r2, #0
 800365c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	623b      	str	r3, [r7, #32]
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	785b      	ldrb	r3, [r3, #1]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d125      	bne.n	80036b8 <HAL_PCD_EP_DB_Transmit+0x158>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2250      	movs	r2, #80	; 0x50
 8003678:	5a9b      	ldrh	r3, [r3, r2]
 800367a:	b29b      	uxth	r3, r3
 800367c:	001a      	movs	r2, r3
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	189b      	adds	r3, r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	00da      	lsls	r2, r3, #3
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	18d3      	adds	r3, r2, r3
 800368e:	4a9c      	ldr	r2, [pc, #624]	; (8003900 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003690:	4694      	mov	ip, r2
 8003692:	4463      	add	r3, ip
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	4a96      	ldr	r2, [pc, #600]	; (80038f8 <HAL_PCD_EP_DB_Transmit+0x398>)
 800369e:	4013      	ands	r3, r2
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	4a93      	ldr	r2, [pc, #588]	; (80038fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	e018      	b.n	80036ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d114      	bne.n	80036ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2250      	movs	r2, #80	; 0x50
 80036c6:	5a9b      	ldrh	r3, [r3, r2]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	001a      	movs	r2, r3
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00da      	lsls	r2, r3, #3
 80036d8:	6a3b      	ldr	r3, [r7, #32]
 80036da:	18d3      	adds	r3, r2, r3
 80036dc:	4a88      	ldr	r2, [pc, #544]	; (8003900 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80036de:	4694      	mov	ip, r2
 80036e0:	4463      	add	r3, ip
 80036e2:	61fb      	str	r3, [r7, #28]
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	2200      	movs	r2, #0
 80036e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	0011      	movs	r1, r2
 80036f2:	0018      	movs	r0, r3
 80036f4:	f005 fe26 	bl	8009344 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036f8:	1dbb      	adds	r3, r7, #6
 80036fa:	881a      	ldrh	r2, [r3, #0]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	01db      	lsls	r3, r3, #7
 8003700:	4013      	ands	r3, r2
 8003702:	d100      	bne.n	8003706 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003704:	e2d4      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	001a      	movs	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	18d3      	adds	r3, r2, r3
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29a      	uxth	r2, r3
 8003718:	2012      	movs	r0, #18
 800371a:	183b      	adds	r3, r7, r0
 800371c:	4979      	ldr	r1, [pc, #484]	; (8003904 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800371e:	400a      	ands	r2, r1
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	001a      	movs	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	18d3      	adds	r3, r2, r3
 8003730:	183a      	adds	r2, r7, r0
 8003732:	8812      	ldrh	r2, [r2, #0]
 8003734:	4974      	ldr	r1, [pc, #464]	; (8003908 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003736:	430a      	orrs	r2, r1
 8003738:	b292      	uxth	r2, r2
 800373a:	801a      	strh	r2, [r3, #0]
 800373c:	e2b8      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800373e:	1dbb      	adds	r3, r7, #6
 8003740:	881a      	ldrh	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	01db      	lsls	r3, r3, #7
 8003746:	4013      	ands	r3, r2
 8003748:	d01a      	beq.n	8003780 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	001a      	movs	r2, r3
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	881b      	ldrh	r3, [r3, #0]
 800375a:	b29a      	uxth	r2, r3
 800375c:	2044      	movs	r0, #68	; 0x44
 800375e:	183b      	adds	r3, r7, r0
 8003760:	4968      	ldr	r1, [pc, #416]	; (8003904 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003762:	400a      	ands	r2, r1
 8003764:	801a      	strh	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	001a      	movs	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	18d3      	adds	r3, r2, r3
 8003774:	183a      	adds	r2, r7, r0
 8003776:	8812      	ldrh	r2, [r2, #0]
 8003778:	4963      	ldr	r1, [pc, #396]	; (8003908 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800377a:	430a      	orrs	r2, r1
 800377c:	b292      	uxth	r2, r2
 800377e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d000      	beq.n	800378c <HAL_PCD_EP_DB_Transmit+0x22c>
 800378a:	e291      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	695a      	ldr	r2, [r3, #20]
 8003790:	214e      	movs	r1, #78	; 0x4e
 8003792:	187b      	adds	r3, r7, r1
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	18d2      	adds	r2, r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	69da      	ldr	r2, [r3, #28]
 80037a0:	187b      	adds	r3, r7, r1
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	18d2      	adds	r2, r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d309      	bcc.n	80037ca <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6a1a      	ldr	r2, [r3, #32]
 80037c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	621a      	str	r2, [r3, #32]
 80037c8:	e016      	b.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d108      	bne.n	80037e4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80037d2:	234e      	movs	r3, #78	; 0x4e
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	2224      	movs	r2, #36	; 0x24
 80037de:	2100      	movs	r1, #0
 80037e0:	5499      	strb	r1, [r3, r2]
 80037e2:	e009      	b.n	80037f8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2224      	movs	r2, #36	; 0x24
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	785b      	ldrb	r3, [r3, #1]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d150      	bne.n	80038a2 <HAL_PCD_EP_DB_Transmit+0x342>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2250      	movs	r2, #80	; 0x50
 800380c:	5a9b      	ldrh	r3, [r3, r2]
 800380e:	b29b      	uxth	r3, r3
 8003810:	001a      	movs	r2, r3
 8003812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003814:	189b      	adds	r3, r3, r2
 8003816:	63bb      	str	r3, [r7, #56]	; 0x38
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	00da      	lsls	r2, r3, #3
 800381e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003820:	18d3      	adds	r3, r2, r3
 8003822:	4a34      	ldr	r2, [pc, #208]	; (80038f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003824:	4694      	mov	ip, r2
 8003826:	4463      	add	r3, ip
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
 800382a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382c:	2b00      	cmp	r3, #0
 800382e:	d110      	bne.n	8003852 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	b29b      	uxth	r3, r3
 8003836:	4a30      	ldr	r2, [pc, #192]	; (80038f8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003838:	4013      	ands	r3, r2
 800383a:	b29a      	uxth	r2, r3
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	801a      	strh	r2, [r3, #0]
 8003840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	4a2d      	ldr	r2, [pc, #180]	; (80038fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	b29a      	uxth	r2, r3
 800384c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384e:	801a      	strh	r2, [r3, #0]
 8003850:	e044      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	2b3e      	cmp	r3, #62	; 0x3e
 8003856:	d810      	bhi.n	800387a <HAL_PCD_EP_DB_Transmit+0x31a>
 8003858:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800385a:	085b      	lsrs	r3, r3, #1
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
 800385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003860:	2201      	movs	r2, #1
 8003862:	4013      	ands	r3, r2
 8003864:	d002      	beq.n	800386c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003868:	3301      	adds	r3, #1
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
 800386c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386e:	b29b      	uxth	r3, r3
 8003870:	029b      	lsls	r3, r3, #10
 8003872:	b29a      	uxth	r2, r3
 8003874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003876:	801a      	strh	r2, [r3, #0]
 8003878:	e030      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x37c>
 800387a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387c:	095b      	lsrs	r3, r3, #5
 800387e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003882:	221f      	movs	r2, #31
 8003884:	4013      	ands	r3, r2
 8003886:	d102      	bne.n	800388e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800388a:	3b01      	subs	r3, #1
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
 800388e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003890:	b29b      	uxth	r3, r3
 8003892:	029b      	lsls	r3, r3, #10
 8003894:	b29b      	uxth	r3, r3
 8003896:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003898:	4313      	orrs	r3, r2
 800389a:	b29a      	uxth	r2, r3
 800389c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389e:	801a      	strh	r2, [r3, #0]
 80038a0:	e01c      	b.n	80038dc <HAL_PCD_EP_DB_Transmit+0x37c>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	785b      	ldrb	r3, [r3, #1]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d118      	bne.n	80038dc <HAL_PCD_EP_DB_Transmit+0x37c>
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	643b      	str	r3, [r7, #64]	; 0x40
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2250      	movs	r2, #80	; 0x50
 80038b6:	5a9b      	ldrh	r3, [r3, r2]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	001a      	movs	r2, r3
 80038bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	643b      	str	r3, [r7, #64]	; 0x40
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	00da      	lsls	r2, r3, #3
 80038c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ca:	18d3      	adds	r3, r2, r3
 80038cc:	4a09      	ldr	r2, [pc, #36]	; (80038f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 80038ce:	4694      	mov	ip, r2
 80038d0:	4463      	add	r3, ip
 80038d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038d6:	b29a      	uxth	r2, r3
 80038d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	6959      	ldr	r1, [r3, #20]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	891a      	ldrh	r2, [r3, #8]
 80038e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f003 fe58 	bl	80075a0 <USB_WritePMA>
 80038f0:	e1de      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	00000402 	.word	0x00000402
 80038f8:	ffff83ff 	.word	0xffff83ff
 80038fc:	ffff8000 	.word	0xffff8000
 8003900:	00000406 	.word	0x00000406
 8003904:	ffff8f8f 	.word	0xffff8f8f
 8003908:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2250      	movs	r2, #80	; 0x50
 8003912:	5a9b      	ldrh	r3, [r3, r2]
 8003914:	b29b      	uxth	r3, r3
 8003916:	001a      	movs	r2, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	18d2      	adds	r2, r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	18d3      	adds	r3, r2, r3
 8003926:	4aca      	ldr	r2, [pc, #808]	; (8003c50 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003928:	4694      	mov	ip, r2
 800392a:	4463      	add	r3, ip
 800392c:	881a      	ldrh	r2, [r3, #0]
 800392e:	214e      	movs	r1, #78	; 0x4e
 8003930:	187b      	adds	r3, r7, r1
 8003932:	0592      	lsls	r2, r2, #22
 8003934:	0d92      	lsrs	r2, r2, #22
 8003936:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	187b      	adds	r3, r7, r1
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	429a      	cmp	r2, r3
 8003942:	d307      	bcc.n	8003954 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699a      	ldr	r2, [r3, #24]
 8003948:	187b      	adds	r3, r7, r1
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	1ad2      	subs	r2, r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	619a      	str	r2, [r3, #24]
 8003952:	e002      	b.n	800395a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	2200      	movs	r2, #0
 8003958:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d000      	beq.n	8003964 <HAL_PCD_EP_DB_Transmit+0x404>
 8003962:	e0c0      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	785b      	ldrb	r3, [r3, #1]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d125      	bne.n	80039b8 <HAL_PCD_EP_DB_Transmit+0x458>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2250      	movs	r2, #80	; 0x50
 8003978:	5a9b      	ldrh	r3, [r3, r2]
 800397a:	b29b      	uxth	r3, r3
 800397c:	001a      	movs	r2, r3
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	189b      	adds	r3, r3, r2
 8003982:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	00da      	lsls	r2, r3, #3
 800398a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398c:	18d3      	adds	r3, r2, r3
 800398e:	4ab1      	ldr	r2, [pc, #708]	; (8003c54 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003990:	4694      	mov	ip, r2
 8003992:	4463      	add	r3, ip
 8003994:	66bb      	str	r3, [r7, #104]	; 0x68
 8003996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003998:	881b      	ldrh	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	4aae      	ldr	r2, [pc, #696]	; (8003c58 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800399e:	4013      	ands	r3, r2
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a4:	801a      	strh	r2, [r3, #0]
 80039a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4aab      	ldr	r2, [pc, #684]	; (8003c5c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	e01b      	b.n	80039f0 <HAL_PCD_EP_DB_Transmit+0x490>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	785b      	ldrb	r3, [r3, #1]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d117      	bne.n	80039f0 <HAL_PCD_EP_DB_Transmit+0x490>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	677b      	str	r3, [r7, #116]	; 0x74
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2250      	movs	r2, #80	; 0x50
 80039cc:	5a9b      	ldrh	r3, [r3, r2]
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	001a      	movs	r2, r3
 80039d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039d4:	189b      	adds	r3, r3, r2
 80039d6:	677b      	str	r3, [r7, #116]	; 0x74
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	00da      	lsls	r2, r3, #3
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	18d3      	adds	r3, r2, r3
 80039e2:	4a9c      	ldr	r2, [pc, #624]	; (8003c54 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80039e4:	4694      	mov	ip, r2
 80039e6:	4463      	add	r3, ip
 80039e8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ec:	2200      	movs	r2, #0
 80039ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	785b      	ldrb	r3, [r3, #1]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d130      	bne.n	8003a60 <HAL_PCD_EP_DB_Transmit+0x500>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	187a      	adds	r2, r7, r1
 8003a06:	6013      	str	r3, [r2, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2250      	movs	r2, #80	; 0x50
 8003a0e:	5a9b      	ldrh	r3, [r3, r2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	001a      	movs	r2, r3
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	189b      	adds	r3, r3, r2
 8003a1a:	187a      	adds	r2, r7, r1
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	00da      	lsls	r2, r3, #3
 8003a24:	187b      	adds	r3, r7, r1
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	18d3      	adds	r3, r2, r3
 8003a2a:	4a89      	ldr	r2, [pc, #548]	; (8003c50 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a2c:	4694      	mov	ip, r2
 8003a2e:	4463      	add	r3, ip
 8003a30:	2184      	movs	r1, #132	; 0x84
 8003a32:	187a      	adds	r2, r7, r1
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4a86      	ldr	r2, [pc, #536]	; (8003c58 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003a40:	4013      	ands	r3, r2
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	801a      	strh	r2, [r3, #0]
 8003a4a:	187b      	adds	r3, r7, r1
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	4a82      	ldr	r2, [pc, #520]	; (8003c5c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	187b      	adds	r3, r7, r1
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e018      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x532>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	785b      	ldrb	r3, [r3, #1]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d114      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x532>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2250      	movs	r2, #80	; 0x50
 8003a6e:	5a9b      	ldrh	r3, [r3, r2]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	001a      	movs	r2, r3
 8003a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a76:	189b      	adds	r3, r3, r2
 8003a78:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	00da      	lsls	r2, r3, #3
 8003a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a82:	18d3      	adds	r3, r2, r3
 8003a84:	4a72      	ldr	r2, [pc, #456]	; (8003c50 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a86:	4694      	mov	ip, r2
 8003a88:	4463      	add	r3, ip
 8003a8a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a8e:	2200      	movs	r2, #0
 8003a90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f005 fc52 	bl	8009344 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aa0:	1dbb      	adds	r3, r7, #6
 8003aa2:	881a      	ldrh	r2, [r3, #0]
 8003aa4:	2380      	movs	r3, #128	; 0x80
 8003aa6:	01db      	lsls	r3, r3, #7
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	d000      	beq.n	8003aae <HAL_PCD_EP_DB_Transmit+0x54e>
 8003aac:	e100      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	001a      	movs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	18d3      	adds	r3, r2, r3
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	2046      	movs	r0, #70	; 0x46
 8003ac2:	183b      	adds	r3, r7, r0
 8003ac4:	4966      	ldr	r1, [pc, #408]	; (8003c60 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	801a      	strh	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	18d3      	adds	r3, r2, r3
 8003ad8:	183a      	adds	r2, r7, r0
 8003ada:	8812      	ldrh	r2, [r2, #0]
 8003adc:	4961      	ldr	r1, [pc, #388]	; (8003c64 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	801a      	strh	r2, [r3, #0]
 8003ae4:	e0e4      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ae6:	1dbb      	adds	r3, r7, #6
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	2380      	movs	r3, #128	; 0x80
 8003aec:	01db      	lsls	r3, r3, #7
 8003aee:	4013      	ands	r3, r2
 8003af0:	d11a      	bne.n	8003b28 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	001a      	movs	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	18d3      	adds	r3, r2, r3
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	204c      	movs	r0, #76	; 0x4c
 8003b06:	183b      	adds	r3, r7, r0
 8003b08:	4955      	ldr	r1, [pc, #340]	; (8003c60 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	001a      	movs	r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	18d3      	adds	r3, r2, r3
 8003b1c:	183a      	adds	r2, r7, r0
 8003b1e:	8812      	ldrh	r2, [r2, #0]
 8003b20:	4950      	ldr	r1, [pc, #320]	; (8003c64 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	b292      	uxth	r2, r2
 8003b26:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	2224      	movs	r2, #36	; 0x24
 8003b2c:	5c9b      	ldrb	r3, [r3, r2]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d000      	beq.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003b32:	e0bd      	b.n	8003cb0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	695a      	ldr	r2, [r3, #20]
 8003b38:	214e      	movs	r1, #78	; 0x4e
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	18d2      	adds	r2, r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	69da      	ldr	r2, [r3, #28]
 8003b48:	187b      	adds	r3, r7, r1
 8003b4a:	881b      	ldrh	r3, [r3, #0]
 8003b4c:	18d2      	adds	r2, r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	6a1a      	ldr	r2, [r3, #32]
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d309      	bcc.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6a:	1ad2      	subs	r2, r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	621a      	str	r2, [r3, #32]
 8003b70:	e016      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d108      	bne.n	8003b8c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003b7a:	234e      	movs	r3, #78	; 0x4e
 8003b7c:	18fb      	adds	r3, r7, r3
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2224      	movs	r2, #36	; 0x24
 8003b86:	2100      	movs	r1, #0
 8003b88:	5499      	strb	r1, [r3, r2]
 8003b8a:	e009      	b.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2200      	movs	r2, #0
 8003b96:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2224      	movs	r2, #36	; 0x24
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d15c      	bne.n	8003c68 <HAL_PCD_EP_DB_Transmit+0x708>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2250      	movs	r2, #80	; 0x50
 8003bba:	5a9b      	ldrh	r3, [r3, r2]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	001a      	movs	r2, r3
 8003bc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bc2:	189b      	adds	r3, r3, r2
 8003bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	00da      	lsls	r2, r3, #3
 8003bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003bce:	18d3      	adds	r3, r2, r3
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003bd2:	4694      	mov	ip, r2
 8003bd4:	4463      	add	r3, ip
 8003bd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d110      	bne.n	8003c00 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8003bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4a1c      	ldr	r2, [pc, #112]	; (8003c58 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bec:	801a      	strh	r2, [r3, #0]
 8003bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	4a19      	ldr	r2, [pc, #100]	; (8003c5c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfc:	801a      	strh	r2, [r3, #0]
 8003bfe:	e04d      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c02:	2b3e      	cmp	r3, #62	; 0x3e
 8003c04:	d810      	bhi.n	8003c28 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c08:	085b      	lsrs	r3, r3, #1
 8003c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0e:	2201      	movs	r2, #1
 8003c10:	4013      	ands	r3, r2
 8003c12:	d002      	beq.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c16:	3301      	adds	r3, #1
 8003c18:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	029b      	lsls	r3, r3, #10
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	e039      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	657b      	str	r3, [r7, #84]	; 0x54
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	221f      	movs	r2, #31
 8003c32:	4013      	ands	r3, r2
 8003c34:	d102      	bne.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	4a05      	ldr	r2, [pc, #20]	; (8003c5c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c4c:	801a      	strh	r2, [r3, #0]
 8003c4e:	e025      	b.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c50:	00000406 	.word	0x00000406
 8003c54:	00000402 	.word	0x00000402
 8003c58:	ffff83ff 	.word	0xffff83ff
 8003c5c:	ffff8000 	.word	0xffff8000
 8003c60:	ffff8f8f 	.word	0xffff8f8f
 8003c64:	ffffc080 	.word	0xffffc080
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	785b      	ldrb	r3, [r3, #1]
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d115      	bne.n	8003c9c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2250      	movs	r2, #80	; 0x50
 8003c76:	5a9b      	ldrh	r3, [r3, r2]
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c7e:	189b      	adds	r3, r3, r2
 8003c80:	667b      	str	r3, [r7, #100]	; 0x64
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	00da      	lsls	r2, r3, #3
 8003c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c8a:	18d3      	adds	r3, r2, r3
 8003c8c:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003c8e:	4694      	mov	ip, r2
 8003c90:	4463      	add	r3, ip
 8003c92:	663b      	str	r3, [r7, #96]	; 0x60
 8003c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c9a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6959      	ldr	r1, [r3, #20]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	895a      	ldrh	r2, [r3, #10]
 8003ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	f003 fc78 	bl	80075a0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	001a      	movs	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	18d3      	adds	r3, r2, r3
 8003cbe:	881b      	ldrh	r3, [r3, #0]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	2010      	movs	r0, #16
 8003cc4:	183b      	adds	r3, r7, r0
 8003cc6:	4911      	ldr	r1, [pc, #68]	; (8003d0c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003cc8:	400a      	ands	r2, r1
 8003cca:	801a      	strh	r2, [r3, #0]
 8003ccc:	183b      	adds	r3, r7, r0
 8003cce:	183a      	adds	r2, r7, r0
 8003cd0:	8812      	ldrh	r2, [r2, #0]
 8003cd2:	2110      	movs	r1, #16
 8003cd4:	404a      	eors	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
 8003cd8:	183b      	adds	r3, r7, r0
 8003cda:	183a      	adds	r2, r7, r0
 8003cdc:	8812      	ldrh	r2, [r2, #0]
 8003cde:	2120      	movs	r1, #32
 8003ce0:	404a      	eors	r2, r1
 8003ce2:	801a      	strh	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	001a      	movs	r2, r3
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	18d3      	adds	r3, r2, r3
 8003cf2:	183a      	adds	r2, r7, r0
 8003cf4:	8812      	ldrh	r2, [r2, #0]
 8003cf6:	4906      	ldr	r1, [pc, #24]	; (8003d10 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	b292      	uxth	r2, r2
 8003cfc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	0018      	movs	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	b022      	add	sp, #136	; 0x88
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	00000406 	.word	0x00000406
 8003d0c:	ffff8fbf 	.word	0xffff8fbf
 8003d10:	ffff8080 	.word	0xffff8080

08003d14 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	0008      	movs	r0, r1
 8003d1e:	0011      	movs	r1, r2
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	240a      	movs	r4, #10
 8003d24:	193b      	adds	r3, r7, r4
 8003d26:	1c02      	adds	r2, r0, #0
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	1c0a      	adds	r2, r1, #0
 8003d30:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d32:	0021      	movs	r1, r4
 8003d34:	187b      	adds	r3, r7, r1
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	2280      	movs	r2, #128	; 0x80
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00c      	beq.n	8003d5c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d42:	187b      	adds	r3, r7, r1
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	2207      	movs	r2, #7
 8003d48:	4013      	ands	r3, r2
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	0013      	movs	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	189b      	adds	r3, r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	18d3      	adds	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e00b      	b.n	8003d74 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d5c:	230a      	movs	r3, #10
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	0013      	movs	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	3369      	adds	r3, #105	; 0x69
 8003d6c:	33ff      	adds	r3, #255	; 0xff
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	18d3      	adds	r3, r2, r3
 8003d72:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d74:	2308      	movs	r3, #8
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d107      	bne.n	8003d8e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2200      	movs	r2, #0
 8003d82:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	80da      	strh	r2, [r3, #6]
 8003d8c:	e00b      	b.n	8003da6 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2201      	movs	r2, #1
 8003d92:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	b29a      	uxth	r2, r3
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	0c1b      	lsrs	r3, r3, #16
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b007      	add	sp, #28
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	23ba      	movs	r3, #186	; 0xba
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	23b8      	movs	r3, #184	; 0xb8
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	2100      	movs	r1, #0
 8003dd0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2254      	movs	r2, #84	; 0x54
 8003dd6:	5a9b      	ldrh	r3, [r3, r2]
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	b299      	uxth	r1, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2254      	movs	r2, #84	; 0x54
 8003de4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2254      	movs	r2, #84	; 0x54
 8003dea:	5a9b      	ldrh	r3, [r3, r2]
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2202      	movs	r2, #2
 8003df0:	4313      	orrs	r3, r2
 8003df2:	b299      	uxth	r1, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2254      	movs	r2, #84	; 0x54
 8003df8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b004      	add	sp, #16
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	000a      	movs	r2, r1
 8003e0e:	1cfb      	adds	r3, r7, #3
 8003e10:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b002      	add	sp, #8
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e1c:	b5b0      	push	{r4, r5, r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d102      	bne.n	8003e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f000 fbbf 	bl	80045ae <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e30:	4bc9      	ldr	r3, [pc, #804]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	220c      	movs	r2, #12
 8003e36:	4013      	ands	r3, r2
 8003e38:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e3a:	4bc7      	ldr	r3, [pc, #796]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	025b      	lsls	r3, r3, #9
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d100      	bne.n	8003e52 <HAL_RCC_OscConfig+0x36>
 8003e50:	e07e      	b.n	8003f50 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d007      	beq.n	8003e68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	2b0c      	cmp	r3, #12
 8003e5c:	d112      	bne.n	8003e84 <HAL_RCC_OscConfig+0x68>
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	2380      	movs	r3, #128	; 0x80
 8003e62:	025b      	lsls	r3, r3, #9
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10d      	bne.n	8003e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e68:	4bbb      	ldr	r3, [pc, #748]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	029b      	lsls	r3, r3, #10
 8003e70:	4013      	ands	r3, r2
 8003e72:	d100      	bne.n	8003e76 <HAL_RCC_OscConfig+0x5a>
 8003e74:	e06b      	b.n	8003f4e <HAL_RCC_OscConfig+0x132>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d167      	bne.n	8003f4e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f000 fb95 	bl	80045ae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	025b      	lsls	r3, r3, #9
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d107      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x84>
 8003e90:	4bb1      	ldr	r3, [pc, #708]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4bb0      	ldr	r3, [pc, #704]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003e96:	2180      	movs	r1, #128	; 0x80
 8003e98:	0249      	lsls	r1, r1, #9
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e027      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	23a0      	movs	r3, #160	; 0xa0
 8003ea6:	02db      	lsls	r3, r3, #11
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d10e      	bne.n	8003eca <HAL_RCC_OscConfig+0xae>
 8003eac:	4baa      	ldr	r3, [pc, #680]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	4ba9      	ldr	r3, [pc, #676]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	02c9      	lsls	r1, r1, #11
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	4ba7      	ldr	r3, [pc, #668]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4ba6      	ldr	r3, [pc, #664]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	0249      	lsls	r1, r1, #9
 8003ec4:	430a      	orrs	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e012      	b.n	8003ef0 <HAL_RCC_OscConfig+0xd4>
 8003eca:	4ba3      	ldr	r3, [pc, #652]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4ba2      	ldr	r3, [pc, #648]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ed0:	49a2      	ldr	r1, [pc, #648]	; (800415c <HAL_RCC_OscConfig+0x340>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	4ba0      	ldr	r3, [pc, #640]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	025b      	lsls	r3, r3, #9
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60fb      	str	r3, [r7, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4b9c      	ldr	r3, [pc, #624]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b9b      	ldr	r3, [pc, #620]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003eea:	499d      	ldr	r1, [pc, #628]	; (8004160 <HAL_RCC_OscConfig+0x344>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d015      	beq.n	8003f24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f948 	bl	800118c <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f00:	e009      	b.n	8003f16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f02:	f7fd f943 	bl	800118c <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b64      	cmp	r3, #100	; 0x64
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	f000 fb4c 	bl	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003f16:	4b90      	ldr	r3, [pc, #576]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	029b      	lsls	r3, r3, #10
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d0ef      	beq.n	8003f02 <HAL_RCC_OscConfig+0xe6>
 8003f22:	e015      	b.n	8003f50 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fd f932 	bl	800118c <HAL_GetTick>
 8003f28:	0003      	movs	r3, r0
 8003f2a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f2e:	f7fd f92d 	bl	800118c <HAL_GetTick>
 8003f32:	0002      	movs	r2, r0
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b64      	cmp	r3, #100	; 0x64
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e336      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f40:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2380      	movs	r3, #128	; 0x80
 8003f46:	029b      	lsls	r3, r3, #10
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d1f0      	bne.n	8003f2e <HAL_RCC_OscConfig+0x112>
 8003f4c:	e000      	b.n	8003f50 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f4e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2202      	movs	r2, #2
 8003f56:	4013      	ands	r3, r2
 8003f58:	d100      	bne.n	8003f5c <HAL_RCC_OscConfig+0x140>
 8003f5a:	e099      	b.n	8004090 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	2220      	movs	r2, #32
 8003f66:	4013      	ands	r3, r2
 8003f68:	d009      	beq.n	8003f7e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003f6a:	4b7b      	ldr	r3, [pc, #492]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b7a      	ldr	r3, [pc, #488]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003f70:	2120      	movs	r1, #32
 8003f72:	430a      	orrs	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	2220      	movs	r2, #32
 8003f7a:	4393      	bics	r3, r2
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d13e      	bne.n	8004008 <HAL_RCC_OscConfig+0x1ec>
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d13b      	bne.n	8004008 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f90:	4b71      	ldr	r3, [pc, #452]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2204      	movs	r2, #4
 8003f96:	4013      	ands	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x188>
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e304      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa4:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4a6e      	ldr	r2, [pc, #440]	; (8004164 <HAL_RCC_OscConfig+0x348>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	021a      	lsls	r2, r3, #8
 8003fb4:	4b68      	ldr	r3, [pc, #416]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fba:	4b67      	ldr	r3, [pc, #412]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2209      	movs	r2, #9
 8003fc0:	4393      	bics	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	4b64      	ldr	r3, [pc, #400]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fcc:	f000 fc42 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8003fd0:	0001      	movs	r1, r0
 8003fd2:	4b61      	ldr	r3, [pc, #388]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	091b      	lsrs	r3, r3, #4
 8003fd8:	220f      	movs	r2, #15
 8003fda:	4013      	ands	r3, r2
 8003fdc:	4a62      	ldr	r2, [pc, #392]	; (8004168 <HAL_RCC_OscConfig+0x34c>)
 8003fde:	5cd3      	ldrb	r3, [r2, r3]
 8003fe0:	000a      	movs	r2, r1
 8003fe2:	40da      	lsrs	r2, r3
 8003fe4:	4b61      	ldr	r3, [pc, #388]	; (800416c <HAL_RCC_OscConfig+0x350>)
 8003fe6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003fe8:	4b61      	ldr	r3, [pc, #388]	; (8004170 <HAL_RCC_OscConfig+0x354>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2513      	movs	r5, #19
 8003fee:	197c      	adds	r4, r7, r5
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7fd f885 	bl	8001100 <HAL_InitTick>
 8003ff6:	0003      	movs	r3, r0
 8003ff8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003ffa:	197b      	adds	r3, r7, r5
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d046      	beq.n	8004090 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004002:	197b      	adds	r3, r7, r5
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	e2d2      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	2b00      	cmp	r3, #0
 800400c:	d027      	beq.n	800405e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800400e:	4b52      	ldr	r3, [pc, #328]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2209      	movs	r2, #9
 8004014:	4393      	bics	r3, r2
 8004016:	0019      	movs	r1, r3
 8004018:	4b4f      	ldr	r3, [pc, #316]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 800401a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800401c:	430a      	orrs	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004020:	f7fd f8b4 	bl	800118c <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800402a:	f7fd f8af 	bl	800118c <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e2b8      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800403c:	4b46      	ldr	r3, [pc, #280]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2204      	movs	r2, #4
 8004042:	4013      	ands	r3, r2
 8004044:	d0f1      	beq.n	800402a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004046:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	4a46      	ldr	r2, [pc, #280]	; (8004164 <HAL_RCC_OscConfig+0x348>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	021a      	lsls	r2, r3, #8
 8004056:	4b40      	ldr	r3, [pc, #256]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004058:	430a      	orrs	r2, r1
 800405a:	605a      	str	r2, [r3, #4]
 800405c:	e018      	b.n	8004090 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	4b3d      	ldr	r3, [pc, #244]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004064:	2101      	movs	r1, #1
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800406a:	f7fd f88f 	bl	800118c <HAL_GetTick>
 800406e:	0003      	movs	r3, r0
 8004070:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004074:	f7fd f88a 	bl	800118c <HAL_GetTick>
 8004078:	0002      	movs	r2, r0
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e293      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004086:	4b34      	ldr	r3, [pc, #208]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	d1f1      	bne.n	8004074 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2210      	movs	r2, #16
 8004096:	4013      	ands	r3, r2
 8004098:	d100      	bne.n	800409c <HAL_RCC_OscConfig+0x280>
 800409a:	e0a2      	b.n	80041e2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d140      	bne.n	8004124 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040a2:	4b2d      	ldr	r3, [pc, #180]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4013      	ands	r3, r2
 80040ac:	d005      	beq.n	80040ba <HAL_RCC_OscConfig+0x29e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e279      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040ba:	4b27      	ldr	r3, [pc, #156]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	4a2d      	ldr	r2, [pc, #180]	; (8004174 <HAL_RCC_OscConfig+0x358>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	0019      	movs	r1, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040c8:	4b23      	ldr	r3, [pc, #140]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ce:	4b22      	ldr	r3, [pc, #136]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	021b      	lsls	r3, r3, #8
 80040d4:	0a19      	lsrs	r1, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	061a      	lsls	r2, r3, #24
 80040dc:	4b1e      	ldr	r3, [pc, #120]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	0b5b      	lsrs	r3, r3, #13
 80040e8:	3301      	adds	r3, #1
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	0212      	lsls	r2, r2, #8
 80040ee:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80040f0:	4b19      	ldr	r3, [pc, #100]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	210f      	movs	r1, #15
 80040f8:	400b      	ands	r3, r1
 80040fa:	491b      	ldr	r1, [pc, #108]	; (8004168 <HAL_RCC_OscConfig+0x34c>)
 80040fc:	5ccb      	ldrb	r3, [r1, r3]
 80040fe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004100:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_RCC_OscConfig+0x350>)
 8004102:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004104:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_RCC_OscConfig+0x354>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2513      	movs	r5, #19
 800410a:	197c      	adds	r4, r7, r5
 800410c:	0018      	movs	r0, r3
 800410e:	f7fc fff7 	bl	8001100 <HAL_InitTick>
 8004112:	0003      	movs	r3, r0
 8004114:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004116:	197b      	adds	r3, r7, r5
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d061      	beq.n	80041e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800411e:	197b      	adds	r3, r7, r5
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	e244      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d040      	beq.n	80041ae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800412c:	4b0a      	ldr	r3, [pc, #40]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_OscConfig+0x33c>)
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	0049      	lsls	r1, r1, #1
 8004136:	430a      	orrs	r2, r1
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7fd f827 	bl	800118c <HAL_GetTick>
 800413e:	0003      	movs	r3, r0
 8004140:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004142:	e019      	b.n	8004178 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004144:	f7fd f822 	bl	800118c <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d912      	bls.n	8004178 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e22b      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40021000 	.word	0x40021000
 800415c:	fffeffff 	.word	0xfffeffff
 8004160:	fffbffff 	.word	0xfffbffff
 8004164:	ffffe0ff 	.word	0xffffe0ff
 8004168:	08009b74 	.word	0x08009b74
 800416c:	20000000 	.word	0x20000000
 8004170:	20000004 	.word	0x20000004
 8004174:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004178:	4bca      	ldr	r3, [pc, #808]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4013      	ands	r3, r2
 8004182:	d0df      	beq.n	8004144 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004184:	4bc7      	ldr	r3, [pc, #796]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4ac7      	ldr	r2, [pc, #796]	; (80044a8 <HAL_RCC_OscConfig+0x68c>)
 800418a:	4013      	ands	r3, r2
 800418c:	0019      	movs	r1, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004192:	4bc4      	ldr	r3, [pc, #784]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004194:	430a      	orrs	r2, r1
 8004196:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004198:	4bc2      	ldr	r3, [pc, #776]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	0a19      	lsrs	r1, r3, #8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	061a      	lsls	r2, r3, #24
 80041a6:	4bbf      	ldr	r3, [pc, #764]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041a8:	430a      	orrs	r2, r1
 80041aa:	605a      	str	r2, [r3, #4]
 80041ac:	e019      	b.n	80041e2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80041ae:	4bbd      	ldr	r3, [pc, #756]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	4bbc      	ldr	r3, [pc, #752]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041b4:	49bd      	ldr	r1, [pc, #756]	; (80044ac <HAL_RCC_OscConfig+0x690>)
 80041b6:	400a      	ands	r2, r1
 80041b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ba:	f7fc ffe7 	bl	800118c <HAL_GetTick>
 80041be:	0003      	movs	r3, r0
 80041c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041c4:	f7fc ffe2 	bl	800118c <HAL_GetTick>
 80041c8:	0002      	movs	r2, r0
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1eb      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041d6:	4bb3      	ldr	r3, [pc, #716]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4013      	ands	r3, r2
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2208      	movs	r2, #8
 80041e8:	4013      	ands	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d019      	beq.n	8004228 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f4:	4bab      	ldr	r3, [pc, #684]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041f8:	4baa      	ldr	r3, [pc, #680]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80041fa:	2101      	movs	r1, #1
 80041fc:	430a      	orrs	r2, r1
 80041fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004200:	f7fc ffc4 	bl	800118c <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800420a:	f7fc ffbf 	bl	800118c <HAL_GetTick>
 800420e:	0002      	movs	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e1c8      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800421c:	4ba1      	ldr	r3, [pc, #644]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	2202      	movs	r2, #2
 8004222:	4013      	ands	r3, r2
 8004224:	d0f1      	beq.n	800420a <HAL_RCC_OscConfig+0x3ee>
 8004226:	e018      	b.n	800425a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004228:	4b9e      	ldr	r3, [pc, #632]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800422a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800422c:	4b9d      	ldr	r3, [pc, #628]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800422e:	2101      	movs	r1, #1
 8004230:	438a      	bics	r2, r1
 8004232:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004234:	f7fc ffaa 	bl	800118c <HAL_GetTick>
 8004238:	0003      	movs	r3, r0
 800423a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423e:	f7fc ffa5 	bl	800118c <HAL_GetTick>
 8004242:	0002      	movs	r2, r0
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e1ae      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004250:	4b94      	ldr	r3, [pc, #592]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004254:	2202      	movs	r2, #2
 8004256:	4013      	ands	r3, r2
 8004258:	d1f1      	bne.n	800423e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2204      	movs	r2, #4
 8004260:	4013      	ands	r3, r2
 8004262:	d100      	bne.n	8004266 <HAL_RCC_OscConfig+0x44a>
 8004264:	e0ae      	b.n	80043c4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2023      	movs	r0, #35	; 0x23
 8004268:	183b      	adds	r3, r7, r0
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b8d      	ldr	r3, [pc, #564]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004272:	2380      	movs	r3, #128	; 0x80
 8004274:	055b      	lsls	r3, r3, #21
 8004276:	4013      	ands	r3, r2
 8004278:	d109      	bne.n	800428e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b8a      	ldr	r3, [pc, #552]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800427c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427e:	4b89      	ldr	r3, [pc, #548]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004280:	2180      	movs	r1, #128	; 0x80
 8004282:	0549      	lsls	r1, r1, #21
 8004284:	430a      	orrs	r2, r1
 8004286:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004288:	183b      	adds	r3, r7, r0
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800428e:	4b88      	ldr	r3, [pc, #544]	; (80044b0 <HAL_RCC_OscConfig+0x694>)
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	2380      	movs	r3, #128	; 0x80
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4013      	ands	r3, r2
 8004298:	d11a      	bne.n	80042d0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429a:	4b85      	ldr	r3, [pc, #532]	; (80044b0 <HAL_RCC_OscConfig+0x694>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b84      	ldr	r3, [pc, #528]	; (80044b0 <HAL_RCC_OscConfig+0x694>)
 80042a0:	2180      	movs	r1, #128	; 0x80
 80042a2:	0049      	lsls	r1, r1, #1
 80042a4:	430a      	orrs	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042a8:	f7fc ff70 	bl	800118c <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fc ff6b 	bl	800118c <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b64      	cmp	r3, #100	; 0x64
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e174      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	4b7a      	ldr	r3, [pc, #488]	; (80044b0 <HAL_RCC_OscConfig+0x694>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	2380      	movs	r3, #128	; 0x80
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	4013      	ands	r3, r2
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	2380      	movs	r3, #128	; 0x80
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	429a      	cmp	r2, r3
 80042da:	d107      	bne.n	80042ec <HAL_RCC_OscConfig+0x4d0>
 80042dc:	4b71      	ldr	r3, [pc, #452]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80042de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042e0:	4b70      	ldr	r3, [pc, #448]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80042e2:	2180      	movs	r1, #128	; 0x80
 80042e4:	0049      	lsls	r1, r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	651a      	str	r2, [r3, #80]	; 0x50
 80042ea:	e031      	b.n	8004350 <HAL_RCC_OscConfig+0x534>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10c      	bne.n	800430e <HAL_RCC_OscConfig+0x4f2>
 80042f4:	4b6b      	ldr	r3, [pc, #428]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80042f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042f8:	4b6a      	ldr	r3, [pc, #424]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80042fa:	496c      	ldr	r1, [pc, #432]	; (80044ac <HAL_RCC_OscConfig+0x690>)
 80042fc:	400a      	ands	r2, r1
 80042fe:	651a      	str	r2, [r3, #80]	; 0x50
 8004300:	4b68      	ldr	r3, [pc, #416]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004304:	4b67      	ldr	r3, [pc, #412]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004306:	496b      	ldr	r1, [pc, #428]	; (80044b4 <HAL_RCC_OscConfig+0x698>)
 8004308:	400a      	ands	r2, r1
 800430a:	651a      	str	r2, [r3, #80]	; 0x50
 800430c:	e020      	b.n	8004350 <HAL_RCC_OscConfig+0x534>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	23a0      	movs	r3, #160	; 0xa0
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	429a      	cmp	r2, r3
 8004318:	d10e      	bne.n	8004338 <HAL_RCC_OscConfig+0x51c>
 800431a:	4b62      	ldr	r3, [pc, #392]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800431c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800431e:	4b61      	ldr	r3, [pc, #388]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004320:	2180      	movs	r1, #128	; 0x80
 8004322:	00c9      	lsls	r1, r1, #3
 8004324:	430a      	orrs	r2, r1
 8004326:	651a      	str	r2, [r3, #80]	; 0x50
 8004328:	4b5e      	ldr	r3, [pc, #376]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800432a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800432c:	4b5d      	ldr	r3, [pc, #372]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800432e:	2180      	movs	r1, #128	; 0x80
 8004330:	0049      	lsls	r1, r1, #1
 8004332:	430a      	orrs	r2, r1
 8004334:	651a      	str	r2, [r3, #80]	; 0x50
 8004336:	e00b      	b.n	8004350 <HAL_RCC_OscConfig+0x534>
 8004338:	4b5a      	ldr	r3, [pc, #360]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800433a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800433c:	4b59      	ldr	r3, [pc, #356]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800433e:	495b      	ldr	r1, [pc, #364]	; (80044ac <HAL_RCC_OscConfig+0x690>)
 8004340:	400a      	ands	r2, r1
 8004342:	651a      	str	r2, [r3, #80]	; 0x50
 8004344:	4b57      	ldr	r3, [pc, #348]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004346:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004348:	4b56      	ldr	r3, [pc, #344]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800434a:	495a      	ldr	r1, [pc, #360]	; (80044b4 <HAL_RCC_OscConfig+0x698>)
 800434c:	400a      	ands	r2, r1
 800434e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7fc ff18 	bl	800118c <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fc ff13 	bl	800118c <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a52      	ldr	r2, [pc, #328]	; (80044b8 <HAL_RCC_OscConfig+0x69c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e11b      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004376:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4013      	ands	r3, r2
 8004380:	d0ef      	beq.n	8004362 <HAL_RCC_OscConfig+0x546>
 8004382:	e014      	b.n	80043ae <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004384:	f7fc ff02 	bl	800118c <HAL_GetTick>
 8004388:	0003      	movs	r3, r0
 800438a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800438c:	e009      	b.n	80043a2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fc fefd 	bl	800118c <HAL_GetTick>
 8004392:	0002      	movs	r2, r0
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	4a47      	ldr	r2, [pc, #284]	; (80044b8 <HAL_RCC_OscConfig+0x69c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e105      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80043a2:	4b40      	ldr	r3, [pc, #256]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043a6:	2380      	movs	r3, #128	; 0x80
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4013      	ands	r3, r2
 80043ac:	d1ef      	bne.n	800438e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80043ae:	2323      	movs	r3, #35	; 0x23
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d105      	bne.n	80043c4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043b8:	4b3a      	ldr	r3, [pc, #232]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043bc:	4b39      	ldr	r3, [pc, #228]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043be:	493f      	ldr	r1, [pc, #252]	; (80044bc <HAL_RCC_OscConfig+0x6a0>)
 80043c0:	400a      	ands	r2, r1
 80043c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2220      	movs	r2, #32
 80043ca:	4013      	ands	r3, r2
 80043cc:	d049      	beq.n	8004462 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d026      	beq.n	8004424 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80043d6:	4b33      	ldr	r3, [pc, #204]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043dc:	2101      	movs	r1, #1
 80043de:	430a      	orrs	r2, r1
 80043e0:	609a      	str	r2, [r3, #8]
 80043e2:	4b30      	ldr	r3, [pc, #192]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e6:	4b2f      	ldr	r3, [pc, #188]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 80043e8:	2101      	movs	r1, #1
 80043ea:	430a      	orrs	r2, r1
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34
 80043ee:	4b34      	ldr	r3, [pc, #208]	; (80044c0 <HAL_RCC_OscConfig+0x6a4>)
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	4b33      	ldr	r3, [pc, #204]	; (80044c0 <HAL_RCC_OscConfig+0x6a4>)
 80043f4:	2180      	movs	r1, #128	; 0x80
 80043f6:	0189      	lsls	r1, r1, #6
 80043f8:	430a      	orrs	r2, r1
 80043fa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fc fec6 	bl	800118c <HAL_GetTick>
 8004400:	0003      	movs	r3, r0
 8004402:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004406:	f7fc fec1 	bl	800118c <HAL_GetTick>
 800440a:	0002      	movs	r2, r0
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e0ca      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004418:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2202      	movs	r2, #2
 800441e:	4013      	ands	r3, r2
 8004420:	d0f1      	beq.n	8004406 <HAL_RCC_OscConfig+0x5ea>
 8004422:	e01e      	b.n	8004462 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004424:	4b1f      	ldr	r3, [pc, #124]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800442a:	2101      	movs	r1, #1
 800442c:	438a      	bics	r2, r1
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	4b23      	ldr	r3, [pc, #140]	; (80044c0 <HAL_RCC_OscConfig+0x6a4>)
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	4b22      	ldr	r3, [pc, #136]	; (80044c0 <HAL_RCC_OscConfig+0x6a4>)
 8004436:	4923      	ldr	r1, [pc, #140]	; (80044c4 <HAL_RCC_OscConfig+0x6a8>)
 8004438:	400a      	ands	r2, r1
 800443a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443c:	f7fc fea6 	bl	800118c <HAL_GetTick>
 8004440:	0003      	movs	r3, r0
 8004442:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004446:	f7fc fea1 	bl	800118c <HAL_GetTick>
 800444a:	0002      	movs	r2, r0
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0aa      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2202      	movs	r2, #2
 800445e:	4013      	ands	r3, r2
 8004460:	d1f1      	bne.n	8004446 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004466:	2b00      	cmp	r3, #0
 8004468:	d100      	bne.n	800446c <HAL_RCC_OscConfig+0x650>
 800446a:	e09f      	b.n	80045ac <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d100      	bne.n	8004474 <HAL_RCC_OscConfig+0x658>
 8004472:	e078      	b.n	8004566 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004478:	2b02      	cmp	r3, #2
 800447a:	d159      	bne.n	8004530 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <HAL_RCC_OscConfig+0x688>)
 8004482:	4911      	ldr	r1, [pc, #68]	; (80044c8 <HAL_RCC_OscConfig+0x6ac>)
 8004484:	400a      	ands	r2, r1
 8004486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004488:	f7fc fe80 	bl	800118c <HAL_GetTick>
 800448c:	0003      	movs	r3, r0
 800448e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004490:	e01c      	b.n	80044cc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004492:	f7fc fe7b 	bl	800118c <HAL_GetTick>
 8004496:	0002      	movs	r2, r0
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d915      	bls.n	80044cc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	e084      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
 80044a4:	40021000 	.word	0x40021000
 80044a8:	ffff1fff 	.word	0xffff1fff
 80044ac:	fffffeff 	.word	0xfffffeff
 80044b0:	40007000 	.word	0x40007000
 80044b4:	fffffbff 	.word	0xfffffbff
 80044b8:	00001388 	.word	0x00001388
 80044bc:	efffffff 	.word	0xefffffff
 80044c0:	40010000 	.word	0x40010000
 80044c4:	ffffdfff 	.word	0xffffdfff
 80044c8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044cc:	4b3a      	ldr	r3, [pc, #232]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	049b      	lsls	r3, r3, #18
 80044d4:	4013      	ands	r3, r2
 80044d6:	d1dc      	bne.n	8004492 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044d8:	4b37      	ldr	r3, [pc, #220]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	4a37      	ldr	r2, [pc, #220]	; (80045bc <HAL_RCC_OscConfig+0x7a0>)
 80044de:	4013      	ands	r3, r2
 80044e0:	0019      	movs	r1, r3
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	431a      	orrs	r2, r3
 80044f2:	4b31      	ldr	r3, [pc, #196]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044f8:	4b2f      	ldr	r3, [pc, #188]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	4b2e      	ldr	r3, [pc, #184]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 80044fe:	2180      	movs	r1, #128	; 0x80
 8004500:	0449      	lsls	r1, r1, #17
 8004502:	430a      	orrs	r2, r1
 8004504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004506:	f7fc fe41 	bl	800118c <HAL_GetTick>
 800450a:	0003      	movs	r3, r0
 800450c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004510:	f7fc fe3c 	bl	800118c <HAL_GetTick>
 8004514:	0002      	movs	r2, r0
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e045      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004522:	4b25      	ldr	r3, [pc, #148]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	049b      	lsls	r3, r3, #18
 800452a:	4013      	ands	r3, r2
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x6f4>
 800452e:	e03d      	b.n	80045ac <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004530:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	4b20      	ldr	r3, [pc, #128]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 8004536:	4922      	ldr	r1, [pc, #136]	; (80045c0 <HAL_RCC_OscConfig+0x7a4>)
 8004538:	400a      	ands	r2, r1
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fc fe26 	bl	800118c <HAL_GetTick>
 8004540:	0003      	movs	r3, r0
 8004542:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004544:	e008      	b.n	8004558 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004546:	f7fc fe21 	bl	800118c <HAL_GetTick>
 800454a:	0002      	movs	r2, r0
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b02      	cmp	r3, #2
 8004552:	d901      	bls.n	8004558 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	e02a      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004558:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	049b      	lsls	r3, r3, #18
 8004560:	4013      	ands	r3, r2
 8004562:	d1f0      	bne.n	8004546 <HAL_RCC_OscConfig+0x72a>
 8004564:	e022      	b.n	80045ac <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	2b01      	cmp	r3, #1
 800456c:	d101      	bne.n	8004572 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e01d      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004572:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <HAL_RCC_OscConfig+0x79c>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	2380      	movs	r3, #128	; 0x80
 800457c:	025b      	lsls	r3, r3, #9
 800457e:	401a      	ands	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	429a      	cmp	r2, r3
 8004586:	d10f      	bne.n	80045a8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004588:	69ba      	ldr	r2, [r7, #24]
 800458a:	23f0      	movs	r3, #240	; 0xf0
 800458c:	039b      	lsls	r3, r3, #14
 800458e:	401a      	ands	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	23c0      	movs	r3, #192	; 0xc0
 800459c:	041b      	lsls	r3, r3, #16
 800459e:	401a      	ands	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e000      	b.n	80045ae <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b00a      	add	sp, #40	; 0x28
 80045b4:	bdb0      	pop	{r4, r5, r7, pc}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	40021000 	.word	0x40021000
 80045bc:	ff02ffff 	.word	0xff02ffff
 80045c0:	feffffff 	.word	0xfeffffff

080045c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c4:	b5b0      	push	{r4, r5, r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e128      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045d8:	4b96      	ldr	r3, [pc, #600]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2201      	movs	r2, #1
 80045de:	4013      	ands	r3, r2
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d91e      	bls.n	8004624 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b93      	ldr	r3, [pc, #588]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2201      	movs	r2, #1
 80045ec:	4393      	bics	r3, r2
 80045ee:	0019      	movs	r1, r3
 80045f0:	4b90      	ldr	r3, [pc, #576]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045f8:	f7fc fdc8 	bl	800118c <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004600:	e009      	b.n	8004616 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004602:	f7fc fdc3 	bl	800118c <HAL_GetTick>
 8004606:	0002      	movs	r2, r0
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	4a8a      	ldr	r2, [pc, #552]	; (8004838 <HAL_RCC_ClockConfig+0x274>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e109      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004616:	4b87      	ldr	r3, [pc, #540]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d1ee      	bne.n	8004602 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2202      	movs	r2, #2
 800462a:	4013      	ands	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462e:	4b83      	ldr	r3, [pc, #524]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	22f0      	movs	r2, #240	; 0xf0
 8004634:	4393      	bics	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	4b7f      	ldr	r3, [pc, #508]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 800463e:	430a      	orrs	r2, r1
 8004640:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2201      	movs	r2, #1
 8004648:	4013      	ands	r3, r2
 800464a:	d100      	bne.n	800464e <HAL_RCC_ClockConfig+0x8a>
 800464c:	e089      	b.n	8004762 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	2b02      	cmp	r3, #2
 8004654:	d107      	bne.n	8004666 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004656:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	4013      	ands	r3, r2
 8004660:	d120      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e0e1      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800466e:	4b73      	ldr	r3, [pc, #460]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	049b      	lsls	r3, r3, #18
 8004676:	4013      	ands	r3, r2
 8004678:	d114      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0d5      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d106      	bne.n	8004694 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2204      	movs	r2, #4
 800468c:	4013      	ands	r3, r2
 800468e:	d109      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e0ca      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004694:	4b69      	ldr	r3, [pc, #420]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	2380      	movs	r3, #128	; 0x80
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4013      	ands	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e0c2      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a4:	4b65      	ldr	r3, [pc, #404]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	2203      	movs	r2, #3
 80046aa:	4393      	bics	r3, r2
 80046ac:	0019      	movs	r1, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80046b4:	430a      	orrs	r2, r1
 80046b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b8:	f7fc fd68 	bl	800118c <HAL_GetTick>
 80046bc:	0003      	movs	r3, r0
 80046be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d111      	bne.n	80046ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	e009      	b.n	80046de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ca:	f7fc fd5f 	bl	800118c <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	4a58      	ldr	r2, [pc, #352]	; (8004838 <HAL_RCC_ClockConfig+0x274>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0a5      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046de:	4b57      	ldr	r3, [pc, #348]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	220c      	movs	r2, #12
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d1ef      	bne.n	80046ca <HAL_RCC_ClockConfig+0x106>
 80046ea:	e03a      	b.n	8004762 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d111      	bne.n	8004718 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046f4:	e009      	b.n	800470a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f6:	f7fc fd49 	bl	800118c <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	4a4d      	ldr	r2, [pc, #308]	; (8004838 <HAL_RCC_ClockConfig+0x274>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e08f      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800470a:	4b4c      	ldr	r3, [pc, #304]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	220c      	movs	r2, #12
 8004710:	4013      	ands	r3, r2
 8004712:	2b0c      	cmp	r3, #12
 8004714:	d1ef      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x132>
 8004716:	e024      	b.n	8004762 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d11b      	bne.n	8004758 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004720:	e009      	b.n	8004736 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004722:	f7fc fd33 	bl	800118c <HAL_GetTick>
 8004726:	0002      	movs	r2, r0
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	4a42      	ldr	r2, [pc, #264]	; (8004838 <HAL_RCC_ClockConfig+0x274>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e079      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004736:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	220c      	movs	r2, #12
 800473c:	4013      	ands	r3, r2
 800473e:	2b04      	cmp	r3, #4
 8004740:	d1ef      	bne.n	8004722 <HAL_RCC_ClockConfig+0x15e>
 8004742:	e00e      	b.n	8004762 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004744:	f7fc fd22 	bl	800118c <HAL_GetTick>
 8004748:	0002      	movs	r2, r0
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	4a3a      	ldr	r2, [pc, #232]	; (8004838 <HAL_RCC_ClockConfig+0x274>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e068      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004758:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	220c      	movs	r2, #12
 800475e:	4013      	ands	r3, r2
 8004760:	d1f0      	bne.n	8004744 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2201      	movs	r2, #1
 8004768:	4013      	ands	r3, r2
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d21e      	bcs.n	80047ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4393      	bics	r3, r2
 8004778:	0019      	movs	r1, r3
 800477a:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004782:	f7fc fd03 	bl	800118c <HAL_GetTick>
 8004786:	0003      	movs	r3, r0
 8004788:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478a:	e009      	b.n	80047a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478c:	f7fc fcfe 	bl	800118c <HAL_GetTick>
 8004790:	0002      	movs	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	4a28      	ldr	r2, [pc, #160]	; (8004838 <HAL_RCC_ClockConfig+0x274>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e044      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_ClockConfig+0x270>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2201      	movs	r2, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d1ee      	bne.n	800478c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2204      	movs	r2, #4
 80047b4:	4013      	ands	r3, r2
 80047b6:	d009      	beq.n	80047cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b20      	ldr	r3, [pc, #128]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	4a20      	ldr	r2, [pc, #128]	; (8004840 <HAL_RCC_ClockConfig+0x27c>)
 80047be:	4013      	ands	r3, r2
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80047c8:	430a      	orrs	r2, r1
 80047ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2208      	movs	r2, #8
 80047d2:	4013      	ands	r3, r2
 80047d4:	d00a      	beq.n	80047ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047d6:	4b19      	ldr	r3, [pc, #100]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	4a1a      	ldr	r2, [pc, #104]	; (8004844 <HAL_RCC_ClockConfig+0x280>)
 80047dc:	4013      	ands	r3, r2
 80047de:	0019      	movs	r1, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	00da      	lsls	r2, r3, #3
 80047e6:	4b15      	ldr	r3, [pc, #84]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80047e8:	430a      	orrs	r2, r1
 80047ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047ec:	f000 f832 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 80047f0:	0001      	movs	r1, r0
 80047f2:	4b12      	ldr	r3, [pc, #72]	; (800483c <HAL_RCC_ClockConfig+0x278>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	091b      	lsrs	r3, r3, #4
 80047f8:	220f      	movs	r2, #15
 80047fa:	4013      	ands	r3, r2
 80047fc:	4a12      	ldr	r2, [pc, #72]	; (8004848 <HAL_RCC_ClockConfig+0x284>)
 80047fe:	5cd3      	ldrb	r3, [r2, r3]
 8004800:	000a      	movs	r2, r1
 8004802:	40da      	lsrs	r2, r3
 8004804:	4b11      	ldr	r3, [pc, #68]	; (800484c <HAL_RCC_ClockConfig+0x288>)
 8004806:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004808:	4b11      	ldr	r3, [pc, #68]	; (8004850 <HAL_RCC_ClockConfig+0x28c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	250b      	movs	r5, #11
 800480e:	197c      	adds	r4, r7, r5
 8004810:	0018      	movs	r0, r3
 8004812:	f7fc fc75 	bl	8001100 <HAL_InitTick>
 8004816:	0003      	movs	r3, r0
 8004818:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800481a:	197b      	adds	r3, r7, r5
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d002      	beq.n	8004828 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004822:	197b      	adds	r3, r7, r5
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	e000      	b.n	800482a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	0018      	movs	r0, r3
 800482c:	46bd      	mov	sp, r7
 800482e:	b004      	add	sp, #16
 8004830:	bdb0      	pop	{r4, r5, r7, pc}
 8004832:	46c0      	nop			; (mov r8, r8)
 8004834:	40022000 	.word	0x40022000
 8004838:	00001388 	.word	0x00001388
 800483c:	40021000 	.word	0x40021000
 8004840:	fffff8ff 	.word	0xfffff8ff
 8004844:	ffffc7ff 	.word	0xffffc7ff
 8004848:	08009b74 	.word	0x08009b74
 800484c:	20000000 	.word	0x20000000
 8004850:	20000004 	.word	0x20000004

08004854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004854:	b5b0      	push	{r4, r5, r7, lr}
 8004856:	b08e      	sub	sp, #56	; 0x38
 8004858:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800485a:	4b4c      	ldr	r3, [pc, #304]	; (800498c <HAL_RCC_GetSysClockFreq+0x138>)
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004862:	230c      	movs	r3, #12
 8004864:	4013      	ands	r3, r2
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d014      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x40>
 800486a:	d900      	bls.n	800486e <HAL_RCC_GetSysClockFreq+0x1a>
 800486c:	e07b      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x112>
 800486e:	2b04      	cmp	r3, #4
 8004870:	d002      	beq.n	8004878 <HAL_RCC_GetSysClockFreq+0x24>
 8004872:	2b08      	cmp	r3, #8
 8004874:	d00b      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0x3a>
 8004876:	e076      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004878:	4b44      	ldr	r3, [pc, #272]	; (800498c <HAL_RCC_GetSysClockFreq+0x138>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2210      	movs	r2, #16
 800487e:	4013      	ands	r3, r2
 8004880:	d002      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004882:	4b43      	ldr	r3, [pc, #268]	; (8004990 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004886:	e07c      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <HAL_RCC_GetSysClockFreq+0x140>)
 800488a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800488c:	e079      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800488e:	4b42      	ldr	r3, [pc, #264]	; (8004998 <HAL_RCC_GetSysClockFreq+0x144>)
 8004890:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004892:	e076      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	0c9a      	lsrs	r2, r3, #18
 8004898:	230f      	movs	r3, #15
 800489a:	401a      	ands	r2, r3
 800489c:	4b3f      	ldr	r3, [pc, #252]	; (800499c <HAL_RCC_GetSysClockFreq+0x148>)
 800489e:	5c9b      	ldrb	r3, [r3, r2]
 80048a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	0d9a      	lsrs	r2, r3, #22
 80048a6:	2303      	movs	r3, #3
 80048a8:	4013      	ands	r3, r2
 80048aa:	3301      	adds	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048ae:	4b37      	ldr	r3, [pc, #220]	; (800498c <HAL_RCC_GetSysClockFreq+0x138>)
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	025b      	lsls	r3, r3, #9
 80048b6:	4013      	ands	r3, r2
 80048b8:	d01a      	beq.n	80048f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	61bb      	str	r3, [r7, #24]
 80048be:	2300      	movs	r3, #0
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	4a35      	ldr	r2, [pc, #212]	; (8004998 <HAL_RCC_GetSysClockFreq+0x144>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	69b8      	ldr	r0, [r7, #24]
 80048c8:	69f9      	ldr	r1, [r7, #28]
 80048ca:	f7fb fcc9 	bl	8000260 <__aeabi_lmul>
 80048ce:	0002      	movs	r2, r0
 80048d0:	000b      	movs	r3, r1
 80048d2:	0010      	movs	r0, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	2300      	movs	r3, #0
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f7fb fc9d 	bl	8000220 <__aeabi_uldivmod>
 80048e6:	0002      	movs	r2, r0
 80048e8:	000b      	movs	r3, r1
 80048ea:	0013      	movs	r3, r2
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
 80048ee:	e037      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80048f0:	4b26      	ldr	r3, [pc, #152]	; (800498c <HAL_RCC_GetSysClockFreq+0x138>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2210      	movs	r2, #16
 80048f6:	4013      	ands	r3, r2
 80048f8:	d01a      	beq.n	8004930 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	60bb      	str	r3, [r7, #8]
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	4a23      	ldr	r2, [pc, #140]	; (8004990 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004904:	2300      	movs	r3, #0
 8004906:	68b8      	ldr	r0, [r7, #8]
 8004908:	68f9      	ldr	r1, [r7, #12]
 800490a:	f7fb fca9 	bl	8000260 <__aeabi_lmul>
 800490e:	0002      	movs	r2, r0
 8004910:	000b      	movs	r3, r1
 8004912:	0010      	movs	r0, r2
 8004914:	0019      	movs	r1, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	603b      	str	r3, [r7, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	607b      	str	r3, [r7, #4]
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f7fb fc7d 	bl	8000220 <__aeabi_uldivmod>
 8004926:	0002      	movs	r2, r0
 8004928:	000b      	movs	r3, r1
 800492a:	0013      	movs	r3, r2
 800492c:	637b      	str	r3, [r7, #52]	; 0x34
 800492e:	e017      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	0018      	movs	r0, r3
 8004934:	2300      	movs	r3, #0
 8004936:	0019      	movs	r1, r3
 8004938:	4a16      	ldr	r2, [pc, #88]	; (8004994 <HAL_RCC_GetSysClockFreq+0x140>)
 800493a:	2300      	movs	r3, #0
 800493c:	f7fb fc90 	bl	8000260 <__aeabi_lmul>
 8004940:	0002      	movs	r2, r0
 8004942:	000b      	movs	r3, r1
 8004944:	0010      	movs	r0, r2
 8004946:	0019      	movs	r1, r3
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	001c      	movs	r4, r3
 800494c:	2300      	movs	r3, #0
 800494e:	001d      	movs	r5, r3
 8004950:	0022      	movs	r2, r4
 8004952:	002b      	movs	r3, r5
 8004954:	f7fb fc64 	bl	8000220 <__aeabi_uldivmod>
 8004958:	0002      	movs	r2, r0
 800495a:	000b      	movs	r3, r1
 800495c:	0013      	movs	r3, r2
 800495e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004962:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004964:	e00d      	b.n	8004982 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004966:	4b09      	ldr	r3, [pc, #36]	; (800498c <HAL_RCC_GetSysClockFreq+0x138>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	0b5b      	lsrs	r3, r3, #13
 800496c:	2207      	movs	r2, #7
 800496e:	4013      	ands	r3, r2
 8004970:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	3301      	adds	r3, #1
 8004976:	2280      	movs	r2, #128	; 0x80
 8004978:	0212      	lsls	r2, r2, #8
 800497a:	409a      	lsls	r2, r3
 800497c:	0013      	movs	r3, r2
 800497e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004980:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004984:	0018      	movs	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	b00e      	add	sp, #56	; 0x38
 800498a:	bdb0      	pop	{r4, r5, r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	003d0900 	.word	0x003d0900
 8004994:	00f42400 	.word	0x00f42400
 8004998:	007a1200 	.word	0x007a1200
 800499c:	08009b8c 	.word	0x08009b8c

080049a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a4:	4b02      	ldr	r3, [pc, #8]	; (80049b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	0018      	movs	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	20000000 	.word	0x20000000

080049b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049b8:	f7ff fff2 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 80049bc:	0001      	movs	r1, r0
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	0a1b      	lsrs	r3, r3, #8
 80049c4:	2207      	movs	r2, #7
 80049c6:	4013      	ands	r3, r2
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	40d9      	lsrs	r1, r3
 80049ce:	000b      	movs	r3, r1
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	40021000 	.word	0x40021000
 80049dc:	08009b84 	.word	0x08009b84

080049e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049e4:	f7ff ffdc 	bl	80049a0 <HAL_RCC_GetHCLKFreq>
 80049e8:	0001      	movs	r1, r0
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	0adb      	lsrs	r3, r3, #11
 80049f0:	2207      	movs	r2, #7
 80049f2:	4013      	ands	r3, r2
 80049f4:	4a04      	ldr	r2, [pc, #16]	; (8004a08 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049f6:	5cd3      	ldrb	r3, [r2, r3]
 80049f8:	40d9      	lsrs	r1, r3
 80049fa:	000b      	movs	r3, r1
}
 80049fc:	0018      	movs	r0, r3
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	46c0      	nop			; (mov r8, r8)
 8004a04:	40021000 	.word	0x40021000
 8004a08:	08009b84 	.word	0x08009b84

08004a0c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b086      	sub	sp, #24
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004a14:	2317      	movs	r3, #23
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2220      	movs	r2, #32
 8004a22:	4013      	ands	r3, r2
 8004a24:	d106      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	4013      	ands	r3, r2
 8004a30:	d100      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004a32:	e0d9      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a34:	4ba4      	ldr	r3, [pc, #656]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a38:	2380      	movs	r3, #128	; 0x80
 8004a3a:	055b      	lsls	r3, r3, #21
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	d10a      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4ba1      	ldr	r3, [pc, #644]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a44:	4ba0      	ldr	r3, [pc, #640]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a46:	2180      	movs	r1, #128	; 0x80
 8004a48:	0549      	lsls	r1, r1, #21
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004a4e:	2317      	movs	r3, #23
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a56:	4b9d      	ldr	r3, [pc, #628]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	2380      	movs	r3, #128	; 0x80
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d11a      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a62:	4b9a      	ldr	r3, [pc, #616]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b99      	ldr	r3, [pc, #612]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a68:	2180      	movs	r1, #128	; 0x80
 8004a6a:	0049      	lsls	r1, r1, #1
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a70:	f7fc fb8c 	bl	800118c <HAL_GetTick>
 8004a74:	0003      	movs	r3, r0
 8004a76:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	e008      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a7a:	f7fc fb87 	bl	800118c <HAL_GetTick>
 8004a7e:	0002      	movs	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b64      	cmp	r3, #100	; 0x64
 8004a86:	d901      	bls.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e118      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8c:	4b8f      	ldr	r3, [pc, #572]	; (8004ccc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	2380      	movs	r3, #128	; 0x80
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	4013      	ands	r3, r2
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a98:	4b8b      	ldr	r3, [pc, #556]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	23c0      	movs	r3, #192	; 0xc0
 8004a9e:	039b      	lsls	r3, r3, #14
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	23c0      	movs	r3, #192	; 0xc0
 8004aaa:	039b      	lsls	r3, r3, #14
 8004aac:	4013      	ands	r3, r2
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	23c0      	movs	r3, #192	; 0xc0
 8004aba:	039b      	lsls	r3, r3, #14
 8004abc:	4013      	ands	r3, r2
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d013      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	23c0      	movs	r3, #192	; 0xc0
 8004aca:	029b      	lsls	r3, r3, #10
 8004acc:	401a      	ands	r2, r3
 8004ace:	23c0      	movs	r3, #192	; 0xc0
 8004ad0:	029b      	lsls	r3, r3, #10
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d10a      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ad6:	4b7c      	ldr	r3, [pc, #496]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	2380      	movs	r3, #128	; 0x80
 8004adc:	029b      	lsls	r3, r3, #10
 8004ade:	401a      	ands	r2, r3
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	029b      	lsls	r3, r3, #10
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d101      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0e8      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004aec:	4b76      	ldr	r3, [pc, #472]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	4013      	ands	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d049      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685a      	ldr	r2, [r3, #4]
 8004b02:	23c0      	movs	r3, #192	; 0xc0
 8004b04:	029b      	lsls	r3, r3, #10
 8004b06:	4013      	ands	r3, r2
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d004      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2220      	movs	r2, #32
 8004b14:	4013      	ands	r3, r2
 8004b16:	d10d      	bne.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	23c0      	movs	r3, #192	; 0xc0
 8004b1e:	029b      	lsls	r3, r3, #10
 8004b20:	4013      	ands	r3, r2
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d034      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	4013      	ands	r3, r2
 8004b32:	d02e      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b34:	4b64      	ldr	r3, [pc, #400]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	4a65      	ldr	r2, [pc, #404]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b3e:	4b62      	ldr	r3, [pc, #392]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b42:	4b61      	ldr	r3, [pc, #388]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b44:	2180      	movs	r1, #128	; 0x80
 8004b46:	0309      	lsls	r1, r1, #12
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4c:	4b5e      	ldr	r3, [pc, #376]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b50:	4b5d      	ldr	r3, [pc, #372]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b52:	4960      	ldr	r1, [pc, #384]	; (8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004b54:	400a      	ands	r2, r1
 8004b56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004b58:	4b5b      	ldr	r3, [pc, #364]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4013      	ands	r3, r2
 8004b66:	d014      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7fc fb10 	bl	800118c <HAL_GetTick>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b70:	e009      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b72:	f7fc fb0b 	bl	800118c <HAL_GetTick>
 8004b76:	0002      	movs	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	4a56      	ldr	r2, [pc, #344]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e09b      	b.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b86:	4b50      	ldr	r3, [pc, #320]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d0ef      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	23c0      	movs	r3, #192	; 0xc0
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	23c0      	movs	r3, #192	; 0xc0
 8004b9e:	029b      	lsls	r3, r3, #10
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004ba4:	4b48      	ldr	r3, [pc, #288]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a4c      	ldr	r2, [pc, #304]	; (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	23c0      	movs	r3, #192	; 0xc0
 8004bb4:	039b      	lsls	r3, r3, #14
 8004bb6:	401a      	ands	r2, r3
 8004bb8:	4b43      	ldr	r3, [pc, #268]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	23c0      	movs	r3, #192	; 0xc0
 8004bc8:	029b      	lsls	r3, r3, #10
 8004bca:	401a      	ands	r2, r3
 8004bcc:	4b3e      	ldr	r3, [pc, #248]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004bd2:	2317      	movs	r3, #23
 8004bd4:	18fb      	adds	r3, r7, r3
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b3a      	ldr	r3, [pc, #232]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004be2:	493f      	ldr	r1, [pc, #252]	; (8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004be4:	400a      	ands	r2, r1
 8004be6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2201      	movs	r2, #1
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d009      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf2:	4b35      	ldr	r3, [pc, #212]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	4393      	bics	r3, r2
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68da      	ldr	r2, [r3, #12]
 8004c00:	4b31      	ldr	r3, [pc, #196]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c02:	430a      	orrs	r2, r1
 8004c04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d009      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c10:	4b2d      	ldr	r3, [pc, #180]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c14:	220c      	movs	r2, #12
 8004c16:	4393      	bics	r3, r2
 8004c18:	0019      	movs	r1, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c20:	430a      	orrs	r2, r1
 8004c22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d009      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c2e:	4b26      	ldr	r3, [pc, #152]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c32:	4a2c      	ldr	r2, [pc, #176]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	0019      	movs	r1, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695a      	ldr	r2, [r3, #20]
 8004c3c:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2208      	movs	r2, #8
 8004c48:	4013      	ands	r3, r2
 8004c4a:	d009      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	4a25      	ldr	r2, [pc, #148]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004c52:	4013      	ands	r3, r2
 8004c54:	0019      	movs	r1, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	699a      	ldr	r2, [r3, #24]
 8004c5a:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d009      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c6c:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c70:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	0019      	movs	r1, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69da      	ldr	r2, [r3, #28]
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	4013      	ands	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c8a:	4b0f      	ldr	r3, [pc, #60]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2280      	movs	r2, #128	; 0x80
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004ca8:	4b07      	ldr	r3, [pc, #28]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cac:	4a10      	ldr	r2, [pc, #64]	; (8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004cae:	4013      	ands	r3, r2
 8004cb0:	0019      	movs	r1, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	4b04      	ldr	r3, [pc, #16]	; (8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	0018      	movs	r0, r3
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	b006      	add	sp, #24
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	40021000 	.word	0x40021000
 8004ccc:	40007000 	.word	0x40007000
 8004cd0:	fffcffff 	.word	0xfffcffff
 8004cd4:	fff7ffff 	.word	0xfff7ffff
 8004cd8:	00001388 	.word	0x00001388
 8004cdc:	ffcfffff 	.word	0xffcfffff
 8004ce0:	efffffff 	.word	0xefffffff
 8004ce4:	fffff3ff 	.word	0xfffff3ff
 8004ce8:	ffffcfff 	.word	0xffffcfff
 8004cec:	fbffffff 	.word	0xfbffffff
 8004cf0:	fff3ffff 	.word	0xfff3ffff

08004cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e044      	b.n	8004d90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d107      	bne.n	8004d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2274      	movs	r2, #116	; 0x74
 8004d12:	2100      	movs	r1, #0
 8004d14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f7fc f903 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2224      	movs	r2, #36	; 0x24
 8004d22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2101      	movs	r1, #1
 8004d30:	438a      	bics	r2, r1
 8004d32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	0018      	movs	r0, r3
 8004d38:	f000 f830 	bl	8004d9c <UART_SetConfig>
 8004d3c:	0003      	movs	r3, r0
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e024      	b.n	8004d90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fae1 	bl	8005318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	490d      	ldr	r1, [pc, #52]	; (8004d98 <HAL_UART_Init+0xa4>)
 8004d62:	400a      	ands	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	212a      	movs	r1, #42	; 0x2a
 8004d72:	438a      	bics	r2, r1
 8004d74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2101      	movs	r1, #1
 8004d82:	430a      	orrs	r2, r1
 8004d84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	0018      	movs	r0, r3
 8004d8a:	f000 fb79 	bl	8005480 <UART_CheckIdleState>
 8004d8e:	0003      	movs	r3, r0
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	ffffb7ff 	.word	0xffffb7ff

08004d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d9c:	b5b0      	push	{r4, r5, r7, lr}
 8004d9e:	b08e      	sub	sp, #56	; 0x38
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004da4:	231a      	movs	r3, #26
 8004da6:	2218      	movs	r2, #24
 8004da8:	4694      	mov	ip, r2
 8004daa:	44bc      	add	ip, r7
 8004dac:	4463      	add	r3, ip
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4ab0      	ldr	r2, [pc, #704]	; (8005094 <UART_SetConfig+0x2f8>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	0019      	movs	r1, r3
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4aac      	ldr	r2, [pc, #688]	; (8005098 <UART_SetConfig+0x2fc>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	0019      	movs	r1, r3
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4aa6      	ldr	r2, [pc, #664]	; (800509c <UART_SetConfig+0x300>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4aa1      	ldr	r2, [pc, #644]	; (80050a0 <UART_SetConfig+0x304>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e24:	430a      	orrs	r2, r1
 8004e26:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a9d      	ldr	r2, [pc, #628]	; (80050a4 <UART_SetConfig+0x308>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d136      	bne.n	8004ea0 <UART_SetConfig+0x104>
 8004e32:	4b9d      	ldr	r3, [pc, #628]	; (80050a8 <UART_SetConfig+0x30c>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	2203      	movs	r2, #3
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d020      	beq.n	8004e80 <UART_SetConfig+0xe4>
 8004e3e:	d827      	bhi.n	8004e90 <UART_SetConfig+0xf4>
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d00d      	beq.n	8004e60 <UART_SetConfig+0xc4>
 8004e44:	d824      	bhi.n	8004e90 <UART_SetConfig+0xf4>
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <UART_SetConfig+0xb4>
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d010      	beq.n	8004e70 <UART_SetConfig+0xd4>
 8004e4e:	e01f      	b.n	8004e90 <UART_SetConfig+0xf4>
 8004e50:	231b      	movs	r3, #27
 8004e52:	2218      	movs	r2, #24
 8004e54:	4694      	mov	ip, r2
 8004e56:	44bc      	add	ip, r7
 8004e58:	4463      	add	r3, ip
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	e0c5      	b.n	8004fec <UART_SetConfig+0x250>
 8004e60:	231b      	movs	r3, #27
 8004e62:	2218      	movs	r2, #24
 8004e64:	4694      	mov	ip, r2
 8004e66:	44bc      	add	ip, r7
 8004e68:	4463      	add	r3, ip
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	701a      	strb	r2, [r3, #0]
 8004e6e:	e0bd      	b.n	8004fec <UART_SetConfig+0x250>
 8004e70:	231b      	movs	r3, #27
 8004e72:	2218      	movs	r2, #24
 8004e74:	4694      	mov	ip, r2
 8004e76:	44bc      	add	ip, r7
 8004e78:	4463      	add	r3, ip
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e0b5      	b.n	8004fec <UART_SetConfig+0x250>
 8004e80:	231b      	movs	r3, #27
 8004e82:	2218      	movs	r2, #24
 8004e84:	4694      	mov	ip, r2
 8004e86:	44bc      	add	ip, r7
 8004e88:	4463      	add	r3, ip
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e0ad      	b.n	8004fec <UART_SetConfig+0x250>
 8004e90:	231b      	movs	r3, #27
 8004e92:	2218      	movs	r2, #24
 8004e94:	4694      	mov	ip, r2
 8004e96:	44bc      	add	ip, r7
 8004e98:	4463      	add	r3, ip
 8004e9a:	2210      	movs	r2, #16
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e0a5      	b.n	8004fec <UART_SetConfig+0x250>
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a81      	ldr	r2, [pc, #516]	; (80050ac <UART_SetConfig+0x310>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d136      	bne.n	8004f18 <UART_SetConfig+0x17c>
 8004eaa:	4b7f      	ldr	r3, [pc, #508]	; (80050a8 <UART_SetConfig+0x30c>)
 8004eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eae:	220c      	movs	r2, #12
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b0c      	cmp	r3, #12
 8004eb4:	d020      	beq.n	8004ef8 <UART_SetConfig+0x15c>
 8004eb6:	d827      	bhi.n	8004f08 <UART_SetConfig+0x16c>
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d00d      	beq.n	8004ed8 <UART_SetConfig+0x13c>
 8004ebc:	d824      	bhi.n	8004f08 <UART_SetConfig+0x16c>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <UART_SetConfig+0x12c>
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d010      	beq.n	8004ee8 <UART_SetConfig+0x14c>
 8004ec6:	e01f      	b.n	8004f08 <UART_SetConfig+0x16c>
 8004ec8:	231b      	movs	r3, #27
 8004eca:	2218      	movs	r2, #24
 8004ecc:	4694      	mov	ip, r2
 8004ece:	44bc      	add	ip, r7
 8004ed0:	4463      	add	r3, ip
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
 8004ed6:	e089      	b.n	8004fec <UART_SetConfig+0x250>
 8004ed8:	231b      	movs	r3, #27
 8004eda:	2218      	movs	r2, #24
 8004edc:	4694      	mov	ip, r2
 8004ede:	44bc      	add	ip, r7
 8004ee0:	4463      	add	r3, ip
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e081      	b.n	8004fec <UART_SetConfig+0x250>
 8004ee8:	231b      	movs	r3, #27
 8004eea:	2218      	movs	r2, #24
 8004eec:	4694      	mov	ip, r2
 8004eee:	44bc      	add	ip, r7
 8004ef0:	4463      	add	r3, ip
 8004ef2:	2204      	movs	r2, #4
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e079      	b.n	8004fec <UART_SetConfig+0x250>
 8004ef8:	231b      	movs	r3, #27
 8004efa:	2218      	movs	r2, #24
 8004efc:	4694      	mov	ip, r2
 8004efe:	44bc      	add	ip, r7
 8004f00:	4463      	add	r3, ip
 8004f02:	2208      	movs	r2, #8
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e071      	b.n	8004fec <UART_SetConfig+0x250>
 8004f08:	231b      	movs	r3, #27
 8004f0a:	2218      	movs	r2, #24
 8004f0c:	4694      	mov	ip, r2
 8004f0e:	44bc      	add	ip, r7
 8004f10:	4463      	add	r3, ip
 8004f12:	2210      	movs	r2, #16
 8004f14:	701a      	strb	r2, [r3, #0]
 8004f16:	e069      	b.n	8004fec <UART_SetConfig+0x250>
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a64      	ldr	r2, [pc, #400]	; (80050b0 <UART_SetConfig+0x314>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d107      	bne.n	8004f32 <UART_SetConfig+0x196>
 8004f22:	231b      	movs	r3, #27
 8004f24:	2218      	movs	r2, #24
 8004f26:	4694      	mov	ip, r2
 8004f28:	44bc      	add	ip, r7
 8004f2a:	4463      	add	r3, ip
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e05c      	b.n	8004fec <UART_SetConfig+0x250>
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a5f      	ldr	r2, [pc, #380]	; (80050b4 <UART_SetConfig+0x318>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d107      	bne.n	8004f4c <UART_SetConfig+0x1b0>
 8004f3c:	231b      	movs	r3, #27
 8004f3e:	2218      	movs	r2, #24
 8004f40:	4694      	mov	ip, r2
 8004f42:	44bc      	add	ip, r7
 8004f44:	4463      	add	r3, ip
 8004f46:	2200      	movs	r2, #0
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e04f      	b.n	8004fec <UART_SetConfig+0x250>
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a52      	ldr	r2, [pc, #328]	; (800509c <UART_SetConfig+0x300>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d143      	bne.n	8004fde <UART_SetConfig+0x242>
 8004f56:	4b54      	ldr	r3, [pc, #336]	; (80050a8 <UART_SetConfig+0x30c>)
 8004f58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f5a:	23c0      	movs	r3, #192	; 0xc0
 8004f5c:	011b      	lsls	r3, r3, #4
 8004f5e:	4013      	ands	r3, r2
 8004f60:	22c0      	movs	r2, #192	; 0xc0
 8004f62:	0112      	lsls	r2, r2, #4
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d02a      	beq.n	8004fbe <UART_SetConfig+0x222>
 8004f68:	22c0      	movs	r2, #192	; 0xc0
 8004f6a:	0112      	lsls	r2, r2, #4
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d82e      	bhi.n	8004fce <UART_SetConfig+0x232>
 8004f70:	2280      	movs	r2, #128	; 0x80
 8004f72:	0112      	lsls	r2, r2, #4
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d012      	beq.n	8004f9e <UART_SetConfig+0x202>
 8004f78:	2280      	movs	r2, #128	; 0x80
 8004f7a:	0112      	lsls	r2, r2, #4
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d826      	bhi.n	8004fce <UART_SetConfig+0x232>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d004      	beq.n	8004f8e <UART_SetConfig+0x1f2>
 8004f84:	2280      	movs	r2, #128	; 0x80
 8004f86:	00d2      	lsls	r2, r2, #3
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d010      	beq.n	8004fae <UART_SetConfig+0x212>
 8004f8c:	e01f      	b.n	8004fce <UART_SetConfig+0x232>
 8004f8e:	231b      	movs	r3, #27
 8004f90:	2218      	movs	r2, #24
 8004f92:	4694      	mov	ip, r2
 8004f94:	44bc      	add	ip, r7
 8004f96:	4463      	add	r3, ip
 8004f98:	2200      	movs	r2, #0
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e026      	b.n	8004fec <UART_SetConfig+0x250>
 8004f9e:	231b      	movs	r3, #27
 8004fa0:	2218      	movs	r2, #24
 8004fa2:	4694      	mov	ip, r2
 8004fa4:	44bc      	add	ip, r7
 8004fa6:	4463      	add	r3, ip
 8004fa8:	2202      	movs	r2, #2
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e01e      	b.n	8004fec <UART_SetConfig+0x250>
 8004fae:	231b      	movs	r3, #27
 8004fb0:	2218      	movs	r2, #24
 8004fb2:	4694      	mov	ip, r2
 8004fb4:	44bc      	add	ip, r7
 8004fb6:	4463      	add	r3, ip
 8004fb8:	2204      	movs	r2, #4
 8004fba:	701a      	strb	r2, [r3, #0]
 8004fbc:	e016      	b.n	8004fec <UART_SetConfig+0x250>
 8004fbe:	231b      	movs	r3, #27
 8004fc0:	2218      	movs	r2, #24
 8004fc2:	4694      	mov	ip, r2
 8004fc4:	44bc      	add	ip, r7
 8004fc6:	4463      	add	r3, ip
 8004fc8:	2208      	movs	r2, #8
 8004fca:	701a      	strb	r2, [r3, #0]
 8004fcc:	e00e      	b.n	8004fec <UART_SetConfig+0x250>
 8004fce:	231b      	movs	r3, #27
 8004fd0:	2218      	movs	r2, #24
 8004fd2:	4694      	mov	ip, r2
 8004fd4:	44bc      	add	ip, r7
 8004fd6:	4463      	add	r3, ip
 8004fd8:	2210      	movs	r2, #16
 8004fda:	701a      	strb	r2, [r3, #0]
 8004fdc:	e006      	b.n	8004fec <UART_SetConfig+0x250>
 8004fde:	231b      	movs	r3, #27
 8004fe0:	2218      	movs	r2, #24
 8004fe2:	4694      	mov	ip, r2
 8004fe4:	44bc      	add	ip, r7
 8004fe6:	4463      	add	r3, ip
 8004fe8:	2210      	movs	r2, #16
 8004fea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2a      	ldr	r2, [pc, #168]	; (800509c <UART_SetConfig+0x300>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d000      	beq.n	8004ff8 <UART_SetConfig+0x25c>
 8004ff6:	e09e      	b.n	8005136 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ff8:	231b      	movs	r3, #27
 8004ffa:	2218      	movs	r2, #24
 8004ffc:	4694      	mov	ip, r2
 8004ffe:	44bc      	add	ip, r7
 8005000:	4463      	add	r3, ip
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b08      	cmp	r3, #8
 8005006:	d01d      	beq.n	8005044 <UART_SetConfig+0x2a8>
 8005008:	dc20      	bgt.n	800504c <UART_SetConfig+0x2b0>
 800500a:	2b04      	cmp	r3, #4
 800500c:	d015      	beq.n	800503a <UART_SetConfig+0x29e>
 800500e:	dc1d      	bgt.n	800504c <UART_SetConfig+0x2b0>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <UART_SetConfig+0x27e>
 8005014:	2b02      	cmp	r3, #2
 8005016:	d005      	beq.n	8005024 <UART_SetConfig+0x288>
 8005018:	e018      	b.n	800504c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501a:	f7ff fccb 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 800501e:	0003      	movs	r3, r0
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005022:	e01d      	b.n	8005060 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005024:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <UART_SetConfig+0x30c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2210      	movs	r2, #16
 800502a:	4013      	ands	r3, r2
 800502c:	d002      	beq.n	8005034 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800502e:	4b22      	ldr	r3, [pc, #136]	; (80050b8 <UART_SetConfig+0x31c>)
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005032:	e015      	b.n	8005060 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8005034:	4b21      	ldr	r3, [pc, #132]	; (80050bc <UART_SetConfig+0x320>)
 8005036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005038:	e012      	b.n	8005060 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503a:	f7ff fc0b 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 800503e:	0003      	movs	r3, r0
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005042:	e00d      	b.n	8005060 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800504a:	e009      	b.n	8005060 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 800504c:	2300      	movs	r3, #0
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005050:	231a      	movs	r3, #26
 8005052:	2218      	movs	r2, #24
 8005054:	4694      	mov	ip, r2
 8005056:	44bc      	add	ip, r7
 8005058:	4463      	add	r3, ip
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]
        break;
 800505e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d100      	bne.n	8005068 <UART_SetConfig+0x2cc>
 8005066:	e13c      	b.n	80052e2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	0013      	movs	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	189b      	adds	r3, r3, r2
 8005072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005074:	429a      	cmp	r2, r3
 8005076:	d305      	bcc.n	8005084 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800507e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005080:	429a      	cmp	r2, r3
 8005082:	d91d      	bls.n	80050c0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8005084:	231a      	movs	r3, #26
 8005086:	2218      	movs	r2, #24
 8005088:	4694      	mov	ip, r2
 800508a:	44bc      	add	ip, r7
 800508c:	4463      	add	r3, ip
 800508e:	2201      	movs	r2, #1
 8005090:	701a      	strb	r2, [r3, #0]
 8005092:	e126      	b.n	80052e2 <UART_SetConfig+0x546>
 8005094:	efff69f3 	.word	0xefff69f3
 8005098:	ffffcfff 	.word	0xffffcfff
 800509c:	40004800 	.word	0x40004800
 80050a0:	fffff4ff 	.word	0xfffff4ff
 80050a4:	40013800 	.word	0x40013800
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40004400 	.word	0x40004400
 80050b0:	40004c00 	.word	0x40004c00
 80050b4:	40005000 	.word	0x40005000
 80050b8:	003d0900 	.word	0x003d0900
 80050bc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	613b      	str	r3, [r7, #16]
 80050c4:	2300      	movs	r3, #0
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	6939      	ldr	r1, [r7, #16]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	000b      	movs	r3, r1
 80050ce:	0e1b      	lsrs	r3, r3, #24
 80050d0:	0010      	movs	r0, r2
 80050d2:	0205      	lsls	r5, r0, #8
 80050d4:	431d      	orrs	r5, r3
 80050d6:	000b      	movs	r3, r1
 80050d8:	021c      	lsls	r4, r3, #8
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	085b      	lsrs	r3, r3, #1
 80050e0:	60bb      	str	r3, [r7, #8]
 80050e2:	2300      	movs	r3, #0
 80050e4:	60fb      	str	r3, [r7, #12]
 80050e6:	68b8      	ldr	r0, [r7, #8]
 80050e8:	68f9      	ldr	r1, [r7, #12]
 80050ea:	1900      	adds	r0, r0, r4
 80050ec:	4169      	adcs	r1, r5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	2300      	movs	r3, #0
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f7fb f890 	bl	8000220 <__aeabi_uldivmod>
 8005100:	0002      	movs	r2, r0
 8005102:	000b      	movs	r3, r1
 8005104:	0013      	movs	r3, r2
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510a:	23c0      	movs	r3, #192	; 0xc0
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	429a      	cmp	r2, r3
 8005110:	d309      	bcc.n	8005126 <UART_SetConfig+0x38a>
 8005112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	035b      	lsls	r3, r3, #13
 8005118:	429a      	cmp	r2, r3
 800511a:	d204      	bcs.n	8005126 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005122:	60da      	str	r2, [r3, #12]
 8005124:	e0dd      	b.n	80052e2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8005126:	231a      	movs	r3, #26
 8005128:	2218      	movs	r2, #24
 800512a:	4694      	mov	ip, r2
 800512c:	44bc      	add	ip, r7
 800512e:	4463      	add	r3, ip
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e0d5      	b.n	80052e2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	69da      	ldr	r2, [r3, #28]
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	429a      	cmp	r2, r3
 8005140:	d000      	beq.n	8005144 <UART_SetConfig+0x3a8>
 8005142:	e074      	b.n	800522e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8005144:	231b      	movs	r3, #27
 8005146:	2218      	movs	r2, #24
 8005148:	4694      	mov	ip, r2
 800514a:	44bc      	add	ip, r7
 800514c:	4463      	add	r3, ip
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d822      	bhi.n	800519a <UART_SetConfig+0x3fe>
 8005154:	009a      	lsls	r2, r3, #2
 8005156:	4b6b      	ldr	r3, [pc, #428]	; (8005304 <UART_SetConfig+0x568>)
 8005158:	18d3      	adds	r3, r2, r3
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800515e:	f7ff fc29 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 8005162:	0003      	movs	r3, r0
 8005164:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005166:	e022      	b.n	80051ae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7ff fc3a 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 800516c:	0003      	movs	r3, r0
 800516e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005170:	e01d      	b.n	80051ae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005172:	4b65      	ldr	r3, [pc, #404]	; (8005308 <UART_SetConfig+0x56c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2210      	movs	r2, #16
 8005178:	4013      	ands	r3, r2
 800517a:	d002      	beq.n	8005182 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800517c:	4b63      	ldr	r3, [pc, #396]	; (800530c <UART_SetConfig+0x570>)
 800517e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005180:	e015      	b.n	80051ae <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8005182:	4b63      	ldr	r3, [pc, #396]	; (8005310 <UART_SetConfig+0x574>)
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005186:	e012      	b.n	80051ae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005188:	f7ff fb64 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 800518c:	0003      	movs	r3, r0
 800518e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005190:	e00d      	b.n	80051ae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005198:	e009      	b.n	80051ae <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800519e:	231a      	movs	r3, #26
 80051a0:	2218      	movs	r2, #24
 80051a2:	4694      	mov	ip, r2
 80051a4:	44bc      	add	ip, r7
 80051a6:	4463      	add	r3, ip
 80051a8:	2201      	movs	r2, #1
 80051aa:	701a      	strb	r2, [r3, #0]
        break;
 80051ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d100      	bne.n	80051b6 <UART_SetConfig+0x41a>
 80051b4:	e095      	b.n	80052e2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b8:	005a      	lsls	r2, r3, #1
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	085b      	lsrs	r3, r3, #1
 80051c0:	18d2      	adds	r2, r2, r3
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	0019      	movs	r1, r3
 80051c8:	0010      	movs	r0, r2
 80051ca:	f7fa ff9d 	bl	8000108 <__udivsi3>
 80051ce:	0003      	movs	r3, r0
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	d921      	bls.n	800521e <UART_SetConfig+0x482>
 80051da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051dc:	2380      	movs	r3, #128	; 0x80
 80051de:	025b      	lsls	r3, r3, #9
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d21c      	bcs.n	800521e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	200e      	movs	r0, #14
 80051ea:	2418      	movs	r4, #24
 80051ec:	193b      	adds	r3, r7, r4
 80051ee:	181b      	adds	r3, r3, r0
 80051f0:	210f      	movs	r1, #15
 80051f2:	438a      	bics	r2, r1
 80051f4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	085b      	lsrs	r3, r3, #1
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2207      	movs	r2, #7
 80051fe:	4013      	ands	r3, r2
 8005200:	b299      	uxth	r1, r3
 8005202:	193b      	adds	r3, r7, r4
 8005204:	181b      	adds	r3, r3, r0
 8005206:	193a      	adds	r2, r7, r4
 8005208:	1812      	adds	r2, r2, r0
 800520a:	8812      	ldrh	r2, [r2, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	193a      	adds	r2, r7, r4
 8005216:	1812      	adds	r2, r2, r0
 8005218:	8812      	ldrh	r2, [r2, #0]
 800521a:	60da      	str	r2, [r3, #12]
 800521c:	e061      	b.n	80052e2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800521e:	231a      	movs	r3, #26
 8005220:	2218      	movs	r2, #24
 8005222:	4694      	mov	ip, r2
 8005224:	44bc      	add	ip, r7
 8005226:	4463      	add	r3, ip
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	e059      	b.n	80052e2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800522e:	231b      	movs	r3, #27
 8005230:	2218      	movs	r2, #24
 8005232:	4694      	mov	ip, r2
 8005234:	44bc      	add	ip, r7
 8005236:	4463      	add	r3, ip
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b08      	cmp	r3, #8
 800523c:	d822      	bhi.n	8005284 <UART_SetConfig+0x4e8>
 800523e:	009a      	lsls	r2, r3, #2
 8005240:	4b34      	ldr	r3, [pc, #208]	; (8005314 <UART_SetConfig+0x578>)
 8005242:	18d3      	adds	r3, r2, r3
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005248:	f7ff fbb4 	bl	80049b4 <HAL_RCC_GetPCLK1Freq>
 800524c:	0003      	movs	r3, r0
 800524e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005250:	e022      	b.n	8005298 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005252:	f7ff fbc5 	bl	80049e0 <HAL_RCC_GetPCLK2Freq>
 8005256:	0003      	movs	r3, r0
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800525a:	e01d      	b.n	8005298 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525c:	4b2a      	ldr	r3, [pc, #168]	; (8005308 <UART_SetConfig+0x56c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2210      	movs	r2, #16
 8005262:	4013      	ands	r3, r2
 8005264:	d002      	beq.n	800526c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <UART_SetConfig+0x570>)
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800526a:	e015      	b.n	8005298 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 800526c:	4b28      	ldr	r3, [pc, #160]	; (8005310 <UART_SetConfig+0x574>)
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005270:	e012      	b.n	8005298 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005272:	f7ff faef 	bl	8004854 <HAL_RCC_GetSysClockFreq>
 8005276:	0003      	movs	r3, r0
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800527a:	e00d      	b.n	8005298 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005282:	e009      	b.n	8005298 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005288:	231a      	movs	r3, #26
 800528a:	2218      	movs	r2, #24
 800528c:	4694      	mov	ip, r2
 800528e:	44bc      	add	ip, r7
 8005290:	4463      	add	r3, ip
 8005292:	2201      	movs	r2, #1
 8005294:	701a      	strb	r2, [r3, #0]
        break;
 8005296:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529a:	2b00      	cmp	r3, #0
 800529c:	d021      	beq.n	80052e2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	085a      	lsrs	r2, r3, #1
 80052a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052a6:	18d2      	adds	r2, r2, r3
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	0019      	movs	r1, r3
 80052ae:	0010      	movs	r0, r2
 80052b0:	f7fa ff2a 	bl	8000108 <__udivsi3>
 80052b4:	0003      	movs	r3, r0
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	2b0f      	cmp	r3, #15
 80052be:	d909      	bls.n	80052d4 <UART_SetConfig+0x538>
 80052c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c2:	2380      	movs	r3, #128	; 0x80
 80052c4:	025b      	lsls	r3, r3, #9
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d204      	bcs.n	80052d4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052d0:	60da      	str	r2, [r3, #12]
 80052d2:	e006      	b.n	80052e2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80052d4:	231a      	movs	r3, #26
 80052d6:	2218      	movs	r2, #24
 80052d8:	4694      	mov	ip, r2
 80052da:	44bc      	add	ip, r7
 80052dc:	4463      	add	r3, ip
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	2200      	movs	r2, #0
 80052e6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2200      	movs	r2, #0
 80052ec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052ee:	231a      	movs	r3, #26
 80052f0:	2218      	movs	r2, #24
 80052f2:	4694      	mov	ip, r2
 80052f4:	44bc      	add	ip, r7
 80052f6:	4463      	add	r3, ip
 80052f8:	781b      	ldrb	r3, [r3, #0]
}
 80052fa:	0018      	movs	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	b00e      	add	sp, #56	; 0x38
 8005300:	bdb0      	pop	{r4, r5, r7, pc}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	08009b98 	.word	0x08009b98
 8005308:	40021000 	.word	0x40021000
 800530c:	003d0900 	.word	0x003d0900
 8005310:	00f42400 	.word	0x00f42400
 8005314:	08009bbc 	.word	0x08009bbc

08005318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	2201      	movs	r2, #1
 8005326:	4013      	ands	r3, r2
 8005328:	d00b      	beq.n	8005342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4a4a      	ldr	r2, [pc, #296]	; (800545c <UART_AdvFeatureConfig+0x144>)
 8005332:	4013      	ands	r3, r2
 8005334:	0019      	movs	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005346:	2202      	movs	r2, #2
 8005348:	4013      	ands	r3, r2
 800534a:	d00b      	beq.n	8005364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a43      	ldr	r2, [pc, #268]	; (8005460 <UART_AdvFeatureConfig+0x148>)
 8005354:	4013      	ands	r3, r2
 8005356:	0019      	movs	r1, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2204      	movs	r2, #4
 800536a:	4013      	ands	r3, r2
 800536c:	d00b      	beq.n	8005386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4a3b      	ldr	r2, [pc, #236]	; (8005464 <UART_AdvFeatureConfig+0x14c>)
 8005376:	4013      	ands	r3, r2
 8005378:	0019      	movs	r1, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	2208      	movs	r2, #8
 800538c:	4013      	ands	r3, r2
 800538e:	d00b      	beq.n	80053a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	4a34      	ldr	r2, [pc, #208]	; (8005468 <UART_AdvFeatureConfig+0x150>)
 8005398:	4013      	ands	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	430a      	orrs	r2, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	2210      	movs	r2, #16
 80053ae:	4013      	ands	r3, r2
 80053b0:	d00b      	beq.n	80053ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4a2c      	ldr	r2, [pc, #176]	; (800546c <UART_AdvFeatureConfig+0x154>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	0019      	movs	r1, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ce:	2220      	movs	r2, #32
 80053d0:	4013      	ands	r3, r2
 80053d2:	d00b      	beq.n	80053ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	4a25      	ldr	r2, [pc, #148]	; (8005470 <UART_AdvFeatureConfig+0x158>)
 80053dc:	4013      	ands	r3, r2
 80053de:	0019      	movs	r1, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2240      	movs	r2, #64	; 0x40
 80053f2:	4013      	ands	r3, r2
 80053f4:	d01d      	beq.n	8005432 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <UART_AdvFeatureConfig+0x15c>)
 80053fe:	4013      	ands	r3, r2
 8005400:	0019      	movs	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	035b      	lsls	r3, r3, #13
 8005416:	429a      	cmp	r2, r3
 8005418:	d10b      	bne.n	8005432 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	4a15      	ldr	r2, [pc, #84]	; (8005478 <UART_AdvFeatureConfig+0x160>)
 8005422:	4013      	ands	r3, r2
 8005424:	0019      	movs	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005436:	2280      	movs	r2, #128	; 0x80
 8005438:	4013      	ands	r3, r2
 800543a:	d00b      	beq.n	8005454 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	4a0e      	ldr	r2, [pc, #56]	; (800547c <UART_AdvFeatureConfig+0x164>)
 8005444:	4013      	ands	r3, r2
 8005446:	0019      	movs	r1, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }
}
 8005454:	46c0      	nop			; (mov r8, r8)
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}
 800545c:	fffdffff 	.word	0xfffdffff
 8005460:	fffeffff 	.word	0xfffeffff
 8005464:	fffbffff 	.word	0xfffbffff
 8005468:	ffff7fff 	.word	0xffff7fff
 800546c:	ffffefff 	.word	0xffffefff
 8005470:	ffffdfff 	.word	0xffffdfff
 8005474:	ffefffff 	.word	0xffefffff
 8005478:	ff9fffff 	.word	0xff9fffff
 800547c:	fff7ffff 	.word	0xfff7ffff

08005480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2280      	movs	r2, #128	; 0x80
 800548c:	2100      	movs	r1, #0
 800548e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005490:	f7fb fe7c 	bl	800118c <HAL_GetTick>
 8005494:	0003      	movs	r3, r0
 8005496:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2208      	movs	r2, #8
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d10c      	bne.n	80054c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2280      	movs	r2, #128	; 0x80
 80054aa:	0391      	lsls	r1, r2, #14
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <UART_CheckIdleState+0x8c>)
 80054b0:	9200      	str	r2, [sp, #0]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f000 f82c 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80054b8:	1e03      	subs	r3, r0, #0
 80054ba:	d001      	beq.n	80054c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e021      	b.n	8005504 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2204      	movs	r2, #4
 80054c8:	4013      	ands	r3, r2
 80054ca:	2b04      	cmp	r3, #4
 80054cc:	d10c      	bne.n	80054e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2280      	movs	r2, #128	; 0x80
 80054d2:	03d1      	lsls	r1, r2, #15
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4a0d      	ldr	r2, [pc, #52]	; (800550c <UART_CheckIdleState+0x8c>)
 80054d8:	9200      	str	r2, [sp, #0]
 80054da:	2200      	movs	r2, #0
 80054dc:	f000 f818 	bl	8005510 <UART_WaitOnFlagUntilTimeout>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d001      	beq.n	80054e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e00d      	b.n	8005504 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2274      	movs	r2, #116	; 0x74
 80054fe:	2100      	movs	r1, #0
 8005500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005502:	2300      	movs	r3, #0
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b004      	add	sp, #16
 800550a:	bd80      	pop	{r7, pc}
 800550c:	01ffffff 	.word	0x01ffffff

08005510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b094      	sub	sp, #80	; 0x50
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	1dfb      	adds	r3, r7, #7
 800551e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005520:	e0a3      	b.n	800566a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005524:	3301      	adds	r3, #1
 8005526:	d100      	bne.n	800552a <UART_WaitOnFlagUntilTimeout+0x1a>
 8005528:	e09f      	b.n	800566a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800552a:	f7fb fe2f 	bl	800118c <HAL_GetTick>
 800552e:	0002      	movs	r2, r0
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005536:	429a      	cmp	r2, r3
 8005538:	d302      	bcc.n	8005540 <UART_WaitOnFlagUntilTimeout+0x30>
 800553a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800553c:	2b00      	cmp	r3, #0
 800553e:	d13d      	bne.n	80055bc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005540:	f3ef 8310 	mrs	r3, PRIMASK
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005546:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005548:	647b      	str	r3, [r7, #68]	; 0x44
 800554a:	2301      	movs	r3, #1
 800554c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	494c      	ldr	r1, [pc, #304]	; (8005694 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005562:	400a      	ands	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	643b      	str	r3, [r7, #64]	; 0x40
 800557c:	2301      	movs	r3, #1
 800557e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2101      	movs	r1, #1
 8005594:	438a      	bics	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2274      	movs	r2, #116	; 0x74
 80055b4:	2100      	movs	r1, #0
 80055b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e067      	b.n	800568c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2204      	movs	r2, #4
 80055c4:	4013      	ands	r3, r2
 80055c6:	d050      	beq.n	800566a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	2380      	movs	r3, #128	; 0x80
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	401a      	ands	r2, r3
 80055d4:	2380      	movs	r3, #128	; 0x80
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	429a      	cmp	r2, r3
 80055da:	d146      	bne.n	800566a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	0112      	lsls	r2, r2, #4
 80055e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055e6:	f3ef 8310 	mrs	r3, PRIMASK
 80055ea:	613b      	str	r3, [r7, #16]
  return(result);
 80055ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055f0:	2301      	movs	r3, #1
 80055f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f383 8810 	msr	PRIMASK, r3
}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4923      	ldr	r1, [pc, #140]	; (8005694 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005608:	400a      	ands	r2, r1
 800560a:	601a      	str	r2, [r3, #0]
 800560c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	f383 8810 	msr	PRIMASK, r3
}
 8005616:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005618:	f3ef 8310 	mrs	r3, PRIMASK
 800561c:	61fb      	str	r3, [r7, #28]
  return(result);
 800561e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005620:	64bb      	str	r3, [r7, #72]	; 0x48
 8005622:	2301      	movs	r3, #1
 8005624:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2101      	movs	r1, #1
 800563a:	438a      	bics	r2, r1
 800563c:	609a      	str	r2, [r3, #8]
 800563e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	f383 8810 	msr	PRIMASK, r3
}
 8005648:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	2120      	movs	r1, #32
 800565c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2274      	movs	r2, #116	; 0x74
 8005662:	2100      	movs	r1, #0
 8005664:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	e010      	b.n	800568c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	4013      	ands	r3, r2
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	425a      	negs	r2, r3
 800567a:	4153      	adcs	r3, r2
 800567c:	b2db      	uxtb	r3, r3
 800567e:	001a      	movs	r2, r3
 8005680:	1dfb      	adds	r3, r7, #7
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d100      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005688:	e74b      	b.n	8005522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b014      	add	sp, #80	; 0x50
 8005692:	bd80      	pop	{r7, pc}
 8005694:	fffffe5f 	.word	0xfffffe5f

08005698 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2244      	movs	r2, #68	; 0x44
 80056a4:	2100      	movs	r1, #0
 80056a6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <USB_EnableGlobalInt+0x28>)
 80056aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	b299      	uxth	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2240      	movs	r2, #64	; 0x40
 80056b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	0018      	movs	r0, r3
 80056ba:	46bd      	mov	sp, r7
 80056bc:	b004      	add	sp, #16
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	0000bf80 	.word	0x0000bf80

080056c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <USB_DisableGlobalInt+0x30>)
 80056ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2240      	movs	r2, #64	; 0x40
 80056d4:	5a9b      	ldrh	r3, [r3, r2]
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	b292      	uxth	r2, r2
 80056dc:	43d2      	mvns	r2, r2
 80056de:	b292      	uxth	r2, r2
 80056e0:	4013      	ands	r3, r2
 80056e2:	b299      	uxth	r1, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2240      	movs	r2, #64	; 0x40
 80056e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	0018      	movs	r0, r3
 80056ee:	46bd      	mov	sp, r7
 80056f0:	b004      	add	sp, #16
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	0000bf80 	.word	0x0000bf80

080056f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056f8:	b084      	sub	sp, #16
 80056fa:	b590      	push	{r4, r7, lr}
 80056fc:	46c6      	mov	lr, r8
 80056fe:	b500      	push	{lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	2004      	movs	r0, #4
 8005708:	2410      	movs	r4, #16
 800570a:	46a4      	mov	ip, r4
 800570c:	2408      	movs	r4, #8
 800570e:	46a0      	mov	r8, r4
 8005710:	44b8      	add	r8, r7
 8005712:	44c4      	add	ip, r8
 8005714:	4460      	add	r0, ip
 8005716:	6001      	str	r1, [r0, #0]
 8005718:	6042      	str	r2, [r0, #4]
 800571a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2240      	movs	r2, #64	; 0x40
 8005720:	2101      	movs	r1, #1
 8005722:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2240      	movs	r2, #64	; 0x40
 8005728:	2100      	movs	r1, #0
 800572a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2244      	movs	r2, #68	; 0x44
 8005730:	2100      	movs	r1, #0
 8005732:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2250      	movs	r2, #80	; 0x50
 8005738:	2100      	movs	r1, #0
 800573a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	b002      	add	sp, #8
 8005744:	bc80      	pop	{r7}
 8005746:	46b8      	mov	r8, r7
 8005748:	bc90      	pop	{r4, r7}
 800574a:	bc08      	pop	{r3}
 800574c:	b004      	add	sp, #16
 800574e:	4718      	bx	r3

08005750 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b09c      	sub	sp, #112	; 0x70
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800575a:	236f      	movs	r3, #111	; 0x6f
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	009b      	lsls	r3, r3, #2
 800576a:	18d3      	adds	r3, r2, r3
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29a      	uxth	r2, r3
 8005770:	236c      	movs	r3, #108	; 0x6c
 8005772:	18fb      	adds	r3, r7, r3
 8005774:	49cf      	ldr	r1, [pc, #828]	; (8005ab4 <USB_ActivateEndpoint+0x364>)
 8005776:	400a      	ands	r2, r1
 8005778:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	78db      	ldrb	r3, [r3, #3]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d017      	beq.n	80057b2 <USB_ActivateEndpoint+0x62>
 8005782:	dc28      	bgt.n	80057d6 <USB_ActivateEndpoint+0x86>
 8005784:	2b02      	cmp	r3, #2
 8005786:	d00e      	beq.n	80057a6 <USB_ActivateEndpoint+0x56>
 8005788:	dc25      	bgt.n	80057d6 <USB_ActivateEndpoint+0x86>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <USB_ActivateEndpoint+0x44>
 800578e:	2b01      	cmp	r3, #1
 8005790:	d018      	beq.n	80057c4 <USB_ActivateEndpoint+0x74>
 8005792:	e020      	b.n	80057d6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005794:	226c      	movs	r2, #108	; 0x6c
 8005796:	18bb      	adds	r3, r7, r2
 8005798:	18ba      	adds	r2, r7, r2
 800579a:	8812      	ldrh	r2, [r2, #0]
 800579c:	2180      	movs	r1, #128	; 0x80
 800579e:	0089      	lsls	r1, r1, #2
 80057a0:	430a      	orrs	r2, r1
 80057a2:	801a      	strh	r2, [r3, #0]
      break;
 80057a4:	e01c      	b.n	80057e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80057a6:	226c      	movs	r2, #108	; 0x6c
 80057a8:	18bb      	adds	r3, r7, r2
 80057aa:	18ba      	adds	r2, r7, r2
 80057ac:	8812      	ldrh	r2, [r2, #0]
 80057ae:	801a      	strh	r2, [r3, #0]
      break;
 80057b0:	e016      	b.n	80057e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80057b2:	226c      	movs	r2, #108	; 0x6c
 80057b4:	18bb      	adds	r3, r7, r2
 80057b6:	18ba      	adds	r2, r7, r2
 80057b8:	8812      	ldrh	r2, [r2, #0]
 80057ba:	21c0      	movs	r1, #192	; 0xc0
 80057bc:	00c9      	lsls	r1, r1, #3
 80057be:	430a      	orrs	r2, r1
 80057c0:	801a      	strh	r2, [r3, #0]
      break;
 80057c2:	e00d      	b.n	80057e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80057c4:	226c      	movs	r2, #108	; 0x6c
 80057c6:	18bb      	adds	r3, r7, r2
 80057c8:	18ba      	adds	r2, r7, r2
 80057ca:	8812      	ldrh	r2, [r2, #0]
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	00c9      	lsls	r1, r1, #3
 80057d0:	430a      	orrs	r2, r1
 80057d2:	801a      	strh	r2, [r3, #0]
      break;
 80057d4:	e004      	b.n	80057e0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80057d6:	236f      	movs	r3, #111	; 0x6f
 80057d8:	18fb      	adds	r3, r7, r3
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
      break;
 80057de:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	18d3      	adds	r3, r2, r3
 80057ea:	226c      	movs	r2, #108	; 0x6c
 80057ec:	18ba      	adds	r2, r7, r2
 80057ee:	8812      	ldrh	r2, [r2, #0]
 80057f0:	49b1      	ldr	r1, [pc, #708]	; (8005ab8 <USB_ActivateEndpoint+0x368>)
 80057f2:	430a      	orrs	r2, r1
 80057f4:	b292      	uxth	r2, r2
 80057f6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	18d3      	adds	r3, r2, r3
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	b21b      	sxth	r3, r3
 8005808:	4aac      	ldr	r2, [pc, #688]	; (8005abc <USB_ActivateEndpoint+0x36c>)
 800580a:	4013      	ands	r3, r2
 800580c:	b21a      	sxth	r2, r3
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	b21b      	sxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b21a      	sxth	r2, r3
 8005818:	2166      	movs	r1, #102	; 0x66
 800581a:	187b      	adds	r3, r7, r1
 800581c:	801a      	strh	r2, [r3, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	18d3      	adds	r3, r2, r3
 8005828:	187a      	adds	r2, r7, r1
 800582a:	8812      	ldrh	r2, [r2, #0]
 800582c:	49a2      	ldr	r1, [pc, #648]	; (8005ab8 <USB_ActivateEndpoint+0x368>)
 800582e:	430a      	orrs	r2, r1
 8005830:	b292      	uxth	r2, r2
 8005832:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	7b1b      	ldrb	r3, [r3, #12]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d000      	beq.n	800583e <USB_ActivateEndpoint+0xee>
 800583c:	e150      	b.n	8005ae0 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	785b      	ldrb	r3, [r3, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d100      	bne.n	8005848 <USB_ActivateEndpoint+0xf8>
 8005846:	e07a      	b.n	800593e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2250      	movs	r2, #80	; 0x50
 8005850:	5a9b      	ldrh	r3, [r3, r2]
 8005852:	b29b      	uxth	r3, r3
 8005854:	001a      	movs	r2, r3
 8005856:	69bb      	ldr	r3, [r7, #24]
 8005858:	189b      	adds	r3, r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	00da      	lsls	r2, r3, #3
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	18d3      	adds	r3, r2, r3
 8005866:	2280      	movs	r2, #128	; 0x80
 8005868:	00d2      	lsls	r2, r2, #3
 800586a:	4694      	mov	ip, r2
 800586c:	4463      	add	r3, ip
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	88db      	ldrh	r3, [r3, #6]
 8005874:	085b      	lsrs	r3, r3, #1
 8005876:	b29b      	uxth	r3, r3
 8005878:	18db      	adds	r3, r3, r3
 800587a:	b29a      	uxth	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	18d2      	adds	r2, r2, r3
 800588a:	2112      	movs	r1, #18
 800588c:	187b      	adds	r3, r7, r1
 800588e:	8812      	ldrh	r2, [r2, #0]
 8005890:	801a      	strh	r2, [r3, #0]
 8005892:	187b      	adds	r3, r7, r1
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	2240      	movs	r2, #64	; 0x40
 8005898:	4013      	ands	r3, r2
 800589a:	d016      	beq.n	80058ca <USB_ActivateEndpoint+0x17a>
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	18d3      	adds	r3, r2, r3
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	2010      	movs	r0, #16
 80058ac:	183b      	adds	r3, r7, r0
 80058ae:	4983      	ldr	r1, [pc, #524]	; (8005abc <USB_ActivateEndpoint+0x36c>)
 80058b0:	400a      	ands	r2, r1
 80058b2:	801a      	strh	r2, [r3, #0]
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	18d3      	adds	r3, r2, r3
 80058be:	183a      	adds	r2, r7, r0
 80058c0:	8812      	ldrh	r2, [r2, #0]
 80058c2:	497f      	ldr	r1, [pc, #508]	; (8005ac0 <USB_ActivateEndpoint+0x370>)
 80058c4:	430a      	orrs	r2, r1
 80058c6:	b292      	uxth	r2, r2
 80058c8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	78db      	ldrb	r3, [r3, #3]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d01d      	beq.n	800590e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	18d3      	adds	r3, r2, r3
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	b29a      	uxth	r2, r3
 80058e0:	200c      	movs	r0, #12
 80058e2:	183b      	adds	r3, r7, r0
 80058e4:	4977      	ldr	r1, [pc, #476]	; (8005ac4 <USB_ActivateEndpoint+0x374>)
 80058e6:	400a      	ands	r2, r1
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	183b      	adds	r3, r7, r0
 80058ec:	183a      	adds	r2, r7, r0
 80058ee:	8812      	ldrh	r2, [r2, #0]
 80058f0:	2120      	movs	r1, #32
 80058f2:	404a      	eors	r2, r1
 80058f4:	801a      	strh	r2, [r3, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	18d3      	adds	r3, r2, r3
 8005900:	183a      	adds	r2, r7, r0
 8005902:	8812      	ldrh	r2, [r2, #0]
 8005904:	496c      	ldr	r1, [pc, #432]	; (8005ab8 <USB_ActivateEndpoint+0x368>)
 8005906:	430a      	orrs	r2, r1
 8005908:	b292      	uxth	r2, r2
 800590a:	801a      	strh	r2, [r3, #0]
 800590c:	e27a      	b.n	8005e04 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	18d3      	adds	r3, r2, r3
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29a      	uxth	r2, r3
 800591c:	200e      	movs	r0, #14
 800591e:	183b      	adds	r3, r7, r0
 8005920:	4968      	ldr	r1, [pc, #416]	; (8005ac4 <USB_ActivateEndpoint+0x374>)
 8005922:	400a      	ands	r2, r1
 8005924:	801a      	strh	r2, [r3, #0]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	18d3      	adds	r3, r2, r3
 8005930:	183a      	adds	r2, r7, r0
 8005932:	8812      	ldrh	r2, [r2, #0]
 8005934:	4960      	ldr	r1, [pc, #384]	; (8005ab8 <USB_ActivateEndpoint+0x368>)
 8005936:	430a      	orrs	r2, r1
 8005938:	b292      	uxth	r2, r2
 800593a:	801a      	strh	r2, [r3, #0]
 800593c:	e262      	b.n	8005e04 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	633b      	str	r3, [r7, #48]	; 0x30
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2250      	movs	r2, #80	; 0x50
 8005946:	5a9b      	ldrh	r3, [r3, r2]
 8005948:	b29b      	uxth	r3, r3
 800594a:	001a      	movs	r2, r3
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	189b      	adds	r3, r3, r2
 8005950:	633b      	str	r3, [r7, #48]	; 0x30
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	00da      	lsls	r2, r3, #3
 8005958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595a:	18d3      	adds	r3, r2, r3
 800595c:	4a5a      	ldr	r2, [pc, #360]	; (8005ac8 <USB_ActivateEndpoint+0x378>)
 800595e:	4694      	mov	ip, r2
 8005960:	4463      	add	r3, ip
 8005962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	88db      	ldrh	r3, [r3, #6]
 8005968:	085b      	lsrs	r3, r3, #1
 800596a:	b29b      	uxth	r3, r3
 800596c:	18db      	adds	r3, r3, r3
 800596e:	b29a      	uxth	r2, r3
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2250      	movs	r2, #80	; 0x50
 800597c:	5a9b      	ldrh	r3, [r3, r2]
 800597e:	b29b      	uxth	r3, r3
 8005980:	001a      	movs	r2, r3
 8005982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005984:	189b      	adds	r3, r3, r2
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	00da      	lsls	r2, r3, #3
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	18d3      	adds	r3, r2, r3
 8005992:	4a4e      	ldr	r2, [pc, #312]	; (8005acc <USB_ActivateEndpoint+0x37c>)
 8005994:	4694      	mov	ip, r2
 8005996:	4463      	add	r3, ip
 8005998:	627b      	str	r3, [r7, #36]	; 0x24
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d110      	bne.n	80059c4 <USB_ActivateEndpoint+0x274>
 80059a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a4:	881b      	ldrh	r3, [r3, #0]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	4a49      	ldr	r2, [pc, #292]	; (8005ad0 <USB_ActivateEndpoint+0x380>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	4a46      	ldr	r2, [pc, #280]	; (8005ad4 <USB_ActivateEndpoint+0x384>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	b29a      	uxth	r2, r3
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	e02b      	b.n	8005a1c <USB_ActivateEndpoint+0x2cc>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b3e      	cmp	r3, #62	; 0x3e
 80059ca:	d812      	bhi.n	80059f2 <USB_ActivateEndpoint+0x2a2>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	085b      	lsrs	r3, r3, #1
 80059d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2201      	movs	r2, #1
 80059da:	4013      	ands	r3, r2
 80059dc:	d002      	beq.n	80059e4 <USB_ActivateEndpoint+0x294>
 80059de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059e0:	3301      	adds	r3, #1
 80059e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	029b      	lsls	r3, r3, #10
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e014      	b.n	8005a1c <USB_ActivateEndpoint+0x2cc>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	221f      	movs	r2, #31
 8005a00:	4013      	ands	r3, r2
 8005a02:	d102      	bne.n	8005a0a <USB_ActivateEndpoint+0x2ba>
 8005a04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a06:	3b01      	subs	r3, #1
 8005a08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	029b      	lsls	r3, r3, #10
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	4a30      	ldr	r2, [pc, #192]	; (8005ad4 <USB_ActivateEndpoint+0x384>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	18d2      	adds	r2, r2, r3
 8005a26:	2122      	movs	r1, #34	; 0x22
 8005a28:	187b      	adds	r3, r7, r1
 8005a2a:	8812      	ldrh	r2, [r2, #0]
 8005a2c:	801a      	strh	r2, [r3, #0]
 8005a2e:	187b      	adds	r3, r7, r1
 8005a30:	881a      	ldrh	r2, [r3, #0]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	01db      	lsls	r3, r3, #7
 8005a36:	4013      	ands	r3, r2
 8005a38:	d016      	beq.n	8005a68 <USB_ActivateEndpoint+0x318>
 8005a3a:	687a      	ldr	r2, [r7, #4]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	18d3      	adds	r3, r2, r3
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	2020      	movs	r0, #32
 8005a4a:	183b      	adds	r3, r7, r0
 8005a4c:	491b      	ldr	r1, [pc, #108]	; (8005abc <USB_ActivateEndpoint+0x36c>)
 8005a4e:	400a      	ands	r2, r1
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	18d3      	adds	r3, r2, r3
 8005a5c:	183a      	adds	r2, r7, r0
 8005a5e:	8812      	ldrh	r2, [r2, #0]
 8005a60:	491d      	ldr	r1, [pc, #116]	; (8005ad8 <USB_ActivateEndpoint+0x388>)
 8005a62:	430a      	orrs	r2, r1
 8005a64:	b292      	uxth	r2, r2
 8005a66:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	18d3      	adds	r3, r2, r3
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	201e      	movs	r0, #30
 8005a78:	183b      	adds	r3, r7, r0
 8005a7a:	4918      	ldr	r1, [pc, #96]	; (8005adc <USB_ActivateEndpoint+0x38c>)
 8005a7c:	400a      	ands	r2, r1
 8005a7e:	801a      	strh	r2, [r3, #0]
 8005a80:	183b      	adds	r3, r7, r0
 8005a82:	183a      	adds	r2, r7, r0
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	2180      	movs	r1, #128	; 0x80
 8005a88:	0149      	lsls	r1, r1, #5
 8005a8a:	404a      	eors	r2, r1
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	183b      	adds	r3, r7, r0
 8005a90:	183a      	adds	r2, r7, r0
 8005a92:	8812      	ldrh	r2, [r2, #0]
 8005a94:	2180      	movs	r1, #128	; 0x80
 8005a96:	0189      	lsls	r1, r1, #6
 8005a98:	404a      	eors	r2, r1
 8005a9a:	801a      	strh	r2, [r3, #0]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	18d3      	adds	r3, r2, r3
 8005aa6:	183a      	adds	r2, r7, r0
 8005aa8:	8812      	ldrh	r2, [r2, #0]
 8005aaa:	4903      	ldr	r1, [pc, #12]	; (8005ab8 <USB_ActivateEndpoint+0x368>)
 8005aac:	430a      	orrs	r2, r1
 8005aae:	b292      	uxth	r2, r2
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e1a7      	b.n	8005e04 <USB_ActivateEndpoint+0x6b4>
 8005ab4:	ffff898f 	.word	0xffff898f
 8005ab8:	ffff8080 	.word	0xffff8080
 8005abc:	ffff8f8f 	.word	0xffff8f8f
 8005ac0:	ffff80c0 	.word	0xffff80c0
 8005ac4:	ffff8fbf 	.word	0xffff8fbf
 8005ac8:	00000404 	.word	0x00000404
 8005acc:	00000406 	.word	0x00000406
 8005ad0:	ffff83ff 	.word	0xffff83ff
 8005ad4:	ffff8000 	.word	0xffff8000
 8005ad8:	ffffc080 	.word	0xffffc080
 8005adc:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	78db      	ldrb	r3, [r3, #3]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d117      	bne.n	8005b18 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	18d3      	adds	r3, r2, r3
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	b29a      	uxth	r2, r3
 8005af6:	2062      	movs	r0, #98	; 0x62
 8005af8:	183b      	adds	r3, r7, r0
 8005afa:	49c6      	ldr	r1, [pc, #792]	; (8005e14 <USB_ActivateEndpoint+0x6c4>)
 8005afc:	400a      	ands	r2, r1
 8005afe:	801a      	strh	r2, [r3, #0]
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	18d3      	adds	r3, r2, r3
 8005b0a:	183a      	adds	r2, r7, r0
 8005b0c:	8812      	ldrh	r2, [r2, #0]
 8005b0e:	49c2      	ldr	r1, [pc, #776]	; (8005e18 <USB_ActivateEndpoint+0x6c8>)
 8005b10:	430a      	orrs	r2, r1
 8005b12:	b292      	uxth	r2, r2
 8005b14:	801a      	strh	r2, [r3, #0]
 8005b16:	e016      	b.n	8005b46 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	18d3      	adds	r3, r2, r3
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	2064      	movs	r0, #100	; 0x64
 8005b28:	183b      	adds	r3, r7, r0
 8005b2a:	49bc      	ldr	r1, [pc, #752]	; (8005e1c <USB_ActivateEndpoint+0x6cc>)
 8005b2c:	400a      	ands	r2, r1
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	18d3      	adds	r3, r2, r3
 8005b3a:	183a      	adds	r2, r7, r0
 8005b3c:	8812      	ldrh	r2, [r2, #0]
 8005b3e:	49b8      	ldr	r1, [pc, #736]	; (8005e20 <USB_ActivateEndpoint+0x6d0>)
 8005b40:	430a      	orrs	r2, r1
 8005b42:	b292      	uxth	r2, r2
 8005b44:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2250      	movs	r2, #80	; 0x50
 8005b4e:	5a9b      	ldrh	r3, [r3, r2]
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	001a      	movs	r2, r3
 8005b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b56:	189b      	adds	r3, r3, r2
 8005b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	00da      	lsls	r2, r3, #3
 8005b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b62:	18d3      	adds	r3, r2, r3
 8005b64:	2280      	movs	r2, #128	; 0x80
 8005b66:	00d2      	lsls	r2, r2, #3
 8005b68:	4694      	mov	ip, r2
 8005b6a:	4463      	add	r3, ip
 8005b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	891b      	ldrh	r3, [r3, #8]
 8005b72:	085b      	lsrs	r3, r3, #1
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	18db      	adds	r3, r3, r3
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	657b      	str	r3, [r7, #84]	; 0x54
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2250      	movs	r2, #80	; 0x50
 8005b86:	5a9b      	ldrh	r3, [r3, r2]
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	001a      	movs	r2, r3
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	657b      	str	r3, [r7, #84]	; 0x54
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	00da      	lsls	r2, r3, #3
 8005b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9a:	18d3      	adds	r3, r2, r3
 8005b9c:	4aa1      	ldr	r2, [pc, #644]	; (8005e24 <USB_ActivateEndpoint+0x6d4>)
 8005b9e:	4694      	mov	ip, r2
 8005ba0:	4463      	add	r3, ip
 8005ba2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	895b      	ldrh	r3, [r3, #10]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	18db      	adds	r3, r3, r3
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bb2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d000      	beq.n	8005bbe <USB_ActivateEndpoint+0x46e>
 8005bbc:	e087      	b.n	8005cce <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	18d2      	adds	r2, r2, r3
 8005bc8:	2140      	movs	r1, #64	; 0x40
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	8812      	ldrh	r2, [r2, #0]
 8005bce:	801a      	strh	r2, [r3, #0]
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	881a      	ldrh	r2, [r3, #0]
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	01db      	lsls	r3, r3, #7
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d016      	beq.n	8005c0a <USB_ActivateEndpoint+0x4ba>
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	18d3      	adds	r3, r2, r3
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	203e      	movs	r0, #62	; 0x3e
 8005bec:	183b      	adds	r3, r7, r0
 8005bee:	4989      	ldr	r1, [pc, #548]	; (8005e14 <USB_ActivateEndpoint+0x6c4>)
 8005bf0:	400a      	ands	r2, r1
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	18d3      	adds	r3, r2, r3
 8005bfe:	183a      	adds	r2, r7, r0
 8005c00:	8812      	ldrh	r2, [r2, #0]
 8005c02:	4989      	ldr	r1, [pc, #548]	; (8005e28 <USB_ActivateEndpoint+0x6d8>)
 8005c04:	430a      	orrs	r2, r1
 8005c06:	b292      	uxth	r2, r2
 8005c08:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	18d2      	adds	r2, r2, r3
 8005c14:	213c      	movs	r1, #60	; 0x3c
 8005c16:	187b      	adds	r3, r7, r1
 8005c18:	8812      	ldrh	r2, [r2, #0]
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	187b      	adds	r3, r7, r1
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	2240      	movs	r2, #64	; 0x40
 8005c22:	4013      	ands	r3, r2
 8005c24:	d016      	beq.n	8005c54 <USB_ActivateEndpoint+0x504>
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	18d3      	adds	r3, r2, r3
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	203a      	movs	r0, #58	; 0x3a
 8005c36:	183b      	adds	r3, r7, r0
 8005c38:	4976      	ldr	r1, [pc, #472]	; (8005e14 <USB_ActivateEndpoint+0x6c4>)
 8005c3a:	400a      	ands	r2, r1
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	183a      	adds	r2, r7, r0
 8005c4a:	8812      	ldrh	r2, [r2, #0]
 8005c4c:	4977      	ldr	r1, [pc, #476]	; (8005e2c <USB_ActivateEndpoint+0x6dc>)
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	b292      	uxth	r2, r2
 8005c52:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	18d3      	adds	r3, r2, r3
 8005c5e:	881b      	ldrh	r3, [r3, #0]
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	2038      	movs	r0, #56	; 0x38
 8005c64:	183b      	adds	r3, r7, r0
 8005c66:	4972      	ldr	r1, [pc, #456]	; (8005e30 <USB_ActivateEndpoint+0x6e0>)
 8005c68:	400a      	ands	r2, r1
 8005c6a:	801a      	strh	r2, [r3, #0]
 8005c6c:	183b      	adds	r3, r7, r0
 8005c6e:	183a      	adds	r2, r7, r0
 8005c70:	8812      	ldrh	r2, [r2, #0]
 8005c72:	2180      	movs	r1, #128	; 0x80
 8005c74:	0149      	lsls	r1, r1, #5
 8005c76:	404a      	eors	r2, r1
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	183b      	adds	r3, r7, r0
 8005c7c:	183a      	adds	r2, r7, r0
 8005c7e:	8812      	ldrh	r2, [r2, #0]
 8005c80:	2180      	movs	r1, #128	; 0x80
 8005c82:	0189      	lsls	r1, r1, #6
 8005c84:	404a      	eors	r2, r1
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	18d3      	adds	r3, r2, r3
 8005c92:	183a      	adds	r2, r7, r0
 8005c94:	8812      	ldrh	r2, [r2, #0]
 8005c96:	4962      	ldr	r1, [pc, #392]	; (8005e20 <USB_ActivateEndpoint+0x6d0>)
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	b292      	uxth	r2, r2
 8005c9c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	18d3      	adds	r3, r2, r3
 8005ca8:	881b      	ldrh	r3, [r3, #0]
 8005caa:	b29a      	uxth	r2, r3
 8005cac:	2036      	movs	r0, #54	; 0x36
 8005cae:	183b      	adds	r3, r7, r0
 8005cb0:	4960      	ldr	r1, [pc, #384]	; (8005e34 <USB_ActivateEndpoint+0x6e4>)
 8005cb2:	400a      	ands	r2, r1
 8005cb4:	801a      	strh	r2, [r3, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	18d3      	adds	r3, r2, r3
 8005cc0:	183a      	adds	r2, r7, r0
 8005cc2:	8812      	ldrh	r2, [r2, #0]
 8005cc4:	4956      	ldr	r1, [pc, #344]	; (8005e20 <USB_ActivateEndpoint+0x6d0>)
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	b292      	uxth	r2, r2
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e09a      	b.n	8005e04 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	18d2      	adds	r2, r2, r3
 8005cd8:	214e      	movs	r1, #78	; 0x4e
 8005cda:	187b      	adds	r3, r7, r1
 8005cdc:	8812      	ldrh	r2, [r2, #0]
 8005cde:	801a      	strh	r2, [r3, #0]
 8005ce0:	187b      	adds	r3, r7, r1
 8005ce2:	881a      	ldrh	r2, [r3, #0]
 8005ce4:	2380      	movs	r3, #128	; 0x80
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d016      	beq.n	8005d1a <USB_ActivateEndpoint+0x5ca>
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	18d3      	adds	r3, r2, r3
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	204c      	movs	r0, #76	; 0x4c
 8005cfc:	183b      	adds	r3, r7, r0
 8005cfe:	4945      	ldr	r1, [pc, #276]	; (8005e14 <USB_ActivateEndpoint+0x6c4>)
 8005d00:	400a      	ands	r2, r1
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	18d3      	adds	r3, r2, r3
 8005d0e:	183a      	adds	r2, r7, r0
 8005d10:	8812      	ldrh	r2, [r2, #0]
 8005d12:	4945      	ldr	r1, [pc, #276]	; (8005e28 <USB_ActivateEndpoint+0x6d8>)
 8005d14:	430a      	orrs	r2, r1
 8005d16:	b292      	uxth	r2, r2
 8005d18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	18d2      	adds	r2, r2, r3
 8005d24:	214a      	movs	r1, #74	; 0x4a
 8005d26:	187b      	adds	r3, r7, r1
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	801a      	strh	r2, [r3, #0]
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	2240      	movs	r2, #64	; 0x40
 8005d32:	4013      	ands	r3, r2
 8005d34:	d016      	beq.n	8005d64 <USB_ActivateEndpoint+0x614>
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	18d3      	adds	r3, r2, r3
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	2048      	movs	r0, #72	; 0x48
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	4932      	ldr	r1, [pc, #200]	; (8005e14 <USB_ActivateEndpoint+0x6c4>)
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	801a      	strh	r2, [r3, #0]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	18d3      	adds	r3, r2, r3
 8005d58:	183a      	adds	r2, r7, r0
 8005d5a:	8812      	ldrh	r2, [r2, #0]
 8005d5c:	4933      	ldr	r1, [pc, #204]	; (8005e2c <USB_ActivateEndpoint+0x6dc>)
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	b292      	uxth	r2, r2
 8005d62:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	78db      	ldrb	r3, [r3, #3]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d01d      	beq.n	8005da8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	18d3      	adds	r3, r2, r3
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	2044      	movs	r0, #68	; 0x44
 8005d7c:	183b      	adds	r3, r7, r0
 8005d7e:	492d      	ldr	r1, [pc, #180]	; (8005e34 <USB_ActivateEndpoint+0x6e4>)
 8005d80:	400a      	ands	r2, r1
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	183b      	adds	r3, r7, r0
 8005d86:	183a      	adds	r2, r7, r0
 8005d88:	8812      	ldrh	r2, [r2, #0]
 8005d8a:	2120      	movs	r1, #32
 8005d8c:	404a      	eors	r2, r1
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	18d3      	adds	r3, r2, r3
 8005d9a:	183a      	adds	r2, r7, r0
 8005d9c:	8812      	ldrh	r2, [r2, #0]
 8005d9e:	4920      	ldr	r1, [pc, #128]	; (8005e20 <USB_ActivateEndpoint+0x6d0>)
 8005da0:	430a      	orrs	r2, r1
 8005da2:	b292      	uxth	r2, r2
 8005da4:	801a      	strh	r2, [r3, #0]
 8005da6:	e016      	b.n	8005dd6 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	18d3      	adds	r3, r2, r3
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	2046      	movs	r0, #70	; 0x46
 8005db8:	183b      	adds	r3, r7, r0
 8005dba:	491e      	ldr	r1, [pc, #120]	; (8005e34 <USB_ActivateEndpoint+0x6e4>)
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	18d3      	adds	r3, r2, r3
 8005dca:	183a      	adds	r2, r7, r0
 8005dcc:	8812      	ldrh	r2, [r2, #0]
 8005dce:	4914      	ldr	r1, [pc, #80]	; (8005e20 <USB_ActivateEndpoint+0x6d0>)
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	b292      	uxth	r2, r2
 8005dd4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29a      	uxth	r2, r3
 8005de4:	2042      	movs	r0, #66	; 0x42
 8005de6:	183b      	adds	r3, r7, r0
 8005de8:	4911      	ldr	r1, [pc, #68]	; (8005e30 <USB_ActivateEndpoint+0x6e0>)
 8005dea:	400a      	ands	r2, r1
 8005dec:	801a      	strh	r2, [r3, #0]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	18d3      	adds	r3, r2, r3
 8005df8:	183a      	adds	r2, r7, r0
 8005dfa:	8812      	ldrh	r2, [r2, #0]
 8005dfc:	4908      	ldr	r1, [pc, #32]	; (8005e20 <USB_ActivateEndpoint+0x6d0>)
 8005dfe:	430a      	orrs	r2, r1
 8005e00:	b292      	uxth	r2, r2
 8005e02:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005e04:	236f      	movs	r3, #111	; 0x6f
 8005e06:	18fb      	adds	r3, r7, r3
 8005e08:	781b      	ldrb	r3, [r3, #0]
}
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	b01c      	add	sp, #112	; 0x70
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	ffff8f8f 	.word	0xffff8f8f
 8005e18:	ffff8180 	.word	0xffff8180
 8005e1c:	ffff8e8f 	.word	0xffff8e8f
 8005e20:	ffff8080 	.word	0xffff8080
 8005e24:	00000404 	.word	0x00000404
 8005e28:	ffffc080 	.word	0xffffc080
 8005e2c:	ffff80c0 	.word	0xffff80c0
 8005e30:	ffffbf8f 	.word	0xffffbf8f
 8005e34:	ffff8fbf 	.word	0xffff8fbf

08005e38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08c      	sub	sp, #48	; 0x30
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	7b1b      	ldrb	r3, [r3, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d000      	beq.n	8005e4c <USB_DeactivateEndpoint+0x14>
 8005e4a:	e07e      	b.n	8005f4a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	785b      	ldrb	r3, [r3, #1]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d03c      	beq.n	8005ece <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	18d2      	adds	r2, r2, r3
 8005e5e:	210c      	movs	r1, #12
 8005e60:	187b      	adds	r3, r7, r1
 8005e62:	8812      	ldrh	r2, [r2, #0]
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	187b      	adds	r3, r7, r1
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	2240      	movs	r2, #64	; 0x40
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d016      	beq.n	8005e9e <USB_DeactivateEndpoint+0x66>
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	18d3      	adds	r3, r2, r3
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	200a      	movs	r0, #10
 8005e80:	183b      	adds	r3, r7, r0
 8005e82:	49c7      	ldr	r1, [pc, #796]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005e84:	400a      	ands	r2, r1
 8005e86:	801a      	strh	r2, [r3, #0]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	18d3      	adds	r3, r2, r3
 8005e92:	183a      	adds	r2, r7, r0
 8005e94:	8812      	ldrh	r2, [r2, #0]
 8005e96:	49c3      	ldr	r1, [pc, #780]	; (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	b292      	uxth	r2, r2
 8005e9c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	18d3      	adds	r3, r2, r3
 8005ea8:	881b      	ldrh	r3, [r3, #0]
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	2008      	movs	r0, #8
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	49bd      	ldr	r1, [pc, #756]	; (80061a8 <USB_DeactivateEndpoint+0x370>)
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	18d3      	adds	r3, r2, r3
 8005ec0:	183a      	adds	r2, r7, r0
 8005ec2:	8812      	ldrh	r2, [r2, #0]
 8005ec4:	49b9      	ldr	r1, [pc, #740]	; (80061ac <USB_DeactivateEndpoint+0x374>)
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	b292      	uxth	r2, r2
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e163      	b.n	8006196 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	18d2      	adds	r2, r2, r3
 8005ed8:	2112      	movs	r1, #18
 8005eda:	187b      	adds	r3, r7, r1
 8005edc:	8812      	ldrh	r2, [r2, #0]
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	187b      	adds	r3, r7, r1
 8005ee2:	881a      	ldrh	r2, [r3, #0]
 8005ee4:	2380      	movs	r3, #128	; 0x80
 8005ee6:	01db      	lsls	r3, r3, #7
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d016      	beq.n	8005f1a <USB_DeactivateEndpoint+0xe2>
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	18d3      	adds	r3, r2, r3
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	2010      	movs	r0, #16
 8005efc:	183b      	adds	r3, r7, r0
 8005efe:	49a8      	ldr	r1, [pc, #672]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005f00:	400a      	ands	r2, r1
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	18d3      	adds	r3, r2, r3
 8005f0e:	183a      	adds	r2, r7, r0
 8005f10:	8812      	ldrh	r2, [r2, #0]
 8005f12:	49a7      	ldr	r1, [pc, #668]	; (80061b0 <USB_DeactivateEndpoint+0x378>)
 8005f14:	430a      	orrs	r2, r1
 8005f16:	b292      	uxth	r2, r2
 8005f18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	18d3      	adds	r3, r2, r3
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	200e      	movs	r0, #14
 8005f2a:	183b      	adds	r3, r7, r0
 8005f2c:	49a1      	ldr	r1, [pc, #644]	; (80061b4 <USB_DeactivateEndpoint+0x37c>)
 8005f2e:	400a      	ands	r2, r1
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	18d3      	adds	r3, r2, r3
 8005f3c:	183a      	adds	r2, r7, r0
 8005f3e:	8812      	ldrh	r2, [r2, #0]
 8005f40:	499a      	ldr	r1, [pc, #616]	; (80061ac <USB_DeactivateEndpoint+0x374>)
 8005f42:	430a      	orrs	r2, r1
 8005f44:	b292      	uxth	r2, r2
 8005f46:	801a      	strh	r2, [r3, #0]
 8005f48:	e125      	b.n	8006196 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d000      	beq.n	8005f54 <USB_DeactivateEndpoint+0x11c>
 8005f52:	e090      	b.n	8006076 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	18d2      	adds	r2, r2, r3
 8005f5e:	2120      	movs	r1, #32
 8005f60:	187b      	adds	r3, r7, r1
 8005f62:	8812      	ldrh	r2, [r2, #0]
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	187b      	adds	r3, r7, r1
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	2380      	movs	r3, #128	; 0x80
 8005f6c:	01db      	lsls	r3, r3, #7
 8005f6e:	4013      	ands	r3, r2
 8005f70:	d016      	beq.n	8005fa0 <USB_DeactivateEndpoint+0x168>
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	18d3      	adds	r3, r2, r3
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	201e      	movs	r0, #30
 8005f82:	183b      	adds	r3, r7, r0
 8005f84:	4986      	ldr	r1, [pc, #536]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	801a      	strh	r2, [r3, #0]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	18d3      	adds	r3, r2, r3
 8005f94:	183a      	adds	r2, r7, r0
 8005f96:	8812      	ldrh	r2, [r2, #0]
 8005f98:	4985      	ldr	r1, [pc, #532]	; (80061b0 <USB_DeactivateEndpoint+0x378>)
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	b292      	uxth	r2, r2
 8005f9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	18d2      	adds	r2, r2, r3
 8005faa:	211c      	movs	r1, #28
 8005fac:	187b      	adds	r3, r7, r1
 8005fae:	8812      	ldrh	r2, [r2, #0]
 8005fb0:	801a      	strh	r2, [r3, #0]
 8005fb2:	187b      	adds	r3, r7, r1
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	2240      	movs	r2, #64	; 0x40
 8005fb8:	4013      	ands	r3, r2
 8005fba:	d016      	beq.n	8005fea <USB_DeactivateEndpoint+0x1b2>
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	18d3      	adds	r3, r2, r3
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	201a      	movs	r0, #26
 8005fcc:	183b      	adds	r3, r7, r0
 8005fce:	4974      	ldr	r1, [pc, #464]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	801a      	strh	r2, [r3, #0]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	183a      	adds	r2, r7, r0
 8005fe0:	8812      	ldrh	r2, [r2, #0]
 8005fe2:	4970      	ldr	r1, [pc, #448]	; (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	b292      	uxth	r2, r2
 8005fe8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	18d3      	adds	r3, r2, r3
 8005ff4:	881b      	ldrh	r3, [r3, #0]
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	2018      	movs	r0, #24
 8005ffa:	183b      	adds	r3, r7, r0
 8005ffc:	4968      	ldr	r1, [pc, #416]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 8005ffe:	400a      	ands	r2, r1
 8006000:	801a      	strh	r2, [r3, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	18d3      	adds	r3, r2, r3
 800600c:	183a      	adds	r2, r7, r0
 800600e:	8812      	ldrh	r2, [r2, #0]
 8006010:	4964      	ldr	r1, [pc, #400]	; (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8006012:	430a      	orrs	r2, r1
 8006014:	b292      	uxth	r2, r2
 8006016:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	009b      	lsls	r3, r3, #2
 8006020:	18d3      	adds	r3, r2, r3
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	b29a      	uxth	r2, r3
 8006026:	2016      	movs	r0, #22
 8006028:	183b      	adds	r3, r7, r0
 800602a:	4962      	ldr	r1, [pc, #392]	; (80061b4 <USB_DeactivateEndpoint+0x37c>)
 800602c:	400a      	ands	r2, r1
 800602e:	801a      	strh	r2, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	18d3      	adds	r3, r2, r3
 800603a:	183a      	adds	r2, r7, r0
 800603c:	8812      	ldrh	r2, [r2, #0]
 800603e:	495b      	ldr	r1, [pc, #364]	; (80061ac <USB_DeactivateEndpoint+0x374>)
 8006040:	430a      	orrs	r2, r1
 8006042:	b292      	uxth	r2, r2
 8006044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	18d3      	adds	r3, r2, r3
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	b29a      	uxth	r2, r3
 8006054:	2014      	movs	r0, #20
 8006056:	183b      	adds	r3, r7, r0
 8006058:	4953      	ldr	r1, [pc, #332]	; (80061a8 <USB_DeactivateEndpoint+0x370>)
 800605a:	400a      	ands	r2, r1
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	18d3      	adds	r3, r2, r3
 8006068:	183a      	adds	r2, r7, r0
 800606a:	8812      	ldrh	r2, [r2, #0]
 800606c:	494f      	ldr	r1, [pc, #316]	; (80061ac <USB_DeactivateEndpoint+0x374>)
 800606e:	430a      	orrs	r2, r1
 8006070:	b292      	uxth	r2, r2
 8006072:	801a      	strh	r2, [r3, #0]
 8006074:	e08f      	b.n	8006196 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	18d2      	adds	r2, r2, r3
 8006080:	212e      	movs	r1, #46	; 0x2e
 8006082:	187b      	adds	r3, r7, r1
 8006084:	8812      	ldrh	r2, [r2, #0]
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	187b      	adds	r3, r7, r1
 800608a:	881a      	ldrh	r2, [r3, #0]
 800608c:	2380      	movs	r3, #128	; 0x80
 800608e:	01db      	lsls	r3, r3, #7
 8006090:	4013      	ands	r3, r2
 8006092:	d016      	beq.n	80060c2 <USB_DeactivateEndpoint+0x28a>
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	18d3      	adds	r3, r2, r3
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	b29a      	uxth	r2, r3
 80060a2:	202c      	movs	r0, #44	; 0x2c
 80060a4:	183b      	adds	r3, r7, r0
 80060a6:	493e      	ldr	r1, [pc, #248]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 80060a8:	400a      	ands	r2, r1
 80060aa:	801a      	strh	r2, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	781b      	ldrb	r3, [r3, #0]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	18d3      	adds	r3, r2, r3
 80060b6:	183a      	adds	r2, r7, r0
 80060b8:	8812      	ldrh	r2, [r2, #0]
 80060ba:	493d      	ldr	r1, [pc, #244]	; (80061b0 <USB_DeactivateEndpoint+0x378>)
 80060bc:	430a      	orrs	r2, r1
 80060be:	b292      	uxth	r2, r2
 80060c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	18d2      	adds	r2, r2, r3
 80060cc:	212a      	movs	r1, #42	; 0x2a
 80060ce:	187b      	adds	r3, r7, r1
 80060d0:	8812      	ldrh	r2, [r2, #0]
 80060d2:	801a      	strh	r2, [r3, #0]
 80060d4:	187b      	adds	r3, r7, r1
 80060d6:	881b      	ldrh	r3, [r3, #0]
 80060d8:	2240      	movs	r2, #64	; 0x40
 80060da:	4013      	ands	r3, r2
 80060dc:	d016      	beq.n	800610c <USB_DeactivateEndpoint+0x2d4>
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	881b      	ldrh	r3, [r3, #0]
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	2028      	movs	r0, #40	; 0x28
 80060ee:	183b      	adds	r3, r7, r0
 80060f0:	492b      	ldr	r1, [pc, #172]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 80060f2:	400a      	ands	r2, r1
 80060f4:	801a      	strh	r2, [r3, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	18d3      	adds	r3, r2, r3
 8006100:	183a      	adds	r2, r7, r0
 8006102:	8812      	ldrh	r2, [r2, #0]
 8006104:	4927      	ldr	r1, [pc, #156]	; (80061a4 <USB_DeactivateEndpoint+0x36c>)
 8006106:	430a      	orrs	r2, r1
 8006108:	b292      	uxth	r2, r2
 800610a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	18d3      	adds	r3, r2, r3
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29a      	uxth	r2, r3
 800611a:	2026      	movs	r0, #38	; 0x26
 800611c:	183b      	adds	r3, r7, r0
 800611e:	4920      	ldr	r1, [pc, #128]	; (80061a0 <USB_DeactivateEndpoint+0x368>)
 8006120:	400a      	ands	r2, r1
 8006122:	801a      	strh	r2, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	183a      	adds	r2, r7, r0
 8006130:	8812      	ldrh	r2, [r2, #0]
 8006132:	491f      	ldr	r1, [pc, #124]	; (80061b0 <USB_DeactivateEndpoint+0x378>)
 8006134:	430a      	orrs	r2, r1
 8006136:	b292      	uxth	r2, r2
 8006138:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	18d3      	adds	r3, r2, r3
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29a      	uxth	r2, r3
 8006148:	2024      	movs	r0, #36	; 0x24
 800614a:	183b      	adds	r3, r7, r0
 800614c:	4916      	ldr	r1, [pc, #88]	; (80061a8 <USB_DeactivateEndpoint+0x370>)
 800614e:	400a      	ands	r2, r1
 8006150:	801a      	strh	r2, [r3, #0]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	18d3      	adds	r3, r2, r3
 800615c:	183a      	adds	r2, r7, r0
 800615e:	8812      	ldrh	r2, [r2, #0]
 8006160:	4912      	ldr	r1, [pc, #72]	; (80061ac <USB_DeactivateEndpoint+0x374>)
 8006162:	430a      	orrs	r2, r1
 8006164:	b292      	uxth	r2, r2
 8006166:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	18d3      	adds	r3, r2, r3
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29a      	uxth	r2, r3
 8006176:	2022      	movs	r0, #34	; 0x22
 8006178:	183b      	adds	r3, r7, r0
 800617a:	490e      	ldr	r1, [pc, #56]	; (80061b4 <USB_DeactivateEndpoint+0x37c>)
 800617c:	400a      	ands	r2, r1
 800617e:	801a      	strh	r2, [r3, #0]
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	18d3      	adds	r3, r2, r3
 800618a:	183a      	adds	r2, r7, r0
 800618c:	8812      	ldrh	r2, [r2, #0]
 800618e:	4907      	ldr	r1, [pc, #28]	; (80061ac <USB_DeactivateEndpoint+0x374>)
 8006190:	430a      	orrs	r2, r1
 8006192:	b292      	uxth	r2, r2
 8006194:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	0018      	movs	r0, r3
 800619a:	46bd      	mov	sp, r7
 800619c:	b00c      	add	sp, #48	; 0x30
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	ffff8f8f 	.word	0xffff8f8f
 80061a4:	ffff80c0 	.word	0xffff80c0
 80061a8:	ffff8fbf 	.word	0xffff8fbf
 80061ac:	ffff8080 	.word	0xffff8080
 80061b0:	ffffc080 	.word	0xffffc080
 80061b4:	ffffbf8f 	.word	0xffffbf8f

080061b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b8:	b590      	push	{r4, r7, lr}
 80061ba:	b0c3      	sub	sp, #268	; 0x10c
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d001      	beq.n	80061ce <USB_EPStartXfer+0x16>
 80061ca:	f000 fcef 	bl	8006bac <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d905      	bls.n	80061e6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	1d7a      	adds	r2, r7, #5
 80061e0:	32ff      	adds	r2, #255	; 0xff
 80061e2:	6013      	str	r3, [r2, #0]
 80061e4:	e004      	b.n	80061f0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	1d7a      	adds	r2, r7, #5
 80061ec:	32ff      	adds	r2, #255	; 0xff
 80061ee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	7b1b      	ldrb	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d125      	bne.n	8006244 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	6959      	ldr	r1, [r3, #20]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	88da      	ldrh	r2, [r3, #6]
 8006200:	1d7b      	adds	r3, r7, #5
 8006202:	33ff      	adds	r3, #255	; 0xff
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	b29b      	uxth	r3, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 f9c9 	bl	80075a0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2250      	movs	r2, #80	; 0x50
 8006216:	5a9b      	ldrh	r3, [r3, r2]
 8006218:	b29b      	uxth	r3, r3
 800621a:	001a      	movs	r2, r3
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	189b      	adds	r3, r3, r2
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	00da      	lsls	r2, r3, #3
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	4acc      	ldr	r2, [pc, #816]	; (8006560 <USB_EPStartXfer+0x3a8>)
 800622e:	4694      	mov	ip, r2
 8006230:	4463      	add	r3, ip
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	1d7b      	adds	r3, r7, #5
 8006236:	33ff      	adds	r3, #255	; 0xff
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	801a      	strh	r2, [r3, #0]
 8006240:	f000 fc8f 	bl	8006b62 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	78db      	ldrb	r3, [r3, #3]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d000      	beq.n	800624e <USB_EPStartXfer+0x96>
 800624c:	e33a      	b.n	80068c4 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	6a1a      	ldr	r2, [r3, #32]
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d800      	bhi.n	800625c <USB_EPStartXfer+0xa4>
 800625a:	e2df      	b.n	800681c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	18d3      	adds	r3, r2, r3
 8006266:	881b      	ldrh	r3, [r3, #0]
 8006268:	b29a      	uxth	r2, r3
 800626a:	2056      	movs	r0, #86	; 0x56
 800626c:	183b      	adds	r3, r7, r0
 800626e:	49bd      	ldr	r1, [pc, #756]	; (8006564 <USB_EPStartXfer+0x3ac>)
 8006270:	400a      	ands	r2, r1
 8006272:	801a      	strh	r2, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	18d3      	adds	r3, r2, r3
 800627e:	183a      	adds	r2, r7, r0
 8006280:	8812      	ldrh	r2, [r2, #0]
 8006282:	49b9      	ldr	r1, [pc, #740]	; (8006568 <USB_EPStartXfer+0x3b0>)
 8006284:	430a      	orrs	r2, r1
 8006286:	b292      	uxth	r2, r2
 8006288:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	1d7b      	adds	r3, r7, #5
 8006290:	33ff      	adds	r3, #255	; 0xff
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	1ad2      	subs	r2, r2, r3
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	001a      	movs	r2, r3
 80062aa:	2340      	movs	r3, #64	; 0x40
 80062ac:	4013      	ands	r3, r2
 80062ae:	d100      	bne.n	80062b2 <USB_EPStartXfer+0xfa>
 80062b0:	e162      	b.n	8006578 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	633b      	str	r3, [r7, #48]	; 0x30
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d16a      	bne.n	8006394 <USB_EPStartXfer+0x1dc>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2250      	movs	r2, #80	; 0x50
 80062c6:	5a9b      	ldrh	r3, [r3, r2]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	001a      	movs	r2, r3
 80062cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ce:	189b      	adds	r3, r3, r2
 80062d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	00da      	lsls	r2, r3, #3
 80062d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062da:	18d3      	adds	r3, r2, r3
 80062dc:	4aa3      	ldr	r2, [pc, #652]	; (800656c <USB_EPStartXfer+0x3b4>)
 80062de:	4694      	mov	ip, r2
 80062e0:	4463      	add	r3, ip
 80062e2:	627b      	str	r3, [r7, #36]	; 0x24
 80062e4:	1d7b      	adds	r3, r7, #5
 80062e6:	33ff      	adds	r3, #255	; 0xff
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d110      	bne.n	8006310 <USB_EPStartXfer+0x158>
 80062ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f0:	881b      	ldrh	r3, [r3, #0]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	4a9e      	ldr	r2, [pc, #632]	; (8006570 <USB_EPStartXfer+0x3b8>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	801a      	strh	r2, [r3, #0]
 80062fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29b      	uxth	r3, r3
 8006304:	4a9b      	ldr	r2, [pc, #620]	; (8006574 <USB_EPStartXfer+0x3bc>)
 8006306:	4313      	orrs	r3, r2
 8006308:	b29a      	uxth	r2, r3
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	801a      	strh	r2, [r3, #0]
 800630e:	e05c      	b.n	80063ca <USB_EPStartXfer+0x212>
 8006310:	1d7b      	adds	r3, r7, #5
 8006312:	33ff      	adds	r3, #255	; 0xff
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b3e      	cmp	r3, #62	; 0x3e
 8006318:	d81c      	bhi.n	8006354 <USB_EPStartXfer+0x19c>
 800631a:	1d7b      	adds	r3, r7, #5
 800631c:	33ff      	adds	r3, #255	; 0xff
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	085b      	lsrs	r3, r3, #1
 8006322:	1c7a      	adds	r2, r7, #1
 8006324:	32ff      	adds	r2, #255	; 0xff
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	1d7b      	adds	r3, r7, #5
 800632a:	33ff      	adds	r3, #255	; 0xff
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2201      	movs	r2, #1
 8006330:	4013      	ands	r3, r2
 8006332:	d006      	beq.n	8006342 <USB_EPStartXfer+0x18a>
 8006334:	1c7b      	adds	r3, r7, #1
 8006336:	33ff      	adds	r3, #255	; 0xff
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3301      	adds	r3, #1
 800633c:	1c7a      	adds	r2, r7, #1
 800633e:	32ff      	adds	r2, #255	; 0xff
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	1c7b      	adds	r3, r7, #1
 8006344:	33ff      	adds	r3, #255	; 0xff
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	029b      	lsls	r3, r3, #10
 800634c:	b29a      	uxth	r2, r3
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e03a      	b.n	80063ca <USB_EPStartXfer+0x212>
 8006354:	1d7b      	adds	r3, r7, #5
 8006356:	33ff      	adds	r3, #255	; 0xff
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	095b      	lsrs	r3, r3, #5
 800635c:	1c7a      	adds	r2, r7, #1
 800635e:	32ff      	adds	r2, #255	; 0xff
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	1d7b      	adds	r3, r7, #5
 8006364:	33ff      	adds	r3, #255	; 0xff
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	221f      	movs	r2, #31
 800636a:	4013      	ands	r3, r2
 800636c:	d106      	bne.n	800637c <USB_EPStartXfer+0x1c4>
 800636e:	1c7b      	adds	r3, r7, #1
 8006370:	33ff      	adds	r3, #255	; 0xff
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3b01      	subs	r3, #1
 8006376:	1c7a      	adds	r2, r7, #1
 8006378:	32ff      	adds	r2, #255	; 0xff
 800637a:	6013      	str	r3, [r2, #0]
 800637c:	1c7b      	adds	r3, r7, #1
 800637e:	33ff      	adds	r3, #255	; 0xff
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	b29b      	uxth	r3, r3
 8006384:	029b      	lsls	r3, r3, #10
 8006386:	b29b      	uxth	r3, r3
 8006388:	4a7a      	ldr	r2, [pc, #488]	; (8006574 <USB_EPStartXfer+0x3bc>)
 800638a:	4313      	orrs	r3, r2
 800638c:	b29a      	uxth	r2, r3
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	801a      	strh	r2, [r3, #0]
 8006392:	e01a      	b.n	80063ca <USB_EPStartXfer+0x212>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	785b      	ldrb	r3, [r3, #1]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d116      	bne.n	80063ca <USB_EPStartXfer+0x212>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2250      	movs	r2, #80	; 0x50
 80063a0:	5a9b      	ldrh	r3, [r3, r2]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	001a      	movs	r2, r3
 80063a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063a8:	189b      	adds	r3, r3, r2
 80063aa:	633b      	str	r3, [r7, #48]	; 0x30
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	00da      	lsls	r2, r3, #3
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	18d3      	adds	r3, r2, r3
 80063b6:	4a6d      	ldr	r2, [pc, #436]	; (800656c <USB_EPStartXfer+0x3b4>)
 80063b8:	4694      	mov	ip, r2
 80063ba:	4463      	add	r3, ip
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063be:	1d7b      	adds	r3, r7, #5
 80063c0:	33ff      	adds	r3, #255	; 0xff
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80063ca:	2076      	movs	r0, #118	; 0x76
 80063cc:	183b      	adds	r3, r7, r0
 80063ce:	683a      	ldr	r2, [r7, #0]
 80063d0:	8952      	ldrh	r2, [r2, #10]
 80063d2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	6959      	ldr	r1, [r3, #20]
 80063d8:	1d7b      	adds	r3, r7, #5
 80063da:	33ff      	adds	r3, #255	; 0xff
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	b29c      	uxth	r4, r3
 80063e0:	183b      	adds	r3, r7, r0
 80063e2:	881a      	ldrh	r2, [r3, #0]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	0023      	movs	r3, r4
 80063e8:	f001 f8da 	bl	80075a0 <USB_WritePMA>
            ep->xfer_buff += len;
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695a      	ldr	r2, [r3, #20]
 80063f0:	1d7b      	adds	r3, r7, #5
 80063f2:	33ff      	adds	r3, #255	; 0xff
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	18d2      	adds	r2, r2, r3
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	429a      	cmp	r2, r3
 8006406:	d908      	bls.n	800641a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	6a1a      	ldr	r2, [r3, #32]
 800640c:	1d7b      	adds	r3, r7, #5
 800640e:	33ff      	adds	r3, #255	; 0xff
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	621a      	str	r2, [r3, #32]
 8006418:	e007      	b.n	800642a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	1d7a      	adds	r2, r7, #5
 8006420:	32ff      	adds	r2, #255	; 0xff
 8006422:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	785b      	ldrb	r3, [r3, #1]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d166      	bne.n	8006500 <USB_EPStartXfer+0x348>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2250      	movs	r2, #80	; 0x50
 800643a:	5a9b      	ldrh	r3, [r3, r2]
 800643c:	b29b      	uxth	r3, r3
 800643e:	001a      	movs	r2, r3
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	189b      	adds	r3, r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	00da      	lsls	r2, r3, #3
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	18d3      	adds	r3, r2, r3
 8006450:	4a43      	ldr	r2, [pc, #268]	; (8006560 <USB_EPStartXfer+0x3a8>)
 8006452:	4694      	mov	ip, r2
 8006454:	4463      	add	r3, ip
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	1d7b      	adds	r3, r7, #5
 800645a:	33ff      	adds	r3, #255	; 0xff
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d110      	bne.n	8006484 <USB_EPStartXfer+0x2cc>
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	4a41      	ldr	r2, [pc, #260]	; (8006570 <USB_EPStartXfer+0x3b8>)
 800646a:	4013      	ands	r3, r2
 800646c:	b29a      	uxth	r2, r3
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	4a3e      	ldr	r2, [pc, #248]	; (8006574 <USB_EPStartXfer+0x3bc>)
 800647a:	4313      	orrs	r3, r2
 800647c:	b29a      	uxth	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	801a      	strh	r2, [r3, #0]
 8006482:	e05a      	b.n	800653a <USB_EPStartXfer+0x382>
 8006484:	1d7b      	adds	r3, r7, #5
 8006486:	33ff      	adds	r3, #255	; 0xff
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b3e      	cmp	r3, #62	; 0x3e
 800648c:	d81a      	bhi.n	80064c4 <USB_EPStartXfer+0x30c>
 800648e:	1d7b      	adds	r3, r7, #5
 8006490:	33ff      	adds	r3, #255	; 0xff
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	085b      	lsrs	r3, r3, #1
 8006496:	21fc      	movs	r1, #252	; 0xfc
 8006498:	187a      	adds	r2, r7, r1
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	1d7b      	adds	r3, r7, #5
 800649e:	33ff      	adds	r3, #255	; 0xff
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	4013      	ands	r3, r2
 80064a6:	d004      	beq.n	80064b2 <USB_EPStartXfer+0x2fa>
 80064a8:	187b      	adds	r3, r7, r1
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	187a      	adds	r2, r7, r1
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	23fc      	movs	r3, #252	; 0xfc
 80064b4:	18fb      	adds	r3, r7, r3
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	029b      	lsls	r3, r3, #10
 80064bc:	b29a      	uxth	r2, r3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	801a      	strh	r2, [r3, #0]
 80064c2:	e03a      	b.n	800653a <USB_EPStartXfer+0x382>
 80064c4:	1d7b      	adds	r3, r7, #5
 80064c6:	33ff      	adds	r3, #255	; 0xff
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	21fc      	movs	r1, #252	; 0xfc
 80064ce:	187a      	adds	r2, r7, r1
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	1d7b      	adds	r3, r7, #5
 80064d4:	33ff      	adds	r3, #255	; 0xff
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	221f      	movs	r2, #31
 80064da:	4013      	ands	r3, r2
 80064dc:	d104      	bne.n	80064e8 <USB_EPStartXfer+0x330>
 80064de:	187b      	adds	r3, r7, r1
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3b01      	subs	r3, #1
 80064e4:	187a      	adds	r2, r7, r1
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	23fc      	movs	r3, #252	; 0xfc
 80064ea:	18fb      	adds	r3, r7, r3
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	029b      	lsls	r3, r3, #10
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	4a1f      	ldr	r2, [pc, #124]	; (8006574 <USB_EPStartXfer+0x3bc>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	801a      	strh	r2, [r3, #0]
 80064fe:	e01c      	b.n	800653a <USB_EPStartXfer+0x382>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	785b      	ldrb	r3, [r3, #1]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d118      	bne.n	800653a <USB_EPStartXfer+0x382>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2250      	movs	r2, #80	; 0x50
 8006510:	5a9b      	ldrh	r3, [r3, r2]
 8006512:	b29b      	uxth	r3, r3
 8006514:	001a      	movs	r2, r3
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	189b      	adds	r3, r3, r2
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	00da      	lsls	r2, r3, #3
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	18d3      	adds	r3, r2, r3
 8006526:	4a0e      	ldr	r2, [pc, #56]	; (8006560 <USB_EPStartXfer+0x3a8>)
 8006528:	4694      	mov	ip, r2
 800652a:	4463      	add	r3, ip
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	1d7b      	adds	r3, r7, #5
 8006530:	33ff      	adds	r3, #255	; 0xff
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	b29a      	uxth	r2, r3
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800653a:	2076      	movs	r0, #118	; 0x76
 800653c:	183b      	adds	r3, r7, r0
 800653e:	683a      	ldr	r2, [r7, #0]
 8006540:	8912      	ldrh	r2, [r2, #8]
 8006542:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6959      	ldr	r1, [r3, #20]
 8006548:	1d7b      	adds	r3, r7, #5
 800654a:	33ff      	adds	r3, #255	; 0xff
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	b29c      	uxth	r4, r3
 8006550:	183b      	adds	r3, r7, r0
 8006552:	881a      	ldrh	r2, [r3, #0]
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	0023      	movs	r3, r4
 8006558:	f001 f822 	bl	80075a0 <USB_WritePMA>
 800655c:	e301      	b.n	8006b62 <USB_EPStartXfer+0x9aa>
 800655e:	46c0      	nop			; (mov r8, r8)
 8006560:	00000402 	.word	0x00000402
 8006564:	ffff8f8f 	.word	0xffff8f8f
 8006568:	ffff8180 	.word	0xffff8180
 800656c:	00000406 	.word	0x00000406
 8006570:	ffff83ff 	.word	0xffff83ff
 8006574:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	785b      	ldrb	r3, [r3, #1]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d166      	bne.n	800664e <USB_EPStartXfer+0x496>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	64bb      	str	r3, [r7, #72]	; 0x48
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2250      	movs	r2, #80	; 0x50
 8006588:	5a9b      	ldrh	r3, [r3, r2]
 800658a:	b29b      	uxth	r3, r3
 800658c:	001a      	movs	r2, r3
 800658e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006590:	189b      	adds	r3, r3, r2
 8006592:	64bb      	str	r3, [r7, #72]	; 0x48
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	00da      	lsls	r2, r3, #3
 800659a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800659c:	18d3      	adds	r3, r2, r3
 800659e:	4ac3      	ldr	r2, [pc, #780]	; (80068ac <USB_EPStartXfer+0x6f4>)
 80065a0:	4694      	mov	ip, r2
 80065a2:	4463      	add	r3, ip
 80065a4:	647b      	str	r3, [r7, #68]	; 0x44
 80065a6:	1d7b      	adds	r3, r7, #5
 80065a8:	33ff      	adds	r3, #255	; 0xff
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d110      	bne.n	80065d2 <USB_EPStartXfer+0x41a>
 80065b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	4abe      	ldr	r2, [pc, #760]	; (80068b0 <USB_EPStartXfer+0x6f8>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	4abb      	ldr	r2, [pc, #748]	; (80068b4 <USB_EPStartXfer+0x6fc>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ce:	801a      	strh	r2, [r3, #0]
 80065d0:	e05a      	b.n	8006688 <USB_EPStartXfer+0x4d0>
 80065d2:	1d7b      	adds	r3, r7, #5
 80065d4:	33ff      	adds	r3, #255	; 0xff
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b3e      	cmp	r3, #62	; 0x3e
 80065da:	d81a      	bhi.n	8006612 <USB_EPStartXfer+0x45a>
 80065dc:	1d7b      	adds	r3, r7, #5
 80065de:	33ff      	adds	r3, #255	; 0xff
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	085b      	lsrs	r3, r3, #1
 80065e4:	21f8      	movs	r1, #248	; 0xf8
 80065e6:	187a      	adds	r2, r7, r1
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	1d7b      	adds	r3, r7, #5
 80065ec:	33ff      	adds	r3, #255	; 0xff
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2201      	movs	r2, #1
 80065f2:	4013      	ands	r3, r2
 80065f4:	d004      	beq.n	8006600 <USB_EPStartXfer+0x448>
 80065f6:	187b      	adds	r3, r7, r1
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	187a      	adds	r2, r7, r1
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	23f8      	movs	r3, #248	; 0xf8
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	029b      	lsls	r3, r3, #10
 800660a:	b29a      	uxth	r2, r3
 800660c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e03a      	b.n	8006688 <USB_EPStartXfer+0x4d0>
 8006612:	1d7b      	adds	r3, r7, #5
 8006614:	33ff      	adds	r3, #255	; 0xff
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	095b      	lsrs	r3, r3, #5
 800661a:	21f8      	movs	r1, #248	; 0xf8
 800661c:	187a      	adds	r2, r7, r1
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	1d7b      	adds	r3, r7, #5
 8006622:	33ff      	adds	r3, #255	; 0xff
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	221f      	movs	r2, #31
 8006628:	4013      	ands	r3, r2
 800662a:	d104      	bne.n	8006636 <USB_EPStartXfer+0x47e>
 800662c:	187b      	adds	r3, r7, r1
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	187a      	adds	r2, r7, r1
 8006634:	6013      	str	r3, [r2, #0]
 8006636:	23f8      	movs	r3, #248	; 0xf8
 8006638:	18fb      	adds	r3, r7, r3
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	029b      	lsls	r3, r3, #10
 8006640:	b29b      	uxth	r3, r3
 8006642:	4a9c      	ldr	r2, [pc, #624]	; (80068b4 <USB_EPStartXfer+0x6fc>)
 8006644:	4313      	orrs	r3, r2
 8006646:	b29a      	uxth	r2, r3
 8006648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	e01c      	b.n	8006688 <USB_EPStartXfer+0x4d0>
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	785b      	ldrb	r3, [r3, #1]
 8006652:	2b01      	cmp	r3, #1
 8006654:	d118      	bne.n	8006688 <USB_EPStartXfer+0x4d0>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	653b      	str	r3, [r7, #80]	; 0x50
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2250      	movs	r2, #80	; 0x50
 800665e:	5a9b      	ldrh	r3, [r3, r2]
 8006660:	b29b      	uxth	r3, r3
 8006662:	001a      	movs	r2, r3
 8006664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006666:	189b      	adds	r3, r3, r2
 8006668:	653b      	str	r3, [r7, #80]	; 0x50
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	00da      	lsls	r2, r3, #3
 8006670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006672:	18d3      	adds	r3, r2, r3
 8006674:	4a8d      	ldr	r2, [pc, #564]	; (80068ac <USB_EPStartXfer+0x6f4>)
 8006676:	4694      	mov	ip, r2
 8006678:	4463      	add	r3, ip
 800667a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800667c:	1d7b      	adds	r3, r7, #5
 800667e:	33ff      	adds	r3, #255	; 0xff
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	b29a      	uxth	r2, r3
 8006684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006686:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006688:	2076      	movs	r0, #118	; 0x76
 800668a:	183b      	adds	r3, r7, r0
 800668c:	683a      	ldr	r2, [r7, #0]
 800668e:	8912      	ldrh	r2, [r2, #8]
 8006690:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	6959      	ldr	r1, [r3, #20]
 8006696:	1d7b      	adds	r3, r7, #5
 8006698:	33ff      	adds	r3, #255	; 0xff
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	b29c      	uxth	r4, r3
 800669e:	183b      	adds	r3, r7, r0
 80066a0:	881a      	ldrh	r2, [r3, #0]
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	0023      	movs	r3, r4
 80066a6:	f000 ff7b 	bl	80075a0 <USB_WritePMA>
            ep->xfer_buff += len;
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	1d7b      	adds	r3, r7, #5
 80066b0:	33ff      	adds	r3, #255	; 0xff
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	18d2      	adds	r2, r2, r3
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6a1a      	ldr	r2, [r3, #32]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d908      	bls.n	80066d8 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	6a1a      	ldr	r2, [r3, #32]
 80066ca:	1d7b      	adds	r3, r7, #5
 80066cc:	33ff      	adds	r3, #255	; 0xff
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	1ad2      	subs	r2, r2, r3
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	621a      	str	r2, [r3, #32]
 80066d6:	e007      	b.n	80066e8 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	6a1b      	ldr	r3, [r3, #32]
 80066dc:	1d7a      	adds	r2, r7, #5
 80066de:	32ff      	adds	r2, #255	; 0xff
 80066e0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2200      	movs	r2, #0
 80066e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	643b      	str	r3, [r7, #64]	; 0x40
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d166      	bne.n	80067c2 <USB_EPStartXfer+0x60a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2250      	movs	r2, #80	; 0x50
 80066fc:	5a9b      	ldrh	r3, [r3, r2]
 80066fe:	b29b      	uxth	r3, r3
 8006700:	001a      	movs	r2, r3
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	189b      	adds	r3, r3, r2
 8006706:	63bb      	str	r3, [r7, #56]	; 0x38
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	00da      	lsls	r2, r3, #3
 800670e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006710:	18d3      	adds	r3, r2, r3
 8006712:	4a69      	ldr	r2, [pc, #420]	; (80068b8 <USB_EPStartXfer+0x700>)
 8006714:	4694      	mov	ip, r2
 8006716:	4463      	add	r3, ip
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
 800671a:	1d7b      	adds	r3, r7, #5
 800671c:	33ff      	adds	r3, #255	; 0xff
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d110      	bne.n	8006746 <USB_EPStartXfer+0x58e>
 8006724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	b29b      	uxth	r3, r3
 800672a:	4a61      	ldr	r2, [pc, #388]	; (80068b0 <USB_EPStartXfer+0x6f8>)
 800672c:	4013      	ands	r3, r2
 800672e:	b29a      	uxth	r2, r3
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	801a      	strh	r2, [r3, #0]
 8006734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	b29b      	uxth	r3, r3
 800673a:	4a5e      	ldr	r2, [pc, #376]	; (80068b4 <USB_EPStartXfer+0x6fc>)
 800673c:	4313      	orrs	r3, r2
 800673e:	b29a      	uxth	r2, r3
 8006740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006742:	801a      	strh	r2, [r3, #0]
 8006744:	e058      	b.n	80067f8 <USB_EPStartXfer+0x640>
 8006746:	1d7b      	adds	r3, r7, #5
 8006748:	33ff      	adds	r3, #255	; 0xff
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b3e      	cmp	r3, #62	; 0x3e
 800674e:	d81a      	bhi.n	8006786 <USB_EPStartXfer+0x5ce>
 8006750:	1d7b      	adds	r3, r7, #5
 8006752:	33ff      	adds	r3, #255	; 0xff
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	085b      	lsrs	r3, r3, #1
 8006758:	21f4      	movs	r1, #244	; 0xf4
 800675a:	187a      	adds	r2, r7, r1
 800675c:	6013      	str	r3, [r2, #0]
 800675e:	1d7b      	adds	r3, r7, #5
 8006760:	33ff      	adds	r3, #255	; 0xff
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2201      	movs	r2, #1
 8006766:	4013      	ands	r3, r2
 8006768:	d004      	beq.n	8006774 <USB_EPStartXfer+0x5bc>
 800676a:	187b      	adds	r3, r7, r1
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3301      	adds	r3, #1
 8006770:	187a      	adds	r2, r7, r1
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	23f4      	movs	r3, #244	; 0xf4
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	b29b      	uxth	r3, r3
 800677c:	029b      	lsls	r3, r3, #10
 800677e:	b29a      	uxth	r2, r3
 8006780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006782:	801a      	strh	r2, [r3, #0]
 8006784:	e038      	b.n	80067f8 <USB_EPStartXfer+0x640>
 8006786:	1d7b      	adds	r3, r7, #5
 8006788:	33ff      	adds	r3, #255	; 0xff
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	21f4      	movs	r1, #244	; 0xf4
 8006790:	187a      	adds	r2, r7, r1
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	1d7b      	adds	r3, r7, #5
 8006796:	33ff      	adds	r3, #255	; 0xff
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	221f      	movs	r2, #31
 800679c:	4013      	ands	r3, r2
 800679e:	d104      	bne.n	80067aa <USB_EPStartXfer+0x5f2>
 80067a0:	187b      	adds	r3, r7, r1
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3b01      	subs	r3, #1
 80067a6:	187a      	adds	r2, r7, r1
 80067a8:	6013      	str	r3, [r2, #0]
 80067aa:	23f4      	movs	r3, #244	; 0xf4
 80067ac:	18fb      	adds	r3, r7, r3
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	029b      	lsls	r3, r3, #10
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4a3f      	ldr	r2, [pc, #252]	; (80068b4 <USB_EPStartXfer+0x6fc>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067be:	801a      	strh	r2, [r3, #0]
 80067c0:	e01a      	b.n	80067f8 <USB_EPStartXfer+0x640>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	785b      	ldrb	r3, [r3, #1]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d116      	bne.n	80067f8 <USB_EPStartXfer+0x640>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2250      	movs	r2, #80	; 0x50
 80067ce:	5a9b      	ldrh	r3, [r3, r2]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	001a      	movs	r2, r3
 80067d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067d6:	189b      	adds	r3, r3, r2
 80067d8:	643b      	str	r3, [r7, #64]	; 0x40
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	781b      	ldrb	r3, [r3, #0]
 80067de:	00da      	lsls	r2, r3, #3
 80067e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e2:	18d3      	adds	r3, r2, r3
 80067e4:	4a34      	ldr	r2, [pc, #208]	; (80068b8 <USB_EPStartXfer+0x700>)
 80067e6:	4694      	mov	ip, r2
 80067e8:	4463      	add	r3, ip
 80067ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067ec:	1d7b      	adds	r3, r7, #5
 80067ee:	33ff      	adds	r3, #255	; 0xff
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067f8:	2076      	movs	r0, #118	; 0x76
 80067fa:	183b      	adds	r3, r7, r0
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	8952      	ldrh	r2, [r2, #10]
 8006800:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	6959      	ldr	r1, [r3, #20]
 8006806:	1d7b      	adds	r3, r7, #5
 8006808:	33ff      	adds	r3, #255	; 0xff
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	b29c      	uxth	r4, r3
 800680e:	183b      	adds	r3, r7, r0
 8006810:	881a      	ldrh	r2, [r3, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	0023      	movs	r3, r4
 8006816:	f000 fec3 	bl	80075a0 <USB_WritePMA>
 800681a:	e1a2      	b.n	8006b62 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	6a1b      	ldr	r3, [r3, #32]
 8006820:	1d7a      	adds	r2, r7, #5
 8006822:	32ff      	adds	r2, #255	; 0xff
 8006824:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	18d3      	adds	r3, r2, r3
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29a      	uxth	r2, r3
 8006834:	2062      	movs	r0, #98	; 0x62
 8006836:	183b      	adds	r3, r7, r0
 8006838:	4920      	ldr	r1, [pc, #128]	; (80068bc <USB_EPStartXfer+0x704>)
 800683a:	400a      	ands	r2, r1
 800683c:	801a      	strh	r2, [r3, #0]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	18d3      	adds	r3, r2, r3
 8006848:	183a      	adds	r2, r7, r0
 800684a:	8812      	ldrh	r2, [r2, #0]
 800684c:	491c      	ldr	r1, [pc, #112]	; (80068c0 <USB_EPStartXfer+0x708>)
 800684e:	430a      	orrs	r2, r1
 8006850:	b292      	uxth	r2, r2
 8006852:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2250      	movs	r2, #80	; 0x50
 800685c:	5a9b      	ldrh	r3, [r3, r2]
 800685e:	b29b      	uxth	r3, r3
 8006860:	001a      	movs	r2, r3
 8006862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006864:	189b      	adds	r3, r3, r2
 8006866:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006870:	18d3      	adds	r3, r2, r3
 8006872:	4a0e      	ldr	r2, [pc, #56]	; (80068ac <USB_EPStartXfer+0x6f4>)
 8006874:	4694      	mov	ip, r2
 8006876:	4463      	add	r3, ip
 8006878:	65bb      	str	r3, [r7, #88]	; 0x58
 800687a:	1d7b      	adds	r3, r7, #5
 800687c:	33ff      	adds	r3, #255	; 0xff
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	b29a      	uxth	r2, r3
 8006882:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006884:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006886:	2076      	movs	r0, #118	; 0x76
 8006888:	183b      	adds	r3, r7, r0
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	8912      	ldrh	r2, [r2, #8]
 800688e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	6959      	ldr	r1, [r3, #20]
 8006894:	1d7b      	adds	r3, r7, #5
 8006896:	33ff      	adds	r3, #255	; 0xff
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	b29c      	uxth	r4, r3
 800689c:	183b      	adds	r3, r7, r0
 800689e:	881a      	ldrh	r2, [r3, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	0023      	movs	r3, r4
 80068a4:	f000 fe7c 	bl	80075a0 <USB_WritePMA>
 80068a8:	e15b      	b.n	8006b62 <USB_EPStartXfer+0x9aa>
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	00000402 	.word	0x00000402
 80068b0:	ffff83ff 	.word	0xffff83ff
 80068b4:	ffff8000 	.word	0xffff8000
 80068b8:	00000406 	.word	0x00000406
 80068bc:	ffff8e8f 	.word	0xffff8e8f
 80068c0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	1d7b      	adds	r3, r7, #5
 80068ca:	33ff      	adds	r3, #255	; 0xff
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	1ad2      	subs	r2, r2, r3
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	18d3      	adds	r3, r2, r3
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	001a      	movs	r2, r3
 80068e4:	2340      	movs	r3, #64	; 0x40
 80068e6:	4013      	ands	r3, r2
 80068e8:	d100      	bne.n	80068ec <USB_EPStartXfer+0x734>
 80068ea:	e099      	b.n	8006a20 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	673b      	str	r3, [r7, #112]	; 0x70
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d166      	bne.n	80069c6 <USB_EPStartXfer+0x80e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2250      	movs	r2, #80	; 0x50
 8006900:	5a9b      	ldrh	r3, [r3, r2]
 8006902:	b29b      	uxth	r3, r3
 8006904:	001a      	movs	r2, r3
 8006906:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006908:	189b      	adds	r3, r3, r2
 800690a:	66bb      	str	r3, [r7, #104]	; 0x68
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	00da      	lsls	r2, r3, #3
 8006912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006914:	18d3      	adds	r3, r2, r3
 8006916:	4ad0      	ldr	r2, [pc, #832]	; (8006c58 <USB_EPStartXfer+0xaa0>)
 8006918:	4694      	mov	ip, r2
 800691a:	4463      	add	r3, ip
 800691c:	667b      	str	r3, [r7, #100]	; 0x64
 800691e:	1d7b      	adds	r3, r7, #5
 8006920:	33ff      	adds	r3, #255	; 0xff
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d110      	bne.n	800694a <USB_EPStartXfer+0x792>
 8006928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	4acb      	ldr	r2, [pc, #812]	; (8006c5c <USB_EPStartXfer+0xaa4>)
 8006930:	4013      	ands	r3, r2
 8006932:	b29a      	uxth	r2, r3
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	801a      	strh	r2, [r3, #0]
 8006938:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	4ac8      	ldr	r2, [pc, #800]	; (8006c60 <USB_EPStartXfer+0xaa8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006946:	801a      	strh	r2, [r3, #0]
 8006948:	e058      	b.n	80069fc <USB_EPStartXfer+0x844>
 800694a:	1d7b      	adds	r3, r7, #5
 800694c:	33ff      	adds	r3, #255	; 0xff
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b3e      	cmp	r3, #62	; 0x3e
 8006952:	d81a      	bhi.n	800698a <USB_EPStartXfer+0x7d2>
 8006954:	1d7b      	adds	r3, r7, #5
 8006956:	33ff      	adds	r3, #255	; 0xff
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	21f0      	movs	r1, #240	; 0xf0
 800695e:	187a      	adds	r2, r7, r1
 8006960:	6013      	str	r3, [r2, #0]
 8006962:	1d7b      	adds	r3, r7, #5
 8006964:	33ff      	adds	r3, #255	; 0xff
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2201      	movs	r2, #1
 800696a:	4013      	ands	r3, r2
 800696c:	d004      	beq.n	8006978 <USB_EPStartXfer+0x7c0>
 800696e:	187b      	adds	r3, r7, r1
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3301      	adds	r3, #1
 8006974:	187a      	adds	r2, r7, r1
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	23f0      	movs	r3, #240	; 0xf0
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	029b      	lsls	r3, r3, #10
 8006982:	b29a      	uxth	r2, r3
 8006984:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006986:	801a      	strh	r2, [r3, #0]
 8006988:	e038      	b.n	80069fc <USB_EPStartXfer+0x844>
 800698a:	1d7b      	adds	r3, r7, #5
 800698c:	33ff      	adds	r3, #255	; 0xff
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	095b      	lsrs	r3, r3, #5
 8006992:	21f0      	movs	r1, #240	; 0xf0
 8006994:	187a      	adds	r2, r7, r1
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	1d7b      	adds	r3, r7, #5
 800699a:	33ff      	adds	r3, #255	; 0xff
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	221f      	movs	r2, #31
 80069a0:	4013      	ands	r3, r2
 80069a2:	d104      	bne.n	80069ae <USB_EPStartXfer+0x7f6>
 80069a4:	187b      	adds	r3, r7, r1
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	3b01      	subs	r3, #1
 80069aa:	187a      	adds	r2, r7, r1
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	23f0      	movs	r3, #240	; 0xf0
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	029b      	lsls	r3, r3, #10
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	4aa9      	ldr	r2, [pc, #676]	; (8006c60 <USB_EPStartXfer+0xaa8>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	b29a      	uxth	r2, r3
 80069c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069c2:	801a      	strh	r2, [r3, #0]
 80069c4:	e01a      	b.n	80069fc <USB_EPStartXfer+0x844>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d116      	bne.n	80069fc <USB_EPStartXfer+0x844>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2250      	movs	r2, #80	; 0x50
 80069d2:	5a9b      	ldrh	r3, [r3, r2]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	001a      	movs	r2, r3
 80069d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069da:	189b      	adds	r3, r3, r2
 80069dc:	673b      	str	r3, [r7, #112]	; 0x70
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	00da      	lsls	r2, r3, #3
 80069e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069e6:	18d3      	adds	r3, r2, r3
 80069e8:	4a9b      	ldr	r2, [pc, #620]	; (8006c58 <USB_EPStartXfer+0xaa0>)
 80069ea:	4694      	mov	ip, r2
 80069ec:	4463      	add	r3, ip
 80069ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069f0:	1d7b      	adds	r3, r7, #5
 80069f2:	33ff      	adds	r3, #255	; 0xff
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80069fc:	2076      	movs	r0, #118	; 0x76
 80069fe:	183b      	adds	r3, r7, r0
 8006a00:	683a      	ldr	r2, [r7, #0]
 8006a02:	8952      	ldrh	r2, [r2, #10]
 8006a04:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6959      	ldr	r1, [r3, #20]
 8006a0a:	1d7b      	adds	r3, r7, #5
 8006a0c:	33ff      	adds	r3, #255	; 0xff
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	b29c      	uxth	r4, r3
 8006a12:	183b      	adds	r3, r7, r0
 8006a14:	881a      	ldrh	r2, [r3, #0]
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	0023      	movs	r3, r4
 8006a1a:	f000 fdc1 	bl	80075a0 <USB_WritePMA>
 8006a1e:	e0a0      	b.n	8006b62 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	785b      	ldrb	r3, [r3, #1]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d166      	bne.n	8006af6 <USB_EPStartXfer+0x93e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2250      	movs	r2, #80	; 0x50
 8006a30:	5a9b      	ldrh	r3, [r3, r2]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	001a      	movs	r2, r3
 8006a36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a38:	189b      	adds	r3, r3, r2
 8006a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	00da      	lsls	r2, r3, #3
 8006a42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a44:	18d3      	adds	r3, r2, r3
 8006a46:	4a87      	ldr	r2, [pc, #540]	; (8006c64 <USB_EPStartXfer+0xaac>)
 8006a48:	4694      	mov	ip, r2
 8006a4a:	4463      	add	r3, ip
 8006a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a4e:	1d7b      	adds	r3, r7, #5
 8006a50:	33ff      	adds	r3, #255	; 0xff
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d110      	bne.n	8006a7a <USB_EPStartXfer+0x8c2>
 8006a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a5a:	881b      	ldrh	r3, [r3, #0]
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	4a7f      	ldr	r2, [pc, #508]	; (8006c5c <USB_EPStartXfer+0xaa4>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a66:	801a      	strh	r2, [r3, #0]
 8006a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	4a7c      	ldr	r2, [pc, #496]	; (8006c60 <USB_EPStartXfer+0xaa8>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	e062      	b.n	8006b40 <USB_EPStartXfer+0x988>
 8006a7a:	1d7b      	adds	r3, r7, #5
 8006a7c:	33ff      	adds	r3, #255	; 0xff
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b3e      	cmp	r3, #62	; 0x3e
 8006a82:	d81a      	bhi.n	8006aba <USB_EPStartXfer+0x902>
 8006a84:	1d7b      	adds	r3, r7, #5
 8006a86:	33ff      	adds	r3, #255	; 0xff
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	085b      	lsrs	r3, r3, #1
 8006a8c:	21ec      	movs	r1, #236	; 0xec
 8006a8e:	187a      	adds	r2, r7, r1
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	1d7b      	adds	r3, r7, #5
 8006a94:	33ff      	adds	r3, #255	; 0xff
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <USB_EPStartXfer+0x8f0>
 8006a9e:	187b      	adds	r3, r7, r1
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3301      	adds	r3, #1
 8006aa4:	187a      	adds	r2, r7, r1
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	23ec      	movs	r3, #236	; 0xec
 8006aaa:	18fb      	adds	r3, r7, r3
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	029b      	lsls	r3, r3, #10
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab6:	801a      	strh	r2, [r3, #0]
 8006ab8:	e042      	b.n	8006b40 <USB_EPStartXfer+0x988>
 8006aba:	1d7b      	adds	r3, r7, #5
 8006abc:	33ff      	adds	r3, #255	; 0xff
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	21ec      	movs	r1, #236	; 0xec
 8006ac4:	187a      	adds	r2, r7, r1
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	1d7b      	adds	r3, r7, #5
 8006aca:	33ff      	adds	r3, #255	; 0xff
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	221f      	movs	r2, #31
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	d104      	bne.n	8006ade <USB_EPStartXfer+0x926>
 8006ad4:	187b      	adds	r3, r7, r1
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	187a      	adds	r2, r7, r1
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	23ec      	movs	r3, #236	; 0xec
 8006ae0:	18fb      	adds	r3, r7, r3
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	029b      	lsls	r3, r3, #10
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4a5d      	ldr	r2, [pc, #372]	; (8006c60 <USB_EPStartXfer+0xaa8>)
 8006aec:	4313      	orrs	r3, r2
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	e024      	b.n	8006b40 <USB_EPStartXfer+0x988>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	785b      	ldrb	r3, [r3, #1]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d120      	bne.n	8006b40 <USB_EPStartXfer+0x988>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2184      	movs	r1, #132	; 0x84
 8006b02:	187a      	adds	r2, r7, r1
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2250      	movs	r2, #80	; 0x50
 8006b0a:	5a9b      	ldrh	r3, [r3, r2]
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	001a      	movs	r2, r3
 8006b10:	187b      	adds	r3, r7, r1
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	189b      	adds	r3, r3, r2
 8006b16:	187a      	adds	r2, r7, r1
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	00da      	lsls	r2, r3, #3
 8006b20:	187b      	adds	r3, r7, r1
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	18d3      	adds	r3, r2, r3
 8006b26:	4a4f      	ldr	r2, [pc, #316]	; (8006c64 <USB_EPStartXfer+0xaac>)
 8006b28:	4694      	mov	ip, r2
 8006b2a:	4463      	add	r3, ip
 8006b2c:	2180      	movs	r1, #128	; 0x80
 8006b2e:	187a      	adds	r2, r7, r1
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	1d7b      	adds	r3, r7, #5
 8006b34:	33ff      	adds	r3, #255	; 0xff
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	187b      	adds	r3, r7, r1
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b40:	2076      	movs	r0, #118	; 0x76
 8006b42:	183b      	adds	r3, r7, r0
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	8912      	ldrh	r2, [r2, #8]
 8006b48:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	6959      	ldr	r1, [r3, #20]
 8006b4e:	1d7b      	adds	r3, r7, #5
 8006b50:	33ff      	adds	r3, #255	; 0xff
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	b29c      	uxth	r4, r3
 8006b56:	183b      	adds	r3, r7, r0
 8006b58:	881a      	ldrh	r2, [r3, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	0023      	movs	r3, r4
 8006b5e:	f000 fd1f 	bl	80075a0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	18d3      	adds	r3, r2, r3
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	200a      	movs	r0, #10
 8006b72:	183b      	adds	r3, r7, r0
 8006b74:	493c      	ldr	r1, [pc, #240]	; (8006c68 <USB_EPStartXfer+0xab0>)
 8006b76:	400a      	ands	r2, r1
 8006b78:	801a      	strh	r2, [r3, #0]
 8006b7a:	183b      	adds	r3, r7, r0
 8006b7c:	183a      	adds	r2, r7, r0
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	2110      	movs	r1, #16
 8006b82:	404a      	eors	r2, r1
 8006b84:	801a      	strh	r2, [r3, #0]
 8006b86:	183b      	adds	r3, r7, r0
 8006b88:	183a      	adds	r2, r7, r0
 8006b8a:	8812      	ldrh	r2, [r2, #0]
 8006b8c:	2120      	movs	r1, #32
 8006b8e:	404a      	eors	r2, r1
 8006b90:	801a      	strh	r2, [r3, #0]
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	18d3      	adds	r3, r2, r3
 8006b9c:	183a      	adds	r2, r7, r0
 8006b9e:	8812      	ldrh	r2, [r2, #0]
 8006ba0:	4932      	ldr	r1, [pc, #200]	; (8006c6c <USB_EPStartXfer+0xab4>)
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	b292      	uxth	r2, r2
 8006ba6:	801a      	strh	r2, [r3, #0]
 8006ba8:	f000 fbaf 	bl	800730a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	7b1b      	ldrb	r3, [r3, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d000      	beq.n	8006bb6 <USB_EPStartXfer+0x9fe>
 8006bb4:	e09e      	b.n	8006cf4 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d90d      	bls.n	8006bde <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	1d7a      	adds	r2, r7, #5
 8006bc8:	32ff      	adds	r2, #255	; 0xff
 8006bca:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	699a      	ldr	r2, [r3, #24]
 8006bd0:	1d7b      	adds	r3, r7, #5
 8006bd2:	33ff      	adds	r3, #255	; 0xff
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	619a      	str	r2, [r3, #24]
 8006bdc:	e007      	b.n	8006bee <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	699b      	ldr	r3, [r3, #24]
 8006be2:	1d7a      	adds	r2, r7, #5
 8006be4:	32ff      	adds	r2, #255	; 0xff
 8006be6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2190      	movs	r1, #144	; 0x90
 8006bf2:	187a      	adds	r2, r7, r1
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2250      	movs	r2, #80	; 0x50
 8006bfa:	5a9b      	ldrh	r3, [r3, r2]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	001a      	movs	r2, r3
 8006c00:	187b      	adds	r3, r7, r1
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	189b      	adds	r3, r3, r2
 8006c06:	187a      	adds	r2, r7, r1
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	00da      	lsls	r2, r3, #3
 8006c10:	187b      	adds	r3, r7, r1
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	18d3      	adds	r3, r2, r3
 8006c16:	4a10      	ldr	r2, [pc, #64]	; (8006c58 <USB_EPStartXfer+0xaa0>)
 8006c18:	4694      	mov	ip, r2
 8006c1a:	4463      	add	r3, ip
 8006c1c:	218c      	movs	r1, #140	; 0x8c
 8006c1e:	187a      	adds	r2, r7, r1
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	1d7b      	adds	r3, r7, #5
 8006c24:	33ff      	adds	r3, #255	; 0xff
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d121      	bne.n	8006c70 <USB_EPStartXfer+0xab8>
 8006c2c:	187b      	adds	r3, r7, r1
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <USB_EPStartXfer+0xaa4>)
 8006c36:	4013      	ands	r3, r2
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	187b      	adds	r3, r7, r1
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	187b      	adds	r3, r7, r1
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <USB_EPStartXfer+0xaa8>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	e334      	b.n	80072c0 <USB_EPStartXfer+0x1108>
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	00000406 	.word	0x00000406
 8006c5c:	ffff83ff 	.word	0xffff83ff
 8006c60:	ffff8000 	.word	0xffff8000
 8006c64:	00000402 	.word	0x00000402
 8006c68:	ffff8fbf 	.word	0xffff8fbf
 8006c6c:	ffff8080 	.word	0xffff8080
 8006c70:	1d7b      	adds	r3, r7, #5
 8006c72:	33ff      	adds	r3, #255	; 0xff
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b3e      	cmp	r3, #62	; 0x3e
 8006c78:	d81c      	bhi.n	8006cb4 <USB_EPStartXfer+0xafc>
 8006c7a:	1d7b      	adds	r3, r7, #5
 8006c7c:	33ff      	adds	r3, #255	; 0xff
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	085b      	lsrs	r3, r3, #1
 8006c82:	21e8      	movs	r1, #232	; 0xe8
 8006c84:	187a      	adds	r2, r7, r1
 8006c86:	6013      	str	r3, [r2, #0]
 8006c88:	1d7b      	adds	r3, r7, #5
 8006c8a:	33ff      	adds	r3, #255	; 0xff
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4013      	ands	r3, r2
 8006c92:	d004      	beq.n	8006c9e <USB_EPStartXfer+0xae6>
 8006c94:	187b      	adds	r3, r7, r1
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	187a      	adds	r2, r7, r1
 8006c9c:	6013      	str	r3, [r2, #0]
 8006c9e:	23e8      	movs	r3, #232	; 0xe8
 8006ca0:	18fb      	adds	r3, r7, r3
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	029b      	lsls	r3, r3, #10
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	238c      	movs	r3, #140	; 0x8c
 8006cac:	18fb      	adds	r3, r7, r3
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	e305      	b.n	80072c0 <USB_EPStartXfer+0x1108>
 8006cb4:	1d7b      	adds	r3, r7, #5
 8006cb6:	33ff      	adds	r3, #255	; 0xff
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	21e8      	movs	r1, #232	; 0xe8
 8006cbe:	187a      	adds	r2, r7, r1
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	1d7b      	adds	r3, r7, #5
 8006cc4:	33ff      	adds	r3, #255	; 0xff
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	221f      	movs	r2, #31
 8006cca:	4013      	ands	r3, r2
 8006ccc:	d104      	bne.n	8006cd8 <USB_EPStartXfer+0xb20>
 8006cce:	187b      	adds	r3, r7, r1
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	187a      	adds	r2, r7, r1
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	23e8      	movs	r3, #232	; 0xe8
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	029b      	lsls	r3, r3, #10
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	4aca      	ldr	r2, [pc, #808]	; (8007010 <USB_EPStartXfer+0xe58>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	238c      	movs	r3, #140	; 0x8c
 8006cec:	18fb      	adds	r3, r7, r3
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	801a      	strh	r2, [r3, #0]
 8006cf2:	e2e5      	b.n	80072c0 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	78db      	ldrb	r3, [r3, #3]
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d000      	beq.n	8006cfe <USB_EPStartXfer+0xb46>
 8006cfc:	e16f      	b.n	8006fde <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	785b      	ldrb	r3, [r3, #1]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d16f      	bne.n	8006de6 <USB_EPStartXfer+0xc2e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	21ac      	movs	r1, #172	; 0xac
 8006d0a:	187a      	adds	r2, r7, r1
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2250      	movs	r2, #80	; 0x50
 8006d12:	5a9b      	ldrh	r3, [r3, r2]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	001a      	movs	r2, r3
 8006d18:	187b      	adds	r3, r7, r1
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	187a      	adds	r2, r7, r1
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	00da      	lsls	r2, r3, #3
 8006d28:	187b      	adds	r3, r7, r1
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	18d3      	adds	r3, r2, r3
 8006d2e:	4ab9      	ldr	r2, [pc, #740]	; (8007014 <USB_EPStartXfer+0xe5c>)
 8006d30:	4694      	mov	ip, r2
 8006d32:	4463      	add	r3, ip
 8006d34:	21a8      	movs	r1, #168	; 0xa8
 8006d36:	187a      	adds	r2, r7, r1
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	691b      	ldr	r3, [r3, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d114      	bne.n	8006d6c <USB_EPStartXfer+0xbb4>
 8006d42:	187b      	adds	r3, r7, r1
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	881b      	ldrh	r3, [r3, #0]
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	4ab3      	ldr	r2, [pc, #716]	; (8007018 <USB_EPStartXfer+0xe60>)
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	187b      	adds	r3, r7, r1
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	881b      	ldrh	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	4aac      	ldr	r2, [pc, #688]	; (8007010 <USB_EPStartXfer+0xe58>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	801a      	strh	r2, [r3, #0]
 8006d6a:	e060      	b.n	8006e2e <USB_EPStartXfer+0xc76>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	2b3e      	cmp	r3, #62	; 0x3e
 8006d72:	d81a      	bhi.n	8006daa <USB_EPStartXfer+0xbf2>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	21e4      	movs	r1, #228	; 0xe4
 8006d7c:	187a      	adds	r2, r7, r1
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2201      	movs	r2, #1
 8006d86:	4013      	ands	r3, r2
 8006d88:	d004      	beq.n	8006d94 <USB_EPStartXfer+0xbdc>
 8006d8a:	187b      	adds	r3, r7, r1
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	187a      	adds	r2, r7, r1
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	23e4      	movs	r3, #228	; 0xe4
 8006d96:	18fb      	adds	r3, r7, r3
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	029b      	lsls	r3, r3, #10
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	23a8      	movs	r3, #168	; 0xa8
 8006da2:	18fb      	adds	r3, r7, r3
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	801a      	strh	r2, [r3, #0]
 8006da8:	e041      	b.n	8006e2e <USB_EPStartXfer+0xc76>
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	21e4      	movs	r1, #228	; 0xe4
 8006db2:	187a      	adds	r2, r7, r1
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	221f      	movs	r2, #31
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d104      	bne.n	8006dca <USB_EPStartXfer+0xc12>
 8006dc0:	187b      	adds	r3, r7, r1
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	3b01      	subs	r3, #1
 8006dc6:	187a      	adds	r2, r7, r1
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	23e4      	movs	r3, #228	; 0xe4
 8006dcc:	18fb      	adds	r3, r7, r3
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	029b      	lsls	r3, r3, #10
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	4a8e      	ldr	r2, [pc, #568]	; (8007010 <USB_EPStartXfer+0xe58>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	23a8      	movs	r3, #168	; 0xa8
 8006dde:	18fb      	adds	r3, r7, r3
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	e023      	b.n	8006e2e <USB_EPStartXfer+0xc76>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	785b      	ldrb	r3, [r3, #1]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d11f      	bne.n	8006e2e <USB_EPStartXfer+0xc76>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	21b4      	movs	r1, #180	; 0xb4
 8006df2:	187a      	adds	r2, r7, r1
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2250      	movs	r2, #80	; 0x50
 8006dfa:	5a9b      	ldrh	r3, [r3, r2]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	001a      	movs	r2, r3
 8006e00:	187b      	adds	r3, r7, r1
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	189b      	adds	r3, r3, r2
 8006e06:	187a      	adds	r2, r7, r1
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	00da      	lsls	r2, r3, #3
 8006e10:	187b      	adds	r3, r7, r1
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	18d3      	adds	r3, r2, r3
 8006e16:	4a7f      	ldr	r2, [pc, #508]	; (8007014 <USB_EPStartXfer+0xe5c>)
 8006e18:	4694      	mov	ip, r2
 8006e1a:	4463      	add	r3, ip
 8006e1c:	21b0      	movs	r1, #176	; 0xb0
 8006e1e:	187a      	adds	r2, r7, r1
 8006e20:	6013      	str	r3, [r2, #0]
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	187b      	adds	r3, r7, r1
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	801a      	strh	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	22a4      	movs	r2, #164	; 0xa4
 8006e32:	18ba      	adds	r2, r7, r2
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	785b      	ldrb	r3, [r3, #1]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d16f      	bne.n	8006f1e <USB_EPStartXfer+0xd66>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	219c      	movs	r1, #156	; 0x9c
 8006e42:	187a      	adds	r2, r7, r1
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2250      	movs	r2, #80	; 0x50
 8006e4a:	5a9b      	ldrh	r3, [r3, r2]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	001a      	movs	r2, r3
 8006e50:	187b      	adds	r3, r7, r1
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	189b      	adds	r3, r3, r2
 8006e56:	187a      	adds	r2, r7, r1
 8006e58:	6013      	str	r3, [r2, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	00da      	lsls	r2, r3, #3
 8006e60:	187b      	adds	r3, r7, r1
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	18d3      	adds	r3, r2, r3
 8006e66:	4a6d      	ldr	r2, [pc, #436]	; (800701c <USB_EPStartXfer+0xe64>)
 8006e68:	4694      	mov	ip, r2
 8006e6a:	4463      	add	r3, ip
 8006e6c:	2198      	movs	r1, #152	; 0x98
 8006e6e:	187a      	adds	r2, r7, r1
 8006e70:	6013      	str	r3, [r2, #0]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d114      	bne.n	8006ea4 <USB_EPStartXfer+0xcec>
 8006e7a:	187b      	adds	r3, r7, r1
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	4a65      	ldr	r2, [pc, #404]	; (8007018 <USB_EPStartXfer+0xe60>)
 8006e84:	4013      	ands	r3, r2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	187b      	adds	r3, r7, r1
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	801a      	strh	r2, [r3, #0]
 8006e8e:	187b      	adds	r3, r7, r1
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	4a5e      	ldr	r2, [pc, #376]	; (8007010 <USB_EPStartXfer+0xe58>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	b29a      	uxth	r2, r3
 8006e9c:	187b      	adds	r3, r7, r1
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	801a      	strh	r2, [r3, #0]
 8006ea2:	e05d      	b.n	8006f60 <USB_EPStartXfer+0xda8>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	691b      	ldr	r3, [r3, #16]
 8006ea8:	2b3e      	cmp	r3, #62	; 0x3e
 8006eaa:	d81a      	bhi.n	8006ee2 <USB_EPStartXfer+0xd2a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	691b      	ldr	r3, [r3, #16]
 8006eb0:	085b      	lsrs	r3, r3, #1
 8006eb2:	21e0      	movs	r1, #224	; 0xe0
 8006eb4:	187a      	adds	r2, r7, r1
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691b      	ldr	r3, [r3, #16]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	d004      	beq.n	8006ecc <USB_EPStartXfer+0xd14>
 8006ec2:	187b      	adds	r3, r7, r1
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	187a      	adds	r2, r7, r1
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	23e0      	movs	r3, #224	; 0xe0
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	029b      	lsls	r3, r3, #10
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	2398      	movs	r3, #152	; 0x98
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	801a      	strh	r2, [r3, #0]
 8006ee0:	e03e      	b.n	8006f60 <USB_EPStartXfer+0xda8>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	21e0      	movs	r1, #224	; 0xe0
 8006eea:	187a      	adds	r2, r7, r1
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	221f      	movs	r2, #31
 8006ef4:	4013      	ands	r3, r2
 8006ef6:	d104      	bne.n	8006f02 <USB_EPStartXfer+0xd4a>
 8006ef8:	187b      	adds	r3, r7, r1
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3b01      	subs	r3, #1
 8006efe:	187a      	adds	r2, r7, r1
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	23e0      	movs	r3, #224	; 0xe0
 8006f04:	18fb      	adds	r3, r7, r3
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	4a40      	ldr	r2, [pc, #256]	; (8007010 <USB_EPStartXfer+0xe58>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	2398      	movs	r3, #152	; 0x98
 8006f16:	18fb      	adds	r3, r7, r3
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	801a      	strh	r2, [r3, #0]
 8006f1c:	e020      	b.n	8006f60 <USB_EPStartXfer+0xda8>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	785b      	ldrb	r3, [r3, #1]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d11c      	bne.n	8006f60 <USB_EPStartXfer+0xda8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2250      	movs	r2, #80	; 0x50
 8006f2a:	5a9b      	ldrh	r3, [r3, r2]
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	001a      	movs	r2, r3
 8006f30:	21a4      	movs	r1, #164	; 0xa4
 8006f32:	187b      	adds	r3, r7, r1
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	189b      	adds	r3, r3, r2
 8006f38:	187a      	adds	r2, r7, r1
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	00da      	lsls	r2, r3, #3
 8006f42:	187b      	adds	r3, r7, r1
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	18d3      	adds	r3, r2, r3
 8006f48:	4a34      	ldr	r2, [pc, #208]	; (800701c <USB_EPStartXfer+0xe64>)
 8006f4a:	4694      	mov	ip, r2
 8006f4c:	4463      	add	r3, ip
 8006f4e:	21a0      	movs	r1, #160	; 0xa0
 8006f50:	187a      	adds	r2, r7, r1
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	187b      	adds	r3, r7, r1
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d100      	bne.n	8006f6a <USB_EPStartXfer+0xdb2>
 8006f68:	e1aa      	b.n	80072c0 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	18d2      	adds	r2, r2, r3
 8006f74:	2196      	movs	r1, #150	; 0x96
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	8812      	ldrh	r2, [r2, #0]
 8006f7a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	881a      	ldrh	r2, [r3, #0]
 8006f80:	2380      	movs	r3, #128	; 0x80
 8006f82:	01db      	lsls	r3, r3, #7
 8006f84:	4013      	ands	r3, r2
 8006f86:	d004      	beq.n	8006f92 <USB_EPStartXfer+0xdda>
 8006f88:	187b      	adds	r3, r7, r1
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	2240      	movs	r2, #64	; 0x40
 8006f8e:	4013      	ands	r3, r2
 8006f90:	d10d      	bne.n	8006fae <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f92:	2196      	movs	r1, #150	; 0x96
 8006f94:	187b      	adds	r3, r7, r1
 8006f96:	881a      	ldrh	r2, [r3, #0]
 8006f98:	2380      	movs	r3, #128	; 0x80
 8006f9a:	01db      	lsls	r3, r3, #7
 8006f9c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f9e:	d000      	beq.n	8006fa2 <USB_EPStartXfer+0xdea>
 8006fa0:	e18e      	b.n	80072c0 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006fa2:	187b      	adds	r3, r7, r1
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	2240      	movs	r2, #64	; 0x40
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d000      	beq.n	8006fae <USB_EPStartXfer+0xdf6>
 8006fac:	e188      	b.n	80072c0 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	18d3      	adds	r3, r2, r3
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	2094      	movs	r0, #148	; 0x94
 8006fbe:	183b      	adds	r3, r7, r0
 8006fc0:	4917      	ldr	r1, [pc, #92]	; (8007020 <USB_EPStartXfer+0xe68>)
 8006fc2:	400a      	ands	r2, r1
 8006fc4:	801a      	strh	r2, [r3, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	18d3      	adds	r3, r2, r3
 8006fd0:	183a      	adds	r2, r7, r0
 8006fd2:	8812      	ldrh	r2, [r2, #0]
 8006fd4:	4913      	ldr	r1, [pc, #76]	; (8007024 <USB_EPStartXfer+0xe6c>)
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	b292      	uxth	r2, r2
 8006fda:	801a      	strh	r2, [r3, #0]
 8006fdc:	e170      	b.n	80072c0 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	78db      	ldrb	r3, [r3, #3]
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d000      	beq.n	8006fe8 <USB_EPStartXfer+0xe30>
 8006fe6:	e169      	b.n	80072bc <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	699a      	ldr	r2, [r3, #24]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	691b      	ldr	r3, [r3, #16]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d919      	bls.n	8007028 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	1d7a      	adds	r2, r7, #5
 8006ffa:	32ff      	adds	r2, #255	; 0xff
 8006ffc:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	699a      	ldr	r2, [r3, #24]
 8007002:	1d7b      	adds	r3, r7, #5
 8007004:	33ff      	adds	r3, #255	; 0xff
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	1ad2      	subs	r2, r2, r3
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	619a      	str	r2, [r3, #24]
 800700e:	e013      	b.n	8007038 <USB_EPStartXfer+0xe80>
 8007010:	ffff8000 	.word	0xffff8000
 8007014:	00000402 	.word	0x00000402
 8007018:	ffff83ff 	.word	0xffff83ff
 800701c:	00000406 	.word	0x00000406
 8007020:	ffff8f8f 	.word	0xffff8f8f
 8007024:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	1d7a      	adds	r2, r7, #5
 800702e:	32ff      	adds	r2, #255	; 0xff
 8007030:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2200      	movs	r2, #0
 8007036:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	785b      	ldrb	r3, [r3, #1]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d000      	beq.n	8007042 <USB_EPStartXfer+0xe8a>
 8007040:	e075      	b.n	800712e <USB_EPStartXfer+0xf76>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	21cc      	movs	r1, #204	; 0xcc
 8007046:	187a      	adds	r2, r7, r1
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2250      	movs	r2, #80	; 0x50
 800704e:	5a9b      	ldrh	r3, [r3, r2]
 8007050:	b29b      	uxth	r3, r3
 8007052:	001a      	movs	r2, r3
 8007054:	187b      	adds	r3, r7, r1
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	189b      	adds	r3, r3, r2
 800705a:	187a      	adds	r2, r7, r1
 800705c:	6013      	str	r3, [r2, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	00da      	lsls	r2, r3, #3
 8007064:	187b      	adds	r3, r7, r1
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	18d3      	adds	r3, r2, r3
 800706a:	4aaa      	ldr	r2, [pc, #680]	; (8007314 <USB_EPStartXfer+0x115c>)
 800706c:	4694      	mov	ip, r2
 800706e:	4463      	add	r3, ip
 8007070:	21c8      	movs	r1, #200	; 0xc8
 8007072:	187a      	adds	r2, r7, r1
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	1d7b      	adds	r3, r7, #5
 8007078:	33ff      	adds	r3, #255	; 0xff
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d114      	bne.n	80070aa <USB_EPStartXfer+0xef2>
 8007080:	187b      	adds	r3, r7, r1
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29b      	uxth	r3, r3
 8007088:	4aa3      	ldr	r2, [pc, #652]	; (8007318 <USB_EPStartXfer+0x1160>)
 800708a:	4013      	ands	r3, r2
 800708c:	b29a      	uxth	r2, r3
 800708e:	187b      	adds	r3, r7, r1
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	187b      	adds	r3, r7, r1
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	4a9f      	ldr	r2, [pc, #636]	; (800731c <USB_EPStartXfer+0x1164>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	187b      	adds	r3, r7, r1
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e066      	b.n	8007178 <USB_EPStartXfer+0xfc0>
 80070aa:	1d7b      	adds	r3, r7, #5
 80070ac:	33ff      	adds	r3, #255	; 0xff
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	2b3e      	cmp	r3, #62	; 0x3e
 80070b2:	d81c      	bhi.n	80070ee <USB_EPStartXfer+0xf36>
 80070b4:	1d7b      	adds	r3, r7, #5
 80070b6:	33ff      	adds	r3, #255	; 0xff
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	085b      	lsrs	r3, r3, #1
 80070bc:	21dc      	movs	r1, #220	; 0xdc
 80070be:	187a      	adds	r2, r7, r1
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	1d7b      	adds	r3, r7, #5
 80070c4:	33ff      	adds	r3, #255	; 0xff
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2201      	movs	r2, #1
 80070ca:	4013      	ands	r3, r2
 80070cc:	d004      	beq.n	80070d8 <USB_EPStartXfer+0xf20>
 80070ce:	187b      	adds	r3, r7, r1
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	187a      	adds	r2, r7, r1
 80070d6:	6013      	str	r3, [r2, #0]
 80070d8:	23dc      	movs	r3, #220	; 0xdc
 80070da:	18fb      	adds	r3, r7, r3
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	029b      	lsls	r3, r3, #10
 80070e2:	b29a      	uxth	r2, r3
 80070e4:	23c8      	movs	r3, #200	; 0xc8
 80070e6:	18fb      	adds	r3, r7, r3
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	801a      	strh	r2, [r3, #0]
 80070ec:	e044      	b.n	8007178 <USB_EPStartXfer+0xfc0>
 80070ee:	1d7b      	adds	r3, r7, #5
 80070f0:	33ff      	adds	r3, #255	; 0xff
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	095b      	lsrs	r3, r3, #5
 80070f6:	21dc      	movs	r1, #220	; 0xdc
 80070f8:	187a      	adds	r2, r7, r1
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	1d7b      	adds	r3, r7, #5
 80070fe:	33ff      	adds	r3, #255	; 0xff
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	221f      	movs	r2, #31
 8007104:	4013      	ands	r3, r2
 8007106:	d104      	bne.n	8007112 <USB_EPStartXfer+0xf5a>
 8007108:	187b      	adds	r3, r7, r1
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3b01      	subs	r3, #1
 800710e:	187a      	adds	r2, r7, r1
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	23dc      	movs	r3, #220	; 0xdc
 8007114:	18fb      	adds	r3, r7, r3
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	b29b      	uxth	r3, r3
 800711a:	029b      	lsls	r3, r3, #10
 800711c:	b29b      	uxth	r3, r3
 800711e:	4a7f      	ldr	r2, [pc, #508]	; (800731c <USB_EPStartXfer+0x1164>)
 8007120:	4313      	orrs	r3, r2
 8007122:	b29a      	uxth	r2, r3
 8007124:	23c8      	movs	r3, #200	; 0xc8
 8007126:	18fb      	adds	r3, r7, r3
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	801a      	strh	r2, [r3, #0]
 800712c:	e024      	b.n	8007178 <USB_EPStartXfer+0xfc0>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	785b      	ldrb	r3, [r3, #1]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d120      	bne.n	8007178 <USB_EPStartXfer+0xfc0>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	21d4      	movs	r1, #212	; 0xd4
 800713a:	187a      	adds	r2, r7, r1
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2250      	movs	r2, #80	; 0x50
 8007142:	5a9b      	ldrh	r3, [r3, r2]
 8007144:	b29b      	uxth	r3, r3
 8007146:	001a      	movs	r2, r3
 8007148:	187b      	adds	r3, r7, r1
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	189b      	adds	r3, r3, r2
 800714e:	187a      	adds	r2, r7, r1
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	00da      	lsls	r2, r3, #3
 8007158:	187b      	adds	r3, r7, r1
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	18d3      	adds	r3, r2, r3
 800715e:	4a6d      	ldr	r2, [pc, #436]	; (8007314 <USB_EPStartXfer+0x115c>)
 8007160:	4694      	mov	ip, r2
 8007162:	4463      	add	r3, ip
 8007164:	21d0      	movs	r1, #208	; 0xd0
 8007166:	187a      	adds	r2, r7, r1
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	1d7b      	adds	r3, r7, #5
 800716c:	33ff      	adds	r3, #255	; 0xff
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	b29a      	uxth	r2, r3
 8007172:	187b      	adds	r3, r7, r1
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	22c4      	movs	r2, #196	; 0xc4
 800717c:	18ba      	adds	r2, r7, r2
 800717e:	6013      	str	r3, [r2, #0]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	785b      	ldrb	r3, [r3, #1]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d000      	beq.n	800718a <USB_EPStartXfer+0xfd2>
 8007188:	e075      	b.n	8007276 <USB_EPStartXfer+0x10be>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	21bc      	movs	r1, #188	; 0xbc
 800718e:	187a      	adds	r2, r7, r1
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2250      	movs	r2, #80	; 0x50
 8007196:	5a9b      	ldrh	r3, [r3, r2]
 8007198:	b29b      	uxth	r3, r3
 800719a:	001a      	movs	r2, r3
 800719c:	187b      	adds	r3, r7, r1
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	189b      	adds	r3, r3, r2
 80071a2:	187a      	adds	r2, r7, r1
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	00da      	lsls	r2, r3, #3
 80071ac:	187b      	adds	r3, r7, r1
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	18d3      	adds	r3, r2, r3
 80071b2:	4a5b      	ldr	r2, [pc, #364]	; (8007320 <USB_EPStartXfer+0x1168>)
 80071b4:	4694      	mov	ip, r2
 80071b6:	4463      	add	r3, ip
 80071b8:	21b8      	movs	r1, #184	; 0xb8
 80071ba:	187a      	adds	r2, r7, r1
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	1d7b      	adds	r3, r7, #5
 80071c0:	33ff      	adds	r3, #255	; 0xff
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d114      	bne.n	80071f2 <USB_EPStartXfer+0x103a>
 80071c8:	187b      	adds	r3, r7, r1
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	881b      	ldrh	r3, [r3, #0]
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	4a51      	ldr	r2, [pc, #324]	; (8007318 <USB_EPStartXfer+0x1160>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	187b      	adds	r3, r7, r1
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	801a      	strh	r2, [r3, #0]
 80071dc:	187b      	adds	r3, r7, r1
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4a4d      	ldr	r2, [pc, #308]	; (800731c <USB_EPStartXfer+0x1164>)
 80071e6:	4313      	orrs	r3, r2
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	801a      	strh	r2, [r3, #0]
 80071f0:	e066      	b.n	80072c0 <USB_EPStartXfer+0x1108>
 80071f2:	1d7b      	adds	r3, r7, #5
 80071f4:	33ff      	adds	r3, #255	; 0xff
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2b3e      	cmp	r3, #62	; 0x3e
 80071fa:	d81c      	bhi.n	8007236 <USB_EPStartXfer+0x107e>
 80071fc:	1d7b      	adds	r3, r7, #5
 80071fe:	33ff      	adds	r3, #255	; 0xff
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	21d8      	movs	r1, #216	; 0xd8
 8007206:	187a      	adds	r2, r7, r1
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	1d7b      	adds	r3, r7, #5
 800720c:	33ff      	adds	r3, #255	; 0xff
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2201      	movs	r2, #1
 8007212:	4013      	ands	r3, r2
 8007214:	d004      	beq.n	8007220 <USB_EPStartXfer+0x1068>
 8007216:	187b      	adds	r3, r7, r1
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	187a      	adds	r2, r7, r1
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	23d8      	movs	r3, #216	; 0xd8
 8007222:	18fb      	adds	r3, r7, r3
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29a      	uxth	r2, r3
 800722c:	23b8      	movs	r3, #184	; 0xb8
 800722e:	18fb      	adds	r3, r7, r3
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e044      	b.n	80072c0 <USB_EPStartXfer+0x1108>
 8007236:	1d7b      	adds	r3, r7, #5
 8007238:	33ff      	adds	r3, #255	; 0xff
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	095b      	lsrs	r3, r3, #5
 800723e:	21d8      	movs	r1, #216	; 0xd8
 8007240:	187a      	adds	r2, r7, r1
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	1d7b      	adds	r3, r7, #5
 8007246:	33ff      	adds	r3, #255	; 0xff
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	221f      	movs	r2, #31
 800724c:	4013      	ands	r3, r2
 800724e:	d104      	bne.n	800725a <USB_EPStartXfer+0x10a2>
 8007250:	187b      	adds	r3, r7, r1
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	3b01      	subs	r3, #1
 8007256:	187a      	adds	r2, r7, r1
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	23d8      	movs	r3, #216	; 0xd8
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	b29b      	uxth	r3, r3
 8007262:	029b      	lsls	r3, r3, #10
 8007264:	b29b      	uxth	r3, r3
 8007266:	4a2d      	ldr	r2, [pc, #180]	; (800731c <USB_EPStartXfer+0x1164>)
 8007268:	4313      	orrs	r3, r2
 800726a:	b29a      	uxth	r2, r3
 800726c:	23b8      	movs	r3, #184	; 0xb8
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	801a      	strh	r2, [r3, #0]
 8007274:	e024      	b.n	80072c0 <USB_EPStartXfer+0x1108>
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	785b      	ldrb	r3, [r3, #1]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d120      	bne.n	80072c0 <USB_EPStartXfer+0x1108>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2250      	movs	r2, #80	; 0x50
 8007282:	5a9b      	ldrh	r3, [r3, r2]
 8007284:	b29b      	uxth	r3, r3
 8007286:	001a      	movs	r2, r3
 8007288:	21c4      	movs	r1, #196	; 0xc4
 800728a:	187b      	adds	r3, r7, r1
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	189b      	adds	r3, r3, r2
 8007290:	187a      	adds	r2, r7, r1
 8007292:	6013      	str	r3, [r2, #0]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	00da      	lsls	r2, r3, #3
 800729a:	187b      	adds	r3, r7, r1
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	18d3      	adds	r3, r2, r3
 80072a0:	4a1f      	ldr	r2, [pc, #124]	; (8007320 <USB_EPStartXfer+0x1168>)
 80072a2:	4694      	mov	ip, r2
 80072a4:	4463      	add	r3, ip
 80072a6:	21c0      	movs	r1, #192	; 0xc0
 80072a8:	187a      	adds	r2, r7, r1
 80072aa:	6013      	str	r3, [r2, #0]
 80072ac:	1d7b      	adds	r3, r7, #5
 80072ae:	33ff      	adds	r3, #255	; 0xff
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	187b      	adds	r3, r7, r1
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	e001      	b.n	80072c0 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e025      	b.n	800730c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	18d3      	adds	r3, r2, r3
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	208a      	movs	r0, #138	; 0x8a
 80072d0:	183b      	adds	r3, r7, r0
 80072d2:	4914      	ldr	r1, [pc, #80]	; (8007324 <USB_EPStartXfer+0x116c>)
 80072d4:	400a      	ands	r2, r1
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	183b      	adds	r3, r7, r0
 80072da:	183a      	adds	r2, r7, r0
 80072dc:	8812      	ldrh	r2, [r2, #0]
 80072de:	2180      	movs	r1, #128	; 0x80
 80072e0:	0149      	lsls	r1, r1, #5
 80072e2:	404a      	eors	r2, r1
 80072e4:	801a      	strh	r2, [r3, #0]
 80072e6:	183b      	adds	r3, r7, r0
 80072e8:	183a      	adds	r2, r7, r0
 80072ea:	8812      	ldrh	r2, [r2, #0]
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	0189      	lsls	r1, r1, #6
 80072f0:	404a      	eors	r2, r1
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	18d3      	adds	r3, r2, r3
 80072fe:	183a      	adds	r2, r7, r0
 8007300:	8812      	ldrh	r2, [r2, #0]
 8007302:	4909      	ldr	r1, [pc, #36]	; (8007328 <USB_EPStartXfer+0x1170>)
 8007304:	430a      	orrs	r2, r1
 8007306:	b292      	uxth	r2, r2
 8007308:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	0018      	movs	r0, r3
 800730e:	46bd      	mov	sp, r7
 8007310:	b043      	add	sp, #268	; 0x10c
 8007312:	bd90      	pop	{r4, r7, pc}
 8007314:	00000402 	.word	0x00000402
 8007318:	ffff83ff 	.word	0xffff83ff
 800731c:	ffff8000 	.word	0xffff8000
 8007320:	00000406 	.word	0x00000406
 8007324:	ffffbf8f 	.word	0xffffbf8f
 8007328:	ffff8080 	.word	0xffff8080

0800732c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01d      	beq.n	800737a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	18d3      	adds	r3, r2, r3
 8007348:	881b      	ldrh	r3, [r3, #0]
 800734a:	b29a      	uxth	r2, r3
 800734c:	200c      	movs	r0, #12
 800734e:	183b      	adds	r3, r7, r0
 8007350:	491b      	ldr	r1, [pc, #108]	; (80073c0 <USB_EPSetStall+0x94>)
 8007352:	400a      	ands	r2, r1
 8007354:	801a      	strh	r2, [r3, #0]
 8007356:	183b      	adds	r3, r7, r0
 8007358:	183a      	adds	r2, r7, r0
 800735a:	8812      	ldrh	r2, [r2, #0]
 800735c:	2110      	movs	r1, #16
 800735e:	404a      	eors	r2, r1
 8007360:	801a      	strh	r2, [r3, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	18d3      	adds	r3, r2, r3
 800736c:	183a      	adds	r2, r7, r0
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	4914      	ldr	r1, [pc, #80]	; (80073c4 <USB_EPSetStall+0x98>)
 8007372:	430a      	orrs	r2, r1
 8007374:	b292      	uxth	r2, r2
 8007376:	801a      	strh	r2, [r3, #0]
 8007378:	e01d      	b.n	80073b6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	18d3      	adds	r3, r2, r3
 8007384:	881b      	ldrh	r3, [r3, #0]
 8007386:	b29a      	uxth	r2, r3
 8007388:	200e      	movs	r0, #14
 800738a:	183b      	adds	r3, r7, r0
 800738c:	490e      	ldr	r1, [pc, #56]	; (80073c8 <USB_EPSetStall+0x9c>)
 800738e:	400a      	ands	r2, r1
 8007390:	801a      	strh	r2, [r3, #0]
 8007392:	183b      	adds	r3, r7, r0
 8007394:	183a      	adds	r2, r7, r0
 8007396:	8812      	ldrh	r2, [r2, #0]
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	0149      	lsls	r1, r1, #5
 800739c:	404a      	eors	r2, r1
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	18d3      	adds	r3, r2, r3
 80073aa:	183a      	adds	r2, r7, r0
 80073ac:	8812      	ldrh	r2, [r2, #0]
 80073ae:	4905      	ldr	r1, [pc, #20]	; (80073c4 <USB_EPSetStall+0x98>)
 80073b0:	430a      	orrs	r2, r1
 80073b2:	b292      	uxth	r2, r2
 80073b4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80073b6:	2300      	movs	r3, #0
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b004      	add	sp, #16
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	ffff8fbf 	.word	0xffff8fbf
 80073c4:	ffff8080 	.word	0xffff8080
 80073c8:	ffffbf8f 	.word	0xffffbf8f

080073cc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	7b1b      	ldrb	r3, [r3, #12]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d000      	beq.n	80073e0 <USB_EPClearStall+0x14>
 80073de:	e095      	b.n	800750c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	785b      	ldrb	r3, [r3, #1]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d046      	beq.n	8007476 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	18d2      	adds	r2, r2, r3
 80073f2:	2110      	movs	r1, #16
 80073f4:	187b      	adds	r3, r7, r1
 80073f6:	8812      	ldrh	r2, [r2, #0]
 80073f8:	801a      	strh	r2, [r3, #0]
 80073fa:	187b      	adds	r3, r7, r1
 80073fc:	881b      	ldrh	r3, [r3, #0]
 80073fe:	2240      	movs	r2, #64	; 0x40
 8007400:	4013      	ands	r3, r2
 8007402:	d016      	beq.n	8007432 <USB_EPClearStall+0x66>
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	18d3      	adds	r3, r2, r3
 800740e:	881b      	ldrh	r3, [r3, #0]
 8007410:	b29a      	uxth	r2, r3
 8007412:	200e      	movs	r0, #14
 8007414:	183b      	adds	r3, r7, r0
 8007416:	4940      	ldr	r1, [pc, #256]	; (8007518 <USB_EPClearStall+0x14c>)
 8007418:	400a      	ands	r2, r1
 800741a:	801a      	strh	r2, [r3, #0]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	18d3      	adds	r3, r2, r3
 8007426:	183a      	adds	r2, r7, r0
 8007428:	8812      	ldrh	r2, [r2, #0]
 800742a:	493c      	ldr	r1, [pc, #240]	; (800751c <USB_EPClearStall+0x150>)
 800742c:	430a      	orrs	r2, r1
 800742e:	b292      	uxth	r2, r2
 8007430:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	78db      	ldrb	r3, [r3, #3]
 8007436:	2b01      	cmp	r3, #1
 8007438:	d068      	beq.n	800750c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	18d3      	adds	r3, r2, r3
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b29a      	uxth	r2, r3
 8007448:	200c      	movs	r0, #12
 800744a:	183b      	adds	r3, r7, r0
 800744c:	4934      	ldr	r1, [pc, #208]	; (8007520 <USB_EPClearStall+0x154>)
 800744e:	400a      	ands	r2, r1
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	183b      	adds	r3, r7, r0
 8007454:	183a      	adds	r2, r7, r0
 8007456:	8812      	ldrh	r2, [r2, #0]
 8007458:	2120      	movs	r1, #32
 800745a:	404a      	eors	r2, r1
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	18d3      	adds	r3, r2, r3
 8007468:	183a      	adds	r2, r7, r0
 800746a:	8812      	ldrh	r2, [r2, #0]
 800746c:	492d      	ldr	r1, [pc, #180]	; (8007524 <USB_EPClearStall+0x158>)
 800746e:	430a      	orrs	r2, r1
 8007470:	b292      	uxth	r2, r2
 8007472:	801a      	strh	r2, [r3, #0]
 8007474:	e04a      	b.n	800750c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	18d2      	adds	r2, r2, r3
 8007480:	2116      	movs	r1, #22
 8007482:	187b      	adds	r3, r7, r1
 8007484:	8812      	ldrh	r2, [r2, #0]
 8007486:	801a      	strh	r2, [r3, #0]
 8007488:	187b      	adds	r3, r7, r1
 800748a:	881a      	ldrh	r2, [r3, #0]
 800748c:	2380      	movs	r3, #128	; 0x80
 800748e:	01db      	lsls	r3, r3, #7
 8007490:	4013      	ands	r3, r2
 8007492:	d016      	beq.n	80074c2 <USB_EPClearStall+0xf6>
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	18d3      	adds	r3, r2, r3
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	2014      	movs	r0, #20
 80074a4:	183b      	adds	r3, r7, r0
 80074a6:	491c      	ldr	r1, [pc, #112]	; (8007518 <USB_EPClearStall+0x14c>)
 80074a8:	400a      	ands	r2, r1
 80074aa:	801a      	strh	r2, [r3, #0]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	18d3      	adds	r3, r2, r3
 80074b6:	183a      	adds	r2, r7, r0
 80074b8:	8812      	ldrh	r2, [r2, #0]
 80074ba:	491b      	ldr	r1, [pc, #108]	; (8007528 <USB_EPClearStall+0x15c>)
 80074bc:	430a      	orrs	r2, r1
 80074be:	b292      	uxth	r2, r2
 80074c0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	18d3      	adds	r3, r2, r3
 80074cc:	881b      	ldrh	r3, [r3, #0]
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	2012      	movs	r0, #18
 80074d2:	183b      	adds	r3, r7, r0
 80074d4:	4915      	ldr	r1, [pc, #84]	; (800752c <USB_EPClearStall+0x160>)
 80074d6:	400a      	ands	r2, r1
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	183b      	adds	r3, r7, r0
 80074dc:	183a      	adds	r2, r7, r0
 80074de:	8812      	ldrh	r2, [r2, #0]
 80074e0:	2180      	movs	r1, #128	; 0x80
 80074e2:	0149      	lsls	r1, r1, #5
 80074e4:	404a      	eors	r2, r1
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	183b      	adds	r3, r7, r0
 80074ea:	183a      	adds	r2, r7, r0
 80074ec:	8812      	ldrh	r2, [r2, #0]
 80074ee:	2180      	movs	r1, #128	; 0x80
 80074f0:	0189      	lsls	r1, r1, #6
 80074f2:	404a      	eors	r2, r1
 80074f4:	801a      	strh	r2, [r3, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	18d3      	adds	r3, r2, r3
 8007500:	183a      	adds	r2, r7, r0
 8007502:	8812      	ldrh	r2, [r2, #0]
 8007504:	4907      	ldr	r1, [pc, #28]	; (8007524 <USB_EPClearStall+0x158>)
 8007506:	430a      	orrs	r2, r1
 8007508:	b292      	uxth	r2, r2
 800750a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	0018      	movs	r0, r3
 8007510:	46bd      	mov	sp, r7
 8007512:	b006      	add	sp, #24
 8007514:	bd80      	pop	{r7, pc}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	ffff8f8f 	.word	0xffff8f8f
 800751c:	ffff80c0 	.word	0xffff80c0
 8007520:	ffff8fbf 	.word	0xffff8fbf
 8007524:	ffff8080 	.word	0xffff8080
 8007528:	ffffc080 	.word	0xffffc080
 800752c:	ffffbf8f 	.word	0xffffbf8f

08007530 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	000a      	movs	r2, r1
 800753a:	1cfb      	adds	r3, r7, #3
 800753c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800753e:	1cfb      	adds	r3, r7, #3
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	224c      	movs	r2, #76	; 0x4c
 800754a:	2180      	movs	r1, #128	; 0x80
 800754c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	0018      	movs	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	b002      	add	sp, #8
 8007556:	bd80      	pop	{r7, pc}

08007558 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2258      	movs	r2, #88	; 0x58
 8007564:	5a9b      	ldrh	r3, [r3, r2]
 8007566:	b29b      	uxth	r3, r3
 8007568:	4a05      	ldr	r2, [pc, #20]	; (8007580 <USB_DevConnect+0x28>)
 800756a:	4313      	orrs	r3, r2
 800756c:	b299      	uxth	r1, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2258      	movs	r2, #88	; 0x58
 8007572:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b002      	add	sp, #8
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	ffff8000 	.word	0xffff8000

08007584 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2244      	movs	r2, #68	; 0x44
 8007590:	5a9b      	ldrh	r3, [r3, r2]
 8007592:	b29b      	uxth	r3, r3
 8007594:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	0018      	movs	r0, r3
 800759a:	46bd      	mov	sp, r7
 800759c:	b004      	add	sp, #16
 800759e:	bd80      	pop	{r7, pc}

080075a0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08c      	sub	sp, #48	; 0x30
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	0019      	movs	r1, r3
 80075ac:	1dbb      	adds	r3, r7, #6
 80075ae:	801a      	strh	r2, [r3, #0]
 80075b0:	1d3b      	adds	r3, r7, #4
 80075b2:	1c0a      	adds	r2, r1, #0
 80075b4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	3301      	adds	r3, #1
 80075bc:	085b      	lsrs	r3, r3, #1
 80075be:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80075c8:	1dbb      	adds	r3, r7, #6
 80075ca:	881a      	ldrh	r2, [r3, #0]
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	18d3      	adds	r3, r2, r3
 80075d0:	2280      	movs	r2, #128	; 0x80
 80075d2:	00d2      	lsls	r2, r2, #3
 80075d4:	4694      	mov	ip, r2
 80075d6:	4463      	add	r3, ip
 80075d8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80075da:	6a3b      	ldr	r3, [r7, #32]
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075de:	e01b      	b.n	8007618 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	3301      	adds	r3, #1
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	001a      	movs	r2, r3
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	b29a      	uxth	r2, r3
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007608:	3302      	adds	r3, #2
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800760c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760e:	3301      	adds	r3, #1
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007614:	3b01      	subs	r3, #1
 8007616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761a:	2b00      	cmp	r3, #0
 800761c:	d1e0      	bne.n	80075e0 <USB_WritePMA+0x40>
  }
}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	46c0      	nop			; (mov r8, r8)
 8007622:	46bd      	mov	sp, r7
 8007624:	b00c      	add	sp, #48	; 0x30
 8007626:	bd80      	pop	{r7, pc}

08007628 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	0019      	movs	r1, r3
 8007634:	1dbb      	adds	r3, r7, #6
 8007636:	801a      	strh	r2, [r3, #0]
 8007638:	1d3b      	adds	r3, r7, #4
 800763a:	1c0a      	adds	r2, r1, #0
 800763c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800763e:	1d3b      	adds	r3, r7, #4
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	b29b      	uxth	r3, r3
 8007646:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007650:	1dbb      	adds	r3, r7, #6
 8007652:	881a      	ldrh	r2, [r3, #0]
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	18d3      	adds	r3, r2, r3
 8007658:	2280      	movs	r2, #128	; 0x80
 800765a:	00d2      	lsls	r2, r2, #3
 800765c:	4694      	mov	ip, r2
 800765e:	4463      	add	r3, ip
 8007660:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
 8007666:	e018      	b.n	800769a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	881b      	ldrh	r3, [r3, #0]
 800766c:	b29b      	uxth	r3, r3
 800766e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	3302      	adds	r3, #2
 8007674:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	b2da      	uxtb	r2, r3
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	3301      	adds	r3, #1
 8007682:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	0a1b      	lsrs	r3, r3, #8
 8007688:	b2da      	uxtb	r2, r3
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	3301      	adds	r3, #1
 8007692:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	3b01      	subs	r3, #1
 8007698:	627b      	str	r3, [r7, #36]	; 0x24
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e3      	bne.n	8007668 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80076a0:	1d3b      	adds	r3, r7, #4
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	4013      	ands	r3, r2
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d007      	beq.n	80076be <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80076ae:	6a3b      	ldr	r3, [r7, #32]
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	701a      	strb	r2, [r3, #0]
  }
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b00a      	add	sp, #40	; 0x28
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80076c6:	b590      	push	{r4, r7, lr}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	000a      	movs	r2, r1
 80076d0:	1cfb      	adds	r3, r7, #3
 80076d2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80076d4:	240f      	movs	r4, #15
 80076d6:	193b      	adds	r3, r7, r4
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	2355      	movs	r3, #85	; 0x55
 80076e0:	2203      	movs	r2, #3
 80076e2:	2181      	movs	r1, #129	; 0x81
 80076e4:	f001 ff37 	bl	8009556 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	2355      	movs	r3, #85	; 0x55
 80076f2:	2203      	movs	r2, #3
 80076f4:	2101      	movs	r1, #1
 80076f6:	f001 ff2e 	bl	8009556 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	23b6      	movs	r3, #182	; 0xb6
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	2101      	movs	r1, #1
 8007702:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007704:	2054      	movs	r0, #84	; 0x54
 8007706:	f002 f911 	bl	800992c <malloc>
 800770a:	0003      	movs	r3, r0
 800770c:	0019      	movs	r1, r3
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	23ae      	movs	r3, #174	; 0xae
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	23ae      	movs	r3, #174	; 0xae
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	58d3      	ldr	r3, [r2, r3]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d103      	bne.n	800772a <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 8007722:	193b      	adds	r3, r7, r4
 8007724:	2201      	movs	r2, #1
 8007726:	701a      	strb	r2, [r3, #0]
 8007728:	e014      	b.n	8007754 <USBD_CUSTOM_HID_Init+0x8e>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	23ae      	movs	r3, #174	; 0xae
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	58d3      	ldr	r3, [r2, r3]
 8007732:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2250      	movs	r2, #80	; 0x50
 8007738:	2100      	movs	r1, #0
 800773a:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	23af      	movs	r3, #175	; 0xaf
 8007740:	009b      	lsls	r3, r3, #2
 8007742:	58d3      	ldr	r3, [r2, r3]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	2340      	movs	r3, #64	; 0x40
 800774e:	2101      	movs	r1, #1
 8007750:	f002 f84c 	bl	80097ec <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007754:	230f      	movs	r3, #15
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	781b      	ldrb	r3, [r3, #0]
}
 800775a:	0018      	movs	r0, r3
 800775c:	46bd      	mov	sp, r7
 800775e:	b005      	add	sp, #20
 8007760:	bd90      	pop	{r4, r7, pc}

08007762 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	000a      	movs	r2, r1
 800776c:	1cfb      	adds	r3, r7, #3
 800776e:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2181      	movs	r1, #129	; 0x81
 8007774:	0018      	movs	r0, r3
 8007776:	f001 ff25 	bl	80095c4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2101      	movs	r1, #1
 8007784:	0018      	movs	r0, r3
 8007786:	f001 ff1d 	bl	80095c4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	23b6      	movs	r3, #182	; 0xb6
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	2100      	movs	r1, #0
 8007792:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	23ae      	movs	r3, #174	; 0xae
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	58d3      	ldr	r3, [r2, r3]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d011      	beq.n	80077c4 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	23af      	movs	r3, #175	; 0xaf
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	58d3      	ldr	r3, [r2, r3]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	23ae      	movs	r3, #174	; 0xae
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	58d3      	ldr	r3, [r2, r3]
 80077b4:	0018      	movs	r0, r3
 80077b6:	f002 f8c3 	bl	8009940 <free>
    pdev->pClassData = NULL;
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	23ae      	movs	r3, #174	; 0xae
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	2100      	movs	r1, #0
 80077c2:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	0018      	movs	r0, r3
 80077c8:	46bd      	mov	sp, r7
 80077ca:	b002      	add	sp, #8
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	23ae      	movs	r3, #174	; 0xae
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	58d3      	ldr	r3, [r2, r3]
 80077e2:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80077e4:	231e      	movs	r3, #30
 80077e6:	18fb      	adds	r3, r7, r3
 80077e8:	2200      	movs	r2, #0
 80077ea:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80077f0:	230e      	movs	r3, #14
 80077f2:	18fb      	adds	r3, r7, r3
 80077f4:	2200      	movs	r2, #0
 80077f6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80077f8:	2317      	movs	r3, #23
 80077fa:	18fb      	adds	r3, r7, r3
 80077fc:	2200      	movs	r2, #0
 80077fe:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	001a      	movs	r2, r3
 8007806:	2360      	movs	r3, #96	; 0x60
 8007808:	4013      	ands	r3, r2
 800780a:	d044      	beq.n	8007896 <USBD_CUSTOM_HID_Setup+0xc6>
 800780c:	2b20      	cmp	r3, #32
 800780e:	d000      	beq.n	8007812 <USBD_CUSTOM_HID_Setup+0x42>
 8007810:	e0d8      	b.n	80079c4 <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b0b      	cmp	r3, #11
 8007818:	d831      	bhi.n	800787e <USBD_CUSTOM_HID_Setup+0xae>
 800781a:	009a      	lsls	r2, r3, #2
 800781c:	4b72      	ldr	r3, [pc, #456]	; (80079e8 <USBD_CUSTOM_HID_Setup+0x218>)
 800781e:	18d3      	adds	r3, r2, r3
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	885b      	ldrh	r3, [r3, #2]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	001a      	movs	r2, r3
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	641a      	str	r2, [r3, #64]	; 0x40
          break;
 8007830:	e030      	b.n	8007894 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	3340      	adds	r3, #64	; 0x40
 8007836:	0019      	movs	r1, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	0018      	movs	r0, r3
 800783e:	f001 fb21 	bl	8008e84 <USBD_CtlSendData>
          break;
 8007842:	e027      	b.n	8007894 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	885b      	ldrh	r3, [r3, #2]
 8007848:	0a1b      	lsrs	r3, r3, #8
 800784a:	b29b      	uxth	r3, r3
 800784c:	b2db      	uxtb	r3, r3
 800784e:	001a      	movs	r2, r3
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	645a      	str	r2, [r3, #68]	; 0x44
          break;
 8007854:	e01e      	b.n	8007894 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	3344      	adds	r3, #68	; 0x44
 800785a:	0019      	movs	r1, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	0018      	movs	r0, r3
 8007862:	f001 fb0f 	bl	8008e84 <USBD_CtlSendData>
          break;
 8007866:	e015      	b.n	8007894 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	2201      	movs	r2, #1
 800786c:	64da      	str	r2, [r3, #76]	; 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800786e:	6939      	ldr	r1, [r7, #16]
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	88da      	ldrh	r2, [r3, #6]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0018      	movs	r0, r3
 8007878:	f001 fb37 	bl	8008eea <USBD_CtlPrepareRx>
          break;
 800787c:	e00a      	b.n	8007894 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	0011      	movs	r1, r2
 8007884:	0018      	movs	r0, r3
 8007886:	f001 fa7f 	bl	8008d88 <USBD_CtlError>
          ret = USBD_FAIL;
 800788a:	2317      	movs	r3, #23
 800788c:	18fb      	adds	r3, r7, r3
 800788e:	2202      	movs	r2, #2
 8007890:	701a      	strb	r2, [r3, #0]
          break;
 8007892:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007894:	e0a1      	b.n	80079da <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	785b      	ldrb	r3, [r3, #1]
 800789a:	2b0b      	cmp	r3, #11
 800789c:	d100      	bne.n	80078a0 <USBD_CUSTOM_HID_Setup+0xd0>
 800789e:	e06d      	b.n	800797c <USBD_CUSTOM_HID_Setup+0x1ac>
 80078a0:	dd00      	ble.n	80078a4 <USBD_CUSTOM_HID_Setup+0xd4>
 80078a2:	e083      	b.n	80079ac <USBD_CUSTOM_HID_Setup+0x1dc>
 80078a4:	2b0a      	cmp	r3, #10
 80078a6:	d04f      	beq.n	8007948 <USBD_CUSTOM_HID_Setup+0x178>
 80078a8:	dd00      	ble.n	80078ac <USBD_CUSTOM_HID_Setup+0xdc>
 80078aa:	e07f      	b.n	80079ac <USBD_CUSTOM_HID_Setup+0x1dc>
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d002      	beq.n	80078b6 <USBD_CUSTOM_HID_Setup+0xe6>
 80078b0:	2b06      	cmp	r3, #6
 80078b2:	d019      	beq.n	80078e8 <USBD_CUSTOM_HID_Setup+0x118>
 80078b4:	e07a      	b.n	80079ac <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	23a7      	movs	r3, #167	; 0xa7
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	5cd3      	ldrb	r3, [r2, r3]
 80078be:	2b03      	cmp	r3, #3
 80078c0:	d107      	bne.n	80078d2 <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80078c2:	230e      	movs	r3, #14
 80078c4:	18f9      	adds	r1, r7, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	0018      	movs	r0, r3
 80078cc:	f001 fada 	bl	8008e84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078d0:	e077      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	0011      	movs	r1, r2
 80078d8:	0018      	movs	r0, r3
 80078da:	f001 fa55 	bl	8008d88 <USBD_CtlError>
            ret = USBD_FAIL;
 80078de:	2317      	movs	r3, #23
 80078e0:	18fb      	adds	r3, r7, r3
 80078e2:	2202      	movs	r2, #2
 80078e4:	701a      	strb	r2, [r3, #0]
          break;
 80078e6:	e06c      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b22      	cmp	r3, #34	; 0x22
 80078f2:	d10f      	bne.n	8007914 <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	88db      	ldrh	r3, [r3, #6]
 80078f8:	221e      	movs	r2, #30
 80078fa:	18ba      	adds	r2, r7, r2
 80078fc:	b299      	uxth	r1, r3
 80078fe:	2955      	cmp	r1, #85	; 0x55
 8007900:	d900      	bls.n	8007904 <USBD_CUSTOM_HID_Setup+0x134>
 8007902:	2355      	movs	r3, #85	; 0x55
 8007904:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	23af      	movs	r3, #175	; 0xaf
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	58d3      	ldr	r3, [r2, r3]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e010      	b.n	8007936 <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	885b      	ldrh	r3, [r3, #2]
 8007918:	0a1b      	lsrs	r3, r3, #8
 800791a:	b29b      	uxth	r3, r3
 800791c:	2b21      	cmp	r3, #33	; 0x21
 800791e:	d10a      	bne.n	8007936 <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007920:	4b32      	ldr	r3, [pc, #200]	; (80079ec <USBD_CUSTOM_HID_Setup+0x21c>)
 8007922:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	88db      	ldrh	r3, [r3, #6]
 8007928:	221e      	movs	r2, #30
 800792a:	18ba      	adds	r2, r7, r2
 800792c:	b299      	uxth	r1, r3
 800792e:	2909      	cmp	r1, #9
 8007930:	d900      	bls.n	8007934 <USBD_CUSTOM_HID_Setup+0x164>
 8007932:	2309      	movs	r3, #9
 8007934:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007936:	231e      	movs	r3, #30
 8007938:	18fb      	adds	r3, r7, r3
 800793a:	881a      	ldrh	r2, [r3, #0]
 800793c:	69b9      	ldr	r1, [r7, #24]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	0018      	movs	r0, r3
 8007942:	f001 fa9f 	bl	8008e84 <USBD_CtlSendData>
          break;
 8007946:	e03c      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	23a7      	movs	r3, #167	; 0xa7
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	5cd3      	ldrb	r3, [r2, r3]
 8007950:	2b03      	cmp	r3, #3
 8007952:	d108      	bne.n	8007966 <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	3348      	adds	r3, #72	; 0x48
 8007958:	0019      	movs	r1, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	0018      	movs	r0, r3
 8007960:	f001 fa90 	bl	8008e84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007964:	e02d      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	0011      	movs	r1, r2
 800796c:	0018      	movs	r0, r3
 800796e:	f001 fa0b 	bl	8008d88 <USBD_CtlError>
            ret = USBD_FAIL;
 8007972:	2317      	movs	r3, #23
 8007974:	18fb      	adds	r3, r7, r3
 8007976:	2202      	movs	r2, #2
 8007978:	701a      	strb	r2, [r3, #0]
          break;
 800797a:	e022      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	23a7      	movs	r3, #167	; 0xa7
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	5cd3      	ldrb	r3, [r2, r3]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d106      	bne.n	8007996 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	885b      	ldrh	r3, [r3, #2]
 800798c:	b2db      	uxtb	r3, r3
 800798e:	001a      	movs	r2, r3
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	649a      	str	r2, [r3, #72]	; 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007994:	e015      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	0011      	movs	r1, r2
 800799c:	0018      	movs	r0, r3
 800799e:	f001 f9f3 	bl	8008d88 <USBD_CtlError>
            ret = USBD_FAIL;
 80079a2:	2317      	movs	r3, #23
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	2202      	movs	r2, #2
 80079a8:	701a      	strb	r2, [r3, #0]
          break;
 80079aa:	e00a      	b.n	80079c2 <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	0011      	movs	r1, r2
 80079b2:	0018      	movs	r0, r3
 80079b4:	f001 f9e8 	bl	8008d88 <USBD_CtlError>
          ret = USBD_FAIL;
 80079b8:	2317      	movs	r3, #23
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	2202      	movs	r2, #2
 80079be:	701a      	strb	r2, [r3, #0]
          break;
 80079c0:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80079c2:	e00a      	b.n	80079da <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 80079c4:	683a      	ldr	r2, [r7, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	0011      	movs	r1, r2
 80079ca:	0018      	movs	r0, r3
 80079cc:	f001 f9dc 	bl	8008d88 <USBD_CtlError>
      ret = USBD_FAIL;
 80079d0:	2317      	movs	r3, #23
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	2202      	movs	r2, #2
 80079d6:	701a      	strb	r2, [r3, #0]
      break;
 80079d8:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 80079da:	2317      	movs	r3, #23
 80079dc:	18fb      	adds	r3, r7, r3
 80079de:	781b      	ldrb	r3, [r3, #0]
}
 80079e0:	0018      	movs	r0, r3
 80079e2:	46bd      	mov	sp, r7
 80079e4:	b008      	add	sp, #32
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	08009be0 	.word	0x08009be0
 80079ec:	200000c8 	.word	0x200000c8

080079f0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b086      	sub	sp, #24
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	1dbb      	adds	r3, r7, #6
 80079fc:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	23ae      	movs	r3, #174	; 0xae
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	58d3      	ldr	r3, [r2, r3]
 8007a06:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	23a7      	movs	r3, #167	; 0xa7
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	5cd3      	ldrb	r3, [r2, r3]
 8007a10:	2b03      	cmp	r3, #3
 8007a12:	d112      	bne.n	8007a3a <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	2250      	movs	r2, #80	; 0x50
 8007a18:	5c9b      	ldrb	r3, [r3, r2]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d10b      	bne.n	8007a36 <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2250      	movs	r2, #80	; 0x50
 8007a22:	2101      	movs	r1, #1
 8007a24:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007a26:	1dbb      	adds	r3, r7, #6
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	2181      	movs	r1, #129	; 0x81
 8007a30:	f001 fea5 	bl	800977e <USBD_LL_Transmit>
 8007a34:	e001      	b.n	8007a3a <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	b006      	add	sp, #24
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2229      	movs	r2, #41	; 0x29
 8007a50:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007a52:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8007a54:	0018      	movs	r0, r3
 8007a56:	46bd      	mov	sp, r7
 8007a58:	b002      	add	sp, #8
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	20000044 	.word	0x20000044

08007a60 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2229      	movs	r2, #41	; 0x29
 8007a6c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007a6e:	4b02      	ldr	r3, [pc, #8]	; (8007a78 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8007a70:	0018      	movs	r0, r3
 8007a72:	46bd      	mov	sp, r7
 8007a74:	b002      	add	sp, #8
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000070 	.word	0x20000070

08007a7c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2229      	movs	r2, #41	; 0x29
 8007a88:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007a8a:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	b002      	add	sp, #8
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	2000009c 	.word	0x2000009c

08007a98 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	000a      	movs	r2, r1
 8007aa2:	1cfb      	adds	r3, r7, #3
 8007aa4:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	23ae      	movs	r3, #174	; 0xae
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	58d3      	ldr	r3, [r2, r3]
 8007aae:	2250      	movs	r2, #80	; 0x50
 8007ab0:	2100      	movs	r1, #0
 8007ab2:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b002      	add	sp, #8
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	000a      	movs	r2, r1
 8007ac8:	1cfb      	adds	r3, r7, #3
 8007aca:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	23ae      	movs	r3, #174	; 0xae
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	58d3      	ldr	r3, [r2, r3]
 8007ad4:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	23af      	movs	r3, #175	; 0xaf
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	58d3      	ldr	r3, [r2, r3]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	0010      	movs	r0, r2
 8007ae4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	2340      	movs	r3, #64	; 0x40
 8007aec:	2101      	movs	r1, #1
 8007aee:	f001 fe7d 	bl	80097ec <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	0018      	movs	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	b004      	add	sp, #16
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	23ae      	movs	r3, #174	; 0xae
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	58d3      	ldr	r3, [r2, r3]
 8007b0c:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d10a      	bne.n	8007b2c <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	23af      	movs	r3, #175	; 0xaf
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	58d3      	ldr	r3, [r2, r3]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	0010      	movs	r0, r2
 8007b24:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return USBD_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	0018      	movs	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b004      	add	sp, #16
 8007b34:	bd80      	pop	{r7, pc}
	...

08007b38 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	220a      	movs	r2, #10
 8007b44:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007b46:	4b02      	ldr	r3, [pc, #8]	; (8007b50 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}
 8007b50:	200000d4 	.word	0x200000d4

08007b54 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007b5e:	200f      	movs	r0, #15
 8007b60:	183b      	adds	r3, r7, r0
 8007b62:	2202      	movs	r2, #2
 8007b64:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d007      	beq.n	8007b7c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	23af      	movs	r3, #175	; 0xaf
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	6839      	ldr	r1, [r7, #0]
 8007b74:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007b76:	183b      	adds	r3, r7, r0
 8007b78:	2200      	movs	r2, #0
 8007b7a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007b7c:	230f      	movs	r3, #15
 8007b7e:	18fb      	adds	r3, r7, r3
 8007b80:	781b      	ldrb	r3, [r3, #0]
}
 8007b82:	0018      	movs	r0, r3
 8007b84:	46bd      	mov	sp, r7
 8007b86:	b004      	add	sp, #16
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	b084      	sub	sp, #16
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	60f8      	str	r0, [r7, #12]
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	1dfb      	adds	r3, r7, #7
 8007b96:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d101      	bne.n	8007ba2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e020      	b.n	8007be4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	23ad      	movs	r3, #173	; 0xad
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	58d3      	ldr	r3, [r2, r3]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d004      	beq.n	8007bb8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	23ad      	movs	r3, #173	; 0xad
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	23ac      	movs	r3, #172	; 0xac
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	68b9      	ldr	r1, [r7, #8]
 8007bc6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	23a7      	movs	r3, #167	; 0xa7
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	2101      	movs	r1, #1
 8007bd0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1dfa      	adds	r2, r7, #7
 8007bd6:	7812      	ldrb	r2, [r2, #0]
 8007bd8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	0018      	movs	r0, r3
 8007bde:	f001 fc3d 	bl	800945c <USBD_LL_Init>

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	0018      	movs	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b004      	add	sp, #16
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007bf6:	200f      	movs	r0, #15
 8007bf8:	183b      	adds	r3, r7, r0
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d008      	beq.n	8007c16 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	23ad      	movs	r3, #173	; 0xad
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007c0e:	183b      	adds	r3, r7, r0
 8007c10:	2200      	movs	r2, #0
 8007c12:	701a      	strb	r2, [r3, #0]
 8007c14:	e003      	b.n	8007c1e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007c16:	230f      	movs	r3, #15
 8007c18:	18fb      	adds	r3, r7, r3
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007c1e:	230f      	movs	r3, #15
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	781b      	ldrb	r3, [r3, #0]
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b004      	add	sp, #16
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	0018      	movs	r0, r3
 8007c38:	f001 fc68 	bl	800950c <USBD_LL_Start>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	0018      	movs	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b002      	add	sp, #8
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	0018      	movs	r0, r3
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b002      	add	sp, #8
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	000a      	movs	r2, r1
 8007c62:	1cfb      	adds	r3, r7, #3
 8007c64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c66:	240f      	movs	r4, #15
 8007c68:	193b      	adds	r3, r7, r4
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	23ad      	movs	r3, #173	; 0xad
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	58d3      	ldr	r3, [r2, r3]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00e      	beq.n	8007c98 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	23ad      	movs	r3, #173	; 0xad
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	58d3      	ldr	r3, [r2, r3]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	1cfa      	adds	r2, r7, #3
 8007c86:	7811      	ldrb	r1, [r2, #0]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	0010      	movs	r0, r2
 8007c8c:	4798      	blx	r3
 8007c8e:	1e03      	subs	r3, r0, #0
 8007c90:	d102      	bne.n	8007c98 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007c92:	193b      	adds	r3, r7, r4
 8007c94:	2200      	movs	r2, #0
 8007c96:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007c98:	230f      	movs	r3, #15
 8007c9a:	18fb      	adds	r3, r7, r3
 8007c9c:	781b      	ldrb	r3, [r3, #0]
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b005      	add	sp, #20
 8007ca4:	bd90      	pop	{r4, r7, pc}

08007ca6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	000a      	movs	r2, r1
 8007cb0:	1cfb      	adds	r3, r7, #3
 8007cb2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	23ad      	movs	r3, #173	; 0xad
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	58d3      	ldr	r3, [r2, r3]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	1cfa      	adds	r2, r7, #3
 8007cc0:	7811      	ldrb	r1, [r2, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	0010      	movs	r0, r2
 8007cc6:	4798      	blx	r3

  return USBD_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	0018      	movs	r0, r3
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	b002      	add	sp, #8
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	22aa      	movs	r2, #170	; 0xaa
 8007ce2:	0092      	lsls	r2, r2, #2
 8007ce4:	4694      	mov	ip, r2
 8007ce6:	4463      	add	r3, ip
 8007ce8:	683a      	ldr	r2, [r7, #0]
 8007cea:	0011      	movs	r1, r2
 8007cec:	0018      	movs	r0, r3
 8007cee:	f001 f810 	bl	8008d12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	23a5      	movs	r3, #165	; 0xa5
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	2101      	movs	r1, #1
 8007cfa:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a23      	ldr	r2, [pc, #140]	; (8007d8c <USBD_LL_SetupStage+0xb8>)
 8007d00:	5a9b      	ldrh	r3, [r3, r2]
 8007d02:	0019      	movs	r1, r3
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	23a6      	movs	r3, #166	; 0xa6
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	23aa      	movs	r3, #170	; 0xaa
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	5cd3      	ldrb	r3, [r2, r3]
 8007d14:	001a      	movs	r2, r3
 8007d16:	231f      	movs	r3, #31
 8007d18:	4013      	ands	r3, r2
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d019      	beq.n	8007d52 <USBD_LL_SetupStage+0x7e>
 8007d1e:	d822      	bhi.n	8007d66 <USBD_LL_SetupStage+0x92>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <USBD_LL_SetupStage+0x56>
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d00a      	beq.n	8007d3e <USBD_LL_SetupStage+0x6a>
 8007d28:	e01d      	b.n	8007d66 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	22aa      	movs	r2, #170	; 0xaa
 8007d2e:	0092      	lsls	r2, r2, #2
 8007d30:	189a      	adds	r2, r3, r2
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	0011      	movs	r1, r2
 8007d36:	0018      	movs	r0, r3
 8007d38:	f000 fa10 	bl	800815c <USBD_StdDevReq>
      break;
 8007d3c:	e020      	b.n	8007d80 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	22aa      	movs	r2, #170	; 0xaa
 8007d42:	0092      	lsls	r2, r2, #2
 8007d44:	189a      	adds	r2, r3, r2
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	0011      	movs	r1, r2
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f000 fa78 	bl	8008240 <USBD_StdItfReq>
      break;
 8007d50:	e016      	b.n	8007d80 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	22aa      	movs	r2, #170	; 0xaa
 8007d56:	0092      	lsls	r2, r2, #2
 8007d58:	189a      	adds	r2, r3, r2
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	0011      	movs	r1, r2
 8007d5e:	0018      	movs	r0, r3
 8007d60:	f000 fac5 	bl	80082ee <USBD_StdEPReq>
      break;
 8007d64:	e00c      	b.n	8007d80 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	23aa      	movs	r3, #170	; 0xaa
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	5cd3      	ldrb	r3, [r2, r3]
 8007d6e:	227f      	movs	r2, #127	; 0x7f
 8007d70:	4393      	bics	r3, r2
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	0011      	movs	r1, r2
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f001 fc4e 	bl	800961a <USBD_LL_StallEP>
      break;
 8007d7e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	0018      	movs	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	b002      	add	sp, #8
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	46c0      	nop			; (mov r8, r8)
 8007d8c:	000002ae 	.word	0x000002ae

08007d90 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	607a      	str	r2, [r7, #4]
 8007d9a:	200b      	movs	r0, #11
 8007d9c:	183b      	adds	r3, r7, r0
 8007d9e:	1c0a      	adds	r2, r1, #0
 8007da0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007da2:	183b      	adds	r3, r7, r0
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d154      	bne.n	8007e54 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3355      	adds	r3, #85	; 0x55
 8007dae:	33ff      	adds	r3, #255	; 0xff
 8007db0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	23a5      	movs	r3, #165	; 0xa5
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	58d3      	ldr	r3, [r2, r3]
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d139      	bne.n	8007e32 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	68da      	ldr	r2, [r3, #12]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d919      	bls.n	8007dfe <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	1ad2      	subs	r2, r2, r3
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	68da      	ldr	r2, [r3, #12]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d203      	bcs.n	8007dec <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	e002      	b.n	8007df2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	6879      	ldr	r1, [r7, #4]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	001a      	movs	r2, r3
 8007df8:	f001 f89b 	bl	8008f32 <USBD_CtlContinueRx>
 8007dfc:	e045      	b.n	8007e8a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	23ad      	movs	r3, #173	; 0xad
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	58d3      	ldr	r3, [r2, r3]
 8007e06:	691b      	ldr	r3, [r3, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00d      	beq.n	8007e28 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	23a7      	movs	r3, #167	; 0xa7
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007e14:	2b03      	cmp	r3, #3
 8007e16:	d107      	bne.n	8007e28 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	23ad      	movs	r3, #173	; 0xad
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	58d3      	ldr	r3, [r2, r3]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	0010      	movs	r0, r2
 8007e26:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f001 f894 	bl	8008f58 <USBD_CtlSendStatus>
 8007e30:	e02b      	b.n	8007e8a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	23a5      	movs	r3, #165	; 0xa5
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	58d3      	ldr	r3, [r2, r3]
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d125      	bne.n	8007e8a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e3e:	68fa      	ldr	r2, [r7, #12]
 8007e40:	23a5      	movs	r3, #165	; 0xa5
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	2100      	movs	r1, #0
 8007e46:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f001 fbe4 	bl	800961a <USBD_LL_StallEP>
 8007e52:	e01a      	b.n	8007e8a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	23ad      	movs	r3, #173	; 0xad
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	58d3      	ldr	r3, [r2, r3]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d011      	beq.n	8007e86 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	23a7      	movs	r3, #167	; 0xa7
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e6a:	2b03      	cmp	r3, #3
 8007e6c:	d10b      	bne.n	8007e86 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	23ad      	movs	r3, #173	; 0xad
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	58d3      	ldr	r3, [r2, r3]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	220b      	movs	r2, #11
 8007e7a:	18ba      	adds	r2, r7, r2
 8007e7c:	7811      	ldrb	r1, [r2, #0]
 8007e7e:	68fa      	ldr	r2, [r7, #12]
 8007e80:	0010      	movs	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	e001      	b.n	8007e8a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e86:	2302      	movs	r3, #2
 8007e88:	e000      	b.n	8007e8c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	b006      	add	sp, #24
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	607a      	str	r2, [r7, #4]
 8007e9e:	200b      	movs	r0, #11
 8007ea0:	183b      	adds	r3, r7, r0
 8007ea2:	1c0a      	adds	r2, r1, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007ea6:	183b      	adds	r3, r7, r0
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d000      	beq.n	8007eb0 <USBD_LL_DataInStage+0x1c>
 8007eae:	e08e      	b.n	8007fce <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3314      	adds	r3, #20
 8007eb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	23a5      	movs	r3, #165	; 0xa5
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	58d3      	ldr	r3, [r2, r3]
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d164      	bne.n	8007f8c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	68da      	ldr	r2, [r3, #12]
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d915      	bls.n	8007efa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	68da      	ldr	r2, [r3, #12]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	1ad2      	subs	r2, r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	68db      	ldr	r3, [r3, #12]
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	6879      	ldr	r1, [r7, #4]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f000 ffec 	bl	8008ec4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	2300      	movs	r3, #0
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	f001 fc7a 	bl	80097ec <USBD_LL_PrepareReceive>
 8007ef8:	e059      	b.n	8007fae <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	689a      	ldr	r2, [r3, #8]
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	0019      	movs	r1, r3
 8007f04:	0010      	movs	r0, r2
 8007f06:	f7f8 f985 	bl	8000214 <__aeabi_uidivmod>
 8007f0a:	1e0b      	subs	r3, r1, #0
 8007f0c:	d11f      	bne.n	8007f4e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d319      	bcc.n	8007f4e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	68f9      	ldr	r1, [r7, #12]
 8007f20:	23a6      	movs	r3, #166	; 0xa6
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d211      	bcs.n	8007f4e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	2100      	movs	r1, #0
 8007f30:	0018      	movs	r0, r3
 8007f32:	f000 ffc7 	bl	8008ec4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	23a6      	movs	r3, #166	; 0xa6
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	2300      	movs	r3, #0
 8007f44:	2200      	movs	r2, #0
 8007f46:	2100      	movs	r1, #0
 8007f48:	f001 fc50 	bl	80097ec <USBD_LL_PrepareReceive>
 8007f4c:	e02f      	b.n	8007fae <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f4e:	68fa      	ldr	r2, [r7, #12]
 8007f50:	23ad      	movs	r3, #173	; 0xad
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	58d3      	ldr	r3, [r2, r3]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00d      	beq.n	8007f78 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	23a7      	movs	r3, #167	; 0xa7
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d107      	bne.n	8007f78 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	23ad      	movs	r3, #173	; 0xad
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	58d3      	ldr	r3, [r2, r3]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	0010      	movs	r0, r2
 8007f76:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2180      	movs	r1, #128	; 0x80
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f001 fb4c 	bl	800961a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	0018      	movs	r0, r3
 8007f86:	f000 fffb 	bl	8008f80 <USBD_CtlReceiveStatus>
 8007f8a:	e010      	b.n	8007fae <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f8c:	68fa      	ldr	r2, [r7, #12]
 8007f8e:	23a5      	movs	r3, #165	; 0xa5
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	58d3      	ldr	r3, [r2, r3]
 8007f94:	2b04      	cmp	r3, #4
 8007f96:	d005      	beq.n	8007fa4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	23a5      	movs	r3, #165	; 0xa5
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d104      	bne.n	8007fae <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2180      	movs	r1, #128	; 0x80
 8007fa8:	0018      	movs	r0, r3
 8007faa:	f001 fb36 	bl	800961a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	23a8      	movs	r3, #168	; 0xa8
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	5cd3      	ldrb	r3, [r2, r3]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d124      	bne.n	8008004 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	0018      	movs	r0, r3
 8007fbe:	f7ff fe42 	bl	8007c46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	23a8      	movs	r3, #168	; 0xa8
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	2100      	movs	r1, #0
 8007fca:	54d1      	strb	r1, [r2, r3]
 8007fcc:	e01a      	b.n	8008004 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	23ad      	movs	r3, #173	; 0xad
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	58d3      	ldr	r3, [r2, r3]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d011      	beq.n	8008000 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	23a7      	movs	r3, #167	; 0xa7
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d10b      	bne.n	8008000 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	23ad      	movs	r3, #173	; 0xad
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	58d3      	ldr	r3, [r2, r3]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	220b      	movs	r2, #11
 8007ff4:	18ba      	adds	r2, r7, r2
 8007ff6:	7811      	ldrb	r1, [r2, #0]
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	0010      	movs	r0, r2
 8007ffc:	4798      	blx	r3
 8007ffe:	e001      	b.n	8008004 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008000:	2302      	movs	r3, #2
 8008002:	e000      	b.n	8008006 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	0018      	movs	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	b006      	add	sp, #24
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	2340      	movs	r3, #64	; 0x40
 800801a:	2200      	movs	r2, #0
 800801c:	2100      	movs	r1, #0
 800801e:	f001 fa9a 	bl	8009556 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	23ac      	movs	r3, #172	; 0xac
 8008026:	005b      	lsls	r3, r3, #1
 8008028:	2101      	movs	r1, #1
 800802a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	23b2      	movs	r3, #178	; 0xb2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	2140      	movs	r1, #64	; 0x40
 8008034:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	2340      	movs	r3, #64	; 0x40
 800803a:	2200      	movs	r2, #0
 800803c:	2180      	movs	r1, #128	; 0x80
 800803e:	f001 fa8a 	bl	8009556 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2201      	movs	r2, #1
 8008046:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2240      	movs	r2, #64	; 0x40
 800804c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	23a7      	movs	r3, #167	; 0xa7
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	2101      	movs	r1, #1
 8008056:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	23a5      	movs	r3, #165	; 0xa5
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	2100      	movs	r1, #0
 8008060:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	23a9      	movs	r3, #169	; 0xa9
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	2100      	movs	r1, #0
 8008070:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	23ae      	movs	r3, #174	; 0xae
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	58d3      	ldr	r3, [r2, r3]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00a      	beq.n	8008094 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	23ad      	movs	r3, #173	; 0xad
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	58d3      	ldr	r3, [r2, r3]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	b2d9      	uxtb	r1, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	0018      	movs	r0, r3
 8008092:	4790      	blx	r2
  }

  return USBD_OK;
 8008094:	2300      	movs	r3, #0
}
 8008096:	0018      	movs	r0, r3
 8008098:	46bd      	mov	sp, r7
 800809a:	b002      	add	sp, #8
 800809c:	bd80      	pop	{r7, pc}

0800809e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800809e:	b580      	push	{r7, lr}
 80080a0:	b082      	sub	sp, #8
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	000a      	movs	r2, r1
 80080a8:	1cfb      	adds	r3, r7, #3
 80080aa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	1cfa      	adds	r2, r7, #3
 80080b0:	7812      	ldrb	r2, [r2, #0]
 80080b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	0018      	movs	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	b002      	add	sp, #8
 80080bc:	bd80      	pop	{r7, pc}
	...

080080c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	23a7      	movs	r3, #167	; 0xa7
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	5cd1      	ldrb	r1, [r2, r3]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4a06      	ldr	r2, [pc, #24]	; (80080ec <USBD_LL_Suspend+0x2c>)
 80080d4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	23a7      	movs	r3, #167	; 0xa7
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	2104      	movs	r1, #4
 80080de:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	0018      	movs	r0, r3
 80080e4:	46bd      	mov	sp, r7
 80080e6:	b002      	add	sp, #8
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	46c0      	nop			; (mov r8, r8)
 80080ec:	0000029d 	.word	0x0000029d

080080f0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	23a7      	movs	r3, #167	; 0xa7
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	5cd3      	ldrb	r3, [r2, r3]
 8008100:	2b04      	cmp	r3, #4
 8008102:	d106      	bne.n	8008112 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4a05      	ldr	r2, [pc, #20]	; (800811c <USBD_LL_Resume+0x2c>)
 8008108:	5c99      	ldrb	r1, [r3, r2]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	23a7      	movs	r3, #167	; 0xa7
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	0018      	movs	r0, r3
 8008116:	46bd      	mov	sp, r7
 8008118:	b002      	add	sp, #8
 800811a:	bd80      	pop	{r7, pc}
 800811c:	0000029d 	.word	0x0000029d

08008120 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	23a7      	movs	r3, #167	; 0xa7
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	5cd3      	ldrb	r3, [r2, r3]
 8008130:	2b03      	cmp	r3, #3
 8008132:	d10e      	bne.n	8008152 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	23ad      	movs	r3, #173	; 0xad
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	58d3      	ldr	r3, [r2, r3]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d007      	beq.n	8008152 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	23ad      	movs	r3, #173	; 0xad
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	58d3      	ldr	r3, [r2, r3]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	0010      	movs	r0, r2
 8008150:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	0018      	movs	r0, r3
 8008156:	46bd      	mov	sp, r7
 8008158:	b002      	add	sp, #8
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008166:	230f      	movs	r3, #15
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	781b      	ldrb	r3, [r3, #0]
 8008172:	001a      	movs	r2, r3
 8008174:	2360      	movs	r3, #96	; 0x60
 8008176:	4013      	ands	r3, r2
 8008178:	2b40      	cmp	r3, #64	; 0x40
 800817a:	d004      	beq.n	8008186 <USBD_StdDevReq+0x2a>
 800817c:	d84f      	bhi.n	800821e <USBD_StdDevReq+0xc2>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <USBD_StdDevReq+0x3e>
 8008182:	2b20      	cmp	r3, #32
 8008184:	d14b      	bne.n	800821e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	23ad      	movs	r3, #173	; 0xad
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	58d3      	ldr	r3, [r2, r3]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	0010      	movs	r0, r2
 8008196:	4798      	blx	r3
      break;
 8008198:	e048      	b.n	800822c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	785b      	ldrb	r3, [r3, #1]
 800819e:	2b09      	cmp	r3, #9
 80081a0:	d835      	bhi.n	800820e <USBD_StdDevReq+0xb2>
 80081a2:	009a      	lsls	r2, r3, #2
 80081a4:	4b25      	ldr	r3, [pc, #148]	; (800823c <USBD_StdDevReq+0xe0>)
 80081a6:	18d3      	adds	r3, r2, r3
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	0011      	movs	r1, r2
 80081b2:	0018      	movs	r0, r3
 80081b4:	f000 fa52 	bl	800865c <USBD_GetDescriptor>
          break;
 80081b8:	e030      	b.n	800821c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081ba:	683a      	ldr	r2, [r7, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f000 fbfd 	bl	80089c0 <USBD_SetAddress>
          break;
 80081c6:	e029      	b.n	800821c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80081c8:	683a      	ldr	r2, [r7, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	0011      	movs	r1, r2
 80081ce:	0018      	movs	r0, r3
 80081d0:	f000 fc4a 	bl	8008a68 <USBD_SetConfig>
          break;
 80081d4:	e022      	b.n	800821c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	0011      	movs	r1, r2
 80081dc:	0018      	movs	r0, r3
 80081de:	f000 fce7 	bl	8008bb0 <USBD_GetConfig>
          break;
 80081e2:	e01b      	b.n	800821c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081e4:	683a      	ldr	r2, [r7, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	0011      	movs	r1, r2
 80081ea:	0018      	movs	r0, r3
 80081ec:	f000 fd1b 	bl	8008c26 <USBD_GetStatus>
          break;
 80081f0:	e014      	b.n	800821c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	0011      	movs	r1, r2
 80081f8:	0018      	movs	r0, r3
 80081fa:	f000 fd4e 	bl	8008c9a <USBD_SetFeature>
          break;
 80081fe:	e00d      	b.n	800821c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	0011      	movs	r1, r2
 8008206:	0018      	movs	r0, r3
 8008208:	f000 fd5d 	bl	8008cc6 <USBD_ClrFeature>
          break;
 800820c:	e006      	b.n	800821c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800820e:	683a      	ldr	r2, [r7, #0]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	0011      	movs	r1, r2
 8008214:	0018      	movs	r0, r3
 8008216:	f000 fdb7 	bl	8008d88 <USBD_CtlError>
          break;
 800821a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800821c:	e006      	b.n	800822c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	0011      	movs	r1, r2
 8008224:	0018      	movs	r0, r3
 8008226:	f000 fdaf 	bl	8008d88 <USBD_CtlError>
      break;
 800822a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800822c:	230f      	movs	r3, #15
 800822e:	18fb      	adds	r3, r7, r3
 8008230:	781b      	ldrb	r3, [r3, #0]
}
 8008232:	0018      	movs	r0, r3
 8008234:	46bd      	mov	sp, r7
 8008236:	b004      	add	sp, #16
 8008238:	bd80      	pop	{r7, pc}
 800823a:	46c0      	nop			; (mov r8, r8)
 800823c:	08009c10 	.word	0x08009c10

08008240 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008240:	b5b0      	push	{r4, r5, r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800824a:	230f      	movs	r3, #15
 800824c:	18fb      	adds	r3, r7, r3
 800824e:	2200      	movs	r2, #0
 8008250:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	001a      	movs	r2, r3
 8008258:	2360      	movs	r3, #96	; 0x60
 800825a:	4013      	ands	r3, r2
 800825c:	2b40      	cmp	r3, #64	; 0x40
 800825e:	d004      	beq.n	800826a <USBD_StdItfReq+0x2a>
 8008260:	d839      	bhi.n	80082d6 <USBD_StdItfReq+0x96>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <USBD_StdItfReq+0x2a>
 8008266:	2b20      	cmp	r3, #32
 8008268:	d135      	bne.n	80082d6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	23a7      	movs	r3, #167	; 0xa7
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	5cd3      	ldrb	r3, [r2, r3]
 8008272:	3b01      	subs	r3, #1
 8008274:	2b02      	cmp	r3, #2
 8008276:	d825      	bhi.n	80082c4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	889b      	ldrh	r3, [r3, #4]
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b01      	cmp	r3, #1
 8008280:	d819      	bhi.n	80082b6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	23ad      	movs	r3, #173	; 0xad
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	58d3      	ldr	r3, [r2, r3]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	250f      	movs	r5, #15
 800828e:	197c      	adds	r4, r7, r5
 8008290:	6839      	ldr	r1, [r7, #0]
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	0010      	movs	r0, r2
 8008296:	4798      	blx	r3
 8008298:	0003      	movs	r3, r0
 800829a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	88db      	ldrh	r3, [r3, #6]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d116      	bne.n	80082d2 <USBD_StdItfReq+0x92>
 80082a4:	197b      	adds	r3, r7, r5
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d112      	bne.n	80082d2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	0018      	movs	r0, r3
 80082b0:	f000 fe52 	bl	8008f58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082b4:	e00d      	b.n	80082d2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	0011      	movs	r1, r2
 80082bc:	0018      	movs	r0, r3
 80082be:	f000 fd63 	bl	8008d88 <USBD_CtlError>
          break;
 80082c2:	e006      	b.n	80082d2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	0011      	movs	r1, r2
 80082ca:	0018      	movs	r0, r3
 80082cc:	f000 fd5c 	bl	8008d88 <USBD_CtlError>
          break;
 80082d0:	e000      	b.n	80082d4 <USBD_StdItfReq+0x94>
          break;
 80082d2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80082d4:	e006      	b.n	80082e4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80082d6:	683a      	ldr	r2, [r7, #0]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	0011      	movs	r1, r2
 80082dc:	0018      	movs	r0, r3
 80082de:	f000 fd53 	bl	8008d88 <USBD_CtlError>
      break;
 80082e2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	0018      	movs	r0, r3
 80082e8:	46bd      	mov	sp, r7
 80082ea:	b004      	add	sp, #16
 80082ec:	bdb0      	pop	{r4, r5, r7, pc}

080082ee <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80082ee:	b5b0      	push	{r4, r5, r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082f8:	230f      	movs	r3, #15
 80082fa:	18fb      	adds	r3, r7, r3
 80082fc:	2200      	movs	r2, #0
 80082fe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	889a      	ldrh	r2, [r3, #4]
 8008304:	230e      	movs	r3, #14
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	001a      	movs	r2, r3
 8008310:	2360      	movs	r3, #96	; 0x60
 8008312:	4013      	ands	r3, r2
 8008314:	2b40      	cmp	r3, #64	; 0x40
 8008316:	d006      	beq.n	8008326 <USBD_StdEPReq+0x38>
 8008318:	d900      	bls.n	800831c <USBD_StdEPReq+0x2e>
 800831a:	e190      	b.n	800863e <USBD_StdEPReq+0x350>
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00c      	beq.n	800833a <USBD_StdEPReq+0x4c>
 8008320:	2b20      	cmp	r3, #32
 8008322:	d000      	beq.n	8008326 <USBD_StdEPReq+0x38>
 8008324:	e18b      	b.n	800863e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	23ad      	movs	r3, #173	; 0xad
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	58d3      	ldr	r3, [r2, r3]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	6839      	ldr	r1, [r7, #0]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	0010      	movs	r0, r2
 8008336:	4798      	blx	r3
      break;
 8008338:	e188      	b.n	800864c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	001a      	movs	r2, r3
 8008340:	2360      	movs	r3, #96	; 0x60
 8008342:	4013      	ands	r3, r2
 8008344:	2b20      	cmp	r3, #32
 8008346:	d10f      	bne.n	8008368 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008348:	687a      	ldr	r2, [r7, #4]
 800834a:	23ad      	movs	r3, #173	; 0xad
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	58d3      	ldr	r3, [r2, r3]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	250f      	movs	r5, #15
 8008354:	197c      	adds	r4, r7, r5
 8008356:	6839      	ldr	r1, [r7, #0]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	0010      	movs	r0, r2
 800835c:	4798      	blx	r3
 800835e:	0003      	movs	r3, r0
 8008360:	7023      	strb	r3, [r4, #0]

        return ret;
 8008362:	197b      	adds	r3, r7, r5
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	e174      	b.n	8008652 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b03      	cmp	r3, #3
 800836e:	d007      	beq.n	8008380 <USBD_StdEPReq+0x92>
 8008370:	dd00      	ble.n	8008374 <USBD_StdEPReq+0x86>
 8008372:	e15c      	b.n	800862e <USBD_StdEPReq+0x340>
 8008374:	2b00      	cmp	r3, #0
 8008376:	d100      	bne.n	800837a <USBD_StdEPReq+0x8c>
 8008378:	e092      	b.n	80084a0 <USBD_StdEPReq+0x1b2>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d04b      	beq.n	8008416 <USBD_StdEPReq+0x128>
 800837e:	e156      	b.n	800862e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	23a7      	movs	r3, #167	; 0xa7
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	5cd3      	ldrb	r3, [r2, r3]
 8008388:	2b02      	cmp	r3, #2
 800838a:	d002      	beq.n	8008392 <USBD_StdEPReq+0xa4>
 800838c:	2b03      	cmp	r3, #3
 800838e:	d01d      	beq.n	80083cc <USBD_StdEPReq+0xde>
 8008390:	e039      	b.n	8008406 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008392:	220e      	movs	r2, #14
 8008394:	18bb      	adds	r3, r7, r2
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d010      	beq.n	80083be <USBD_StdEPReq+0xd0>
 800839c:	18bb      	adds	r3, r7, r2
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b80      	cmp	r3, #128	; 0x80
 80083a2:	d00c      	beq.n	80083be <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80083a4:	18bb      	adds	r3, r7, r2
 80083a6:	781a      	ldrb	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	0011      	movs	r1, r2
 80083ac:	0018      	movs	r0, r3
 80083ae:	f001 f934 	bl	800961a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2180      	movs	r1, #128	; 0x80
 80083b6:	0018      	movs	r0, r3
 80083b8:	f001 f92f 	bl	800961a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083bc:	e02a      	b.n	8008414 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	0011      	movs	r1, r2
 80083c4:	0018      	movs	r0, r3
 80083c6:	f000 fcdf 	bl	8008d88 <USBD_CtlError>
              break;
 80083ca:	e023      	b.n	8008414 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	885b      	ldrh	r3, [r3, #2]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d113      	bne.n	80083fc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80083d4:	220e      	movs	r2, #14
 80083d6:	18bb      	adds	r3, r7, r2
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00e      	beq.n	80083fc <USBD_StdEPReq+0x10e>
 80083de:	18bb      	adds	r3, r7, r2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b80      	cmp	r3, #128	; 0x80
 80083e4:	d00a      	beq.n	80083fc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	88db      	ldrh	r3, [r3, #6]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80083ee:	18bb      	adds	r3, r7, r2
 80083f0:	781a      	ldrb	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	0011      	movs	r1, r2
 80083f6:	0018      	movs	r0, r3
 80083f8:	f001 f90f 	bl	800961a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	0018      	movs	r0, r3
 8008400:	f000 fdaa 	bl	8008f58 <USBD_CtlSendStatus>

              break;
 8008404:	e006      	b.n	8008414 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	0011      	movs	r1, r2
 800840c:	0018      	movs	r0, r3
 800840e:	f000 fcbb 	bl	8008d88 <USBD_CtlError>
              break;
 8008412:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008414:	e112      	b.n	800863c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	23a7      	movs	r3, #167	; 0xa7
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	5cd3      	ldrb	r3, [r2, r3]
 800841e:	2b02      	cmp	r3, #2
 8008420:	d002      	beq.n	8008428 <USBD_StdEPReq+0x13a>
 8008422:	2b03      	cmp	r3, #3
 8008424:	d01d      	beq.n	8008462 <USBD_StdEPReq+0x174>
 8008426:	e032      	b.n	800848e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008428:	220e      	movs	r2, #14
 800842a:	18bb      	adds	r3, r7, r2
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d010      	beq.n	8008454 <USBD_StdEPReq+0x166>
 8008432:	18bb      	adds	r3, r7, r2
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b80      	cmp	r3, #128	; 0x80
 8008438:	d00c      	beq.n	8008454 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800843a:	18bb      	adds	r3, r7, r2
 800843c:	781a      	ldrb	r2, [r3, #0]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	0011      	movs	r1, r2
 8008442:	0018      	movs	r0, r3
 8008444:	f001 f8e9 	bl	800961a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2180      	movs	r1, #128	; 0x80
 800844c:	0018      	movs	r0, r3
 800844e:	f001 f8e4 	bl	800961a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008452:	e024      	b.n	800849e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	0011      	movs	r1, r2
 800845a:	0018      	movs	r0, r3
 800845c:	f000 fc94 	bl	8008d88 <USBD_CtlError>
              break;
 8008460:	e01d      	b.n	800849e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	885b      	ldrh	r3, [r3, #2]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d118      	bne.n	800849c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800846a:	210e      	movs	r1, #14
 800846c:	187b      	adds	r3, r7, r1
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	227f      	movs	r2, #127	; 0x7f
 8008472:	4013      	ands	r3, r2
 8008474:	d006      	beq.n	8008484 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008476:	187b      	adds	r3, r7, r1
 8008478:	781a      	ldrb	r2, [r3, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	0011      	movs	r1, r2
 800847e:	0018      	movs	r0, r3
 8008480:	f001 f8f6 	bl	8009670 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	0018      	movs	r0, r3
 8008488:	f000 fd66 	bl	8008f58 <USBD_CtlSendStatus>
              }
              break;
 800848c:	e006      	b.n	800849c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800848e:	683a      	ldr	r2, [r7, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	0011      	movs	r1, r2
 8008494:	0018      	movs	r0, r3
 8008496:	f000 fc77 	bl	8008d88 <USBD_CtlError>
              break;
 800849a:	e000      	b.n	800849e <USBD_StdEPReq+0x1b0>
              break;
 800849c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800849e:	e0cd      	b.n	800863c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	23a7      	movs	r3, #167	; 0xa7
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	5cd3      	ldrb	r3, [r2, r3]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d002      	beq.n	80084b2 <USBD_StdEPReq+0x1c4>
 80084ac:	2b03      	cmp	r3, #3
 80084ae:	d03c      	beq.n	800852a <USBD_StdEPReq+0x23c>
 80084b0:	e0b5      	b.n	800861e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b2:	220e      	movs	r2, #14
 80084b4:	18bb      	adds	r3, r7, r2
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <USBD_StdEPReq+0x1e4>
 80084bc:	18bb      	adds	r3, r7, r2
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	2b80      	cmp	r3, #128	; 0x80
 80084c2:	d006      	beq.n	80084d2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	0011      	movs	r1, r2
 80084ca:	0018      	movs	r0, r3
 80084cc:	f000 fc5c 	bl	8008d88 <USBD_CtlError>
                break;
 80084d0:	e0ac      	b.n	800862c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d2:	220e      	movs	r2, #14
 80084d4:	18bb      	adds	r3, r7, r2
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	b25b      	sxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	da0c      	bge.n	80084f8 <USBD_StdEPReq+0x20a>
 80084de:	18bb      	adds	r3, r7, r2
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	227f      	movs	r2, #127	; 0x7f
 80084e4:	401a      	ands	r2, r3
 80084e6:	0013      	movs	r3, r2
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	189b      	adds	r3, r3, r2
 80084ec:	009b      	lsls	r3, r3, #2
 80084ee:	3310      	adds	r3, #16
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	18d3      	adds	r3, r2, r3
 80084f4:	3304      	adds	r3, #4
 80084f6:	e00d      	b.n	8008514 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084f8:	230e      	movs	r3, #14
 80084fa:	18fb      	adds	r3, r7, r3
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	227f      	movs	r2, #127	; 0x7f
 8008500:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008502:	0013      	movs	r3, r2
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	189b      	adds	r3, r3, r2
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	3351      	adds	r3, #81	; 0x51
 800850c:	33ff      	adds	r3, #255	; 0xff
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	18d3      	adds	r3, r2, r3
 8008512:	3304      	adds	r3, #4
 8008514:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800851c:	68b9      	ldr	r1, [r7, #8]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2202      	movs	r2, #2
 8008522:	0018      	movs	r0, r3
 8008524:	f000 fcae 	bl	8008e84 <USBD_CtlSendData>
              break;
 8008528:	e080      	b.n	800862c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800852a:	220e      	movs	r2, #14
 800852c:	18bb      	adds	r3, r7, r2
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b25b      	sxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	da14      	bge.n	8008560 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008536:	18bb      	adds	r3, r7, r2
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	220f      	movs	r2, #15
 800853c:	401a      	ands	r2, r3
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	0013      	movs	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	189b      	adds	r3, r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	18cb      	adds	r3, r1, r3
 800854a:	3318      	adds	r3, #24
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d11e      	bne.n	8008590 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008552:	683a      	ldr	r2, [r7, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	0011      	movs	r1, r2
 8008558:	0018      	movs	r0, r3
 800855a:	f000 fc15 	bl	8008d88 <USBD_CtlError>
                  break;
 800855e:	e065      	b.n	800862c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008560:	230e      	movs	r3, #14
 8008562:	18fb      	adds	r3, r7, r3
 8008564:	781b      	ldrb	r3, [r3, #0]
 8008566:	220f      	movs	r2, #15
 8008568:	401a      	ands	r2, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	23ac      	movs	r3, #172	; 0xac
 800856e:	0059      	lsls	r1, r3, #1
 8008570:	0013      	movs	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	189b      	adds	r3, r3, r2
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	18c3      	adds	r3, r0, r3
 800857a:	185b      	adds	r3, r3, r1
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d106      	bne.n	8008590 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008582:	683a      	ldr	r2, [r7, #0]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0011      	movs	r1, r2
 8008588:	0018      	movs	r0, r3
 800858a:	f000 fbfd 	bl	8008d88 <USBD_CtlError>
                  break;
 800858e:	e04d      	b.n	800862c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008590:	220e      	movs	r2, #14
 8008592:	18bb      	adds	r3, r7, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	b25b      	sxtb	r3, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	da0c      	bge.n	80085b6 <USBD_StdEPReq+0x2c8>
 800859c:	18bb      	adds	r3, r7, r2
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	227f      	movs	r2, #127	; 0x7f
 80085a2:	401a      	ands	r2, r3
 80085a4:	0013      	movs	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	189b      	adds	r3, r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	3310      	adds	r3, #16
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	18d3      	adds	r3, r2, r3
 80085b2:	3304      	adds	r3, #4
 80085b4:	e00d      	b.n	80085d2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085b6:	230e      	movs	r3, #14
 80085b8:	18fb      	adds	r3, r7, r3
 80085ba:	781b      	ldrb	r3, [r3, #0]
 80085bc:	227f      	movs	r2, #127	; 0x7f
 80085be:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c0:	0013      	movs	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	189b      	adds	r3, r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	3351      	adds	r3, #81	; 0x51
 80085ca:	33ff      	adds	r3, #255	; 0xff
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	18d3      	adds	r3, r2, r3
 80085d0:	3304      	adds	r3, #4
 80085d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085d4:	220e      	movs	r2, #14
 80085d6:	18bb      	adds	r3, r7, r2
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <USBD_StdEPReq+0x2f8>
 80085de:	18bb      	adds	r3, r7, r2
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	2b80      	cmp	r3, #128	; 0x80
 80085e4:	d103      	bne.n	80085ee <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	e010      	b.n	8008610 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085ee:	230e      	movs	r3, #14
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	781a      	ldrb	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f001 f864 	bl	80096c6 <USBD_LL_IsStallEP>
 80085fe:	1e03      	subs	r3, r0, #0
 8008600:	d003      	beq.n	800860a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	2201      	movs	r2, #1
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	e002      	b.n	8008610 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008610:	68b9      	ldr	r1, [r7, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	0018      	movs	r0, r3
 8008618:	f000 fc34 	bl	8008e84 <USBD_CtlSendData>
              break;
 800861c:	e006      	b.n	800862c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800861e:	683a      	ldr	r2, [r7, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	0011      	movs	r1, r2
 8008624:	0018      	movs	r0, r3
 8008626:	f000 fbaf 	bl	8008d88 <USBD_CtlError>
              break;
 800862a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800862c:	e006      	b.n	800863c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	0011      	movs	r1, r2
 8008634:	0018      	movs	r0, r3
 8008636:	f000 fba7 	bl	8008d88 <USBD_CtlError>
          break;
 800863a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800863c:	e006      	b.n	800864c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	0011      	movs	r1, r2
 8008644:	0018      	movs	r0, r3
 8008646:	f000 fb9f 	bl	8008d88 <USBD_CtlError>
      break;
 800864a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800864c:	230f      	movs	r3, #15
 800864e:	18fb      	adds	r3, r7, r3
 8008650:	781b      	ldrb	r3, [r3, #0]
}
 8008652:	0018      	movs	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	b004      	add	sp, #16
 8008658:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800865c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008666:	2308      	movs	r3, #8
 8008668:	18fb      	adds	r3, r7, r3
 800866a:	2200      	movs	r2, #0
 800866c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800866e:	2300      	movs	r3, #0
 8008670:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008672:	230b      	movs	r3, #11
 8008674:	18fb      	adds	r3, r7, r3
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	885b      	ldrh	r3, [r3, #2]
 800867e:	0a1b      	lsrs	r3, r3, #8
 8008680:	b29b      	uxth	r3, r3
 8008682:	2b07      	cmp	r3, #7
 8008684:	d900      	bls.n	8008688 <USBD_GetDescriptor+0x2c>
 8008686:	e159      	b.n	800893c <USBD_GetDescriptor+0x2e0>
 8008688:	009a      	lsls	r2, r3, #2
 800868a:	4bcb      	ldr	r3, [pc, #812]	; (80089b8 <USBD_GetDescriptor+0x35c>)
 800868c:	18d3      	adds	r3, r2, r3
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	23ac      	movs	r3, #172	; 0xac
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	58d3      	ldr	r3, [r2, r3]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	7c12      	ldrb	r2, [r2, #16]
 80086a0:	2108      	movs	r1, #8
 80086a2:	1879      	adds	r1, r7, r1
 80086a4:	0010      	movs	r0, r2
 80086a6:	4798      	blx	r3
 80086a8:	0003      	movs	r3, r0
 80086aa:	60fb      	str	r3, [r7, #12]
      break;
 80086ac:	e153      	b.n	8008956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	7c1b      	ldrb	r3, [r3, #16]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d10f      	bne.n	80086d6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	23ad      	movs	r3, #173	; 0xad
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	58d3      	ldr	r3, [r2, r3]
 80086be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c0:	2208      	movs	r2, #8
 80086c2:	18ba      	adds	r2, r7, r2
 80086c4:	0010      	movs	r0, r2
 80086c6:	4798      	blx	r3
 80086c8:	0003      	movs	r3, r0
 80086ca:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	2202      	movs	r2, #2
 80086d2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086d4:	e13f      	b.n	8008956 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	23ad      	movs	r3, #173	; 0xad
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	58d3      	ldr	r3, [r2, r3]
 80086de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e0:	2208      	movs	r2, #8
 80086e2:	18ba      	adds	r2, r7, r2
 80086e4:	0010      	movs	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	0003      	movs	r3, r0
 80086ea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	3301      	adds	r3, #1
 80086f0:	2202      	movs	r2, #2
 80086f2:	701a      	strb	r2, [r3, #0]
      break;
 80086f4:	e12f      	b.n	8008956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	885b      	ldrh	r3, [r3, #2]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b05      	cmp	r3, #5
 80086fe:	d900      	bls.n	8008702 <USBD_GetDescriptor+0xa6>
 8008700:	e0d0      	b.n	80088a4 <USBD_GetDescriptor+0x248>
 8008702:	009a      	lsls	r2, r3, #2
 8008704:	4bad      	ldr	r3, [pc, #692]	; (80089bc <USBD_GetDescriptor+0x360>)
 8008706:	18d3      	adds	r3, r2, r3
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	23ac      	movs	r3, #172	; 0xac
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	58d3      	ldr	r3, [r2, r3]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00d      	beq.n	8008736 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	23ac      	movs	r3, #172	; 0xac
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	58d3      	ldr	r3, [r2, r3]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	7c12      	ldrb	r2, [r2, #16]
 8008728:	2108      	movs	r1, #8
 800872a:	1879      	adds	r1, r7, r1
 800872c:	0010      	movs	r0, r2
 800872e:	4798      	blx	r3
 8008730:	0003      	movs	r3, r0
 8008732:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008734:	e0c3      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	0011      	movs	r1, r2
 800873c:	0018      	movs	r0, r3
 800873e:	f000 fb23 	bl	8008d88 <USBD_CtlError>
            err++;
 8008742:	210b      	movs	r1, #11
 8008744:	187b      	adds	r3, r7, r1
 8008746:	781a      	ldrb	r2, [r3, #0]
 8008748:	187b      	adds	r3, r7, r1
 800874a:	3201      	adds	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]
          break;
 800874e:	e0b6      	b.n	80088be <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	23ac      	movs	r3, #172	; 0xac
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	58d3      	ldr	r3, [r2, r3]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00d      	beq.n	800877a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	23ac      	movs	r3, #172	; 0xac
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	58d3      	ldr	r3, [r2, r3]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	7c12      	ldrb	r2, [r2, #16]
 800876c:	2108      	movs	r1, #8
 800876e:	1879      	adds	r1, r7, r1
 8008770:	0010      	movs	r0, r2
 8008772:	4798      	blx	r3
 8008774:	0003      	movs	r3, r0
 8008776:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008778:	e0a1      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	0011      	movs	r1, r2
 8008780:	0018      	movs	r0, r3
 8008782:	f000 fb01 	bl	8008d88 <USBD_CtlError>
            err++;
 8008786:	210b      	movs	r1, #11
 8008788:	187b      	adds	r3, r7, r1
 800878a:	781a      	ldrb	r2, [r3, #0]
 800878c:	187b      	adds	r3, r7, r1
 800878e:	3201      	adds	r2, #1
 8008790:	701a      	strb	r2, [r3, #0]
          break;
 8008792:	e094      	b.n	80088be <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	23ac      	movs	r3, #172	; 0xac
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	58d3      	ldr	r3, [r2, r3]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00d      	beq.n	80087be <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	23ac      	movs	r3, #172	; 0xac
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	58d3      	ldr	r3, [r2, r3]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7c12      	ldrb	r2, [r2, #16]
 80087b0:	2108      	movs	r1, #8
 80087b2:	1879      	adds	r1, r7, r1
 80087b4:	0010      	movs	r0, r2
 80087b6:	4798      	blx	r3
 80087b8:	0003      	movs	r3, r0
 80087ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087bc:	e07f      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80087be:	683a      	ldr	r2, [r7, #0]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	0011      	movs	r1, r2
 80087c4:	0018      	movs	r0, r3
 80087c6:	f000 fadf 	bl	8008d88 <USBD_CtlError>
            err++;
 80087ca:	210b      	movs	r1, #11
 80087cc:	187b      	adds	r3, r7, r1
 80087ce:	781a      	ldrb	r2, [r3, #0]
 80087d0:	187b      	adds	r3, r7, r1
 80087d2:	3201      	adds	r2, #1
 80087d4:	701a      	strb	r2, [r3, #0]
          break;
 80087d6:	e072      	b.n	80088be <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	23ac      	movs	r3, #172	; 0xac
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	58d3      	ldr	r3, [r2, r3]
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	23ac      	movs	r3, #172	; 0xac
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	58d3      	ldr	r3, [r2, r3]
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	7c12      	ldrb	r2, [r2, #16]
 80087f4:	2108      	movs	r1, #8
 80087f6:	1879      	adds	r1, r7, r1
 80087f8:	0010      	movs	r0, r2
 80087fa:	4798      	blx	r3
 80087fc:	0003      	movs	r3, r0
 80087fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008800:	e05d      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008802:	683a      	ldr	r2, [r7, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	0011      	movs	r1, r2
 8008808:	0018      	movs	r0, r3
 800880a:	f000 fabd 	bl	8008d88 <USBD_CtlError>
            err++;
 800880e:	210b      	movs	r1, #11
 8008810:	187b      	adds	r3, r7, r1
 8008812:	781a      	ldrb	r2, [r3, #0]
 8008814:	187b      	adds	r3, r7, r1
 8008816:	3201      	adds	r2, #1
 8008818:	701a      	strb	r2, [r3, #0]
          break;
 800881a:	e050      	b.n	80088be <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	23ac      	movs	r3, #172	; 0xac
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	58d3      	ldr	r3, [r2, r3]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00d      	beq.n	8008846 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	23ac      	movs	r3, #172	; 0xac
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	58d3      	ldr	r3, [r2, r3]
 8008832:	695b      	ldr	r3, [r3, #20]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	7c12      	ldrb	r2, [r2, #16]
 8008838:	2108      	movs	r1, #8
 800883a:	1879      	adds	r1, r7, r1
 800883c:	0010      	movs	r0, r2
 800883e:	4798      	blx	r3
 8008840:	0003      	movs	r3, r0
 8008842:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008844:	e03b      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008846:	683a      	ldr	r2, [r7, #0]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	0011      	movs	r1, r2
 800884c:	0018      	movs	r0, r3
 800884e:	f000 fa9b 	bl	8008d88 <USBD_CtlError>
            err++;
 8008852:	210b      	movs	r1, #11
 8008854:	187b      	adds	r3, r7, r1
 8008856:	781a      	ldrb	r2, [r3, #0]
 8008858:	187b      	adds	r3, r7, r1
 800885a:	3201      	adds	r2, #1
 800885c:	701a      	strb	r2, [r3, #0]
          break;
 800885e:	e02e      	b.n	80088be <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	23ac      	movs	r3, #172	; 0xac
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	58d3      	ldr	r3, [r2, r3]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00d      	beq.n	800888a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	23ac      	movs	r3, #172	; 0xac
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	58d3      	ldr	r3, [r2, r3]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	7c12      	ldrb	r2, [r2, #16]
 800887c:	2108      	movs	r1, #8
 800887e:	1879      	adds	r1, r7, r1
 8008880:	0010      	movs	r0, r2
 8008882:	4798      	blx	r3
 8008884:	0003      	movs	r3, r0
 8008886:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008888:	e019      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	0011      	movs	r1, r2
 8008890:	0018      	movs	r0, r3
 8008892:	f000 fa79 	bl	8008d88 <USBD_CtlError>
            err++;
 8008896:	210b      	movs	r1, #11
 8008898:	187b      	adds	r3, r7, r1
 800889a:	781a      	ldrb	r2, [r3, #0]
 800889c:	187b      	adds	r3, r7, r1
 800889e:	3201      	adds	r2, #1
 80088a0:	701a      	strb	r2, [r3, #0]
          break;
 80088a2:	e00c      	b.n	80088be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	0011      	movs	r1, r2
 80088aa:	0018      	movs	r0, r3
 80088ac:	f000 fa6c 	bl	8008d88 <USBD_CtlError>
          err++;
 80088b0:	210b      	movs	r1, #11
 80088b2:	187b      	adds	r3, r7, r1
 80088b4:	781a      	ldrb	r2, [r3, #0]
 80088b6:	187b      	adds	r3, r7, r1
 80088b8:	3201      	adds	r2, #1
 80088ba:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80088bc:	e04b      	b.n	8008956 <USBD_GetDescriptor+0x2fa>
 80088be:	e04a      	b.n	8008956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	7c1b      	ldrb	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10b      	bne.n	80088e0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	23ad      	movs	r3, #173	; 0xad
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	58d3      	ldr	r3, [r2, r3]
 80088d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d2:	2208      	movs	r2, #8
 80088d4:	18ba      	adds	r2, r7, r2
 80088d6:	0010      	movs	r0, r2
 80088d8:	4798      	blx	r3
 80088da:	0003      	movs	r3, r0
 80088dc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088de:	e03a      	b.n	8008956 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80088e0:	683a      	ldr	r2, [r7, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	0011      	movs	r1, r2
 80088e6:	0018      	movs	r0, r3
 80088e8:	f000 fa4e 	bl	8008d88 <USBD_CtlError>
        err++;
 80088ec:	210b      	movs	r1, #11
 80088ee:	187b      	adds	r3, r7, r1
 80088f0:	781a      	ldrb	r2, [r3, #0]
 80088f2:	187b      	adds	r3, r7, r1
 80088f4:	3201      	adds	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
      break;
 80088f8:	e02d      	b.n	8008956 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	7c1b      	ldrb	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10f      	bne.n	8008922 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	23ad      	movs	r3, #173	; 0xad
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	58d3      	ldr	r3, [r2, r3]
 800890a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800890c:	2208      	movs	r2, #8
 800890e:	18ba      	adds	r2, r7, r2
 8008910:	0010      	movs	r0, r2
 8008912:	4798      	blx	r3
 8008914:	0003      	movs	r3, r0
 8008916:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	2207      	movs	r2, #7
 800891e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008920:	e019      	b.n	8008956 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008922:	683a      	ldr	r2, [r7, #0]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	0011      	movs	r1, r2
 8008928:	0018      	movs	r0, r3
 800892a:	f000 fa2d 	bl	8008d88 <USBD_CtlError>
        err++;
 800892e:	210b      	movs	r1, #11
 8008930:	187b      	adds	r3, r7, r1
 8008932:	781a      	ldrb	r2, [r3, #0]
 8008934:	187b      	adds	r3, r7, r1
 8008936:	3201      	adds	r2, #1
 8008938:	701a      	strb	r2, [r3, #0]
      break;
 800893a:	e00c      	b.n	8008956 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800893c:	683a      	ldr	r2, [r7, #0]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	0011      	movs	r1, r2
 8008942:	0018      	movs	r0, r3
 8008944:	f000 fa20 	bl	8008d88 <USBD_CtlError>
      err++;
 8008948:	210b      	movs	r1, #11
 800894a:	187b      	adds	r3, r7, r1
 800894c:	781a      	ldrb	r2, [r3, #0]
 800894e:	187b      	adds	r3, r7, r1
 8008950:	3201      	adds	r2, #1
 8008952:	701a      	strb	r2, [r3, #0]
      break;
 8008954:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008956:	230b      	movs	r3, #11
 8008958:	18fb      	adds	r3, r7, r3
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d127      	bne.n	80089b0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008960:	2108      	movs	r1, #8
 8008962:	187b      	adds	r3, r7, r1
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d019      	beq.n	800899e <USBD_GetDescriptor+0x342>
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	88db      	ldrh	r3, [r3, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d015      	beq.n	800899e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88da      	ldrh	r2, [r3, #6]
 8008976:	187b      	adds	r3, r7, r1
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	1c18      	adds	r0, r3, #0
 800897c:	1c11      	adds	r1, r2, #0
 800897e:	b28a      	uxth	r2, r1
 8008980:	b283      	uxth	r3, r0
 8008982:	429a      	cmp	r2, r3
 8008984:	d900      	bls.n	8008988 <USBD_GetDescriptor+0x32c>
 8008986:	1c01      	adds	r1, r0, #0
 8008988:	b28a      	uxth	r2, r1
 800898a:	2108      	movs	r1, #8
 800898c:	187b      	adds	r3, r7, r1
 800898e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008990:	187b      	adds	r3, r7, r1
 8008992:	881a      	ldrh	r2, [r3, #0]
 8008994:	68f9      	ldr	r1, [r7, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	0018      	movs	r0, r3
 800899a:	f000 fa73 	bl	8008e84 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	88db      	ldrh	r3, [r3, #6]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d105      	bne.n	80089b2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	0018      	movs	r0, r3
 80089aa:	f000 fad5 	bl	8008f58 <USBD_CtlSendStatus>
 80089ae:	e000      	b.n	80089b2 <USBD_GetDescriptor+0x356>
    return;
 80089b0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b004      	add	sp, #16
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	08009c38 	.word	0x08009c38
 80089bc:	08009c58 	.word	0x08009c58

080089c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80089c0:	b590      	push	{r4, r7, lr}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	889b      	ldrh	r3, [r3, #4]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d13d      	bne.n	8008a4e <USBD_SetAddress+0x8e>
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	88db      	ldrh	r3, [r3, #6]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d139      	bne.n	8008a4e <USBD_SetAddress+0x8e>
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	2b7f      	cmp	r3, #127	; 0x7f
 80089e0:	d835      	bhi.n	8008a4e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	885b      	ldrh	r3, [r3, #2]
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	230f      	movs	r3, #15
 80089ea:	18fb      	adds	r3, r7, r3
 80089ec:	217f      	movs	r1, #127	; 0x7f
 80089ee:	400a      	ands	r2, r1
 80089f0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	23a7      	movs	r3, #167	; 0xa7
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	5cd3      	ldrb	r3, [r2, r3]
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d106      	bne.n	8008a0c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	0011      	movs	r1, r2
 8008a04:	0018      	movs	r0, r3
 8008a06:	f000 f9bf 	bl	8008d88 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a0a:	e027      	b.n	8008a5c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	240f      	movs	r4, #15
 8008a10:	193a      	adds	r2, r7, r4
 8008a12:	4914      	ldr	r1, [pc, #80]	; (8008a64 <USBD_SetAddress+0xa4>)
 8008a14:	7812      	ldrb	r2, [r2, #0]
 8008a16:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a18:	193b      	adds	r3, r7, r4
 8008a1a:	781a      	ldrb	r2, [r3, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	0011      	movs	r1, r2
 8008a20:	0018      	movs	r0, r3
 8008a22:	f000 fe81 	bl	8009728 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f000 fa95 	bl	8008f58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a2e:	193b      	adds	r3, r7, r4
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d005      	beq.n	8008a42 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	23a7      	movs	r3, #167	; 0xa7
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	2102      	movs	r1, #2
 8008a3e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a40:	e00c      	b.n	8008a5c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	23a7      	movs	r3, #167	; 0xa7
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	2101      	movs	r1, #1
 8008a4a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a4c:	e006      	b.n	8008a5c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	0011      	movs	r1, r2
 8008a54:	0018      	movs	r0, r3
 8008a56:	f000 f997 	bl	8008d88 <USBD_CtlError>
  }
}
 8008a5a:	46c0      	nop			; (mov r8, r8)
 8008a5c:	46c0      	nop			; (mov r8, r8)
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	b005      	add	sp, #20
 8008a62:	bd90      	pop	{r4, r7, pc}
 8008a64:	0000029e 	.word	0x0000029e

08008a68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	885b      	ldrh	r3, [r3, #2]
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	4b4c      	ldr	r3, [pc, #304]	; (8008bac <USBD_SetConfig+0x144>)
 8008a7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a7c:	4b4b      	ldr	r3, [pc, #300]	; (8008bac <USBD_SetConfig+0x144>)
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	2b01      	cmp	r3, #1
 8008a82:	d906      	bls.n	8008a92 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	0011      	movs	r1, r2
 8008a8a:	0018      	movs	r0, r3
 8008a8c:	f000 f97c 	bl	8008d88 <USBD_CtlError>
 8008a90:	e088      	b.n	8008ba4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	23a7      	movs	r3, #167	; 0xa7
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	5cd3      	ldrb	r3, [r2, r3]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d002      	beq.n	8008aa4 <USBD_SetConfig+0x3c>
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d029      	beq.n	8008af6 <USBD_SetConfig+0x8e>
 8008aa2:	e071      	b.n	8008b88 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008aa4:	4b41      	ldr	r3, [pc, #260]	; (8008bac <USBD_SetConfig+0x144>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d01f      	beq.n	8008aec <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008aac:	4b3f      	ldr	r3, [pc, #252]	; (8008bac <USBD_SetConfig+0x144>)
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	23a7      	movs	r3, #167	; 0xa7
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	2103      	movs	r1, #3
 8008abe:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008ac0:	4b3a      	ldr	r3, [pc, #232]	; (8008bac <USBD_SetConfig+0x144>)
 8008ac2:	781a      	ldrb	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	0011      	movs	r1, r2
 8008ac8:	0018      	movs	r0, r3
 8008aca:	f7ff f8c5 	bl	8007c58 <USBD_SetClassConfig>
 8008ace:	0003      	movs	r3, r0
 8008ad0:	2b02      	cmp	r3, #2
 8008ad2:	d106      	bne.n	8008ae2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	0011      	movs	r1, r2
 8008ada:	0018      	movs	r0, r3
 8008adc:	f000 f954 	bl	8008d88 <USBD_CtlError>
            return;
 8008ae0:	e060      	b.n	8008ba4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f000 fa37 	bl	8008f58 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008aea:	e05b      	b.n	8008ba4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	0018      	movs	r0, r3
 8008af0:	f000 fa32 	bl	8008f58 <USBD_CtlSendStatus>
        break;
 8008af4:	e056      	b.n	8008ba4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008af6:	4b2d      	ldr	r3, [pc, #180]	; (8008bac <USBD_SetConfig+0x144>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d115      	bne.n	8008b2a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	23a7      	movs	r3, #167	; 0xa7
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	2102      	movs	r1, #2
 8008b06:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008b08:	4b28      	ldr	r3, [pc, #160]	; (8008bac <USBD_SetConfig+0x144>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	001a      	movs	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008b12:	4b26      	ldr	r3, [pc, #152]	; (8008bac <USBD_SetConfig+0x144>)
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	0011      	movs	r1, r2
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	f7ff f8c3 	bl	8007ca6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	0018      	movs	r0, r3
 8008b24:	f000 fa18 	bl	8008f58 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008b28:	e03c      	b.n	8008ba4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008b2a:	4b20      	ldr	r3, [pc, #128]	; (8008bac <USBD_SetConfig+0x144>)
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	001a      	movs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d022      	beq.n	8008b7e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	b2da      	uxtb	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	0011      	movs	r1, r2
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff f8af 	bl	8007ca6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b48:	4b18      	ldr	r3, [pc, #96]	; (8008bac <USBD_SetConfig+0x144>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	001a      	movs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b52:	4b16      	ldr	r3, [pc, #88]	; (8008bac <USBD_SetConfig+0x144>)
 8008b54:	781a      	ldrb	r2, [r3, #0]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	0011      	movs	r1, r2
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f7ff f87c 	bl	8007c58 <USBD_SetClassConfig>
 8008b60:	0003      	movs	r3, r0
 8008b62:	2b02      	cmp	r3, #2
 8008b64:	d106      	bne.n	8008b74 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	0011      	movs	r1, r2
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	f000 f90b 	bl	8008d88 <USBD_CtlError>
            return;
 8008b72:	e017      	b.n	8008ba4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	0018      	movs	r0, r3
 8008b78:	f000 f9ee 	bl	8008f58 <USBD_CtlSendStatus>
        break;
 8008b7c:	e012      	b.n	8008ba4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	0018      	movs	r0, r3
 8008b82:	f000 f9e9 	bl	8008f58 <USBD_CtlSendStatus>
        break;
 8008b86:	e00d      	b.n	8008ba4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	0011      	movs	r1, r2
 8008b8e:	0018      	movs	r0, r3
 8008b90:	f000 f8fa 	bl	8008d88 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b94:	4b05      	ldr	r3, [pc, #20]	; (8008bac <USBD_SetConfig+0x144>)
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	0011      	movs	r1, r2
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f7ff f882 	bl	8007ca6 <USBD_ClrClassConfig>
        break;
 8008ba2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	b002      	add	sp, #8
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	46c0      	nop			; (mov r8, r8)
 8008bac:	2000021c 	.word	0x2000021c

08008bb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	88db      	ldrh	r3, [r3, #6]
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d006      	beq.n	8008bd0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008bc2:	683a      	ldr	r2, [r7, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	0011      	movs	r1, r2
 8008bc8:	0018      	movs	r0, r3
 8008bca:	f000 f8dd 	bl	8008d88 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008bce:	e026      	b.n	8008c1e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	23a7      	movs	r3, #167	; 0xa7
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	5cd3      	ldrb	r3, [r2, r3]
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	dc02      	bgt.n	8008be2 <USBD_GetConfig+0x32>
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dc03      	bgt.n	8008be8 <USBD_GetConfig+0x38>
 8008be0:	e016      	b.n	8008c10 <USBD_GetConfig+0x60>
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d00c      	beq.n	8008c00 <USBD_GetConfig+0x50>
 8008be6:	e013      	b.n	8008c10 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	0019      	movs	r1, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	0018      	movs	r0, r3
 8008bfa:	f000 f943 	bl	8008e84 <USBD_CtlSendData>
        break;
 8008bfe:	e00e      	b.n	8008c1e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	1d19      	adds	r1, r3, #4
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	0018      	movs	r0, r3
 8008c0a:	f000 f93b 	bl	8008e84 <USBD_CtlSendData>
        break;
 8008c0e:	e006      	b.n	8008c1e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	0011      	movs	r1, r2
 8008c16:	0018      	movs	r0, r3
 8008c18:	f000 f8b6 	bl	8008d88 <USBD_CtlError>
        break;
 8008c1c:	46c0      	nop			; (mov r8, r8)
}
 8008c1e:	46c0      	nop			; (mov r8, r8)
 8008c20:	46bd      	mov	sp, r7
 8008c22:	b002      	add	sp, #8
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b082      	sub	sp, #8
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	23a7      	movs	r3, #167	; 0xa7
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	3b01      	subs	r3, #1
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d822      	bhi.n	8008c84 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	88db      	ldrh	r3, [r3, #6]
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d006      	beq.n	8008c54 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	0011      	movs	r1, r2
 8008c4c:	0018      	movs	r0, r3
 8008c4e:	f000 f89b 	bl	8008d88 <USBD_CtlError>
        break;
 8008c52:	e01e      	b.n	8008c92 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	23a9      	movs	r3, #169	; 0xa9
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	58d3      	ldr	r3, [r2, r3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	431a      	orrs	r2, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	330c      	adds	r3, #12
 8008c76:	0019      	movs	r1, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f000 f901 	bl	8008e84 <USBD_CtlSendData>
      break;
 8008c82:	e006      	b.n	8008c92 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	0011      	movs	r1, r2
 8008c8a:	0018      	movs	r0, r3
 8008c8c:	f000 f87c 	bl	8008d88 <USBD_CtlError>
      break;
 8008c90:	46c0      	nop			; (mov r8, r8)
  }
}
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	46bd      	mov	sp, r7
 8008c96:	b002      	add	sp, #8
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	885b      	ldrh	r3, [r3, #2]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d108      	bne.n	8008cbe <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	23a9      	movs	r3, #169	; 0xa9
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f000 f94d 	bl	8008f58 <USBD_CtlSendStatus>
  }
}
 8008cbe:	46c0      	nop			; (mov r8, r8)
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	b002      	add	sp, #8
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	23a7      	movs	r3, #167	; 0xa7
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	5cd3      	ldrb	r3, [r2, r3]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d80d      	bhi.n	8008cfa <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	885b      	ldrh	r3, [r3, #2]
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d110      	bne.n	8008d08 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	23a9      	movs	r3, #169	; 0xa9
 8008cea:	009b      	lsls	r3, r3, #2
 8008cec:	2100      	movs	r1, #0
 8008cee:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	0018      	movs	r0, r3
 8008cf4:	f000 f930 	bl	8008f58 <USBD_CtlSendStatus>
      }
      break;
 8008cf8:	e006      	b.n	8008d08 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008cfa:	683a      	ldr	r2, [r7, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	0011      	movs	r1, r2
 8008d00:	0018      	movs	r0, r3
 8008d02:	f000 f841 	bl	8008d88 <USBD_CtlError>
      break;
 8008d06:	e000      	b.n	8008d0a <USBD_ClrFeature+0x44>
      break;
 8008d08:	46c0      	nop			; (mov r8, r8)
  }
}
 8008d0a:	46c0      	nop			; (mov r8, r8)
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	b002      	add	sp, #8
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	781a      	ldrb	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	785a      	ldrb	r2, [r3, #1]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	3302      	adds	r3, #2
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	3303      	adds	r3, #3
 8008d38:	781b      	ldrb	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	021b      	lsls	r3, r3, #8
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	18d3      	adds	r3, r2, r3
 8008d42:	b29a      	uxth	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	3305      	adds	r3, #5
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	18d3      	adds	r3, r2, r3
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	3306      	adds	r3, #6
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	b29a      	uxth	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	3307      	adds	r3, #7
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	021b      	lsls	r3, r3, #8
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	18d3      	adds	r3, r2, r3
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	80da      	strh	r2, [r3, #6]

}
 8008d80:	46c0      	nop			; (mov r8, r8)
 8008d82:	46bd      	mov	sp, r7
 8008d84:	b002      	add	sp, #8
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2180      	movs	r1, #128	; 0x80
 8008d96:	0018      	movs	r0, r3
 8008d98:	f000 fc3f 	bl	800961a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2100      	movs	r1, #0
 8008da0:	0018      	movs	r0, r3
 8008da2:	f000 fc3a 	bl	800961a <USBD_LL_StallEP>
}
 8008da6:	46c0      	nop			; (mov r8, r8)
 8008da8:	46bd      	mov	sp, r7
 8008daa:	b002      	add	sp, #8
 8008dac:	bd80      	pop	{r7, pc}

08008dae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008dae:	b590      	push	{r4, r7, lr}
 8008db0:	b087      	sub	sp, #28
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008dba:	2417      	movs	r4, #23
 8008dbc:	193b      	adds	r3, r7, r4
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d03c      	beq.n	8008e42 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f000 f83d 	bl	8008e4a <USBD_GetLen>
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	18db      	adds	r3, r3, r3
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008dde:	193b      	adds	r3, r7, r4
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	193a      	adds	r2, r7, r4
 8008de4:	1c59      	adds	r1, r3, #1
 8008de6:	7011      	strb	r1, [r2, #0]
 8008de8:	001a      	movs	r2, r3
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	189b      	adds	r3, r3, r2
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	7812      	ldrb	r2, [r2, #0]
 8008df2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008df4:	193b      	adds	r3, r7, r4
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	193a      	adds	r2, r7, r4
 8008dfa:	1c59      	adds	r1, r3, #1
 8008dfc:	7011      	strb	r1, [r2, #0]
 8008dfe:	001a      	movs	r2, r3
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	189b      	adds	r3, r3, r2
 8008e04:	2203      	movs	r2, #3
 8008e06:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e08:	e017      	b.n	8008e3a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	1c5a      	adds	r2, r3, #1
 8008e0e:	60fa      	str	r2, [r7, #12]
 8008e10:	2417      	movs	r4, #23
 8008e12:	193a      	adds	r2, r7, r4
 8008e14:	7812      	ldrb	r2, [r2, #0]
 8008e16:	1939      	adds	r1, r7, r4
 8008e18:	1c50      	adds	r0, r2, #1
 8008e1a:	7008      	strb	r0, [r1, #0]
 8008e1c:	0011      	movs	r1, r2
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	1852      	adds	r2, r2, r1
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008e26:	193b      	adds	r3, r7, r4
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	193a      	adds	r2, r7, r4
 8008e2c:	1c59      	adds	r1, r3, #1
 8008e2e:	7011      	strb	r1, [r2, #0]
 8008e30:	001a      	movs	r2, r3
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	189b      	adds	r3, r3, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1e3      	bne.n	8008e0a <USBD_GetString+0x5c>
    }
  }
}
 8008e42:	46c0      	nop			; (mov r8, r8)
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b007      	add	sp, #28
 8008e48:	bd90      	pop	{r4, r7, pc}

08008e4a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e52:	230f      	movs	r3, #15
 8008e54:	18fb      	adds	r3, r7, r3
 8008e56:	2200      	movs	r2, #0
 8008e58:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008e5a:	e008      	b.n	8008e6e <USBD_GetLen+0x24>
  {
    len++;
 8008e5c:	210f      	movs	r1, #15
 8008e5e:	187b      	adds	r3, r7, r1
 8008e60:	781a      	ldrb	r2, [r3, #0]
 8008e62:	187b      	adds	r3, r7, r1
 8008e64:	3201      	adds	r2, #1
 8008e66:	701a      	strb	r2, [r3, #0]
    buf++;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d1f2      	bne.n	8008e5c <USBD_GetLen+0x12>
  }

  return len;
 8008e76:	230f      	movs	r3, #15
 8008e78:	18fb      	adds	r3, r7, r3
 8008e7a:	781b      	ldrb	r3, [r3, #0]
}
 8008e7c:	0018      	movs	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	b004      	add	sp, #16
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	1dbb      	adds	r3, r7, #6
 8008e90:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	23a5      	movs	r3, #165	; 0xa5
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	2102      	movs	r1, #2
 8008e9a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008e9c:	1dbb      	adds	r3, r7, #6
 8008e9e:	881a      	ldrh	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008ea4:	1dbb      	adds	r3, r7, #6
 8008ea6:	881a      	ldrh	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008eac:	1dbb      	adds	r3, r7, #6
 8008eae:	881b      	ldrh	r3, [r3, #0]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	f000 fc62 	bl	800977e <USBD_LL_Transmit>

  return USBD_OK;
 8008eba:	2300      	movs	r3, #0
}
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	b004      	add	sp, #16
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	1dbb      	adds	r3, r7, #6
 8008ed0:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ed2:	1dbb      	adds	r3, r7, #6
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	68ba      	ldr	r2, [r7, #8]
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	2100      	movs	r1, #0
 8008edc:	f000 fc4f 	bl	800977e <USBD_LL_Transmit>

  return USBD_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	0018      	movs	r0, r3
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	b004      	add	sp, #16
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b084      	sub	sp, #16
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	60f8      	str	r0, [r7, #12]
 8008ef2:	60b9      	str	r1, [r7, #8]
 8008ef4:	1dbb      	adds	r3, r7, #6
 8008ef6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	23a5      	movs	r3, #165	; 0xa5
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	2103      	movs	r1, #3
 8008f00:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008f02:	1dbb      	adds	r3, r7, #6
 8008f04:	8819      	ldrh	r1, [r3, #0]
 8008f06:	68fa      	ldr	r2, [r7, #12]
 8008f08:	23ae      	movs	r3, #174	; 0xae
 8008f0a:	005b      	lsls	r3, r3, #1
 8008f0c:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008f0e:	1dbb      	adds	r3, r7, #6
 8008f10:	8819      	ldrh	r1, [r3, #0]
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	23b0      	movs	r3, #176	; 0xb0
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f1a:	1dbb      	adds	r3, r7, #6
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	2100      	movs	r1, #0
 8008f24:	f000 fc62 	bl	80097ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f28:	2300      	movs	r3, #0
}
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	b004      	add	sp, #16
 8008f30:	bd80      	pop	{r7, pc}

08008f32 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	60f8      	str	r0, [r7, #12]
 8008f3a:	60b9      	str	r1, [r7, #8]
 8008f3c:	1dbb      	adds	r3, r7, #6
 8008f3e:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f40:	1dbb      	adds	r3, r7, #6
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	f000 fc4f 	bl	80097ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	0018      	movs	r0, r3
 8008f52:	46bd      	mov	sp, r7
 8008f54:	b004      	add	sp, #16
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b082      	sub	sp, #8
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	23a5      	movs	r3, #165	; 0xa5
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	2104      	movs	r1, #4
 8008f68:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	f000 fc04 	bl	800977e <USBD_LL_Transmit>

  return USBD_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	0018      	movs	r0, r3
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	b002      	add	sp, #8
 8008f7e:	bd80      	pop	{r7, pc}

08008f80 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	23a5      	movs	r3, #165	; 0xa5
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	2105      	movs	r1, #5
 8008f90:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	2300      	movs	r3, #0
 8008f96:	2200      	movs	r2, #0
 8008f98:	2100      	movs	r1, #0
 8008f9a:	f000 fc27 	bl	80097ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	b002      	add	sp, #8
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fac:	4914      	ldr	r1, [pc, #80]	; (8009000 <MX_USB_DEVICE_Init+0x58>)
 8008fae:	4b15      	ldr	r3, [pc, #84]	; (8009004 <MX_USB_DEVICE_Init+0x5c>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	0018      	movs	r0, r3
 8008fb4:	f7fe fde9 	bl	8007b8a <USBD_Init>
 8008fb8:	1e03      	subs	r3, r0, #0
 8008fba:	d001      	beq.n	8008fc0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008fbc:	f7f7 ff5c 	bl	8000e78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008fc0:	4a11      	ldr	r2, [pc, #68]	; (8009008 <MX_USB_DEVICE_Init+0x60>)
 8008fc2:	4b10      	ldr	r3, [pc, #64]	; (8009004 <MX_USB_DEVICE_Init+0x5c>)
 8008fc4:	0011      	movs	r1, r2
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f7fe fe10 	bl	8007bec <USBD_RegisterClass>
 8008fcc:	1e03      	subs	r3, r0, #0
 8008fce:	d001      	beq.n	8008fd4 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008fd0:	f7f7 ff52 	bl	8000e78 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008fd4:	4a0d      	ldr	r2, [pc, #52]	; (800900c <MX_USB_DEVICE_Init+0x64>)
 8008fd6:	4b0b      	ldr	r3, [pc, #44]	; (8009004 <MX_USB_DEVICE_Init+0x5c>)
 8008fd8:	0011      	movs	r1, r2
 8008fda:	0018      	movs	r0, r3
 8008fdc:	f7fe fdba 	bl	8007b54 <USBD_CUSTOM_HID_RegisterInterface>
 8008fe0:	1e03      	subs	r3, r0, #0
 8008fe2:	d001      	beq.n	8008fe8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008fe4:	f7f7 ff48 	bl	8000e78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008fe8:	4b06      	ldr	r3, [pc, #24]	; (8009004 <MX_USB_DEVICE_Init+0x5c>)
 8008fea:	0018      	movs	r0, r3
 8008fec:	f7fe fe1e 	bl	8007c2c <USBD_Start>
 8008ff0:	1e03      	subs	r3, r0, #0
 8008ff2:	d001      	beq.n	8008ff8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8008ff4:	f7f7 ff40 	bl	8000e78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ff8:	46c0      	nop			; (mov r8, r8)
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	46c0      	nop			; (mov r8, r8)
 8009000:	20000148 	.word	0x20000148
 8009004:	20000330 	.word	0x20000330
 8009008:	2000000c 	.word	0x2000000c
 800900c:	20000138 	.word	0x20000138

08009010 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009014:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009016:	0018      	movs	r0, r3
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009020:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009022:	0018      	movs	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009030:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b002      	add	sp, #8
 8009038:	bd80      	pop	{r7, pc}
	...

0800903c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
 8009042:	0002      	movs	r2, r0
 8009044:	6039      	str	r1, [r7, #0]
 8009046:	1dfb      	adds	r3, r7, #7
 8009048:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2212      	movs	r2, #18
 800904e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009050:	4b02      	ldr	r3, [pc, #8]	; (800905c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009052:	0018      	movs	r0, r3
 8009054:	46bd      	mov	sp, r7
 8009056:	b002      	add	sp, #8
 8009058:	bd80      	pop	{r7, pc}
 800905a:	46c0      	nop			; (mov r8, r8)
 800905c:	20000164 	.word	0x20000164

08009060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	0002      	movs	r2, r0
 8009068:	6039      	str	r1, [r7, #0]
 800906a:	1dfb      	adds	r3, r7, #7
 800906c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2204      	movs	r2, #4
 8009072:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009076:	0018      	movs	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	b002      	add	sp, #8
 800907c:	bd80      	pop	{r7, pc}
 800907e:	46c0      	nop			; (mov r8, r8)
 8009080:	20000178 	.word	0x20000178

08009084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	0002      	movs	r2, r0
 800908c:	6039      	str	r1, [r7, #0]
 800908e:	1dfb      	adds	r3, r7, #7
 8009090:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009092:	1dfb      	adds	r3, r7, #7
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d106      	bne.n	80090a8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	4908      	ldr	r1, [pc, #32]	; (80090c0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800909e:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x40>)
 80090a0:	0018      	movs	r0, r3
 80090a2:	f7ff fe84 	bl	8008dae <USBD_GetString>
 80090a6:	e005      	b.n	80090b4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	4905      	ldr	r1, [pc, #20]	; (80090c0 <USBD_FS_ProductStrDescriptor+0x3c>)
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <USBD_FS_ProductStrDescriptor+0x40>)
 80090ae:	0018      	movs	r0, r3
 80090b0:	f7ff fe7d 	bl	8008dae <USBD_GetString>
  }
  return USBD_StrDesc;
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80090b6:	0018      	movs	r0, r3
 80090b8:	46bd      	mov	sp, r7
 80090ba:	b002      	add	sp, #8
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	200005f4 	.word	0x200005f4
 80090c4:	08009b14 	.word	0x08009b14

080090c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	0002      	movs	r2, r0
 80090d0:	6039      	str	r1, [r7, #0]
 80090d2:	1dfb      	adds	r3, r7, #7
 80090d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090d6:	683a      	ldr	r2, [r7, #0]
 80090d8:	4904      	ldr	r1, [pc, #16]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090da:	4b05      	ldr	r3, [pc, #20]	; (80090f0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80090dc:	0018      	movs	r0, r3
 80090de:	f7ff fe66 	bl	8008dae <USBD_GetString>
  return USBD_StrDesc;
 80090e2:	4b02      	ldr	r3, [pc, #8]	; (80090ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80090e4:	0018      	movs	r0, r3
 80090e6:	46bd      	mov	sp, r7
 80090e8:	b002      	add	sp, #8
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	200005f4 	.word	0x200005f4
 80090f0:	08009b34 	.word	0x08009b34

080090f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b082      	sub	sp, #8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	0002      	movs	r2, r0
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	1dfb      	adds	r3, r7, #7
 8009100:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	221a      	movs	r2, #26
 8009106:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009108:	f000 f84c 	bl	80091a4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800910e:	0018      	movs	r0, r3
 8009110:	46bd      	mov	sp, r7
 8009112:	b002      	add	sp, #8
 8009114:	bd80      	pop	{r7, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	2000017c 	.word	0x2000017c

0800911c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	0002      	movs	r2, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	1dfb      	adds	r3, r7, #7
 8009128:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800912a:	1dfb      	adds	r3, r7, #7
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d106      	bne.n	8009140 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	4908      	ldr	r1, [pc, #32]	; (8009158 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009136:	4b09      	ldr	r3, [pc, #36]	; (800915c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009138:	0018      	movs	r0, r3
 800913a:	f7ff fe38 	bl	8008dae <USBD_GetString>
 800913e:	e005      	b.n	800914c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009140:	683a      	ldr	r2, [r7, #0]
 8009142:	4905      	ldr	r1, [pc, #20]	; (8009158 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009144:	4b05      	ldr	r3, [pc, #20]	; (800915c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009146:	0018      	movs	r0, r3
 8009148:	f7ff fe31 	bl	8008dae <USBD_GetString>
  }
  return USBD_StrDesc;
 800914c:	4b02      	ldr	r3, [pc, #8]	; (8009158 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800914e:	0018      	movs	r0, r3
 8009150:	46bd      	mov	sp, r7
 8009152:	b002      	add	sp, #8
 8009154:	bd80      	pop	{r7, pc}
 8009156:	46c0      	nop			; (mov r8, r8)
 8009158:	200005f4 	.word	0x200005f4
 800915c:	08009b48 	.word	0x08009b48

08009160 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	0002      	movs	r2, r0
 8009168:	6039      	str	r1, [r7, #0]
 800916a:	1dfb      	adds	r3, r7, #7
 800916c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800916e:	1dfb      	adds	r3, r7, #7
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d106      	bne.n	8009184 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	4908      	ldr	r1, [pc, #32]	; (800919c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800917a:	4b09      	ldr	r3, [pc, #36]	; (80091a0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800917c:	0018      	movs	r0, r3
 800917e:	f7ff fe16 	bl	8008dae <USBD_GetString>
 8009182:	e005      	b.n	8009190 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009184:	683a      	ldr	r2, [r7, #0]
 8009186:	4905      	ldr	r1, [pc, #20]	; (800919c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009188:	4b05      	ldr	r3, [pc, #20]	; (80091a0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800918a:	0018      	movs	r0, r3
 800918c:	f7ff fe0f 	bl	8008dae <USBD_GetString>
  }
  return USBD_StrDesc;
 8009190:	4b02      	ldr	r3, [pc, #8]	; (800919c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009192:	0018      	movs	r0, r3
 8009194:	46bd      	mov	sp, r7
 8009196:	b002      	add	sp, #8
 8009198:	bd80      	pop	{r7, pc}
 800919a:	46c0      	nop			; (mov r8, r8)
 800919c:	200005f4 	.word	0x200005f4
 80091a0:	08009b5c 	.word	0x08009b5c

080091a4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b084      	sub	sp, #16
 80091a8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091aa:	4b10      	ldr	r3, [pc, #64]	; (80091ec <Get_SerialNum+0x48>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091b0:	4b0f      	ldr	r3, [pc, #60]	; (80091f0 <Get_SerialNum+0x4c>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091b6:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <Get_SerialNum+0x50>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	18d3      	adds	r3, r2, r3
 80091c2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d00b      	beq.n	80091e2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091ca:	490b      	ldr	r1, [pc, #44]	; (80091f8 <Get_SerialNum+0x54>)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2208      	movs	r2, #8
 80091d0:	0018      	movs	r0, r3
 80091d2:	f000 f815 	bl	8009200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091d6:	4909      	ldr	r1, [pc, #36]	; (80091fc <Get_SerialNum+0x58>)
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	2204      	movs	r2, #4
 80091dc:	0018      	movs	r0, r3
 80091de:	f000 f80f 	bl	8009200 <IntToUnicode>
  }
}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	46bd      	mov	sp, r7
 80091e6:	b004      	add	sp, #16
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	46c0      	nop			; (mov r8, r8)
 80091ec:	1ff80050 	.word	0x1ff80050
 80091f0:	1ff80054 	.word	0x1ff80054
 80091f4:	1ff80058 	.word	0x1ff80058
 80091f8:	2000017e 	.word	0x2000017e
 80091fc:	2000018e 	.word	0x2000018e

08009200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	1dfb      	adds	r3, r7, #7
 800920c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800920e:	2117      	movs	r1, #23
 8009210:	187b      	adds	r3, r7, r1
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8009216:	187b      	adds	r3, r7, r1
 8009218:	2200      	movs	r2, #0
 800921a:	701a      	strb	r2, [r3, #0]
 800921c:	e02f      	b.n	800927e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	0f1b      	lsrs	r3, r3, #28
 8009222:	2b09      	cmp	r3, #9
 8009224:	d80d      	bhi.n	8009242 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	0f1b      	lsrs	r3, r3, #28
 800922a:	b2da      	uxtb	r2, r3
 800922c:	2317      	movs	r3, #23
 800922e:	18fb      	adds	r3, r7, r3
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	0019      	movs	r1, r3
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	185b      	adds	r3, r3, r1
 800923a:	3230      	adds	r2, #48	; 0x30
 800923c:	b2d2      	uxtb	r2, r2
 800923e:	701a      	strb	r2, [r3, #0]
 8009240:	e00c      	b.n	800925c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	0f1b      	lsrs	r3, r3, #28
 8009246:	b2da      	uxtb	r2, r3
 8009248:	2317      	movs	r3, #23
 800924a:	18fb      	adds	r3, r7, r3
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	005b      	lsls	r3, r3, #1
 8009250:	0019      	movs	r1, r3
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	185b      	adds	r3, r3, r1
 8009256:	3237      	adds	r2, #55	; 0x37
 8009258:	b2d2      	uxtb	r2, r2
 800925a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009262:	2117      	movs	r1, #23
 8009264:	187b      	adds	r3, r7, r1
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	005b      	lsls	r3, r3, #1
 800926a:	3301      	adds	r3, #1
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	18d3      	adds	r3, r2, r3
 8009270:	2200      	movs	r2, #0
 8009272:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009274:	187b      	adds	r3, r7, r1
 8009276:	781a      	ldrb	r2, [r3, #0]
 8009278:	187b      	adds	r3, r7, r1
 800927a:	3201      	adds	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	2317      	movs	r3, #23
 8009280:	18fa      	adds	r2, r7, r3
 8009282:	1dfb      	adds	r3, r7, #7
 8009284:	7812      	ldrb	r2, [r2, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	429a      	cmp	r2, r3
 800928a:	d3c8      	bcc.n	800921e <IntToUnicode+0x1e>
  }
}
 800928c:	46c0      	nop			; (mov r8, r8)
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	46bd      	mov	sp, r7
 8009292:	b006      	add	sp, #24
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a0a      	ldr	r2, [pc, #40]	; (80092d0 <HAL_PCD_MspInit+0x38>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d10e      	bne.n	80092c8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092aa:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <HAL_PCD_MspInit+0x3c>)
 80092ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ae:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <HAL_PCD_MspInit+0x3c>)
 80092b0:	2180      	movs	r1, #128	; 0x80
 80092b2:	0409      	lsls	r1, r1, #16
 80092b4:	430a      	orrs	r2, r1
 80092b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80092b8:	2200      	movs	r2, #0
 80092ba:	2100      	movs	r1, #0
 80092bc:	201f      	movs	r0, #31
 80092be:	f7f8 fd69 	bl	8001d94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80092c2:	201f      	movs	r0, #31
 80092c4:	f7f8 fd7b 	bl	8001dbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092c8:	46c0      	nop			; (mov r8, r8)
 80092ca:	46bd      	mov	sp, r7
 80092cc:	b002      	add	sp, #8
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	40005c00 	.word	0x40005c00
 80092d4:	40021000 	.word	0x40021000

080092d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b082      	sub	sp, #8
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	23bc      	movs	r3, #188	; 0xbc
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	58d2      	ldr	r2, [r2, r3]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	21ac      	movs	r1, #172	; 0xac
 80092ec:	0089      	lsls	r1, r1, #2
 80092ee:	468c      	mov	ip, r1
 80092f0:	4463      	add	r3, ip
 80092f2:	0019      	movs	r1, r3
 80092f4:	0010      	movs	r0, r2
 80092f6:	f7fe fced 	bl	8007cd4 <USBD_LL_SetupStage>
}
 80092fa:	46c0      	nop			; (mov r8, r8)
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b002      	add	sp, #8
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009302:	b590      	push	{r4, r7, lr}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	000a      	movs	r2, r1
 800930c:	1cfb      	adds	r3, r7, #3
 800930e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	23bc      	movs	r3, #188	; 0xbc
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	58d4      	ldr	r4, [r2, r3]
 8009318:	1cfb      	adds	r3, r7, #3
 800931a:	781a      	ldrb	r2, [r3, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	23be      	movs	r3, #190	; 0xbe
 8009320:	0059      	lsls	r1, r3, #1
 8009322:	0013      	movs	r3, r2
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	189b      	adds	r3, r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	18c3      	adds	r3, r0, r3
 800932c:	185b      	adds	r3, r3, r1
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	1cfb      	adds	r3, r7, #3
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	0019      	movs	r1, r3
 8009336:	0020      	movs	r0, r4
 8009338:	f7fe fd2a 	bl	8007d90 <USBD_LL_DataOutStage>
}
 800933c:	46c0      	nop			; (mov r8, r8)
 800933e:	46bd      	mov	sp, r7
 8009340:	b003      	add	sp, #12
 8009342:	bd90      	pop	{r4, r7, pc}

08009344 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	000a      	movs	r2, r1
 800934e:	1cfb      	adds	r3, r7, #3
 8009350:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	23bc      	movs	r3, #188	; 0xbc
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	58d0      	ldr	r0, [r2, r3]
 800935a:	1cfb      	adds	r3, r7, #3
 800935c:	781a      	ldrb	r2, [r3, #0]
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	0013      	movs	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	189b      	adds	r3, r3, r2
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	18cb      	adds	r3, r1, r3
 800936a:	333c      	adds	r3, #60	; 0x3c
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	1cfb      	adds	r3, r7, #3
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	0019      	movs	r1, r3
 8009374:	f7fe fd8e 	bl	8007e94 <USBD_LL_DataInStage>
}
 8009378:	46c0      	nop			; (mov r8, r8)
 800937a:	46bd      	mov	sp, r7
 800937c:	b002      	add	sp, #8
 800937e:	bd80      	pop	{r7, pc}

08009380 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	23bc      	movs	r3, #188	; 0xbc
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	58d3      	ldr	r3, [r2, r3]
 8009390:	0018      	movs	r0, r3
 8009392:	f7fe fec5 	bl	8008120 <USBD_LL_SOF>
}
 8009396:	46c0      	nop			; (mov r8, r8)
 8009398:	46bd      	mov	sp, r7
 800939a:	b002      	add	sp, #8
 800939c:	bd80      	pop	{r7, pc}

0800939e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093a6:	230f      	movs	r3, #15
 80093a8:	18fb      	adds	r3, r7, r3
 80093aa:	2201      	movs	r2, #1
 80093ac:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d001      	beq.n	80093ba <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80093b6:	f7f7 fd5f 	bl	8000e78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	23bc      	movs	r3, #188	; 0xbc
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	58d2      	ldr	r2, [r2, r3]
 80093c2:	230f      	movs	r3, #15
 80093c4:	18fb      	adds	r3, r7, r3
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	0019      	movs	r1, r3
 80093ca:	0010      	movs	r0, r2
 80093cc:	f7fe fe67 	bl	800809e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	23bc      	movs	r3, #188	; 0xbc
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	58d3      	ldr	r3, [r2, r3]
 80093d8:	0018      	movs	r0, r3
 80093da:	f7fe fe18 	bl	800800e <USBD_LL_Reset>
}
 80093de:	46c0      	nop			; (mov r8, r8)
 80093e0:	46bd      	mov	sp, r7
 80093e2:	b004      	add	sp, #16
 80093e4:	bd80      	pop	{r7, pc}
	...

080093e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	23bc      	movs	r3, #188	; 0xbc
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	58d3      	ldr	r3, [r2, r3]
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7fe fe61 	bl	80080c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d005      	beq.n	8009412 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009406:	4b05      	ldr	r3, [pc, #20]	; (800941c <HAL_PCD_SuspendCallback+0x34>)
 8009408:	691a      	ldr	r2, [r3, #16]
 800940a:	4b04      	ldr	r3, [pc, #16]	; (800941c <HAL_PCD_SuspendCallback+0x34>)
 800940c:	2106      	movs	r1, #6
 800940e:	430a      	orrs	r2, r1
 8009410:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	46bd      	mov	sp, r7
 8009416:	b002      	add	sp, #8
 8009418:	bd80      	pop	{r7, pc}
 800941a:	46c0      	nop			; (mov r8, r8)
 800941c:	e000ed00 	.word	0xe000ed00

08009420 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009430:	4b09      	ldr	r3, [pc, #36]	; (8009458 <HAL_PCD_ResumeCallback+0x38>)
 8009432:	691a      	ldr	r2, [r3, #16]
 8009434:	4b08      	ldr	r3, [pc, #32]	; (8009458 <HAL_PCD_ResumeCallback+0x38>)
 8009436:	2106      	movs	r1, #6
 8009438:	438a      	bics	r2, r1
 800943a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800943c:	f000 fa0d 	bl	800985a <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	23bc      	movs	r3, #188	; 0xbc
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	58d3      	ldr	r3, [r2, r3]
 8009448:	0018      	movs	r0, r3
 800944a:	f7fe fe51 	bl	80080f0 <USBD_LL_Resume>
}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	46bd      	mov	sp, r7
 8009452:	b002      	add	sp, #8
 8009454:	bd80      	pop	{r7, pc}
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	e000ed00 	.word	0xe000ed00

0800945c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009464:	4a27      	ldr	r2, [pc, #156]	; (8009504 <USBD_LL_Init+0xa8>)
 8009466:	23bc      	movs	r3, #188	; 0xbc
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800946e:	687a      	ldr	r2, [r7, #4]
 8009470:	23b0      	movs	r3, #176	; 0xb0
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	4923      	ldr	r1, [pc, #140]	; (8009504 <USBD_LL_Init+0xa8>)
 8009476:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009478:	4b22      	ldr	r3, [pc, #136]	; (8009504 <USBD_LL_Init+0xa8>)
 800947a:	4a23      	ldr	r2, [pc, #140]	; (8009508 <USBD_LL_Init+0xac>)
 800947c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800947e:	4b21      	ldr	r3, [pc, #132]	; (8009504 <USBD_LL_Init+0xa8>)
 8009480:	2208      	movs	r2, #8
 8009482:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009484:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <USBD_LL_Init+0xa8>)
 8009486:	2202      	movs	r2, #2
 8009488:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800948a:	4b1e      	ldr	r3, [pc, #120]	; (8009504 <USBD_LL_Init+0xa8>)
 800948c:	2202      	movs	r2, #2
 800948e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009490:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <USBD_LL_Init+0xa8>)
 8009492:	2200      	movs	r2, #0
 8009494:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009496:	4b1b      	ldr	r3, [pc, #108]	; (8009504 <USBD_LL_Init+0xa8>)
 8009498:	2200      	movs	r2, #0
 800949a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800949c:	4b19      	ldr	r3, [pc, #100]	; (8009504 <USBD_LL_Init+0xa8>)
 800949e:	2200      	movs	r2, #0
 80094a0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80094a2:	4b18      	ldr	r3, [pc, #96]	; (8009504 <USBD_LL_Init+0xa8>)
 80094a4:	0018      	movs	r0, r3
 80094a6:	f7f8 fe5f 	bl	8002168 <HAL_PCD_Init>
 80094aa:	1e03      	subs	r3, r0, #0
 80094ac:	d001      	beq.n	80094b2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80094ae:	f7f7 fce3 	bl	8000e78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	23b0      	movs	r3, #176	; 0xb0
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	58d0      	ldr	r0, [r2, r3]
 80094ba:	2318      	movs	r3, #24
 80094bc:	2200      	movs	r2, #0
 80094be:	2100      	movs	r1, #0
 80094c0:	f7fa fc28 	bl	8003d14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	23b0      	movs	r3, #176	; 0xb0
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	58d0      	ldr	r0, [r2, r3]
 80094cc:	2358      	movs	r3, #88	; 0x58
 80094ce:	2200      	movs	r2, #0
 80094d0:	2180      	movs	r1, #128	; 0x80
 80094d2:	f7fa fc1f 	bl	8003d14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	23b0      	movs	r3, #176	; 0xb0
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	58d0      	ldr	r0, [r2, r3]
 80094de:	2398      	movs	r3, #152	; 0x98
 80094e0:	2200      	movs	r2, #0
 80094e2:	2181      	movs	r1, #129	; 0x81
 80094e4:	f7fa fc16 	bl	8003d14 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	23b0      	movs	r3, #176	; 0xb0
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	58d0      	ldr	r0, [r2, r3]
 80094f0:	23d8      	movs	r3, #216	; 0xd8
 80094f2:	2200      	movs	r2, #0
 80094f4:	2101      	movs	r1, #1
 80094f6:	f7fa fc0d 	bl	8003d14 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	0018      	movs	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	b002      	add	sp, #8
 8009502:	bd80      	pop	{r7, pc}
 8009504:	200007f4 	.word	0x200007f4
 8009508:	40005c00 	.word	0x40005c00

0800950c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800950c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009514:	210f      	movs	r1, #15
 8009516:	187b      	adds	r3, r7, r1
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800951c:	260e      	movs	r6, #14
 800951e:	19bb      	adds	r3, r7, r6
 8009520:	2200      	movs	r2, #0
 8009522:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	23b0      	movs	r3, #176	; 0xb0
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	58d3      	ldr	r3, [r2, r3]
 800952c:	000d      	movs	r5, r1
 800952e:	187c      	adds	r4, r7, r1
 8009530:	0018      	movs	r0, r3
 8009532:	f7f8 ff29 	bl	8002388 <HAL_PCD_Start>
 8009536:	0003      	movs	r3, r0
 8009538:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800953a:	19bc      	adds	r4, r7, r6
 800953c:	197b      	adds	r3, r7, r5
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	0018      	movs	r0, r3
 8009542:	f000 f991 	bl	8009868 <USBD_Get_USB_Status>
 8009546:	0003      	movs	r3, r0
 8009548:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800954a:	19bb      	adds	r3, r7, r6
 800954c:	781b      	ldrb	r3, [r3, #0]
}
 800954e:	0018      	movs	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	b005      	add	sp, #20
 8009554:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009556 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009556:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009558:	b085      	sub	sp, #20
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
 800955e:	000c      	movs	r4, r1
 8009560:	0010      	movs	r0, r2
 8009562:	0019      	movs	r1, r3
 8009564:	1cfb      	adds	r3, r7, #3
 8009566:	1c22      	adds	r2, r4, #0
 8009568:	701a      	strb	r2, [r3, #0]
 800956a:	1cbb      	adds	r3, r7, #2
 800956c:	1c02      	adds	r2, r0, #0
 800956e:	701a      	strb	r2, [r3, #0]
 8009570:	003b      	movs	r3, r7
 8009572:	1c0a      	adds	r2, r1, #0
 8009574:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009576:	260f      	movs	r6, #15
 8009578:	19bb      	adds	r3, r7, r6
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800957e:	250e      	movs	r5, #14
 8009580:	197b      	adds	r3, r7, r5
 8009582:	2200      	movs	r2, #0
 8009584:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	23b0      	movs	r3, #176	; 0xb0
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	58d0      	ldr	r0, [r2, r3]
 800958e:	19bc      	adds	r4, r7, r6
 8009590:	1cbb      	adds	r3, r7, #2
 8009592:	781d      	ldrb	r5, [r3, #0]
 8009594:	003b      	movs	r3, r7
 8009596:	881a      	ldrh	r2, [r3, #0]
 8009598:	1cfb      	adds	r3, r7, #3
 800959a:	7819      	ldrb	r1, [r3, #0]
 800959c:	002b      	movs	r3, r5
 800959e:	f7f9 f8c0 	bl	8002722 <HAL_PCD_EP_Open>
 80095a2:	0003      	movs	r3, r0
 80095a4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095a6:	250e      	movs	r5, #14
 80095a8:	197c      	adds	r4, r7, r5
 80095aa:	19bb      	adds	r3, r7, r6
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	0018      	movs	r0, r3
 80095b0:	f000 f95a 	bl	8009868 <USBD_Get_USB_Status>
 80095b4:	0003      	movs	r3, r0
 80095b6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80095b8:	197b      	adds	r3, r7, r5
 80095ba:	781b      	ldrb	r3, [r3, #0]
}
 80095bc:	0018      	movs	r0, r3
 80095be:	46bd      	mov	sp, r7
 80095c0:	b005      	add	sp, #20
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095c4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	000a      	movs	r2, r1
 80095ce:	1cfb      	adds	r3, r7, #3
 80095d0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095d2:	210f      	movs	r1, #15
 80095d4:	187b      	adds	r3, r7, r1
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095da:	260e      	movs	r6, #14
 80095dc:	19bb      	adds	r3, r7, r6
 80095de:	2200      	movs	r2, #0
 80095e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	23b0      	movs	r3, #176	; 0xb0
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	58d2      	ldr	r2, [r2, r3]
 80095ea:	000d      	movs	r5, r1
 80095ec:	187c      	adds	r4, r7, r1
 80095ee:	1cfb      	adds	r3, r7, #3
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	0019      	movs	r1, r3
 80095f4:	0010      	movs	r0, r2
 80095f6:	f7f9 f90c 	bl	8002812 <HAL_PCD_EP_Close>
 80095fa:	0003      	movs	r3, r0
 80095fc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fe:	19bc      	adds	r4, r7, r6
 8009600:	197b      	adds	r3, r7, r5
 8009602:	781b      	ldrb	r3, [r3, #0]
 8009604:	0018      	movs	r0, r3
 8009606:	f000 f92f 	bl	8009868 <USBD_Get_USB_Status>
 800960a:	0003      	movs	r3, r0
 800960c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800960e:	19bb      	adds	r3, r7, r6
 8009610:	781b      	ldrb	r3, [r3, #0]
}
 8009612:	0018      	movs	r0, r3
 8009614:	46bd      	mov	sp, r7
 8009616:	b005      	add	sp, #20
 8009618:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800961a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800961a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	000a      	movs	r2, r1
 8009624:	1cfb      	adds	r3, r7, #3
 8009626:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009628:	210f      	movs	r1, #15
 800962a:	187b      	adds	r3, r7, r1
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009630:	260e      	movs	r6, #14
 8009632:	19bb      	adds	r3, r7, r6
 8009634:	2200      	movs	r2, #0
 8009636:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	23b0      	movs	r3, #176	; 0xb0
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	58d2      	ldr	r2, [r2, r3]
 8009640:	000d      	movs	r5, r1
 8009642:	187c      	adds	r4, r7, r1
 8009644:	1cfb      	adds	r3, r7, #3
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	0019      	movs	r1, r3
 800964a:	0010      	movs	r0, r2
 800964c:	f7f9 f9bf 	bl	80029ce <HAL_PCD_EP_SetStall>
 8009650:	0003      	movs	r3, r0
 8009652:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009654:	19bc      	adds	r4, r7, r6
 8009656:	197b      	adds	r3, r7, r5
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	0018      	movs	r0, r3
 800965c:	f000 f904 	bl	8009868 <USBD_Get_USB_Status>
 8009660:	0003      	movs	r3, r0
 8009662:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009664:	19bb      	adds	r3, r7, r6
 8009666:	781b      	ldrb	r3, [r3, #0]
}
 8009668:	0018      	movs	r0, r3
 800966a:	46bd      	mov	sp, r7
 800966c:	b005      	add	sp, #20
 800966e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009670 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009672:	b085      	sub	sp, #20
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	000a      	movs	r2, r1
 800967a:	1cfb      	adds	r3, r7, #3
 800967c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800967e:	210f      	movs	r1, #15
 8009680:	187b      	adds	r3, r7, r1
 8009682:	2200      	movs	r2, #0
 8009684:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009686:	260e      	movs	r6, #14
 8009688:	19bb      	adds	r3, r7, r6
 800968a:	2200      	movs	r2, #0
 800968c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800968e:	687a      	ldr	r2, [r7, #4]
 8009690:	23b0      	movs	r3, #176	; 0xb0
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	58d2      	ldr	r2, [r2, r3]
 8009696:	000d      	movs	r5, r1
 8009698:	187c      	adds	r4, r7, r1
 800969a:	1cfb      	adds	r3, r7, #3
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	0019      	movs	r1, r3
 80096a0:	0010      	movs	r0, r2
 80096a2:	f7f9 f9f0 	bl	8002a86 <HAL_PCD_EP_ClrStall>
 80096a6:	0003      	movs	r3, r0
 80096a8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096aa:	19bc      	adds	r4, r7, r6
 80096ac:	197b      	adds	r3, r7, r5
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	0018      	movs	r0, r3
 80096b2:	f000 f8d9 	bl	8009868 <USBD_Get_USB_Status>
 80096b6:	0003      	movs	r3, r0
 80096b8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096ba:	19bb      	adds	r3, r7, r6
 80096bc:	781b      	ldrb	r3, [r3, #0]
}
 80096be:	0018      	movs	r0, r3
 80096c0:	46bd      	mov	sp, r7
 80096c2:	b005      	add	sp, #20
 80096c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096c6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096c6:	b580      	push	{r7, lr}
 80096c8:	b084      	sub	sp, #16
 80096ca:	af00      	add	r7, sp, #0
 80096cc:	6078      	str	r0, [r7, #4]
 80096ce:	000a      	movs	r2, r1
 80096d0:	1cfb      	adds	r3, r7, #3
 80096d2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096d4:	687a      	ldr	r2, [r7, #4]
 80096d6:	23b0      	movs	r3, #176	; 0xb0
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	58d3      	ldr	r3, [r2, r3]
 80096dc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096de:	1cfb      	adds	r3, r7, #3
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b25b      	sxtb	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da0d      	bge.n	8009704 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096e8:	1cfb      	adds	r3, r7, #3
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	227f      	movs	r2, #127	; 0x7f
 80096ee:	4013      	ands	r3, r2
 80096f0:	68f9      	ldr	r1, [r7, #12]
 80096f2:	1c5a      	adds	r2, r3, #1
 80096f4:	0013      	movs	r3, r2
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	189b      	adds	r3, r3, r2
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	18cb      	adds	r3, r1, r3
 80096fe:	3302      	adds	r3, #2
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	e00d      	b.n	8009720 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009704:	1cfb      	adds	r3, r7, #3
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	227f      	movs	r2, #127	; 0x7f
 800970a:	401a      	ands	r2, r3
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	23b5      	movs	r3, #181	; 0xb5
 8009710:	0059      	lsls	r1, r3, #1
 8009712:	0013      	movs	r3, r2
 8009714:	009b      	lsls	r3, r3, #2
 8009716:	189b      	adds	r3, r3, r2
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	18c3      	adds	r3, r0, r3
 800971c:	185b      	adds	r3, r3, r1
 800971e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009720:	0018      	movs	r0, r3
 8009722:	46bd      	mov	sp, r7
 8009724:	b004      	add	sp, #16
 8009726:	bd80      	pop	{r7, pc}

08009728 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	000a      	movs	r2, r1
 8009732:	1cfb      	adds	r3, r7, #3
 8009734:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009736:	210f      	movs	r1, #15
 8009738:	187b      	adds	r3, r7, r1
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973e:	260e      	movs	r6, #14
 8009740:	19bb      	adds	r3, r7, r6
 8009742:	2200      	movs	r2, #0
 8009744:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	23b0      	movs	r3, #176	; 0xb0
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	58d2      	ldr	r2, [r2, r3]
 800974e:	000d      	movs	r5, r1
 8009750:	187c      	adds	r4, r7, r1
 8009752:	1cfb      	adds	r3, r7, #3
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	0019      	movs	r1, r3
 8009758:	0010      	movs	r0, r2
 800975a:	f7f8 ffb7 	bl	80026cc <HAL_PCD_SetAddress>
 800975e:	0003      	movs	r3, r0
 8009760:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009762:	19bc      	adds	r4, r7, r6
 8009764:	197b      	adds	r3, r7, r5
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	0018      	movs	r0, r3
 800976a:	f000 f87d 	bl	8009868 <USBD_Get_USB_Status>
 800976e:	0003      	movs	r3, r0
 8009770:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009772:	19bb      	adds	r3, r7, r6
 8009774:	781b      	ldrb	r3, [r3, #0]
}
 8009776:	0018      	movs	r0, r3
 8009778:	46bd      	mov	sp, r7
 800977a:	b005      	add	sp, #20
 800977c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800977e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800977e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009780:	b087      	sub	sp, #28
 8009782:	af00      	add	r7, sp, #0
 8009784:	60f8      	str	r0, [r7, #12]
 8009786:	0008      	movs	r0, r1
 8009788:	607a      	str	r2, [r7, #4]
 800978a:	0019      	movs	r1, r3
 800978c:	230b      	movs	r3, #11
 800978e:	18fb      	adds	r3, r7, r3
 8009790:	1c02      	adds	r2, r0, #0
 8009792:	701a      	strb	r2, [r3, #0]
 8009794:	2408      	movs	r4, #8
 8009796:	193b      	adds	r3, r7, r4
 8009798:	1c0a      	adds	r2, r1, #0
 800979a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979c:	2117      	movs	r1, #23
 800979e:	187b      	adds	r3, r7, r1
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a4:	2516      	movs	r5, #22
 80097a6:	197b      	adds	r3, r7, r5
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	23b0      	movs	r3, #176	; 0xb0
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	58d0      	ldr	r0, [r2, r3]
 80097b4:	193b      	adds	r3, r7, r4
 80097b6:	881d      	ldrh	r5, [r3, #0]
 80097b8:	000e      	movs	r6, r1
 80097ba:	187c      	adds	r4, r7, r1
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	230b      	movs	r3, #11
 80097c0:	18fb      	adds	r3, r7, r3
 80097c2:	7819      	ldrb	r1, [r3, #0]
 80097c4:	002b      	movs	r3, r5
 80097c6:	f7f9 f8b9 	bl	800293c <HAL_PCD_EP_Transmit>
 80097ca:	0003      	movs	r3, r0
 80097cc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097ce:	2516      	movs	r5, #22
 80097d0:	197c      	adds	r4, r7, r5
 80097d2:	19bb      	adds	r3, r7, r6
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	0018      	movs	r0, r3
 80097d8:	f000 f846 	bl	8009868 <USBD_Get_USB_Status>
 80097dc:	0003      	movs	r3, r0
 80097de:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80097e0:	197b      	adds	r3, r7, r5
 80097e2:	781b      	ldrb	r3, [r3, #0]
}
 80097e4:	0018      	movs	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	b007      	add	sp, #28
 80097ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	0008      	movs	r0, r1
 80097f6:	607a      	str	r2, [r7, #4]
 80097f8:	0019      	movs	r1, r3
 80097fa:	230b      	movs	r3, #11
 80097fc:	18fb      	adds	r3, r7, r3
 80097fe:	1c02      	adds	r2, r0, #0
 8009800:	701a      	strb	r2, [r3, #0]
 8009802:	2408      	movs	r4, #8
 8009804:	193b      	adds	r3, r7, r4
 8009806:	1c0a      	adds	r2, r1, #0
 8009808:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800980a:	2117      	movs	r1, #23
 800980c:	187b      	adds	r3, r7, r1
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009812:	2516      	movs	r5, #22
 8009814:	197b      	adds	r3, r7, r5
 8009816:	2200      	movs	r2, #0
 8009818:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	23b0      	movs	r3, #176	; 0xb0
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	58d0      	ldr	r0, [r2, r3]
 8009822:	193b      	adds	r3, r7, r4
 8009824:	881d      	ldrh	r5, [r3, #0]
 8009826:	000e      	movs	r6, r1
 8009828:	187c      	adds	r4, r7, r1
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	230b      	movs	r3, #11
 800982e:	18fb      	adds	r3, r7, r3
 8009830:	7819      	ldrb	r1, [r3, #0]
 8009832:	002b      	movs	r3, r5
 8009834:	f7f9 f83e 	bl	80028b4 <HAL_PCD_EP_Receive>
 8009838:	0003      	movs	r3, r0
 800983a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800983c:	2516      	movs	r5, #22
 800983e:	197c      	adds	r4, r7, r5
 8009840:	19bb      	adds	r3, r7, r6
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	0018      	movs	r0, r3
 8009846:	f000 f80f 	bl	8009868 <USBD_Get_USB_Status>
 800984a:	0003      	movs	r3, r0
 800984c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800984e:	197b      	adds	r3, r7, r5
 8009850:	781b      	ldrb	r3, [r3, #0]
}
 8009852:	0018      	movs	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	b007      	add	sp, #28
 8009858:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800985a <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800985a:	b580      	push	{r7, lr}
 800985c:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800985e:	f7f7 f917 	bl	8000a90 <SystemClock_Config>
}
 8009862:	46c0      	nop			; (mov r8, r8)
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}

08009868 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	0002      	movs	r2, r0
 8009870:	1dfb      	adds	r3, r7, #7
 8009872:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009874:	230f      	movs	r3, #15
 8009876:	18fb      	adds	r3, r7, r3
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800987c:	1dfb      	adds	r3, r7, #7
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	2b03      	cmp	r3, #3
 8009882:	d017      	beq.n	80098b4 <USBD_Get_USB_Status+0x4c>
 8009884:	dc1b      	bgt.n	80098be <USBD_Get_USB_Status+0x56>
 8009886:	2b02      	cmp	r3, #2
 8009888:	d00f      	beq.n	80098aa <USBD_Get_USB_Status+0x42>
 800988a:	dc18      	bgt.n	80098be <USBD_Get_USB_Status+0x56>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <USBD_Get_USB_Status+0x2e>
 8009890:	2b01      	cmp	r3, #1
 8009892:	d005      	beq.n	80098a0 <USBD_Get_USB_Status+0x38>
 8009894:	e013      	b.n	80098be <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009896:	230f      	movs	r3, #15
 8009898:	18fb      	adds	r3, r7, r3
 800989a:	2200      	movs	r2, #0
 800989c:	701a      	strb	r2, [r3, #0]
    break;
 800989e:	e013      	b.n	80098c8 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80098a0:	230f      	movs	r3, #15
 80098a2:	18fb      	adds	r3, r7, r3
 80098a4:	2202      	movs	r2, #2
 80098a6:	701a      	strb	r2, [r3, #0]
    break;
 80098a8:	e00e      	b.n	80098c8 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098aa:	230f      	movs	r3, #15
 80098ac:	18fb      	adds	r3, r7, r3
 80098ae:	2201      	movs	r2, #1
 80098b0:	701a      	strb	r2, [r3, #0]
    break;
 80098b2:	e009      	b.n	80098c8 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098b4:	230f      	movs	r3, #15
 80098b6:	18fb      	adds	r3, r7, r3
 80098b8:	2202      	movs	r2, #2
 80098ba:	701a      	strb	r2, [r3, #0]
    break;
 80098bc:	e004      	b.n	80098c8 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80098be:	230f      	movs	r3, #15
 80098c0:	18fb      	adds	r3, r7, r3
 80098c2:	2202      	movs	r2, #2
 80098c4:	701a      	strb	r2, [r3, #0]
    break;
 80098c6:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80098c8:	230f      	movs	r3, #15
 80098ca:	18fb      	adds	r3, r7, r3
 80098cc:	781b      	ldrb	r3, [r3, #0]
}
 80098ce:	0018      	movs	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b004      	add	sp, #16
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <__errno>:
 80098d8:	4b01      	ldr	r3, [pc, #4]	; (80098e0 <__errno+0x8>)
 80098da:	6818      	ldr	r0, [r3, #0]
 80098dc:	4770      	bx	lr
 80098de:	46c0      	nop			; (mov r8, r8)
 80098e0:	20000198 	.word	0x20000198

080098e4 <__libc_init_array>:
 80098e4:	b570      	push	{r4, r5, r6, lr}
 80098e6:	2600      	movs	r6, #0
 80098e8:	4d0c      	ldr	r5, [pc, #48]	; (800991c <__libc_init_array+0x38>)
 80098ea:	4c0d      	ldr	r4, [pc, #52]	; (8009920 <__libc_init_array+0x3c>)
 80098ec:	1b64      	subs	r4, r4, r5
 80098ee:	10a4      	asrs	r4, r4, #2
 80098f0:	42a6      	cmp	r6, r4
 80098f2:	d109      	bne.n	8009908 <__libc_init_array+0x24>
 80098f4:	2600      	movs	r6, #0
 80098f6:	f000 f901 	bl	8009afc <_init>
 80098fa:	4d0a      	ldr	r5, [pc, #40]	; (8009924 <__libc_init_array+0x40>)
 80098fc:	4c0a      	ldr	r4, [pc, #40]	; (8009928 <__libc_init_array+0x44>)
 80098fe:	1b64      	subs	r4, r4, r5
 8009900:	10a4      	asrs	r4, r4, #2
 8009902:	42a6      	cmp	r6, r4
 8009904:	d105      	bne.n	8009912 <__libc_init_array+0x2e>
 8009906:	bd70      	pop	{r4, r5, r6, pc}
 8009908:	00b3      	lsls	r3, r6, #2
 800990a:	58eb      	ldr	r3, [r5, r3]
 800990c:	4798      	blx	r3
 800990e:	3601      	adds	r6, #1
 8009910:	e7ee      	b.n	80098f0 <__libc_init_array+0xc>
 8009912:	00b3      	lsls	r3, r6, #2
 8009914:	58eb      	ldr	r3, [r5, r3]
 8009916:	4798      	blx	r3
 8009918:	3601      	adds	r6, #1
 800991a:	e7f2      	b.n	8009902 <__libc_init_array+0x1e>
 800991c:	08009c78 	.word	0x08009c78
 8009920:	08009c78 	.word	0x08009c78
 8009924:	08009c78 	.word	0x08009c78
 8009928:	08009c7c 	.word	0x08009c7c

0800992c <malloc>:
 800992c:	b510      	push	{r4, lr}
 800992e:	4b03      	ldr	r3, [pc, #12]	; (800993c <malloc+0x10>)
 8009930:	0001      	movs	r1, r0
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	f000 f860 	bl	80099f8 <_malloc_r>
 8009938:	bd10      	pop	{r4, pc}
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	20000198 	.word	0x20000198

08009940 <free>:
 8009940:	b510      	push	{r4, lr}
 8009942:	4b03      	ldr	r3, [pc, #12]	; (8009950 <free+0x10>)
 8009944:	0001      	movs	r1, r0
 8009946:	6818      	ldr	r0, [r3, #0]
 8009948:	f000 f80c 	bl	8009964 <_free_r>
 800994c:	bd10      	pop	{r4, pc}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	20000198 	.word	0x20000198

08009954 <memset>:
 8009954:	0003      	movs	r3, r0
 8009956:	1882      	adds	r2, r0, r2
 8009958:	4293      	cmp	r3, r2
 800995a:	d100      	bne.n	800995e <memset+0xa>
 800995c:	4770      	bx	lr
 800995e:	7019      	strb	r1, [r3, #0]
 8009960:	3301      	adds	r3, #1
 8009962:	e7f9      	b.n	8009958 <memset+0x4>

08009964 <_free_r>:
 8009964:	b570      	push	{r4, r5, r6, lr}
 8009966:	0005      	movs	r5, r0
 8009968:	2900      	cmp	r1, #0
 800996a:	d010      	beq.n	800998e <_free_r+0x2a>
 800996c:	1f0c      	subs	r4, r1, #4
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	da00      	bge.n	8009976 <_free_r+0x12>
 8009974:	18e4      	adds	r4, r4, r3
 8009976:	0028      	movs	r0, r5
 8009978:	f000 f8ae 	bl	8009ad8 <__malloc_lock>
 800997c:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <_free_r+0x90>)
 800997e:	6813      	ldr	r3, [r2, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d105      	bne.n	8009990 <_free_r+0x2c>
 8009984:	6063      	str	r3, [r4, #4]
 8009986:	6014      	str	r4, [r2, #0]
 8009988:	0028      	movs	r0, r5
 800998a:	f000 f8ad 	bl	8009ae8 <__malloc_unlock>
 800998e:	bd70      	pop	{r4, r5, r6, pc}
 8009990:	42a3      	cmp	r3, r4
 8009992:	d908      	bls.n	80099a6 <_free_r+0x42>
 8009994:	6821      	ldr	r1, [r4, #0]
 8009996:	1860      	adds	r0, r4, r1
 8009998:	4283      	cmp	r3, r0
 800999a:	d1f3      	bne.n	8009984 <_free_r+0x20>
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	1841      	adds	r1, r0, r1
 80099a2:	6021      	str	r1, [r4, #0]
 80099a4:	e7ee      	b.n	8009984 <_free_r+0x20>
 80099a6:	001a      	movs	r2, r3
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <_free_r+0x4e>
 80099ae:	42a3      	cmp	r3, r4
 80099b0:	d9f9      	bls.n	80099a6 <_free_r+0x42>
 80099b2:	6811      	ldr	r1, [r2, #0]
 80099b4:	1850      	adds	r0, r2, r1
 80099b6:	42a0      	cmp	r0, r4
 80099b8:	d10b      	bne.n	80099d2 <_free_r+0x6e>
 80099ba:	6820      	ldr	r0, [r4, #0]
 80099bc:	1809      	adds	r1, r1, r0
 80099be:	1850      	adds	r0, r2, r1
 80099c0:	6011      	str	r1, [r2, #0]
 80099c2:	4283      	cmp	r3, r0
 80099c4:	d1e0      	bne.n	8009988 <_free_r+0x24>
 80099c6:	6818      	ldr	r0, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	1841      	adds	r1, r0, r1
 80099cc:	6011      	str	r1, [r2, #0]
 80099ce:	6053      	str	r3, [r2, #4]
 80099d0:	e7da      	b.n	8009988 <_free_r+0x24>
 80099d2:	42a0      	cmp	r0, r4
 80099d4:	d902      	bls.n	80099dc <_free_r+0x78>
 80099d6:	230c      	movs	r3, #12
 80099d8:	602b      	str	r3, [r5, #0]
 80099da:	e7d5      	b.n	8009988 <_free_r+0x24>
 80099dc:	6821      	ldr	r1, [r4, #0]
 80099de:	1860      	adds	r0, r4, r1
 80099e0:	4283      	cmp	r3, r0
 80099e2:	d103      	bne.n	80099ec <_free_r+0x88>
 80099e4:	6818      	ldr	r0, [r3, #0]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	1841      	adds	r1, r0, r1
 80099ea:	6021      	str	r1, [r4, #0]
 80099ec:	6063      	str	r3, [r4, #4]
 80099ee:	6054      	str	r4, [r2, #4]
 80099f0:	e7ca      	b.n	8009988 <_free_r+0x24>
 80099f2:	46c0      	nop			; (mov r8, r8)
 80099f4:	20000220 	.word	0x20000220

080099f8 <_malloc_r>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	2303      	movs	r3, #3
 80099fc:	1ccd      	adds	r5, r1, #3
 80099fe:	439d      	bics	r5, r3
 8009a00:	3508      	adds	r5, #8
 8009a02:	0006      	movs	r6, r0
 8009a04:	2d0c      	cmp	r5, #12
 8009a06:	d21f      	bcs.n	8009a48 <_malloc_r+0x50>
 8009a08:	250c      	movs	r5, #12
 8009a0a:	42a9      	cmp	r1, r5
 8009a0c:	d81e      	bhi.n	8009a4c <_malloc_r+0x54>
 8009a0e:	0030      	movs	r0, r6
 8009a10:	f000 f862 	bl	8009ad8 <__malloc_lock>
 8009a14:	4925      	ldr	r1, [pc, #148]	; (8009aac <_malloc_r+0xb4>)
 8009a16:	680a      	ldr	r2, [r1, #0]
 8009a18:	0014      	movs	r4, r2
 8009a1a:	2c00      	cmp	r4, #0
 8009a1c:	d11a      	bne.n	8009a54 <_malloc_r+0x5c>
 8009a1e:	4f24      	ldr	r7, [pc, #144]	; (8009ab0 <_malloc_r+0xb8>)
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d104      	bne.n	8009a30 <_malloc_r+0x38>
 8009a26:	0021      	movs	r1, r4
 8009a28:	0030      	movs	r0, r6
 8009a2a:	f000 f843 	bl	8009ab4 <_sbrk_r>
 8009a2e:	6038      	str	r0, [r7, #0]
 8009a30:	0029      	movs	r1, r5
 8009a32:	0030      	movs	r0, r6
 8009a34:	f000 f83e 	bl	8009ab4 <_sbrk_r>
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d12b      	bne.n	8009a94 <_malloc_r+0x9c>
 8009a3c:	230c      	movs	r3, #12
 8009a3e:	0030      	movs	r0, r6
 8009a40:	6033      	str	r3, [r6, #0]
 8009a42:	f000 f851 	bl	8009ae8 <__malloc_unlock>
 8009a46:	e003      	b.n	8009a50 <_malloc_r+0x58>
 8009a48:	2d00      	cmp	r5, #0
 8009a4a:	dade      	bge.n	8009a0a <_malloc_r+0x12>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	6033      	str	r3, [r6, #0]
 8009a50:	2000      	movs	r0, #0
 8009a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	1b5b      	subs	r3, r3, r5
 8009a58:	d419      	bmi.n	8009a8e <_malloc_r+0x96>
 8009a5a:	2b0b      	cmp	r3, #11
 8009a5c:	d903      	bls.n	8009a66 <_malloc_r+0x6e>
 8009a5e:	6023      	str	r3, [r4, #0]
 8009a60:	18e4      	adds	r4, r4, r3
 8009a62:	6025      	str	r5, [r4, #0]
 8009a64:	e003      	b.n	8009a6e <_malloc_r+0x76>
 8009a66:	6863      	ldr	r3, [r4, #4]
 8009a68:	42a2      	cmp	r2, r4
 8009a6a:	d10e      	bne.n	8009a8a <_malloc_r+0x92>
 8009a6c:	600b      	str	r3, [r1, #0]
 8009a6e:	0030      	movs	r0, r6
 8009a70:	f000 f83a 	bl	8009ae8 <__malloc_unlock>
 8009a74:	0020      	movs	r0, r4
 8009a76:	2207      	movs	r2, #7
 8009a78:	300b      	adds	r0, #11
 8009a7a:	1d23      	adds	r3, r4, #4
 8009a7c:	4390      	bics	r0, r2
 8009a7e:	1ac2      	subs	r2, r0, r3
 8009a80:	4298      	cmp	r0, r3
 8009a82:	d0e6      	beq.n	8009a52 <_malloc_r+0x5a>
 8009a84:	1a1b      	subs	r3, r3, r0
 8009a86:	50a3      	str	r3, [r4, r2]
 8009a88:	e7e3      	b.n	8009a52 <_malloc_r+0x5a>
 8009a8a:	6053      	str	r3, [r2, #4]
 8009a8c:	e7ef      	b.n	8009a6e <_malloc_r+0x76>
 8009a8e:	0022      	movs	r2, r4
 8009a90:	6864      	ldr	r4, [r4, #4]
 8009a92:	e7c2      	b.n	8009a1a <_malloc_r+0x22>
 8009a94:	2303      	movs	r3, #3
 8009a96:	1cc4      	adds	r4, r0, #3
 8009a98:	439c      	bics	r4, r3
 8009a9a:	42a0      	cmp	r0, r4
 8009a9c:	d0e1      	beq.n	8009a62 <_malloc_r+0x6a>
 8009a9e:	1a21      	subs	r1, r4, r0
 8009aa0:	0030      	movs	r0, r6
 8009aa2:	f000 f807 	bl	8009ab4 <_sbrk_r>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d1db      	bne.n	8009a62 <_malloc_r+0x6a>
 8009aaa:	e7c7      	b.n	8009a3c <_malloc_r+0x44>
 8009aac:	20000220 	.word	0x20000220
 8009ab0:	20000224 	.word	0x20000224

08009ab4 <_sbrk_r>:
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	b570      	push	{r4, r5, r6, lr}
 8009ab8:	4d06      	ldr	r5, [pc, #24]	; (8009ad4 <_sbrk_r+0x20>)
 8009aba:	0004      	movs	r4, r0
 8009abc:	0008      	movs	r0, r1
 8009abe:	602b      	str	r3, [r5, #0]
 8009ac0:	f7f7 fa98 	bl	8000ff4 <_sbrk>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d103      	bne.n	8009ad0 <_sbrk_r+0x1c>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d000      	beq.n	8009ad0 <_sbrk_r+0x1c>
 8009ace:	6023      	str	r3, [r4, #0]
 8009ad0:	bd70      	pop	{r4, r5, r6, pc}
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	20000ae8 	.word	0x20000ae8

08009ad8 <__malloc_lock>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	4802      	ldr	r0, [pc, #8]	; (8009ae4 <__malloc_lock+0xc>)
 8009adc:	f000 f80c 	bl	8009af8 <__retarget_lock_acquire_recursive>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	20000af0 	.word	0x20000af0

08009ae8 <__malloc_unlock>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4802      	ldr	r0, [pc, #8]	; (8009af4 <__malloc_unlock+0xc>)
 8009aec:	f000 f805 	bl	8009afa <__retarget_lock_release_recursive>
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	20000af0 	.word	0x20000af0

08009af8 <__retarget_lock_acquire_recursive>:
 8009af8:	4770      	bx	lr

08009afa <__retarget_lock_release_recursive>:
 8009afa:	4770      	bx	lr

08009afc <_init>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b02:	bc08      	pop	{r3}
 8009b04:	469e      	mov	lr, r3
 8009b06:	4770      	bx	lr

08009b08 <_fini>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr
