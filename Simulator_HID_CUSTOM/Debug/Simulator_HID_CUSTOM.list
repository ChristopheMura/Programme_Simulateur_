
Simulator_HID_CUSTOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e0  0800a2a8  0800a2a8  0001a2a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a488  0800a488  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a490  0800a490  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a494  0800a494  0001a494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  200001fc  0800a694  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  0800a694  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001846c  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a5  00000000  00000000  00038690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  0003bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  0003c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001809d  00000000  00000000  0003d5b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe1  00000000  00000000  0005564d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867b6  00000000  00000000  0006962e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efde4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003428  00000000  00000000  000efe38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a290 	.word	0x0800a290

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	0800a290 	.word	0x0800a290

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	1c08      	adds	r0, r1, #0
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f82e 	bl	80004a8 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	0415      	lsls	r5, r2, #16
 800045c:	0c2d      	lsrs	r5, r5, #16
 800045e:	000f      	movs	r7, r1
 8000460:	0001      	movs	r1, r0
 8000462:	002e      	movs	r6, r5
 8000464:	46c6      	mov	lr, r8
 8000466:	4684      	mov	ip, r0
 8000468:	0400      	lsls	r0, r0, #16
 800046a:	0c14      	lsrs	r4, r2, #16
 800046c:	0c00      	lsrs	r0, r0, #16
 800046e:	0c09      	lsrs	r1, r1, #16
 8000470:	4346      	muls	r6, r0
 8000472:	434d      	muls	r5, r1
 8000474:	4360      	muls	r0, r4
 8000476:	4361      	muls	r1, r4
 8000478:	1940      	adds	r0, r0, r5
 800047a:	0c34      	lsrs	r4, r6, #16
 800047c:	1824      	adds	r4, r4, r0
 800047e:	b500      	push	{lr}
 8000480:	42a5      	cmp	r5, r4
 8000482:	d903      	bls.n	800048c <__aeabi_lmul+0x34>
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	0240      	lsls	r0, r0, #9
 8000488:	4680      	mov	r8, r0
 800048a:	4441      	add	r1, r8
 800048c:	0c25      	lsrs	r5, r4, #16
 800048e:	186d      	adds	r5, r5, r1
 8000490:	4661      	mov	r1, ip
 8000492:	4359      	muls	r1, r3
 8000494:	437a      	muls	r2, r7
 8000496:	0430      	lsls	r0, r6, #16
 8000498:	1949      	adds	r1, r1, r5
 800049a:	0424      	lsls	r4, r4, #16
 800049c:	0c00      	lsrs	r0, r0, #16
 800049e:	1820      	adds	r0, r4, r0
 80004a0:	1889      	adds	r1, r1, r2
 80004a2:	bc80      	pop	{r7}
 80004a4:	46b8      	mov	r8, r7
 80004a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f000 f8ba 	bl	8000640 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f000 f8b5 	bl	8000640 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	469b      	mov	fp, r3
 80004de:	d433      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004e0:	465a      	mov	r2, fp
 80004e2:	4653      	mov	r3, sl
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83a      	bhi.n	800056a <__udivmoddi4+0xc2>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e078      	b.n	80005ec <__udivmoddi4+0x144>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e075      	b.n	80005f2 <__udivmoddi4+0x14a>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e028      	b.n	8000572 <__udivmoddi4+0xca>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	2320      	movs	r3, #32
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	4652      	mov	r2, sl
 8000550:	40da      	lsrs	r2, r3
 8000552:	4641      	mov	r1, r8
 8000554:	0013      	movs	r3, r2
 8000556:	464a      	mov	r2, r9
 8000558:	408a      	lsls	r2, r1
 800055a:	0017      	movs	r7, r2
 800055c:	4642      	mov	r2, r8
 800055e:	431f      	orrs	r7, r3
 8000560:	4653      	mov	r3, sl
 8000562:	4093      	lsls	r3, r2
 8000564:	001e      	movs	r6, r3
 8000566:	42af      	cmp	r7, r5
 8000568:	d9c4      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056a:	2200      	movs	r2, #0
 800056c:	2300      	movs	r3, #0
 800056e:	9200      	str	r2, [sp, #0]
 8000570:	9301      	str	r3, [sp, #4]
 8000572:	4643      	mov	r3, r8
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0d9      	beq.n	800052c <__udivmoddi4+0x84>
 8000578:	07fb      	lsls	r3, r7, #31
 800057a:	0872      	lsrs	r2, r6, #1
 800057c:	431a      	orrs	r2, r3
 800057e:	4646      	mov	r6, r8
 8000580:	087b      	lsrs	r3, r7, #1
 8000582:	e00e      	b.n	80005a2 <__udivmoddi4+0xfa>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d101      	bne.n	800058c <__udivmoddi4+0xe4>
 8000588:	42a2      	cmp	r2, r4
 800058a:	d80c      	bhi.n	80005a6 <__udivmoddi4+0xfe>
 800058c:	1aa4      	subs	r4, r4, r2
 800058e:	419d      	sbcs	r5, r3
 8000590:	2001      	movs	r0, #1
 8000592:	1924      	adds	r4, r4, r4
 8000594:	416d      	adcs	r5, r5
 8000596:	2100      	movs	r1, #0
 8000598:	3e01      	subs	r6, #1
 800059a:	1824      	adds	r4, r4, r0
 800059c:	414d      	adcs	r5, r1
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d006      	beq.n	80005b0 <__udivmoddi4+0x108>
 80005a2:	42ab      	cmp	r3, r5
 80005a4:	d9ee      	bls.n	8000584 <__udivmoddi4+0xdc>
 80005a6:	3e01      	subs	r6, #1
 80005a8:	1924      	adds	r4, r4, r4
 80005aa:	416d      	adcs	r5, r5
 80005ac:	2e00      	cmp	r6, #0
 80005ae:	d1f8      	bne.n	80005a2 <__udivmoddi4+0xfa>
 80005b0:	9800      	ldr	r0, [sp, #0]
 80005b2:	9901      	ldr	r1, [sp, #4]
 80005b4:	465b      	mov	r3, fp
 80005b6:	1900      	adds	r0, r0, r4
 80005b8:	4169      	adcs	r1, r5
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db24      	blt.n	8000608 <__udivmoddi4+0x160>
 80005be:	002b      	movs	r3, r5
 80005c0:	465a      	mov	r2, fp
 80005c2:	4644      	mov	r4, r8
 80005c4:	40d3      	lsrs	r3, r2
 80005c6:	002a      	movs	r2, r5
 80005c8:	40e2      	lsrs	r2, r4
 80005ca:	001c      	movs	r4, r3
 80005cc:	465b      	mov	r3, fp
 80005ce:	0015      	movs	r5, r2
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	db2a      	blt.n	800062a <__udivmoddi4+0x182>
 80005d4:	0026      	movs	r6, r4
 80005d6:	409e      	lsls	r6, r3
 80005d8:	0033      	movs	r3, r6
 80005da:	0026      	movs	r6, r4
 80005dc:	4647      	mov	r7, r8
 80005de:	40be      	lsls	r6, r7
 80005e0:	0032      	movs	r2, r6
 80005e2:	1a80      	subs	r0, r0, r2
 80005e4:	4199      	sbcs	r1, r3
 80005e6:	9000      	str	r0, [sp, #0]
 80005e8:	9101      	str	r1, [sp, #4]
 80005ea:	e79f      	b.n	800052c <__udivmoddi4+0x84>
 80005ec:	42a3      	cmp	r3, r4
 80005ee:	d8bc      	bhi.n	800056a <__udivmoddi4+0xc2>
 80005f0:	e783      	b.n	80004fa <__udivmoddi4+0x52>
 80005f2:	4642      	mov	r2, r8
 80005f4:	2320      	movs	r3, #32
 80005f6:	2100      	movs	r1, #0
 80005f8:	1a9b      	subs	r3, r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	9100      	str	r1, [sp, #0]
 80005fe:	9201      	str	r2, [sp, #4]
 8000600:	2201      	movs	r2, #1
 8000602:	40da      	lsrs	r2, r3
 8000604:	9201      	str	r2, [sp, #4]
 8000606:	e786      	b.n	8000516 <__udivmoddi4+0x6e>
 8000608:	4642      	mov	r2, r8
 800060a:	2320      	movs	r3, #32
 800060c:	1a9b      	subs	r3, r3, r2
 800060e:	002a      	movs	r2, r5
 8000610:	4646      	mov	r6, r8
 8000612:	409a      	lsls	r2, r3
 8000614:	0023      	movs	r3, r4
 8000616:	40f3      	lsrs	r3, r6
 8000618:	4644      	mov	r4, r8
 800061a:	4313      	orrs	r3, r2
 800061c:	002a      	movs	r2, r5
 800061e:	40e2      	lsrs	r2, r4
 8000620:	001c      	movs	r4, r3
 8000622:	465b      	mov	r3, fp
 8000624:	0015      	movs	r5, r2
 8000626:	2b00      	cmp	r3, #0
 8000628:	dad4      	bge.n	80005d4 <__udivmoddi4+0x12c>
 800062a:	4642      	mov	r2, r8
 800062c:	002f      	movs	r7, r5
 800062e:	2320      	movs	r3, #32
 8000630:	0026      	movs	r6, r4
 8000632:	4097      	lsls	r7, r2
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	40de      	lsrs	r6, r3
 8000638:	003b      	movs	r3, r7
 800063a:	4333      	orrs	r3, r6
 800063c:	e7cd      	b.n	80005da <__udivmoddi4+0x132>
 800063e:	46c0      	nop			; (mov r8, r8)

08000640 <__clzdi2>:
 8000640:	b510      	push	{r4, lr}
 8000642:	2900      	cmp	r1, #0
 8000644:	d103      	bne.n	800064e <__clzdi2+0xe>
 8000646:	f000 f807 	bl	8000658 <__clzsi2>
 800064a:	3020      	adds	r0, #32
 800064c:	e002      	b.n	8000654 <__clzdi2+0x14>
 800064e:	1c08      	adds	r0, r1, #0
 8000650:	f000 f802 	bl	8000658 <__clzsi2>
 8000654:	bd10      	pop	{r4, pc}
 8000656:	46c0      	nop			; (mov r8, r8)

08000658 <__clzsi2>:
 8000658:	211c      	movs	r1, #28
 800065a:	2301      	movs	r3, #1
 800065c:	041b      	lsls	r3, r3, #16
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0xe>
 8000662:	0c00      	lsrs	r0, r0, #16
 8000664:	3910      	subs	r1, #16
 8000666:	0a1b      	lsrs	r3, r3, #8
 8000668:	4298      	cmp	r0, r3
 800066a:	d301      	bcc.n	8000670 <__clzsi2+0x18>
 800066c:	0a00      	lsrs	r0, r0, #8
 800066e:	3908      	subs	r1, #8
 8000670:	091b      	lsrs	r3, r3, #4
 8000672:	4298      	cmp	r0, r3
 8000674:	d301      	bcc.n	800067a <__clzsi2+0x22>
 8000676:	0900      	lsrs	r0, r0, #4
 8000678:	3904      	subs	r1, #4
 800067a:	a202      	add	r2, pc, #8	; (adr r2, 8000684 <__clzsi2+0x2c>)
 800067c:	5c10      	ldrb	r0, [r2, r0]
 800067e:	1840      	adds	r0, r0, r1
 8000680:	4770      	bx	lr
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	02020304 	.word	0x02020304
 8000688:	01010101 	.word	0x01010101
	...

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000696:	b09d      	sub	sp, #116	; 0x74
 8000698:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	uint16_t ADC_VAL[5];
	char msg[80];

	pumahid.hat0 = 0x00;
 800069a:	4bd5      	ldr	r3, [pc, #852]	; (80009f0 <main+0x35c>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
	pumahid.hat1 = 0x00;
 80006a0:	4bd3      	ldr	r3, [pc, #844]	; (80009f0 <main+0x35c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	705a      	strb	r2, [r3, #1]
	pumahid.hat2 = 0x00;
 80006a6:	4bd2      	ldr	r3, [pc, #840]	; (80009f0 <main+0x35c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	709a      	strb	r2, [r3, #2]
	pumahid.key3 = 0x00;
 80006ac:	4bd0      	ldr	r3, [pc, #832]	; (80009f0 <main+0x35c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]
	pumahid.but0 = 0x00;
 80006b2:	4bcf      	ldr	r3, [pc, #828]	; (80009f0 <main+0x35c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	711a      	strb	r2, [r3, #4]
	pumahid.but1 = 0x00;
 80006b8:	4bcd      	ldr	r3, [pc, #820]	; (80009f0 <main+0x35c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	715a      	strb	r2, [r3, #5]
	pumahid.but2 = 0x00;
 80006be:	4bcc      	ldr	r3, [pc, #816]	; (80009f0 <main+0x35c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	719a      	strb	r2, [r3, #6]
	pumahid.but3 = 0x00;
 80006c4:	4bca      	ldr	r3, [pc, #808]	; (80009f0 <main+0x35c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	71da      	strb	r2, [r3, #7]
	pumahid.x = 0x0000;
 80006ca:	4bc9      	ldr	r3, [pc, #804]	; (80009f0 <main+0x35c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	811a      	strh	r2, [r3, #8]
	pumahid.y = 0x0000;
 80006d0:	4bc7      	ldr	r3, [pc, #796]	; (80009f0 <main+0x35c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	815a      	strh	r2, [r3, #10]
	pumahid.z = 0x0000;
 80006d6:	4bc6      	ldr	r3, [pc, #792]	; (80009f0 <main+0x35c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	819a      	strh	r2, [r3, #12]
	pumahid.rx = 0x0000;
 80006dc:	4bc4      	ldr	r3, [pc, #784]	; (80009f0 <main+0x35c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	81da      	strh	r2, [r3, #14]
	pumahid.ry = 0x0000;
 80006e2:	4bc3      	ldr	r3, [pc, #780]	; (80009f0 <main+0x35c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 fd52 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 fa3a 	bl	8000b64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f000 fb82 	bl	8000df8 <MX_GPIO_Init>
  MX_ADC_Init();
 80006f4:	f000 fab0 	bl	8000c58 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fb4e 	bl	8000d98 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80006fc:	f008 fcc0 	bl	8009080 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000700:	2380      	movs	r3, #128	; 0x80
 8000702:	00d9      	lsls	r1, r3, #3
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	2201      	movs	r2, #1
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fcd9 	bl	80020c2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	48b7      	ldr	r0, [pc, #732]	; (80009f4 <main+0x360>)
 8000716:	2200      	movs	r2, #0
 8000718:	0019      	movs	r1, r3
 800071a:	f001 fcd2 	bl	80020c2 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	4ab4      	ldr	r2, [pc, #720]	; (80009f4 <main+0x360>)
 8000724:	0019      	movs	r1, r3
 8000726:	0010      	movs	r0, r2
 8000728:	f001 fcae 	bl	8002088 <HAL_GPIO_ReadPin>
 800072c:	0003      	movs	r3, r0
 800072e:	001a      	movs	r2, r3
 8000730:	4bb1      	ldr	r3, [pc, #708]	; (80009f8 <main+0x364>)
 8000732:	701a      	strb	r2, [r3, #0]

	  BP_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000734:	4baf      	ldr	r3, [pc, #700]	; (80009f4 <main+0x360>)
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	0018      	movs	r0, r3
 800073a:	f001 fca5 	bl	8002088 <HAL_GPIO_ReadPin>
 800073e:	0003      	movs	r3, r0
 8000740:	001a      	movs	r2, r3
 8000742:	4bae      	ldr	r3, [pc, #696]	; (80009fc <main+0x368>)
 8000744:	701a      	strb	r2, [r3, #0]
	  BP_3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000746:	4bab      	ldr	r3, [pc, #684]	; (80009f4 <main+0x360>)
 8000748:	2120      	movs	r1, #32
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fc9c 	bl	8002088 <HAL_GPIO_ReadPin>
 8000750:	0003      	movs	r3, r0
 8000752:	001a      	movs	r2, r3
 8000754:	4baa      	ldr	r3, [pc, #680]	; (8000a00 <main+0x36c>)
 8000756:	701a      	strb	r2, [r3, #0]
	  hat_east = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000758:	4ba6      	ldr	r3, [pc, #664]	; (80009f4 <main+0x360>)
 800075a:	2110      	movs	r1, #16
 800075c:	0018      	movs	r0, r3
 800075e:	f001 fc93 	bl	8002088 <HAL_GPIO_ReadPin>
 8000762:	0003      	movs	r3, r0
 8000764:	001a      	movs	r2, r3
 8000766:	4ba7      	ldr	r3, [pc, #668]	; (8000a04 <main+0x370>)
 8000768:	701a      	strb	r2, [r3, #0]

	  hat_north = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 800076a:	4ba2      	ldr	r3, [pc, #648]	; (80009f4 <main+0x360>)
 800076c:	2108      	movs	r1, #8
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fc8a 	bl	8002088 <HAL_GPIO_ReadPin>
 8000774:	0003      	movs	r3, r0
 8000776:	001a      	movs	r2, r3
 8000778:	4ba3      	ldr	r3, [pc, #652]	; (8000a08 <main+0x374>)
 800077a:	701a      	strb	r2, [r3, #0]
	  hat_west = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	021a      	lsls	r2, r3, #8
 8000780:	23a0      	movs	r3, #160	; 0xa0
 8000782:	05db      	lsls	r3, r3, #23
 8000784:	0011      	movs	r1, r2
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fc7e 	bl	8002088 <HAL_GPIO_ReadPin>
 800078c:	0003      	movs	r3, r0
 800078e:	001a      	movs	r2, r3
 8000790:	4b9e      	ldr	r3, [pc, #632]	; (8000a0c <main+0x378>)
 8000792:	701a      	strb	r2, [r3, #0]

	  BP_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	009a      	lsls	r2, r3, #2
 8000798:	23a0      	movs	r3, #160	; 0xa0
 800079a:	05db      	lsls	r3, r3, #23
 800079c:	0011      	movs	r1, r2
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 fc72 	bl	8002088 <HAL_GPIO_ReadPin>
 80007a4:	0003      	movs	r3, r0
 80007a6:	001a      	movs	r2, r3
 80007a8:	4b99      	ldr	r3, [pc, #612]	; (8000a10 <main+0x37c>)
 80007aa:	701a      	strb	r2, [r3, #0]
	  BP_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	005a      	lsls	r2, r3, #1
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 fc66 	bl	8002088 <HAL_GPIO_ReadPin>
 80007bc:	0003      	movs	r3, r0
 80007be:	001a      	movs	r2, r3
 80007c0:	4b94      	ldr	r3, [pc, #592]	; (8000a14 <main+0x380>)
 80007c2:	701a      	strb	r2, [r3, #0]
	  hat_south = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	4a8a      	ldr	r2, [pc, #552]	; (80009f4 <main+0x360>)
 80007ca:	0019      	movs	r1, r3
 80007cc:	0010      	movs	r0, r2
 80007ce:	f001 fc5b 	bl	8002088 <HAL_GPIO_ReadPin>
 80007d2:	0003      	movs	r3, r0
 80007d4:	001a      	movs	r2, r3
 80007d6:	4b90      	ldr	r3, [pc, #576]	; (8000a18 <main+0x384>)
 80007d8:	701a      	strb	r2, [r3, #0]

	  BP_5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80007da:	2380      	movs	r3, #128	; 0x80
 80007dc:	019b      	lsls	r3, r3, #6
 80007de:	4a85      	ldr	r2, [pc, #532]	; (80009f4 <main+0x360>)
 80007e0:	0019      	movs	r1, r3
 80007e2:	0010      	movs	r0, r2
 80007e4:	f001 fc50 	bl	8002088 <HAL_GPIO_ReadPin>
 80007e8:	0003      	movs	r3, r0
 80007ea:	001a      	movs	r2, r3
 80007ec:	4b8b      	ldr	r3, [pc, #556]	; (8000a1c <main+0x388>)
 80007ee:	701a      	strb	r2, [r3, #0]
	  BP_6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 80007f0:	2380      	movs	r3, #128	; 0x80
 80007f2:	01db      	lsls	r3, r3, #7
 80007f4:	4a7f      	ldr	r2, [pc, #508]	; (80009f4 <main+0x360>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	0010      	movs	r0, r2
 80007fa:	f001 fc45 	bl	8002088 <HAL_GPIO_ReadPin>
 80007fe:	0003      	movs	r3, r0
 8000800:	001a      	movs	r2, r3
 8000802:	4b87      	ldr	r3, [pc, #540]	; (8000a20 <main+0x38c>)
 8000804:	701a      	strb	r2, [r3, #0]

	  BP_7 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 8000806:	2380      	movs	r3, #128	; 0x80
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	4a7a      	ldr	r2, [pc, #488]	; (80009f4 <main+0x360>)
 800080c:	0019      	movs	r1, r3
 800080e:	0010      	movs	r0, r2
 8000810:	f001 fc3a 	bl	8002088 <HAL_GPIO_ReadPin>
 8000814:	0003      	movs	r3, r0
 8000816:	001a      	movs	r2, r3
 8000818:	4b82      	ldr	r3, [pc, #520]	; (8000a24 <main+0x390>)
 800081a:	701a      	strb	r2, [r3, #0]
	  BP_8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	4a74      	ldr	r2, [pc, #464]	; (80009f4 <main+0x360>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f001 fc2f 	bl	8002088 <HAL_GPIO_ReadPin>
 800082a:	0003      	movs	r3, r0
 800082c:	001a      	movs	r2, r3
 800082e:	4b7e      	ldr	r3, [pc, #504]	; (8000a28 <main+0x394>)
 8000830:	701a      	strb	r2, [r3, #0]

	  BP_20 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000832:	4b70      	ldr	r3, [pc, #448]	; (80009f4 <main+0x360>)
 8000834:	2104      	movs	r1, #4
 8000836:	0018      	movs	r0, r3
 8000838:	f001 fc26 	bl	8002088 <HAL_GPIO_ReadPin>
 800083c:	0003      	movs	r3, r0
 800083e:	001a      	movs	r2, r3
 8000840:	4b7a      	ldr	r3, [pc, #488]	; (8000a2c <main+0x398>)
 8000842:	701a      	strb	r2, [r3, #0]
	  BP_11 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000844:	4b6b      	ldr	r3, [pc, #428]	; (80009f4 <main+0x360>)
 8000846:	2102      	movs	r1, #2
 8000848:	0018      	movs	r0, r3
 800084a:	f001 fc1d 	bl	8002088 <HAL_GPIO_ReadPin>
 800084e:	0003      	movs	r3, r0
 8000850:	001a      	movs	r2, r3
 8000852:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <main+0x39c>)
 8000854:	701a      	strb	r2, [r3, #0]
	  BP_21 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000856:	4b67      	ldr	r3, [pc, #412]	; (80009f4 <main+0x360>)
 8000858:	2101      	movs	r1, #1
 800085a:	0018      	movs	r0, r3
 800085c:	f001 fc14 	bl	8002088 <HAL_GPIO_ReadPin>
 8000860:	0003      	movs	r3, r0
 8000862:	001a      	movs	r2, r3
 8000864:	4b73      	ldr	r3, [pc, #460]	; (8000a34 <main+0x3a0>)
 8000866:	701a      	strb	r2, [r3, #0]
	  BP_30 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000868:	23a0      	movs	r3, #160	; 0xa0
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0018      	movs	r0, r3
 8000870:	f001 fc0a 	bl	8002088 <HAL_GPIO_ReadPin>
 8000874:	0003      	movs	r3, r0
 8000876:	001a      	movs	r2, r3
 8000878:	4b6f      	ldr	r3, [pc, #444]	; (8000a38 <main+0x3a4>)
 800087a:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start(&hadc);
 800087c:	4b6f      	ldr	r3, [pc, #444]	; (8000a3c <main+0x3a8>)
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fe8e 	bl	80015a0 <HAL_ADC_Start>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc);
 8000884:	4b6d      	ldr	r3, [pc, #436]	; (8000a3c <main+0x3a8>)
 8000886:	0018      	movs	r0, r3
 8000888:	f000 ffba 	bl	8001800 <HAL_ADC_GetValue>
 800088c:	0003      	movs	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	2454      	movs	r4, #84	; 0x54
 8000892:	193b      	adds	r3, r7, r4
 8000894:	801a      	strh	r2, [r3, #0]
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc);
 8000896:	4b69      	ldr	r3, [pc, #420]	; (8000a3c <main+0x3a8>)
 8000898:	0018      	movs	r0, r3
 800089a:	f000 ffb1 	bl	8001800 <HAL_ADC_GetValue>
 800089e:	0003      	movs	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	805a      	strh	r2, [r3, #2]
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc);
 80008a6:	4b65      	ldr	r3, [pc, #404]	; (8000a3c <main+0x3a8>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 ffa9 	bl	8001800 <HAL_ADC_GetValue>
 80008ae:	0003      	movs	r3, r0
 80008b0:	b29a      	uxth	r2, r3
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	809a      	strh	r2, [r3, #4]
	  ADC_VAL[3] = HAL_ADC_GetValue(&hadc);
 80008b6:	4b61      	ldr	r3, [pc, #388]	; (8000a3c <main+0x3a8>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 ffa1 	bl	8001800 <HAL_ADC_GetValue>
 80008be:	0003      	movs	r3, r0
 80008c0:	b29a      	uxth	r2, r3
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	80da      	strh	r2, [r3, #6]
	  ADC_VAL[4] = HAL_ADC_GetValue(&hadc);
 80008c6:	4b5d      	ldr	r3, [pc, #372]	; (8000a3c <main+0x3a8>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 ff99 	bl	8001800 <HAL_ADC_GetValue>
 80008ce:	0003      	movs	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	811a      	strh	r2, [r3, #8]
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80008d6:	2301      	movs	r3, #1
 80008d8:	425a      	negs	r2, r3
 80008da:	4b58      	ldr	r3, [pc, #352]	; (8000a3c <main+0x3a8>)
 80008dc:	0011      	movs	r1, r2
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fef2 	bl	80016c8 <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc);
 80008e4:	4b55      	ldr	r3, [pc, #340]	; (8000a3c <main+0x3a8>)
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 feae 	bl	8001648 <HAL_ADC_Stop>

	  //if (BP_5 == 0) pumahid.hat0 = 0x01;
	  //else pumahid.hat0 = 0x00;
	  //if (BP_6 == 0) pumahid.hat1 = 0x02;
	  //else pumahid.hat1 = 0x00;
	  if (hat_north == 0) pumahid.hat0 = 0;
 80008ec:	4b46      	ldr	r3, [pc, #280]	; (8000a08 <main+0x374>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d103      	bne.n	80008fc <main+0x268>
 80008f4:	4b3e      	ldr	r3, [pc, #248]	; (80009f0 <main+0x35c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e01a      	b.n	8000932 <main+0x29e>
	  else if (hat_west == 0) pumahid.hat0 = 6;
 80008fc:	4b43      	ldr	r3, [pc, #268]	; (8000a0c <main+0x378>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d103      	bne.n	800090c <main+0x278>
 8000904:	4b3a      	ldr	r3, [pc, #232]	; (80009f0 <main+0x35c>)
 8000906:	2206      	movs	r2, #6
 8000908:	701a      	strb	r2, [r3, #0]
 800090a:	e012      	b.n	8000932 <main+0x29e>
	  else if (hat_east == 0) pumahid.hat0 = 2;
 800090c:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <main+0x370>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <main+0x288>
 8000914:	4b36      	ldr	r3, [pc, #216]	; (80009f0 <main+0x35c>)
 8000916:	2202      	movs	r2, #2
 8000918:	701a      	strb	r2, [r3, #0]
 800091a:	e00a      	b.n	8000932 <main+0x29e>
	  else if (hat_south == 0) pumahid.hat0 = 4;
 800091c:	4b3e      	ldr	r3, [pc, #248]	; (8000a18 <main+0x384>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d103      	bne.n	800092c <main+0x298>
 8000924:	4b32      	ldr	r3, [pc, #200]	; (80009f0 <main+0x35c>)
 8000926:	2204      	movs	r2, #4
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e002      	b.n	8000932 <main+0x29e>
	  else pumahid.hat0 = 7;
 800092c:	4b30      	ldr	r3, [pc, #192]	; (80009f0 <main+0x35c>)
 800092e:	2207      	movs	r2, #7
 8000930:	701a      	strb	r2, [r3, #0]

	  if (BP_1 == 1) pumahid.but0 = 0x01;
 8000932:	4b32      	ldr	r3, [pc, #200]	; (80009fc <main+0x368>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d103      	bne.n	8000942 <main+0x2ae>
 800093a:	4b2d      	ldr	r3, [pc, #180]	; (80009f0 <main+0x35c>)
 800093c:	2201      	movs	r2, #1
 800093e:	711a      	strb	r2, [r3, #4]
 8000940:	e002      	b.n	8000948 <main+0x2b4>
	  else pumahid.but0 = 0x05;
 8000942:	4b2b      	ldr	r3, [pc, #172]	; (80009f0 <main+0x35c>)
 8000944:	2205      	movs	r2, #5
 8000946:	711a      	strb	r2, [r3, #4]
	  if (BP_3 == 1) pumahid.but0 = 0x03;
 8000948:	4b2d      	ldr	r3, [pc, #180]	; (8000a00 <main+0x36c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d103      	bne.n	8000958 <main+0x2c4>
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <main+0x35c>)
 8000952:	2203      	movs	r2, #3
 8000954:	711a      	strb	r2, [r3, #4]
 8000956:	e002      	b.n	800095e <main+0x2ca>
	  else pumahid.but0 = 0x05;
 8000958:	4b25      	ldr	r3, [pc, #148]	; (80009f0 <main+0x35c>)
 800095a:	2205      	movs	r2, #5
 800095c:	711a      	strb	r2, [r3, #4]

	  if (BP_2 == 1) pumahid.but1 = 0x01;
 800095e:	4b2c      	ldr	r3, [pc, #176]	; (8000a10 <main+0x37c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d103      	bne.n	800096e <main+0x2da>
 8000966:	4b22      	ldr	r3, [pc, #136]	; (80009f0 <main+0x35c>)
 8000968:	2201      	movs	r2, #1
 800096a:	715a      	strb	r2, [r3, #5]
 800096c:	e002      	b.n	8000974 <main+0x2e0>
	  else pumahid.but1 = 0x05;
 800096e:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <main+0x35c>)
 8000970:	2205      	movs	r2, #5
 8000972:	715a      	strb	r2, [r3, #5]
	  if (BP_4 == 1) pumahid.but1 = 0x03;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <main+0x380>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d103      	bne.n	8000984 <main+0x2f0>
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <main+0x35c>)
 800097e:	2203      	movs	r2, #3
 8000980:	715a      	strb	r2, [r3, #5]
 8000982:	e002      	b.n	800098a <main+0x2f6>
	  else pumahid.but1 = 0x05;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <main+0x35c>)
 8000986:	2205      	movs	r2, #5
 8000988:	715a      	strb	r2, [r3, #5]

	  if (BP_7 == 1) pumahid.but2 = 1;
 800098a:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <main+0x390>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d103      	bne.n	800099a <main+0x306>
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <main+0x35c>)
 8000994:	2201      	movs	r2, #1
 8000996:	719a      	strb	r2, [r3, #6]
 8000998:	e00a      	b.n	80009b0 <main+0x31c>
	  else if (BP_8 == 1) pumahid.but2 = 2;
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <main+0x394>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d103      	bne.n	80009aa <main+0x316>
 80009a2:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <main+0x35c>)
 80009a4:	2202      	movs	r2, #2
 80009a6:	719a      	strb	r2, [r3, #6]
 80009a8:	e002      	b.n	80009b0 <main+0x31c>
	  else pumahid.but2 = 3;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <main+0x35c>)
 80009ac:	2203      	movs	r2, #3
 80009ae:	719a      	strb	r2, [r3, #6]

	  if (BP_20 == 1) pumahid.but3 = 1;
 80009b0:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <main+0x398>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d103      	bne.n	80009c0 <main+0x32c>
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <main+0x35c>)
 80009ba:	2201      	movs	r2, #1
 80009bc:	71da      	strb	r2, [r3, #7]
 80009be:	e042      	b.n	8000a46 <main+0x3b2>
	  else if (BP_11 == 1) pumahid.but3 = 2;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <main+0x39c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d103      	bne.n	80009d0 <main+0x33c>
 80009c8:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <main+0x35c>)
 80009ca:	2202      	movs	r2, #2
 80009cc:	71da      	strb	r2, [r3, #7]
 80009ce:	e03a      	b.n	8000a46 <main+0x3b2>
	  else if (BP_21 == 1) pumahid.but3 = 3;
 80009d0:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <main+0x3a0>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d103      	bne.n	80009e0 <main+0x34c>
 80009d8:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <main+0x35c>)
 80009da:	2203      	movs	r2, #3
 80009dc:	71da      	strb	r2, [r3, #7]
 80009de:	e032      	b.n	8000a46 <main+0x3b2>
	  else if (BP_30 == 1) pumahid.but3 = 4;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <main+0x3a4>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d12b      	bne.n	8000a40 <main+0x3ac>
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <main+0x35c>)
 80009ea:	2204      	movs	r2, #4
 80009ec:	71da      	strb	r2, [r3, #7]
 80009ee:	e02a      	b.n	8000a46 <main+0x3b2>
 80009f0:	20000240 	.word	0x20000240
 80009f4:	50000400 	.word	0x50000400
 80009f8:	2000022a 	.word	0x2000022a
 80009fc:	20000239 	.word	0x20000239
 8000a00:	2000023e 	.word	0x2000023e
 8000a04:	2000022e 	.word	0x2000022e
 8000a08:	2000023d 	.word	0x2000023d
 8000a0c:	20000252 	.word	0x20000252
 8000a10:	2000022c 	.word	0x2000022c
 8000a14:	2000022f 	.word	0x2000022f
 8000a18:	2000023a 	.word	0x2000023a
 8000a1c:	20000238 	.word	0x20000238
 8000a20:	20000228 	.word	0x20000228
 8000a24:	20000229 	.word	0x20000229
 8000a28:	20000253 	.word	0x20000253
 8000a2c:	20000230 	.word	0x20000230
 8000a30:	2000022b 	.word	0x2000022b
 8000a34:	2000023b 	.word	0x2000023b
 8000a38:	2000023c 	.word	0x2000023c
 8000a3c:	200002d8 	.word	0x200002d8
	  else pumahid.but3 = 5;
 8000a40:	4b41      	ldr	r3, [pc, #260]	; (8000b48 <main+0x4b4>)
 8000a42:	2205      	movs	r2, #5
 8000a44:	71da      	strb	r2, [r3, #7]


	  ADC_VAL[0] -= 1620;					// AXE X
 8000a46:	2454      	movs	r4, #84	; 0x54
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	4a3f      	ldr	r2, [pc, #252]	; (8000b4c <main+0x4b8>)
 8000a4e:	4694      	mov	ip, r2
 8000a50:	4463      	add	r3, ip
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	193b      	adds	r3, r7, r4
 8000a56:	801a      	strh	r2, [r3, #0]
	  if (ADC_VAL[0] < 0) ADC_VAL[0] = 0;
	  ADC_VAL[0] = (ADC_VAL[0]*255)/600;
 8000a58:	193b      	adds	r3, r7, r4
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	0013      	movs	r3, r2
 8000a60:	021b      	lsls	r3, r3, #8
 8000a62:	1a9b      	subs	r3, r3, r2
 8000a64:	2296      	movs	r2, #150	; 0x96
 8000a66:	0091      	lsls	r1, r2, #2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fbe9 	bl	8000240 <__divsi3>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	b29a      	uxth	r2, r3
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	801a      	strh	r2, [r3, #0]

	  ADC_VAL[1] -= 1810;					// AXE Y
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	885b      	ldrh	r3, [r3, #2]
 8000a7a:	4a35      	ldr	r2, [pc, #212]	; (8000b50 <main+0x4bc>)
 8000a7c:	4694      	mov	ip, r2
 8000a7e:	4463      	add	r3, ip
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	805a      	strh	r2, [r3, #2]
	  if (ADC_VAL[1] < 0) ADC_VAL[1] = 0;
	  ADC_VAL[1] = (ADC_VAL[1]*255)/485;
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	885b      	ldrh	r3, [r3, #2]
 8000a8a:	001a      	movs	r2, r3
 8000a8c:	0013      	movs	r3, r2
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	1a9b      	subs	r3, r3, r2
 8000a92:	22e6      	movs	r2, #230	; 0xe6
 8000a94:	32ff      	adds	r2, #255	; 0xff
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fbd1 	bl	8000240 <__divsi3>
 8000a9e:	0003      	movs	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	805a      	strh	r2, [r3, #2]

	  ADC_VAL[2] -= 1870;					// AXE Z
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	889b      	ldrh	r3, [r3, #4]
 8000aaa:	4a2a      	ldr	r2, [pc, #168]	; (8000b54 <main+0x4c0>)
 8000aac:	4694      	mov	ip, r2
 8000aae:	4463      	add	r3, ip
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	809a      	strh	r2, [r3, #4]
	  if (ADC_VAL[3] < 0) ADC_VAL[2] = 0;
	  ADC_VAL[2] = (ADC_VAL[2]*255)/760;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	889b      	ldrh	r3, [r3, #4]
 8000aba:	001a      	movs	r2, r3
 8000abc:	0013      	movs	r3, r2
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	22be      	movs	r2, #190	; 0xbe
 8000ac4:	0091      	lsls	r1, r2, #2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f7ff fbba 	bl	8000240 <__divsi3>
 8000acc:	0003      	movs	r3, r0
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	809a      	strh	r2, [r3, #4]

	  /*ADC_VAL[4] -= 2320;					// COLLECTIVE Y ROTATION
	  if (ADC_VAL[4] < 0) ADC_VAL[4] = 0;
	  ADC_VAL[4] = (ADC_VAL[4]*255)/108;*/

	  pumahid.x = ADC_VAL[0];
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	881a      	ldrh	r2, [r3, #0]
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <main+0x4b4>)
 8000ada:	811a      	strh	r2, [r3, #8]
	  pumahid.y = ADC_VAL[1];
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	885a      	ldrh	r2, [r3, #2]
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <main+0x4b4>)
 8000ae2:	815a      	strh	r2, [r3, #10]
	  pumahid.z = ADC_VAL[2];
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	889a      	ldrh	r2, [r3, #4]
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <main+0x4b4>)
 8000aea:	819a      	strh	r2, [r3, #12]
	  //pumahid.rx = ADC_VAL[3];
	  //pumahid.ry = ADC_VAL[4];


	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));
 8000aec:	4916      	ldr	r1, [pc, #88]	; (8000b48 <main+0x4b4>)
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <main+0x4c4>)
 8000af0:	2212      	movs	r2, #18
 8000af2:	0018      	movs	r0, r3
 8000af4:	f006 ffec 	bl	8007ad0 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(10);
 8000af8:	200a      	movs	r0, #10
 8000afa:	f000 fbb9 	bl	8001270 <HAL_Delay>

	  sprintf(msg, "AXE X = %hu | AXE Y = %hu | AXE Z = %hu | PEDAL X = %hu | COLLECTIVE = %hu \n", ADC_VAL[0], ADC_VAL[1], ADC_VAL[2], ADC_VAL[3], ADC_VAL[4]);
 8000afe:	0021      	movs	r1, r4
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	001d      	movs	r5, r3
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	885b      	ldrh	r3, [r3, #2]
 8000b0a:	001e      	movs	r6, r3
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	889b      	ldrh	r3, [r3, #4]
 8000b10:	001a      	movs	r2, r3
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	88db      	ldrh	r3, [r3, #6]
 8000b16:	001c      	movs	r4, r3
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	891b      	ldrh	r3, [r3, #8]
 8000b1c:	490f      	ldr	r1, [pc, #60]	; (8000b5c <main+0x4c8>)
 8000b1e:	1d38      	adds	r0, r7, #4
 8000b20:	9302      	str	r3, [sp, #8]
 8000b22:	9401      	str	r4, [sp, #4]
 8000b24:	9200      	str	r2, [sp, #0]
 8000b26:	0033      	movs	r3, r6
 8000b28:	002a      	movs	r2, r5
 8000b2a:	f009 f845 	bl	8009bb8 <siprintf>
	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), HAL_MAX_DELAY);
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	0018      	movs	r0, r3
 8000b32:	f7ff fae9 	bl	8000108 <strlen>
 8000b36:	0003      	movs	r3, r0
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	425b      	negs	r3, r3
 8000b3e:	1d39      	adds	r1, r7, #4
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <main+0x4cc>)
 8000b42:	f004 f8f5 	bl	8004d30 <HAL_UART_Transmit>
	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000b46:	e5ea      	b.n	800071e <main+0x8a>
 8000b48:	20000240 	.word	0x20000240
 8000b4c:	fffff9ac 	.word	0xfffff9ac
 8000b50:	fffff8ee 	.word	0xfffff8ee
 8000b54:	fffff8b2 	.word	0xfffff8b2
 8000b58:	20000338 	.word	0x20000338
 8000b5c:	0800a2a8 	.word	0x0800a2a8
 8000b60:	20000254 	.word	0x20000254

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b590      	push	{r4, r7, lr}
 8000b66:	b09f      	sub	sp, #124	; 0x7c
 8000b68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	2440      	movs	r4, #64	; 0x40
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2338      	movs	r3, #56	; 0x38
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f008 ff5d 	bl	8009a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7a:	232c      	movs	r3, #44	; 0x2c
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	0018      	movs	r0, r3
 8000b80:	2314      	movs	r3, #20
 8000b82:	001a      	movs	r2, r3
 8000b84:	2100      	movs	r1, #0
 8000b86:	f008 ff55 	bl	8009a34 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	2328      	movs	r3, #40	; 0x28
 8000b90:	001a      	movs	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	f008 ff4e 	bl	8009a34 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b98:	4b2d      	ldr	r3, [pc, #180]	; (8000c50 <SystemClock_Config+0xec>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a2d      	ldr	r2, [pc, #180]	; (8000c54 <SystemClock_Config+0xf0>)
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <SystemClock_Config+0xec>)
 8000ba2:	2180      	movs	r1, #128	; 0x80
 8000ba4:	0109      	lsls	r1, r1, #4
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000baa:	0021      	movs	r1, r4
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2222      	movs	r2, #34	; 0x22
 8000bb0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2210      	movs	r2, #16
 8000bbc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2200      	movs	r2, #0
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	02d2      	lsls	r2, r2, #11
 8000bd6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000bd8:	187b      	adds	r3, r7, r1
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	03d2      	lsls	r2, r2, #15
 8000bde:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	0018      	movs	r0, r3
 8000be4:	f003 f8e4 	bl	8003db0 <HAL_RCC_OscConfig>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000bec:	f000 f9ac 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf0:	212c      	movs	r1, #44	; 0x2c
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	220f      	movs	r2, #15
 8000bf6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2101      	movs	r1, #1
 8000c14:	0018      	movs	r0, r3
 8000c16:	f003 fc9f 	bl	8004558 <HAL_RCC_ClockConfig>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000c1e:	f000 f993 	bl	8000f48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	2242      	movs	r2, #66	; 0x42
 8000c26:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2280      	movs	r2, #128	; 0x80
 8000c32:	04d2      	lsls	r2, r2, #19
 8000c34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f003 feb1 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c3e:	1e03      	subs	r3, r0, #0
 8000c40:	d001      	beq.n	8000c46 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000c42:	f000 f981 	bl	8000f48 <Error_Handler>
  }
}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	b01f      	add	sp, #124	; 0x7c
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	40007000 	.word	0x40007000
 8000c54:	ffffe7ff 	.word	0xffffe7ff

08000c58 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c5e:	003b      	movs	r3, r7
 8000c60:	0018      	movs	r0, r3
 8000c62:	2308      	movs	r3, #8
 8000c64:	001a      	movs	r2, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	f008 fee4 	bl	8009a34 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000c6c:	4b44      	ldr	r3, [pc, #272]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c6e:	4a45      	ldr	r2, [pc, #276]	; (8000d84 <MX_ADC_Init+0x12c>)
 8000c70:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000c72:	4b43      	ldr	r3, [pc, #268]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c78:	4b41      	ldr	r3, [pc, #260]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	05d2      	lsls	r2, r2, #23
 8000c7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000c80:	4b3f      	ldr	r3, [pc, #252]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c86:	4b3e      	ldr	r3, [pc, #248]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c92:	4b3b      	ldr	r3, [pc, #236]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000c98:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <MX_ADC_Init+0x128>)
 8000c9a:	2220      	movs	r2, #32
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ca0:	4b37      	ldr	r3, [pc, #220]	; (8000d80 <MX_ADC_Init+0x128>)
 8000ca2:	2221      	movs	r2, #33	; 0x21
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca8:	4b35      	ldr	r3, [pc, #212]	; (8000d80 <MX_ADC_Init+0x128>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cae:	4b34      	ldr	r3, [pc, #208]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cb0:	22c2      	movs	r2, #194	; 0xc2
 8000cb2:	32ff      	adds	r2, #255	; 0xff
 8000cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000cb6:	4b32      	ldr	r3, [pc, #200]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cb8:	222c      	movs	r2, #44	; 0x2c
 8000cba:	2100      	movs	r1, #0
 8000cbc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b30      	ldr	r3, [pc, #192]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cc4:	4b2e      	ldr	r3, [pc, #184]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <MX_ADC_Init+0x128>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000cd6:	4b2a      	ldr	r3, [pc, #168]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000cdc:	4b28      	ldr	r3, [pc, #160]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 faea 	bl	80012b8 <HAL_ADC_Init>
 8000ce4:	1e03      	subs	r3, r0, #0
 8000ce6:	d001      	beq.n	8000cec <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000ce8:	f000 f92e 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cec:	003b      	movs	r3, r7
 8000cee:	2201      	movs	r2, #1
 8000cf0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	2280      	movs	r2, #128	; 0x80
 8000cf6:	0152      	lsls	r2, r2, #5
 8000cf8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cfa:	003a      	movs	r2, r7
 8000cfc:	4b20      	ldr	r3, [pc, #128]	; (8000d80 <MX_ADC_Init+0x128>)
 8000cfe:	0011      	movs	r1, r2
 8000d00:	0018      	movs	r0, r3
 8000d02:	f000 fd89 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000d06:	1e03      	subs	r3, r0, #0
 8000d08:	d001      	beq.n	8000d0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000d0a:	f000 f91d 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d0e:	003b      	movs	r3, r7
 8000d10:	4a1d      	ldr	r2, [pc, #116]	; (8000d88 <MX_ADC_Init+0x130>)
 8000d12:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d14:	003a      	movs	r2, r7
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_ADC_Init+0x128>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 fd7c 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000d24:	f000 f910 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d28:	003b      	movs	r3, r7
 8000d2a:	4a18      	ldr	r2, [pc, #96]	; (8000d8c <MX_ADC_Init+0x134>)
 8000d2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d2e:	003a      	movs	r2, r7
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_ADC_Init+0x128>)
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fd6f 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000d3a:	1e03      	subs	r3, r0, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000d3e:	f000 f903 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d42:	003b      	movs	r3, r7
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <MX_ADC_Init+0x138>)
 8000d46:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d48:	003a      	movs	r2, r7
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_ADC_Init+0x128>)
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fd62 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000d58:	f000 f8f6 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d5c:	003b      	movs	r3, r7
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <MX_ADC_Init+0x13c>)
 8000d60:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d62:	003a      	movs	r2, r7
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_ADC_Init+0x128>)
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fd55 	bl	8001818 <HAL_ADC_ConfigChannel>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d001      	beq.n	8000d76 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000d72:	f000 f8e9 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	200002d8 	.word	0x200002d8
 8000d84:	40012400 	.word	0x40012400
 8000d88:	04000002 	.word	0x04000002
 8000d8c:	10000010 	.word	0x10000010
 8000d90:	14000020 	.word	0x14000020
 8000d94:	18000040 	.word	0x18000040

08000d98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d9c:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <MX_USART2_UART_Init+0x5c>)
 8000da0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000da4:	22e1      	movs	r2, #225	; 0xe1
 8000da6:	0252      	lsls	r2, r2, #9
 8000da8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dda:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <MX_USART2_UART_Init+0x58>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f003 ff53 	bl	8004c88 <HAL_UART_Init>
 8000de2:	1e03      	subs	r3, r0, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000de6:	f000 f8af 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000254 	.word	0x20000254
 8000df4:	40004400 	.word	0x40004400

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	240c      	movs	r4, #12
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	0018      	movs	r0, r3
 8000e04:	2314      	movs	r3, #20
 8000e06:	001a      	movs	r2, r3
 8000e08:	2100      	movs	r1, #0
 8000e0a:	f008 fe13 	bl	8009a34 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b4a      	ldr	r3, [pc, #296]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e12:	4b49      	ldr	r3, [pc, #292]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	430a      	orrs	r2, r1
 8000e18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e1a:	4b47      	ldr	r3, [pc, #284]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1e:	2201      	movs	r2, #1
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
 8000e24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b44      	ldr	r3, [pc, #272]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2a:	4b43      	ldr	r3, [pc, #268]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e32:	4b41      	ldr	r3, [pc, #260]	; (8000f38 <MX_GPIO_Init+0x140>)
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	2202      	movs	r2, #2
 8000e38:	4013      	ands	r3, r2
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000e3e:	2380      	movs	r3, #128	; 0x80
 8000e40:	00d9      	lsls	r1, r3, #3
 8000e42:	23a0      	movs	r3, #160	; 0xa0
 8000e44:	05db      	lsls	r3, r3, #23
 8000e46:	2200      	movs	r2, #0
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f001 f93a 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	483a      	ldr	r0, [pc, #232]	; (8000f3c <MX_GPIO_Init+0x144>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	0019      	movs	r1, r3
 8000e58:	f001 f933 	bl	80020c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	22e0      	movs	r2, #224	; 0xe0
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	193b      	adds	r3, r7, r4
 8000e66:	2200      	movs	r2, #0
 8000e68:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e6a:	193b      	adds	r3, r7, r4
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e70:	193a      	adds	r2, r7, r4
 8000e72:	23a0      	movs	r3, #160	; 0xa0
 8000e74:	05db      	lsls	r3, r3, #23
 8000e76:	0011      	movs	r1, r2
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f000 ff87 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB5
                           PB6 CH_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <MX_GPIO_Init+0x148>)
 8000e82:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5
                          |GPIO_PIN_6|CH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2200      	movs	r2, #0
 8000e88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <MX_GPIO_Init+0x144>)
 8000e94:	0019      	movs	r1, r3
 8000e96:	0010      	movs	r0, r2
 8000e98:	f000 ff78 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4;
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <MX_GPIO_Init+0x14c>)
 8000ea0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea2:	193b      	adds	r3, r7, r4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	2201      	movs	r2, #1
 8000eac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	193b      	adds	r3, r7, r4
 8000eb0:	4a22      	ldr	r2, [pc, #136]	; (8000f3c <MX_GPIO_Init+0x144>)
 8000eb2:	0019      	movs	r1, r3
 8000eb4:	0010      	movs	r0, r2
 8000eb6:	f000 ff69 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000eba:	0021      	movs	r1, r4
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	00d2      	lsls	r2, r2, #3
 8000ec2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	000c      	movs	r4, r1
 8000ec6:	193b      	adds	r3, r7, r4
 8000ec8:	2201      	movs	r2, #1
 8000eca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	193b      	adds	r3, r7, r4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed8:	193a      	adds	r2, r7, r4
 8000eda:	23a0      	movs	r3, #160	; 0xa0
 8000edc:	05db      	lsls	r3, r3, #23
 8000ede:	0011      	movs	r1, r2
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 ff53 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ee6:	193b      	adds	r3, r7, r4
 8000ee8:	2280      	movs	r2, #128	; 0x80
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	193a      	adds	r2, r7, r4
 8000efc:	23a0      	movs	r3, #160	; 0xa0
 8000efe:	05db      	lsls	r3, r3, #23
 8000f00:	0011      	movs	r1, r2
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 ff42 	bl	8001d8c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000f08:	0021      	movs	r1, r4
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	0092      	lsls	r2, r2, #2
 8000f10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2201      	movs	r2, #1
 8000f16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <MX_GPIO_Init+0x144>)
 8000f28:	0019      	movs	r1, r3
 8000f2a:	0010      	movs	r0, r2
 8000f2c:	f000 ff2e 	bl	8001d8c <HAL_GPIO_Init>

}
 8000f30:	46c0      	nop			; (mov r8, r8)
 8000f32:	46bd      	mov	sp, r7
 8000f34:	b009      	add	sp, #36	; 0x24
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	50000400 	.word	0x50000400
 8000f40:	00006d67 	.word	0x00006d67
 8000f44:	00008018 	.word	0x00008018

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_MspInit+0x24>)
 8000f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_MspInit+0x24>)
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <HAL_MspInit+0x24>)
 8000f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <HAL_MspInit+0x24>)
 8000f6a:	2180      	movs	r1, #128	; 0x80
 8000f6c:	0549      	lsls	r1, r1, #21
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b089      	sub	sp, #36	; 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	240c      	movs	r4, #12
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	0018      	movs	r0, r3
 8000f8a:	2314      	movs	r3, #20
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f008 fd50 	bl	8009a34 <memset>
  if(hadc->Instance==ADC1)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a14      	ldr	r2, [pc, #80]	; (8000fec <HAL_ADC_MspInit+0x70>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d122      	bne.n	8000fe4 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <HAL_ADC_MspInit+0x74>)
 8000fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_MspInit+0x74>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0089      	lsls	r1, r1, #2
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_ADC_MspInit+0x74>)
 8000fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_ADC_MspInit+0x74>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_ADC_MspInit+0x74>)
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	2273      	movs	r2, #115	; 0x73
 8000fc8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	193b      	adds	r3, r7, r4
 8000fcc:	2203      	movs	r2, #3
 8000fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	193a      	adds	r2, r7, r4
 8000fd8:	23a0      	movs	r3, #160	; 0xa0
 8000fda:	05db      	lsls	r3, r3, #23
 8000fdc:	0011      	movs	r1, r2
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fed4 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b009      	add	sp, #36	; 0x24
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	40012400 	.word	0x40012400
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b089      	sub	sp, #36	; 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	240c      	movs	r4, #12
 8000ffe:	193b      	adds	r3, r7, r4
 8001000:	0018      	movs	r0, r3
 8001002:	2314      	movs	r3, #20
 8001004:	001a      	movs	r2, r3
 8001006:	2100      	movs	r1, #0
 8001008:	f008 fd14 	bl	8009a34 <memset>
  if(huart->Instance==USART2)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_UART_MspInit+0x80>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d129      	bne.n	800106a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_UART_MspInit+0x84>)
 8001018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <HAL_UART_MspInit+0x84>)
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	0289      	lsls	r1, r1, #10
 8001020:	430a      	orrs	r2, r1
 8001022:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <HAL_UART_MspInit+0x84>)
 8001026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_UART_MspInit+0x84>)
 800102a:	2101      	movs	r1, #1
 800102c:	430a      	orrs	r2, r1
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_UART_MspInit+0x84>)
 8001032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001034:	2201      	movs	r2, #1
 8001036:	4013      	ands	r3, r2
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800103c:	0021      	movs	r1, r4
 800103e:	187b      	adds	r3, r7, r1
 8001040:	220c      	movs	r2, #12
 8001042:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	187b      	adds	r3, r7, r1
 8001046:	2202      	movs	r2, #2
 8001048:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	187b      	adds	r3, r7, r1
 800104c:	2200      	movs	r2, #0
 800104e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	187b      	adds	r3, r7, r1
 8001052:	2203      	movs	r2, #3
 8001054:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2204      	movs	r2, #4
 800105a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	187a      	adds	r2, r7, r1
 800105e:	23a0      	movs	r3, #160	; 0xa0
 8001060:	05db      	lsls	r3, r3, #23
 8001062:	0011      	movs	r1, r2
 8001064:	0018      	movs	r0, r3
 8001066:	f000 fe91 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	46bd      	mov	sp, r7
 800106e:	b009      	add	sp, #36	; 0x24
 8001070:	bd90      	pop	{r4, r7, pc}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40004400 	.word	0x40004400
 8001078:	40021000 	.word	0x40021000

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800108c:	46c0      	nop			; (mov r8, r8)
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}

0800109c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a0:	f000 f8ca 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80010b0:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <USB_IRQHandler+0x14>)
 80010b2:	0018      	movs	r0, r3
 80010b4:	f001 f958 	bl	8002368 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	200007fc 	.word	0x200007fc

080010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010cc:	4a14      	ldr	r2, [pc, #80]	; (8001120 <_sbrk+0x5c>)
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <_sbrk+0x60>)
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d102      	bne.n	80010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <_sbrk+0x64>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <_sbrk+0x68>)
 80010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <_sbrk+0x64>)
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	18d3      	adds	r3, r2, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d207      	bcs.n	8001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f4:	f008 fc60 	bl	80099b8 <__errno>
 80010f8:	0003      	movs	r3, r0
 80010fa:	220c      	movs	r2, #12
 80010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fe:	2301      	movs	r3, #1
 8001100:	425b      	negs	r3, r3
 8001102:	e009      	b.n	8001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <_sbrk+0x64>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110a:	4b07      	ldr	r3, [pc, #28]	; (8001128 <_sbrk+0x64>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	18d2      	adds	r2, r2, r3
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <_sbrk+0x64>)
 8001114:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001116:	68fb      	ldr	r3, [r7, #12]
}
 8001118:	0018      	movs	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	b006      	add	sp, #24
 800111e:	bd80      	pop	{r7, pc}
 8001120:	20005000 	.word	0x20005000
 8001124:	00000400 	.word	0x00000400
 8001128:	20000218 	.word	0x20000218
 800112c:	20000b00 	.word	0x20000b00

08001130 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001134:	46c0      	nop			; (mov r8, r8)
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800113e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x6>)
  ldr r1, =_edata
 8001142:	490e      	ldr	r1, [pc, #56]	; (800117c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <LoopForever+0xe>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001148:	e002      	b.n	8001150 <LoopCopyDataInit>

0800114a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800114c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114e:	3304      	adds	r3, #4

08001150 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001150:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001152:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001154:	d3f9      	bcc.n	800114a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001156:	4a0b      	ldr	r2, [pc, #44]	; (8001184 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001158:	4c0b      	ldr	r4, [pc, #44]	; (8001188 <LoopForever+0x16>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800115c:	e001      	b.n	8001162 <LoopFillZerobss>

0800115e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001160:	3204      	adds	r2, #4

08001162 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001162:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001164:	d3fb      	bcc.n	800115e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001166:	f7ff ffe3 	bl	8001130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800116a:	f008 fc2b 	bl	80099c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fa91 	bl	8000694 <main>

08001172 <LoopForever>:

LoopForever:
    b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
   ldr   r0, =_estack
 8001174:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001180:	0800a498 	.word	0x0800a498
  ldr r2, =_sbss
 8001184:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001188:	20000b00 	.word	0x20000b00

0800118c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC1_COMP_IRQHandler>
	...

08001190 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_Init+0x3c>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <HAL_Init+0x3c>)
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	430a      	orrs	r2, r1
 80011a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f811 	bl	80011d0 <HAL_InitTick>
 80011ae:	1e03      	subs	r3, r0, #0
 80011b0:	d003      	beq.n	80011ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	2201      	movs	r2, #1
 80011b6:	701a      	strb	r2, [r3, #0]
 80011b8:	e001      	b.n	80011be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ba:	f7ff fecb 	bl	8000f54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b002      	add	sp, #8
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_InitTick+0x5c>)
 80011da:	681c      	ldr	r4, [r3, #0]
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <HAL_InitTick+0x60>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	0019      	movs	r1, r3
 80011e2:	23fa      	movs	r3, #250	; 0xfa
 80011e4:	0098      	lsls	r0, r3, #2
 80011e6:	f7fe ffa1 	bl	800012c <__udivsi3>
 80011ea:	0003      	movs	r3, r0
 80011ec:	0019      	movs	r1, r3
 80011ee:	0020      	movs	r0, r4
 80011f0:	f7fe ff9c 	bl	800012c <__udivsi3>
 80011f4:	0003      	movs	r3, r0
 80011f6:	0018      	movs	r0, r3
 80011f8:	f000 fdbb 	bl	8001d72 <HAL_SYSTICK_Config>
 80011fc:	1e03      	subs	r3, r0, #0
 80011fe:	d001      	beq.n	8001204 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e00f      	b.n	8001224 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b03      	cmp	r3, #3
 8001208:	d80b      	bhi.n	8001222 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	2301      	movs	r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	2200      	movs	r2, #0
 8001212:	0018      	movs	r0, r3
 8001214:	f000 fd88 	bl	8001d28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_InitTick+0x64>)
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	e000      	b.n	8001224 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b003      	add	sp, #12
 800122a:	bd90      	pop	{r4, r7, pc}
 800122c:	20000000 	.word	0x20000000
 8001230:	20000008 	.word	0x20000008
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800123c:	4b05      	ldr	r3, [pc, #20]	; (8001254 <HAL_IncTick+0x1c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	001a      	movs	r2, r3
 8001242:	4b05      	ldr	r3, [pc, #20]	; (8001258 <HAL_IncTick+0x20>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	18d2      	adds	r2, r2, r3
 8001248:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_IncTick+0x20>)
 800124a:	601a      	str	r2, [r3, #0]
}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	20000008 	.word	0x20000008
 8001258:	20000334 	.word	0x20000334

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <HAL_GetTick+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	20000334 	.word	0x20000334

08001270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001278:	f7ff fff0 	bl	800125c <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	3301      	adds	r3, #1
 8001288:	d005      	beq.n	8001296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_Delay+0x44>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	001a      	movs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	189b      	adds	r3, r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	f7ff ffe0 	bl	800125c <HAL_GetTick>
 800129c:	0002      	movs	r2, r0
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d8f7      	bhi.n	8001298 <HAL_Delay+0x28>
  {
  }
}
 80012a8:	46c0      	nop			; (mov r8, r8)
 80012aa:	46c0      	nop			; (mov r8, r8)
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b004      	add	sp, #16
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	20000008 	.word	0x20000008

080012b8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e159      	b.n	800157e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10a      	bne.n	80012e8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2250      	movs	r2, #80	; 0x50
 80012dc:	2100      	movs	r1, #0
 80012de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff fe4a 	bl	8000f7c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ec:	2210      	movs	r2, #16
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b10      	cmp	r3, #16
 80012f2:	d005      	beq.n	8001300 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2204      	movs	r2, #4
 80012fc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80012fe:	d00b      	beq.n	8001318 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001304:	2210      	movs	r2, #16
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2250      	movs	r2, #80	; 0x50
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e132      	b.n	800157e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800131c:	4a9a      	ldr	r2, [pc, #616]	; (8001588 <HAL_ADC_Init+0x2d0>)
 800131e:	4013      	ands	r3, r2
 8001320:	2202      	movs	r2, #2
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	2203      	movs	r2, #3
 8001330:	4013      	ands	r3, r2
 8001332:	2b01      	cmp	r3, #1
 8001334:	d108      	bne.n	8001348 <HAL_ADC_Init+0x90>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	2b01      	cmp	r3, #1
 8001342:	d101      	bne.n	8001348 <HAL_ADC_Init+0x90>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_ADC_Init+0x92>
 8001348:	2300      	movs	r3, #0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d149      	bne.n	80013e2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	061b      	lsls	r3, r3, #24
 8001356:	429a      	cmp	r2, r3
 8001358:	d00b      	beq.n	8001372 <HAL_ADC_Init+0xba>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	2380      	movs	r3, #128	; 0x80
 8001360:	05db      	lsls	r3, r3, #23
 8001362:	429a      	cmp	r2, r3
 8001364:	d005      	beq.n	8001372 <HAL_ADC_Init+0xba>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	2380      	movs	r3, #128	; 0x80
 800136c:	061b      	lsls	r3, r3, #24
 800136e:	429a      	cmp	r2, r3
 8001370:	d111      	bne.n	8001396 <HAL_ADC_Init+0xde>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	691a      	ldr	r2, [r3, #16]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	0892      	lsrs	r2, r2, #2
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6919      	ldr	r1, [r3, #16]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	611a      	str	r2, [r3, #16]
 8001394:	e014      	b.n	80013c0 <HAL_ADC_Init+0x108>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	0892      	lsrs	r2, r2, #2
 80013a4:	611a      	str	r2, [r3, #16]
 80013a6:	4b79      	ldr	r3, [pc, #484]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013ac:	4978      	ldr	r1, [pc, #480]	; (8001590 <HAL_ADC_Init+0x2d8>)
 80013ae:	400a      	ands	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	4b76      	ldr	r3, [pc, #472]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013b4:	6819      	ldr	r1, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4b74      	ldr	r3, [pc, #464]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68da      	ldr	r2, [r3, #12]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2118      	movs	r1, #24
 80013cc:	438a      	bics	r2, r1
 80013ce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	68d9      	ldr	r1, [r3, #12]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80013e2:	4b6a      	ldr	r3, [pc, #424]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	4b69      	ldr	r3, [pc, #420]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013e8:	496a      	ldr	r1, [pc, #424]	; (8001594 <HAL_ADC_Init+0x2dc>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80013ee:	4b67      	ldr	r3, [pc, #412]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013f0:	6819      	ldr	r1, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	065a      	lsls	r2, r3, #25
 80013f8:	4b64      	ldr	r3, [pc, #400]	; (800158c <HAL_ADC_Init+0x2d4>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	689a      	ldr	r2, [r3, #8]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	055b      	lsls	r3, r3, #21
 8001408:	4013      	ands	r3, r2
 800140a:	d108      	bne.n	800141e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	689a      	ldr	r2, [r3, #8]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	0549      	lsls	r1, r1, #21
 800141a:	430a      	orrs	r2, r1
 800141c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	495b      	ldr	r1, [pc, #364]	; (8001598 <HAL_ADC_Init+0x2e0>)
 800142a:	400a      	ands	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68d9      	ldr	r1, [r3, #12]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	2b02      	cmp	r3, #2
 800143e:	d101      	bne.n	8001444 <HAL_ADC_Init+0x18c>
 8001440:	2304      	movs	r3, #4
 8001442:	e000      	b.n	8001446 <HAL_ADC_Init+0x18e>
 8001444:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001446:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2020      	movs	r0, #32
 800144c:	5c1b      	ldrb	r3, [r3, r0]
 800144e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001450:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	202c      	movs	r0, #44	; 0x2c
 8001456:	5c1b      	ldrb	r3, [r3, r0]
 8001458:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800145a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001460:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001468:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001470:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800147e:	23c2      	movs	r3, #194	; 0xc2
 8001480:	33ff      	adds	r3, #255	; 0xff
 8001482:	429a      	cmp	r2, r3
 8001484:	d00b      	beq.n	800149e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68d9      	ldr	r1, [r3, #12]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2221      	movs	r2, #33	; 0x21
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d11a      	bne.n	80014de <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2220      	movs	r2, #32
 80014ac:	5c9b      	ldrb	r3, [r3, r2]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d109      	bne.n	80014c6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2180      	movs	r1, #128	; 0x80
 80014be:	0249      	lsls	r1, r1, #9
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]
 80014c4:	e00b      	b.n	80014de <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	2220      	movs	r2, #32
 80014cc:	431a      	orrs	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	2201      	movs	r2, #1
 80014d8:	431a      	orrs	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d11f      	bne.n	8001526 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	691a      	ldr	r2, [r3, #16]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	492a      	ldr	r1, [pc, #168]	; (800159c <HAL_ADC_Init+0x2e4>)
 80014f2:	400a      	ands	r2, r1
 80014f4:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	6919      	ldr	r1, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001504:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800150a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	691a      	ldr	r2, [r3, #16]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2101      	movs	r1, #1
 8001520:	430a      	orrs	r2, r1
 8001522:	611a      	str	r2, [r3, #16]
 8001524:	e00e      	b.n	8001544 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	691b      	ldr	r3, [r3, #16]
 800152c:	2201      	movs	r2, #1
 800152e:	4013      	ands	r3, r2
 8001530:	2b01      	cmp	r3, #1
 8001532:	d107      	bne.n	8001544 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2101      	movs	r1, #1
 8001540:	438a      	bics	r2, r1
 8001542:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2107      	movs	r1, #7
 8001550:	438a      	bics	r2, r1
 8001552:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6959      	ldr	r1, [r3, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001570:	2203      	movs	r2, #3
 8001572:	4393      	bics	r3, r2
 8001574:	2201      	movs	r2, #1
 8001576:	431a      	orrs	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	fffffefd 	.word	0xfffffefd
 800158c:	40012708 	.word	0x40012708
 8001590:	ffc3ffff 	.word	0xffc3ffff
 8001594:	fdffffff 	.word	0xfdffffff
 8001598:	fffe0219 	.word	0xfffe0219
 800159c:	fffffc03 	.word	0xfffffc03

080015a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2204      	movs	r2, #4
 80015b8:	4013      	ands	r3, r2
 80015ba:	d138      	bne.n	800162e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2250      	movs	r2, #80	; 0x50
 80015c0:	5c9b      	ldrb	r3, [r3, r2]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <HAL_ADC_Start+0x2a>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e038      	b.n	800163c <HAL_ADC_Start+0x9c>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2250      	movs	r2, #80	; 0x50
 80015ce:	2101      	movs	r1, #1
 80015d0:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d007      	beq.n	80015ea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80015da:	230f      	movs	r3, #15
 80015dc:	18fc      	adds	r4, r7, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f000 f9b9 	bl	8001958 <ADC_Enable>
 80015e6:	0003      	movs	r3, r0
 80015e8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80015ea:	230f      	movs	r3, #15
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d120      	bne.n	8001636 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_ADC_Start+0xa4>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0052      	lsls	r2, r2, #1
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2250      	movs	r2, #80	; 0x50
 8001610:	2100      	movs	r1, #0
 8001612:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	221c      	movs	r2, #28
 800161a:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2104      	movs	r1, #4
 8001628:	430a      	orrs	r2, r1
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e003      	b.n	8001636 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800162e:	230f      	movs	r3, #15
 8001630:	18fb      	adds	r3, r7, r3
 8001632:	2202      	movs	r2, #2
 8001634:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001636:	230f      	movs	r3, #15
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	781b      	ldrb	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b005      	add	sp, #20
 8001642:	bd90      	pop	{r4, r7, pc}
 8001644:	fffff0fe 	.word	0xfffff0fe

08001648 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001650:	230f      	movs	r3, #15
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2250      	movs	r2, #80	; 0x50
 800165c:	5c9b      	ldrb	r3, [r3, r2]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d101      	bne.n	8001666 <HAL_ADC_Stop+0x1e>
 8001662:	2302      	movs	r3, #2
 8001664:	e029      	b.n	80016ba <HAL_ADC_Stop+0x72>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2250      	movs	r2, #80	; 0x50
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800166e:	250f      	movs	r5, #15
 8001670:	197c      	adds	r4, r7, r5
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	0018      	movs	r0, r3
 8001676:	f000 fa3e 	bl	8001af6 <ADC_ConversionStop>
 800167a:	0003      	movs	r3, r0
 800167c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800167e:	197b      	adds	r3, r7, r5
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d112      	bne.n	80016ac <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001686:	197c      	adds	r4, r7, r5
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	0018      	movs	r0, r3
 800168c:	f000 f9cc 	bl	8001a28 <ADC_Disable>
 8001690:	0003      	movs	r3, r0
 8001692:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001694:	197b      	adds	r3, r7, r5
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d107      	bne.n	80016ac <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	4a08      	ldr	r2, [pc, #32]	; (80016c4 <HAL_ADC_Stop+0x7c>)
 80016a2:	4013      	ands	r3, r2
 80016a4:	2201      	movs	r2, #1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2250      	movs	r2, #80	; 0x50
 80016b0:	2100      	movs	r1, #0
 80016b2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	781b      	ldrb	r3, [r3, #0]
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b004      	add	sp, #16
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	fffffefe 	.word	0xfffffefe

080016c8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	2b08      	cmp	r3, #8
 80016e0:	d102      	bne.n	80016e8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80016e2:	2308      	movs	r3, #8
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	e014      	b.n	8001712 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	4013      	ands	r3, r2
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10b      	bne.n	800170e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fa:	2220      	movs	r2, #32
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2250      	movs	r2, #80	; 0x50
 8001706:	2100      	movs	r1, #0
 8001708:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e072      	b.n	80017f4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800170e:	230c      	movs	r3, #12
 8001710:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001712:	f7ff fda3 	bl	800125c <HAL_GetTick>
 8001716:	0003      	movs	r3, r0
 8001718:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800171a:	e01f      	b.n	800175c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	d01c      	beq.n	800175c <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d007      	beq.n	8001738 <HAL_ADC_PollForConversion+0x70>
 8001728:	f7ff fd98 	bl	800125c <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d211      	bcs.n	800175c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4013      	ands	r3, r2
 8001742:	d10b      	bne.n	800175c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	2204      	movs	r2, #4
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2250      	movs	r2, #80	; 0x50
 8001754:	2100      	movs	r1, #0
 8001756:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e04b      	b.n	80017f4 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	d0d9      	beq.n	800171c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176c:	2280      	movs	r2, #128	; 0x80
 800176e:	0092      	lsls	r2, r2, #2
 8001770:	431a      	orrs	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68da      	ldr	r2, [r3, #12]
 800177c:	23c0      	movs	r3, #192	; 0xc0
 800177e:	011b      	lsls	r3, r3, #4
 8001780:	4013      	ands	r3, r2
 8001782:	d12e      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2220      	movs	r2, #32
 8001788:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800178a:	2b00      	cmp	r3, #0
 800178c:	d129      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2208      	movs	r2, #8
 8001796:	4013      	ands	r3, r2
 8001798:	2b08      	cmp	r3, #8
 800179a:	d122      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d110      	bne.n	80017ca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	210c      	movs	r1, #12
 80017b4:	438a      	bics	r2, r1
 80017b6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017bc:	4a0f      	ldr	r2, [pc, #60]	; (80017fc <HAL_ADC_PollForConversion+0x134>)
 80017be:	4013      	ands	r3, r2
 80017c0:	2201      	movs	r2, #1
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	; 0x54
 80017c8:	e00b      	b.n	80017e2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	2220      	movs	r2, #32
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	2201      	movs	r2, #1
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d103      	bne.n	80017f2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	0018      	movs	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	b004      	add	sp, #16
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	fffffefe 	.word	0xfffffefe

08001800 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b002      	add	sp, #8
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2250      	movs	r2, #80	; 0x50
 8001826:	5c9b      	ldrb	r3, [r3, r2]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <HAL_ADC_ConfigChannel+0x18>
 800182c:	2302      	movs	r3, #2
 800182e:	e085      	b.n	800193c <HAL_ADC_ConfigChannel+0x124>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2250      	movs	r2, #80	; 0x50
 8001834:	2101      	movs	r1, #1
 8001836:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2204      	movs	r2, #4
 8001840:	4013      	ands	r3, r2
 8001842:	d00b      	beq.n	800185c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	2220      	movs	r2, #32
 800184a:	431a      	orrs	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2250      	movs	r2, #80	; 0x50
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e06f      	b.n	800193c <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	4a38      	ldr	r2, [pc, #224]	; (8001944 <HAL_ADC_ConfigChannel+0x12c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d035      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	035b      	lsls	r3, r3, #13
 8001872:	0b5a      	lsrs	r2, r3, #13
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	02db      	lsls	r3, r3, #11
 8001884:	4013      	ands	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001888:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 800188e:	2180      	movs	r1, #128	; 0x80
 8001890:	0409      	lsls	r1, r1, #16
 8001892:	430a      	orrs	r2, r1
 8001894:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001896:	200a      	movs	r0, #10
 8001898:	f000 f97a 	bl	8001b90 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	029b      	lsls	r3, r3, #10
 80018a4:	4013      	ands	r3, r2
 80018a6:	d006      	beq.n	80018b6 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80018a8:	4b27      	ldr	r3, [pc, #156]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 80018ae:	2180      	movs	r1, #128	; 0x80
 80018b0:	03c9      	lsls	r1, r1, #15
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	025b      	lsls	r3, r3, #9
 80018be:	4013      	ands	r3, r2
 80018c0:	d037      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80018c2:	4b21      	ldr	r3, [pc, #132]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0449      	lsls	r1, r1, #17
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	e02f      	b.n	8001932 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	035b      	lsls	r3, r3, #13
 80018de:	0b5b      	lsrs	r3, r3, #13
 80018e0:	43d9      	mvns	r1, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	02db      	lsls	r3, r3, #11
 80018f2:	4013      	ands	r3, r2
 80018f4:	d005      	beq.n	8001902 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 80018fc:	4913      	ldr	r1, [pc, #76]	; (800194c <HAL_ADC_ConfigChannel+0x134>)
 80018fe:	400a      	ands	r2, r1
 8001900:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	029b      	lsls	r3, r3, #10
 800190a:	4013      	ands	r3, r2
 800190c:	d005      	beq.n	800191a <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 8001914:	490e      	ldr	r1, [pc, #56]	; (8001950 <HAL_ADC_ConfigChannel+0x138>)
 8001916:	400a      	ands	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	4013      	ands	r3, r2
 8001924:	d005      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b07      	ldr	r3, [pc, #28]	; (8001948 <HAL_ADC_ConfigChannel+0x130>)
 800192c:	4909      	ldr	r1, [pc, #36]	; (8001954 <HAL_ADC_ConfigChannel+0x13c>)
 800192e:	400a      	ands	r2, r1
 8001930:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2250      	movs	r2, #80	; 0x50
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}
 8001944:	00001001 	.word	0x00001001
 8001948:	40012708 	.word	0x40012708
 800194c:	ff7fffff 	.word	0xff7fffff
 8001950:	ffbfffff 	.word	0xffbfffff
 8001954:	feffffff 	.word	0xfeffffff

08001958 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2203      	movs	r2, #3
 800196c:	4013      	ands	r3, r2
 800196e:	2b01      	cmp	r3, #1
 8001970:	d108      	bne.n	8001984 <ADC_Enable+0x2c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	2b01      	cmp	r3, #1
 800197e:	d101      	bne.n	8001984 <ADC_Enable+0x2c>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <ADC_Enable+0x2e>
 8001984:	2300      	movs	r3, #0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d146      	bne.n	8001a18 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	4a24      	ldr	r2, [pc, #144]	; (8001a24 <ADC_Enable+0xcc>)
 8001992:	4013      	ands	r3, r2
 8001994:	d00d      	beq.n	80019b2 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199a:	2210      	movs	r2, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a6:	2201      	movs	r2, #1
 80019a8:	431a      	orrs	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e033      	b.n	8001a1a <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f000 f8e4 	bl	8001b90 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80019c8:	f7ff fc48 	bl	800125c <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019d0:	e01b      	b.n	8001a0a <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019d2:	f7ff fc43 	bl	800125c <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b0a      	cmp	r3, #10
 80019de:	d914      	bls.n	8001a0a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d00d      	beq.n	8001a0a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	2210      	movs	r2, #16
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	2201      	movs	r2, #1
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e007      	b.n	8001a1a <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	4013      	ands	r3, r2
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d1dc      	bne.n	80019d2 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	80000017 	.word	0x80000017

08001a28 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d108      	bne.n	8001a54 <ADC_Disable+0x2c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <ADC_Disable+0x2c>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <ADC_Disable+0x2e>
 8001a54:	2300      	movs	r3, #0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d048      	beq.n	8001aec <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2205      	movs	r2, #5
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d110      	bne.n	8001a8a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2102      	movs	r1, #2
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a80:	f7ff fbec 	bl	800125c <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a88:	e029      	b.n	8001ade <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	2210      	movs	r2, #16
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e023      	b.n	8001aee <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aa6:	f7ff fbd9 	bl	800125c <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b0a      	cmp	r3, #10
 8001ab2:	d914      	bls.n	8001ade <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2201      	movs	r2, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d10d      	bne.n	8001ade <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e007      	b.n	8001aee <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d0dc      	beq.n	8001aa6 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d03a      	beq.n	8001b84 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2204      	movs	r2, #4
 8001b16:	4013      	ands	r3, r2
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d10d      	bne.n	8001b38 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2202      	movs	r2, #2
 8001b24:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001b26:	d107      	bne.n	8001b38 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2110      	movs	r1, #16
 8001b34:	430a      	orrs	r2, r1
 8001b36:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b38:	f7ff fb90 	bl	800125c <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b40:	e01a      	b.n	8001b78 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001b42:	f7ff fb8b 	bl	800125c <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b0a      	cmp	r3, #10
 8001b4e:	d913      	bls.n	8001b78 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d00d      	beq.n	8001b78 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b60:	2210      	movs	r2, #16
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e006      	b.n	8001b86 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	4013      	ands	r3, r2
 8001b82:	d1de      	bne.n	8001b42 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	0018      	movs	r0, r3
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	b004      	add	sp, #16
 8001b8c:	bd80      	pop	{r7, pc}
	...

08001b90 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <ADC_DelayMicroSecond+0x38>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	490b      	ldr	r1, [pc, #44]	; (8001bcc <ADC_DelayMicroSecond+0x3c>)
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	f7fe fac4 	bl	800012c <__udivsi3>
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4353      	muls	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001bae:	e002      	b.n	8001bb6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f9      	bne.n	8001bb0 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46c0      	nop			; (mov r8, r8)
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	000f4240 	.word	0x000f4240

08001bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	1dfb      	adds	r3, r7, #7
 8001bda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bdc:	1dfb      	adds	r3, r7, #7
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b7f      	cmp	r3, #127	; 0x7f
 8001be2:	d809      	bhi.n	8001bf8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be4:	1dfb      	adds	r3, r7, #7
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	001a      	movs	r2, r3
 8001bea:	231f      	movs	r3, #31
 8001bec:	401a      	ands	r2, r3
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <__NVIC_EnableIRQ+0x30>)
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4091      	lsls	r1, r2
 8001bf4:	000a      	movs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]
  }
}
 8001bf8:	46c0      	nop			; (mov r8, r8)
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	b002      	add	sp, #8
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	e000e100 	.word	0xe000e100

08001c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c04:	b590      	push	{r4, r7, lr}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	0002      	movs	r2, r0
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b7f      	cmp	r3, #127	; 0x7f
 8001c18:	d828      	bhi.n	8001c6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c1a:	4a2f      	ldr	r2, [pc, #188]	; (8001cd8 <__NVIC_SetPriority+0xd4>)
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	b25b      	sxtb	r3, r3
 8001c22:	089b      	lsrs	r3, r3, #2
 8001c24:	33c0      	adds	r3, #192	; 0xc0
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	589b      	ldr	r3, [r3, r2]
 8001c2a:	1dfa      	adds	r2, r7, #7
 8001c2c:	7812      	ldrb	r2, [r2, #0]
 8001c2e:	0011      	movs	r1, r2
 8001c30:	2203      	movs	r2, #3
 8001c32:	400a      	ands	r2, r1
 8001c34:	00d2      	lsls	r2, r2, #3
 8001c36:	21ff      	movs	r1, #255	; 0xff
 8001c38:	4091      	lsls	r1, r2
 8001c3a:	000a      	movs	r2, r1
 8001c3c:	43d2      	mvns	r2, r2
 8001c3e:	401a      	ands	r2, r3
 8001c40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	22ff      	movs	r2, #255	; 0xff
 8001c48:	401a      	ands	r2, r3
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	0018      	movs	r0, r3
 8001c50:	2303      	movs	r3, #3
 8001c52:	4003      	ands	r3, r0
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c58:	481f      	ldr	r0, [pc, #124]	; (8001cd8 <__NVIC_SetPriority+0xd4>)
 8001c5a:	1dfb      	adds	r3, r7, #7
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	b25b      	sxtb	r3, r3
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	430a      	orrs	r2, r1
 8001c64:	33c0      	adds	r3, #192	; 0xc0
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c6a:	e031      	b.n	8001cd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c6c:	4a1b      	ldr	r2, [pc, #108]	; (8001cdc <__NVIC_SetPriority+0xd8>)
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	0019      	movs	r1, r3
 8001c74:	230f      	movs	r3, #15
 8001c76:	400b      	ands	r3, r1
 8001c78:	3b08      	subs	r3, #8
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3306      	adds	r3, #6
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	18d3      	adds	r3, r2, r3
 8001c82:	3304      	adds	r3, #4
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	1dfa      	adds	r2, r7, #7
 8001c88:	7812      	ldrb	r2, [r2, #0]
 8001c8a:	0011      	movs	r1, r2
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	400a      	ands	r2, r1
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	21ff      	movs	r1, #255	; 0xff
 8001c94:	4091      	lsls	r1, r2
 8001c96:	000a      	movs	r2, r1
 8001c98:	43d2      	mvns	r2, r2
 8001c9a:	401a      	ands	r2, r3
 8001c9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	019b      	lsls	r3, r3, #6
 8001ca2:	22ff      	movs	r2, #255	; 0xff
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	0018      	movs	r0, r3
 8001cac:	2303      	movs	r3, #3
 8001cae:	4003      	ands	r3, r0
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cb4:	4809      	ldr	r0, [pc, #36]	; (8001cdc <__NVIC_SetPriority+0xd8>)
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	001c      	movs	r4, r3
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	4023      	ands	r3, r4
 8001cc0:	3b08      	subs	r3, #8
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	3306      	adds	r3, #6
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	18c3      	adds	r3, r0, r3
 8001ccc:	3304      	adds	r3, #4
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b003      	add	sp, #12
 8001cd6:	bd90      	pop	{r4, r7, pc}
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	1e5a      	subs	r2, r3, #1
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	045b      	lsls	r3, r3, #17
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d301      	bcc.n	8001cf8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e010      	b.n	8001d1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <SysTick_Config+0x44>)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	3a01      	subs	r2, #1
 8001cfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d00:	2301      	movs	r3, #1
 8001d02:	425b      	negs	r3, r3
 8001d04:	2103      	movs	r1, #3
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff ff7c 	bl	8001c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <SysTick_Config+0x44>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <SysTick_Config+0x44>)
 8001d14:	2207      	movs	r2, #7
 8001d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b002      	add	sp, #8
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	e000e010 	.word	0xe000e010

08001d28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	210f      	movs	r1, #15
 8001d34:	187b      	adds	r3, r7, r1
 8001d36:	1c02      	adds	r2, r0, #0
 8001d38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	b25b      	sxtb	r3, r3
 8001d42:	0011      	movs	r1, r2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff ff5d 	bl	8001c04 <__NVIC_SetPriority>
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b082      	sub	sp, #8
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	0002      	movs	r2, r0
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	b25b      	sxtb	r3, r3
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ff33 	bl	8001bd0 <__NVIC_EnableIRQ>
}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	b002      	add	sp, #8
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b082      	sub	sp, #8
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	0018      	movs	r0, r3
 8001d7e:	f7ff ffaf 	bl	8001ce0 <SysTick_Config>
 8001d82:	0003      	movs	r3, r0
}
 8001d84:	0018      	movs	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001da2:	e155      	b.n	8002050 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2101      	movs	r1, #1
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4091      	lsls	r1, r2
 8001dae:	000a      	movs	r2, r1
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d100      	bne.n	8001dbc <HAL_GPIO_Init+0x30>
 8001dba:	e146      	b.n	800204a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d005      	beq.n	8001dd4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2203      	movs	r2, #3
 8001dce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d130      	bne.n	8001e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	2203      	movs	r2, #3
 8001de0:	409a      	lsls	r2, r3
 8001de2:	0013      	movs	r3, r2
 8001de4:	43da      	mvns	r2, r3
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	409a      	lsls	r2, r3
 8001df6:	0013      	movs	r3, r2
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	43da      	mvns	r2, r3
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4013      	ands	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	2201      	movs	r2, #1
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
 8001e28:	0013      	movs	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b03      	cmp	r3, #3
 8001e40:	d017      	beq.n	8001e72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	43da      	mvns	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	409a      	lsls	r2, r3
 8001e64:	0013      	movs	r3, r2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2203      	movs	r2, #3
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d123      	bne.n	8001ec6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	0092      	lsls	r2, r2, #2
 8001e88:	58d3      	ldr	r3, [r2, r3]
 8001e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2207      	movs	r2, #7
 8001e90:	4013      	ands	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	43da      	mvns	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	691a      	ldr	r2, [r3, #16]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	400b      	ands	r3, r1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	0013      	movs	r3, r2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	08da      	lsrs	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3208      	adds	r2, #8
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	6939      	ldr	r1, [r7, #16]
 8001ec4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	2203      	movs	r2, #3
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4013      	ands	r3, r2
 8001edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	409a      	lsls	r2, r3
 8001eec:	0013      	movs	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	23c0      	movs	r3, #192	; 0xc0
 8001f00:	029b      	lsls	r3, r3, #10
 8001f02:	4013      	ands	r3, r2
 8001f04:	d100      	bne.n	8001f08 <HAL_GPIO_Init+0x17c>
 8001f06:	e0a0      	b.n	800204a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_GPIO_Init+0x2dc>)
 8001f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0c:	4b56      	ldr	r3, [pc, #344]	; (8002068 <HAL_GPIO_Init+0x2dc>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	430a      	orrs	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f14:	4a55      	ldr	r2, [pc, #340]	; (800206c <HAL_GPIO_Init+0x2e0>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	589b      	ldr	r3, [r3, r2]
 8001f20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	0013      	movs	r3, r2
 8001f30:	43da      	mvns	r2, r3
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	23a0      	movs	r3, #160	; 0xa0
 8001f3c:	05db      	lsls	r3, r3, #23
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d01f      	beq.n	8001f82 <HAL_GPIO_Init+0x1f6>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4a      	ldr	r2, [pc, #296]	; (8002070 <HAL_GPIO_Init+0x2e4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d019      	beq.n	8001f7e <HAL_GPIO_Init+0x1f2>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a49      	ldr	r2, [pc, #292]	; (8002074 <HAL_GPIO_Init+0x2e8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0x1ee>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a48      	ldr	r2, [pc, #288]	; (8002078 <HAL_GPIO_Init+0x2ec>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d00d      	beq.n	8001f76 <HAL_GPIO_Init+0x1ea>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a47      	ldr	r2, [pc, #284]	; (800207c <HAL_GPIO_Init+0x2f0>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d007      	beq.n	8001f72 <HAL_GPIO_Init+0x1e6>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a46      	ldr	r2, [pc, #280]	; (8002080 <HAL_GPIO_Init+0x2f4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_GPIO_Init+0x1e2>
 8001f6a:	2305      	movs	r3, #5
 8001f6c:	e00a      	b.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e008      	b.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f72:	2304      	movs	r3, #4
 8001f74:	e006      	b.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f76:	2303      	movs	r3, #3
 8001f78:	e004      	b.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	e002      	b.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e000      	b.n	8001f84 <HAL_GPIO_Init+0x1f8>
 8001f82:	2300      	movs	r3, #0
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	2103      	movs	r1, #3
 8001f88:	400a      	ands	r2, r1
 8001f8a:	0092      	lsls	r2, r2, #2
 8001f8c:	4093      	lsls	r3, r2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	4313      	orrs	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f94:	4935      	ldr	r1, [pc, #212]	; (800206c <HAL_GPIO_Init+0x2e0>)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	089b      	lsrs	r3, r3, #2
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	43da      	mvns	r2, r3
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d003      	beq.n	8001fc6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fc6:	4b2f      	ldr	r3, [pc, #188]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	43da      	mvns	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	029b      	lsls	r3, r3, #10
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ff0:	4b24      	ldr	r3, [pc, #144]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ff6:	4b23      	ldr	r3, [pc, #140]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	43da      	mvns	r2, r3
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	4013      	ands	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	035b      	lsls	r3, r3, #13
 800200e:	4013      	ands	r3, r2
 8002010:	d003      	beq.n	800201a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800201a:	4b1a      	ldr	r3, [pc, #104]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	43da      	mvns	r2, r3
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	2380      	movs	r3, #128	; 0x80
 8002036:	039b      	lsls	r3, r3, #14
 8002038:	4013      	ands	r3, r2
 800203a:	d003      	beq.n	8002044 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <HAL_GPIO_Init+0x2f8>)
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	40da      	lsrs	r2, r3
 8002058:	1e13      	subs	r3, r2, #0
 800205a:	d000      	beq.n	800205e <HAL_GPIO_Init+0x2d2>
 800205c:	e6a2      	b.n	8001da4 <HAL_GPIO_Init+0x18>
  }
}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b006      	add	sp, #24
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	40010000 	.word	0x40010000
 8002070:	50000400 	.word	0x50000400
 8002074:	50000800 	.word	0x50000800
 8002078:	50000c00 	.word	0x50000c00
 800207c:	50001000 	.word	0x50001000
 8002080:	50001c00 	.word	0x50001c00
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	000a      	movs	r2, r1
 8002092:	1cbb      	adds	r3, r7, #2
 8002094:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	1cba      	adds	r2, r7, #2
 800209c:	8812      	ldrh	r2, [r2, #0]
 800209e:	4013      	ands	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020a2:	230f      	movs	r3, #15
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2201      	movs	r2, #1
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e003      	b.n	80020b4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ac:	230f      	movs	r3, #15
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020b4:	230f      	movs	r3, #15
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	781b      	ldrb	r3, [r3, #0]
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	0008      	movs	r0, r1
 80020cc:	0011      	movs	r1, r2
 80020ce:	1cbb      	adds	r3, r7, #2
 80020d0:	1c02      	adds	r2, r0, #0
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	1c7b      	adds	r3, r7, #1
 80020d6:	1c0a      	adds	r2, r1, #0
 80020d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020da:	1c7b      	adds	r3, r7, #1
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d004      	beq.n	80020ec <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	1cbb      	adds	r3, r7, #2
 80020e4:	881a      	ldrh	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80020ea:	e003      	b.n	80020f4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80020ec:	1cbb      	adds	r3, r7, #2
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b08b      	sub	sp, #44	; 0x2c
 8002100:	af06      	add	r7, sp, #24
 8002102:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d101      	bne.n	800210e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e0ff      	b.n	800230e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a81      	ldr	r2, [pc, #516]	; (8002318 <HAL_PCD_Init+0x21c>)
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d108      	bne.n	800212c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	23aa      	movs	r3, #170	; 0xaa
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	2100      	movs	r1, #0
 8002122:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	0018      	movs	r0, r3
 8002128:	f007 f926 	bl	8009378 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a7a      	ldr	r2, [pc, #488]	; (8002318 <HAL_PCD_Init+0x21c>)
 8002130:	2103      	movs	r1, #3
 8002132:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	0018      	movs	r0, r3
 800213a:	f003 fb35 	bl	80057a8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800213e:	230f      	movs	r3, #15
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
 8002146:	e058      	b.n	80021fa <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002148:	200f      	movs	r0, #15
 800214a:	183b      	adds	r3, r7, r0
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	0013      	movs	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	189b      	adds	r3, r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	18cb      	adds	r3, r1, r3
 800215c:	3301      	adds	r3, #1
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002162:	183b      	adds	r3, r7, r0
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	0013      	movs	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	189b      	adds	r3, r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	183a      	adds	r2, r7, r0
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002178:	0004      	movs	r4, r0
 800217a:	183b      	adds	r3, r7, r0
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	193b      	adds	r3, r7, r4
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	b298      	uxth	r0, r3
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	0013      	movs	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	189b      	adds	r3, r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	18cb      	adds	r3, r1, r3
 8002190:	3336      	adds	r3, #54	; 0x36
 8002192:	1c02      	adds	r2, r0, #0
 8002194:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002196:	193b      	adds	r3, r7, r4
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	0013      	movs	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	18cb      	adds	r3, r1, r3
 80021a8:	3303      	adds	r3, #3
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ae:	193b      	adds	r3, r7, r4
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	0013      	movs	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	189b      	adds	r3, r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	18cb      	adds	r3, r1, r3
 80021be:	3338      	adds	r3, #56	; 0x38
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021c4:	193b      	adds	r3, r7, r4
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	0013      	movs	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	189b      	adds	r3, r3, r2
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	18cb      	adds	r3, r1, r3
 80021d4:	333c      	adds	r3, #60	; 0x3c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021da:	193b      	adds	r3, r7, r4
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	0013      	movs	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	189b      	adds	r3, r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	18cb      	adds	r3, r1, r3
 80021ea:	3340      	adds	r3, #64	; 0x40
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	193b      	adds	r3, r7, r4
 80021f2:	781a      	ldrb	r2, [r3, #0]
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	3201      	adds	r2, #1
 80021f8:	701a      	strb	r2, [r3, #0]
 80021fa:	210f      	movs	r1, #15
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	781a      	ldrb	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	429a      	cmp	r2, r3
 8002206:	d39f      	bcc.n	8002148 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	187b      	adds	r3, r7, r1
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	e056      	b.n	80022be <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002210:	240f      	movs	r4, #15
 8002212:	193b      	adds	r3, r7, r4
 8002214:	781a      	ldrb	r2, [r3, #0]
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	236a      	movs	r3, #106	; 0x6a
 800221a:	33ff      	adds	r3, #255	; 0xff
 800221c:	0019      	movs	r1, r3
 800221e:	0013      	movs	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	189b      	adds	r3, r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	18c3      	adds	r3, r0, r3
 8002228:	185b      	adds	r3, r3, r1
 800222a:	2200      	movs	r2, #0
 800222c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800222e:	193b      	adds	r3, r7, r4
 8002230:	781a      	ldrb	r2, [r3, #0]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	23b4      	movs	r3, #180	; 0xb4
 8002236:	0059      	lsls	r1, r3, #1
 8002238:	0013      	movs	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	189b      	adds	r3, r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	18c3      	adds	r3, r0, r3
 8002242:	185b      	adds	r3, r3, r1
 8002244:	193a      	adds	r2, r7, r4
 8002246:	7812      	ldrb	r2, [r2, #0]
 8002248:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224a:	193b      	adds	r3, r7, r4
 800224c:	781a      	ldrb	r2, [r3, #0]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	236c      	movs	r3, #108	; 0x6c
 8002252:	33ff      	adds	r3, #255	; 0xff
 8002254:	0019      	movs	r1, r3
 8002256:	0013      	movs	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	189b      	adds	r3, r3, r2
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	18c3      	adds	r3, r0, r3
 8002260:	185b      	adds	r3, r3, r1
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002266:	193b      	adds	r3, r7, r4
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	23bc      	movs	r3, #188	; 0xbc
 800226e:	0059      	lsls	r1, r3, #1
 8002270:	0013      	movs	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	189b      	adds	r3, r3, r2
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	18c3      	adds	r3, r0, r3
 800227a:	185b      	adds	r3, r3, r1
 800227c:	2200      	movs	r2, #0
 800227e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002280:	193b      	adds	r3, r7, r4
 8002282:	781a      	ldrb	r2, [r3, #0]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	23be      	movs	r3, #190	; 0xbe
 8002288:	0059      	lsls	r1, r3, #1
 800228a:	0013      	movs	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	189b      	adds	r3, r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	18c3      	adds	r3, r0, r3
 8002294:	185b      	adds	r3, r3, r1
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800229a:	193b      	adds	r3, r7, r4
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	23c0      	movs	r3, #192	; 0xc0
 80022a2:	0059      	lsls	r1, r3, #1
 80022a4:	0013      	movs	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	189b      	adds	r3, r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	18c3      	adds	r3, r0, r3
 80022ae:	185b      	adds	r3, r3, r1
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b4:	193b      	adds	r3, r7, r4
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	3201      	adds	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	230f      	movs	r3, #15
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3a1      	bcc.n	8002210 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6818      	ldr	r0, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	466a      	mov	r2, sp
 80022d4:	0011      	movs	r1, r2
 80022d6:	001a      	movs	r2, r3
 80022d8:	3210      	adds	r2, #16
 80022da:	ca70      	ldmia	r2!, {r4, r5, r6}
 80022dc:	c170      	stmia	r1!, {r4, r5, r6}
 80022de:	ca30      	ldmia	r2!, {r4, r5}
 80022e0:	c130      	stmia	r1!, {r4, r5}
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 fa78 	bl	80057dc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	; 0x24
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_PCD_Init+0x21c>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d103      	bne.n	800230c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	0018      	movs	r0, r3
 8002308:	f001 fd1c 	bl	8003d44 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b005      	add	sp, #20
 8002314:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	000002a9 	.word	0x000002a9

0800231c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	23aa      	movs	r3, #170	; 0xaa
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	5cd3      	ldrb	r3, [r2, r3]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d101      	bne.n	8002334 <HAL_PCD_Start+0x18>
 8002330:	2302      	movs	r3, #2
 8002332:	e014      	b.n	800235e <HAL_PCD_Start+0x42>
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	23aa      	movs	r3, #170	; 0xaa
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	2101      	movs	r1, #1
 800233c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0018      	movs	r0, r3
 8002344:	f003 fa1a 	bl	800577c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0018      	movs	r0, r3
 800234e:	f005 f975 	bl	800763c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	23aa      	movs	r3, #170	; 0xaa
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	2100      	movs	r1, #0
 800235a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b002      	add	sp, #8
 8002364:	bd80      	pop	{r7, pc}
	...

08002368 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	0018      	movs	r0, r3
 8002376:	f005 f977 	bl	8007668 <USB_ReadInterrupts>
 800237a:	0002      	movs	r2, r0
 800237c:	2380      	movs	r3, #128	; 0x80
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	401a      	ands	r2, r3
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	429a      	cmp	r2, r3
 8002388:	d103      	bne.n	8002392 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f000 fba3 	bl	8002ad8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	0018      	movs	r0, r3
 8002398:	f005 f966 	bl	8007668 <USB_ReadInterrupts>
 800239c:	0002      	movs	r2, r0
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	401a      	ands	r2, r3
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d114      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2244      	movs	r2, #68	; 0x44
 80023b2:	5a9b      	ldrh	r3, [r3, r2]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	49a2      	ldr	r1, [pc, #648]	; (8002644 <HAL_PCD_IRQHandler+0x2dc>)
 80023bc:	400a      	ands	r2, r1
 80023be:	b291      	uxth	r1, r2
 80023c0:	2244      	movs	r2, #68	; 0x44
 80023c2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f007 f859 	bl	800947e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2100      	movs	r1, #0
 80023d0:	0018      	movs	r0, r3
 80023d2:	f000 f945 	bl	8002660 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0018      	movs	r0, r3
 80023dc:	f005 f944 	bl	8007668 <USB_ReadInterrupts>
 80023e0:	0002      	movs	r2, r0
 80023e2:	2380      	movs	r3, #128	; 0x80
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	401a      	ands	r2, r3
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	01db      	lsls	r3, r3, #7
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d10b      	bne.n	8002408 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2244      	movs	r2, #68	; 0x44
 80023f6:	5a9b      	ldrh	r3, [r3, r2]
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4992      	ldr	r1, [pc, #584]	; (8002648 <HAL_PCD_IRQHandler+0x2e0>)
 8002400:	400a      	ands	r2, r1
 8002402:	b291      	uxth	r1, r2
 8002404:	2244      	movs	r2, #68	; 0x44
 8002406:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0018      	movs	r0, r3
 800240e:	f005 f92b 	bl	8007668 <USB_ReadInterrupts>
 8002412:	0002      	movs	r2, r0
 8002414:	2380      	movs	r3, #128	; 0x80
 8002416:	019b      	lsls	r3, r3, #6
 8002418:	401a      	ands	r2, r3
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	429a      	cmp	r2, r3
 8002420:	d10b      	bne.n	800243a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2244      	movs	r2, #68	; 0x44
 8002428:	5a9b      	ldrh	r3, [r3, r2]
 800242a:	b29a      	uxth	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4986      	ldr	r1, [pc, #536]	; (800264c <HAL_PCD_IRQHandler+0x2e4>)
 8002432:	400a      	ands	r2, r1
 8002434:	b291      	uxth	r1, r2
 8002436:	2244      	movs	r2, #68	; 0x44
 8002438:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	0018      	movs	r0, r3
 8002440:	f005 f912 	bl	8007668 <USB_ReadInterrupts>
 8002444:	0002      	movs	r2, r0
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	015b      	lsls	r3, r3, #5
 800244a:	401a      	ands	r2, r3
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	015b      	lsls	r3, r3, #5
 8002450:	429a      	cmp	r2, r3
 8002452:	d137      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	5a9b      	ldrh	r3, [r3, r2]
 800245c:	b29a      	uxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2104      	movs	r1, #4
 8002464:	438a      	bics	r2, r1
 8002466:	b291      	uxth	r1, r2
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	5a9b      	ldrh	r3, [r3, r2]
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2108      	movs	r1, #8
 800247c:	438a      	bics	r2, r1
 800247e:	b291      	uxth	r1, r2
 8002480:	2240      	movs	r2, #64	; 0x40
 8002482:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	23b8      	movs	r3, #184	; 0xb8
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	5cd3      	ldrb	r3, [r2, r3]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d109      	bne.n	80024a4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	23b8      	movs	r3, #184	; 0xb8
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	2100      	movs	r1, #0
 8002498:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2100      	movs	r1, #0
 800249e:	0018      	movs	r0, r3
 80024a0:	f001 fc7a 	bl	8003d98 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	0018      	movs	r0, r3
 80024a8:	f007 f82a 	bl	8009500 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2244      	movs	r2, #68	; 0x44
 80024b2:	5a9b      	ldrh	r3, [r3, r2]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4965      	ldr	r1, [pc, #404]	; (8002650 <HAL_PCD_IRQHandler+0x2e8>)
 80024bc:	400a      	ands	r2, r1
 80024be:	b291      	uxth	r1, r2
 80024c0:	2244      	movs	r2, #68	; 0x44
 80024c2:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f005 f8cd 	bl	8007668 <USB_ReadInterrupts>
 80024ce:	0002      	movs	r2, r0
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	401a      	ands	r2, r3
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	429a      	cmp	r2, r3
 80024dc:	d127      	bne.n	800252e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2240      	movs	r2, #64	; 0x40
 80024e4:	5a9b      	ldrh	r3, [r3, r2]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2108      	movs	r1, #8
 80024ee:	430a      	orrs	r2, r1
 80024f0:	b291      	uxth	r1, r2
 80024f2:	2240      	movs	r2, #64	; 0x40
 80024f4:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2244      	movs	r2, #68	; 0x44
 80024fc:	5a9b      	ldrh	r3, [r3, r2]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4953      	ldr	r1, [pc, #332]	; (8002654 <HAL_PCD_IRQHandler+0x2ec>)
 8002506:	400a      	ands	r2, r1
 8002508:	b291      	uxth	r1, r2
 800250a:	2244      	movs	r2, #68	; 0x44
 800250c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	5a9b      	ldrh	r3, [r3, r2]
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2104      	movs	r1, #4
 800251e:	430a      	orrs	r2, r1
 8002520:	b291      	uxth	r1, r2
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f006 ffcd 	bl	80094c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0018      	movs	r0, r3
 8002534:	f005 f898 	bl	8007668 <USB_ReadInterrupts>
 8002538:	0003      	movs	r3, r0
 800253a:	2280      	movs	r2, #128	; 0x80
 800253c:	4013      	ands	r3, r2
 800253e:	2b80      	cmp	r3, #128	; 0x80
 8002540:	d145      	bne.n	80025ce <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2244      	movs	r2, #68	; 0x44
 8002548:	5a9b      	ldrh	r3, [r3, r2]
 800254a:	b29a      	uxth	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2180      	movs	r1, #128	; 0x80
 8002552:	438a      	bics	r2, r1
 8002554:	b291      	uxth	r1, r2
 8002556:	2244      	movs	r2, #68	; 0x44
 8002558:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	23b8      	movs	r3, #184	; 0xb8
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d12f      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	5a9b      	ldrh	r3, [r3, r2]
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2104      	movs	r1, #4
 8002576:	430a      	orrs	r2, r1
 8002578:	b291      	uxth	r1, r2
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	5a9b      	ldrh	r3, [r3, r2]
 8002586:	b29a      	uxth	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2108      	movs	r1, #8
 800258e:	430a      	orrs	r2, r1
 8002590:	b291      	uxth	r1, r2
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	23b8      	movs	r3, #184	; 0xb8
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	2101      	movs	r1, #1
 800259e:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2254      	movs	r2, #84	; 0x54
 80025a6:	5a9b      	ldrh	r3, [r3, r2]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	089b      	lsrs	r3, r3, #2
 80025ac:	223c      	movs	r2, #60	; 0x3c
 80025ae:	4013      	ands	r3, r2
 80025b0:	0019      	movs	r1, r3
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	23b9      	movs	r3, #185	; 0xb9
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2101      	movs	r1, #1
 80025be:	0018      	movs	r0, r3
 80025c0:	f001 fbea 	bl	8003d98 <HAL_PCDEx_LPM_Callback>
 80025c4:	e003      	b.n	80025ce <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f006 ff7d 	bl	80094c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f005 f848 	bl	8007668 <USB_ReadInterrupts>
 80025d8:	0002      	movs	r2, r0
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	401a      	ands	r2, r3
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d10f      	bne.n	8002608 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2244      	movs	r2, #68	; 0x44
 80025ee:	5a9b      	ldrh	r3, [r3, r2]
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4918      	ldr	r1, [pc, #96]	; (8002658 <HAL_PCD_IRQHandler+0x2f0>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	b291      	uxth	r1, r2
 80025fc:	2244      	movs	r2, #68	; 0x44
 80025fe:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0018      	movs	r0, r3
 8002604:	f006 ff2c 	bl	8009460 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0018      	movs	r0, r3
 800260e:	f005 f82b 	bl	8007668 <USB_ReadInterrupts>
 8002612:	0002      	movs	r2, r0
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	401a      	ands	r2, r3
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	429a      	cmp	r2, r3
 8002620:	d10b      	bne.n	800263a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2244      	movs	r2, #68	; 0x44
 8002628:	5a9b      	ldrh	r3, [r3, r2]
 800262a:	b29a      	uxth	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	490a      	ldr	r1, [pc, #40]	; (800265c <HAL_PCD_IRQHandler+0x2f4>)
 8002632:	400a      	ands	r2, r1
 8002634:	b291      	uxth	r1, r2
 8002636:	2244      	movs	r2, #68	; 0x44
 8002638:	5299      	strh	r1, [r3, r2]
  }
}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	46bd      	mov	sp, r7
 800263e:	b002      	add	sp, #8
 8002640:	bd80      	pop	{r7, pc}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	fffffbff 	.word	0xfffffbff
 8002648:	ffffbfff 	.word	0xffffbfff
 800264c:	ffffdfff 	.word	0xffffdfff
 8002650:	ffffefff 	.word	0xffffefff
 8002654:	fffff7ff 	.word	0xfffff7ff
 8002658:	fffffdff 	.word	0xfffffdff
 800265c:	fffffeff 	.word	0xfffffeff

08002660 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	000a      	movs	r2, r1
 800266a:	1cfb      	adds	r3, r7, #3
 800266c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	23aa      	movs	r3, #170	; 0xaa
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	5cd3      	ldrb	r3, [r2, r3]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_PCD_SetAddress+0x1e>
 800267a:	2302      	movs	r3, #2
 800267c:	e017      	b.n	80026ae <HAL_PCD_SetAddress+0x4e>
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	23aa      	movs	r3, #170	; 0xaa
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	2101      	movs	r1, #1
 8002686:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	1cfa      	adds	r2, r7, #3
 800268c:	2124      	movs	r1, #36	; 0x24
 800268e:	7812      	ldrb	r2, [r2, #0]
 8002690:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	1cfb      	adds	r3, r7, #3
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	0019      	movs	r1, r3
 800269c:	0010      	movs	r0, r2
 800269e:	f004 ffb9 	bl	8007614 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	23aa      	movs	r3, #170	; 0xaa
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	2100      	movs	r1, #0
 80026aa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026b6:	b590      	push	{r4, r7, lr}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	000c      	movs	r4, r1
 80026c0:	0010      	movs	r0, r2
 80026c2:	0019      	movs	r1, r3
 80026c4:	1cfb      	adds	r3, r7, #3
 80026c6:	1c22      	adds	r2, r4, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	003b      	movs	r3, r7
 80026cc:	1c02      	adds	r2, r0, #0
 80026ce:	801a      	strh	r2, [r3, #0]
 80026d0:	1cbb      	adds	r3, r7, #2
 80026d2:	1c0a      	adds	r2, r1, #0
 80026d4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026d6:	230b      	movs	r3, #11
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026de:	1cfb      	adds	r3, r7, #3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	da0f      	bge.n	8002708 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026e8:	1cfb      	adds	r3, r7, #3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2207      	movs	r2, #7
 80026ee:	4013      	ands	r3, r2
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	0013      	movs	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2201      	movs	r2, #1
 8002704:	705a      	strb	r2, [r3, #1]
 8002706:	e00f      	b.n	8002728 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002708:	1cfb      	adds	r3, r7, #3
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2207      	movs	r2, #7
 800270e:	401a      	ands	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	189b      	adds	r3, r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	3369      	adds	r3, #105	; 0x69
 800271a:	33ff      	adds	r3, #255	; 0xff
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	18d3      	adds	r3, r2, r3
 8002720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002728:	1cfb      	adds	r3, r7, #3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2207      	movs	r2, #7
 800272e:	4013      	ands	r3, r2
 8002730:	b2da      	uxtb	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002736:	003b      	movs	r3, r7
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1cba      	adds	r2, r7, #2
 8002742:	7812      	ldrb	r2, [r2, #0]
 8002744:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002758:	1cbb      	adds	r3, r7, #2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d102      	bne.n	8002766 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	23aa      	movs	r3, #170	; 0xaa
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	5cd3      	ldrb	r3, [r2, r3]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_PCD_EP_Open+0xc0>
 8002772:	2302      	movs	r3, #2
 8002774:	e013      	b.n	800279e <HAL_PCD_EP_Open+0xe8>
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	23aa      	movs	r3, #170	; 0xaa
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	2101      	movs	r1, #1
 800277e:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	0011      	movs	r1, r2
 8002788:	0018      	movs	r0, r3
 800278a:	f003 f853 	bl	8005834 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	23aa      	movs	r3, #170	; 0xaa
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	2100      	movs	r1, #0
 8002796:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002798:	230b      	movs	r3, #11
 800279a:	18fb      	adds	r3, r7, r3
 800279c:	781b      	ldrb	r3, [r3, #0]
}
 800279e:	0018      	movs	r0, r3
 80027a0:	46bd      	mov	sp, r7
 80027a2:	b005      	add	sp, #20
 80027a4:	bd90      	pop	{r4, r7, pc}

080027a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b084      	sub	sp, #16
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	000a      	movs	r2, r1
 80027b0:	1cfb      	adds	r3, r7, #3
 80027b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027b4:	1cfb      	adds	r3, r7, #3
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	da0f      	bge.n	80027de <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027be:	1cfb      	adds	r3, r7, #3
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2207      	movs	r2, #7
 80027c4:	4013      	ands	r3, r2
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	0013      	movs	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	189b      	adds	r3, r3, r2
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	18d3      	adds	r3, r2, r3
 80027d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2201      	movs	r2, #1
 80027da:	705a      	strb	r2, [r3, #1]
 80027dc:	e00f      	b.n	80027fe <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027de:	1cfb      	adds	r3, r7, #3
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2207      	movs	r2, #7
 80027e4:	401a      	ands	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	189b      	adds	r3, r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	3369      	adds	r3, #105	; 0x69
 80027f0:	33ff      	adds	r3, #255	; 0xff
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	18d3      	adds	r3, r2, r3
 80027f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027fe:	1cfb      	adds	r3, r7, #3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	b2da      	uxtb	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	23aa      	movs	r3, #170	; 0xaa
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_PCD_EP_Close+0x76>
 8002818:	2302      	movs	r3, #2
 800281a:	e011      	b.n	8002840 <HAL_PCD_EP_Close+0x9a>
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	23aa      	movs	r3, #170	; 0xaa
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	2101      	movs	r1, #1
 8002824:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	0011      	movs	r1, r2
 800282e:	0018      	movs	r0, r3
 8002830:	f003 fb74 	bl	8005f1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	23aa      	movs	r3, #170	; 0xaa
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	2100      	movs	r1, #0
 800283c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b004      	add	sp, #16
 8002846:	bd80      	pop	{r7, pc}

08002848 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af00      	add	r7, sp, #0
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	200b      	movs	r0, #11
 8002856:	183b      	adds	r3, r7, r0
 8002858:	1c0a      	adds	r2, r1, #0
 800285a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800285c:	0001      	movs	r1, r0
 800285e:	187b      	adds	r3, r7, r1
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2207      	movs	r2, #7
 8002864:	401a      	ands	r2, r3
 8002866:	0013      	movs	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	189b      	adds	r3, r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	3369      	adds	r3, #105	; 0x69
 8002870:	33ff      	adds	r3, #255	; 0xff
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	18d3      	adds	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002890:	187b      	adds	r3, r7, r1
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2207      	movs	r2, #7
 8002896:	4013      	ands	r3, r2
 8002898:	b2da      	uxtb	r2, r3
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2207      	movs	r2, #7
 80028a4:	4013      	ands	r3, r2
 80028a6:	d107      	bne.n	80028b8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f003 fcf3 	bl	800629c <USB_EPStartXfer>
 80028b6:	e006      	b.n	80028c6 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	0011      	movs	r1, r2
 80028c0:	0018      	movs	r0, r3
 80028c2:	f003 fceb 	bl	800629c <USB_EPStartXfer>
  }

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b006      	add	sp, #24
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	200b      	movs	r0, #11
 80028de:	183b      	adds	r3, r7, r0
 80028e0:	1c0a      	adds	r2, r1, #0
 80028e2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	183b      	adds	r3, r7, r0
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2207      	movs	r2, #7
 80028ea:	4013      	ands	r3, r2
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	0013      	movs	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	18d3      	adds	r3, r2, r3
 80028fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2224      	movs	r2, #36	; 0x24
 800290c:	2101      	movs	r1, #1
 800290e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2201      	movs	r2, #1
 8002920:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002922:	183b      	adds	r3, r7, r0
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2207      	movs	r2, #7
 8002928:	4013      	ands	r3, r2
 800292a:	b2da      	uxtb	r2, r3
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002930:	183b      	adds	r3, r7, r0
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2207      	movs	r2, #7
 8002936:	4013      	ands	r3, r2
 8002938:	d107      	bne.n	800294a <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	0011      	movs	r1, r2
 8002942:	0018      	movs	r0, r3
 8002944:	f003 fcaa 	bl	800629c <USB_EPStartXfer>
 8002948:	e006      	b.n	8002958 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f003 fca2 	bl	800629c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002958:	2300      	movs	r3, #0
}
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b006      	add	sp, #24
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	000a      	movs	r2, r1
 800296c:	1cfb      	adds	r3, r7, #3
 800296e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002970:	1cfb      	adds	r3, r7, #3
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2207      	movs	r2, #7
 8002976:	401a      	ands	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d901      	bls.n	8002984 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e046      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002984:	1cfb      	adds	r3, r7, #3
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	b25b      	sxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	da0f      	bge.n	80029ae <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800298e:	1cfb      	adds	r3, r7, #3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2207      	movs	r2, #7
 8002994:	4013      	ands	r3, r2
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	0013      	movs	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	189b      	adds	r3, r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	18d3      	adds	r3, r2, r3
 80029a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2201      	movs	r2, #1
 80029aa:	705a      	strb	r2, [r3, #1]
 80029ac:	e00d      	b.n	80029ca <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ae:	1cfb      	adds	r3, r7, #3
 80029b0:	781a      	ldrb	r2, [r3, #0]
 80029b2:	0013      	movs	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	189b      	adds	r3, r3, r2
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	3369      	adds	r3, #105	; 0x69
 80029bc:	33ff      	adds	r3, #255	; 0xff
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	18d3      	adds	r3, r2, r3
 80029c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d0:	1cfb      	adds	r3, r7, #3
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2207      	movs	r2, #7
 80029d6:	4013      	ands	r3, r2
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	23aa      	movs	r3, #170	; 0xaa
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	5cd3      	ldrb	r3, [r2, r3]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_PCD_EP_SetStall+0x8c>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e011      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xb0>
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	23aa      	movs	r3, #170	; 0xaa
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	2101      	movs	r1, #1
 80029f6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	0011      	movs	r1, r2
 8002a00:	0018      	movs	r0, r3
 8002a02:	f004 fd05 	bl	8007410 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	23aa      	movs	r3, #170	; 0xaa
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	0018      	movs	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b004      	add	sp, #16
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	000a      	movs	r2, r1
 8002a24:	1cfb      	adds	r3, r7, #3
 8002a26:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a28:	1cfb      	adds	r3, r7, #3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d901      	bls.n	8002a3c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e048      	b.n	8002ace <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a3c:	1cfb      	adds	r3, r7, #3
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	b25b      	sxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	da0f      	bge.n	8002a66 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a46:	1cfb      	adds	r3, r7, #3
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2207      	movs	r2, #7
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	0013      	movs	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	189b      	adds	r3, r3, r2
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2201      	movs	r2, #1
 8002a62:	705a      	strb	r2, [r3, #1]
 8002a64:	e00f      	b.n	8002a86 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a66:	1cfb      	adds	r3, r7, #3
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2207      	movs	r2, #7
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	0013      	movs	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	189b      	adds	r3, r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	3369      	adds	r3, #105	; 0x69
 8002a78:	33ff      	adds	r3, #255	; 0xff
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	18d3      	adds	r3, r2, r3
 8002a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a8c:	1cfb      	adds	r3, r7, #3
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2207      	movs	r2, #7
 8002a92:	4013      	ands	r3, r2
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	23aa      	movs	r3, #170	; 0xaa
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_PCD_EP_ClrStall+0x90>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e011      	b.n	8002ace <HAL_PCD_EP_ClrStall+0xb4>
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	23aa      	movs	r3, #170	; 0xaa
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	0011      	movs	r1, r2
 8002abc:	0018      	movs	r0, r3
 8002abe:	f004 fcf7 	bl	80074b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	23aa      	movs	r3, #170	; 0xaa
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	2100      	movs	r1, #0
 8002aca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b004      	add	sp, #16
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b096      	sub	sp, #88	; 0x58
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ae0:	f000 fbd8 	bl	8003294 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	2056      	movs	r0, #86	; 0x56
 8002aea:	183b      	adds	r3, r7, r0
 8002aec:	2144      	movs	r1, #68	; 0x44
 8002aee:	5a52      	ldrh	r2, [r2, r1]
 8002af0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002af2:	183b      	adds	r3, r7, r0
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	b2da      	uxtb	r2, r3
 8002af8:	2455      	movs	r4, #85	; 0x55
 8002afa:	193b      	adds	r3, r7, r4
 8002afc:	210f      	movs	r1, #15
 8002afe:	400a      	ands	r2, r1
 8002b00:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002b02:	193b      	adds	r3, r7, r4
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d000      	beq.n	8002b0c <PCD_EP_ISR_Handler+0x34>
 8002b0a:	e179      	b.n	8002e00 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b0c:	183b      	adds	r3, r7, r0
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	2210      	movs	r2, #16
 8002b12:	4013      	ands	r3, r2
 8002b14:	d154      	bne.n	8002bc0 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	200e      	movs	r0, #14
 8002b20:	183b      	adds	r3, r7, r0
 8002b22:	49af      	ldr	r1, [pc, #700]	; (8002de0 <PCD_EP_ISR_Handler+0x308>)
 8002b24:	400a      	ands	r2, r1
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	183a      	adds	r2, r7, r0
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	49ac      	ldr	r1, [pc, #688]	; (8002de4 <PCD_EP_ISR_Handler+0x30c>)
 8002b32:	430a      	orrs	r2, r1
 8002b34:	b292      	uxth	r2, r2
 8002b36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3328      	adds	r3, #40	; 0x28
 8002b3c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2250      	movs	r2, #80	; 0x50
 8002b44:	5a9b      	ldrh	r3, [r3, r2]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	001a      	movs	r2, r3
 8002b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	18d2      	adds	r2, r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	18d3      	adds	r3, r2, r3
 8002b58:	4aa3      	ldr	r2, [pc, #652]	; (8002de8 <PCD_EP_ISR_Handler+0x310>)
 8002b5a:	4694      	mov	ip, r2
 8002b5c:	4463      	add	r3, ip
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	059b      	lsls	r3, r3, #22
 8002b62:	0d9a      	lsrs	r2, r3, #22
 8002b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b66:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6a:	695a      	ldr	r2, [r3, #20]
 8002b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	18d2      	adds	r2, r2, r3
 8002b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b74:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2100      	movs	r1, #0
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f006 fc52 	bl	8009424 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2224      	movs	r2, #36	; 0x24
 8002b84:	5c9b      	ldrb	r3, [r3, r2]
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <PCD_EP_ISR_Handler+0xb8>
 8002b8c:	f000 fb82 	bl	8003294 <PCD_EP_ISR_Handler+0x7bc>
 8002b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <PCD_EP_ISR_Handler+0xc4>
 8002b98:	f000 fb7c 	bl	8003294 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	5c9b      	ldrb	r3, [r3, r2]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	4252      	negs	r2, r2
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	b291      	uxth	r1, r2
 8002bb2:	224c      	movs	r2, #76	; 0x4c
 8002bb4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2224      	movs	r2, #36	; 0x24
 8002bba:	2100      	movs	r1, #0
 8002bbc:	5499      	strb	r1, [r3, r2]
 8002bbe:	e369      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	3369      	adds	r3, #105	; 0x69
 8002bc4:	33ff      	adds	r3, #255	; 0xff
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	2152      	movs	r1, #82	; 0x52
 8002bce:	187b      	adds	r3, r7, r1
 8002bd0:	8812      	ldrh	r2, [r2, #0]
 8002bd2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d037      	beq.n	8002c50 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2250      	movs	r2, #80	; 0x50
 8002be6:	5a9b      	ldrh	r3, [r3, r2]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	001a      	movs	r2, r3
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	18d2      	adds	r2, r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	4a7c      	ldr	r2, [pc, #496]	; (8002dec <PCD_EP_ISR_Handler+0x314>)
 8002bfc:	4694      	mov	ip, r2
 8002bfe:	4463      	add	r3, ip
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	059b      	lsls	r3, r3, #22
 8002c04:	0d9a      	lsrs	r2, r3, #22
 8002c06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	22ac      	movs	r2, #172	; 0xac
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	1899      	adds	r1, r3, r2
 8002c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c18:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f004 fd74 	bl	800770c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	2010      	movs	r0, #16
 8002c2e:	183b      	adds	r3, r7, r0
 8002c30:	496f      	ldr	r1, [pc, #444]	; (8002df0 <PCD_EP_ISR_Handler+0x318>)
 8002c32:	400a      	ands	r2, r1
 8002c34:	801a      	strh	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	183a      	adds	r2, r7, r0
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	430a      	orrs	r2, r1
 8002c42:	b292      	uxth	r2, r2
 8002c44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f006 fbb5 	bl	80093b8 <HAL_PCD_SetupStageCallback>
 8002c4e:	e321      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c50:	2352      	movs	r3, #82	; 0x52
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2200      	movs	r2, #0
 8002c56:	5e9b      	ldrsh	r3, [r3, r2]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	db00      	blt.n	8002c5e <PCD_EP_ISR_Handler+0x186>
 8002c5c:	e31a      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	201e      	movs	r0, #30
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	4961      	ldr	r1, [pc, #388]	; (8002df0 <PCD_EP_ISR_Handler+0x318>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	183a      	adds	r2, r7, r0
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2250      	movs	r2, #80	; 0x50
 8002c86:	5a9b      	ldrh	r3, [r3, r2]
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	18d2      	adds	r2, r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	18d3      	adds	r3, r2, r3
 8002c9a:	4a54      	ldr	r2, [pc, #336]	; (8002dec <PCD_EP_ISR_Handler+0x314>)
 8002c9c:	4694      	mov	ip, r2
 8002c9e:	4463      	add	r3, ip
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	059b      	lsls	r3, r3, #22
 8002ca4:	0d9a      	lsrs	r2, r3, #22
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d01a      	beq.n	8002ce8 <PCD_EP_ISR_Handler+0x210>
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d016      	beq.n	8002ce8 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc0:	6959      	ldr	r1, [r3, #20]
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f004 fd1e 	bl	800770c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	18d2      	adds	r2, r2, r3
 8002cda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cdc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f006 fb7d 	bl	80093e2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	001a      	movs	r2, r3
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	011b      	lsls	r3, r3, #4
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d000      	beq.n	8002cfc <PCD_EP_ISR_Handler+0x224>
 8002cfa:	e2cb      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2250      	movs	r2, #80	; 0x50
 8002d08:	5a9b      	ldrh	r3, [r3, r2]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	189b      	adds	r3, r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	4a35      	ldr	r2, [pc, #212]	; (8002dec <PCD_EP_ISR_Handler+0x314>)
 8002d18:	4694      	mov	ip, r2
 8002d1a:	4463      	add	r3, ip
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d110      	bne.n	8002d48 <PCD_EP_ISR_Handler+0x270>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	881b      	ldrh	r3, [r3, #0]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	4a31      	ldr	r2, [pc, #196]	; (8002df4 <PCD_EP_ISR_Handler+0x31c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	801a      	strh	r2, [r3, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <PCD_EP_ISR_Handler+0x30c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e02b      	b.n	8002da0 <PCD_EP_ISR_Handler+0x2c8>
 8002d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d4e:	d812      	bhi.n	8002d76 <PCD_EP_ISR_Handler+0x29e>
 8002d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	647b      	str	r3, [r7, #68]	; 0x44
 8002d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d002      	beq.n	8002d68 <PCD_EP_ISR_Handler+0x290>
 8002d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d64:	3301      	adds	r3, #1
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
 8002d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	029b      	lsls	r3, r3, #10
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	801a      	strh	r2, [r3, #0]
 8002d74:	e014      	b.n	8002da0 <PCD_EP_ISR_Handler+0x2c8>
 8002d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	221f      	movs	r2, #31
 8002d84:	4013      	ands	r3, r2
 8002d86:	d102      	bne.n	8002d8e <PCD_EP_ISR_Handler+0x2b6>
 8002d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	4a13      	ldr	r2, [pc, #76]	; (8002de4 <PCD_EP_ISR_Handler+0x30c>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	2012      	movs	r0, #18
 8002daa:	183b      	adds	r3, r7, r0
 8002dac:	4912      	ldr	r1, [pc, #72]	; (8002df8 <PCD_EP_ISR_Handler+0x320>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	183b      	adds	r3, r7, r0
 8002db4:	183a      	adds	r2, r7, r0
 8002db6:	8812      	ldrh	r2, [r2, #0]
 8002db8:	2180      	movs	r1, #128	; 0x80
 8002dba:	0149      	lsls	r1, r1, #5
 8002dbc:	404a      	eors	r2, r1
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	183b      	adds	r3, r7, r0
 8002dc2:	183a      	adds	r2, r7, r0
 8002dc4:	8812      	ldrh	r2, [r2, #0]
 8002dc6:	2180      	movs	r1, #128	; 0x80
 8002dc8:	0189      	lsls	r1, r1, #6
 8002dca:	404a      	eors	r2, r1
 8002dcc:	801a      	strh	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	183a      	adds	r2, r7, r0
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	4909      	ldr	r1, [pc, #36]	; (8002dfc <PCD_EP_ISR_Handler+0x324>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	801a      	strh	r2, [r3, #0]
 8002dde:	e259      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
 8002de0:	ffff8f0f 	.word	0xffff8f0f
 8002de4:	ffff8000 	.word	0xffff8000
 8002de8:	00000402 	.word	0x00000402
 8002dec:	00000406 	.word	0x00000406
 8002df0:	00000f8f 	.word	0x00000f8f
 8002df4:	ffff83ff 	.word	0xffff83ff
 8002df8:	ffffbf8f 	.word	0xffffbf8f
 8002dfc:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	001a      	movs	r2, r3
 8002e06:	2055      	movs	r0, #85	; 0x55
 8002e08:	183b      	adds	r3, r7, r0
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	18d2      	adds	r2, r2, r3
 8002e10:	2152      	movs	r1, #82	; 0x52
 8002e12:	187b      	adds	r3, r7, r1
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e18:	187b      	adds	r3, r7, r1
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db00      	blt.n	8002e24 <PCD_EP_ISR_Handler+0x34c>
 8002e22:	e0fa      	b.n	800301a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	001a      	movs	r2, r3
 8002e2a:	183b      	adds	r3, r7, r0
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	18d3      	adds	r3, r2, r3
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	2450      	movs	r4, #80	; 0x50
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	49cf      	ldr	r1, [pc, #828]	; (8003178 <PCD_EP_ISR_Handler+0x6a0>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	801a      	strh	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	001a      	movs	r2, r3
 8002e46:	183b      	adds	r3, r7, r0
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	193a      	adds	r2, r7, r4
 8002e50:	8812      	ldrh	r2, [r2, #0]
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	430a      	orrs	r2, r1
 8002e56:	b292      	uxth	r2, r2
 8002e58:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	0013      	movs	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	3369      	adds	r3, #105	; 0x69
 8002e68:	33ff      	adds	r3, #255	; 0xff
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	18d3      	adds	r3, r2, r3
 8002e6e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e72:	7b1b      	ldrb	r3, [r3, #12]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d125      	bne.n	8002ec4 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2250      	movs	r2, #80	; 0x50
 8002e7e:	5a9b      	ldrh	r3, [r3, r2]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	001a      	movs	r2, r3
 8002e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	18d2      	adds	r2, r2, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	18d3      	adds	r3, r2, r3
 8002e92:	4aba      	ldr	r2, [pc, #744]	; (800317c <PCD_EP_ISR_Handler+0x6a4>)
 8002e94:	4694      	mov	ip, r2
 8002e96:	4463      	add	r3, ip
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	2448      	movs	r4, #72	; 0x48
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	0592      	lsls	r2, r2, #22
 8002ea0:	0d92      	lsrs	r2, r2, #22
 8002ea2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002ea4:	193b      	adds	r3, r7, r4
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d100      	bne.n	8002eae <PCD_EP_ISR_Handler+0x3d6>
 8002eac:	e08d      	b.n	8002fca <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb4:	6959      	ldr	r1, [r3, #20]
 8002eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb8:	88da      	ldrh	r2, [r3, #6]
 8002eba:	193b      	adds	r3, r7, r4
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f004 fc25 	bl	800770c <USB_ReadPMA>
 8002ec2:	e082      	b.n	8002fca <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	78db      	ldrb	r3, [r3, #3]
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d10c      	bne.n	8002ee6 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ecc:	2348      	movs	r3, #72	; 0x48
 8002ece:	18fc      	adds	r4, r7, r3
 8002ed0:	2352      	movs	r3, #82	; 0x52
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	881a      	ldrh	r2, [r3, #0]
 8002ed6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f9ee 	bl	80032bc <HAL_PCD_EP_DB_Receive>
 8002ee0:	0003      	movs	r3, r0
 8002ee2:	8023      	strh	r3, [r4, #0]
 8002ee4:	e071      	b.n	8002fca <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	001a      	movs	r2, r3
 8002eec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	18d3      	adds	r3, r2, r3
 8002ef4:	881b      	ldrh	r3, [r3, #0]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	204a      	movs	r0, #74	; 0x4a
 8002efa:	183b      	adds	r3, r7, r0
 8002efc:	49a0      	ldr	r1, [pc, #640]	; (8003180 <PCD_EP_ISR_Handler+0x6a8>)
 8002efe:	400a      	ands	r2, r1
 8002f00:	801a      	strh	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	001a      	movs	r2, r3
 8002f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	18d3      	adds	r3, r2, r3
 8002f10:	183a      	adds	r2, r7, r0
 8002f12:	8812      	ldrh	r2, [r2, #0]
 8002f14:	499b      	ldr	r1, [pc, #620]	; (8003184 <PCD_EP_ISR_Handler+0x6ac>)
 8002f16:	430a      	orrs	r2, r1
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	001a      	movs	r2, r3
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	18d3      	adds	r3, r2, r3
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	001a      	movs	r2, r3
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	01db      	lsls	r3, r3, #7
 8002f34:	4013      	ands	r3, r2
 8002f36:	d024      	beq.n	8002f82 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2250      	movs	r2, #80	; 0x50
 8002f3e:	5a9b      	ldrh	r3, [r3, r2]
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	001a      	movs	r2, r3
 8002f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	18d2      	adds	r2, r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	18d3      	adds	r3, r2, r3
 8002f52:	4a8d      	ldr	r2, [pc, #564]	; (8003188 <PCD_EP_ISR_Handler+0x6b0>)
 8002f54:	4694      	mov	ip, r2
 8002f56:	4463      	add	r3, ip
 8002f58:	881a      	ldrh	r2, [r3, #0]
 8002f5a:	2448      	movs	r4, #72	; 0x48
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	0592      	lsls	r2, r2, #22
 8002f60:	0d92      	lsrs	r2, r2, #22
 8002f62:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d02e      	beq.n	8002fca <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6818      	ldr	r0, [r3, #0]
 8002f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f72:	6959      	ldr	r1, [r3, #20]
 8002f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f76:	891a      	ldrh	r2, [r3, #8]
 8002f78:	193b      	adds	r3, r7, r4
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	f004 fbc6 	bl	800770c <USB_ReadPMA>
 8002f80:	e023      	b.n	8002fca <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2250      	movs	r2, #80	; 0x50
 8002f88:	5a9b      	ldrh	r3, [r3, r2]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	001a      	movs	r2, r3
 8002f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	18d2      	adds	r2, r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	18d3      	adds	r3, r2, r3
 8002f9c:	4a77      	ldr	r2, [pc, #476]	; (800317c <PCD_EP_ISR_Handler+0x6a4>)
 8002f9e:	4694      	mov	ip, r2
 8002fa0:	4463      	add	r3, ip
 8002fa2:	881a      	ldrh	r2, [r3, #0]
 8002fa4:	2448      	movs	r4, #72	; 0x48
 8002fa6:	193b      	adds	r3, r7, r4
 8002fa8:	0592      	lsls	r2, r2, #22
 8002faa:	0d92      	lsrs	r2, r2, #22
 8002fac:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fbc:	6959      	ldr	r1, [r3, #20]
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc0:	895a      	ldrh	r2, [r3, #10]
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	f004 fba1 	bl	800770c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	2148      	movs	r1, #72	; 0x48
 8002fd0:	187b      	adds	r3, r7, r1
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	18d2      	adds	r2, r2, r3
 8002fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	187b      	adds	r3, r7, r1
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	18d2      	adds	r2, r2, r3
 8002fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <PCD_EP_ISR_Handler+0x524>
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	881a      	ldrh	r2, [r3, #0]
 8002ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d207      	bcs.n	800300c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0011      	movs	r1, r2
 8003004:	0018      	movs	r0, r3
 8003006:	f006 f9ec 	bl	80093e2 <HAL_PCD_DataOutStageCallback>
 800300a:	e006      	b.n	800301a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003012:	0011      	movs	r1, r2
 8003014:	0018      	movs	r0, r3
 8003016:	f003 f941 	bl	800629c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800301a:	2452      	movs	r4, #82	; 0x52
 800301c:	193b      	adds	r3, r7, r4
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	2280      	movs	r2, #128	; 0x80
 8003022:	4013      	ands	r3, r2
 8003024:	d100      	bne.n	8003028 <PCD_EP_ISR_Handler+0x550>
 8003026:	e135      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003028:	2055      	movs	r0, #85	; 0x55
 800302a:	183b      	adds	r3, r7, r0
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	1c5a      	adds	r2, r3, #1
 8003030:	0013      	movs	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	189b      	adds	r3, r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	18d3      	adds	r3, r2, r3
 800303c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	001a      	movs	r2, r3
 8003044:	183b      	adds	r3, r7, r0
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	18d3      	adds	r3, r2, r3
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29a      	uxth	r2, r3
 8003050:	2542      	movs	r5, #66	; 0x42
 8003052:	197b      	adds	r3, r7, r5
 8003054:	494d      	ldr	r1, [pc, #308]	; (800318c <PCD_EP_ISR_Handler+0x6b4>)
 8003056:	400a      	ands	r2, r1
 8003058:	801a      	strh	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	001a      	movs	r2, r3
 8003060:	183b      	adds	r3, r7, r0
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	18d3      	adds	r3, r2, r3
 8003068:	197a      	adds	r2, r7, r5
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	4948      	ldr	r1, [pc, #288]	; (8003190 <PCD_EP_ISR_Handler+0x6b8>)
 800306e:	430a      	orrs	r2, r1
 8003070:	b292      	uxth	r2, r2
 8003072:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8003074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003076:	78db      	ldrb	r3, [r3, #3]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d100      	bne.n	800307e <PCD_EP_ISR_Handler+0x5a6>
 800307c:	e0ad      	b.n	80031da <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 800307e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003080:	2200      	movs	r2, #0
 8003082:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003084:	193b      	adds	r3, r7, r4
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	2240      	movs	r2, #64	; 0x40
 800308a:	4013      	ands	r3, r2
 800308c:	d046      	beq.n	800311c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800308e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003090:	785b      	ldrb	r3, [r3, #1]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d125      	bne.n	80030e2 <PCD_EP_ISR_Handler+0x60a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2250      	movs	r2, #80	; 0x50
 80030a2:	5a9b      	ldrh	r3, [r3, r2]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	001a      	movs	r2, r3
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	189b      	adds	r3, r3, r2
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
 80030ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	00da      	lsls	r2, r3, #3
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	18d3      	adds	r3, r2, r3
 80030b8:	4a33      	ldr	r2, [pc, #204]	; (8003188 <PCD_EP_ISR_Handler+0x6b0>)
 80030ba:	4694      	mov	ip, r2
 80030bc:	4463      	add	r3, ip
 80030be:	623b      	str	r3, [r7, #32]
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	4a33      	ldr	r2, [pc, #204]	; (8003194 <PCD_EP_ISR_Handler+0x6bc>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	801a      	strh	r2, [r3, #0]
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	4a2e      	ldr	r2, [pc, #184]	; (8003190 <PCD_EP_ISR_Handler+0x6b8>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	b29a      	uxth	r2, r3
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	801a      	strh	r2, [r3, #0]
 80030e0:	e073      	b.n	80031ca <PCD_EP_ISR_Handler+0x6f2>
 80030e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e4:	785b      	ldrb	r3, [r3, #1]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d16f      	bne.n	80031ca <PCD_EP_ISR_Handler+0x6f2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2250      	movs	r2, #80	; 0x50
 80030f6:	5a9b      	ldrh	r3, [r3, r2]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	001a      	movs	r2, r3
 80030fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fe:	189b      	adds	r3, r3, r2
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	00da      	lsls	r2, r3, #3
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	18d3      	adds	r3, r2, r3
 800310c:	4a1e      	ldr	r2, [pc, #120]	; (8003188 <PCD_EP_ISR_Handler+0x6b0>)
 800310e:	4694      	mov	ip, r2
 8003110:	4463      	add	r3, ip
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003116:	2200      	movs	r2, #0
 8003118:	801a      	strh	r2, [r3, #0]
 800311a:	e056      	b.n	80031ca <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d136      	bne.n	8003198 <PCD_EP_ISR_Handler+0x6c0>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	637b      	str	r3, [r7, #52]	; 0x34
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2250      	movs	r2, #80	; 0x50
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	001a      	movs	r2, r3
 800313c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800313e:	189b      	adds	r3, r3, r2
 8003140:	637b      	str	r3, [r7, #52]	; 0x34
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00da      	lsls	r2, r3, #3
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	4a0b      	ldr	r2, [pc, #44]	; (800317c <PCD_EP_ISR_Handler+0x6a4>)
 800314e:	4694      	mov	ip, r2
 8003150:	4463      	add	r3, ip
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
 8003154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b29b      	uxth	r3, r3
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <PCD_EP_ISR_Handler+0x6bc>)
 800315c:	4013      	ands	r3, r2
 800315e:	b29a      	uxth	r2, r3
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	801a      	strh	r2, [r3, #0]
 8003164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003166:	881b      	ldrh	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4a09      	ldr	r2, [pc, #36]	; (8003190 <PCD_EP_ISR_Handler+0x6b8>)
 800316c:	4313      	orrs	r3, r2
 800316e:	b29a      	uxth	r2, r3
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	801a      	strh	r2, [r3, #0]
 8003174:	e029      	b.n	80031ca <PCD_EP_ISR_Handler+0x6f2>
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	00000f8f 	.word	0x00000f8f
 800317c:	00000406 	.word	0x00000406
 8003180:	ffff8f8f 	.word	0xffff8f8f
 8003184:	ffff80c0 	.word	0xffff80c0
 8003188:	00000402 	.word	0x00000402
 800318c:	ffff8f0f 	.word	0xffff8f0f
 8003190:	ffff8000 	.word	0xffff8000
 8003194:	ffff83ff 	.word	0xffff83ff
 8003198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d114      	bne.n	80031ca <PCD_EP_ISR_Handler+0x6f2>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2250      	movs	r2, #80	; 0x50
 80031a6:	5a9b      	ldrh	r3, [r3, r2]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	001a      	movs	r2, r3
 80031ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ae:	189b      	adds	r3, r3, r2
 80031b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	00da      	lsls	r2, r3, #3
 80031b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ba:	18d3      	adds	r3, r2, r3
 80031bc:	4a3d      	ldr	r2, [pc, #244]	; (80032b4 <PCD_EP_ISR_Handler+0x7dc>)
 80031be:	4694      	mov	ip, r2
 80031c0:	4463      	add	r3, ip
 80031c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	2200      	movs	r2, #0
 80031c8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	0011      	movs	r1, r2
 80031d2:	0018      	movs	r0, r3
 80031d4:	f006 f926 	bl	8009424 <HAL_PCD_DataInStageCallback>
 80031d8:	e05c      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80031da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031dc:	78db      	ldrb	r3, [r3, #3]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d150      	bne.n	8003284 <PCD_EP_ISR_Handler+0x7ac>
 80031e2:	2352      	movs	r3, #82	; 0x52
 80031e4:	18fb      	adds	r3, r7, r3
 80031e6:	881a      	ldrh	r2, [r3, #0]
 80031e8:	2380      	movs	r3, #128	; 0x80
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d149      	bne.n	8003284 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2250      	movs	r2, #80	; 0x50
 80031f6:	5a9b      	ldrh	r3, [r3, r2]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	001a      	movs	r2, r3
 80031fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	18d2      	adds	r2, r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	18d3      	adds	r3, r2, r3
 800320a:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <PCD_EP_ISR_Handler+0x7e0>)
 800320c:	4694      	mov	ip, r2
 800320e:	4463      	add	r3, ip
 8003210:	881a      	ldrh	r2, [r3, #0]
 8003212:	2140      	movs	r1, #64	; 0x40
 8003214:	187b      	adds	r3, r7, r1
 8003216:	0592      	lsls	r2, r2, #22
 8003218:	0d92      	lsrs	r2, r2, #22
 800321a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800321c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	187b      	adds	r3, r7, r1
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	429a      	cmp	r2, r3
 8003226:	d907      	bls.n	8003238 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	187b      	adds	r3, r7, r1
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	1ad2      	subs	r2, r2, r3
 8003232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003234:	619a      	str	r2, [r3, #24]
 8003236:	e002      	b.n	800323e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323a:	2200      	movs	r2, #0
 800323c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003248:	781a      	ldrb	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0011      	movs	r1, r2
 800324e:	0018      	movs	r0, r3
 8003250:	f006 f8e8 	bl	8009424 <HAL_PCD_DataInStageCallback>
 8003254:	e01e      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	2140      	movs	r1, #64	; 0x40
 800325c:	187b      	adds	r3, r7, r1
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	18d2      	adds	r2, r2, r3
 8003262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003264:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8003266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003268:	69da      	ldr	r2, [r3, #28]
 800326a:	187b      	adds	r3, r7, r1
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	18d2      	adds	r2, r2, r3
 8003270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003272:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800327a:	0011      	movs	r1, r2
 800327c:	0018      	movs	r0, r3
 800327e:	f003 f80d 	bl	800629c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8003282:	e007      	b.n	8003294 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003284:	2352      	movs	r3, #82	; 0x52
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f000 f930 	bl	80034f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2244      	movs	r2, #68	; 0x44
 800329a:	5a9b      	ldrh	r3, [r3, r2]
 800329c:	b29b      	uxth	r3, r3
 800329e:	b21b      	sxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	da01      	bge.n	80032a8 <PCD_EP_ISR_Handler+0x7d0>
 80032a4:	f7ff fc1e 	bl	8002ae4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	0018      	movs	r0, r3
 80032ac:	46bd      	mov	sp, r7
 80032ae:	b016      	add	sp, #88	; 0x58
 80032b0:	bdb0      	pop	{r4, r5, r7, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	00000406 	.word	0x00000406
 80032b8:	00000402 	.word	0x00000402

080032bc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032bc:	b590      	push	{r4, r7, lr}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	1dbb      	adds	r3, r7, #6
 80032c8:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032ca:	1dbb      	adds	r3, r7, #6
 80032cc:	881a      	ldrh	r2, [r3, #0]
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	01db      	lsls	r3, r3, #7
 80032d2:	4013      	ands	r3, r2
 80032d4:	d100      	bne.n	80032d8 <HAL_PCD_EP_DB_Receive+0x1c>
 80032d6:	e07d      	b.n	80033d4 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2250      	movs	r2, #80	; 0x50
 80032de:	5a9b      	ldrh	r3, [r3, r2]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	001a      	movs	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	18d2      	adds	r2, r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	4a7a      	ldr	r2, [pc, #488]	; (80034dc <HAL_PCD_EP_DB_Receive+0x220>)
 80032f4:	4694      	mov	ip, r2
 80032f6:	4463      	add	r3, ip
 80032f8:	881a      	ldrh	r2, [r3, #0]
 80032fa:	211a      	movs	r1, #26
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	0592      	lsls	r2, r2, #22
 8003300:	0d92      	lsrs	r2, r2, #22
 8003302:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	699a      	ldr	r2, [r3, #24]
 8003308:	187b      	adds	r3, r7, r1
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	429a      	cmp	r2, r3
 800330e:	d307      	bcc.n	8003320 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	699a      	ldr	r2, [r3, #24]
 8003314:	187b      	adds	r3, r7, r1
 8003316:	881b      	ldrh	r3, [r3, #0]
 8003318:	1ad2      	subs	r2, r2, r3
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	619a      	str	r2, [r3, #24]
 800331e:	e002      	b.n	8003326 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	2200      	movs	r2, #0
 8003324:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d121      	bne.n	8003372 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	001a      	movs	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	18d3      	adds	r3, r2, r3
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	b29a      	uxth	r2, r3
 8003340:	2018      	movs	r0, #24
 8003342:	183b      	adds	r3, r7, r0
 8003344:	4966      	ldr	r1, [pc, #408]	; (80034e0 <HAL_PCD_EP_DB_Receive+0x224>)
 8003346:	400a      	ands	r2, r1
 8003348:	801a      	strh	r2, [r3, #0]
 800334a:	183b      	adds	r3, r7, r0
 800334c:	183a      	adds	r2, r7, r0
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0189      	lsls	r1, r1, #6
 8003354:	404a      	eors	r2, r1
 8003356:	801a      	strh	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	001a      	movs	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	18d3      	adds	r3, r2, r3
 8003366:	183a      	adds	r2, r7, r0
 8003368:	8812      	ldrh	r2, [r2, #0]
 800336a:	495e      	ldr	r1, [pc, #376]	; (80034e4 <HAL_PCD_EP_DB_Receive+0x228>)
 800336c:	430a      	orrs	r2, r1
 800336e:	b292      	uxth	r2, r2
 8003370:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003372:	1dbb      	adds	r3, r7, #6
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	2240      	movs	r2, #64	; 0x40
 8003378:	4013      	ands	r3, r2
 800337a:	d01a      	beq.n	80033b2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	001a      	movs	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	18d3      	adds	r3, r2, r3
 800338a:	881b      	ldrh	r3, [r3, #0]
 800338c:	b29a      	uxth	r2, r3
 800338e:	2016      	movs	r0, #22
 8003390:	183b      	adds	r3, r7, r0
 8003392:	4955      	ldr	r1, [pc, #340]	; (80034e8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003394:	400a      	ands	r2, r1
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	001a      	movs	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	183a      	adds	r2, r7, r0
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	4950      	ldr	r1, [pc, #320]	; (80034ec <HAL_PCD_EP_DB_Receive+0x230>)
 80033ac:	430a      	orrs	r2, r1
 80033ae:	b292      	uxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80033b2:	241a      	movs	r4, #26
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	881b      	ldrh	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d100      	bne.n	80033be <HAL_PCD_EP_DB_Receive+0x102>
 80033bc:	e086      	b.n	80034cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	6959      	ldr	r1, [r3, #20]
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	891a      	ldrh	r2, [r3, #8]
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	f004 f99d 	bl	800770c <USB_ReadPMA>
 80033d2:	e07b      	b.n	80034cc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2250      	movs	r2, #80	; 0x50
 80033da:	5a9b      	ldrh	r3, [r3, r2]
 80033dc:	b29b      	uxth	r3, r3
 80033de:	001a      	movs	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	18d2      	adds	r2, r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	18d3      	adds	r3, r2, r3
 80033ee:	4a40      	ldr	r2, [pc, #256]	; (80034f0 <HAL_PCD_EP_DB_Receive+0x234>)
 80033f0:	4694      	mov	ip, r2
 80033f2:	4463      	add	r3, ip
 80033f4:	881a      	ldrh	r2, [r3, #0]
 80033f6:	211a      	movs	r1, #26
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	0592      	lsls	r2, r2, #22
 80033fc:	0d92      	lsrs	r2, r2, #22
 80033fe:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	187b      	adds	r3, r7, r1
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d307      	bcc.n	800341c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	699a      	ldr	r2, [r3, #24]
 8003410:	187b      	adds	r3, r7, r1
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	1ad2      	subs	r2, r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	619a      	str	r2, [r3, #24]
 800341a:	e002      	b.n	8003422 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2200      	movs	r2, #0
 8003420:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d121      	bne.n	800346e <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	001a      	movs	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	18d3      	adds	r3, r2, r3
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	b29a      	uxth	r2, r3
 800343c:	201e      	movs	r0, #30
 800343e:	183b      	adds	r3, r7, r0
 8003440:	4927      	ldr	r1, [pc, #156]	; (80034e0 <HAL_PCD_EP_DB_Receive+0x224>)
 8003442:	400a      	ands	r2, r1
 8003444:	801a      	strh	r2, [r3, #0]
 8003446:	183b      	adds	r3, r7, r0
 8003448:	183a      	adds	r2, r7, r0
 800344a:	8812      	ldrh	r2, [r2, #0]
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	0189      	lsls	r1, r1, #6
 8003450:	404a      	eors	r2, r1
 8003452:	801a      	strh	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	001a      	movs	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	18d3      	adds	r3, r2, r3
 8003462:	183a      	adds	r2, r7, r0
 8003464:	8812      	ldrh	r2, [r2, #0]
 8003466:	491f      	ldr	r1, [pc, #124]	; (80034e4 <HAL_PCD_EP_DB_Receive+0x228>)
 8003468:	430a      	orrs	r2, r1
 800346a:	b292      	uxth	r2, r2
 800346c:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800346e:	1dbb      	adds	r3, r7, #6
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	2240      	movs	r2, #64	; 0x40
 8003474:	4013      	ands	r3, r2
 8003476:	d11a      	bne.n	80034ae <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	001a      	movs	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b29a      	uxth	r2, r3
 800348a:	201c      	movs	r0, #28
 800348c:	183b      	adds	r3, r7, r0
 800348e:	4916      	ldr	r1, [pc, #88]	; (80034e8 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003490:	400a      	ands	r2, r1
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	001a      	movs	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	18d3      	adds	r3, r2, r3
 80034a2:	183a      	adds	r2, r7, r0
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	4911      	ldr	r1, [pc, #68]	; (80034ec <HAL_PCD_EP_DB_Receive+0x230>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	b292      	uxth	r2, r2
 80034ac:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80034ae:	241a      	movs	r4, #26
 80034b0:	193b      	adds	r3, r7, r4
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d009      	beq.n	80034cc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6818      	ldr	r0, [r3, #0]
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	6959      	ldr	r1, [r3, #20]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	895a      	ldrh	r2, [r3, #10]
 80034c4:	193b      	adds	r3, r7, r4
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f004 f920 	bl	800770c <USB_ReadPMA>
    }
  }

  return count;
 80034cc:	231a      	movs	r3, #26
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	881b      	ldrh	r3, [r3, #0]
}
 80034d2:	0018      	movs	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b009      	add	sp, #36	; 0x24
 80034d8:	bd90      	pop	{r4, r7, pc}
 80034da:	46c0      	nop			; (mov r8, r8)
 80034dc:	00000402 	.word	0x00000402
 80034e0:	ffffbf8f 	.word	0xffffbf8f
 80034e4:	ffff8080 	.word	0xffff8080
 80034e8:	ffff8f8f 	.word	0xffff8f8f
 80034ec:	ffff80c0 	.word	0xffff80c0
 80034f0:	00000406 	.word	0x00000406

080034f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0a2      	sub	sp, #136	; 0x88
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	1dbb      	adds	r3, r7, #6
 8003500:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003502:	1dbb      	adds	r3, r7, #6
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	4013      	ands	r3, r2
 800350a:	d100      	bne.n	800350e <HAL_PCD_EP_DB_Transmit+0x1a>
 800350c:	e1c8      	b.n	80038a0 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2250      	movs	r2, #80	; 0x50
 8003514:	5a9b      	ldrh	r3, [r3, r2]
 8003516:	b29b      	uxth	r3, r3
 8003518:	001a      	movs	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	18d2      	adds	r2, r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	18d3      	adds	r3, r2, r3
 8003528:	4ad7      	ldr	r2, [pc, #860]	; (8003888 <HAL_PCD_EP_DB_Transmit+0x394>)
 800352a:	4694      	mov	ip, r2
 800352c:	4463      	add	r3, ip
 800352e:	881a      	ldrh	r2, [r3, #0]
 8003530:	214e      	movs	r1, #78	; 0x4e
 8003532:	187b      	adds	r3, r7, r1
 8003534:	0592      	lsls	r2, r2, #22
 8003536:	0d92      	lsrs	r2, r2, #22
 8003538:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	187b      	adds	r3, r7, r1
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d907      	bls.n	8003556 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	699a      	ldr	r2, [r3, #24]
 800354a:	187b      	adds	r3, r7, r1
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	1ad2      	subs	r2, r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	619a      	str	r2, [r3, #24]
 8003554:	e002      	b.n	800355c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2200      	movs	r2, #0
 800355a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d000      	beq.n	8003566 <HAL_PCD_EP_DB_Transmit+0x72>
 8003564:	e0b5      	b.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	785b      	ldrb	r3, [r3, #1]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d125      	bne.n	80035ba <HAL_PCD_EP_DB_Transmit+0xc6>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	62bb      	str	r3, [r7, #40]	; 0x28
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2250      	movs	r2, #80	; 0x50
 800357a:	5a9b      	ldrh	r3, [r3, r2]
 800357c:	b29b      	uxth	r3, r3
 800357e:	001a      	movs	r2, r3
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	189b      	adds	r3, r3, r2
 8003584:	62bb      	str	r3, [r7, #40]	; 0x28
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	00da      	lsls	r2, r3, #3
 800358c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800358e:	18d3      	adds	r3, r2, r3
 8003590:	4abd      	ldr	r2, [pc, #756]	; (8003888 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003592:	4694      	mov	ip, r2
 8003594:	4463      	add	r3, ip
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
 8003598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	4abb      	ldr	r2, [pc, #748]	; (800388c <HAL_PCD_EP_DB_Transmit+0x398>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4ab8      	ldr	r2, [pc, #736]	; (8003890 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	801a      	strh	r2, [r3, #0]
 80035b8:	e01b      	b.n	80035f2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d117      	bne.n	80035f2 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2250      	movs	r2, #80	; 0x50
 80035ce:	5a9b      	ldrh	r3, [r3, r2]
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	001a      	movs	r2, r3
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	189b      	adds	r3, r3, r2
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	00da      	lsls	r2, r3, #3
 80035e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e2:	18d3      	adds	r3, r2, r3
 80035e4:	4aa8      	ldr	r2, [pc, #672]	; (8003888 <HAL_PCD_EP_DB_Transmit+0x394>)
 80035e6:	4694      	mov	ip, r2
 80035e8:	4463      	add	r3, ip
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2200      	movs	r2, #0
 80035f0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	623b      	str	r3, [r7, #32]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	785b      	ldrb	r3, [r3, #1]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d125      	bne.n	800364c <HAL_PCD_EP_DB_Transmit+0x158>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2250      	movs	r2, #80	; 0x50
 800360c:	5a9b      	ldrh	r3, [r3, r2]
 800360e:	b29b      	uxth	r3, r3
 8003610:	001a      	movs	r2, r3
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	189b      	adds	r3, r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00da      	lsls	r2, r3, #3
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	18d3      	adds	r3, r2, r3
 8003622:	4a9c      	ldr	r2, [pc, #624]	; (8003894 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003624:	4694      	mov	ip, r2
 8003626:	4463      	add	r3, ip
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	4a96      	ldr	r2, [pc, #600]	; (800388c <HAL_PCD_EP_DB_Transmit+0x398>)
 8003632:	4013      	ands	r3, r2
 8003634:	b29a      	uxth	r2, r3
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	4a93      	ldr	r2, [pc, #588]	; (8003890 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	b29a      	uxth	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	e018      	b.n	800367e <HAL_PCD_EP_DB_Transmit+0x18a>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	785b      	ldrb	r3, [r3, #1]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d114      	bne.n	800367e <HAL_PCD_EP_DB_Transmit+0x18a>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2250      	movs	r2, #80	; 0x50
 800365a:	5a9b      	ldrh	r3, [r3, r2]
 800365c:	b29b      	uxth	r3, r3
 800365e:	001a      	movs	r2, r3
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	189b      	adds	r3, r3, r2
 8003664:	623b      	str	r3, [r7, #32]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	00da      	lsls	r2, r3, #3
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	18d3      	adds	r3, r2, r3
 8003670:	4a88      	ldr	r2, [pc, #544]	; (8003894 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003672:	4694      	mov	ip, r2
 8003674:	4463      	add	r3, ip
 8003676:	61fb      	str	r3, [r7, #28]
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	2200      	movs	r2, #0
 800367c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	781a      	ldrb	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	0011      	movs	r1, r2
 8003686:	0018      	movs	r0, r3
 8003688:	f005 fecc 	bl	8009424 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800368c:	1dbb      	adds	r3, r7, #6
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	2380      	movs	r3, #128	; 0x80
 8003692:	01db      	lsls	r3, r3, #7
 8003694:	4013      	ands	r3, r2
 8003696:	d100      	bne.n	800369a <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003698:	e2d4      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	001a      	movs	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	18d3      	adds	r3, r2, r3
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	2012      	movs	r0, #18
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	4979      	ldr	r1, [pc, #484]	; (8003898 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80036b2:	400a      	ands	r2, r1
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	001a      	movs	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	18d3      	adds	r3, r2, r3
 80036c4:	183a      	adds	r2, r7, r0
 80036c6:	8812      	ldrh	r2, [r2, #0]
 80036c8:	4974      	ldr	r1, [pc, #464]	; (800389c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80036ca:	430a      	orrs	r2, r1
 80036cc:	b292      	uxth	r2, r2
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	e2b8      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036d2:	1dbb      	adds	r3, r7, #6
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	2380      	movs	r3, #128	; 0x80
 80036d8:	01db      	lsls	r3, r3, #7
 80036da:	4013      	ands	r3, r2
 80036dc:	d01a      	beq.n	8003714 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	001a      	movs	r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	18d3      	adds	r3, r2, r3
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	2044      	movs	r0, #68	; 0x44
 80036f2:	183b      	adds	r3, r7, r0
 80036f4:	4968      	ldr	r1, [pc, #416]	; (8003898 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	001a      	movs	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	18d3      	adds	r3, r2, r3
 8003708:	183a      	adds	r2, r7, r0
 800370a:	8812      	ldrh	r2, [r2, #0]
 800370c:	4963      	ldr	r1, [pc, #396]	; (800389c <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800370e:	430a      	orrs	r2, r1
 8003710:	b292      	uxth	r2, r2
 8003712:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	5c9b      	ldrb	r3, [r3, r2]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d000      	beq.n	8003720 <HAL_PCD_EP_DB_Transmit+0x22c>
 800371e:	e291      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	695a      	ldr	r2, [r3, #20]
 8003724:	214e      	movs	r1, #78	; 0x4e
 8003726:	187b      	adds	r3, r7, r1
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	18d2      	adds	r2, r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	69da      	ldr	r2, [r3, #28]
 8003734:	187b      	adds	r3, r7, r1
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	18d2      	adds	r2, r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6a1a      	ldr	r2, [r3, #32]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	429a      	cmp	r2, r3
 8003748:	d309      	bcc.n	800375e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	621a      	str	r2, [r3, #32]
 800375c:	e016      	b.n	800378c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d108      	bne.n	8003778 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8003766:	234e      	movs	r3, #78	; 0x4e
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2224      	movs	r2, #36	; 0x24
 8003772:	2100      	movs	r1, #0
 8003774:	5499      	strb	r1, [r3, r2]
 8003776:	e009      	b.n	800378c <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	2100      	movs	r1, #0
 800377e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2200      	movs	r2, #0
 800378a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	785b      	ldrb	r3, [r3, #1]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d150      	bne.n	8003836 <HAL_PCD_EP_DB_Transmit+0x342>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	63bb      	str	r3, [r7, #56]	; 0x38
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2250      	movs	r2, #80	; 0x50
 80037a0:	5a9b      	ldrh	r3, [r3, r2]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	001a      	movs	r2, r3
 80037a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a8:	189b      	adds	r3, r3, r2
 80037aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	00da      	lsls	r2, r3, #3
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	18d3      	adds	r3, r2, r3
 80037b6:	4a34      	ldr	r2, [pc, #208]	; (8003888 <HAL_PCD_EP_DB_Transmit+0x394>)
 80037b8:	4694      	mov	ip, r2
 80037ba:	4463      	add	r3, ip
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
 80037be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d110      	bne.n	80037e6 <HAL_PCD_EP_DB_Transmit+0x2f2>
 80037c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	4a30      	ldr	r2, [pc, #192]	; (800388c <HAL_PCD_EP_DB_Transmit+0x398>)
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d2:	801a      	strh	r2, [r3, #0]
 80037d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	b29a      	uxth	r2, r3
 80037e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e2:	801a      	strh	r2, [r3, #0]
 80037e4:	e044      	b.n	8003870 <HAL_PCD_EP_DB_Transmit+0x37c>
 80037e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037e8:	2b3e      	cmp	r3, #62	; 0x3e
 80037ea:	d810      	bhi.n	800380e <HAL_PCD_EP_DB_Transmit+0x31a>
 80037ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80037f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f4:	2201      	movs	r2, #1
 80037f6:	4013      	ands	r3, r2
 80037f8:	d002      	beq.n	8003800 <HAL_PCD_EP_DB_Transmit+0x30c>
 80037fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037fc:	3301      	adds	r3, #1
 80037fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003802:	b29b      	uxth	r3, r3
 8003804:	029b      	lsls	r3, r3, #10
 8003806:	b29a      	uxth	r2, r3
 8003808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	e030      	b.n	8003870 <HAL_PCD_EP_DB_Transmit+0x37c>
 800380e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48
 8003814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003816:	221f      	movs	r2, #31
 8003818:	4013      	ands	r3, r2
 800381a:	d102      	bne.n	8003822 <HAL_PCD_EP_DB_Transmit+0x32e>
 800381c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381e:	3b01      	subs	r3, #1
 8003820:	64bb      	str	r3, [r7, #72]	; 0x48
 8003822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003824:	b29b      	uxth	r3, r3
 8003826:	029b      	lsls	r3, r3, #10
 8003828:	b29b      	uxth	r3, r3
 800382a:	4a19      	ldr	r2, [pc, #100]	; (8003890 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800382c:	4313      	orrs	r3, r2
 800382e:	b29a      	uxth	r2, r3
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	801a      	strh	r2, [r3, #0]
 8003834:	e01c      	b.n	8003870 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	785b      	ldrb	r3, [r3, #1]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d118      	bne.n	8003870 <HAL_PCD_EP_DB_Transmit+0x37c>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	643b      	str	r3, [r7, #64]	; 0x40
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2250      	movs	r2, #80	; 0x50
 800384a:	5a9b      	ldrh	r3, [r3, r2]
 800384c:	b29b      	uxth	r3, r3
 800384e:	001a      	movs	r2, r3
 8003850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003852:	189b      	adds	r3, r3, r2
 8003854:	643b      	str	r3, [r7, #64]	; 0x40
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	00da      	lsls	r2, r3, #3
 800385c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800385e:	18d3      	adds	r3, r2, r3
 8003860:	4a09      	ldr	r2, [pc, #36]	; (8003888 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003862:	4694      	mov	ip, r2
 8003864:	4463      	add	r3, ip
 8003866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800386a:	b29a      	uxth	r2, r3
 800386c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800386e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	6959      	ldr	r1, [r3, #20]
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	891a      	ldrh	r2, [r3, #8]
 800387c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800387e:	b29b      	uxth	r3, r3
 8003880:	f003 ff00 	bl	8007684 <USB_WritePMA>
 8003884:	e1de      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	00000402 	.word	0x00000402
 800388c:	ffff83ff 	.word	0xffff83ff
 8003890:	ffff8000 	.word	0xffff8000
 8003894:	00000406 	.word	0x00000406
 8003898:	ffff8f8f 	.word	0xffff8f8f
 800389c:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2250      	movs	r2, #80	; 0x50
 80038a6:	5a9b      	ldrh	r3, [r3, r2]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	001a      	movs	r2, r3
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	18d2      	adds	r2, r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	18d3      	adds	r3, r2, r3
 80038ba:	4aca      	ldr	r2, [pc, #808]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80038bc:	4694      	mov	ip, r2
 80038be:	4463      	add	r3, ip
 80038c0:	881a      	ldrh	r2, [r3, #0]
 80038c2:	214e      	movs	r1, #78	; 0x4e
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	0592      	lsls	r2, r2, #22
 80038c8:	0d92      	lsrs	r2, r2, #22
 80038ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	699a      	ldr	r2, [r3, #24]
 80038d0:	187b      	adds	r3, r7, r1
 80038d2:	881b      	ldrh	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d307      	bcc.n	80038e8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	699a      	ldr	r2, [r3, #24]
 80038dc:	187b      	adds	r3, r7, r1
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	1ad2      	subs	r2, r2, r3
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	619a      	str	r2, [r3, #24]
 80038e6:	e002      	b.n	80038ee <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2200      	movs	r2, #0
 80038ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d000      	beq.n	80038f8 <HAL_PCD_EP_DB_Transmit+0x404>
 80038f6:	e0c0      	b.n	8003a7a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	785b      	ldrb	r3, [r3, #1]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d125      	bne.n	800394c <HAL_PCD_EP_DB_Transmit+0x458>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2250      	movs	r2, #80	; 0x50
 800390c:	5a9b      	ldrh	r3, [r3, r2]
 800390e:	b29b      	uxth	r3, r3
 8003910:	001a      	movs	r2, r3
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	189b      	adds	r3, r3, r2
 8003916:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	00da      	lsls	r2, r3, #3
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	18d3      	adds	r3, r2, r3
 8003922:	4ab1      	ldr	r2, [pc, #708]	; (8003be8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003924:	4694      	mov	ip, r2
 8003926:	4463      	add	r3, ip
 8003928:	66bb      	str	r3, [r7, #104]	; 0x68
 800392a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800392c:	881b      	ldrh	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	4aae      	ldr	r2, [pc, #696]	; (8003bec <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003932:	4013      	ands	r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003938:	801a      	strh	r2, [r3, #0]
 800393a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	b29b      	uxth	r3, r3
 8003940:	4aab      	ldr	r2, [pc, #684]	; (8003bf0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003942:	4313      	orrs	r3, r2
 8003944:	b29a      	uxth	r2, r3
 8003946:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003948:	801a      	strh	r2, [r3, #0]
 800394a:	e01b      	b.n	8003984 <HAL_PCD_EP_DB_Transmit+0x490>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d117      	bne.n	8003984 <HAL_PCD_EP_DB_Transmit+0x490>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	677b      	str	r3, [r7, #116]	; 0x74
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2250      	movs	r2, #80	; 0x50
 8003960:	5a9b      	ldrh	r3, [r3, r2]
 8003962:	b29b      	uxth	r3, r3
 8003964:	001a      	movs	r2, r3
 8003966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003968:	189b      	adds	r3, r3, r2
 800396a:	677b      	str	r3, [r7, #116]	; 0x74
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	00da      	lsls	r2, r3, #3
 8003972:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003974:	18d3      	adds	r3, r2, r3
 8003976:	4a9c      	ldr	r2, [pc, #624]	; (8003be8 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003978:	4694      	mov	ip, r2
 800397a:	4463      	add	r3, ip
 800397c:	673b      	str	r3, [r7, #112]	; 0x70
 800397e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003980:	2200      	movs	r2, #0
 8003982:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	67bb      	str	r3, [r7, #120]	; 0x78
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	785b      	ldrb	r3, [r3, #1]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d130      	bne.n	80039f4 <HAL_PCD_EP_DB_Transmit+0x500>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	187a      	adds	r2, r7, r1
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2250      	movs	r2, #80	; 0x50
 80039a2:	5a9b      	ldrh	r3, [r3, r2]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	001a      	movs	r2, r3
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	189b      	adds	r3, r3, r2
 80039ae:	187a      	adds	r2, r7, r1
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	18d3      	adds	r3, r2, r3
 80039be:	4a89      	ldr	r2, [pc, #548]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80039c0:	4694      	mov	ip, r2
 80039c2:	4463      	add	r3, ip
 80039c4:	2184      	movs	r1, #132	; 0x84
 80039c6:	187a      	adds	r2, r7, r1
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	4a86      	ldr	r2, [pc, #536]	; (8003bec <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	4a82      	ldr	r2, [pc, #520]	; (8003bf0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	801a      	strh	r2, [r3, #0]
 80039f2:	e018      	b.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x532>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	785b      	ldrb	r3, [r3, #1]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d114      	bne.n	8003a26 <HAL_PCD_EP_DB_Transmit+0x532>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2250      	movs	r2, #80	; 0x50
 8003a02:	5a9b      	ldrh	r3, [r3, r2]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	001a      	movs	r2, r3
 8003a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	00da      	lsls	r2, r3, #3
 8003a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a16:	18d3      	adds	r3, r2, r3
 8003a18:	4a72      	ldr	r2, [pc, #456]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a1a:	4694      	mov	ip, r2
 8003a1c:	4463      	add	r3, ip
 8003a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a22:	2200      	movs	r2, #0
 8003a24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f005 fcf8 	bl	8009424 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a34:	1dbb      	adds	r3, r7, #6
 8003a36:	881a      	ldrh	r2, [r3, #0]
 8003a38:	2380      	movs	r3, #128	; 0x80
 8003a3a:	01db      	lsls	r3, r3, #7
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d000      	beq.n	8003a42 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a40:	e100      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	001a      	movs	r2, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	18d3      	adds	r3, r2, r3
 8003a50:	881b      	ldrh	r3, [r3, #0]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	2046      	movs	r0, #70	; 0x46
 8003a56:	183b      	adds	r3, r7, r0
 8003a58:	4966      	ldr	r1, [pc, #408]	; (8003bf4 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	001a      	movs	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	18d3      	adds	r3, r2, r3
 8003a6c:	183a      	adds	r2, r7, r0
 8003a6e:	8812      	ldrh	r2, [r2, #0]
 8003a70:	4961      	ldr	r1, [pc, #388]	; (8003bf8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003a72:	430a      	orrs	r2, r1
 8003a74:	b292      	uxth	r2, r2
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	e0e4      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a7a:	1dbb      	adds	r3, r7, #6
 8003a7c:	881a      	ldrh	r2, [r3, #0]
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	01db      	lsls	r3, r3, #7
 8003a82:	4013      	ands	r3, r2
 8003a84:	d11a      	bne.n	8003abc <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	001a      	movs	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	18d3      	adds	r3, r2, r3
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	204c      	movs	r0, #76	; 0x4c
 8003a9a:	183b      	adds	r3, r7, r0
 8003a9c:	4955      	ldr	r1, [pc, #340]	; (8003bf4 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003a9e:	400a      	ands	r2, r1
 8003aa0:	801a      	strh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	18d3      	adds	r3, r2, r3
 8003ab0:	183a      	adds	r2, r7, r0
 8003ab2:	8812      	ldrh	r2, [r2, #0]
 8003ab4:	4950      	ldr	r1, [pc, #320]	; (8003bf8 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	b292      	uxth	r2, r2
 8003aba:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	2224      	movs	r2, #36	; 0x24
 8003ac0:	5c9b      	ldrb	r3, [r3, r2]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d000      	beq.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003ac6:	e0bd      	b.n	8003c44 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	214e      	movs	r1, #78	; 0x4e
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	18d2      	adds	r2, r2, r3
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	69da      	ldr	r2, [r3, #28]
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	881b      	ldrh	r3, [r3, #0]
 8003ae0:	18d2      	adds	r2, r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d309      	bcc.n	8003b06 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afe:	1ad2      	subs	r2, r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	621a      	str	r2, [r3, #32]
 8003b04:	e016      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d108      	bne.n	8003b20 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003b0e:	234e      	movs	r3, #78	; 0x4e
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2224      	movs	r2, #36	; 0x24
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	5499      	strb	r1, [r3, r2]
 8003b1e:	e009      	b.n	8003b34 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	2100      	movs	r1, #0
 8003b32:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	667b      	str	r3, [r7, #100]	; 0x64
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	785b      	ldrb	r3, [r3, #1]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d15c      	bne.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x708>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2250      	movs	r2, #80	; 0x50
 8003b4e:	5a9b      	ldrh	r3, [r3, r2]
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	001a      	movs	r2, r3
 8003b54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b56:	189b      	adds	r3, r3, r2
 8003b58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	00da      	lsls	r2, r3, #3
 8003b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b62:	18d3      	adds	r3, r2, r3
 8003b64:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003b66:	4694      	mov	ip, r2
 8003b68:	4463      	add	r3, ip
 8003b6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d110      	bne.n	8003b94 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8003b72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	4a1c      	ldr	r2, [pc, #112]	; (8003bec <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4a19      	ldr	r2, [pc, #100]	; (8003bf0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	e04d      	b.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b96:	2b3e      	cmp	r3, #62	; 0x3e
 8003b98:	d810      	bhi.n	8003bbc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b9c:	085b      	lsrs	r3, r3, #1
 8003b9e:	657b      	str	r3, [r7, #84]	; 0x54
 8003ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	d002      	beq.n	8003bae <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003baa:	3301      	adds	r3, #1
 8003bac:	657b      	str	r3, [r7, #84]	; 0x54
 8003bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	029b      	lsls	r3, r3, #10
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb8:	801a      	strh	r2, [r3, #0]
 8003bba:	e039      	b.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003bbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	657b      	str	r3, [r7, #84]	; 0x54
 8003bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc4:	221f      	movs	r2, #31
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	d102      	bne.n	8003bd0 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003bca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	657b      	str	r3, [r7, #84]	; 0x54
 8003bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003be0:	801a      	strh	r2, [r3, #0]
 8003be2:	e025      	b.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003be4:	00000406 	.word	0x00000406
 8003be8:	00000402 	.word	0x00000402
 8003bec:	ffff83ff 	.word	0xffff83ff
 8003bf0:	ffff8000 	.word	0xffff8000
 8003bf4:	ffff8f8f 	.word	0xffff8f8f
 8003bf8:	ffffc080 	.word	0xffffc080
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d115      	bne.n	8003c30 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2250      	movs	r2, #80	; 0x50
 8003c0a:	5a9b      	ldrh	r3, [r3, r2]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	001a      	movs	r2, r3
 8003c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c12:	189b      	adds	r3, r3, r2
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	00da      	lsls	r2, r3, #3
 8003c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1e:	18d3      	adds	r3, r2, r3
 8003c20:	4a1e      	ldr	r2, [pc, #120]	; (8003c9c <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003c22:	4694      	mov	ip, r2
 8003c24:	4463      	add	r3, ip
 8003c26:	663b      	str	r3, [r7, #96]	; 0x60
 8003c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c2e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6959      	ldr	r1, [r3, #20]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	895a      	ldrh	r2, [r3, #10]
 8003c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	f003 fd20 	bl	8007684 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	001a      	movs	r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	18d3      	adds	r3, r2, r3
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	2010      	movs	r0, #16
 8003c58:	183b      	adds	r3, r7, r0
 8003c5a:	4911      	ldr	r1, [pc, #68]	; (8003ca0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003c5c:	400a      	ands	r2, r1
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	183b      	adds	r3, r7, r0
 8003c62:	183a      	adds	r2, r7, r0
 8003c64:	8812      	ldrh	r2, [r2, #0]
 8003c66:	2110      	movs	r1, #16
 8003c68:	404a      	eors	r2, r1
 8003c6a:	801a      	strh	r2, [r3, #0]
 8003c6c:	183b      	adds	r3, r7, r0
 8003c6e:	183a      	adds	r2, r7, r0
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	2120      	movs	r1, #32
 8003c74:	404a      	eors	r2, r1
 8003c76:	801a      	strh	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	183a      	adds	r2, r7, r0
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	4906      	ldr	r1, [pc, #24]	; (8003ca4 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b022      	add	sp, #136	; 0x88
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	00000406 	.word	0x00000406
 8003ca0:	ffff8fbf 	.word	0xffff8fbf
 8003ca4:	ffff8080 	.word	0xffff8080

08003ca8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ca8:	b590      	push	{r4, r7, lr}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	0008      	movs	r0, r1
 8003cb2:	0011      	movs	r1, r2
 8003cb4:	607b      	str	r3, [r7, #4]
 8003cb6:	240a      	movs	r4, #10
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	1c02      	adds	r2, r0, #0
 8003cbc:	801a      	strh	r2, [r3, #0]
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	18fb      	adds	r3, r7, r3
 8003cc2:	1c0a      	adds	r2, r1, #0
 8003cc4:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	187b      	adds	r3, r7, r1
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	2280      	movs	r2, #128	; 0x80
 8003cce:	4013      	ands	r3, r2
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cd6:	187b      	adds	r3, r7, r1
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	2207      	movs	r2, #7
 8003cdc:	4013      	ands	r3, r2
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	0013      	movs	r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	18d3      	adds	r3, r2, r3
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	e00b      	b.n	8003d08 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cf0:	230a      	movs	r3, #10
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	881a      	ldrh	r2, [r3, #0]
 8003cf6:	0013      	movs	r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	3369      	adds	r3, #105	; 0x69
 8003d00:	33ff      	adds	r3, #255	; 0xff
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	18d3      	adds	r3, r2, r3
 8003d06:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d08:	2308      	movs	r3, #8
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d107      	bne.n	8003d22 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	80da      	strh	r2, [r3, #6]
 8003d20:	e00b      	b.n	8003d3a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2201      	movs	r2, #1
 8003d26:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0c1b      	lsrs	r3, r3, #16
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	0018      	movs	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	b007      	add	sp, #28
 8003d42:	bd90      	pop	{r4, r7, pc}

08003d44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	23ba      	movs	r3, #186	; 0xba
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	2101      	movs	r1, #1
 8003d5a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	23b8      	movs	r3, #184	; 0xb8
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	2100      	movs	r1, #0
 8003d64:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2254      	movs	r2, #84	; 0x54
 8003d6a:	5a9b      	ldrh	r3, [r3, r2]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b299      	uxth	r1, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2254      	movs	r2, #84	; 0x54
 8003d78:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2254      	movs	r2, #84	; 0x54
 8003d7e:	5a9b      	ldrh	r3, [r3, r2]
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	2202      	movs	r2, #2
 8003d84:	4313      	orrs	r3, r2
 8003d86:	b299      	uxth	r1, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2254      	movs	r2, #84	; 0x54
 8003d8c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	0018      	movs	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	b004      	add	sp, #16
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	000a      	movs	r2, r1
 8003da2:	1cfb      	adds	r3, r7, #3
 8003da4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	46bd      	mov	sp, r7
 8003daa:	b002      	add	sp, #8
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db0:	b5b0      	push	{r4, r5, r7, lr}
 8003db2:	b08a      	sub	sp, #40	; 0x28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d102      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f000 fbbf 	bl	8004542 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc4:	4bc9      	ldr	r3, [pc, #804]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	220c      	movs	r2, #12
 8003dca:	4013      	ands	r3, r2
 8003dcc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dce:	4bc7      	ldr	r3, [pc, #796]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	2380      	movs	r3, #128	; 0x80
 8003dd4:	025b      	lsls	r3, r3, #9
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4013      	ands	r3, r2
 8003de2:	d100      	bne.n	8003de6 <HAL_RCC_OscConfig+0x36>
 8003de4:	e07e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d007      	beq.n	8003dfc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d112      	bne.n	8003e18 <HAL_RCC_OscConfig+0x68>
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	2380      	movs	r3, #128	; 0x80
 8003df6:	025b      	lsls	r3, r3, #9
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfc:	4bbb      	ldr	r3, [pc, #748]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	029b      	lsls	r3, r3, #10
 8003e04:	4013      	ands	r3, r2
 8003e06:	d100      	bne.n	8003e0a <HAL_RCC_OscConfig+0x5a>
 8003e08:	e06b      	b.n	8003ee2 <HAL_RCC_OscConfig+0x132>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d167      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	f000 fb95 	bl	8004542 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	2380      	movs	r3, #128	; 0x80
 8003e1e:	025b      	lsls	r3, r3, #9
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <HAL_RCC_OscConfig+0x84>
 8003e24:	4bb1      	ldr	r3, [pc, #708]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	4bb0      	ldr	r3, [pc, #704]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e2a:	2180      	movs	r1, #128	; 0x80
 8003e2c:	0249      	lsls	r1, r1, #9
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	e027      	b.n	8003e84 <HAL_RCC_OscConfig+0xd4>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	23a0      	movs	r3, #160	; 0xa0
 8003e3a:	02db      	lsls	r3, r3, #11
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d10e      	bne.n	8003e5e <HAL_RCC_OscConfig+0xae>
 8003e40:	4baa      	ldr	r3, [pc, #680]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	4ba9      	ldr	r3, [pc, #676]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	02c9      	lsls	r1, r1, #11
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	4ba7      	ldr	r3, [pc, #668]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4ba6      	ldr	r3, [pc, #664]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e54:	2180      	movs	r1, #128	; 0x80
 8003e56:	0249      	lsls	r1, r1, #9
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	601a      	str	r2, [r3, #0]
 8003e5c:	e012      	b.n	8003e84 <HAL_RCC_OscConfig+0xd4>
 8003e5e:	4ba3      	ldr	r3, [pc, #652]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	4ba2      	ldr	r3, [pc, #648]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e64:	49a2      	ldr	r1, [pc, #648]	; (80040f0 <HAL_RCC_OscConfig+0x340>)
 8003e66:	400a      	ands	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	4ba0      	ldr	r3, [pc, #640]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	025b      	lsls	r3, r3, #9
 8003e72:	4013      	ands	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4b9c      	ldr	r3, [pc, #624]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b9b      	ldr	r3, [pc, #620]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003e7e:	499d      	ldr	r1, [pc, #628]	; (80040f4 <HAL_RCC_OscConfig+0x344>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d015      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8c:	f7fd f9e6 	bl	800125c <HAL_GetTick>
 8003e90:	0003      	movs	r3, r0
 8003e92:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e94:	e009      	b.n	8003eaa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e96:	f7fd f9e1 	bl	800125c <HAL_GetTick>
 8003e9a:	0002      	movs	r2, r0
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b64      	cmp	r3, #100	; 0x64
 8003ea2:	d902      	bls.n	8003eaa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	f000 fb4c 	bl	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eaa:	4b90      	ldr	r3, [pc, #576]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	029b      	lsls	r3, r3, #10
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	d0ef      	beq.n	8003e96 <HAL_RCC_OscConfig+0xe6>
 8003eb6:	e015      	b.n	8003ee4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd f9d0 	bl	800125c <HAL_GetTick>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ec0:	e008      	b.n	8003ed4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ec2:	f7fd f9cb 	bl	800125c <HAL_GetTick>
 8003ec6:	0002      	movs	r2, r0
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	2b64      	cmp	r3, #100	; 0x64
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e336      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ed4:	4b85      	ldr	r3, [pc, #532]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	029b      	lsls	r3, r3, #10
 8003edc:	4013      	ands	r3, r2
 8003ede:	d1f0      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x112>
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x140>
 8003eee:	e099      	b.n	8004024 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef8:	2220      	movs	r2, #32
 8003efa:	4013      	ands	r3, r2
 8003efc:	d009      	beq.n	8003f12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003efe:	4b7b      	ldr	r3, [pc, #492]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b7a      	ldr	r3, [pc, #488]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f04:	2120      	movs	r1, #32
 8003f06:	430a      	orrs	r2, r1
 8003f08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	4393      	bics	r3, r2
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	2b04      	cmp	r3, #4
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b0c      	cmp	r3, #12
 8003f1c:	d13e      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1ec>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d13b      	bne.n	8003f9c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f24:	4b71      	ldr	r3, [pc, #452]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2204      	movs	r2, #4
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d004      	beq.n	8003f38 <HAL_RCC_OscConfig+0x188>
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e304      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f38:	4b6c      	ldr	r3, [pc, #432]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_RCC_OscConfig+0x348>)
 8003f3e:	4013      	ands	r3, r2
 8003f40:	0019      	movs	r1, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	021a      	lsls	r2, r3, #8
 8003f48:	4b68      	ldr	r3, [pc, #416]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f4e:	4b67      	ldr	r3, [pc, #412]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2209      	movs	r2, #9
 8003f54:	4393      	bics	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f60:	f000 fc42 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8003f64:	0001      	movs	r1, r0
 8003f66:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	091b      	lsrs	r3, r3, #4
 8003f6c:	220f      	movs	r2, #15
 8003f6e:	4013      	ands	r3, r2
 8003f70:	4a62      	ldr	r2, [pc, #392]	; (80040fc <HAL_RCC_OscConfig+0x34c>)
 8003f72:	5cd3      	ldrb	r3, [r2, r3]
 8003f74:	000a      	movs	r2, r1
 8003f76:	40da      	lsrs	r2, r3
 8003f78:	4b61      	ldr	r3, [pc, #388]	; (8004100 <HAL_RCC_OscConfig+0x350>)
 8003f7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f7c:	4b61      	ldr	r3, [pc, #388]	; (8004104 <HAL_RCC_OscConfig+0x354>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2513      	movs	r5, #19
 8003f82:	197c      	adds	r4, r7, r5
 8003f84:	0018      	movs	r0, r3
 8003f86:	f7fd f923 	bl	80011d0 <HAL_InitTick>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f8e:	197b      	adds	r3, r7, r5
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d046      	beq.n	8004024 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003f96:	197b      	adds	r3, r7, r5
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	e2d2      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d027      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fa2:	4b52      	ldr	r3, [pc, #328]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2209      	movs	r2, #9
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b4f      	ldr	r3, [pc, #316]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fd f952 	bl	800125c <HAL_GetTick>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fbe:	f7fd f94d 	bl	800125c <HAL_GetTick>
 8003fc2:	0002      	movs	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e2b8      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fd0:	4b46      	ldr	r3, [pc, #280]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d0f1      	beq.n	8003fbe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b44      	ldr	r3, [pc, #272]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a46      	ldr	r2, [pc, #280]	; (80040f8 <HAL_RCC_OscConfig+0x348>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	021a      	lsls	r2, r3, #8
 8003fea:	4b40      	ldr	r3, [pc, #256]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003fec:	430a      	orrs	r2, r1
 8003fee:	605a      	str	r2, [r3, #4]
 8003ff0:	e018      	b.n	8004024 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b3d      	ldr	r3, [pc, #244]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	438a      	bics	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ffe:	f7fd f92d 	bl	800125c <HAL_GetTick>
 8004002:	0003      	movs	r3, r0
 8004004:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004008:	f7fd f928 	bl	800125c <HAL_GetTick>
 800400c:	0002      	movs	r2, r0
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e293      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800401a:	4b34      	ldr	r3, [pc, #208]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2204      	movs	r2, #4
 8004020:	4013      	ands	r3, r2
 8004022:	d1f1      	bne.n	8004008 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2210      	movs	r2, #16
 800402a:	4013      	ands	r3, r2
 800402c:	d100      	bne.n	8004030 <HAL_RCC_OscConfig+0x280>
 800402e:	e0a2      	b.n	8004176 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d140      	bne.n	80040b8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004036:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	2380      	movs	r3, #128	; 0x80
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4013      	ands	r3, r2
 8004040:	d005      	beq.n	800404e <HAL_RCC_OscConfig+0x29e>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e279      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800404e:	4b27      	ldr	r3, [pc, #156]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a2d      	ldr	r2, [pc, #180]	; (8004108 <HAL_RCC_OscConfig+0x358>)
 8004054:	4013      	ands	r3, r2
 8004056:	0019      	movs	r1, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800405c:	4b23      	ldr	r3, [pc, #140]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004062:	4b22      	ldr	r3, [pc, #136]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	0a19      	lsrs	r1, r3, #8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	061a      	lsls	r2, r3, #24
 8004070:	4b1e      	ldr	r3, [pc, #120]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407a:	0b5b      	lsrs	r3, r3, #13
 800407c:	3301      	adds	r3, #1
 800407e:	2280      	movs	r2, #128	; 0x80
 8004080:	0212      	lsls	r2, r2, #8
 8004082:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004084:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	091b      	lsrs	r3, r3, #4
 800408a:	210f      	movs	r1, #15
 800408c:	400b      	ands	r3, r1
 800408e:	491b      	ldr	r1, [pc, #108]	; (80040fc <HAL_RCC_OscConfig+0x34c>)
 8004090:	5ccb      	ldrb	r3, [r1, r3]
 8004092:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004094:	4b1a      	ldr	r3, [pc, #104]	; (8004100 <HAL_RCC_OscConfig+0x350>)
 8004096:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004098:	4b1a      	ldr	r3, [pc, #104]	; (8004104 <HAL_RCC_OscConfig+0x354>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2513      	movs	r5, #19
 800409e:	197c      	adds	r4, r7, r5
 80040a0:	0018      	movs	r0, r3
 80040a2:	f7fd f895 	bl	80011d0 <HAL_InitTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80040aa:	197b      	adds	r3, r7, r5
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d061      	beq.n	8004176 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80040b2:	197b      	adds	r3, r7, r5
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	e244      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d040      	beq.n	8004142 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040c0:	4b0a      	ldr	r3, [pc, #40]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x33c>)
 80040c6:	2180      	movs	r1, #128	; 0x80
 80040c8:	0049      	lsls	r1, r1, #1
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fd f8c5 	bl	800125c <HAL_GetTick>
 80040d2:	0003      	movs	r3, r0
 80040d4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040d6:	e019      	b.n	800410c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d8:	f7fd f8c0 	bl	800125c <HAL_GetTick>
 80040dc:	0002      	movs	r2, r0
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d912      	bls.n	800410c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e22b      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	40021000 	.word	0x40021000
 80040f0:	fffeffff 	.word	0xfffeffff
 80040f4:	fffbffff 	.word	0xfffbffff
 80040f8:	ffffe0ff 	.word	0xffffe0ff
 80040fc:	0800a358 	.word	0x0800a358
 8004100:	20000000 	.word	0x20000000
 8004104:	20000004 	.word	0x20000004
 8004108:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800410c:	4bca      	ldr	r3, [pc, #808]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4013      	ands	r3, r2
 8004116:	d0df      	beq.n	80040d8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004118:	4bc7      	ldr	r3, [pc, #796]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	4ac7      	ldr	r2, [pc, #796]	; (800443c <HAL_RCC_OscConfig+0x68c>)
 800411e:	4013      	ands	r3, r2
 8004120:	0019      	movs	r1, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004126:	4bc4      	ldr	r3, [pc, #784]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004128:	430a      	orrs	r2, r1
 800412a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800412c:	4bc2      	ldr	r3, [pc, #776]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	0a19      	lsrs	r1, r3, #8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	061a      	lsls	r2, r3, #24
 800413a:	4bbf      	ldr	r3, [pc, #764]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	e019      	b.n	8004176 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004142:	4bbd      	ldr	r3, [pc, #756]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	4bbc      	ldr	r3, [pc, #752]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004148:	49bd      	ldr	r1, [pc, #756]	; (8004440 <HAL_RCC_OscConfig+0x690>)
 800414a:	400a      	ands	r2, r1
 800414c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800414e:	f7fd f885 	bl	800125c <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004158:	f7fd f880 	bl	800125c <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e1eb      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800416a:	4bb3      	ldr	r3, [pc, #716]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4013      	ands	r3, r2
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2208      	movs	r2, #8
 800417c:	4013      	ands	r3, r2
 800417e:	d036      	beq.n	80041ee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d019      	beq.n	80041bc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004188:	4bab      	ldr	r3, [pc, #684]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800418a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800418c:	4baa      	ldr	r3, [pc, #680]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800418e:	2101      	movs	r1, #1
 8004190:	430a      	orrs	r2, r1
 8004192:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004194:	f7fd f862 	bl	800125c <HAL_GetTick>
 8004198:	0003      	movs	r3, r0
 800419a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419e:	f7fd f85d 	bl	800125c <HAL_GetTick>
 80041a2:	0002      	movs	r2, r0
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e1c8      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041b0:	4ba1      	ldr	r3, [pc, #644]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80041b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b4:	2202      	movs	r2, #2
 80041b6:	4013      	ands	r3, r2
 80041b8:	d0f1      	beq.n	800419e <HAL_RCC_OscConfig+0x3ee>
 80041ba:	e018      	b.n	80041ee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041bc:	4b9e      	ldr	r3, [pc, #632]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80041be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041c0:	4b9d      	ldr	r3, [pc, #628]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	438a      	bics	r2, r1
 80041c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c8:	f7fd f848 	bl	800125c <HAL_GetTick>
 80041cc:	0003      	movs	r3, r0
 80041ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d2:	f7fd f843 	bl	800125c <HAL_GetTick>
 80041d6:	0002      	movs	r2, r0
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e1ae      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041e4:	4b94      	ldr	r3, [pc, #592]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80041e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e8:	2202      	movs	r2, #2
 80041ea:	4013      	ands	r3, r2
 80041ec:	d1f1      	bne.n	80041d2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2204      	movs	r2, #4
 80041f4:	4013      	ands	r3, r2
 80041f6:	d100      	bne.n	80041fa <HAL_RCC_OscConfig+0x44a>
 80041f8:	e0ae      	b.n	8004358 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041fa:	2023      	movs	r0, #35	; 0x23
 80041fc:	183b      	adds	r3, r7, r0
 80041fe:	2200      	movs	r2, #0
 8004200:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004202:	4b8d      	ldr	r3, [pc, #564]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	055b      	lsls	r3, r3, #21
 800420a:	4013      	ands	r3, r2
 800420c:	d109      	bne.n	8004222 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800420e:	4b8a      	ldr	r3, [pc, #552]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004212:	4b89      	ldr	r3, [pc, #548]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004214:	2180      	movs	r1, #128	; 0x80
 8004216:	0549      	lsls	r1, r1, #21
 8004218:	430a      	orrs	r2, r1
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800421c:	183b      	adds	r3, r7, r0
 800421e:	2201      	movs	r2, #1
 8004220:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004222:	4b88      	ldr	r3, [pc, #544]	; (8004444 <HAL_RCC_OscConfig+0x694>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	2380      	movs	r3, #128	; 0x80
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	4013      	ands	r3, r2
 800422c:	d11a      	bne.n	8004264 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800422e:	4b85      	ldr	r3, [pc, #532]	; (8004444 <HAL_RCC_OscConfig+0x694>)
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	4b84      	ldr	r3, [pc, #528]	; (8004444 <HAL_RCC_OscConfig+0x694>)
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	0049      	lsls	r1, r1, #1
 8004238:	430a      	orrs	r2, r1
 800423a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800423c:	f7fd f80e 	bl	800125c <HAL_GetTick>
 8004240:	0003      	movs	r3, r0
 8004242:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004244:	e008      	b.n	8004258 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004246:	f7fd f809 	bl	800125c <HAL_GetTick>
 800424a:	0002      	movs	r2, r0
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b64      	cmp	r3, #100	; 0x64
 8004252:	d901      	bls.n	8004258 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e174      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004258:	4b7a      	ldr	r3, [pc, #488]	; (8004444 <HAL_RCC_OscConfig+0x694>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d0f0      	beq.n	8004246 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	2380      	movs	r3, #128	; 0x80
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	429a      	cmp	r2, r3
 800426e:	d107      	bne.n	8004280 <HAL_RCC_OscConfig+0x4d0>
 8004270:	4b71      	ldr	r3, [pc, #452]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004274:	4b70      	ldr	r3, [pc, #448]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004276:	2180      	movs	r1, #128	; 0x80
 8004278:	0049      	lsls	r1, r1, #1
 800427a:	430a      	orrs	r2, r1
 800427c:	651a      	str	r2, [r3, #80]	; 0x50
 800427e:	e031      	b.n	80042e4 <HAL_RCC_OscConfig+0x534>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x4f2>
 8004288:	4b6b      	ldr	r3, [pc, #428]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800428a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428c:	4b6a      	ldr	r3, [pc, #424]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800428e:	496c      	ldr	r1, [pc, #432]	; (8004440 <HAL_RCC_OscConfig+0x690>)
 8004290:	400a      	ands	r2, r1
 8004292:	651a      	str	r2, [r3, #80]	; 0x50
 8004294:	4b68      	ldr	r3, [pc, #416]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004298:	4b67      	ldr	r3, [pc, #412]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800429a:	496b      	ldr	r1, [pc, #428]	; (8004448 <HAL_RCC_OscConfig+0x698>)
 800429c:	400a      	ands	r2, r1
 800429e:	651a      	str	r2, [r3, #80]	; 0x50
 80042a0:	e020      	b.n	80042e4 <HAL_RCC_OscConfig+0x534>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	23a0      	movs	r3, #160	; 0xa0
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d10e      	bne.n	80042cc <HAL_RCC_OscConfig+0x51c>
 80042ae:	4b62      	ldr	r3, [pc, #392]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b2:	4b61      	ldr	r3, [pc, #388]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042b4:	2180      	movs	r1, #128	; 0x80
 80042b6:	00c9      	lsls	r1, r1, #3
 80042b8:	430a      	orrs	r2, r1
 80042ba:	651a      	str	r2, [r3, #80]	; 0x50
 80042bc:	4b5e      	ldr	r3, [pc, #376]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042c0:	4b5d      	ldr	r3, [pc, #372]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042c2:	2180      	movs	r1, #128	; 0x80
 80042c4:	0049      	lsls	r1, r1, #1
 80042c6:	430a      	orrs	r2, r1
 80042c8:	651a      	str	r2, [r3, #80]	; 0x50
 80042ca:	e00b      	b.n	80042e4 <HAL_RCC_OscConfig+0x534>
 80042cc:	4b5a      	ldr	r3, [pc, #360]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d0:	4b59      	ldr	r3, [pc, #356]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042d2:	495b      	ldr	r1, [pc, #364]	; (8004440 <HAL_RCC_OscConfig+0x690>)
 80042d4:	400a      	ands	r2, r1
 80042d6:	651a      	str	r2, [r3, #80]	; 0x50
 80042d8:	4b57      	ldr	r3, [pc, #348]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042dc:	4b56      	ldr	r3, [pc, #344]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80042de:	495a      	ldr	r1, [pc, #360]	; (8004448 <HAL_RCC_OscConfig+0x698>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d015      	beq.n	8004318 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ec:	f7fc ffb6 	bl	800125c <HAL_GetTick>
 80042f0:	0003      	movs	r3, r0
 80042f2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f4:	e009      	b.n	800430a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fc ffb1 	bl	800125c <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	4a52      	ldr	r2, [pc, #328]	; (800444c <HAL_RCC_OscConfig+0x69c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e11b      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800430a:	4b4b      	ldr	r3, [pc, #300]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800430c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800430e:	2380      	movs	r3, #128	; 0x80
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	4013      	ands	r3, r2
 8004314:	d0ef      	beq.n	80042f6 <HAL_RCC_OscConfig+0x546>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004318:	f7fc ffa0 	bl	800125c <HAL_GetTick>
 800431c:	0003      	movs	r3, r0
 800431e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004320:	e009      	b.n	8004336 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7fc ff9b 	bl	800125c <HAL_GetTick>
 8004326:	0002      	movs	r2, r0
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	4a47      	ldr	r2, [pc, #284]	; (800444c <HAL_RCC_OscConfig+0x69c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e105      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004336:	4b40      	ldr	r3, [pc, #256]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800433a:	2380      	movs	r3, #128	; 0x80
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4013      	ands	r3, r2
 8004340:	d1ef      	bne.n	8004322 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004342:	2323      	movs	r3, #35	; 0x23
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434c:	4b3a      	ldr	r3, [pc, #232]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800434e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004350:	4b39      	ldr	r3, [pc, #228]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004352:	493f      	ldr	r1, [pc, #252]	; (8004450 <HAL_RCC_OscConfig+0x6a0>)
 8004354:	400a      	ands	r2, r1
 8004356:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2220      	movs	r2, #32
 800435e:	4013      	ands	r3, r2
 8004360:	d049      	beq.n	80043f6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d026      	beq.n	80043b8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800436a:	4b33      	ldr	r3, [pc, #204]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	4b32      	ldr	r3, [pc, #200]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004370:	2101      	movs	r1, #1
 8004372:	430a      	orrs	r2, r1
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	4b30      	ldr	r3, [pc, #192]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437a:	4b2f      	ldr	r3, [pc, #188]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 800437c:	2101      	movs	r1, #1
 800437e:	430a      	orrs	r2, r1
 8004380:	635a      	str	r2, [r3, #52]	; 0x34
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_OscConfig+0x6a4>)
 8004384:	6a1a      	ldr	r2, [r3, #32]
 8004386:	4b33      	ldr	r3, [pc, #204]	; (8004454 <HAL_RCC_OscConfig+0x6a4>)
 8004388:	2180      	movs	r1, #128	; 0x80
 800438a:	0189      	lsls	r1, r1, #6
 800438c:	430a      	orrs	r2, r1
 800438e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fc ff64 	bl	800125c <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004398:	e008      	b.n	80043ac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800439a:	f7fc ff5f 	bl	800125c <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0ca      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2202      	movs	r2, #2
 80043b2:	4013      	ands	r3, r2
 80043b4:	d0f1      	beq.n	800439a <HAL_RCC_OscConfig+0x5ea>
 80043b6:	e01e      	b.n	80043f6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4b1e      	ldr	r3, [pc, #120]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80043be:	2101      	movs	r1, #1
 80043c0:	438a      	bics	r2, r1
 80043c2:	609a      	str	r2, [r3, #8]
 80043c4:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_RCC_OscConfig+0x6a4>)
 80043c6:	6a1a      	ldr	r2, [r3, #32]
 80043c8:	4b22      	ldr	r3, [pc, #136]	; (8004454 <HAL_RCC_OscConfig+0x6a4>)
 80043ca:	4923      	ldr	r1, [pc, #140]	; (8004458 <HAL_RCC_OscConfig+0x6a8>)
 80043cc:	400a      	ands	r2, r1
 80043ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fc ff44 	bl	800125c <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043da:	f7fc ff3f 	bl	800125c <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0aa      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2202      	movs	r2, #2
 80043f2:	4013      	ands	r3, r2
 80043f4:	d1f1      	bne.n	80043da <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d100      	bne.n	8004400 <HAL_RCC_OscConfig+0x650>
 80043fe:	e09f      	b.n	8004540 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b0c      	cmp	r3, #12
 8004404:	d100      	bne.n	8004408 <HAL_RCC_OscConfig+0x658>
 8004406:	e078      	b.n	80044fa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440c:	2b02      	cmp	r3, #2
 800440e:	d159      	bne.n	80044c4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	4b08      	ldr	r3, [pc, #32]	; (8004438 <HAL_RCC_OscConfig+0x688>)
 8004416:	4911      	ldr	r1, [pc, #68]	; (800445c <HAL_RCC_OscConfig+0x6ac>)
 8004418:	400a      	ands	r2, r1
 800441a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441c:	f7fc ff1e 	bl	800125c <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004424:	e01c      	b.n	8004460 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004426:	f7fc ff19 	bl	800125c <HAL_GetTick>
 800442a:	0002      	movs	r2, r0
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d915      	bls.n	8004460 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e084      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
 8004438:	40021000 	.word	0x40021000
 800443c:	ffff1fff 	.word	0xffff1fff
 8004440:	fffffeff 	.word	0xfffffeff
 8004444:	40007000 	.word	0x40007000
 8004448:	fffffbff 	.word	0xfffffbff
 800444c:	00001388 	.word	0x00001388
 8004450:	efffffff 	.word	0xefffffff
 8004454:	40010000 	.word	0x40010000
 8004458:	ffffdfff 	.word	0xffffdfff
 800445c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004460:	4b3a      	ldr	r3, [pc, #232]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	049b      	lsls	r3, r3, #18
 8004468:	4013      	ands	r3, r2
 800446a:	d1dc      	bne.n	8004426 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800446c:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	4a37      	ldr	r2, [pc, #220]	; (8004550 <HAL_RCC_OscConfig+0x7a0>)
 8004472:	4013      	ands	r3, r2
 8004474:	0019      	movs	r1, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	431a      	orrs	r2, r3
 8004486:	4b31      	ldr	r3, [pc, #196]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800448c:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 8004492:	2180      	movs	r1, #128	; 0x80
 8004494:	0449      	lsls	r1, r1, #17
 8004496:	430a      	orrs	r2, r1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fc fedf 	bl	800125c <HAL_GetTick>
 800449e:	0003      	movs	r3, r0
 80044a0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044a2:	e008      	b.n	80044b6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a4:	f7fc feda 	bl	800125c <HAL_GetTick>
 80044a8:	0002      	movs	r2, r0
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e045      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	2380      	movs	r3, #128	; 0x80
 80044bc:	049b      	lsls	r3, r3, #18
 80044be:	4013      	ands	r3, r2
 80044c0:	d0f0      	beq.n	80044a4 <HAL_RCC_OscConfig+0x6f4>
 80044c2:	e03d      	b.n	8004540 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c4:	4b21      	ldr	r3, [pc, #132]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 80044ca:	4922      	ldr	r1, [pc, #136]	; (8004554 <HAL_RCC_OscConfig+0x7a4>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fc fec4 	bl	800125c <HAL_GetTick>
 80044d4:	0003      	movs	r3, r0
 80044d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044d8:	e008      	b.n	80044ec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044da:	f7fc febf 	bl	800125c <HAL_GetTick>
 80044de:	0002      	movs	r2, r0
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e02a      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044ec:	4b17      	ldr	r3, [pc, #92]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	2380      	movs	r3, #128	; 0x80
 80044f2:	049b      	lsls	r3, r3, #18
 80044f4:	4013      	ands	r3, r2
 80044f6:	d1f0      	bne.n	80044da <HAL_RCC_OscConfig+0x72a>
 80044f8:	e022      	b.n	8004540 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e01d      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004506:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_RCC_OscConfig+0x79c>)
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	025b      	lsls	r3, r3, #9
 8004512:	401a      	ands	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	429a      	cmp	r2, r3
 800451a:	d10f      	bne.n	800453c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	23f0      	movs	r3, #240	; 0xf0
 8004520:	039b      	lsls	r3, r3, #14
 8004522:	401a      	ands	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004528:	429a      	cmp	r2, r3
 800452a:	d107      	bne.n	800453c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	23c0      	movs	r3, #192	; 0xc0
 8004530:	041b      	lsls	r3, r3, #16
 8004532:	401a      	ands	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	0018      	movs	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	b00a      	add	sp, #40	; 0x28
 8004548:	bdb0      	pop	{r4, r5, r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	40021000 	.word	0x40021000
 8004550:	ff02ffff 	.word	0xff02ffff
 8004554:	feffffff 	.word	0xfeffffff

08004558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004558:	b5b0      	push	{r4, r5, r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d101      	bne.n	800456c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e128      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800456c:	4b96      	ldr	r3, [pc, #600]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2201      	movs	r2, #1
 8004572:	4013      	ands	r3, r2
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d91e      	bls.n	80045b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b93      	ldr	r3, [pc, #588]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2201      	movs	r2, #1
 8004580:	4393      	bics	r3, r2
 8004582:	0019      	movs	r1, r3
 8004584:	4b90      	ldr	r3, [pc, #576]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800458c:	f7fc fe66 	bl	800125c <HAL_GetTick>
 8004590:	0003      	movs	r3, r0
 8004592:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004594:	e009      	b.n	80045aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004596:	f7fc fe61 	bl	800125c <HAL_GetTick>
 800459a:	0002      	movs	r2, r0
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	4a8a      	ldr	r2, [pc, #552]	; (80047cc <HAL_RCC_ClockConfig+0x274>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e109      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	4b87      	ldr	r3, [pc, #540]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2201      	movs	r2, #1
 80045b0:	4013      	ands	r3, r2
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d009      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c2:	4b83      	ldr	r3, [pc, #524]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	22f0      	movs	r2, #240	; 0xf0
 80045c8:	4393      	bics	r3, r2
 80045ca:	0019      	movs	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b7f      	ldr	r3, [pc, #508]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 80045d2:	430a      	orrs	r2, r1
 80045d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2201      	movs	r2, #1
 80045dc:	4013      	ands	r3, r2
 80045de:	d100      	bne.n	80045e2 <HAL_RCC_ClockConfig+0x8a>
 80045e0:	e089      	b.n	80046f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ea:	4b79      	ldr	r3, [pc, #484]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	029b      	lsls	r3, r3, #10
 80045f2:	4013      	ands	r3, r2
 80045f4:	d120      	bne.n	8004638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0e1      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b03      	cmp	r3, #3
 8004600:	d107      	bne.n	8004612 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004602:	4b73      	ldr	r3, [pc, #460]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	049b      	lsls	r3, r3, #18
 800460a:	4013      	ands	r3, r2
 800460c:	d114      	bne.n	8004638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e0d5      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b01      	cmp	r3, #1
 8004618:	d106      	bne.n	8004628 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800461a:	4b6d      	ldr	r3, [pc, #436]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2204      	movs	r2, #4
 8004620:	4013      	ands	r3, r2
 8004622:	d109      	bne.n	8004638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e0ca      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004628:	4b69      	ldr	r3, [pc, #420]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4013      	ands	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0c2      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004638:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2203      	movs	r2, #3
 800463e:	4393      	bics	r3, r2
 8004640:	0019      	movs	r1, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 8004648:	430a      	orrs	r2, r1
 800464a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800464c:	f7fc fe06 	bl	800125c <HAL_GetTick>
 8004650:	0003      	movs	r3, r0
 8004652:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b02      	cmp	r3, #2
 800465a:	d111      	bne.n	8004680 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800465c:	e009      	b.n	8004672 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800465e:	f7fc fdfd 	bl	800125c <HAL_GetTick>
 8004662:	0002      	movs	r2, r0
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	4a58      	ldr	r2, [pc, #352]	; (80047cc <HAL_RCC_ClockConfig+0x274>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d901      	bls.n	8004672 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e0a5      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004672:	4b57      	ldr	r3, [pc, #348]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	220c      	movs	r2, #12
 8004678:	4013      	ands	r3, r2
 800467a:	2b08      	cmp	r3, #8
 800467c:	d1ef      	bne.n	800465e <HAL_RCC_ClockConfig+0x106>
 800467e:	e03a      	b.n	80046f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	2b03      	cmp	r3, #3
 8004686:	d111      	bne.n	80046ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004688:	e009      	b.n	800469e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468a:	f7fc fde7 	bl	800125c <HAL_GetTick>
 800468e:	0002      	movs	r2, r0
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	4a4d      	ldr	r2, [pc, #308]	; (80047cc <HAL_RCC_ClockConfig+0x274>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d901      	bls.n	800469e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e08f      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800469e:	4b4c      	ldr	r3, [pc, #304]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	220c      	movs	r2, #12
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b0c      	cmp	r3, #12
 80046a8:	d1ef      	bne.n	800468a <HAL_RCC_ClockConfig+0x132>
 80046aa:	e024      	b.n	80046f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d11b      	bne.n	80046ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046b4:	e009      	b.n	80046ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046b6:	f7fc fdd1 	bl	800125c <HAL_GetTick>
 80046ba:	0002      	movs	r2, r0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	4a42      	ldr	r2, [pc, #264]	; (80047cc <HAL_RCC_ClockConfig+0x274>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e079      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046ca:	4b41      	ldr	r3, [pc, #260]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	220c      	movs	r2, #12
 80046d0:	4013      	ands	r3, r2
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d1ef      	bne.n	80046b6 <HAL_RCC_ClockConfig+0x15e>
 80046d6:	e00e      	b.n	80046f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d8:	f7fc fdc0 	bl	800125c <HAL_GetTick>
 80046dc:	0002      	movs	r2, r0
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	4a3a      	ldr	r2, [pc, #232]	; (80047cc <HAL_RCC_ClockConfig+0x274>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d901      	bls.n	80046ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e068      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046ec:	4b38      	ldr	r3, [pc, #224]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	220c      	movs	r2, #12
 80046f2:	4013      	ands	r3, r2
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2201      	movs	r2, #1
 80046fc:	4013      	ands	r3, r2
 80046fe:	683a      	ldr	r2, [r7, #0]
 8004700:	429a      	cmp	r2, r3
 8004702:	d21e      	bcs.n	8004742 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004704:	4b30      	ldr	r3, [pc, #192]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2201      	movs	r2, #1
 800470a:	4393      	bics	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 8004710:	683a      	ldr	r2, [r7, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004716:	f7fc fda1 	bl	800125c <HAL_GetTick>
 800471a:	0003      	movs	r3, r0
 800471c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	e009      	b.n	8004734 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004720:	f7fc fd9c 	bl	800125c <HAL_GetTick>
 8004724:	0002      	movs	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	4a28      	ldr	r2, [pc, #160]	; (80047cc <HAL_RCC_ClockConfig+0x274>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e044      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004734:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <HAL_RCC_ClockConfig+0x270>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2201      	movs	r2, #1
 800473a:	4013      	ands	r3, r2
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d1ee      	bne.n	8004720 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2204      	movs	r2, #4
 8004748:	4013      	ands	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800474c:	4b20      	ldr	r3, [pc, #128]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4a20      	ldr	r2, [pc, #128]	; (80047d4 <HAL_RCC_ClockConfig+0x27c>)
 8004752:	4013      	ands	r3, r2
 8004754:	0019      	movs	r1, r3
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	4b1d      	ldr	r3, [pc, #116]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800475c:	430a      	orrs	r2, r1
 800475e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2208      	movs	r2, #8
 8004766:	4013      	ands	r3, r2
 8004768:	d00a      	beq.n	8004780 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4a1a      	ldr	r2, [pc, #104]	; (80047d8 <HAL_RCC_ClockConfig+0x280>)
 8004770:	4013      	ands	r3, r2
 8004772:	0019      	movs	r1, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	00da      	lsls	r2, r3, #3
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 800477c:	430a      	orrs	r2, r1
 800477e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004780:	f000 f832 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8004784:	0001      	movs	r1, r0
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_RCC_ClockConfig+0x278>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	091b      	lsrs	r3, r3, #4
 800478c:	220f      	movs	r2, #15
 800478e:	4013      	ands	r3, r2
 8004790:	4a12      	ldr	r2, [pc, #72]	; (80047dc <HAL_RCC_ClockConfig+0x284>)
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	000a      	movs	r2, r1
 8004796:	40da      	lsrs	r2, r3
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_RCC_ClockConfig+0x288>)
 800479a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800479c:	4b11      	ldr	r3, [pc, #68]	; (80047e4 <HAL_RCC_ClockConfig+0x28c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	250b      	movs	r5, #11
 80047a2:	197c      	adds	r4, r7, r5
 80047a4:	0018      	movs	r0, r3
 80047a6:	f7fc fd13 	bl	80011d0 <HAL_InitTick>
 80047aa:	0003      	movs	r3, r0
 80047ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80047ae:	197b      	adds	r3, r7, r5
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80047b6:	197b      	adds	r3, r7, r5
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	e000      	b.n	80047be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	0018      	movs	r0, r3
 80047c0:	46bd      	mov	sp, r7
 80047c2:	b004      	add	sp, #16
 80047c4:	bdb0      	pop	{r4, r5, r7, pc}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	40022000 	.word	0x40022000
 80047cc:	00001388 	.word	0x00001388
 80047d0:	40021000 	.word	0x40021000
 80047d4:	fffff8ff 	.word	0xfffff8ff
 80047d8:	ffffc7ff 	.word	0xffffc7ff
 80047dc:	0800a358 	.word	0x0800a358
 80047e0:	20000000 	.word	0x20000000
 80047e4:	20000004 	.word	0x20000004

080047e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b08e      	sub	sp, #56	; 0x38
 80047ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80047ee:	4b4c      	ldr	r3, [pc, #304]	; (8004920 <HAL_RCC_GetSysClockFreq+0x138>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f6:	230c      	movs	r3, #12
 80047f8:	4013      	ands	r3, r2
 80047fa:	2b0c      	cmp	r3, #12
 80047fc:	d014      	beq.n	8004828 <HAL_RCC_GetSysClockFreq+0x40>
 80047fe:	d900      	bls.n	8004802 <HAL_RCC_GetSysClockFreq+0x1a>
 8004800:	e07b      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x112>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d002      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x24>
 8004806:	2b08      	cmp	r3, #8
 8004808:	d00b      	beq.n	8004822 <HAL_RCC_GetSysClockFreq+0x3a>
 800480a:	e076      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800480c:	4b44      	ldr	r3, [pc, #272]	; (8004920 <HAL_RCC_GetSysClockFreq+0x138>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2210      	movs	r2, #16
 8004812:	4013      	ands	r3, r2
 8004814:	d002      	beq.n	800481c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004816:	4b43      	ldr	r3, [pc, #268]	; (8004924 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800481a:	e07c      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800481c:	4b42      	ldr	r3, [pc, #264]	; (8004928 <HAL_RCC_GetSysClockFreq+0x140>)
 800481e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004820:	e079      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004822:	4b42      	ldr	r3, [pc, #264]	; (800492c <HAL_RCC_GetSysClockFreq+0x144>)
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004826:	e076      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	0c9a      	lsrs	r2, r3, #18
 800482c:	230f      	movs	r3, #15
 800482e:	401a      	ands	r2, r3
 8004830:	4b3f      	ldr	r3, [pc, #252]	; (8004930 <HAL_RCC_GetSysClockFreq+0x148>)
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	0d9a      	lsrs	r2, r3, #22
 800483a:	2303      	movs	r3, #3
 800483c:	4013      	ands	r3, r2
 800483e:	3301      	adds	r3, #1
 8004840:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004842:	4b37      	ldr	r3, [pc, #220]	; (8004920 <HAL_RCC_GetSysClockFreq+0x138>)
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	025b      	lsls	r3, r3, #9
 800484a:	4013      	ands	r3, r2
 800484c:	d01a      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800484e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	4a35      	ldr	r2, [pc, #212]	; (800492c <HAL_RCC_GetSysClockFreq+0x144>)
 8004858:	2300      	movs	r3, #0
 800485a:	69b8      	ldr	r0, [r7, #24]
 800485c:	69f9      	ldr	r1, [r7, #28]
 800485e:	f7fb fdfb 	bl	8000458 <__aeabi_lmul>
 8004862:	0002      	movs	r2, r0
 8004864:	000b      	movs	r3, r1
 8004866:	0010      	movs	r0, r2
 8004868:	0019      	movs	r1, r3
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	2300      	movs	r3, #0
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	f7fb fdcf 	bl	8000418 <__aeabi_uldivmod>
 800487a:	0002      	movs	r2, r0
 800487c:	000b      	movs	r3, r1
 800487e:	0013      	movs	r3, r2
 8004880:	637b      	str	r3, [r7, #52]	; 0x34
 8004882:	e037      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004884:	4b26      	ldr	r3, [pc, #152]	; (8004920 <HAL_RCC_GetSysClockFreq+0x138>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	4013      	ands	r3, r2
 800488c:	d01a      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	2300      	movs	r3, #0
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	4a23      	ldr	r2, [pc, #140]	; (8004924 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004898:	2300      	movs	r3, #0
 800489a:	68b8      	ldr	r0, [r7, #8]
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	f7fb fddb 	bl	8000458 <__aeabi_lmul>
 80048a2:	0002      	movs	r2, r0
 80048a4:	000b      	movs	r3, r1
 80048a6:	0010      	movs	r0, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	603b      	str	r3, [r7, #0]
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f7fb fdaf 	bl	8000418 <__aeabi_uldivmod>
 80048ba:	0002      	movs	r2, r0
 80048bc:	000b      	movs	r3, r1
 80048be:	0013      	movs	r3, r2
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	e017      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c6:	0018      	movs	r0, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	0019      	movs	r1, r3
 80048cc:	4a16      	ldr	r2, [pc, #88]	; (8004928 <HAL_RCC_GetSysClockFreq+0x140>)
 80048ce:	2300      	movs	r3, #0
 80048d0:	f7fb fdc2 	bl	8000458 <__aeabi_lmul>
 80048d4:	0002      	movs	r2, r0
 80048d6:	000b      	movs	r3, r1
 80048d8:	0010      	movs	r0, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	001c      	movs	r4, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	001d      	movs	r5, r3
 80048e4:	0022      	movs	r2, r4
 80048e6:	002b      	movs	r3, r5
 80048e8:	f7fb fd96 	bl	8000418 <__aeabi_uldivmod>
 80048ec:	0002      	movs	r2, r0
 80048ee:	000b      	movs	r3, r1
 80048f0:	0013      	movs	r3, r2
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048f8:	e00d      	b.n	8004916 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_GetSysClockFreq+0x138>)
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	0b5b      	lsrs	r3, r3, #13
 8004900:	2207      	movs	r2, #7
 8004902:	4013      	ands	r3, r2
 8004904:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	3301      	adds	r3, #1
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	0212      	lsls	r2, r2, #8
 800490e:	409a      	lsls	r2, r3
 8004910:	0013      	movs	r3, r2
 8004912:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004914:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b00e      	add	sp, #56	; 0x38
 800491e:	bdb0      	pop	{r4, r5, r7, pc}
 8004920:	40021000 	.word	0x40021000
 8004924:	003d0900 	.word	0x003d0900
 8004928:	00f42400 	.word	0x00f42400
 800492c:	007a1200 	.word	0x007a1200
 8004930:	0800a370 	.word	0x0800a370

08004934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004938:	4b02      	ldr	r3, [pc, #8]	; (8004944 <HAL_RCC_GetHCLKFreq+0x10>)
 800493a:	681b      	ldr	r3, [r3, #0]
}
 800493c:	0018      	movs	r0, r3
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	20000000 	.word	0x20000000

08004948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800494c:	f7ff fff2 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 8004950:	0001      	movs	r1, r0
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	2207      	movs	r2, #7
 800495a:	4013      	ands	r3, r2
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x28>)
 800495e:	5cd3      	ldrb	r3, [r2, r3]
 8004960:	40d9      	lsrs	r1, r3
 8004962:	000b      	movs	r3, r1
}
 8004964:	0018      	movs	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	40021000 	.word	0x40021000
 8004970:	0800a368 	.word	0x0800a368

08004974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004978:	f7ff ffdc 	bl	8004934 <HAL_RCC_GetHCLKFreq>
 800497c:	0001      	movs	r1, r0
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	0adb      	lsrs	r3, r3, #11
 8004984:	2207      	movs	r2, #7
 8004986:	4013      	ands	r3, r2
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <HAL_RCC_GetPCLK2Freq+0x28>)
 800498a:	5cd3      	ldrb	r3, [r2, r3]
 800498c:	40d9      	lsrs	r1, r3
 800498e:	000b      	movs	r3, r1
}
 8004990:	0018      	movs	r0, r3
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	40021000 	.word	0x40021000
 800499c:	0800a368 	.word	0x0800a368

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80049a8:	2317      	movs	r3, #23
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2220      	movs	r2, #32
 80049b6:	4013      	ands	r3, r2
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	2380      	movs	r3, #128	; 0x80
 80049c0:	011b      	lsls	r3, r3, #4
 80049c2:	4013      	ands	r3, r2
 80049c4:	d100      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80049c6:	e0d9      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049c8:	4ba4      	ldr	r3, [pc, #656]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049cc:	2380      	movs	r3, #128	; 0x80
 80049ce:	055b      	lsls	r3, r3, #21
 80049d0:	4013      	ands	r3, r2
 80049d2:	d10a      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049d4:	4ba1      	ldr	r3, [pc, #644]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d8:	4ba0      	ldr	r3, [pc, #640]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049da:	2180      	movs	r1, #128	; 0x80
 80049dc:	0549      	lsls	r1, r1, #21
 80049de:	430a      	orrs	r2, r1
 80049e0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80049e2:	2317      	movs	r3, #23
 80049e4:	18fb      	adds	r3, r7, r3
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ea:	4b9d      	ldr	r3, [pc, #628]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	4013      	ands	r3, r2
 80049f4:	d11a      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f6:	4b9a      	ldr	r3, [pc, #616]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b99      	ldr	r3, [pc, #612]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049fc:	2180      	movs	r1, #128	; 0x80
 80049fe:	0049      	lsls	r1, r1, #1
 8004a00:	430a      	orrs	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a04:	f7fc fc2a 	bl	800125c <HAL_GetTick>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a0c:	e008      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a0e:	f7fc fc25 	bl	800125c <HAL_GetTick>
 8004a12:	0002      	movs	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b64      	cmp	r3, #100	; 0x64
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e118      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a20:	4b8f      	ldr	r3, [pc, #572]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	2380      	movs	r3, #128	; 0x80
 8004a26:	005b      	lsls	r3, r3, #1
 8004a28:	4013      	ands	r3, r2
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a2c:	4b8b      	ldr	r3, [pc, #556]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	039b      	lsls	r3, r3, #14
 8004a34:	4013      	ands	r3, r2
 8004a36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	23c0      	movs	r3, #192	; 0xc0
 8004a3e:	039b      	lsls	r3, r3, #14
 8004a40:	4013      	ands	r3, r2
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d107      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	23c0      	movs	r3, #192	; 0xc0
 8004a4e:	039b      	lsls	r3, r3, #14
 8004a50:	4013      	ands	r3, r2
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d013      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	23c0      	movs	r3, #192	; 0xc0
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	401a      	ands	r2, r3
 8004a62:	23c0      	movs	r3, #192	; 0xc0
 8004a64:	029b      	lsls	r3, r3, #10
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d10a      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a6a:	4b7c      	ldr	r3, [pc, #496]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	2380      	movs	r3, #128	; 0x80
 8004a70:	029b      	lsls	r3, r3, #10
 8004a72:	401a      	ands	r2, r3
 8004a74:	2380      	movs	r3, #128	; 0x80
 8004a76:	029b      	lsls	r3, r3, #10
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d101      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0e8      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a80:	4b76      	ldr	r3, [pc, #472]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a84:	23c0      	movs	r3, #192	; 0xc0
 8004a86:	029b      	lsls	r3, r3, #10
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d049      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	23c0      	movs	r3, #192	; 0xc0
 8004a98:	029b      	lsls	r3, r3, #10
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d004      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d10d      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	23c0      	movs	r3, #192	; 0xc0
 8004ab2:	029b      	lsls	r3, r3, #10
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d034      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	2380      	movs	r3, #128	; 0x80
 8004ac2:	011b      	lsls	r3, r3, #4
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d02e      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004ac8:	4b64      	ldr	r3, [pc, #400]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004acc:	4a65      	ldr	r2, [pc, #404]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ad2:	4b62      	ldr	r3, [pc, #392]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ad6:	4b61      	ldr	r3, [pc, #388]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	0309      	lsls	r1, r1, #12
 8004adc:	430a      	orrs	r2, r1
 8004ade:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ae0:	4b5e      	ldr	r3, [pc, #376]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ae4:	4b5d      	ldr	r3, [pc, #372]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ae6:	4960      	ldr	r1, [pc, #384]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004aec:	4b5b      	ldr	r3, [pc, #364]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4013      	ands	r3, r2
 8004afa:	d014      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004afc:	f7fc fbae 	bl	800125c <HAL_GetTick>
 8004b00:	0003      	movs	r3, r0
 8004b02:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b04:	e009      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fc fba9 	bl	800125c <HAL_GetTick>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	4a56      	ldr	r2, [pc, #344]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e09b      	b.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b1a:	4b50      	ldr	r3, [pc, #320]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4013      	ands	r3, r2
 8004b24:	d0ef      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	23c0      	movs	r3, #192	; 0xc0
 8004b2c:	029b      	lsls	r3, r3, #10
 8004b2e:	401a      	ands	r2, r3
 8004b30:	23c0      	movs	r3, #192	; 0xc0
 8004b32:	029b      	lsls	r3, r3, #10
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d10c      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004b38:	4b48      	ldr	r3, [pc, #288]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a4c      	ldr	r2, [pc, #304]	; (8004c70 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	23c0      	movs	r3, #192	; 0xc0
 8004b48:	039b      	lsls	r3, r3, #14
 8004b4a:	401a      	ands	r2, r3
 8004b4c:	4b43      	ldr	r3, [pc, #268]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	601a      	str	r2, [r3, #0]
 8004b52:	4b42      	ldr	r3, [pc, #264]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	23c0      	movs	r3, #192	; 0xc0
 8004b5c:	029b      	lsls	r3, r3, #10
 8004b5e:	401a      	ands	r2, r3
 8004b60:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b62:	430a      	orrs	r2, r1
 8004b64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b66:	2317      	movs	r3, #23
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d105      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b70:	4b3a      	ldr	r3, [pc, #232]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b74:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b76:	493f      	ldr	r1, [pc, #252]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b78:	400a      	ands	r2, r1
 8004b7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	d009      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b86:	4b35      	ldr	r3, [pc, #212]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b96:	430a      	orrs	r2, r1
 8004b98:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ba8:	220c      	movs	r2, #12
 8004baa:	4393      	bics	r3, r2
 8004bac:	0019      	movs	r1, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691a      	ldr	r2, [r3, #16]
 8004bb2:	4b2a      	ldr	r3, [pc, #168]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2204      	movs	r2, #4
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bc2:	4b26      	ldr	r3, [pc, #152]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	4a2c      	ldr	r2, [pc, #176]	; (8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004bc8:	4013      	ands	r3, r2
 8004bca:	0019      	movs	r1, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	695a      	ldr	r2, [r3, #20]
 8004bd0:	4b22      	ldr	r3, [pc, #136]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2208      	movs	r2, #8
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004be0:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be4:	4a25      	ldr	r2, [pc, #148]	; (8004c7c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	; 0x80
 8004bfa:	005b      	lsls	r3, r3, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c00:	4b16      	ldr	r3, [pc, #88]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c04:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	0019      	movs	r1, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c10:	430a      	orrs	r2, r1
 8004c12:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2240      	movs	r2, #64	; 0x40
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	d009      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c22:	4a17      	ldr	r2, [pc, #92]	; (8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	0019      	movs	r1, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c2c:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d009      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c3c:	4b07      	ldr	r3, [pc, #28]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c40:	4a10      	ldr	r2, [pc, #64]	; (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	0019      	movs	r1, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1a      	ldr	r2, [r3, #32]
 8004c4a:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b006      	add	sp, #24
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	40007000 	.word	0x40007000
 8004c64:	fffcffff 	.word	0xfffcffff
 8004c68:	fff7ffff 	.word	0xfff7ffff
 8004c6c:	00001388 	.word	0x00001388
 8004c70:	ffcfffff 	.word	0xffcfffff
 8004c74:	efffffff 	.word	0xefffffff
 8004c78:	fffff3ff 	.word	0xfffff3ff
 8004c7c:	ffffcfff 	.word	0xffffcfff
 8004c80:	fbffffff 	.word	0xfbffffff
 8004c84:	fff3ffff 	.word	0xfff3ffff

08004c88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b082      	sub	sp, #8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d101      	bne.n	8004c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e044      	b.n	8004d24 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d107      	bne.n	8004cb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2274      	movs	r2, #116	; 0x74
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7fc f9a1 	bl	8000ff4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2224      	movs	r2, #36	; 0x24
 8004cb6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f000 f8d8 	bl	8004e80 <UART_SetConfig>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e024      	b.n	8004d24 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d003      	beq.n	8004cea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	0018      	movs	r0, r3
 8004ce6:	f000 fb89 	bl	80053fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	490d      	ldr	r1, [pc, #52]	; (8004d2c <HAL_UART_Init+0xa4>)
 8004cf6:	400a      	ands	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	212a      	movs	r1, #42	; 0x2a
 8004d06:	438a      	bics	r2, r1
 8004d08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2101      	movs	r1, #1
 8004d16:	430a      	orrs	r2, r1
 8004d18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f000 fc21 	bl	8005564 <UART_CheckIdleState>
 8004d22:	0003      	movs	r3, r0
}
 8004d24:	0018      	movs	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b002      	add	sp, #8
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	ffffb7ff 	.word	0xffffb7ff

08004d30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b08a      	sub	sp, #40	; 0x28
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	60b9      	str	r1, [r7, #8]
 8004d3a:	603b      	str	r3, [r7, #0]
 8004d3c:	1dbb      	adds	r3, r7, #6
 8004d3e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d000      	beq.n	8004d4a <HAL_UART_Transmit+0x1a>
 8004d48:	e095      	b.n	8004e76 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_UART_Transmit+0x28>
 8004d50:	1dbb      	adds	r3, r7, #6
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e08d      	b.n	8004e78 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	2380      	movs	r3, #128	; 0x80
 8004d62:	015b      	lsls	r3, r3, #5
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d109      	bne.n	8004d7c <HAL_UART_Transmit+0x4c>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d105      	bne.n	8004d7c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2201      	movs	r2, #1
 8004d74:	4013      	ands	r3, r2
 8004d76:	d001      	beq.n	8004d7c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e07d      	b.n	8004e78 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2274      	movs	r2, #116	; 0x74
 8004d80:	5c9b      	ldrb	r3, [r3, r2]
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d101      	bne.n	8004d8a <HAL_UART_Transmit+0x5a>
 8004d86:	2302      	movs	r3, #2
 8004d88:	e076      	b.n	8004e78 <HAL_UART_Transmit+0x148>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2274      	movs	r2, #116	; 0x74
 8004d8e:	2101      	movs	r1, #1
 8004d90:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	2100      	movs	r1, #0
 8004d98:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2221      	movs	r2, #33	; 0x21
 8004d9e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da0:	f7fc fa5c 	bl	800125c <HAL_GetTick>
 8004da4:	0003      	movs	r3, r0
 8004da6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1dba      	adds	r2, r7, #6
 8004dac:	2150      	movs	r1, #80	; 0x50
 8004dae:	8812      	ldrh	r2, [r2, #0]
 8004db0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1dba      	adds	r2, r7, #6
 8004db6:	2152      	movs	r1, #82	; 0x52
 8004db8:	8812      	ldrh	r2, [r2, #0]
 8004dba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	015b      	lsls	r3, r3, #5
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d108      	bne.n	8004dda <HAL_UART_Transmit+0xaa>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d104      	bne.n	8004dda <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	e003      	b.n	8004de2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2274      	movs	r2, #116	; 0x74
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004dea:	e02c      	b.n	8004e46 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dec:	697a      	ldr	r2, [r7, #20]
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	0013      	movs	r3, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	2180      	movs	r1, #128	; 0x80
 8004dfa:	f000 fbfb 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 8004dfe:	1e03      	subs	r3, r0, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e038      	b.n	8004e78 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10b      	bne.n	8004e24 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	001a      	movs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	05d2      	lsls	r2, r2, #23
 8004e18:	0dd2      	lsrs	r2, r2, #23
 8004e1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	3302      	adds	r3, #2
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	e007      	b.n	8004e34 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	781a      	ldrb	r2, [r3, #0]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	3301      	adds	r3, #1
 8004e32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2252      	movs	r2, #82	; 0x52
 8004e38:	5a9b      	ldrh	r3, [r3, r2]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b299      	uxth	r1, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2252      	movs	r2, #82	; 0x52
 8004e44:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2252      	movs	r2, #82	; 0x52
 8004e4a:	5a9b      	ldrh	r3, [r3, r2]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1cc      	bne.n	8004dec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	0013      	movs	r3, r2
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2140      	movs	r1, #64	; 0x40
 8004e60:	f000 fbc8 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 8004e64:	1e03      	subs	r3, r0, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e005      	b.n	8004e78 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	e000      	b.n	8004e78 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004e76:	2302      	movs	r3, #2
  }
}
 8004e78:	0018      	movs	r0, r3
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	b008      	add	sp, #32
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e80:	b5b0      	push	{r4, r5, r7, lr}
 8004e82:	b08e      	sub	sp, #56	; 0x38
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e88:	231a      	movs	r3, #26
 8004e8a:	2218      	movs	r2, #24
 8004e8c:	4694      	mov	ip, r2
 8004e8e:	44bc      	add	ip, r7
 8004e90:	4463      	add	r3, ip
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	69db      	ldr	r3, [r3, #28]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4ab0      	ldr	r2, [pc, #704]	; (8005178 <UART_SetConfig+0x2f8>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	0019      	movs	r1, r3
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	4aac      	ldr	r2, [pc, #688]	; (800517c <UART_SetConfig+0x2fc>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	0019      	movs	r1, r3
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4aa6      	ldr	r2, [pc, #664]	; (8005180 <UART_SetConfig+0x300>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d004      	beq.n	8004ef6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4aa1      	ldr	r2, [pc, #644]	; (8005184 <UART_SetConfig+0x304>)
 8004efe:	4013      	ands	r3, r2
 8004f00:	0019      	movs	r1, r3
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a9d      	ldr	r2, [pc, #628]	; (8005188 <UART_SetConfig+0x308>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d136      	bne.n	8004f84 <UART_SetConfig+0x104>
 8004f16:	4b9d      	ldr	r3, [pc, #628]	; (800518c <UART_SetConfig+0x30c>)
 8004f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d020      	beq.n	8004f64 <UART_SetConfig+0xe4>
 8004f22:	d827      	bhi.n	8004f74 <UART_SetConfig+0xf4>
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d00d      	beq.n	8004f44 <UART_SetConfig+0xc4>
 8004f28:	d824      	bhi.n	8004f74 <UART_SetConfig+0xf4>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <UART_SetConfig+0xb4>
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d010      	beq.n	8004f54 <UART_SetConfig+0xd4>
 8004f32:	e01f      	b.n	8004f74 <UART_SetConfig+0xf4>
 8004f34:	231b      	movs	r3, #27
 8004f36:	2218      	movs	r2, #24
 8004f38:	4694      	mov	ip, r2
 8004f3a:	44bc      	add	ip, r7
 8004f3c:	4463      	add	r3, ip
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e0c5      	b.n	80050d0 <UART_SetConfig+0x250>
 8004f44:	231b      	movs	r3, #27
 8004f46:	2218      	movs	r2, #24
 8004f48:	4694      	mov	ip, r2
 8004f4a:	44bc      	add	ip, r7
 8004f4c:	4463      	add	r3, ip
 8004f4e:	2202      	movs	r2, #2
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e0bd      	b.n	80050d0 <UART_SetConfig+0x250>
 8004f54:	231b      	movs	r3, #27
 8004f56:	2218      	movs	r2, #24
 8004f58:	4694      	mov	ip, r2
 8004f5a:	44bc      	add	ip, r7
 8004f5c:	4463      	add	r3, ip
 8004f5e:	2204      	movs	r2, #4
 8004f60:	701a      	strb	r2, [r3, #0]
 8004f62:	e0b5      	b.n	80050d0 <UART_SetConfig+0x250>
 8004f64:	231b      	movs	r3, #27
 8004f66:	2218      	movs	r2, #24
 8004f68:	4694      	mov	ip, r2
 8004f6a:	44bc      	add	ip, r7
 8004f6c:	4463      	add	r3, ip
 8004f6e:	2208      	movs	r2, #8
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e0ad      	b.n	80050d0 <UART_SetConfig+0x250>
 8004f74:	231b      	movs	r3, #27
 8004f76:	2218      	movs	r2, #24
 8004f78:	4694      	mov	ip, r2
 8004f7a:	44bc      	add	ip, r7
 8004f7c:	4463      	add	r3, ip
 8004f7e:	2210      	movs	r2, #16
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	e0a5      	b.n	80050d0 <UART_SetConfig+0x250>
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a81      	ldr	r2, [pc, #516]	; (8005190 <UART_SetConfig+0x310>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d136      	bne.n	8004ffc <UART_SetConfig+0x17c>
 8004f8e:	4b7f      	ldr	r3, [pc, #508]	; (800518c <UART_SetConfig+0x30c>)
 8004f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f92:	220c      	movs	r2, #12
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b0c      	cmp	r3, #12
 8004f98:	d020      	beq.n	8004fdc <UART_SetConfig+0x15c>
 8004f9a:	d827      	bhi.n	8004fec <UART_SetConfig+0x16c>
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d00d      	beq.n	8004fbc <UART_SetConfig+0x13c>
 8004fa0:	d824      	bhi.n	8004fec <UART_SetConfig+0x16c>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <UART_SetConfig+0x12c>
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	d010      	beq.n	8004fcc <UART_SetConfig+0x14c>
 8004faa:	e01f      	b.n	8004fec <UART_SetConfig+0x16c>
 8004fac:	231b      	movs	r3, #27
 8004fae:	2218      	movs	r2, #24
 8004fb0:	4694      	mov	ip, r2
 8004fb2:	44bc      	add	ip, r7
 8004fb4:	4463      	add	r3, ip
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e089      	b.n	80050d0 <UART_SetConfig+0x250>
 8004fbc:	231b      	movs	r3, #27
 8004fbe:	2218      	movs	r2, #24
 8004fc0:	4694      	mov	ip, r2
 8004fc2:	44bc      	add	ip, r7
 8004fc4:	4463      	add	r3, ip
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	701a      	strb	r2, [r3, #0]
 8004fca:	e081      	b.n	80050d0 <UART_SetConfig+0x250>
 8004fcc:	231b      	movs	r3, #27
 8004fce:	2218      	movs	r2, #24
 8004fd0:	4694      	mov	ip, r2
 8004fd2:	44bc      	add	ip, r7
 8004fd4:	4463      	add	r3, ip
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	701a      	strb	r2, [r3, #0]
 8004fda:	e079      	b.n	80050d0 <UART_SetConfig+0x250>
 8004fdc:	231b      	movs	r3, #27
 8004fde:	2218      	movs	r2, #24
 8004fe0:	4694      	mov	ip, r2
 8004fe2:	44bc      	add	ip, r7
 8004fe4:	4463      	add	r3, ip
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e071      	b.n	80050d0 <UART_SetConfig+0x250>
 8004fec:	231b      	movs	r3, #27
 8004fee:	2218      	movs	r2, #24
 8004ff0:	4694      	mov	ip, r2
 8004ff2:	44bc      	add	ip, r7
 8004ff4:	4463      	add	r3, ip
 8004ff6:	2210      	movs	r2, #16
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	e069      	b.n	80050d0 <UART_SetConfig+0x250>
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a64      	ldr	r2, [pc, #400]	; (8005194 <UART_SetConfig+0x314>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d107      	bne.n	8005016 <UART_SetConfig+0x196>
 8005006:	231b      	movs	r3, #27
 8005008:	2218      	movs	r2, #24
 800500a:	4694      	mov	ip, r2
 800500c:	44bc      	add	ip, r7
 800500e:	4463      	add	r3, ip
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
 8005014:	e05c      	b.n	80050d0 <UART_SetConfig+0x250>
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5f      	ldr	r2, [pc, #380]	; (8005198 <UART_SetConfig+0x318>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d107      	bne.n	8005030 <UART_SetConfig+0x1b0>
 8005020:	231b      	movs	r3, #27
 8005022:	2218      	movs	r2, #24
 8005024:	4694      	mov	ip, r2
 8005026:	44bc      	add	ip, r7
 8005028:	4463      	add	r3, ip
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e04f      	b.n	80050d0 <UART_SetConfig+0x250>
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a52      	ldr	r2, [pc, #328]	; (8005180 <UART_SetConfig+0x300>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d143      	bne.n	80050c2 <UART_SetConfig+0x242>
 800503a:	4b54      	ldr	r3, [pc, #336]	; (800518c <UART_SetConfig+0x30c>)
 800503c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800503e:	23c0      	movs	r3, #192	; 0xc0
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	4013      	ands	r3, r2
 8005044:	22c0      	movs	r2, #192	; 0xc0
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	4293      	cmp	r3, r2
 800504a:	d02a      	beq.n	80050a2 <UART_SetConfig+0x222>
 800504c:	22c0      	movs	r2, #192	; 0xc0
 800504e:	0112      	lsls	r2, r2, #4
 8005050:	4293      	cmp	r3, r2
 8005052:	d82e      	bhi.n	80050b2 <UART_SetConfig+0x232>
 8005054:	2280      	movs	r2, #128	; 0x80
 8005056:	0112      	lsls	r2, r2, #4
 8005058:	4293      	cmp	r3, r2
 800505a:	d012      	beq.n	8005082 <UART_SetConfig+0x202>
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	4293      	cmp	r3, r2
 8005062:	d826      	bhi.n	80050b2 <UART_SetConfig+0x232>
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <UART_SetConfig+0x1f2>
 8005068:	2280      	movs	r2, #128	; 0x80
 800506a:	00d2      	lsls	r2, r2, #3
 800506c:	4293      	cmp	r3, r2
 800506e:	d010      	beq.n	8005092 <UART_SetConfig+0x212>
 8005070:	e01f      	b.n	80050b2 <UART_SetConfig+0x232>
 8005072:	231b      	movs	r3, #27
 8005074:	2218      	movs	r2, #24
 8005076:	4694      	mov	ip, r2
 8005078:	44bc      	add	ip, r7
 800507a:	4463      	add	r3, ip
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e026      	b.n	80050d0 <UART_SetConfig+0x250>
 8005082:	231b      	movs	r3, #27
 8005084:	2218      	movs	r2, #24
 8005086:	4694      	mov	ip, r2
 8005088:	44bc      	add	ip, r7
 800508a:	4463      	add	r3, ip
 800508c:	2202      	movs	r2, #2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e01e      	b.n	80050d0 <UART_SetConfig+0x250>
 8005092:	231b      	movs	r3, #27
 8005094:	2218      	movs	r2, #24
 8005096:	4694      	mov	ip, r2
 8005098:	44bc      	add	ip, r7
 800509a:	4463      	add	r3, ip
 800509c:	2204      	movs	r2, #4
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	e016      	b.n	80050d0 <UART_SetConfig+0x250>
 80050a2:	231b      	movs	r3, #27
 80050a4:	2218      	movs	r2, #24
 80050a6:	4694      	mov	ip, r2
 80050a8:	44bc      	add	ip, r7
 80050aa:	4463      	add	r3, ip
 80050ac:	2208      	movs	r2, #8
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e00e      	b.n	80050d0 <UART_SetConfig+0x250>
 80050b2:	231b      	movs	r3, #27
 80050b4:	2218      	movs	r2, #24
 80050b6:	4694      	mov	ip, r2
 80050b8:	44bc      	add	ip, r7
 80050ba:	4463      	add	r3, ip
 80050bc:	2210      	movs	r2, #16
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e006      	b.n	80050d0 <UART_SetConfig+0x250>
 80050c2:	231b      	movs	r3, #27
 80050c4:	2218      	movs	r2, #24
 80050c6:	4694      	mov	ip, r2
 80050c8:	44bc      	add	ip, r7
 80050ca:	4463      	add	r3, ip
 80050cc:	2210      	movs	r2, #16
 80050ce:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2a      	ldr	r2, [pc, #168]	; (8005180 <UART_SetConfig+0x300>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d000      	beq.n	80050dc <UART_SetConfig+0x25c>
 80050da:	e09e      	b.n	800521a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050dc:	231b      	movs	r3, #27
 80050de:	2218      	movs	r2, #24
 80050e0:	4694      	mov	ip, r2
 80050e2:	44bc      	add	ip, r7
 80050e4:	4463      	add	r3, ip
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d01d      	beq.n	8005128 <UART_SetConfig+0x2a8>
 80050ec:	dc20      	bgt.n	8005130 <UART_SetConfig+0x2b0>
 80050ee:	2b04      	cmp	r3, #4
 80050f0:	d015      	beq.n	800511e <UART_SetConfig+0x29e>
 80050f2:	dc1d      	bgt.n	8005130 <UART_SetConfig+0x2b0>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d002      	beq.n	80050fe <UART_SetConfig+0x27e>
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d005      	beq.n	8005108 <UART_SetConfig+0x288>
 80050fc:	e018      	b.n	8005130 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050fe:	f7ff fc23 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005102:	0003      	movs	r3, r0
 8005104:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005106:	e01d      	b.n	8005144 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005108:	4b20      	ldr	r3, [pc, #128]	; (800518c <UART_SetConfig+0x30c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2210      	movs	r2, #16
 800510e:	4013      	ands	r3, r2
 8005110:	d002      	beq.n	8005118 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005112:	4b22      	ldr	r3, [pc, #136]	; (800519c <UART_SetConfig+0x31c>)
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005116:	e015      	b.n	8005144 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8005118:	4b21      	ldr	r3, [pc, #132]	; (80051a0 <UART_SetConfig+0x320>)
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800511c:	e012      	b.n	8005144 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511e:	f7ff fb63 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8005122:	0003      	movs	r3, r0
 8005124:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005126:	e00d      	b.n	8005144 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005128:	2380      	movs	r3, #128	; 0x80
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800512e:	e009      	b.n	8005144 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005134:	231a      	movs	r3, #26
 8005136:	2218      	movs	r2, #24
 8005138:	4694      	mov	ip, r2
 800513a:	44bc      	add	ip, r7
 800513c:	4463      	add	r3, ip
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
        break;
 8005142:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005146:	2b00      	cmp	r3, #0
 8005148:	d100      	bne.n	800514c <UART_SetConfig+0x2cc>
 800514a:	e13c      	b.n	80053c6 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	685a      	ldr	r2, [r3, #4]
 8005150:	0013      	movs	r3, r2
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	189b      	adds	r3, r3, r2
 8005156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005158:	429a      	cmp	r2, r3
 800515a:	d305      	bcc.n	8005168 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005164:	429a      	cmp	r2, r3
 8005166:	d91d      	bls.n	80051a4 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8005168:	231a      	movs	r3, #26
 800516a:	2218      	movs	r2, #24
 800516c:	4694      	mov	ip, r2
 800516e:	44bc      	add	ip, r7
 8005170:	4463      	add	r3, ip
 8005172:	2201      	movs	r2, #1
 8005174:	701a      	strb	r2, [r3, #0]
 8005176:	e126      	b.n	80053c6 <UART_SetConfig+0x546>
 8005178:	efff69f3 	.word	0xefff69f3
 800517c:	ffffcfff 	.word	0xffffcfff
 8005180:	40004800 	.word	0x40004800
 8005184:	fffff4ff 	.word	0xfffff4ff
 8005188:	40013800 	.word	0x40013800
 800518c:	40021000 	.word	0x40021000
 8005190:	40004400 	.word	0x40004400
 8005194:	40004c00 	.word	0x40004c00
 8005198:	40005000 	.word	0x40005000
 800519c:	003d0900 	.word	0x003d0900
 80051a0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a6:	613b      	str	r3, [r7, #16]
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
 80051ac:	6939      	ldr	r1, [r7, #16]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	000b      	movs	r3, r1
 80051b2:	0e1b      	lsrs	r3, r3, #24
 80051b4:	0010      	movs	r0, r2
 80051b6:	0205      	lsls	r5, r0, #8
 80051b8:	431d      	orrs	r5, r3
 80051ba:	000b      	movs	r3, r1
 80051bc:	021c      	lsls	r4, r3, #8
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	60bb      	str	r3, [r7, #8]
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68b8      	ldr	r0, [r7, #8]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	1900      	adds	r0, r0, r4
 80051d0:	4169      	adcs	r1, r5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	603b      	str	r3, [r7, #0]
 80051d8:	2300      	movs	r3, #0
 80051da:	607b      	str	r3, [r7, #4]
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f7fb f91a 	bl	8000418 <__aeabi_uldivmod>
 80051e4:	0002      	movs	r2, r0
 80051e6:	000b      	movs	r3, r1
 80051e8:	0013      	movs	r3, r2
 80051ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ee:	23c0      	movs	r3, #192	; 0xc0
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d309      	bcc.n	800520a <UART_SetConfig+0x38a>
 80051f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	035b      	lsls	r3, r3, #13
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d204      	bcs.n	800520a <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005206:	60da      	str	r2, [r3, #12]
 8005208:	e0dd      	b.n	80053c6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800520a:	231a      	movs	r3, #26
 800520c:	2218      	movs	r2, #24
 800520e:	4694      	mov	ip, r2
 8005210:	44bc      	add	ip, r7
 8005212:	4463      	add	r3, ip
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
 8005218:	e0d5      	b.n	80053c6 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	2380      	movs	r3, #128	; 0x80
 8005220:	021b      	lsls	r3, r3, #8
 8005222:	429a      	cmp	r2, r3
 8005224:	d000      	beq.n	8005228 <UART_SetConfig+0x3a8>
 8005226:	e074      	b.n	8005312 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8005228:	231b      	movs	r3, #27
 800522a:	2218      	movs	r2, #24
 800522c:	4694      	mov	ip, r2
 800522e:	44bc      	add	ip, r7
 8005230:	4463      	add	r3, ip
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b08      	cmp	r3, #8
 8005236:	d822      	bhi.n	800527e <UART_SetConfig+0x3fe>
 8005238:	009a      	lsls	r2, r3, #2
 800523a:	4b6b      	ldr	r3, [pc, #428]	; (80053e8 <UART_SetConfig+0x568>)
 800523c:	18d3      	adds	r3, r2, r3
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005242:	f7ff fb81 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005246:	0003      	movs	r3, r0
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800524a:	e022      	b.n	8005292 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800524c:	f7ff fb92 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 8005250:	0003      	movs	r3, r0
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005254:	e01d      	b.n	8005292 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005256:	4b65      	ldr	r3, [pc, #404]	; (80053ec <UART_SetConfig+0x56c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2210      	movs	r2, #16
 800525c:	4013      	ands	r3, r2
 800525e:	d002      	beq.n	8005266 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005260:	4b63      	ldr	r3, [pc, #396]	; (80053f0 <UART_SetConfig+0x570>)
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005264:	e015      	b.n	8005292 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8005266:	4b63      	ldr	r3, [pc, #396]	; (80053f4 <UART_SetConfig+0x574>)
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800526a:	e012      	b.n	8005292 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800526c:	f7ff fabc 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 8005270:	0003      	movs	r3, r0
 8005272:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005274:	e00d      	b.n	8005292 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800527c:	e009      	b.n	8005292 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800527e:	2300      	movs	r3, #0
 8005280:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005282:	231a      	movs	r3, #26
 8005284:	2218      	movs	r2, #24
 8005286:	4694      	mov	ip, r2
 8005288:	44bc      	add	ip, r7
 800528a:	4463      	add	r3, ip
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
        break;
 8005290:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d100      	bne.n	800529a <UART_SetConfig+0x41a>
 8005298:	e095      	b.n	80053c6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800529a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800529c:	005a      	lsls	r2, r3, #1
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	085b      	lsrs	r3, r3, #1
 80052a4:	18d2      	adds	r2, r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	0019      	movs	r1, r3
 80052ac:	0010      	movs	r0, r2
 80052ae:	f7fa ff3d 	bl	800012c <__udivsi3>
 80052b2:	0003      	movs	r3, r0
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	2b0f      	cmp	r3, #15
 80052bc:	d921      	bls.n	8005302 <UART_SetConfig+0x482>
 80052be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	025b      	lsls	r3, r3, #9
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d21c      	bcs.n	8005302 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	200e      	movs	r0, #14
 80052ce:	2418      	movs	r4, #24
 80052d0:	193b      	adds	r3, r7, r4
 80052d2:	181b      	adds	r3, r3, r0
 80052d4:	210f      	movs	r1, #15
 80052d6:	438a      	bics	r2, r1
 80052d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	b29b      	uxth	r3, r3
 80052e0:	2207      	movs	r2, #7
 80052e2:	4013      	ands	r3, r2
 80052e4:	b299      	uxth	r1, r3
 80052e6:	193b      	adds	r3, r7, r4
 80052e8:	181b      	adds	r3, r3, r0
 80052ea:	193a      	adds	r2, r7, r4
 80052ec:	1812      	adds	r2, r2, r0
 80052ee:	8812      	ldrh	r2, [r2, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	193a      	adds	r2, r7, r4
 80052fa:	1812      	adds	r2, r2, r0
 80052fc:	8812      	ldrh	r2, [r2, #0]
 80052fe:	60da      	str	r2, [r3, #12]
 8005300:	e061      	b.n	80053c6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8005302:	231a      	movs	r3, #26
 8005304:	2218      	movs	r2, #24
 8005306:	4694      	mov	ip, r2
 8005308:	44bc      	add	ip, r7
 800530a:	4463      	add	r3, ip
 800530c:	2201      	movs	r2, #1
 800530e:	701a      	strb	r2, [r3, #0]
 8005310:	e059      	b.n	80053c6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005312:	231b      	movs	r3, #27
 8005314:	2218      	movs	r2, #24
 8005316:	4694      	mov	ip, r2
 8005318:	44bc      	add	ip, r7
 800531a:	4463      	add	r3, ip
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b08      	cmp	r3, #8
 8005320:	d822      	bhi.n	8005368 <UART_SetConfig+0x4e8>
 8005322:	009a      	lsls	r2, r3, #2
 8005324:	4b34      	ldr	r3, [pc, #208]	; (80053f8 <UART_SetConfig+0x578>)
 8005326:	18d3      	adds	r3, r2, r3
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7ff fb0c 	bl	8004948 <HAL_RCC_GetPCLK1Freq>
 8005330:	0003      	movs	r3, r0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005334:	e022      	b.n	800537c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005336:	f7ff fb1d 	bl	8004974 <HAL_RCC_GetPCLK2Freq>
 800533a:	0003      	movs	r3, r0
 800533c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800533e:	e01d      	b.n	800537c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005340:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <UART_SetConfig+0x56c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2210      	movs	r2, #16
 8005346:	4013      	ands	r3, r2
 8005348:	d002      	beq.n	8005350 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800534a:	4b29      	ldr	r3, [pc, #164]	; (80053f0 <UART_SetConfig+0x570>)
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800534e:	e015      	b.n	800537c <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8005350:	4b28      	ldr	r3, [pc, #160]	; (80053f4 <UART_SetConfig+0x574>)
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005354:	e012      	b.n	800537c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005356:	f7ff fa47 	bl	80047e8 <HAL_RCC_GetSysClockFreq>
 800535a:	0003      	movs	r3, r0
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800535e:	e00d      	b.n	800537c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005360:	2380      	movs	r3, #128	; 0x80
 8005362:	021b      	lsls	r3, r3, #8
 8005364:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005366:	e009      	b.n	800537c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800536c:	231a      	movs	r3, #26
 800536e:	2218      	movs	r2, #24
 8005370:	4694      	mov	ip, r2
 8005372:	44bc      	add	ip, r7
 8005374:	4463      	add	r3, ip
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
        break;
 800537a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800537c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537e:	2b00      	cmp	r3, #0
 8005380:	d021      	beq.n	80053c6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	085a      	lsrs	r2, r3, #1
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	18d2      	adds	r2, r2, r3
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	0019      	movs	r1, r3
 8005392:	0010      	movs	r0, r2
 8005394:	f7fa feca 	bl	800012c <__udivsi3>
 8005398:	0003      	movs	r3, r0
 800539a:	b29b      	uxth	r3, r3
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d909      	bls.n	80053b8 <UART_SetConfig+0x538>
 80053a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053a6:	2380      	movs	r3, #128	; 0x80
 80053a8:	025b      	lsls	r3, r3, #9
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d204      	bcs.n	80053b8 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053b4:	60da      	str	r2, [r3, #12]
 80053b6:	e006      	b.n	80053c6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80053b8:	231a      	movs	r3, #26
 80053ba:	2218      	movs	r2, #24
 80053bc:	4694      	mov	ip, r2
 80053be:	44bc      	add	ip, r7
 80053c0:	4463      	add	r3, ip
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	2200      	movs	r2, #0
 80053ca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	2200      	movs	r2, #0
 80053d0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053d2:	231a      	movs	r3, #26
 80053d4:	2218      	movs	r2, #24
 80053d6:	4694      	mov	ip, r2
 80053d8:	44bc      	add	ip, r7
 80053da:	4463      	add	r3, ip
 80053dc:	781b      	ldrb	r3, [r3, #0]
}
 80053de:	0018      	movs	r0, r3
 80053e0:	46bd      	mov	sp, r7
 80053e2:	b00e      	add	sp, #56	; 0x38
 80053e4:	bdb0      	pop	{r4, r5, r7, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	0800a37c 	.word	0x0800a37c
 80053ec:	40021000 	.word	0x40021000
 80053f0:	003d0900 	.word	0x003d0900
 80053f4:	00f42400 	.word	0x00f42400
 80053f8:	0800a3a0 	.word	0x0800a3a0

080053fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2201      	movs	r2, #1
 800540a:	4013      	ands	r3, r2
 800540c:	d00b      	beq.n	8005426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	4a4a      	ldr	r2, [pc, #296]	; (8005540 <UART_AdvFeatureConfig+0x144>)
 8005416:	4013      	ands	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	2202      	movs	r2, #2
 800542c:	4013      	ands	r3, r2
 800542e:	d00b      	beq.n	8005448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	4a43      	ldr	r2, [pc, #268]	; (8005544 <UART_AdvFeatureConfig+0x148>)
 8005438:	4013      	ands	r3, r2
 800543a:	0019      	movs	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	2204      	movs	r2, #4
 800544e:	4013      	ands	r3, r2
 8005450:	d00b      	beq.n	800546a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a3b      	ldr	r2, [pc, #236]	; (8005548 <UART_AdvFeatureConfig+0x14c>)
 800545a:	4013      	ands	r3, r2
 800545c:	0019      	movs	r1, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2208      	movs	r2, #8
 8005470:	4013      	ands	r3, r2
 8005472:	d00b      	beq.n	800548c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	4a34      	ldr	r2, [pc, #208]	; (800554c <UART_AdvFeatureConfig+0x150>)
 800547c:	4013      	ands	r3, r2
 800547e:	0019      	movs	r1, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2210      	movs	r2, #16
 8005492:	4013      	ands	r3, r2
 8005494:	d00b      	beq.n	80054ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <UART_AdvFeatureConfig+0x154>)
 800549e:	4013      	ands	r3, r2
 80054a0:	0019      	movs	r1, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2220      	movs	r2, #32
 80054b4:	4013      	ands	r3, r2
 80054b6:	d00b      	beq.n	80054d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4a25      	ldr	r2, [pc, #148]	; (8005554 <UART_AdvFeatureConfig+0x158>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	0019      	movs	r1, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d4:	2240      	movs	r2, #64	; 0x40
 80054d6:	4013      	ands	r3, r2
 80054d8:	d01d      	beq.n	8005516 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <UART_AdvFeatureConfig+0x15c>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	0019      	movs	r1, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054f6:	2380      	movs	r3, #128	; 0x80
 80054f8:	035b      	lsls	r3, r3, #13
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d10b      	bne.n	8005516 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <UART_AdvFeatureConfig+0x160>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551a:	2280      	movs	r2, #128	; 0x80
 800551c:	4013      	ands	r3, r2
 800551e:	d00b      	beq.n	8005538 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <UART_AdvFeatureConfig+0x164>)
 8005528:	4013      	ands	r3, r2
 800552a:	0019      	movs	r1, r3
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	605a      	str	r2, [r3, #4]
  }
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}
 8005540:	fffdffff 	.word	0xfffdffff
 8005544:	fffeffff 	.word	0xfffeffff
 8005548:	fffbffff 	.word	0xfffbffff
 800554c:	ffff7fff 	.word	0xffff7fff
 8005550:	ffffefff 	.word	0xffffefff
 8005554:	ffffdfff 	.word	0xffffdfff
 8005558:	ffefffff 	.word	0xffefffff
 800555c:	ff9fffff 	.word	0xff9fffff
 8005560:	fff7ffff 	.word	0xfff7ffff

08005564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af02      	add	r7, sp, #8
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2280      	movs	r2, #128	; 0x80
 8005570:	2100      	movs	r1, #0
 8005572:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005574:	f7fb fe72 	bl	800125c <HAL_GetTick>
 8005578:	0003      	movs	r3, r0
 800557a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2208      	movs	r2, #8
 8005584:	4013      	ands	r3, r2
 8005586:	2b08      	cmp	r3, #8
 8005588:	d10c      	bne.n	80055a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2280      	movs	r2, #128	; 0x80
 800558e:	0391      	lsls	r1, r2, #14
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <UART_CheckIdleState+0x8c>)
 8005594:	9200      	str	r2, [sp, #0]
 8005596:	2200      	movs	r2, #0
 8005598:	f000 f82c 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 800559c:	1e03      	subs	r3, r0, #0
 800559e:	d001      	beq.n	80055a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a0:	2303      	movs	r3, #3
 80055a2:	e021      	b.n	80055e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2204      	movs	r2, #4
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d10c      	bne.n	80055cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	03d1      	lsls	r1, r2, #15
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	4a0d      	ldr	r2, [pc, #52]	; (80055f0 <UART_CheckIdleState+0x8c>)
 80055bc:	9200      	str	r2, [sp, #0]
 80055be:	2200      	movs	r2, #0
 80055c0:	f000 f818 	bl	80055f4 <UART_WaitOnFlagUntilTimeout>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e00d      	b.n	80055e8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2220      	movs	r2, #32
 80055d0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2220      	movs	r2, #32
 80055d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2274      	movs	r2, #116	; 0x74
 80055e2:	2100      	movs	r1, #0
 80055e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	0018      	movs	r0, r3
 80055ea:	46bd      	mov	sp, r7
 80055ec:	b004      	add	sp, #16
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	01ffffff 	.word	0x01ffffff

080055f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b094      	sub	sp, #80	; 0x50
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	1dfb      	adds	r3, r7, #7
 8005602:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005604:	e0a3      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005608:	3301      	adds	r3, #1
 800560a:	d100      	bne.n	800560e <UART_WaitOnFlagUntilTimeout+0x1a>
 800560c:	e09f      	b.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560e:	f7fb fe25 	bl	800125c <HAL_GetTick>
 8005612:	0002      	movs	r2, r0
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800561a:	429a      	cmp	r2, r3
 800561c:	d302      	bcc.n	8005624 <UART_WaitOnFlagUntilTimeout+0x30>
 800561e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005620:	2b00      	cmp	r3, #0
 8005622:	d13d      	bne.n	80056a0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005624:	f3ef 8310 	mrs	r3, PRIMASK
 8005628:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800562c:	647b      	str	r3, [r7, #68]	; 0x44
 800562e:	2301      	movs	r3, #1
 8005630:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005634:	f383 8810 	msr	PRIMASK, r3
}
 8005638:	46c0      	nop			; (mov r8, r8)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	494c      	ldr	r1, [pc, #304]	; (8005778 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005646:	400a      	ands	r2, r1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800564c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f383 8810 	msr	PRIMASK, r3
}
 8005654:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005656:	f3ef 8310 	mrs	r3, PRIMASK
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800565e:	643b      	str	r3, [r7, #64]	; 0x40
 8005660:	2301      	movs	r3, #1
 8005662:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2101      	movs	r1, #1
 8005678:	438a      	bics	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2220      	movs	r2, #32
 8005692:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2274      	movs	r2, #116	; 0x74
 8005698:	2100      	movs	r1, #0
 800569a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e067      	b.n	8005770 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2204      	movs	r2, #4
 80056a8:	4013      	ands	r3, r2
 80056aa:	d050      	beq.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69da      	ldr	r2, [r3, #28]
 80056b2:	2380      	movs	r3, #128	; 0x80
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	401a      	ands	r2, r3
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	429a      	cmp	r2, r3
 80056be:	d146      	bne.n	800574e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	0112      	lsls	r2, r2, #4
 80056c8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	613b      	str	r3, [r7, #16]
  return(result);
 80056d0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4923      	ldr	r1, [pc, #140]	; (8005778 <UART_WaitOnFlagUntilTimeout+0x184>)
 80056ec:	400a      	ands	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056fc:	f3ef 8310 	mrs	r3, PRIMASK
 8005700:	61fb      	str	r3, [r7, #28]
  return(result);
 8005702:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005704:	64bb      	str	r3, [r7, #72]	; 0x48
 8005706:	2301      	movs	r3, #1
 8005708:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	f383 8810 	msr	PRIMASK, r3
}
 8005710:	46c0      	nop			; (mov r8, r8)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2101      	movs	r1, #1
 800571e:	438a      	bics	r2, r1
 8005720:	609a      	str	r2, [r3, #8]
 8005722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	f383 8810 	msr	PRIMASK, r3
}
 800572c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2280      	movs	r2, #128	; 0x80
 800573e:	2120      	movs	r1, #32
 8005740:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2274      	movs	r2, #116	; 0x74
 8005746:	2100      	movs	r1, #0
 8005748:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e010      	b.n	8005770 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	425a      	negs	r2, r3
 800575e:	4153      	adcs	r3, r2
 8005760:	b2db      	uxtb	r3, r3
 8005762:	001a      	movs	r2, r3
 8005764:	1dfb      	adds	r3, r7, #7
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d100      	bne.n	800576e <UART_WaitOnFlagUntilTimeout+0x17a>
 800576c:	e74b      	b.n	8005606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	0018      	movs	r0, r3
 8005772:	46bd      	mov	sp, r7
 8005774:	b014      	add	sp, #80	; 0x50
 8005776:	bd80      	pop	{r7, pc}
 8005778:	fffffe5f 	.word	0xfffffe5f

0800577c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2244      	movs	r2, #68	; 0x44
 8005788:	2100      	movs	r1, #0
 800578a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <USB_EnableGlobalInt+0x28>)
 800578e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	b299      	uxth	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2240      	movs	r2, #64	; 0x40
 8005798:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	0018      	movs	r0, r3
 800579e:	46bd      	mov	sp, r7
 80057a0:	b004      	add	sp, #16
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	0000bf80 	.word	0x0000bf80

080057a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057b0:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <USB_DisableGlobalInt+0x30>)
 80057b2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2240      	movs	r2, #64	; 0x40
 80057b8:	5a9b      	ldrh	r3, [r3, r2]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	b292      	uxth	r2, r2
 80057c0:	43d2      	mvns	r2, r2
 80057c2:	b292      	uxth	r2, r2
 80057c4:	4013      	ands	r3, r2
 80057c6:	b299      	uxth	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	0018      	movs	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	b004      	add	sp, #16
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	0000bf80 	.word	0x0000bf80

080057dc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057dc:	b084      	sub	sp, #16
 80057de:	b590      	push	{r4, r7, lr}
 80057e0:	46c6      	mov	lr, r8
 80057e2:	b500      	push	{lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	2004      	movs	r0, #4
 80057ec:	2410      	movs	r4, #16
 80057ee:	46a4      	mov	ip, r4
 80057f0:	2408      	movs	r4, #8
 80057f2:	46a0      	mov	r8, r4
 80057f4:	44b8      	add	r8, r7
 80057f6:	44c4      	add	ip, r8
 80057f8:	4460      	add	r0, ip
 80057fa:	6001      	str	r1, [r0, #0]
 80057fc:	6042      	str	r2, [r0, #4]
 80057fe:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2240      	movs	r2, #64	; 0x40
 8005804:	2101      	movs	r1, #1
 8005806:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	2100      	movs	r1, #0
 800580e:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2244      	movs	r2, #68	; 0x44
 8005814:	2100      	movs	r1, #0
 8005816:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2250      	movs	r2, #80	; 0x50
 800581c:	2100      	movs	r1, #0
 800581e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	0018      	movs	r0, r3
 8005824:	46bd      	mov	sp, r7
 8005826:	b002      	add	sp, #8
 8005828:	bc80      	pop	{r7}
 800582a:	46b8      	mov	r8, r7
 800582c:	bc90      	pop	{r4, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	b004      	add	sp, #16
 8005832:	4718      	bx	r3

08005834 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b09c      	sub	sp, #112	; 0x70
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800583e:	236f      	movs	r3, #111	; 0x6f
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	2200      	movs	r2, #0
 8005844:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	18d3      	adds	r3, r2, r3
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	b29a      	uxth	r2, r3
 8005854:	236c      	movs	r3, #108	; 0x6c
 8005856:	18fb      	adds	r3, r7, r3
 8005858:	49cf      	ldr	r1, [pc, #828]	; (8005b98 <USB_ActivateEndpoint+0x364>)
 800585a:	400a      	ands	r2, r1
 800585c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	78db      	ldrb	r3, [r3, #3]
 8005862:	2b03      	cmp	r3, #3
 8005864:	d017      	beq.n	8005896 <USB_ActivateEndpoint+0x62>
 8005866:	dc28      	bgt.n	80058ba <USB_ActivateEndpoint+0x86>
 8005868:	2b02      	cmp	r3, #2
 800586a:	d00e      	beq.n	800588a <USB_ActivateEndpoint+0x56>
 800586c:	dc25      	bgt.n	80058ba <USB_ActivateEndpoint+0x86>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <USB_ActivateEndpoint+0x44>
 8005872:	2b01      	cmp	r3, #1
 8005874:	d018      	beq.n	80058a8 <USB_ActivateEndpoint+0x74>
 8005876:	e020      	b.n	80058ba <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005878:	226c      	movs	r2, #108	; 0x6c
 800587a:	18bb      	adds	r3, r7, r2
 800587c:	18ba      	adds	r2, r7, r2
 800587e:	8812      	ldrh	r2, [r2, #0]
 8005880:	2180      	movs	r1, #128	; 0x80
 8005882:	0089      	lsls	r1, r1, #2
 8005884:	430a      	orrs	r2, r1
 8005886:	801a      	strh	r2, [r3, #0]
      break;
 8005888:	e01c      	b.n	80058c4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800588a:	226c      	movs	r2, #108	; 0x6c
 800588c:	18bb      	adds	r3, r7, r2
 800588e:	18ba      	adds	r2, r7, r2
 8005890:	8812      	ldrh	r2, [r2, #0]
 8005892:	801a      	strh	r2, [r3, #0]
      break;
 8005894:	e016      	b.n	80058c4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005896:	226c      	movs	r2, #108	; 0x6c
 8005898:	18bb      	adds	r3, r7, r2
 800589a:	18ba      	adds	r2, r7, r2
 800589c:	8812      	ldrh	r2, [r2, #0]
 800589e:	21c0      	movs	r1, #192	; 0xc0
 80058a0:	00c9      	lsls	r1, r1, #3
 80058a2:	430a      	orrs	r2, r1
 80058a4:	801a      	strh	r2, [r3, #0]
      break;
 80058a6:	e00d      	b.n	80058c4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058a8:	226c      	movs	r2, #108	; 0x6c
 80058aa:	18bb      	adds	r3, r7, r2
 80058ac:	18ba      	adds	r2, r7, r2
 80058ae:	8812      	ldrh	r2, [r2, #0]
 80058b0:	2180      	movs	r1, #128	; 0x80
 80058b2:	00c9      	lsls	r1, r1, #3
 80058b4:	430a      	orrs	r2, r1
 80058b6:	801a      	strh	r2, [r3, #0]
      break;
 80058b8:	e004      	b.n	80058c4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80058ba:	236f      	movs	r3, #111	; 0x6f
 80058bc:	18fb      	adds	r3, r7, r3
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
      break;
 80058c2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	226c      	movs	r2, #108	; 0x6c
 80058d0:	18ba      	adds	r2, r7, r2
 80058d2:	8812      	ldrh	r2, [r2, #0]
 80058d4:	49b1      	ldr	r1, [pc, #708]	; (8005b9c <USB_ActivateEndpoint+0x368>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	b292      	uxth	r2, r2
 80058da:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058dc:	687a      	ldr	r2, [r7, #4]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	18d3      	adds	r3, r2, r3
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	b21b      	sxth	r3, r3
 80058ec:	4aac      	ldr	r2, [pc, #688]	; (8005ba0 <USB_ActivateEndpoint+0x36c>)
 80058ee:	4013      	ands	r3, r2
 80058f0:	b21a      	sxth	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	b21b      	sxth	r3, r3
 80058f8:	4313      	orrs	r3, r2
 80058fa:	b21a      	sxth	r2, r3
 80058fc:	2166      	movs	r1, #102	; 0x66
 80058fe:	187b      	adds	r3, r7, r1
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	18d3      	adds	r3, r2, r3
 800590c:	187a      	adds	r2, r7, r1
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	49a2      	ldr	r1, [pc, #648]	; (8005b9c <USB_ActivateEndpoint+0x368>)
 8005912:	430a      	orrs	r2, r1
 8005914:	b292      	uxth	r2, r2
 8005916:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	7b1b      	ldrb	r3, [r3, #12]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d000      	beq.n	8005922 <USB_ActivateEndpoint+0xee>
 8005920:	e150      	b.n	8005bc4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d100      	bne.n	800592c <USB_ActivateEndpoint+0xf8>
 800592a:	e07a      	b.n	8005a22 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	61bb      	str	r3, [r7, #24]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2250      	movs	r2, #80	; 0x50
 8005934:	5a9b      	ldrh	r3, [r3, r2]
 8005936:	b29b      	uxth	r3, r3
 8005938:	001a      	movs	r2, r3
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	189b      	adds	r3, r3, r2
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	00da      	lsls	r2, r3, #3
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	18d3      	adds	r3, r2, r3
 800594a:	2280      	movs	r2, #128	; 0x80
 800594c:	00d2      	lsls	r2, r2, #3
 800594e:	4694      	mov	ip, r2
 8005950:	4463      	add	r3, ip
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	88db      	ldrh	r3, [r3, #6]
 8005958:	085b      	lsrs	r3, r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	18db      	adds	r3, r3, r3
 800595e:	b29a      	uxth	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	18d2      	adds	r2, r2, r3
 800596e:	2112      	movs	r1, #18
 8005970:	187b      	adds	r3, r7, r1
 8005972:	8812      	ldrh	r2, [r2, #0]
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	187b      	adds	r3, r7, r1
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	2240      	movs	r2, #64	; 0x40
 800597c:	4013      	ands	r3, r2
 800597e:	d016      	beq.n	80059ae <USB_ActivateEndpoint+0x17a>
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	18d3      	adds	r3, r2, r3
 800598a:	881b      	ldrh	r3, [r3, #0]
 800598c:	b29a      	uxth	r2, r3
 800598e:	2010      	movs	r0, #16
 8005990:	183b      	adds	r3, r7, r0
 8005992:	4983      	ldr	r1, [pc, #524]	; (8005ba0 <USB_ActivateEndpoint+0x36c>)
 8005994:	400a      	ands	r2, r1
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	18d3      	adds	r3, r2, r3
 80059a2:	183a      	adds	r2, r7, r0
 80059a4:	8812      	ldrh	r2, [r2, #0]
 80059a6:	497f      	ldr	r1, [pc, #508]	; (8005ba4 <USB_ActivateEndpoint+0x370>)
 80059a8:	430a      	orrs	r2, r1
 80059aa:	b292      	uxth	r2, r2
 80059ac:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d01d      	beq.n	80059f2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	18d3      	adds	r3, r2, r3
 80059c0:	881b      	ldrh	r3, [r3, #0]
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	200c      	movs	r0, #12
 80059c6:	183b      	adds	r3, r7, r0
 80059c8:	4977      	ldr	r1, [pc, #476]	; (8005ba8 <USB_ActivateEndpoint+0x374>)
 80059ca:	400a      	ands	r2, r1
 80059cc:	801a      	strh	r2, [r3, #0]
 80059ce:	183b      	adds	r3, r7, r0
 80059d0:	183a      	adds	r2, r7, r0
 80059d2:	8812      	ldrh	r2, [r2, #0]
 80059d4:	2120      	movs	r1, #32
 80059d6:	404a      	eors	r2, r1
 80059d8:	801a      	strh	r2, [r3, #0]
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	183a      	adds	r2, r7, r0
 80059e6:	8812      	ldrh	r2, [r2, #0]
 80059e8:	496c      	ldr	r1, [pc, #432]	; (8005b9c <USB_ActivateEndpoint+0x368>)
 80059ea:	430a      	orrs	r2, r1
 80059ec:	b292      	uxth	r2, r2
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	e27a      	b.n	8005ee8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	18d3      	adds	r3, r2, r3
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	200e      	movs	r0, #14
 8005a02:	183b      	adds	r3, r7, r0
 8005a04:	4968      	ldr	r1, [pc, #416]	; (8005ba8 <USB_ActivateEndpoint+0x374>)
 8005a06:	400a      	ands	r2, r1
 8005a08:	801a      	strh	r2, [r3, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	18d3      	adds	r3, r2, r3
 8005a14:	183a      	adds	r2, r7, r0
 8005a16:	8812      	ldrh	r2, [r2, #0]
 8005a18:	4960      	ldr	r1, [pc, #384]	; (8005b9c <USB_ActivateEndpoint+0x368>)
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	801a      	strh	r2, [r3, #0]
 8005a20:	e262      	b.n	8005ee8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2250      	movs	r2, #80	; 0x50
 8005a2a:	5a9b      	ldrh	r3, [r3, r2]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	001a      	movs	r2, r3
 8005a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a32:	189b      	adds	r3, r3, r2
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	00da      	lsls	r2, r3, #3
 8005a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3e:	18d3      	adds	r3, r2, r3
 8005a40:	4a5a      	ldr	r2, [pc, #360]	; (8005bac <USB_ActivateEndpoint+0x378>)
 8005a42:	4694      	mov	ip, r2
 8005a44:	4463      	add	r3, ip
 8005a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	88db      	ldrh	r3, [r3, #6]
 8005a4c:	085b      	lsrs	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	18db      	adds	r3, r3, r3
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a56:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2250      	movs	r2, #80	; 0x50
 8005a60:	5a9b      	ldrh	r3, [r3, r2]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	001a      	movs	r2, r3
 8005a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a68:	189b      	adds	r3, r3, r2
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	00da      	lsls	r2, r3, #3
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	18d3      	adds	r3, r2, r3
 8005a76:	4a4e      	ldr	r2, [pc, #312]	; (8005bb0 <USB_ActivateEndpoint+0x37c>)
 8005a78:	4694      	mov	ip, r2
 8005a7a:	4463      	add	r3, ip
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d110      	bne.n	8005aa8 <USB_ActivateEndpoint+0x274>
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	4a49      	ldr	r2, [pc, #292]	; (8005bb4 <USB_ActivateEndpoint+0x380>)
 8005a8e:	4013      	ands	r3, r2
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a94:	801a      	strh	r2, [r3, #0]
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4a46      	ldr	r2, [pc, #280]	; (8005bb8 <USB_ActivateEndpoint+0x384>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	801a      	strh	r2, [r3, #0]
 8005aa6:	e02b      	b.n	8005b00 <USB_ActivateEndpoint+0x2cc>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b3e      	cmp	r3, #62	; 0x3e
 8005aae:	d812      	bhi.n	8005ad6 <USB_ActivateEndpoint+0x2a2>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2201      	movs	r2, #1
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d002      	beq.n	8005ac8 <USB_ActivateEndpoint+0x294>
 8005ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	029b      	lsls	r3, r3, #10
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	e014      	b.n	8005b00 <USB_ActivateEndpoint+0x2cc>
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	221f      	movs	r2, #31
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	d102      	bne.n	8005aee <USB_ActivateEndpoint+0x2ba>
 8005ae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aea:	3b01      	subs	r3, #1
 8005aec:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <USB_ActivateEndpoint+0x384>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	18d2      	adds	r2, r2, r3
 8005b0a:	2122      	movs	r1, #34	; 0x22
 8005b0c:	187b      	adds	r3, r7, r1
 8005b0e:	8812      	ldrh	r2, [r2, #0]
 8005b10:	801a      	strh	r2, [r3, #0]
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	881a      	ldrh	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	; 0x80
 8005b18:	01db      	lsls	r3, r3, #7
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d016      	beq.n	8005b4c <USB_ActivateEndpoint+0x318>
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	2020      	movs	r0, #32
 8005b2e:	183b      	adds	r3, r7, r0
 8005b30:	491b      	ldr	r1, [pc, #108]	; (8005ba0 <USB_ActivateEndpoint+0x36c>)
 8005b32:	400a      	ands	r2, r1
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	18d3      	adds	r3, r2, r3
 8005b40:	183a      	adds	r2, r7, r0
 8005b42:	8812      	ldrh	r2, [r2, #0]
 8005b44:	491d      	ldr	r1, [pc, #116]	; (8005bbc <USB_ActivateEndpoint+0x388>)
 8005b46:	430a      	orrs	r2, r1
 8005b48:	b292      	uxth	r2, r2
 8005b4a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	18d3      	adds	r3, r2, r3
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	b29a      	uxth	r2, r3
 8005b5a:	201e      	movs	r0, #30
 8005b5c:	183b      	adds	r3, r7, r0
 8005b5e:	4918      	ldr	r1, [pc, #96]	; (8005bc0 <USB_ActivateEndpoint+0x38c>)
 8005b60:	400a      	ands	r2, r1
 8005b62:	801a      	strh	r2, [r3, #0]
 8005b64:	183b      	adds	r3, r7, r0
 8005b66:	183a      	adds	r2, r7, r0
 8005b68:	8812      	ldrh	r2, [r2, #0]
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	0149      	lsls	r1, r1, #5
 8005b6e:	404a      	eors	r2, r1
 8005b70:	801a      	strh	r2, [r3, #0]
 8005b72:	183b      	adds	r3, r7, r0
 8005b74:	183a      	adds	r2, r7, r0
 8005b76:	8812      	ldrh	r2, [r2, #0]
 8005b78:	2180      	movs	r1, #128	; 0x80
 8005b7a:	0189      	lsls	r1, r1, #6
 8005b7c:	404a      	eors	r2, r1
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	183a      	adds	r2, r7, r0
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	4903      	ldr	r1, [pc, #12]	; (8005b9c <USB_ActivateEndpoint+0x368>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	b292      	uxth	r2, r2
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e1a7      	b.n	8005ee8 <USB_ActivateEndpoint+0x6b4>
 8005b98:	ffff898f 	.word	0xffff898f
 8005b9c:	ffff8080 	.word	0xffff8080
 8005ba0:	ffff8f8f 	.word	0xffff8f8f
 8005ba4:	ffff80c0 	.word	0xffff80c0
 8005ba8:	ffff8fbf 	.word	0xffff8fbf
 8005bac:	00000404 	.word	0x00000404
 8005bb0:	00000406 	.word	0x00000406
 8005bb4:	ffff83ff 	.word	0xffff83ff
 8005bb8:	ffff8000 	.word	0xffff8000
 8005bbc:	ffffc080 	.word	0xffffc080
 8005bc0:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d117      	bne.n	8005bfc <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	18d3      	adds	r3, r2, r3
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	2062      	movs	r0, #98	; 0x62
 8005bdc:	183b      	adds	r3, r7, r0
 8005bde:	49c6      	ldr	r1, [pc, #792]	; (8005ef8 <USB_ActivateEndpoint+0x6c4>)
 8005be0:	400a      	ands	r2, r1
 8005be2:	801a      	strh	r2, [r3, #0]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	18d3      	adds	r3, r2, r3
 8005bee:	183a      	adds	r2, r7, r0
 8005bf0:	8812      	ldrh	r2, [r2, #0]
 8005bf2:	49c2      	ldr	r1, [pc, #776]	; (8005efc <USB_ActivateEndpoint+0x6c8>)
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	b292      	uxth	r2, r2
 8005bf8:	801a      	strh	r2, [r3, #0]
 8005bfa:	e016      	b.n	8005c2a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	18d3      	adds	r3, r2, r3
 8005c06:	881b      	ldrh	r3, [r3, #0]
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	2064      	movs	r0, #100	; 0x64
 8005c0c:	183b      	adds	r3, r7, r0
 8005c0e:	49bc      	ldr	r1, [pc, #752]	; (8005f00 <USB_ActivateEndpoint+0x6cc>)
 8005c10:	400a      	ands	r2, r1
 8005c12:	801a      	strh	r2, [r3, #0]
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	18d3      	adds	r3, r2, r3
 8005c1e:	183a      	adds	r2, r7, r0
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	49b8      	ldr	r1, [pc, #736]	; (8005f04 <USB_ActivateEndpoint+0x6d0>)
 8005c24:	430a      	orrs	r2, r1
 8005c26:	b292      	uxth	r2, r2
 8005c28:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2250      	movs	r2, #80	; 0x50
 8005c32:	5a9b      	ldrh	r3, [r3, r2]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	001a      	movs	r2, r3
 8005c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3a:	189b      	adds	r3, r3, r2
 8005c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	00da      	lsls	r2, r3, #3
 8005c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c46:	18d3      	adds	r3, r2, r3
 8005c48:	2280      	movs	r2, #128	; 0x80
 8005c4a:	00d2      	lsls	r2, r2, #3
 8005c4c:	4694      	mov	ip, r2
 8005c4e:	4463      	add	r3, ip
 8005c50:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	891b      	ldrh	r3, [r3, #8]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	18db      	adds	r3, r3, r3
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c60:	801a      	strh	r2, [r3, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	657b      	str	r3, [r7, #84]	; 0x54
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2250      	movs	r2, #80	; 0x50
 8005c6a:	5a9b      	ldrh	r3, [r3, r2]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	001a      	movs	r2, r3
 8005c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c72:	189b      	adds	r3, r3, r2
 8005c74:	657b      	str	r3, [r7, #84]	; 0x54
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	00da      	lsls	r2, r3, #3
 8005c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c7e:	18d3      	adds	r3, r2, r3
 8005c80:	4aa1      	ldr	r2, [pc, #644]	; (8005f08 <USB_ActivateEndpoint+0x6d4>)
 8005c82:	4694      	mov	ip, r2
 8005c84:	4463      	add	r3, ip
 8005c86:	653b      	str	r3, [r7, #80]	; 0x50
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	895b      	ldrh	r3, [r3, #10]
 8005c8c:	085b      	lsrs	r3, r3, #1
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	18db      	adds	r3, r3, r3
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c96:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	785b      	ldrb	r3, [r3, #1]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d000      	beq.n	8005ca2 <USB_ActivateEndpoint+0x46e>
 8005ca0:	e087      	b.n	8005db2 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	18d2      	adds	r2, r2, r3
 8005cac:	2140      	movs	r1, #64	; 0x40
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	8812      	ldrh	r2, [r2, #0]
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d016      	beq.n	8005cee <USB_ActivateEndpoint+0x4ba>
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	18d3      	adds	r3, r2, r3
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	203e      	movs	r0, #62	; 0x3e
 8005cd0:	183b      	adds	r3, r7, r0
 8005cd2:	4989      	ldr	r1, [pc, #548]	; (8005ef8 <USB_ActivateEndpoint+0x6c4>)
 8005cd4:	400a      	ands	r2, r1
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	18d3      	adds	r3, r2, r3
 8005ce2:	183a      	adds	r2, r7, r0
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	4989      	ldr	r1, [pc, #548]	; (8005f0c <USB_ActivateEndpoint+0x6d8>)
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	b292      	uxth	r2, r2
 8005cec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	18d2      	adds	r2, r2, r3
 8005cf8:	213c      	movs	r1, #60	; 0x3c
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	8812      	ldrh	r2, [r2, #0]
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	187b      	adds	r3, r7, r1
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	2240      	movs	r2, #64	; 0x40
 8005d06:	4013      	ands	r3, r2
 8005d08:	d016      	beq.n	8005d38 <USB_ActivateEndpoint+0x504>
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	18d3      	adds	r3, r2, r3
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	203a      	movs	r0, #58	; 0x3a
 8005d1a:	183b      	adds	r3, r7, r0
 8005d1c:	4976      	ldr	r1, [pc, #472]	; (8005ef8 <USB_ActivateEndpoint+0x6c4>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	183a      	adds	r2, r7, r0
 8005d2e:	8812      	ldrh	r2, [r2, #0]
 8005d30:	4977      	ldr	r1, [pc, #476]	; (8005f10 <USB_ActivateEndpoint+0x6dc>)
 8005d32:	430a      	orrs	r2, r1
 8005d34:	b292      	uxth	r2, r2
 8005d36:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	18d3      	adds	r3, r2, r3
 8005d42:	881b      	ldrh	r3, [r3, #0]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	2038      	movs	r0, #56	; 0x38
 8005d48:	183b      	adds	r3, r7, r0
 8005d4a:	4972      	ldr	r1, [pc, #456]	; (8005f14 <USB_ActivateEndpoint+0x6e0>)
 8005d4c:	400a      	ands	r2, r1
 8005d4e:	801a      	strh	r2, [r3, #0]
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	183a      	adds	r2, r7, r0
 8005d54:	8812      	ldrh	r2, [r2, #0]
 8005d56:	2180      	movs	r1, #128	; 0x80
 8005d58:	0149      	lsls	r1, r1, #5
 8005d5a:	404a      	eors	r2, r1
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	183b      	adds	r3, r7, r0
 8005d60:	183a      	adds	r2, r7, r0
 8005d62:	8812      	ldrh	r2, [r2, #0]
 8005d64:	2180      	movs	r1, #128	; 0x80
 8005d66:	0189      	lsls	r1, r1, #6
 8005d68:	404a      	eors	r2, r1
 8005d6a:	801a      	strh	r2, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	18d3      	adds	r3, r2, r3
 8005d76:	183a      	adds	r2, r7, r0
 8005d78:	8812      	ldrh	r2, [r2, #0]
 8005d7a:	4962      	ldr	r1, [pc, #392]	; (8005f04 <USB_ActivateEndpoint+0x6d0>)
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	b292      	uxth	r2, r2
 8005d80:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	18d3      	adds	r3, r2, r3
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	2036      	movs	r0, #54	; 0x36
 8005d92:	183b      	adds	r3, r7, r0
 8005d94:	4960      	ldr	r1, [pc, #384]	; (8005f18 <USB_ActivateEndpoint+0x6e4>)
 8005d96:	400a      	ands	r2, r1
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	18d3      	adds	r3, r2, r3
 8005da4:	183a      	adds	r2, r7, r0
 8005da6:	8812      	ldrh	r2, [r2, #0]
 8005da8:	4956      	ldr	r1, [pc, #344]	; (8005f04 <USB_ActivateEndpoint+0x6d0>)
 8005daa:	430a      	orrs	r2, r1
 8005dac:	b292      	uxth	r2, r2
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	e09a      	b.n	8005ee8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	18d2      	adds	r2, r2, r3
 8005dbc:	214e      	movs	r1, #78	; 0x4e
 8005dbe:	187b      	adds	r3, r7, r1
 8005dc0:	8812      	ldrh	r2, [r2, #0]
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	187b      	adds	r3, r7, r1
 8005dc6:	881a      	ldrh	r2, [r3, #0]
 8005dc8:	2380      	movs	r3, #128	; 0x80
 8005dca:	01db      	lsls	r3, r3, #7
 8005dcc:	4013      	ands	r3, r2
 8005dce:	d016      	beq.n	8005dfe <USB_ActivateEndpoint+0x5ca>
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	18d3      	adds	r3, r2, r3
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	204c      	movs	r0, #76	; 0x4c
 8005de0:	183b      	adds	r3, r7, r0
 8005de2:	4945      	ldr	r1, [pc, #276]	; (8005ef8 <USB_ActivateEndpoint+0x6c4>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	801a      	strh	r2, [r3, #0]
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	18d3      	adds	r3, r2, r3
 8005df2:	183a      	adds	r2, r7, r0
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	4945      	ldr	r1, [pc, #276]	; (8005f0c <USB_ActivateEndpoint+0x6d8>)
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	b292      	uxth	r2, r2
 8005dfc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	18d2      	adds	r2, r2, r3
 8005e08:	214a      	movs	r1, #74	; 0x4a
 8005e0a:	187b      	adds	r3, r7, r1
 8005e0c:	8812      	ldrh	r2, [r2, #0]
 8005e0e:	801a      	strh	r2, [r3, #0]
 8005e10:	187b      	adds	r3, r7, r1
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	2240      	movs	r2, #64	; 0x40
 8005e16:	4013      	ands	r3, r2
 8005e18:	d016      	beq.n	8005e48 <USB_ActivateEndpoint+0x614>
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	2048      	movs	r0, #72	; 0x48
 8005e2a:	183b      	adds	r3, r7, r0
 8005e2c:	4932      	ldr	r1, [pc, #200]	; (8005ef8 <USB_ActivateEndpoint+0x6c4>)
 8005e2e:	400a      	ands	r2, r1
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	18d3      	adds	r3, r2, r3
 8005e3c:	183a      	adds	r2, r7, r0
 8005e3e:	8812      	ldrh	r2, [r2, #0]
 8005e40:	4933      	ldr	r1, [pc, #204]	; (8005f10 <USB_ActivateEndpoint+0x6dc>)
 8005e42:	430a      	orrs	r2, r1
 8005e44:	b292      	uxth	r2, r2
 8005e46:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	78db      	ldrb	r3, [r3, #3]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d01d      	beq.n	8005e8c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	18d3      	adds	r3, r2, r3
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	2044      	movs	r0, #68	; 0x44
 8005e60:	183b      	adds	r3, r7, r0
 8005e62:	492d      	ldr	r1, [pc, #180]	; (8005f18 <USB_ActivateEndpoint+0x6e4>)
 8005e64:	400a      	ands	r2, r1
 8005e66:	801a      	strh	r2, [r3, #0]
 8005e68:	183b      	adds	r3, r7, r0
 8005e6a:	183a      	adds	r2, r7, r0
 8005e6c:	8812      	ldrh	r2, [r2, #0]
 8005e6e:	2120      	movs	r1, #32
 8005e70:	404a      	eors	r2, r1
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	18d3      	adds	r3, r2, r3
 8005e7e:	183a      	adds	r2, r7, r0
 8005e80:	8812      	ldrh	r2, [r2, #0]
 8005e82:	4920      	ldr	r1, [pc, #128]	; (8005f04 <USB_ActivateEndpoint+0x6d0>)
 8005e84:	430a      	orrs	r2, r1
 8005e86:	b292      	uxth	r2, r2
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	e016      	b.n	8005eba <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	2046      	movs	r0, #70	; 0x46
 8005e9c:	183b      	adds	r3, r7, r0
 8005e9e:	491e      	ldr	r1, [pc, #120]	; (8005f18 <USB_ActivateEndpoint+0x6e4>)
 8005ea0:	400a      	ands	r2, r1
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	18d3      	adds	r3, r2, r3
 8005eae:	183a      	adds	r2, r7, r0
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	4914      	ldr	r1, [pc, #80]	; (8005f04 <USB_ActivateEndpoint+0x6d0>)
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	b292      	uxth	r2, r2
 8005eb8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	2042      	movs	r0, #66	; 0x42
 8005eca:	183b      	adds	r3, r7, r0
 8005ecc:	4911      	ldr	r1, [pc, #68]	; (8005f14 <USB_ActivateEndpoint+0x6e0>)
 8005ece:	400a      	ands	r2, r1
 8005ed0:	801a      	strh	r2, [r3, #0]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	18d3      	adds	r3, r2, r3
 8005edc:	183a      	adds	r2, r7, r0
 8005ede:	8812      	ldrh	r2, [r2, #0]
 8005ee0:	4908      	ldr	r1, [pc, #32]	; (8005f04 <USB_ActivateEndpoint+0x6d0>)
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	b292      	uxth	r2, r2
 8005ee6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005ee8:	236f      	movs	r3, #111	; 0x6f
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	781b      	ldrb	r3, [r3, #0]
}
 8005eee:	0018      	movs	r0, r3
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	b01c      	add	sp, #112	; 0x70
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	ffff8f8f 	.word	0xffff8f8f
 8005efc:	ffff8180 	.word	0xffff8180
 8005f00:	ffff8e8f 	.word	0xffff8e8f
 8005f04:	ffff8080 	.word	0xffff8080
 8005f08:	00000404 	.word	0x00000404
 8005f0c:	ffffc080 	.word	0xffffc080
 8005f10:	ffff80c0 	.word	0xffff80c0
 8005f14:	ffffbf8f 	.word	0xffffbf8f
 8005f18:	ffff8fbf 	.word	0xffff8fbf

08005f1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08c      	sub	sp, #48	; 0x30
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	7b1b      	ldrb	r3, [r3, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d000      	beq.n	8005f30 <USB_DeactivateEndpoint+0x14>
 8005f2e:	e07e      	b.n	800602e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d03c      	beq.n	8005fb2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	18d2      	adds	r2, r2, r3
 8005f42:	210c      	movs	r1, #12
 8005f44:	187b      	adds	r3, r7, r1
 8005f46:	8812      	ldrh	r2, [r2, #0]
 8005f48:	801a      	strh	r2, [r3, #0]
 8005f4a:	187b      	adds	r3, r7, r1
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	2240      	movs	r2, #64	; 0x40
 8005f50:	4013      	ands	r3, r2
 8005f52:	d016      	beq.n	8005f82 <USB_DeactivateEndpoint+0x66>
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	200a      	movs	r0, #10
 8005f64:	183b      	adds	r3, r7, r0
 8005f66:	49c7      	ldr	r1, [pc, #796]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 8005f68:	400a      	ands	r2, r1
 8005f6a:	801a      	strh	r2, [r3, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	18d3      	adds	r3, r2, r3
 8005f76:	183a      	adds	r2, r7, r0
 8005f78:	8812      	ldrh	r2, [r2, #0]
 8005f7a:	49c3      	ldr	r1, [pc, #780]	; (8006288 <USB_DeactivateEndpoint+0x36c>)
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	b292      	uxth	r2, r2
 8005f80:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	18d3      	adds	r3, r2, r3
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	2008      	movs	r0, #8
 8005f92:	183b      	adds	r3, r7, r0
 8005f94:	49bd      	ldr	r1, [pc, #756]	; (800628c <USB_DeactivateEndpoint+0x370>)
 8005f96:	400a      	ands	r2, r1
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	18d3      	adds	r3, r2, r3
 8005fa4:	183a      	adds	r2, r7, r0
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	49b9      	ldr	r1, [pc, #740]	; (8006290 <USB_DeactivateEndpoint+0x374>)
 8005faa:	430a      	orrs	r2, r1
 8005fac:	b292      	uxth	r2, r2
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	e163      	b.n	800627a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	18d2      	adds	r2, r2, r3
 8005fbc:	2112      	movs	r1, #18
 8005fbe:	187b      	adds	r3, r7, r1
 8005fc0:	8812      	ldrh	r2, [r2, #0]
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	187b      	adds	r3, r7, r1
 8005fc6:	881a      	ldrh	r2, [r3, #0]
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	01db      	lsls	r3, r3, #7
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d016      	beq.n	8005ffe <USB_DeactivateEndpoint+0xe2>
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	881b      	ldrh	r3, [r3, #0]
 8005fdc:	b29a      	uxth	r2, r3
 8005fde:	2010      	movs	r0, #16
 8005fe0:	183b      	adds	r3, r7, r0
 8005fe2:	49a8      	ldr	r1, [pc, #672]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 8005fe4:	400a      	ands	r2, r1
 8005fe6:	801a      	strh	r2, [r3, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	18d3      	adds	r3, r2, r3
 8005ff2:	183a      	adds	r2, r7, r0
 8005ff4:	8812      	ldrh	r2, [r2, #0]
 8005ff6:	49a7      	ldr	r1, [pc, #668]	; (8006294 <USB_DeactivateEndpoint+0x378>)
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	18d3      	adds	r3, r2, r3
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	b29a      	uxth	r2, r3
 800600c:	200e      	movs	r0, #14
 800600e:	183b      	adds	r3, r7, r0
 8006010:	49a1      	ldr	r1, [pc, #644]	; (8006298 <USB_DeactivateEndpoint+0x37c>)
 8006012:	400a      	ands	r2, r1
 8006014:	801a      	strh	r2, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	18d3      	adds	r3, r2, r3
 8006020:	183a      	adds	r2, r7, r0
 8006022:	8812      	ldrh	r2, [r2, #0]
 8006024:	499a      	ldr	r1, [pc, #616]	; (8006290 <USB_DeactivateEndpoint+0x374>)
 8006026:	430a      	orrs	r2, r1
 8006028:	b292      	uxth	r2, r2
 800602a:	801a      	strh	r2, [r3, #0]
 800602c:	e125      	b.n	800627a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	785b      	ldrb	r3, [r3, #1]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d000      	beq.n	8006038 <USB_DeactivateEndpoint+0x11c>
 8006036:	e090      	b.n	800615a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	18d2      	adds	r2, r2, r3
 8006042:	2120      	movs	r1, #32
 8006044:	187b      	adds	r3, r7, r1
 8006046:	8812      	ldrh	r2, [r2, #0]
 8006048:	801a      	strh	r2, [r3, #0]
 800604a:	187b      	adds	r3, r7, r1
 800604c:	881a      	ldrh	r2, [r3, #0]
 800604e:	2380      	movs	r3, #128	; 0x80
 8006050:	01db      	lsls	r3, r3, #7
 8006052:	4013      	ands	r3, r2
 8006054:	d016      	beq.n	8006084 <USB_DeactivateEndpoint+0x168>
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	18d3      	adds	r3, r2, r3
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29a      	uxth	r2, r3
 8006064:	201e      	movs	r0, #30
 8006066:	183b      	adds	r3, r7, r0
 8006068:	4986      	ldr	r1, [pc, #536]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 800606a:	400a      	ands	r2, r1
 800606c:	801a      	strh	r2, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	18d3      	adds	r3, r2, r3
 8006078:	183a      	adds	r2, r7, r0
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	4985      	ldr	r1, [pc, #532]	; (8006294 <USB_DeactivateEndpoint+0x378>)
 800607e:	430a      	orrs	r2, r1
 8006080:	b292      	uxth	r2, r2
 8006082:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	18d2      	adds	r2, r2, r3
 800608e:	211c      	movs	r1, #28
 8006090:	187b      	adds	r3, r7, r1
 8006092:	8812      	ldrh	r2, [r2, #0]
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	187b      	adds	r3, r7, r1
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	2240      	movs	r2, #64	; 0x40
 800609c:	4013      	ands	r3, r2
 800609e:	d016      	beq.n	80060ce <USB_DeactivateEndpoint+0x1b2>
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	b29a      	uxth	r2, r3
 80060ae:	201a      	movs	r0, #26
 80060b0:	183b      	adds	r3, r7, r0
 80060b2:	4974      	ldr	r1, [pc, #464]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 80060b4:	400a      	ands	r2, r1
 80060b6:	801a      	strh	r2, [r3, #0]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	18d3      	adds	r3, r2, r3
 80060c2:	183a      	adds	r2, r7, r0
 80060c4:	8812      	ldrh	r2, [r2, #0]
 80060c6:	4970      	ldr	r1, [pc, #448]	; (8006288 <USB_DeactivateEndpoint+0x36c>)
 80060c8:	430a      	orrs	r2, r1
 80060ca:	b292      	uxth	r2, r2
 80060cc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	18d3      	adds	r3, r2, r3
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	2018      	movs	r0, #24
 80060de:	183b      	adds	r3, r7, r0
 80060e0:	4968      	ldr	r1, [pc, #416]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 80060e2:	400a      	ands	r2, r1
 80060e4:	801a      	strh	r2, [r3, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	18d3      	adds	r3, r2, r3
 80060f0:	183a      	adds	r2, r7, r0
 80060f2:	8812      	ldrh	r2, [r2, #0]
 80060f4:	4964      	ldr	r1, [pc, #400]	; (8006288 <USB_DeactivateEndpoint+0x36c>)
 80060f6:	430a      	orrs	r2, r1
 80060f8:	b292      	uxth	r2, r2
 80060fa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	18d3      	adds	r3, r2, r3
 8006106:	881b      	ldrh	r3, [r3, #0]
 8006108:	b29a      	uxth	r2, r3
 800610a:	2016      	movs	r0, #22
 800610c:	183b      	adds	r3, r7, r0
 800610e:	4962      	ldr	r1, [pc, #392]	; (8006298 <USB_DeactivateEndpoint+0x37c>)
 8006110:	400a      	ands	r2, r1
 8006112:	801a      	strh	r2, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	18d3      	adds	r3, r2, r3
 800611e:	183a      	adds	r2, r7, r0
 8006120:	8812      	ldrh	r2, [r2, #0]
 8006122:	495b      	ldr	r1, [pc, #364]	; (8006290 <USB_DeactivateEndpoint+0x374>)
 8006124:	430a      	orrs	r2, r1
 8006126:	b292      	uxth	r2, r2
 8006128:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	18d3      	adds	r3, r2, r3
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29a      	uxth	r2, r3
 8006138:	2014      	movs	r0, #20
 800613a:	183b      	adds	r3, r7, r0
 800613c:	4953      	ldr	r1, [pc, #332]	; (800628c <USB_DeactivateEndpoint+0x370>)
 800613e:	400a      	ands	r2, r1
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	18d3      	adds	r3, r2, r3
 800614c:	183a      	adds	r2, r7, r0
 800614e:	8812      	ldrh	r2, [r2, #0]
 8006150:	494f      	ldr	r1, [pc, #316]	; (8006290 <USB_DeactivateEndpoint+0x374>)
 8006152:	430a      	orrs	r2, r1
 8006154:	b292      	uxth	r2, r2
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	e08f      	b.n	800627a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	18d2      	adds	r2, r2, r3
 8006164:	212e      	movs	r1, #46	; 0x2e
 8006166:	187b      	adds	r3, r7, r1
 8006168:	8812      	ldrh	r2, [r2, #0]
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	187b      	adds	r3, r7, r1
 800616e:	881a      	ldrh	r2, [r3, #0]
 8006170:	2380      	movs	r3, #128	; 0x80
 8006172:	01db      	lsls	r3, r3, #7
 8006174:	4013      	ands	r3, r2
 8006176:	d016      	beq.n	80061a6 <USB_DeactivateEndpoint+0x28a>
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	18d3      	adds	r3, r2, r3
 8006182:	881b      	ldrh	r3, [r3, #0]
 8006184:	b29a      	uxth	r2, r3
 8006186:	202c      	movs	r0, #44	; 0x2c
 8006188:	183b      	adds	r3, r7, r0
 800618a:	493e      	ldr	r1, [pc, #248]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 800618c:	400a      	ands	r2, r1
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	18d3      	adds	r3, r2, r3
 800619a:	183a      	adds	r2, r7, r0
 800619c:	8812      	ldrh	r2, [r2, #0]
 800619e:	493d      	ldr	r1, [pc, #244]	; (8006294 <USB_DeactivateEndpoint+0x378>)
 80061a0:	430a      	orrs	r2, r1
 80061a2:	b292      	uxth	r2, r2
 80061a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	18d2      	adds	r2, r2, r3
 80061b0:	212a      	movs	r1, #42	; 0x2a
 80061b2:	187b      	adds	r3, r7, r1
 80061b4:	8812      	ldrh	r2, [r2, #0]
 80061b6:	801a      	strh	r2, [r3, #0]
 80061b8:	187b      	adds	r3, r7, r1
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	2240      	movs	r2, #64	; 0x40
 80061be:	4013      	ands	r3, r2
 80061c0:	d016      	beq.n	80061f0 <USB_DeactivateEndpoint+0x2d4>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	18d3      	adds	r3, r2, r3
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	2028      	movs	r0, #40	; 0x28
 80061d2:	183b      	adds	r3, r7, r0
 80061d4:	492b      	ldr	r1, [pc, #172]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 80061d6:	400a      	ands	r2, r1
 80061d8:	801a      	strh	r2, [r3, #0]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	18d3      	adds	r3, r2, r3
 80061e4:	183a      	adds	r2, r7, r0
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	4927      	ldr	r1, [pc, #156]	; (8006288 <USB_DeactivateEndpoint+0x36c>)
 80061ea:	430a      	orrs	r2, r1
 80061ec:	b292      	uxth	r2, r2
 80061ee:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	18d3      	adds	r3, r2, r3
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	2026      	movs	r0, #38	; 0x26
 8006200:	183b      	adds	r3, r7, r0
 8006202:	4920      	ldr	r1, [pc, #128]	; (8006284 <USB_DeactivateEndpoint+0x368>)
 8006204:	400a      	ands	r2, r1
 8006206:	801a      	strh	r2, [r3, #0]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	18d3      	adds	r3, r2, r3
 8006212:	183a      	adds	r2, r7, r0
 8006214:	8812      	ldrh	r2, [r2, #0]
 8006216:	491f      	ldr	r1, [pc, #124]	; (8006294 <USB_DeactivateEndpoint+0x378>)
 8006218:	430a      	orrs	r2, r1
 800621a:	b292      	uxth	r2, r2
 800621c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	18d3      	adds	r3, r2, r3
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29a      	uxth	r2, r3
 800622c:	2024      	movs	r0, #36	; 0x24
 800622e:	183b      	adds	r3, r7, r0
 8006230:	4916      	ldr	r1, [pc, #88]	; (800628c <USB_DeactivateEndpoint+0x370>)
 8006232:	400a      	ands	r2, r1
 8006234:	801a      	strh	r2, [r3, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	18d3      	adds	r3, r2, r3
 8006240:	183a      	adds	r2, r7, r0
 8006242:	8812      	ldrh	r2, [r2, #0]
 8006244:	4912      	ldr	r1, [pc, #72]	; (8006290 <USB_DeactivateEndpoint+0x374>)
 8006246:	430a      	orrs	r2, r1
 8006248:	b292      	uxth	r2, r2
 800624a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	881b      	ldrh	r3, [r3, #0]
 8006258:	b29a      	uxth	r2, r3
 800625a:	2022      	movs	r0, #34	; 0x22
 800625c:	183b      	adds	r3, r7, r0
 800625e:	490e      	ldr	r1, [pc, #56]	; (8006298 <USB_DeactivateEndpoint+0x37c>)
 8006260:	400a      	ands	r2, r1
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	183a      	adds	r2, r7, r0
 8006270:	8812      	ldrh	r2, [r2, #0]
 8006272:	4907      	ldr	r1, [pc, #28]	; (8006290 <USB_DeactivateEndpoint+0x374>)
 8006274:	430a      	orrs	r2, r1
 8006276:	b292      	uxth	r2, r2
 8006278:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b00c      	add	sp, #48	; 0x30
 8006282:	bd80      	pop	{r7, pc}
 8006284:	ffff8f8f 	.word	0xffff8f8f
 8006288:	ffff80c0 	.word	0xffff80c0
 800628c:	ffff8fbf 	.word	0xffff8fbf
 8006290:	ffff8080 	.word	0xffff8080
 8006294:	ffffc080 	.word	0xffffc080
 8006298:	ffffbf8f 	.word	0xffffbf8f

0800629c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b0c3      	sub	sp, #268	; 0x10c
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
 80062a4:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	785b      	ldrb	r3, [r3, #1]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d001      	beq.n	80062b2 <USB_EPStartXfer+0x16>
 80062ae:	f000 fcef 	bl	8006c90 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d905      	bls.n	80062ca <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	1d7a      	adds	r2, r7, #5
 80062c4:	32ff      	adds	r2, #255	; 0xff
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	e004      	b.n	80062d4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	1d7a      	adds	r2, r7, #5
 80062d0:	32ff      	adds	r2, #255	; 0xff
 80062d2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	7b1b      	ldrb	r3, [r3, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d125      	bne.n	8006328 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	6959      	ldr	r1, [r3, #20]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	88da      	ldrh	r2, [r3, #6]
 80062e4:	1d7b      	adds	r3, r7, #5
 80062e6:	33ff      	adds	r3, #255	; 0xff
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f001 f9c9 	bl	8007684 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2250      	movs	r2, #80	; 0x50
 80062fa:	5a9b      	ldrh	r3, [r3, r2]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	001a      	movs	r2, r3
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	189b      	adds	r3, r3, r2
 8006304:	613b      	str	r3, [r7, #16]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	00da      	lsls	r2, r3, #3
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	18d3      	adds	r3, r2, r3
 8006310:	4acc      	ldr	r2, [pc, #816]	; (8006644 <USB_EPStartXfer+0x3a8>)
 8006312:	4694      	mov	ip, r2
 8006314:	4463      	add	r3, ip
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	1d7b      	adds	r3, r7, #5
 800631a:	33ff      	adds	r3, #255	; 0xff
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	801a      	strh	r2, [r3, #0]
 8006324:	f000 fc8f 	bl	8006c46 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	78db      	ldrb	r3, [r3, #3]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d000      	beq.n	8006332 <USB_EPStartXfer+0x96>
 8006330:	e33a      	b.n	80069a8 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	429a      	cmp	r2, r3
 800633c:	d800      	bhi.n	8006340 <USB_EPStartXfer+0xa4>
 800633e:	e2df      	b.n	8006900 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	18d3      	adds	r3, r2, r3
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	b29a      	uxth	r2, r3
 800634e:	2056      	movs	r0, #86	; 0x56
 8006350:	183b      	adds	r3, r7, r0
 8006352:	49bd      	ldr	r1, [pc, #756]	; (8006648 <USB_EPStartXfer+0x3ac>)
 8006354:	400a      	ands	r2, r1
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	18d3      	adds	r3, r2, r3
 8006362:	183a      	adds	r2, r7, r0
 8006364:	8812      	ldrh	r2, [r2, #0]
 8006366:	49b9      	ldr	r1, [pc, #740]	; (800664c <USB_EPStartXfer+0x3b0>)
 8006368:	430a      	orrs	r2, r1
 800636a:	b292      	uxth	r2, r2
 800636c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6a1a      	ldr	r2, [r3, #32]
 8006372:	1d7b      	adds	r3, r7, #5
 8006374:	33ff      	adds	r3, #255	; 0xff
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	1ad2      	subs	r2, r2, r3
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	18d3      	adds	r3, r2, r3
 8006388:	881b      	ldrh	r3, [r3, #0]
 800638a:	b29b      	uxth	r3, r3
 800638c:	001a      	movs	r2, r3
 800638e:	2340      	movs	r3, #64	; 0x40
 8006390:	4013      	ands	r3, r2
 8006392:	d100      	bne.n	8006396 <USB_EPStartXfer+0xfa>
 8006394:	e162      	b.n	800665c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	633b      	str	r3, [r7, #48]	; 0x30
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d16a      	bne.n	8006478 <USB_EPStartXfer+0x1dc>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2250      	movs	r2, #80	; 0x50
 80063aa:	5a9b      	ldrh	r3, [r3, r2]
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	001a      	movs	r2, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	189b      	adds	r3, r3, r2
 80063b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	00da      	lsls	r2, r3, #3
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	18d3      	adds	r3, r2, r3
 80063c0:	4aa3      	ldr	r2, [pc, #652]	; (8006650 <USB_EPStartXfer+0x3b4>)
 80063c2:	4694      	mov	ip, r2
 80063c4:	4463      	add	r3, ip
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	1d7b      	adds	r3, r7, #5
 80063ca:	33ff      	adds	r3, #255	; 0xff
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d110      	bne.n	80063f4 <USB_EPStartXfer+0x158>
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	881b      	ldrh	r3, [r3, #0]
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	4a9e      	ldr	r2, [pc, #632]	; (8006654 <USB_EPStartXfer+0x3b8>)
 80063da:	4013      	ands	r3, r2
 80063dc:	b29a      	uxth	r2, r3
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	801a      	strh	r2, [r3, #0]
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	4a9b      	ldr	r2, [pc, #620]	; (8006658 <USB_EPStartXfer+0x3bc>)
 80063ea:	4313      	orrs	r3, r2
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f0:	801a      	strh	r2, [r3, #0]
 80063f2:	e05c      	b.n	80064ae <USB_EPStartXfer+0x212>
 80063f4:	1d7b      	adds	r3, r7, #5
 80063f6:	33ff      	adds	r3, #255	; 0xff
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b3e      	cmp	r3, #62	; 0x3e
 80063fc:	d81c      	bhi.n	8006438 <USB_EPStartXfer+0x19c>
 80063fe:	1d7b      	adds	r3, r7, #5
 8006400:	33ff      	adds	r3, #255	; 0xff
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	1c7a      	adds	r2, r7, #1
 8006408:	32ff      	adds	r2, #255	; 0xff
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	1d7b      	adds	r3, r7, #5
 800640e:	33ff      	adds	r3, #255	; 0xff
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2201      	movs	r2, #1
 8006414:	4013      	ands	r3, r2
 8006416:	d006      	beq.n	8006426 <USB_EPStartXfer+0x18a>
 8006418:	1c7b      	adds	r3, r7, #1
 800641a:	33ff      	adds	r3, #255	; 0xff
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	3301      	adds	r3, #1
 8006420:	1c7a      	adds	r2, r7, #1
 8006422:	32ff      	adds	r2, #255	; 0xff
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	1c7b      	adds	r3, r7, #1
 8006428:	33ff      	adds	r3, #255	; 0xff
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	b29b      	uxth	r3, r3
 800642e:	029b      	lsls	r3, r3, #10
 8006430:	b29a      	uxth	r2, r3
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	801a      	strh	r2, [r3, #0]
 8006436:	e03a      	b.n	80064ae <USB_EPStartXfer+0x212>
 8006438:	1d7b      	adds	r3, r7, #5
 800643a:	33ff      	adds	r3, #255	; 0xff
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	1c7a      	adds	r2, r7, #1
 8006442:	32ff      	adds	r2, #255	; 0xff
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	1d7b      	adds	r3, r7, #5
 8006448:	33ff      	adds	r3, #255	; 0xff
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	221f      	movs	r2, #31
 800644e:	4013      	ands	r3, r2
 8006450:	d106      	bne.n	8006460 <USB_EPStartXfer+0x1c4>
 8006452:	1c7b      	adds	r3, r7, #1
 8006454:	33ff      	adds	r3, #255	; 0xff
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3b01      	subs	r3, #1
 800645a:	1c7a      	adds	r2, r7, #1
 800645c:	32ff      	adds	r2, #255	; 0xff
 800645e:	6013      	str	r3, [r2, #0]
 8006460:	1c7b      	adds	r3, r7, #1
 8006462:	33ff      	adds	r3, #255	; 0xff
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29b      	uxth	r3, r3
 800646c:	4a7a      	ldr	r2, [pc, #488]	; (8006658 <USB_EPStartXfer+0x3bc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	b29a      	uxth	r2, r3
 8006472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006474:	801a      	strh	r2, [r3, #0]
 8006476:	e01a      	b.n	80064ae <USB_EPStartXfer+0x212>
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d116      	bne.n	80064ae <USB_EPStartXfer+0x212>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2250      	movs	r2, #80	; 0x50
 8006484:	5a9b      	ldrh	r3, [r3, r2]
 8006486:	b29b      	uxth	r3, r3
 8006488:	001a      	movs	r2, r3
 800648a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800648c:	189b      	adds	r3, r3, r2
 800648e:	633b      	str	r3, [r7, #48]	; 0x30
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	00da      	lsls	r2, r3, #3
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	18d3      	adds	r3, r2, r3
 800649a:	4a6d      	ldr	r2, [pc, #436]	; (8006650 <USB_EPStartXfer+0x3b4>)
 800649c:	4694      	mov	ip, r2
 800649e:	4463      	add	r3, ip
 80064a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064a2:	1d7b      	adds	r3, r7, #5
 80064a4:	33ff      	adds	r3, #255	; 0xff
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80064ae:	2076      	movs	r0, #118	; 0x76
 80064b0:	183b      	adds	r3, r7, r0
 80064b2:	683a      	ldr	r2, [r7, #0]
 80064b4:	8952      	ldrh	r2, [r2, #10]
 80064b6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6959      	ldr	r1, [r3, #20]
 80064bc:	1d7b      	adds	r3, r7, #5
 80064be:	33ff      	adds	r3, #255	; 0xff
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	b29c      	uxth	r4, r3
 80064c4:	183b      	adds	r3, r7, r0
 80064c6:	881a      	ldrh	r2, [r3, #0]
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	0023      	movs	r3, r4
 80064cc:	f001 f8da 	bl	8007684 <USB_WritePMA>
            ep->xfer_buff += len;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	695a      	ldr	r2, [r3, #20]
 80064d4:	1d7b      	adds	r3, r7, #5
 80064d6:	33ff      	adds	r3, #255	; 0xff
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	18d2      	adds	r2, r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d908      	bls.n	80064fe <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6a1a      	ldr	r2, [r3, #32]
 80064f0:	1d7b      	adds	r3, r7, #5
 80064f2:	33ff      	adds	r3, #255	; 0xff
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	621a      	str	r2, [r3, #32]
 80064fc:	e007      	b.n	800650e <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	1d7a      	adds	r2, r7, #5
 8006504:	32ff      	adds	r2, #255	; 0xff
 8006506:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d166      	bne.n	80065e4 <USB_EPStartXfer+0x348>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	61bb      	str	r3, [r7, #24]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2250      	movs	r2, #80	; 0x50
 800651e:	5a9b      	ldrh	r3, [r3, r2]
 8006520:	b29b      	uxth	r3, r3
 8006522:	001a      	movs	r2, r3
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	189b      	adds	r3, r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	00da      	lsls	r2, r3, #3
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	18d3      	adds	r3, r2, r3
 8006534:	4a43      	ldr	r2, [pc, #268]	; (8006644 <USB_EPStartXfer+0x3a8>)
 8006536:	4694      	mov	ip, r2
 8006538:	4463      	add	r3, ip
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	1d7b      	adds	r3, r7, #5
 800653e:	33ff      	adds	r3, #255	; 0xff
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d110      	bne.n	8006568 <USB_EPStartXfer+0x2cc>
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	b29b      	uxth	r3, r3
 800654c:	4a41      	ldr	r2, [pc, #260]	; (8006654 <USB_EPStartXfer+0x3b8>)
 800654e:	4013      	ands	r3, r2
 8006550:	b29a      	uxth	r2, r3
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	881b      	ldrh	r3, [r3, #0]
 800655a:	b29b      	uxth	r3, r3
 800655c:	4a3e      	ldr	r2, [pc, #248]	; (8006658 <USB_EPStartXfer+0x3bc>)
 800655e:	4313      	orrs	r3, r2
 8006560:	b29a      	uxth	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	e05a      	b.n	800661e <USB_EPStartXfer+0x382>
 8006568:	1d7b      	adds	r3, r7, #5
 800656a:	33ff      	adds	r3, #255	; 0xff
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b3e      	cmp	r3, #62	; 0x3e
 8006570:	d81a      	bhi.n	80065a8 <USB_EPStartXfer+0x30c>
 8006572:	1d7b      	adds	r3, r7, #5
 8006574:	33ff      	adds	r3, #255	; 0xff
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	21fc      	movs	r1, #252	; 0xfc
 800657c:	187a      	adds	r2, r7, r1
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	1d7b      	adds	r3, r7, #5
 8006582:	33ff      	adds	r3, #255	; 0xff
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2201      	movs	r2, #1
 8006588:	4013      	ands	r3, r2
 800658a:	d004      	beq.n	8006596 <USB_EPStartXfer+0x2fa>
 800658c:	187b      	adds	r3, r7, r1
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	187a      	adds	r2, r7, r1
 8006594:	6013      	str	r3, [r2, #0]
 8006596:	23fc      	movs	r3, #252	; 0xfc
 8006598:	18fb      	adds	r3, r7, r3
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	b29b      	uxth	r3, r3
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	801a      	strh	r2, [r3, #0]
 80065a6:	e03a      	b.n	800661e <USB_EPStartXfer+0x382>
 80065a8:	1d7b      	adds	r3, r7, #5
 80065aa:	33ff      	adds	r3, #255	; 0xff
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	095b      	lsrs	r3, r3, #5
 80065b0:	21fc      	movs	r1, #252	; 0xfc
 80065b2:	187a      	adds	r2, r7, r1
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	1d7b      	adds	r3, r7, #5
 80065b8:	33ff      	adds	r3, #255	; 0xff
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	221f      	movs	r2, #31
 80065be:	4013      	ands	r3, r2
 80065c0:	d104      	bne.n	80065cc <USB_EPStartXfer+0x330>
 80065c2:	187b      	adds	r3, r7, r1
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	187a      	adds	r2, r7, r1
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	23fc      	movs	r3, #252	; 0xfc
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	029b      	lsls	r3, r3, #10
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <USB_EPStartXfer+0x3bc>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	b29a      	uxth	r2, r3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e01c      	b.n	800661e <USB_EPStartXfer+0x382>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	785b      	ldrb	r3, [r3, #1]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d118      	bne.n	800661e <USB_EPStartXfer+0x382>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2250      	movs	r2, #80	; 0x50
 80065f4:	5a9b      	ldrh	r3, [r3, r2]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	001a      	movs	r2, r3
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	189b      	adds	r3, r3, r2
 80065fe:	623b      	str	r3, [r7, #32]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	00da      	lsls	r2, r3, #3
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	18d3      	adds	r3, r2, r3
 800660a:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <USB_EPStartXfer+0x3a8>)
 800660c:	4694      	mov	ip, r2
 800660e:	4463      	add	r3, ip
 8006610:	61fb      	str	r3, [r7, #28]
 8006612:	1d7b      	adds	r3, r7, #5
 8006614:	33ff      	adds	r3, #255	; 0xff
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	b29a      	uxth	r2, r3
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800661e:	2076      	movs	r0, #118	; 0x76
 8006620:	183b      	adds	r3, r7, r0
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	8912      	ldrh	r2, [r2, #8]
 8006626:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6959      	ldr	r1, [r3, #20]
 800662c:	1d7b      	adds	r3, r7, #5
 800662e:	33ff      	adds	r3, #255	; 0xff
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	b29c      	uxth	r4, r3
 8006634:	183b      	adds	r3, r7, r0
 8006636:	881a      	ldrh	r2, [r3, #0]
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	0023      	movs	r3, r4
 800663c:	f001 f822 	bl	8007684 <USB_WritePMA>
 8006640:	e301      	b.n	8006c46 <USB_EPStartXfer+0x9aa>
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	00000402 	.word	0x00000402
 8006648:	ffff8f8f 	.word	0xffff8f8f
 800664c:	ffff8180 	.word	0xffff8180
 8006650:	00000406 	.word	0x00000406
 8006654:	ffff83ff 	.word	0xffff83ff
 8006658:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	785b      	ldrb	r3, [r3, #1]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d166      	bne.n	8006732 <USB_EPStartXfer+0x496>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	64bb      	str	r3, [r7, #72]	; 0x48
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2250      	movs	r2, #80	; 0x50
 800666c:	5a9b      	ldrh	r3, [r3, r2]
 800666e:	b29b      	uxth	r3, r3
 8006670:	001a      	movs	r2, r3
 8006672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006674:	189b      	adds	r3, r3, r2
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	00da      	lsls	r2, r3, #3
 800667e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006680:	18d3      	adds	r3, r2, r3
 8006682:	4ac3      	ldr	r2, [pc, #780]	; (8006990 <USB_EPStartXfer+0x6f4>)
 8006684:	4694      	mov	ip, r2
 8006686:	4463      	add	r3, ip
 8006688:	647b      	str	r3, [r7, #68]	; 0x44
 800668a:	1d7b      	adds	r3, r7, #5
 800668c:	33ff      	adds	r3, #255	; 0xff
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d110      	bne.n	80066b6 <USB_EPStartXfer+0x41a>
 8006694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	4abe      	ldr	r2, [pc, #760]	; (8006994 <USB_EPStartXfer+0x6f8>)
 800669c:	4013      	ands	r3, r2
 800669e:	b29a      	uxth	r2, r3
 80066a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	4abb      	ldr	r2, [pc, #748]	; (8006998 <USB_EPStartXfer+0x6fc>)
 80066ac:	4313      	orrs	r3, r2
 80066ae:	b29a      	uxth	r2, r3
 80066b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	e05a      	b.n	800676c <USB_EPStartXfer+0x4d0>
 80066b6:	1d7b      	adds	r3, r7, #5
 80066b8:	33ff      	adds	r3, #255	; 0xff
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b3e      	cmp	r3, #62	; 0x3e
 80066be:	d81a      	bhi.n	80066f6 <USB_EPStartXfer+0x45a>
 80066c0:	1d7b      	adds	r3, r7, #5
 80066c2:	33ff      	adds	r3, #255	; 0xff
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	21f8      	movs	r1, #248	; 0xf8
 80066ca:	187a      	adds	r2, r7, r1
 80066cc:	6013      	str	r3, [r2, #0]
 80066ce:	1d7b      	adds	r3, r7, #5
 80066d0:	33ff      	adds	r3, #255	; 0xff
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2201      	movs	r2, #1
 80066d6:	4013      	ands	r3, r2
 80066d8:	d004      	beq.n	80066e4 <USB_EPStartXfer+0x448>
 80066da:	187b      	adds	r3, r7, r1
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3301      	adds	r3, #1
 80066e0:	187a      	adds	r2, r7, r1
 80066e2:	6013      	str	r3, [r2, #0]
 80066e4:	23f8      	movs	r3, #248	; 0xf8
 80066e6:	18fb      	adds	r3, r7, r3
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	029b      	lsls	r3, r3, #10
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f2:	801a      	strh	r2, [r3, #0]
 80066f4:	e03a      	b.n	800676c <USB_EPStartXfer+0x4d0>
 80066f6:	1d7b      	adds	r3, r7, #5
 80066f8:	33ff      	adds	r3, #255	; 0xff
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	095b      	lsrs	r3, r3, #5
 80066fe:	21f8      	movs	r1, #248	; 0xf8
 8006700:	187a      	adds	r2, r7, r1
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	1d7b      	adds	r3, r7, #5
 8006706:	33ff      	adds	r3, #255	; 0xff
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	221f      	movs	r2, #31
 800670c:	4013      	ands	r3, r2
 800670e:	d104      	bne.n	800671a <USB_EPStartXfer+0x47e>
 8006710:	187b      	adds	r3, r7, r1
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	3b01      	subs	r3, #1
 8006716:	187a      	adds	r2, r7, r1
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	23f8      	movs	r3, #248	; 0xf8
 800671c:	18fb      	adds	r3, r7, r3
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	b29b      	uxth	r3, r3
 8006722:	029b      	lsls	r3, r3, #10
 8006724:	b29b      	uxth	r3, r3
 8006726:	4a9c      	ldr	r2, [pc, #624]	; (8006998 <USB_EPStartXfer+0x6fc>)
 8006728:	4313      	orrs	r3, r2
 800672a:	b29a      	uxth	r2, r3
 800672c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800672e:	801a      	strh	r2, [r3, #0]
 8006730:	e01c      	b.n	800676c <USB_EPStartXfer+0x4d0>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	785b      	ldrb	r3, [r3, #1]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d118      	bne.n	800676c <USB_EPStartXfer+0x4d0>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	653b      	str	r3, [r7, #80]	; 0x50
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2250      	movs	r2, #80	; 0x50
 8006742:	5a9b      	ldrh	r3, [r3, r2]
 8006744:	b29b      	uxth	r3, r3
 8006746:	001a      	movs	r2, r3
 8006748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800674a:	189b      	adds	r3, r3, r2
 800674c:	653b      	str	r3, [r7, #80]	; 0x50
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	00da      	lsls	r2, r3, #3
 8006754:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006756:	18d3      	adds	r3, r2, r3
 8006758:	4a8d      	ldr	r2, [pc, #564]	; (8006990 <USB_EPStartXfer+0x6f4>)
 800675a:	4694      	mov	ip, r2
 800675c:	4463      	add	r3, ip
 800675e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006760:	1d7b      	adds	r3, r7, #5
 8006762:	33ff      	adds	r3, #255	; 0xff
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	b29a      	uxth	r2, r3
 8006768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800676a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800676c:	2076      	movs	r0, #118	; 0x76
 800676e:	183b      	adds	r3, r7, r0
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	8912      	ldrh	r2, [r2, #8]
 8006774:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	6959      	ldr	r1, [r3, #20]
 800677a:	1d7b      	adds	r3, r7, #5
 800677c:	33ff      	adds	r3, #255	; 0xff
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	b29c      	uxth	r4, r3
 8006782:	183b      	adds	r3, r7, r0
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	0023      	movs	r3, r4
 800678a:	f000 ff7b 	bl	8007684 <USB_WritePMA>
            ep->xfer_buff += len;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	1d7b      	adds	r3, r7, #5
 8006794:	33ff      	adds	r3, #255	; 0xff
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	18d2      	adds	r2, r2, r3
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d908      	bls.n	80067bc <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6a1a      	ldr	r2, [r3, #32]
 80067ae:	1d7b      	adds	r3, r7, #5
 80067b0:	33ff      	adds	r3, #255	; 0xff
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	1ad2      	subs	r2, r2, r3
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	621a      	str	r2, [r3, #32]
 80067ba:	e007      	b.n	80067cc <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	1d7a      	adds	r2, r7, #5
 80067c2:	32ff      	adds	r2, #255	; 0xff
 80067c4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	2200      	movs	r2, #0
 80067ca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	643b      	str	r3, [r7, #64]	; 0x40
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d166      	bne.n	80068a6 <USB_EPStartXfer+0x60a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	63bb      	str	r3, [r7, #56]	; 0x38
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2250      	movs	r2, #80	; 0x50
 80067e0:	5a9b      	ldrh	r3, [r3, r2]
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	001a      	movs	r2, r3
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	189b      	adds	r3, r3, r2
 80067ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	00da      	lsls	r2, r3, #3
 80067f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f4:	18d3      	adds	r3, r2, r3
 80067f6:	4a69      	ldr	r2, [pc, #420]	; (800699c <USB_EPStartXfer+0x700>)
 80067f8:	4694      	mov	ip, r2
 80067fa:	4463      	add	r3, ip
 80067fc:	637b      	str	r3, [r7, #52]	; 0x34
 80067fe:	1d7b      	adds	r3, r7, #5
 8006800:	33ff      	adds	r3, #255	; 0xff
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d110      	bne.n	800682a <USB_EPStartXfer+0x58e>
 8006808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	4a61      	ldr	r2, [pc, #388]	; (8006994 <USB_EPStartXfer+0x6f8>)
 8006810:	4013      	ands	r3, r2
 8006812:	b29a      	uxth	r2, r3
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	801a      	strh	r2, [r3, #0]
 8006818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	4a5e      	ldr	r2, [pc, #376]	; (8006998 <USB_EPStartXfer+0x6fc>)
 8006820:	4313      	orrs	r3, r2
 8006822:	b29a      	uxth	r2, r3
 8006824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e058      	b.n	80068dc <USB_EPStartXfer+0x640>
 800682a:	1d7b      	adds	r3, r7, #5
 800682c:	33ff      	adds	r3, #255	; 0xff
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b3e      	cmp	r3, #62	; 0x3e
 8006832:	d81a      	bhi.n	800686a <USB_EPStartXfer+0x5ce>
 8006834:	1d7b      	adds	r3, r7, #5
 8006836:	33ff      	adds	r3, #255	; 0xff
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	21f4      	movs	r1, #244	; 0xf4
 800683e:	187a      	adds	r2, r7, r1
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	1d7b      	adds	r3, r7, #5
 8006844:	33ff      	adds	r3, #255	; 0xff
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2201      	movs	r2, #1
 800684a:	4013      	ands	r3, r2
 800684c:	d004      	beq.n	8006858 <USB_EPStartXfer+0x5bc>
 800684e:	187b      	adds	r3, r7, r1
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	3301      	adds	r3, #1
 8006854:	187a      	adds	r2, r7, r1
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	23f4      	movs	r3, #244	; 0xf4
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	b29b      	uxth	r3, r3
 8006860:	029b      	lsls	r3, r3, #10
 8006862:	b29a      	uxth	r2, r3
 8006864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e038      	b.n	80068dc <USB_EPStartXfer+0x640>
 800686a:	1d7b      	adds	r3, r7, #5
 800686c:	33ff      	adds	r3, #255	; 0xff
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	21f4      	movs	r1, #244	; 0xf4
 8006874:	187a      	adds	r2, r7, r1
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	1d7b      	adds	r3, r7, #5
 800687a:	33ff      	adds	r3, #255	; 0xff
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	221f      	movs	r2, #31
 8006880:	4013      	ands	r3, r2
 8006882:	d104      	bne.n	800688e <USB_EPStartXfer+0x5f2>
 8006884:	187b      	adds	r3, r7, r1
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3b01      	subs	r3, #1
 800688a:	187a      	adds	r2, r7, r1
 800688c:	6013      	str	r3, [r2, #0]
 800688e:	23f4      	movs	r3, #244	; 0xf4
 8006890:	18fb      	adds	r3, r7, r3
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	029b      	lsls	r3, r3, #10
 8006898:	b29b      	uxth	r3, r3
 800689a:	4a3f      	ldr	r2, [pc, #252]	; (8006998 <USB_EPStartXfer+0x6fc>)
 800689c:	4313      	orrs	r3, r2
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	e01a      	b.n	80068dc <USB_EPStartXfer+0x640>
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d116      	bne.n	80068dc <USB_EPStartXfer+0x640>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2250      	movs	r2, #80	; 0x50
 80068b2:	5a9b      	ldrh	r3, [r3, r2]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	001a      	movs	r2, r3
 80068b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ba:	189b      	adds	r3, r3, r2
 80068bc:	643b      	str	r3, [r7, #64]	; 0x40
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	00da      	lsls	r2, r3, #3
 80068c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c6:	18d3      	adds	r3, r2, r3
 80068c8:	4a34      	ldr	r2, [pc, #208]	; (800699c <USB_EPStartXfer+0x700>)
 80068ca:	4694      	mov	ip, r2
 80068cc:	4463      	add	r3, ip
 80068ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d0:	1d7b      	adds	r3, r7, #5
 80068d2:	33ff      	adds	r3, #255	; 0xff
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068dc:	2076      	movs	r0, #118	; 0x76
 80068de:	183b      	adds	r3, r7, r0
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	8952      	ldrh	r2, [r2, #10]
 80068e4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	6959      	ldr	r1, [r3, #20]
 80068ea:	1d7b      	adds	r3, r7, #5
 80068ec:	33ff      	adds	r3, #255	; 0xff
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	b29c      	uxth	r4, r3
 80068f2:	183b      	adds	r3, r7, r0
 80068f4:	881a      	ldrh	r2, [r3, #0]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	0023      	movs	r3, r4
 80068fa:	f000 fec3 	bl	8007684 <USB_WritePMA>
 80068fe:	e1a2      	b.n	8006c46 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	1d7a      	adds	r2, r7, #5
 8006906:	32ff      	adds	r2, #255	; 0xff
 8006908:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	18d3      	adds	r3, r2, r3
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29a      	uxth	r2, r3
 8006918:	2062      	movs	r0, #98	; 0x62
 800691a:	183b      	adds	r3, r7, r0
 800691c:	4920      	ldr	r1, [pc, #128]	; (80069a0 <USB_EPStartXfer+0x704>)
 800691e:	400a      	ands	r2, r1
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	18d3      	adds	r3, r2, r3
 800692c:	183a      	adds	r2, r7, r0
 800692e:	8812      	ldrh	r2, [r2, #0]
 8006930:	491c      	ldr	r1, [pc, #112]	; (80069a4 <USB_EPStartXfer+0x708>)
 8006932:	430a      	orrs	r2, r1
 8006934:	b292      	uxth	r2, r2
 8006936:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2250      	movs	r2, #80	; 0x50
 8006940:	5a9b      	ldrh	r3, [r3, r2]
 8006942:	b29b      	uxth	r3, r3
 8006944:	001a      	movs	r2, r3
 8006946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006948:	189b      	adds	r3, r3, r2
 800694a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	00da      	lsls	r2, r3, #3
 8006952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006954:	18d3      	adds	r3, r2, r3
 8006956:	4a0e      	ldr	r2, [pc, #56]	; (8006990 <USB_EPStartXfer+0x6f4>)
 8006958:	4694      	mov	ip, r2
 800695a:	4463      	add	r3, ip
 800695c:	65bb      	str	r3, [r7, #88]	; 0x58
 800695e:	1d7b      	adds	r3, r7, #5
 8006960:	33ff      	adds	r3, #255	; 0xff
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	b29a      	uxth	r2, r3
 8006966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006968:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800696a:	2076      	movs	r0, #118	; 0x76
 800696c:	183b      	adds	r3, r7, r0
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	8912      	ldrh	r2, [r2, #8]
 8006972:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	6959      	ldr	r1, [r3, #20]
 8006978:	1d7b      	adds	r3, r7, #5
 800697a:	33ff      	adds	r3, #255	; 0xff
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	b29c      	uxth	r4, r3
 8006980:	183b      	adds	r3, r7, r0
 8006982:	881a      	ldrh	r2, [r3, #0]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	0023      	movs	r3, r4
 8006988:	f000 fe7c 	bl	8007684 <USB_WritePMA>
 800698c:	e15b      	b.n	8006c46 <USB_EPStartXfer+0x9aa>
 800698e:	46c0      	nop			; (mov r8, r8)
 8006990:	00000402 	.word	0x00000402
 8006994:	ffff83ff 	.word	0xffff83ff
 8006998:	ffff8000 	.word	0xffff8000
 800699c:	00000406 	.word	0x00000406
 80069a0:	ffff8e8f 	.word	0xffff8e8f
 80069a4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	1d7b      	adds	r3, r7, #5
 80069ae:	33ff      	adds	r3, #255	; 0xff
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	1ad2      	subs	r2, r2, r3
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069b8:	687a      	ldr	r2, [r7, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	781b      	ldrb	r3, [r3, #0]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	18d3      	adds	r3, r2, r3
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	001a      	movs	r2, r3
 80069c8:	2340      	movs	r3, #64	; 0x40
 80069ca:	4013      	ands	r3, r2
 80069cc:	d100      	bne.n	80069d0 <USB_EPStartXfer+0x734>
 80069ce:	e099      	b.n	8006b04 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	673b      	str	r3, [r7, #112]	; 0x70
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	785b      	ldrb	r3, [r3, #1]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d166      	bne.n	8006aaa <USB_EPStartXfer+0x80e>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	66bb      	str	r3, [r7, #104]	; 0x68
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2250      	movs	r2, #80	; 0x50
 80069e4:	5a9b      	ldrh	r3, [r3, r2]
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	001a      	movs	r2, r3
 80069ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ec:	189b      	adds	r3, r3, r2
 80069ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	00da      	lsls	r2, r3, #3
 80069f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069f8:	18d3      	adds	r3, r2, r3
 80069fa:	4ad0      	ldr	r2, [pc, #832]	; (8006d3c <USB_EPStartXfer+0xaa0>)
 80069fc:	4694      	mov	ip, r2
 80069fe:	4463      	add	r3, ip
 8006a00:	667b      	str	r3, [r7, #100]	; 0x64
 8006a02:	1d7b      	adds	r3, r7, #5
 8006a04:	33ff      	adds	r3, #255	; 0xff
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d110      	bne.n	8006a2e <USB_EPStartXfer+0x792>
 8006a0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	4acb      	ldr	r2, [pc, #812]	; (8006d40 <USB_EPStartXfer+0xaa4>)
 8006a14:	4013      	ands	r3, r2
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1a:	801a      	strh	r2, [r3, #0]
 8006a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	4ac8      	ldr	r2, [pc, #800]	; (8006d44 <USB_EPStartXfer+0xaa8>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a2a:	801a      	strh	r2, [r3, #0]
 8006a2c:	e058      	b.n	8006ae0 <USB_EPStartXfer+0x844>
 8006a2e:	1d7b      	adds	r3, r7, #5
 8006a30:	33ff      	adds	r3, #255	; 0xff
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b3e      	cmp	r3, #62	; 0x3e
 8006a36:	d81a      	bhi.n	8006a6e <USB_EPStartXfer+0x7d2>
 8006a38:	1d7b      	adds	r3, r7, #5
 8006a3a:	33ff      	adds	r3, #255	; 0xff
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	21f0      	movs	r1, #240	; 0xf0
 8006a42:	187a      	adds	r2, r7, r1
 8006a44:	6013      	str	r3, [r2, #0]
 8006a46:	1d7b      	adds	r3, r7, #5
 8006a48:	33ff      	adds	r3, #255	; 0xff
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	4013      	ands	r3, r2
 8006a50:	d004      	beq.n	8006a5c <USB_EPStartXfer+0x7c0>
 8006a52:	187b      	adds	r3, r7, r1
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3301      	adds	r3, #1
 8006a58:	187a      	adds	r2, r7, r1
 8006a5a:	6013      	str	r3, [r2, #0]
 8006a5c:	23f0      	movs	r3, #240	; 0xf0
 8006a5e:	18fb      	adds	r3, r7, r3
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	b29a      	uxth	r2, r3
 8006a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a6a:	801a      	strh	r2, [r3, #0]
 8006a6c:	e038      	b.n	8006ae0 <USB_EPStartXfer+0x844>
 8006a6e:	1d7b      	adds	r3, r7, #5
 8006a70:	33ff      	adds	r3, #255	; 0xff
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	21f0      	movs	r1, #240	; 0xf0
 8006a78:	187a      	adds	r2, r7, r1
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	1d7b      	adds	r3, r7, #5
 8006a7e:	33ff      	adds	r3, #255	; 0xff
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	221f      	movs	r2, #31
 8006a84:	4013      	ands	r3, r2
 8006a86:	d104      	bne.n	8006a92 <USB_EPStartXfer+0x7f6>
 8006a88:	187b      	adds	r3, r7, r1
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	187a      	adds	r2, r7, r1
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	23f0      	movs	r3, #240	; 0xf0
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	029b      	lsls	r3, r3, #10
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	4aa9      	ldr	r2, [pc, #676]	; (8006d44 <USB_EPStartXfer+0xaa8>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	e01a      	b.n	8006ae0 <USB_EPStartXfer+0x844>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	785b      	ldrb	r3, [r3, #1]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d116      	bne.n	8006ae0 <USB_EPStartXfer+0x844>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2250      	movs	r2, #80	; 0x50
 8006ab6:	5a9b      	ldrh	r3, [r3, r2]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	001a      	movs	r2, r3
 8006abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006abe:	189b      	adds	r3, r3, r2
 8006ac0:	673b      	str	r3, [r7, #112]	; 0x70
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	00da      	lsls	r2, r3, #3
 8006ac8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aca:	18d3      	adds	r3, r2, r3
 8006acc:	4a9b      	ldr	r2, [pc, #620]	; (8006d3c <USB_EPStartXfer+0xaa0>)
 8006ace:	4694      	mov	ip, r2
 8006ad0:	4463      	add	r3, ip
 8006ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ad4:	1d7b      	adds	r3, r7, #5
 8006ad6:	33ff      	adds	r3, #255	; 0xff
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ade:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ae0:	2076      	movs	r0, #118	; 0x76
 8006ae2:	183b      	adds	r3, r7, r0
 8006ae4:	683a      	ldr	r2, [r7, #0]
 8006ae6:	8952      	ldrh	r2, [r2, #10]
 8006ae8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	6959      	ldr	r1, [r3, #20]
 8006aee:	1d7b      	adds	r3, r7, #5
 8006af0:	33ff      	adds	r3, #255	; 0xff
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b29c      	uxth	r4, r3
 8006af6:	183b      	adds	r3, r7, r0
 8006af8:	881a      	ldrh	r2, [r3, #0]
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	0023      	movs	r3, r4
 8006afe:	f000 fdc1 	bl	8007684 <USB_WritePMA>
 8006b02:	e0a0      	b.n	8006c46 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d166      	bne.n	8006bda <USB_EPStartXfer+0x93e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2250      	movs	r2, #80	; 0x50
 8006b14:	5a9b      	ldrh	r3, [r3, r2]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	001a      	movs	r2, r3
 8006b1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b1c:	189b      	adds	r3, r3, r2
 8006b1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	00da      	lsls	r2, r3, #3
 8006b26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b28:	18d3      	adds	r3, r2, r3
 8006b2a:	4a87      	ldr	r2, [pc, #540]	; (8006d48 <USB_EPStartXfer+0xaac>)
 8006b2c:	4694      	mov	ip, r2
 8006b2e:	4463      	add	r3, ip
 8006b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b32:	1d7b      	adds	r3, r7, #5
 8006b34:	33ff      	adds	r3, #255	; 0xff
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d110      	bne.n	8006b5e <USB_EPStartXfer+0x8c2>
 8006b3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b3e:	881b      	ldrh	r3, [r3, #0]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	4a7f      	ldr	r2, [pc, #508]	; (8006d40 <USB_EPStartXfer+0xaa4>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	b29a      	uxth	r2, r3
 8006b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4e:	881b      	ldrh	r3, [r3, #0]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	4a7c      	ldr	r2, [pc, #496]	; (8006d44 <USB_EPStartXfer+0xaa8>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b5a:	801a      	strh	r2, [r3, #0]
 8006b5c:	e062      	b.n	8006c24 <USB_EPStartXfer+0x988>
 8006b5e:	1d7b      	adds	r3, r7, #5
 8006b60:	33ff      	adds	r3, #255	; 0xff
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2b3e      	cmp	r3, #62	; 0x3e
 8006b66:	d81a      	bhi.n	8006b9e <USB_EPStartXfer+0x902>
 8006b68:	1d7b      	adds	r3, r7, #5
 8006b6a:	33ff      	adds	r3, #255	; 0xff
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	085b      	lsrs	r3, r3, #1
 8006b70:	21ec      	movs	r1, #236	; 0xec
 8006b72:	187a      	adds	r2, r7, r1
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	1d7b      	adds	r3, r7, #5
 8006b78:	33ff      	adds	r3, #255	; 0xff
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d004      	beq.n	8006b8c <USB_EPStartXfer+0x8f0>
 8006b82:	187b      	adds	r3, r7, r1
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3301      	adds	r3, #1
 8006b88:	187a      	adds	r2, r7, r1
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	23ec      	movs	r3, #236	; 0xec
 8006b8e:	18fb      	adds	r3, r7, r3
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	029b      	lsls	r3, r3, #10
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e042      	b.n	8006c24 <USB_EPStartXfer+0x988>
 8006b9e:	1d7b      	adds	r3, r7, #5
 8006ba0:	33ff      	adds	r3, #255	; 0xff
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	21ec      	movs	r1, #236	; 0xec
 8006ba8:	187a      	adds	r2, r7, r1
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	1d7b      	adds	r3, r7, #5
 8006bae:	33ff      	adds	r3, #255	; 0xff
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	221f      	movs	r2, #31
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	d104      	bne.n	8006bc2 <USB_EPStartXfer+0x926>
 8006bb8:	187b      	adds	r3, r7, r1
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	187a      	adds	r2, r7, r1
 8006bc0:	6013      	str	r3, [r2, #0]
 8006bc2:	23ec      	movs	r3, #236	; 0xec
 8006bc4:	18fb      	adds	r3, r7, r3
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	029b      	lsls	r3, r3, #10
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	4a5d      	ldr	r2, [pc, #372]	; (8006d44 <USB_EPStartXfer+0xaa8>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bd6:	801a      	strh	r2, [r3, #0]
 8006bd8:	e024      	b.n	8006c24 <USB_EPStartXfer+0x988>
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	785b      	ldrb	r3, [r3, #1]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d120      	bne.n	8006c24 <USB_EPStartXfer+0x988>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2184      	movs	r1, #132	; 0x84
 8006be6:	187a      	adds	r2, r7, r1
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2250      	movs	r2, #80	; 0x50
 8006bee:	5a9b      	ldrh	r3, [r3, r2]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	001a      	movs	r2, r3
 8006bf4:	187b      	adds	r3, r7, r1
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	189b      	adds	r3, r3, r2
 8006bfa:	187a      	adds	r2, r7, r1
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	00da      	lsls	r2, r3, #3
 8006c04:	187b      	adds	r3, r7, r1
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	18d3      	adds	r3, r2, r3
 8006c0a:	4a4f      	ldr	r2, [pc, #316]	; (8006d48 <USB_EPStartXfer+0xaac>)
 8006c0c:	4694      	mov	ip, r2
 8006c0e:	4463      	add	r3, ip
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	187a      	adds	r2, r7, r1
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	1d7b      	adds	r3, r7, #5
 8006c18:	33ff      	adds	r3, #255	; 0xff
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	187b      	adds	r3, r7, r1
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c24:	2076      	movs	r0, #118	; 0x76
 8006c26:	183b      	adds	r3, r7, r0
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	8912      	ldrh	r2, [r2, #8]
 8006c2c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6959      	ldr	r1, [r3, #20]
 8006c32:	1d7b      	adds	r3, r7, #5
 8006c34:	33ff      	adds	r3, #255	; 0xff
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	b29c      	uxth	r4, r3
 8006c3a:	183b      	adds	r3, r7, r0
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	0023      	movs	r3, r4
 8006c42:	f000 fd1f 	bl	8007684 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	18d3      	adds	r3, r2, r3
 8006c50:	881b      	ldrh	r3, [r3, #0]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	200a      	movs	r0, #10
 8006c56:	183b      	adds	r3, r7, r0
 8006c58:	493c      	ldr	r1, [pc, #240]	; (8006d4c <USB_EPStartXfer+0xab0>)
 8006c5a:	400a      	ands	r2, r1
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	183b      	adds	r3, r7, r0
 8006c60:	183a      	adds	r2, r7, r0
 8006c62:	8812      	ldrh	r2, [r2, #0]
 8006c64:	2110      	movs	r1, #16
 8006c66:	404a      	eors	r2, r1
 8006c68:	801a      	strh	r2, [r3, #0]
 8006c6a:	183b      	adds	r3, r7, r0
 8006c6c:	183a      	adds	r2, r7, r0
 8006c6e:	8812      	ldrh	r2, [r2, #0]
 8006c70:	2120      	movs	r1, #32
 8006c72:	404a      	eors	r2, r1
 8006c74:	801a      	strh	r2, [r3, #0]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	18d3      	adds	r3, r2, r3
 8006c80:	183a      	adds	r2, r7, r0
 8006c82:	8812      	ldrh	r2, [r2, #0]
 8006c84:	4932      	ldr	r1, [pc, #200]	; (8006d50 <USB_EPStartXfer+0xab4>)
 8006c86:	430a      	orrs	r2, r1
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	801a      	strh	r2, [r3, #0]
 8006c8c:	f000 fbaf 	bl	80073ee <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	7b1b      	ldrb	r3, [r3, #12]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d000      	beq.n	8006c9a <USB_EPStartXfer+0x9fe>
 8006c98:	e09e      	b.n	8006dd8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d90d      	bls.n	8006cc2 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	1d7a      	adds	r2, r7, #5
 8006cac:	32ff      	adds	r2, #255	; 0xff
 8006cae:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	699a      	ldr	r2, [r3, #24]
 8006cb4:	1d7b      	adds	r3, r7, #5
 8006cb6:	33ff      	adds	r3, #255	; 0xff
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	1ad2      	subs	r2, r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	619a      	str	r2, [r3, #24]
 8006cc0:	e007      	b.n	8006cd2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	1d7a      	adds	r2, r7, #5
 8006cc8:	32ff      	adds	r2, #255	; 0xff
 8006cca:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2190      	movs	r1, #144	; 0x90
 8006cd6:	187a      	adds	r2, r7, r1
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2250      	movs	r2, #80	; 0x50
 8006cde:	5a9b      	ldrh	r3, [r3, r2]
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	187b      	adds	r3, r7, r1
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	189b      	adds	r3, r3, r2
 8006cea:	187a      	adds	r2, r7, r1
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	00da      	lsls	r2, r3, #3
 8006cf4:	187b      	adds	r3, r7, r1
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	18d3      	adds	r3, r2, r3
 8006cfa:	4a10      	ldr	r2, [pc, #64]	; (8006d3c <USB_EPStartXfer+0xaa0>)
 8006cfc:	4694      	mov	ip, r2
 8006cfe:	4463      	add	r3, ip
 8006d00:	218c      	movs	r1, #140	; 0x8c
 8006d02:	187a      	adds	r2, r7, r1
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	1d7b      	adds	r3, r7, #5
 8006d08:	33ff      	adds	r3, #255	; 0xff
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d121      	bne.n	8006d54 <USB_EPStartXfer+0xab8>
 8006d10:	187b      	adds	r3, r7, r1
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	4a09      	ldr	r2, [pc, #36]	; (8006d40 <USB_EPStartXfer+0xaa4>)
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	187b      	adds	r3, r7, r1
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	801a      	strh	r2, [r3, #0]
 8006d24:	187b      	adds	r3, r7, r1
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4a05      	ldr	r2, [pc, #20]	; (8006d44 <USB_EPStartXfer+0xaa8>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	187b      	adds	r3, r7, r1
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	801a      	strh	r2, [r3, #0]
 8006d38:	e334      	b.n	80073a4 <USB_EPStartXfer+0x1108>
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	00000406 	.word	0x00000406
 8006d40:	ffff83ff 	.word	0xffff83ff
 8006d44:	ffff8000 	.word	0xffff8000
 8006d48:	00000402 	.word	0x00000402
 8006d4c:	ffff8fbf 	.word	0xffff8fbf
 8006d50:	ffff8080 	.word	0xffff8080
 8006d54:	1d7b      	adds	r3, r7, #5
 8006d56:	33ff      	adds	r3, #255	; 0xff
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b3e      	cmp	r3, #62	; 0x3e
 8006d5c:	d81c      	bhi.n	8006d98 <USB_EPStartXfer+0xafc>
 8006d5e:	1d7b      	adds	r3, r7, #5
 8006d60:	33ff      	adds	r3, #255	; 0xff
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	085b      	lsrs	r3, r3, #1
 8006d66:	21e8      	movs	r1, #232	; 0xe8
 8006d68:	187a      	adds	r2, r7, r1
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	1d7b      	adds	r3, r7, #5
 8006d6e:	33ff      	adds	r3, #255	; 0xff
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2201      	movs	r2, #1
 8006d74:	4013      	ands	r3, r2
 8006d76:	d004      	beq.n	8006d82 <USB_EPStartXfer+0xae6>
 8006d78:	187b      	adds	r3, r7, r1
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	187a      	adds	r2, r7, r1
 8006d80:	6013      	str	r3, [r2, #0]
 8006d82:	23e8      	movs	r3, #232	; 0xe8
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	029b      	lsls	r3, r3, #10
 8006d8c:	b29a      	uxth	r2, r3
 8006d8e:	238c      	movs	r3, #140	; 0x8c
 8006d90:	18fb      	adds	r3, r7, r3
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	801a      	strh	r2, [r3, #0]
 8006d96:	e305      	b.n	80073a4 <USB_EPStartXfer+0x1108>
 8006d98:	1d7b      	adds	r3, r7, #5
 8006d9a:	33ff      	adds	r3, #255	; 0xff
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	21e8      	movs	r1, #232	; 0xe8
 8006da2:	187a      	adds	r2, r7, r1
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	1d7b      	adds	r3, r7, #5
 8006da8:	33ff      	adds	r3, #255	; 0xff
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	221f      	movs	r2, #31
 8006dae:	4013      	ands	r3, r2
 8006db0:	d104      	bne.n	8006dbc <USB_EPStartXfer+0xb20>
 8006db2:	187b      	adds	r3, r7, r1
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	187a      	adds	r2, r7, r1
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	23e8      	movs	r3, #232	; 0xe8
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	b29b      	uxth	r3, r3
 8006dc4:	029b      	lsls	r3, r3, #10
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	4aca      	ldr	r2, [pc, #808]	; (80070f4 <USB_EPStartXfer+0xe58>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	238c      	movs	r3, #140	; 0x8c
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	e2e5      	b.n	80073a4 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	78db      	ldrb	r3, [r3, #3]
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d000      	beq.n	8006de2 <USB_EPStartXfer+0xb46>
 8006de0:	e16f      	b.n	80070c2 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d16f      	bne.n	8006eca <USB_EPStartXfer+0xc2e>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	21ac      	movs	r1, #172	; 0xac
 8006dee:	187a      	adds	r2, r7, r1
 8006df0:	6013      	str	r3, [r2, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2250      	movs	r2, #80	; 0x50
 8006df6:	5a9b      	ldrh	r3, [r3, r2]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	001a      	movs	r2, r3
 8006dfc:	187b      	adds	r3, r7, r1
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	189b      	adds	r3, r3, r2
 8006e02:	187a      	adds	r2, r7, r1
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	00da      	lsls	r2, r3, #3
 8006e0c:	187b      	adds	r3, r7, r1
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	18d3      	adds	r3, r2, r3
 8006e12:	4ab9      	ldr	r2, [pc, #740]	; (80070f8 <USB_EPStartXfer+0xe5c>)
 8006e14:	4694      	mov	ip, r2
 8006e16:	4463      	add	r3, ip
 8006e18:	21a8      	movs	r1, #168	; 0xa8
 8006e1a:	187a      	adds	r2, r7, r1
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d114      	bne.n	8006e50 <USB_EPStartXfer+0xbb4>
 8006e26:	187b      	adds	r3, r7, r1
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	4ab3      	ldr	r2, [pc, #716]	; (80070fc <USB_EPStartXfer+0xe60>)
 8006e30:	4013      	ands	r3, r2
 8006e32:	b29a      	uxth	r2, r3
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	187b      	adds	r3, r7, r1
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	4aac      	ldr	r2, [pc, #688]	; (80070f4 <USB_EPStartXfer+0xe58>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	187b      	adds	r3, r7, r1
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	e060      	b.n	8006f12 <USB_EPStartXfer+0xc76>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	2b3e      	cmp	r3, #62	; 0x3e
 8006e56:	d81a      	bhi.n	8006e8e <USB_EPStartXfer+0xbf2>
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	21e4      	movs	r1, #228	; 0xe4
 8006e60:	187a      	adds	r2, r7, r1
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d004      	beq.n	8006e78 <USB_EPStartXfer+0xbdc>
 8006e6e:	187b      	adds	r3, r7, r1
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3301      	adds	r3, #1
 8006e74:	187a      	adds	r2, r7, r1
 8006e76:	6013      	str	r3, [r2, #0]
 8006e78:	23e4      	movs	r3, #228	; 0xe4
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	029b      	lsls	r3, r3, #10
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	23a8      	movs	r3, #168	; 0xa8
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	801a      	strh	r2, [r3, #0]
 8006e8c:	e041      	b.n	8006f12 <USB_EPStartXfer+0xc76>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	691b      	ldr	r3, [r3, #16]
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	21e4      	movs	r1, #228	; 0xe4
 8006e96:	187a      	adds	r2, r7, r1
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	221f      	movs	r2, #31
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	d104      	bne.n	8006eae <USB_EPStartXfer+0xc12>
 8006ea4:	187b      	adds	r3, r7, r1
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	187a      	adds	r2, r7, r1
 8006eac:	6013      	str	r3, [r2, #0]
 8006eae:	23e4      	movs	r3, #228	; 0xe4
 8006eb0:	18fb      	adds	r3, r7, r3
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	029b      	lsls	r3, r3, #10
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4a8e      	ldr	r2, [pc, #568]	; (80070f4 <USB_EPStartXfer+0xe58>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	b29a      	uxth	r2, r3
 8006ec0:	23a8      	movs	r3, #168	; 0xa8
 8006ec2:	18fb      	adds	r3, r7, r3
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	801a      	strh	r2, [r3, #0]
 8006ec8:	e023      	b.n	8006f12 <USB_EPStartXfer+0xc76>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	785b      	ldrb	r3, [r3, #1]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d11f      	bne.n	8006f12 <USB_EPStartXfer+0xc76>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	21b4      	movs	r1, #180	; 0xb4
 8006ed6:	187a      	adds	r2, r7, r1
 8006ed8:	6013      	str	r3, [r2, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2250      	movs	r2, #80	; 0x50
 8006ede:	5a9b      	ldrh	r3, [r3, r2]
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	001a      	movs	r2, r3
 8006ee4:	187b      	adds	r3, r7, r1
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	187a      	adds	r2, r7, r1
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	00da      	lsls	r2, r3, #3
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	18d3      	adds	r3, r2, r3
 8006efa:	4a7f      	ldr	r2, [pc, #508]	; (80070f8 <USB_EPStartXfer+0xe5c>)
 8006efc:	4694      	mov	ip, r2
 8006efe:	4463      	add	r3, ip
 8006f00:	21b0      	movs	r1, #176	; 0xb0
 8006f02:	187a      	adds	r2, r7, r1
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	187b      	adds	r3, r7, r1
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	801a      	strh	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	22a4      	movs	r2, #164	; 0xa4
 8006f16:	18ba      	adds	r2, r7, r2
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d16f      	bne.n	8007002 <USB_EPStartXfer+0xd66>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	219c      	movs	r1, #156	; 0x9c
 8006f26:	187a      	adds	r2, r7, r1
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2250      	movs	r2, #80	; 0x50
 8006f2e:	5a9b      	ldrh	r3, [r3, r2]
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	001a      	movs	r2, r3
 8006f34:	187b      	adds	r3, r7, r1
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	189b      	adds	r3, r3, r2
 8006f3a:	187a      	adds	r2, r7, r1
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	00da      	lsls	r2, r3, #3
 8006f44:	187b      	adds	r3, r7, r1
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	18d3      	adds	r3, r2, r3
 8006f4a:	4a6d      	ldr	r2, [pc, #436]	; (8007100 <USB_EPStartXfer+0xe64>)
 8006f4c:	4694      	mov	ip, r2
 8006f4e:	4463      	add	r3, ip
 8006f50:	2198      	movs	r1, #152	; 0x98
 8006f52:	187a      	adds	r2, r7, r1
 8006f54:	6013      	str	r3, [r2, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d114      	bne.n	8006f88 <USB_EPStartXfer+0xcec>
 8006f5e:	187b      	adds	r3, r7, r1
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	881b      	ldrh	r3, [r3, #0]
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	4a65      	ldr	r2, [pc, #404]	; (80070fc <USB_EPStartXfer+0xe60>)
 8006f68:	4013      	ands	r3, r2
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	187b      	adds	r3, r7, r1
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	187b      	adds	r3, r7, r1
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	881b      	ldrh	r3, [r3, #0]
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	4a5e      	ldr	r2, [pc, #376]	; (80070f4 <USB_EPStartXfer+0xe58>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	187b      	adds	r3, r7, r1
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	801a      	strh	r2, [r3, #0]
 8006f86:	e05d      	b.n	8007044 <USB_EPStartXfer+0xda8>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	691b      	ldr	r3, [r3, #16]
 8006f8c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f8e:	d81a      	bhi.n	8006fc6 <USB_EPStartXfer+0xd2a>
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	21e0      	movs	r1, #224	; 0xe0
 8006f98:	187a      	adds	r2, r7, r1
 8006f9a:	6013      	str	r3, [r2, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	d004      	beq.n	8006fb0 <USB_EPStartXfer+0xd14>
 8006fa6:	187b      	adds	r3, r7, r1
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	187a      	adds	r2, r7, r1
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	23e0      	movs	r3, #224	; 0xe0
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	029b      	lsls	r3, r3, #10
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	2398      	movs	r3, #152	; 0x98
 8006fbe:	18fb      	adds	r3, r7, r3
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	801a      	strh	r2, [r3, #0]
 8006fc4:	e03e      	b.n	8007044 <USB_EPStartXfer+0xda8>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	21e0      	movs	r1, #224	; 0xe0
 8006fce:	187a      	adds	r2, r7, r1
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	221f      	movs	r2, #31
 8006fd8:	4013      	ands	r3, r2
 8006fda:	d104      	bne.n	8006fe6 <USB_EPStartXfer+0xd4a>
 8006fdc:	187b      	adds	r3, r7, r1
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	187a      	adds	r2, r7, r1
 8006fe4:	6013      	str	r3, [r2, #0]
 8006fe6:	23e0      	movs	r3, #224	; 0xe0
 8006fe8:	18fb      	adds	r3, r7, r3
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	029b      	lsls	r3, r3, #10
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	4a40      	ldr	r2, [pc, #256]	; (80070f4 <USB_EPStartXfer+0xe58>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	2398      	movs	r3, #152	; 0x98
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e020      	b.n	8007044 <USB_EPStartXfer+0xda8>
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d11c      	bne.n	8007044 <USB_EPStartXfer+0xda8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2250      	movs	r2, #80	; 0x50
 800700e:	5a9b      	ldrh	r3, [r3, r2]
 8007010:	b29b      	uxth	r3, r3
 8007012:	001a      	movs	r2, r3
 8007014:	21a4      	movs	r1, #164	; 0xa4
 8007016:	187b      	adds	r3, r7, r1
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	189b      	adds	r3, r3, r2
 800701c:	187a      	adds	r2, r7, r1
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	00da      	lsls	r2, r3, #3
 8007026:	187b      	adds	r3, r7, r1
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	18d3      	adds	r3, r2, r3
 800702c:	4a34      	ldr	r2, [pc, #208]	; (8007100 <USB_EPStartXfer+0xe64>)
 800702e:	4694      	mov	ip, r2
 8007030:	4463      	add	r3, ip
 8007032:	21a0      	movs	r1, #160	; 0xa0
 8007034:	187a      	adds	r2, r7, r1
 8007036:	6013      	str	r3, [r2, #0]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	b29a      	uxth	r2, r3
 800703e:	187b      	adds	r3, r7, r1
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d100      	bne.n	800704e <USB_EPStartXfer+0xdb2>
 800704c:	e1aa      	b.n	80073a4 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	18d2      	adds	r2, r2, r3
 8007058:	2196      	movs	r1, #150	; 0x96
 800705a:	187b      	adds	r3, r7, r1
 800705c:	8812      	ldrh	r2, [r2, #0]
 800705e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007060:	187b      	adds	r3, r7, r1
 8007062:	881a      	ldrh	r2, [r3, #0]
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	01db      	lsls	r3, r3, #7
 8007068:	4013      	ands	r3, r2
 800706a:	d004      	beq.n	8007076 <USB_EPStartXfer+0xdda>
 800706c:	187b      	adds	r3, r7, r1
 800706e:	881b      	ldrh	r3, [r3, #0]
 8007070:	2240      	movs	r2, #64	; 0x40
 8007072:	4013      	ands	r3, r2
 8007074:	d10d      	bne.n	8007092 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007076:	2196      	movs	r1, #150	; 0x96
 8007078:	187b      	adds	r3, r7, r1
 800707a:	881a      	ldrh	r2, [r3, #0]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	01db      	lsls	r3, r3, #7
 8007080:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007082:	d000      	beq.n	8007086 <USB_EPStartXfer+0xdea>
 8007084:	e18e      	b.n	80073a4 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007086:	187b      	adds	r3, r7, r1
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	2240      	movs	r2, #64	; 0x40
 800708c:	4013      	ands	r3, r2
 800708e:	d000      	beq.n	8007092 <USB_EPStartXfer+0xdf6>
 8007090:	e188      	b.n	80073a4 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	18d3      	adds	r3, r2, r3
 800709c:	881b      	ldrh	r3, [r3, #0]
 800709e:	b29a      	uxth	r2, r3
 80070a0:	2094      	movs	r0, #148	; 0x94
 80070a2:	183b      	adds	r3, r7, r0
 80070a4:	4917      	ldr	r1, [pc, #92]	; (8007104 <USB_EPStartXfer+0xe68>)
 80070a6:	400a      	ands	r2, r1
 80070a8:	801a      	strh	r2, [r3, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	781b      	ldrb	r3, [r3, #0]
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	18d3      	adds	r3, r2, r3
 80070b4:	183a      	adds	r2, r7, r0
 80070b6:	8812      	ldrh	r2, [r2, #0]
 80070b8:	4913      	ldr	r1, [pc, #76]	; (8007108 <USB_EPStartXfer+0xe6c>)
 80070ba:	430a      	orrs	r2, r1
 80070bc:	b292      	uxth	r2, r2
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e170      	b.n	80073a4 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	78db      	ldrb	r3, [r3, #3]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d000      	beq.n	80070cc <USB_EPStartXfer+0xe30>
 80070ca:	e169      	b.n	80073a0 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	699a      	ldr	r2, [r3, #24]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d919      	bls.n	800710c <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	1d7a      	adds	r2, r7, #5
 80070de:	32ff      	adds	r2, #255	; 0xff
 80070e0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	1d7b      	adds	r3, r7, #5
 80070e8:	33ff      	adds	r3, #255	; 0xff
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	1ad2      	subs	r2, r2, r3
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	619a      	str	r2, [r3, #24]
 80070f2:	e013      	b.n	800711c <USB_EPStartXfer+0xe80>
 80070f4:	ffff8000 	.word	0xffff8000
 80070f8:	00000402 	.word	0x00000402
 80070fc:	ffff83ff 	.word	0xffff83ff
 8007100:	00000406 	.word	0x00000406
 8007104:	ffff8f8f 	.word	0xffff8f8f
 8007108:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	699b      	ldr	r3, [r3, #24]
 8007110:	1d7a      	adds	r2, r7, #5
 8007112:	32ff      	adds	r2, #255	; 0xff
 8007114:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	2200      	movs	r2, #0
 800711a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	785b      	ldrb	r3, [r3, #1]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d000      	beq.n	8007126 <USB_EPStartXfer+0xe8a>
 8007124:	e075      	b.n	8007212 <USB_EPStartXfer+0xf76>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	21cc      	movs	r1, #204	; 0xcc
 800712a:	187a      	adds	r2, r7, r1
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2250      	movs	r2, #80	; 0x50
 8007132:	5a9b      	ldrh	r3, [r3, r2]
 8007134:	b29b      	uxth	r3, r3
 8007136:	001a      	movs	r2, r3
 8007138:	187b      	adds	r3, r7, r1
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	189b      	adds	r3, r3, r2
 800713e:	187a      	adds	r2, r7, r1
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	187b      	adds	r3, r7, r1
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	18d3      	adds	r3, r2, r3
 800714e:	4aaa      	ldr	r2, [pc, #680]	; (80073f8 <USB_EPStartXfer+0x115c>)
 8007150:	4694      	mov	ip, r2
 8007152:	4463      	add	r3, ip
 8007154:	21c8      	movs	r1, #200	; 0xc8
 8007156:	187a      	adds	r2, r7, r1
 8007158:	6013      	str	r3, [r2, #0]
 800715a:	1d7b      	adds	r3, r7, #5
 800715c:	33ff      	adds	r3, #255	; 0xff
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d114      	bne.n	800718e <USB_EPStartXfer+0xef2>
 8007164:	187b      	adds	r3, r7, r1
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	b29b      	uxth	r3, r3
 800716c:	4aa3      	ldr	r2, [pc, #652]	; (80073fc <USB_EPStartXfer+0x1160>)
 800716e:	4013      	ands	r3, r2
 8007170:	b29a      	uxth	r2, r3
 8007172:	187b      	adds	r3, r7, r1
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	801a      	strh	r2, [r3, #0]
 8007178:	187b      	adds	r3, r7, r1
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	881b      	ldrh	r3, [r3, #0]
 800717e:	b29b      	uxth	r3, r3
 8007180:	4a9f      	ldr	r2, [pc, #636]	; (8007400 <USB_EPStartXfer+0x1164>)
 8007182:	4313      	orrs	r3, r2
 8007184:	b29a      	uxth	r2, r3
 8007186:	187b      	adds	r3, r7, r1
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	801a      	strh	r2, [r3, #0]
 800718c:	e066      	b.n	800725c <USB_EPStartXfer+0xfc0>
 800718e:	1d7b      	adds	r3, r7, #5
 8007190:	33ff      	adds	r3, #255	; 0xff
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b3e      	cmp	r3, #62	; 0x3e
 8007196:	d81c      	bhi.n	80071d2 <USB_EPStartXfer+0xf36>
 8007198:	1d7b      	adds	r3, r7, #5
 800719a:	33ff      	adds	r3, #255	; 0xff
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	21dc      	movs	r1, #220	; 0xdc
 80071a2:	187a      	adds	r2, r7, r1
 80071a4:	6013      	str	r3, [r2, #0]
 80071a6:	1d7b      	adds	r3, r7, #5
 80071a8:	33ff      	adds	r3, #255	; 0xff
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2201      	movs	r2, #1
 80071ae:	4013      	ands	r3, r2
 80071b0:	d004      	beq.n	80071bc <USB_EPStartXfer+0xf20>
 80071b2:	187b      	adds	r3, r7, r1
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	187a      	adds	r2, r7, r1
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	23dc      	movs	r3, #220	; 0xdc
 80071be:	18fb      	adds	r3, r7, r3
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	029b      	lsls	r3, r3, #10
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	23c8      	movs	r3, #200	; 0xc8
 80071ca:	18fb      	adds	r3, r7, r3
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	e044      	b.n	800725c <USB_EPStartXfer+0xfc0>
 80071d2:	1d7b      	adds	r3, r7, #5
 80071d4:	33ff      	adds	r3, #255	; 0xff
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	095b      	lsrs	r3, r3, #5
 80071da:	21dc      	movs	r1, #220	; 0xdc
 80071dc:	187a      	adds	r2, r7, r1
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	1d7b      	adds	r3, r7, #5
 80071e2:	33ff      	adds	r3, #255	; 0xff
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	221f      	movs	r2, #31
 80071e8:	4013      	ands	r3, r2
 80071ea:	d104      	bne.n	80071f6 <USB_EPStartXfer+0xf5a>
 80071ec:	187b      	adds	r3, r7, r1
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3b01      	subs	r3, #1
 80071f2:	187a      	adds	r2, r7, r1
 80071f4:	6013      	str	r3, [r2, #0]
 80071f6:	23dc      	movs	r3, #220	; 0xdc
 80071f8:	18fb      	adds	r3, r7, r3
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	029b      	lsls	r3, r3, #10
 8007200:	b29b      	uxth	r3, r3
 8007202:	4a7f      	ldr	r2, [pc, #508]	; (8007400 <USB_EPStartXfer+0x1164>)
 8007204:	4313      	orrs	r3, r2
 8007206:	b29a      	uxth	r2, r3
 8007208:	23c8      	movs	r3, #200	; 0xc8
 800720a:	18fb      	adds	r3, r7, r3
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	801a      	strh	r2, [r3, #0]
 8007210:	e024      	b.n	800725c <USB_EPStartXfer+0xfc0>
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	785b      	ldrb	r3, [r3, #1]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d120      	bne.n	800725c <USB_EPStartXfer+0xfc0>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	21d4      	movs	r1, #212	; 0xd4
 800721e:	187a      	adds	r2, r7, r1
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2250      	movs	r2, #80	; 0x50
 8007226:	5a9b      	ldrh	r3, [r3, r2]
 8007228:	b29b      	uxth	r3, r3
 800722a:	001a      	movs	r2, r3
 800722c:	187b      	adds	r3, r7, r1
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	189b      	adds	r3, r3, r2
 8007232:	187a      	adds	r2, r7, r1
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	00da      	lsls	r2, r3, #3
 800723c:	187b      	adds	r3, r7, r1
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	18d3      	adds	r3, r2, r3
 8007242:	4a6d      	ldr	r2, [pc, #436]	; (80073f8 <USB_EPStartXfer+0x115c>)
 8007244:	4694      	mov	ip, r2
 8007246:	4463      	add	r3, ip
 8007248:	21d0      	movs	r1, #208	; 0xd0
 800724a:	187a      	adds	r2, r7, r1
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	1d7b      	adds	r3, r7, #5
 8007250:	33ff      	adds	r3, #255	; 0xff
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	b29a      	uxth	r2, r3
 8007256:	187b      	adds	r3, r7, r1
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	801a      	strh	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	22c4      	movs	r2, #196	; 0xc4
 8007260:	18ba      	adds	r2, r7, r2
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d000      	beq.n	800726e <USB_EPStartXfer+0xfd2>
 800726c:	e075      	b.n	800735a <USB_EPStartXfer+0x10be>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	21bc      	movs	r1, #188	; 0xbc
 8007272:	187a      	adds	r2, r7, r1
 8007274:	6013      	str	r3, [r2, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2250      	movs	r2, #80	; 0x50
 800727a:	5a9b      	ldrh	r3, [r3, r2]
 800727c:	b29b      	uxth	r3, r3
 800727e:	001a      	movs	r2, r3
 8007280:	187b      	adds	r3, r7, r1
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	189b      	adds	r3, r3, r2
 8007286:	187a      	adds	r2, r7, r1
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	00da      	lsls	r2, r3, #3
 8007290:	187b      	adds	r3, r7, r1
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	18d3      	adds	r3, r2, r3
 8007296:	4a5b      	ldr	r2, [pc, #364]	; (8007404 <USB_EPStartXfer+0x1168>)
 8007298:	4694      	mov	ip, r2
 800729a:	4463      	add	r3, ip
 800729c:	21b8      	movs	r1, #184	; 0xb8
 800729e:	187a      	adds	r2, r7, r1
 80072a0:	6013      	str	r3, [r2, #0]
 80072a2:	1d7b      	adds	r3, r7, #5
 80072a4:	33ff      	adds	r3, #255	; 0xff
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d114      	bne.n	80072d6 <USB_EPStartXfer+0x103a>
 80072ac:	187b      	adds	r3, r7, r1
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	4a51      	ldr	r2, [pc, #324]	; (80073fc <USB_EPStartXfer+0x1160>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	187b      	adds	r3, r7, r1
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	801a      	strh	r2, [r3, #0]
 80072c0:	187b      	adds	r3, r7, r1
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	4a4d      	ldr	r2, [pc, #308]	; (8007400 <USB_EPStartXfer+0x1164>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	187b      	adds	r3, r7, r1
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e066      	b.n	80073a4 <USB_EPStartXfer+0x1108>
 80072d6:	1d7b      	adds	r3, r7, #5
 80072d8:	33ff      	adds	r3, #255	; 0xff
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b3e      	cmp	r3, #62	; 0x3e
 80072de:	d81c      	bhi.n	800731a <USB_EPStartXfer+0x107e>
 80072e0:	1d7b      	adds	r3, r7, #5
 80072e2:	33ff      	adds	r3, #255	; 0xff
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	21d8      	movs	r1, #216	; 0xd8
 80072ea:	187a      	adds	r2, r7, r1
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	1d7b      	adds	r3, r7, #5
 80072f0:	33ff      	adds	r3, #255	; 0xff
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2201      	movs	r2, #1
 80072f6:	4013      	ands	r3, r2
 80072f8:	d004      	beq.n	8007304 <USB_EPStartXfer+0x1068>
 80072fa:	187b      	adds	r3, r7, r1
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	3301      	adds	r3, #1
 8007300:	187a      	adds	r2, r7, r1
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	23d8      	movs	r3, #216	; 0xd8
 8007306:	18fb      	adds	r3, r7, r3
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	b29b      	uxth	r3, r3
 800730c:	029b      	lsls	r3, r3, #10
 800730e:	b29a      	uxth	r2, r3
 8007310:	23b8      	movs	r3, #184	; 0xb8
 8007312:	18fb      	adds	r3, r7, r3
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	801a      	strh	r2, [r3, #0]
 8007318:	e044      	b.n	80073a4 <USB_EPStartXfer+0x1108>
 800731a:	1d7b      	adds	r3, r7, #5
 800731c:	33ff      	adds	r3, #255	; 0xff
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	21d8      	movs	r1, #216	; 0xd8
 8007324:	187a      	adds	r2, r7, r1
 8007326:	6013      	str	r3, [r2, #0]
 8007328:	1d7b      	adds	r3, r7, #5
 800732a:	33ff      	adds	r3, #255	; 0xff
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	221f      	movs	r2, #31
 8007330:	4013      	ands	r3, r2
 8007332:	d104      	bne.n	800733e <USB_EPStartXfer+0x10a2>
 8007334:	187b      	adds	r3, r7, r1
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3b01      	subs	r3, #1
 800733a:	187a      	adds	r2, r7, r1
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	23d8      	movs	r3, #216	; 0xd8
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	029b      	lsls	r3, r3, #10
 8007348:	b29b      	uxth	r3, r3
 800734a:	4a2d      	ldr	r2, [pc, #180]	; (8007400 <USB_EPStartXfer+0x1164>)
 800734c:	4313      	orrs	r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	23b8      	movs	r3, #184	; 0xb8
 8007352:	18fb      	adds	r3, r7, r3
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	801a      	strh	r2, [r3, #0]
 8007358:	e024      	b.n	80073a4 <USB_EPStartXfer+0x1108>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	785b      	ldrb	r3, [r3, #1]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d120      	bne.n	80073a4 <USB_EPStartXfer+0x1108>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2250      	movs	r2, #80	; 0x50
 8007366:	5a9b      	ldrh	r3, [r3, r2]
 8007368:	b29b      	uxth	r3, r3
 800736a:	001a      	movs	r2, r3
 800736c:	21c4      	movs	r1, #196	; 0xc4
 800736e:	187b      	adds	r3, r7, r1
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	189b      	adds	r3, r3, r2
 8007374:	187a      	adds	r2, r7, r1
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	00da      	lsls	r2, r3, #3
 800737e:	187b      	adds	r3, r7, r1
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	18d3      	adds	r3, r2, r3
 8007384:	4a1f      	ldr	r2, [pc, #124]	; (8007404 <USB_EPStartXfer+0x1168>)
 8007386:	4694      	mov	ip, r2
 8007388:	4463      	add	r3, ip
 800738a:	21c0      	movs	r1, #192	; 0xc0
 800738c:	187a      	adds	r2, r7, r1
 800738e:	6013      	str	r3, [r2, #0]
 8007390:	1d7b      	adds	r3, r7, #5
 8007392:	33ff      	adds	r3, #255	; 0xff
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	b29a      	uxth	r2, r3
 8007398:	187b      	adds	r3, r7, r1
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	801a      	strh	r2, [r3, #0]
 800739e:	e001      	b.n	80073a4 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	e025      	b.n	80073f0 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	18d3      	adds	r3, r2, r3
 80073ae:	881b      	ldrh	r3, [r3, #0]
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	208a      	movs	r0, #138	; 0x8a
 80073b4:	183b      	adds	r3, r7, r0
 80073b6:	4914      	ldr	r1, [pc, #80]	; (8007408 <USB_EPStartXfer+0x116c>)
 80073b8:	400a      	ands	r2, r1
 80073ba:	801a      	strh	r2, [r3, #0]
 80073bc:	183b      	adds	r3, r7, r0
 80073be:	183a      	adds	r2, r7, r0
 80073c0:	8812      	ldrh	r2, [r2, #0]
 80073c2:	2180      	movs	r1, #128	; 0x80
 80073c4:	0149      	lsls	r1, r1, #5
 80073c6:	404a      	eors	r2, r1
 80073c8:	801a      	strh	r2, [r3, #0]
 80073ca:	183b      	adds	r3, r7, r0
 80073cc:	183a      	adds	r2, r7, r0
 80073ce:	8812      	ldrh	r2, [r2, #0]
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	0189      	lsls	r1, r1, #6
 80073d4:	404a      	eors	r2, r1
 80073d6:	801a      	strh	r2, [r3, #0]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	18d3      	adds	r3, r2, r3
 80073e2:	183a      	adds	r2, r7, r0
 80073e4:	8812      	ldrh	r2, [r2, #0]
 80073e6:	4909      	ldr	r1, [pc, #36]	; (800740c <USB_EPStartXfer+0x1170>)
 80073e8:	430a      	orrs	r2, r1
 80073ea:	b292      	uxth	r2, r2
 80073ec:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	0018      	movs	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	b043      	add	sp, #268	; 0x10c
 80073f6:	bd90      	pop	{r4, r7, pc}
 80073f8:	00000402 	.word	0x00000402
 80073fc:	ffff83ff 	.word	0xffff83ff
 8007400:	ffff8000 	.word	0xffff8000
 8007404:	00000406 	.word	0x00000406
 8007408:	ffffbf8f 	.word	0xffffbf8f
 800740c:	ffff8080 	.word	0xffff8080

08007410 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	785b      	ldrb	r3, [r3, #1]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d01d      	beq.n	800745e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	18d3      	adds	r3, r2, r3
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	b29a      	uxth	r2, r3
 8007430:	200c      	movs	r0, #12
 8007432:	183b      	adds	r3, r7, r0
 8007434:	491b      	ldr	r1, [pc, #108]	; (80074a4 <USB_EPSetStall+0x94>)
 8007436:	400a      	ands	r2, r1
 8007438:	801a      	strh	r2, [r3, #0]
 800743a:	183b      	adds	r3, r7, r0
 800743c:	183a      	adds	r2, r7, r0
 800743e:	8812      	ldrh	r2, [r2, #0]
 8007440:	2110      	movs	r1, #16
 8007442:	404a      	eors	r2, r1
 8007444:	801a      	strh	r2, [r3, #0]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	18d3      	adds	r3, r2, r3
 8007450:	183a      	adds	r2, r7, r0
 8007452:	8812      	ldrh	r2, [r2, #0]
 8007454:	4914      	ldr	r1, [pc, #80]	; (80074a8 <USB_EPSetStall+0x98>)
 8007456:	430a      	orrs	r2, r1
 8007458:	b292      	uxth	r2, r2
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	e01d      	b.n	800749a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	18d3      	adds	r3, r2, r3
 8007468:	881b      	ldrh	r3, [r3, #0]
 800746a:	b29a      	uxth	r2, r3
 800746c:	200e      	movs	r0, #14
 800746e:	183b      	adds	r3, r7, r0
 8007470:	490e      	ldr	r1, [pc, #56]	; (80074ac <USB_EPSetStall+0x9c>)
 8007472:	400a      	ands	r2, r1
 8007474:	801a      	strh	r2, [r3, #0]
 8007476:	183b      	adds	r3, r7, r0
 8007478:	183a      	adds	r2, r7, r0
 800747a:	8812      	ldrh	r2, [r2, #0]
 800747c:	2180      	movs	r1, #128	; 0x80
 800747e:	0149      	lsls	r1, r1, #5
 8007480:	404a      	eors	r2, r1
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	18d3      	adds	r3, r2, r3
 800748e:	183a      	adds	r2, r7, r0
 8007490:	8812      	ldrh	r2, [r2, #0]
 8007492:	4905      	ldr	r1, [pc, #20]	; (80074a8 <USB_EPSetStall+0x98>)
 8007494:	430a      	orrs	r2, r1
 8007496:	b292      	uxth	r2, r2
 8007498:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	0018      	movs	r0, r3
 800749e:	46bd      	mov	sp, r7
 80074a0:	b004      	add	sp, #16
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	ffff8fbf 	.word	0xffff8fbf
 80074a8:	ffff8080 	.word	0xffff8080
 80074ac:	ffffbf8f 	.word	0xffffbf8f

080074b0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	7b1b      	ldrb	r3, [r3, #12]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d000      	beq.n	80074c4 <USB_EPClearStall+0x14>
 80074c2:	e095      	b.n	80075f0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d046      	beq.n	800755a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	18d2      	adds	r2, r2, r3
 80074d6:	2110      	movs	r1, #16
 80074d8:	187b      	adds	r3, r7, r1
 80074da:	8812      	ldrh	r2, [r2, #0]
 80074dc:	801a      	strh	r2, [r3, #0]
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	881b      	ldrh	r3, [r3, #0]
 80074e2:	2240      	movs	r2, #64	; 0x40
 80074e4:	4013      	ands	r3, r2
 80074e6:	d016      	beq.n	8007516 <USB_EPClearStall+0x66>
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	18d3      	adds	r3, r2, r3
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	200e      	movs	r0, #14
 80074f8:	183b      	adds	r3, r7, r0
 80074fa:	4940      	ldr	r1, [pc, #256]	; (80075fc <USB_EPClearStall+0x14c>)
 80074fc:	400a      	ands	r2, r1
 80074fe:	801a      	strh	r2, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	18d3      	adds	r3, r2, r3
 800750a:	183a      	adds	r2, r7, r0
 800750c:	8812      	ldrh	r2, [r2, #0]
 800750e:	493c      	ldr	r1, [pc, #240]	; (8007600 <USB_EPClearStall+0x150>)
 8007510:	430a      	orrs	r2, r1
 8007512:	b292      	uxth	r2, r2
 8007514:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	78db      	ldrb	r3, [r3, #3]
 800751a:	2b01      	cmp	r3, #1
 800751c:	d068      	beq.n	80075f0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	18d3      	adds	r3, r2, r3
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	b29a      	uxth	r2, r3
 800752c:	200c      	movs	r0, #12
 800752e:	183b      	adds	r3, r7, r0
 8007530:	4934      	ldr	r1, [pc, #208]	; (8007604 <USB_EPClearStall+0x154>)
 8007532:	400a      	ands	r2, r1
 8007534:	801a      	strh	r2, [r3, #0]
 8007536:	183b      	adds	r3, r7, r0
 8007538:	183a      	adds	r2, r7, r0
 800753a:	8812      	ldrh	r2, [r2, #0]
 800753c:	2120      	movs	r1, #32
 800753e:	404a      	eors	r2, r1
 8007540:	801a      	strh	r2, [r3, #0]
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	18d3      	adds	r3, r2, r3
 800754c:	183a      	adds	r2, r7, r0
 800754e:	8812      	ldrh	r2, [r2, #0]
 8007550:	492d      	ldr	r1, [pc, #180]	; (8007608 <USB_EPClearStall+0x158>)
 8007552:	430a      	orrs	r2, r1
 8007554:	b292      	uxth	r2, r2
 8007556:	801a      	strh	r2, [r3, #0]
 8007558:	e04a      	b.n	80075f0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	18d2      	adds	r2, r2, r3
 8007564:	2116      	movs	r1, #22
 8007566:	187b      	adds	r3, r7, r1
 8007568:	8812      	ldrh	r2, [r2, #0]
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	187b      	adds	r3, r7, r1
 800756e:	881a      	ldrh	r2, [r3, #0]
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	01db      	lsls	r3, r3, #7
 8007574:	4013      	ands	r3, r2
 8007576:	d016      	beq.n	80075a6 <USB_EPClearStall+0xf6>
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	18d3      	adds	r3, r2, r3
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	b29a      	uxth	r2, r3
 8007586:	2014      	movs	r0, #20
 8007588:	183b      	adds	r3, r7, r0
 800758a:	491c      	ldr	r1, [pc, #112]	; (80075fc <USB_EPClearStall+0x14c>)
 800758c:	400a      	ands	r2, r1
 800758e:	801a      	strh	r2, [r3, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	18d3      	adds	r3, r2, r3
 800759a:	183a      	adds	r2, r7, r0
 800759c:	8812      	ldrh	r2, [r2, #0]
 800759e:	491b      	ldr	r1, [pc, #108]	; (800760c <USB_EPClearStall+0x15c>)
 80075a0:	430a      	orrs	r2, r1
 80075a2:	b292      	uxth	r2, r2
 80075a4:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	18d3      	adds	r3, r2, r3
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	2012      	movs	r0, #18
 80075b6:	183b      	adds	r3, r7, r0
 80075b8:	4915      	ldr	r1, [pc, #84]	; (8007610 <USB_EPClearStall+0x160>)
 80075ba:	400a      	ands	r2, r1
 80075bc:	801a      	strh	r2, [r3, #0]
 80075be:	183b      	adds	r3, r7, r0
 80075c0:	183a      	adds	r2, r7, r0
 80075c2:	8812      	ldrh	r2, [r2, #0]
 80075c4:	2180      	movs	r1, #128	; 0x80
 80075c6:	0149      	lsls	r1, r1, #5
 80075c8:	404a      	eors	r2, r1
 80075ca:	801a      	strh	r2, [r3, #0]
 80075cc:	183b      	adds	r3, r7, r0
 80075ce:	183a      	adds	r2, r7, r0
 80075d0:	8812      	ldrh	r2, [r2, #0]
 80075d2:	2180      	movs	r1, #128	; 0x80
 80075d4:	0189      	lsls	r1, r1, #6
 80075d6:	404a      	eors	r2, r1
 80075d8:	801a      	strh	r2, [r3, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	18d3      	adds	r3, r2, r3
 80075e4:	183a      	adds	r2, r7, r0
 80075e6:	8812      	ldrh	r2, [r2, #0]
 80075e8:	4907      	ldr	r1, [pc, #28]	; (8007608 <USB_EPClearStall+0x158>)
 80075ea:	430a      	orrs	r2, r1
 80075ec:	b292      	uxth	r2, r2
 80075ee:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	0018      	movs	r0, r3
 80075f4:	46bd      	mov	sp, r7
 80075f6:	b006      	add	sp, #24
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	46c0      	nop			; (mov r8, r8)
 80075fc:	ffff8f8f 	.word	0xffff8f8f
 8007600:	ffff80c0 	.word	0xffff80c0
 8007604:	ffff8fbf 	.word	0xffff8fbf
 8007608:	ffff8080 	.word	0xffff8080
 800760c:	ffffc080 	.word	0xffffc080
 8007610:	ffffbf8f 	.word	0xffffbf8f

08007614 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	000a      	movs	r2, r1
 800761e:	1cfb      	adds	r3, r7, #3
 8007620:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007622:	1cfb      	adds	r3, r7, #3
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d103      	bne.n	8007632 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	224c      	movs	r2, #76	; 0x4c
 800762e:	2180      	movs	r1, #128	; 0x80
 8007630:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	0018      	movs	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	b002      	add	sp, #8
 800763a:	bd80      	pop	{r7, pc}

0800763c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2258      	movs	r2, #88	; 0x58
 8007648:	5a9b      	ldrh	r3, [r3, r2]
 800764a:	b29b      	uxth	r3, r3
 800764c:	4a05      	ldr	r2, [pc, #20]	; (8007664 <USB_DevConnect+0x28>)
 800764e:	4313      	orrs	r3, r2
 8007650:	b299      	uxth	r1, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2258      	movs	r2, #88	; 0x58
 8007656:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007658:	2300      	movs	r3, #0
}
 800765a:	0018      	movs	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	b002      	add	sp, #8
 8007660:	bd80      	pop	{r7, pc}
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	ffff8000 	.word	0xffff8000

08007668 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b084      	sub	sp, #16
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2244      	movs	r2, #68	; 0x44
 8007674:	5a9b      	ldrh	r3, [r3, r2]
 8007676:	b29b      	uxth	r3, r3
 8007678:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800767a:	68fb      	ldr	r3, [r7, #12]
}
 800767c:	0018      	movs	r0, r3
 800767e:	46bd      	mov	sp, r7
 8007680:	b004      	add	sp, #16
 8007682:	bd80      	pop	{r7, pc}

08007684 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08c      	sub	sp, #48	; 0x30
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	0019      	movs	r1, r3
 8007690:	1dbb      	adds	r3, r7, #6
 8007692:	801a      	strh	r2, [r3, #0]
 8007694:	1d3b      	adds	r3, r7, #4
 8007696:	1c0a      	adds	r2, r1, #0
 8007698:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800769a:	1d3b      	adds	r3, r7, #4
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	3301      	adds	r3, #1
 80076a0:	085b      	lsrs	r3, r3, #1
 80076a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80076ac:	1dbb      	adds	r3, r7, #6
 80076ae:	881a      	ldrh	r2, [r3, #0]
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	18d3      	adds	r3, r2, r3
 80076b4:	2280      	movs	r2, #128	; 0x80
 80076b6:	00d2      	lsls	r2, r2, #3
 80076b8:	4694      	mov	ip, r2
 80076ba:	4463      	add	r3, ip
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076be:	6a3b      	ldr	r3, [r7, #32]
 80076c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076c2:	e01b      	b.n	80076fc <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	3301      	adds	r3, #1
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	b29b      	uxth	r3, r3
 80076da:	001a      	movs	r2, r3
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	b29a      	uxth	r2, r3
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ec:	3302      	adds	r3, #2
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	3301      	adds	r3, #1
 80076f4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80076f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f8:	3b01      	subs	r3, #1
 80076fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e0      	bne.n	80076c4 <USB_WritePMA+0x40>
  }
}
 8007702:	46c0      	nop			; (mov r8, r8)
 8007704:	46c0      	nop			; (mov r8, r8)
 8007706:	46bd      	mov	sp, r7
 8007708:	b00c      	add	sp, #48	; 0x30
 800770a:	bd80      	pop	{r7, pc}

0800770c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08a      	sub	sp, #40	; 0x28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	0019      	movs	r1, r3
 8007718:	1dbb      	adds	r3, r7, #6
 800771a:	801a      	strh	r2, [r3, #0]
 800771c:	1d3b      	adds	r3, r7, #4
 800771e:	1c0a      	adds	r2, r1, #0
 8007720:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007722:	1d3b      	adds	r3, r7, #4
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	085b      	lsrs	r3, r3, #1
 8007728:	b29b      	uxth	r3, r3
 800772a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007734:	1dbb      	adds	r3, r7, #6
 8007736:	881a      	ldrh	r2, [r3, #0]
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	18d3      	adds	r3, r2, r3
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	00d2      	lsls	r2, r2, #3
 8007740:	4694      	mov	ip, r2
 8007742:	4463      	add	r3, ip
 8007744:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
 800774a:	e018      	b.n	800777e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	881b      	ldrh	r3, [r3, #0]
 8007750:	b29b      	uxth	r3, r3
 8007752:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007754:	6a3b      	ldr	r3, [r7, #32]
 8007756:	3302      	adds	r3, #2
 8007758:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3301      	adds	r3, #1
 8007766:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	b2da      	uxtb	r2, r3
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	3301      	adds	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777a:	3b01      	subs	r3, #1
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1e3      	bne.n	800774c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007784:	1d3b      	adds	r3, r7, #4
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	2201      	movs	r2, #1
 800778a:	4013      	ands	r3, r2
 800778c:	b29b      	uxth	r3, r3
 800778e:	2b00      	cmp	r3, #0
 8007790:	d007      	beq.n	80077a2 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8007792:	6a3b      	ldr	r3, [r7, #32]
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	b29b      	uxth	r3, r3
 8007798:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	b2da      	uxtb	r2, r3
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	701a      	strb	r2, [r3, #0]
  }
}
 80077a2:	46c0      	nop			; (mov r8, r8)
 80077a4:	46bd      	mov	sp, r7
 80077a6:	b00a      	add	sp, #40	; 0x28
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80077aa:	b590      	push	{r4, r7, lr}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	000a      	movs	r2, r1
 80077b4:	1cfb      	adds	r3, r7, #3
 80077b6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80077b8:	240f      	movs	r4, #15
 80077ba:	193b      	adds	r3, r7, r4
 80077bc:	2200      	movs	r2, #0
 80077be:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	2355      	movs	r3, #85	; 0x55
 80077c4:	2203      	movs	r2, #3
 80077c6:	2181      	movs	r1, #129	; 0x81
 80077c8:	f001 ff35 	bl	8009636 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	2355      	movs	r3, #85	; 0x55
 80077d6:	2203      	movs	r2, #3
 80077d8:	2101      	movs	r1, #1
 80077da:	f001 ff2c 	bl	8009636 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	23b6      	movs	r3, #182	; 0xb6
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	2101      	movs	r1, #1
 80077e6:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80077e8:	2018      	movs	r0, #24
 80077ea:	f002 f90f 	bl	8009a0c <malloc>
 80077ee:	0003      	movs	r3, r0
 80077f0:	0019      	movs	r1, r3
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	23ae      	movs	r3, #174	; 0xae
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	23ae      	movs	r3, #174	; 0xae
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	58d3      	ldr	r3, [r2, r3]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d103      	bne.n	800780e <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 8007806:	193b      	adds	r3, r7, r4
 8007808:	2201      	movs	r2, #1
 800780a:	701a      	strb	r2, [r3, #0]
 800780c:	e013      	b.n	8007836 <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	23ae      	movs	r3, #174	; 0xae
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	58d3      	ldr	r3, [r2, r3]
 8007816:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2200      	movs	r2, #0
 800781c:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	23af      	movs	r3, #175	; 0xaf
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	58d3      	ldr	r3, [r2, r3]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	2302      	movs	r3, #2
 8007830:	2101      	movs	r1, #1
 8007832:	f002 f84b 	bl	80098cc <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007836:	230f      	movs	r3, #15
 8007838:	18fb      	adds	r3, r7, r3
 800783a:	781b      	ldrb	r3, [r3, #0]
}
 800783c:	0018      	movs	r0, r3
 800783e:	46bd      	mov	sp, r7
 8007840:	b005      	add	sp, #20
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
 800784c:	000a      	movs	r2, r1
 800784e:	1cfb      	adds	r3, r7, #3
 8007850:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2181      	movs	r1, #129	; 0x81
 8007856:	0018      	movs	r0, r3
 8007858:	f001 ff24 	bl	80096a4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2101      	movs	r1, #1
 8007866:	0018      	movs	r0, r3
 8007868:	f001 ff1c 	bl	80096a4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	23b6      	movs	r3, #182	; 0xb6
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	2100      	movs	r1, #0
 8007874:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	23ae      	movs	r3, #174	; 0xae
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	58d3      	ldr	r3, [r2, r3]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d011      	beq.n	80078a6 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	23af      	movs	r3, #175	; 0xaf
 8007886:	009b      	lsls	r3, r3, #2
 8007888:	58d3      	ldr	r3, [r2, r3]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	23ae      	movs	r3, #174	; 0xae
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	58d3      	ldr	r3, [r2, r3]
 8007896:	0018      	movs	r0, r3
 8007898:	f002 f8c2 	bl	8009a20 <free>
    pdev->pClassData = NULL;
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	23ae      	movs	r3, #174	; 0xae
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	2100      	movs	r1, #0
 80078a4:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 80078a6:	2300      	movs	r3, #0
}
 80078a8:	0018      	movs	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	b002      	add	sp, #8
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	23ae      	movs	r3, #174	; 0xae
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	58d3      	ldr	r3, [r2, r3]
 80078c2:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80078c4:	231e      	movs	r3, #30
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	2200      	movs	r2, #0
 80078ca:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80078cc:	2300      	movs	r3, #0
 80078ce:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80078d0:	230e      	movs	r3, #14
 80078d2:	18fb      	adds	r3, r7, r3
 80078d4:	2200      	movs	r2, #0
 80078d6:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80078d8:	2317      	movs	r3, #23
 80078da:	18fb      	adds	r3, r7, r3
 80078dc:	2200      	movs	r2, #0
 80078de:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	001a      	movs	r2, r3
 80078e6:	2360      	movs	r3, #96	; 0x60
 80078e8:	4013      	ands	r3, r2
 80078ea:	d043      	beq.n	8007974 <USBD_CUSTOM_HID_Setup+0xc4>
 80078ec:	2b20      	cmp	r3, #32
 80078ee:	d000      	beq.n	80078f2 <USBD_CUSTOM_HID_Setup+0x42>
 80078f0:	e0d7      	b.n	8007aa2 <USBD_CUSTOM_HID_Setup+0x1f2>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	785b      	ldrb	r3, [r3, #1]
 80078f6:	2b0b      	cmp	r3, #11
 80078f8:	d830      	bhi.n	800795c <USBD_CUSTOM_HID_Setup+0xac>
 80078fa:	009a      	lsls	r2, r3, #2
 80078fc:	4b72      	ldr	r3, [pc, #456]	; (8007ac8 <USBD_CUSTOM_HID_Setup+0x218>)
 80078fe:	18d3      	adds	r3, r2, r3
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	885b      	ldrh	r3, [r3, #2]
 8007908:	b2db      	uxtb	r3, r3
 800790a:	001a      	movs	r2, r3
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	605a      	str	r2, [r3, #4]
          break;
 8007910:	e02f      	b.n	8007972 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	1d19      	adds	r1, r3, #4
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2201      	movs	r2, #1
 800791a:	0018      	movs	r0, r3
 800791c:	f001 fb1e 	bl	8008f5c <USBD_CtlSendData>
          break;
 8007920:	e027      	b.n	8007972 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	885b      	ldrh	r3, [r3, #2]
 8007926:	0a1b      	lsrs	r3, r3, #8
 8007928:	b29b      	uxth	r3, r3
 800792a:	b2db      	uxtb	r3, r3
 800792c:	001a      	movs	r2, r3
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	609a      	str	r2, [r3, #8]
          break;
 8007932:	e01e      	b.n	8007972 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	3308      	adds	r3, #8
 8007938:	0019      	movs	r1, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	0018      	movs	r0, r3
 8007940:	f001 fb0c 	bl	8008f5c <USBD_CtlSendData>
          break;
 8007944:	e015      	b.n	8007972 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2201      	movs	r2, #1
 800794a:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800794c:	6939      	ldr	r1, [r7, #16]
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	88da      	ldrh	r2, [r3, #6]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	0018      	movs	r0, r3
 8007956:	f001 fb34 	bl	8008fc2 <USBD_CtlPrepareRx>
          break;
 800795a:	e00a      	b.n	8007972 <USBD_CUSTOM_HID_Setup+0xc2>

        default:
          USBD_CtlError(pdev, req);
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0011      	movs	r1, r2
 8007962:	0018      	movs	r0, r3
 8007964:	f001 fa7c 	bl	8008e60 <USBD_CtlError>
          ret = USBD_FAIL;
 8007968:	2317      	movs	r3, #23
 800796a:	18fb      	adds	r3, r7, r3
 800796c:	2202      	movs	r2, #2
 800796e:	701a      	strb	r2, [r3, #0]
          break;
 8007970:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007972:	e0a1      	b.n	8007ab8 <USBD_CUSTOM_HID_Setup+0x208>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	785b      	ldrb	r3, [r3, #1]
 8007978:	2b0b      	cmp	r3, #11
 800797a:	d100      	bne.n	800797e <USBD_CUSTOM_HID_Setup+0xce>
 800797c:	e06d      	b.n	8007a5a <USBD_CUSTOM_HID_Setup+0x1aa>
 800797e:	dd00      	ble.n	8007982 <USBD_CUSTOM_HID_Setup+0xd2>
 8007980:	e083      	b.n	8007a8a <USBD_CUSTOM_HID_Setup+0x1da>
 8007982:	2b0a      	cmp	r3, #10
 8007984:	d04f      	beq.n	8007a26 <USBD_CUSTOM_HID_Setup+0x176>
 8007986:	dd00      	ble.n	800798a <USBD_CUSTOM_HID_Setup+0xda>
 8007988:	e07f      	b.n	8007a8a <USBD_CUSTOM_HID_Setup+0x1da>
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <USBD_CUSTOM_HID_Setup+0xe4>
 800798e:	2b06      	cmp	r3, #6
 8007990:	d019      	beq.n	80079c6 <USBD_CUSTOM_HID_Setup+0x116>
 8007992:	e07a      	b.n	8007a8a <USBD_CUSTOM_HID_Setup+0x1da>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	23a7      	movs	r3, #167	; 0xa7
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	5cd3      	ldrb	r3, [r2, r3]
 800799c:	2b03      	cmp	r3, #3
 800799e:	d107      	bne.n	80079b0 <USBD_CUSTOM_HID_Setup+0x100>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80079a0:	230e      	movs	r3, #14
 80079a2:	18f9      	adds	r1, r7, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2202      	movs	r2, #2
 80079a8:	0018      	movs	r0, r3
 80079aa:	f001 fad7 	bl	8008f5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079ae:	e077      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	0011      	movs	r1, r2
 80079b6:	0018      	movs	r0, r3
 80079b8:	f001 fa52 	bl	8008e60 <USBD_CtlError>
            ret = USBD_FAIL;
 80079bc:	2317      	movs	r3, #23
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	2202      	movs	r2, #2
 80079c2:	701a      	strb	r2, [r3, #0]
          break;
 80079c4:	e06c      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	885b      	ldrh	r3, [r3, #2]
 80079ca:	0a1b      	lsrs	r3, r3, #8
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b22      	cmp	r3, #34	; 0x22
 80079d0:	d10f      	bne.n	80079f2 <USBD_CUSTOM_HID_Setup+0x142>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88db      	ldrh	r3, [r3, #6]
 80079d6:	221e      	movs	r2, #30
 80079d8:	18ba      	adds	r2, r7, r2
 80079da:	b299      	uxth	r1, r3
 80079dc:	2955      	cmp	r1, #85	; 0x55
 80079de:	d900      	bls.n	80079e2 <USBD_CUSTOM_HID_Setup+0x132>
 80079e0:	2355      	movs	r3, #85	; 0x55
 80079e2:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	23af      	movs	r3, #175	; 0xaf
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	58d3      	ldr	r3, [r2, r3]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	61bb      	str	r3, [r7, #24]
 80079f0:	e010      	b.n	8007a14 <USBD_CUSTOM_HID_Setup+0x164>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	0a1b      	lsrs	r3, r3, #8
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b21      	cmp	r3, #33	; 0x21
 80079fc:	d10a      	bne.n	8007a14 <USBD_CUSTOM_HID_Setup+0x164>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80079fe:	4b33      	ldr	r3, [pc, #204]	; (8007acc <USBD_CUSTOM_HID_Setup+0x21c>)
 8007a00:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	88db      	ldrh	r3, [r3, #6]
 8007a06:	221e      	movs	r2, #30
 8007a08:	18ba      	adds	r2, r7, r2
 8007a0a:	b299      	uxth	r1, r3
 8007a0c:	2909      	cmp	r1, #9
 8007a0e:	d900      	bls.n	8007a12 <USBD_CUSTOM_HID_Setup+0x162>
 8007a10:	2309      	movs	r3, #9
 8007a12:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007a14:	231e      	movs	r3, #30
 8007a16:	18fb      	adds	r3, r7, r3
 8007a18:	881a      	ldrh	r2, [r3, #0]
 8007a1a:	69b9      	ldr	r1, [r7, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	0018      	movs	r0, r3
 8007a20:	f001 fa9c 	bl	8008f5c <USBD_CtlSendData>
          break;
 8007a24:	e03c      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	23a7      	movs	r3, #167	; 0xa7
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	5cd3      	ldrb	r3, [r2, r3]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d108      	bne.n	8007a44 <USBD_CUSTOM_HID_Setup+0x194>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	330c      	adds	r3, #12
 8007a36:	0019      	movs	r1, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	f001 fa8d 	bl	8008f5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a42:	e02d      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	0011      	movs	r1, r2
 8007a4a:	0018      	movs	r0, r3
 8007a4c:	f001 fa08 	bl	8008e60 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a50:	2317      	movs	r3, #23
 8007a52:	18fb      	adds	r3, r7, r3
 8007a54:	2202      	movs	r2, #2
 8007a56:	701a      	strb	r2, [r3, #0]
          break;
 8007a58:	e022      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	23a7      	movs	r3, #167	; 0xa7
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	5cd3      	ldrb	r3, [r2, r3]
 8007a62:	2b03      	cmp	r3, #3
 8007a64:	d106      	bne.n	8007a74 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	001a      	movs	r2, r3
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a72:	e015      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	0011      	movs	r1, r2
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f001 f9f0 	bl	8008e60 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a80:	2317      	movs	r3, #23
 8007a82:	18fb      	adds	r3, r7, r3
 8007a84:	2202      	movs	r2, #2
 8007a86:	701a      	strb	r2, [r3, #0]
          break;
 8007a88:	e00a      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x1f0>

        default:
          USBD_CtlError(pdev, req);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f001 f9e5 	bl	8008e60 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a96:	2317      	movs	r3, #23
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
          break;
 8007a9e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007aa0:	e00a      	b.n	8007ab8 <USBD_CUSTOM_HID_Setup+0x208>

    default:
      USBD_CtlError(pdev, req);
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	0011      	movs	r1, r2
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	f001 f9d9 	bl	8008e60 <USBD_CtlError>
      ret = USBD_FAIL;
 8007aae:	2317      	movs	r3, #23
 8007ab0:	18fb      	adds	r3, r7, r3
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	701a      	strb	r2, [r3, #0]
      break;
 8007ab6:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8007ab8:	2317      	movs	r3, #23
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	781b      	ldrb	r3, [r3, #0]
}
 8007abe:	0018      	movs	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	b008      	add	sp, #32
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	46c0      	nop			; (mov r8, r8)
 8007ac8:	0800a3c4 	.word	0x0800a3c4
 8007acc:	200000c8 	.word	0x200000c8

08007ad0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	1dbb      	adds	r3, r7, #6
 8007adc:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	23ae      	movs	r3, #174	; 0xae
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	58d3      	ldr	r3, [r2, r3]
 8007ae6:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ae8:	68fa      	ldr	r2, [r7, #12]
 8007aea:	23a7      	movs	r3, #167	; 0xa7
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	5cd3      	ldrb	r3, [r2, r3]
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d110      	bne.n	8007b16 <USBD_CUSTOM_HID_SendReport+0x46>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	7d1b      	ldrb	r3, [r3, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10a      	bne.n	8007b12 <USBD_CUSTOM_HID_SendReport+0x42>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	2201      	movs	r2, #1
 8007b00:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007b02:	1dbb      	adds	r3, r7, #6
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	2181      	movs	r1, #129	; 0x81
 8007b0c:	f001 fea7 	bl	800985e <USBD_LL_Transmit>
 8007b10:	e001      	b.n	8007b16 <USBD_CUSTOM_HID_SendReport+0x46>
    }
    else
    {
      return USBD_BUSY;
 8007b12:	2301      	movs	r3, #1
 8007b14:	e000      	b.n	8007b18 <USBD_CUSTOM_HID_SendReport+0x48>
    }
  }
  return USBD_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	0018      	movs	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b006      	add	sp, #24
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2229      	movs	r2, #41	; 0x29
 8007b2c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007b2e:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8007b30:	0018      	movs	r0, r3
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b002      	add	sp, #8
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000044 	.word	0x20000044

08007b3c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2229      	movs	r2, #41	; 0x29
 8007b48:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007b4a:	4b02      	ldr	r3, [pc, #8]	; (8007b54 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	b002      	add	sp, #8
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000070 	.word	0x20000070

08007b58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2229      	movs	r2, #41	; 0x29
 8007b64:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007b66:	4b02      	ldr	r3, [pc, #8]	; (8007b70 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007b68:	0018      	movs	r0, r3
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	b002      	add	sp, #8
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	2000009c 	.word	0x2000009c

08007b74 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	000a      	movs	r2, r1
 8007b7e:	1cfb      	adds	r3, r7, #3
 8007b80:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	23ae      	movs	r3, #174	; 0xae
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	58d3      	ldr	r3, [r2, r3]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	0018      	movs	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	b002      	add	sp, #8
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	000a      	movs	r2, r1
 8007ba2:	1cfb      	adds	r3, r7, #3
 8007ba4:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	23ae      	movs	r3, #174	; 0xae
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	58d3      	ldr	r3, [r2, r3]
 8007bae:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	23af      	movs	r3, #175	; 0xaf
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	58d3      	ldr	r3, [r2, r3]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	0010      	movs	r0, r2
 8007bbe:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	2101      	movs	r1, #1
 8007bc8:	f001 fe80 	bl	80098cc <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	0018      	movs	r0, r3
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b004      	add	sp, #16
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	23ae      	movs	r3, #174	; 0xae
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	58d3      	ldr	r3, [r2, r3]
 8007be6:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10a      	bne.n	8007c06 <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	23af      	movs	r3, #175	; 0xaf
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	58d3      	ldr	r3, [r2, r3]
 8007bf8:	68db      	ldr	r3, [r3, #12]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	0010      	movs	r0, r2
 8007bfe:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2200      	movs	r2, #0
 8007c04:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007c06:	2300      	movs	r3, #0
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b004      	add	sp, #16
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	220a      	movs	r2, #10
 8007c1c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007c1e:	4b02      	ldr	r3, [pc, #8]	; (8007c28 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8007c20:	0018      	movs	r0, r3
 8007c22:	46bd      	mov	sp, r7
 8007c24:	b002      	add	sp, #8
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	200000d4 	.word	0x200000d4

08007c2c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c36:	200f      	movs	r0, #15
 8007c38:	183b      	adds	r3, r7, r0
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	23af      	movs	r3, #175	; 0xaf
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007c4e:	183b      	adds	r3, r7, r0
 8007c50:	2200      	movs	r2, #0
 8007c52:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007c54:	230f      	movs	r3, #15
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	781b      	ldrb	r3, [r3, #0]
}
 8007c5a:	0018      	movs	r0, r3
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	b004      	add	sp, #16
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b084      	sub	sp, #16
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	60f8      	str	r0, [r7, #12]
 8007c6a:	60b9      	str	r1, [r7, #8]
 8007c6c:	1dfb      	adds	r3, r7, #7
 8007c6e:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c76:	2302      	movs	r3, #2
 8007c78:	e020      	b.n	8007cbc <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	23ad      	movs	r3, #173	; 0xad
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	58d3      	ldr	r3, [r2, r3]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d004      	beq.n	8007c90 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	23ad      	movs	r3, #173	; 0xad
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	23ac      	movs	r3, #172	; 0xac
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	68b9      	ldr	r1, [r7, #8]
 8007c9e:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	23a7      	movs	r3, #167	; 0xa7
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	1dfa      	adds	r2, r7, #7
 8007cae:	7812      	ldrb	r2, [r2, #0]
 8007cb0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	0018      	movs	r0, r3
 8007cb6:	f001 fc41 	bl	800953c <USBD_LL_Init>

  return USBD_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	0018      	movs	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	b004      	add	sp, #16
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007cce:	200f      	movs	r0, #15
 8007cd0:	183b      	adds	r3, r7, r0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	23ad      	movs	r3, #173	; 0xad
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007ce6:	183b      	adds	r3, r7, r0
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
 8007cec:	e003      	b.n	8007cf6 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007cee:	230f      	movs	r3, #15
 8007cf0:	18fb      	adds	r3, r7, r3
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007cf6:	230f      	movs	r3, #15
 8007cf8:	18fb      	adds	r3, r7, r3
 8007cfa:	781b      	ldrb	r3, [r3, #0]
}
 8007cfc:	0018      	movs	r0, r3
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	b004      	add	sp, #16
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	0018      	movs	r0, r3
 8007d10:	f001 fc6c 	bl	80095ec <USBD_LL_Start>

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	0018      	movs	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	b002      	add	sp, #8
 8007d1c:	bd80      	pop	{r7, pc}

08007d1e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b082      	sub	sp, #8
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	0018      	movs	r0, r3
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	b002      	add	sp, #8
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d30:	b590      	push	{r4, r7, lr}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	000a      	movs	r2, r1
 8007d3a:	1cfb      	adds	r3, r7, #3
 8007d3c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d3e:	240f      	movs	r4, #15
 8007d40:	193b      	adds	r3, r7, r4
 8007d42:	2202      	movs	r2, #2
 8007d44:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	23ad      	movs	r3, #173	; 0xad
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	58d3      	ldr	r3, [r2, r3]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d00e      	beq.n	8007d70 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	23ad      	movs	r3, #173	; 0xad
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	58d3      	ldr	r3, [r2, r3]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	1cfa      	adds	r2, r7, #3
 8007d5e:	7811      	ldrb	r1, [r2, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	0010      	movs	r0, r2
 8007d64:	4798      	blx	r3
 8007d66:	1e03      	subs	r3, r0, #0
 8007d68:	d102      	bne.n	8007d70 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007d6a:	193b      	adds	r3, r7, r4
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007d70:	230f      	movs	r3, #15
 8007d72:	18fb      	adds	r3, r7, r3
 8007d74:	781b      	ldrb	r3, [r3, #0]
}
 8007d76:	0018      	movs	r0, r3
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b005      	add	sp, #20
 8007d7c:	bd90      	pop	{r4, r7, pc}

08007d7e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	000a      	movs	r2, r1
 8007d88:	1cfb      	adds	r3, r7, #3
 8007d8a:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	23ad      	movs	r3, #173	; 0xad
 8007d90:	009b      	lsls	r3, r3, #2
 8007d92:	58d3      	ldr	r3, [r2, r3]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	1cfa      	adds	r2, r7, #3
 8007d98:	7811      	ldrb	r1, [r2, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	0010      	movs	r0, r2
 8007d9e:	4798      	blx	r3

  return USBD_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	0018      	movs	r0, r3
 8007da4:	46bd      	mov	sp, r7
 8007da6:	b002      	add	sp, #8
 8007da8:	bd80      	pop	{r7, pc}
	...

08007dac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b082      	sub	sp, #8
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	22aa      	movs	r2, #170	; 0xaa
 8007dba:	0092      	lsls	r2, r2, #2
 8007dbc:	4694      	mov	ip, r2
 8007dbe:	4463      	add	r3, ip
 8007dc0:	683a      	ldr	r2, [r7, #0]
 8007dc2:	0011      	movs	r1, r2
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f001 f810 	bl	8008dea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	23a5      	movs	r3, #165	; 0xa5
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	2101      	movs	r1, #1
 8007dd2:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a23      	ldr	r2, [pc, #140]	; (8007e64 <USBD_LL_SetupStage+0xb8>)
 8007dd8:	5a9b      	ldrh	r3, [r3, r2]
 8007dda:	0019      	movs	r1, r3
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	23a6      	movs	r3, #166	; 0xa6
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	23aa      	movs	r3, #170	; 0xaa
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	5cd3      	ldrb	r3, [r2, r3]
 8007dec:	001a      	movs	r2, r3
 8007dee:	231f      	movs	r3, #31
 8007df0:	4013      	ands	r3, r2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d019      	beq.n	8007e2a <USBD_LL_SetupStage+0x7e>
 8007df6:	d822      	bhi.n	8007e3e <USBD_LL_SetupStage+0x92>
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d002      	beq.n	8007e02 <USBD_LL_SetupStage+0x56>
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d00a      	beq.n	8007e16 <USBD_LL_SetupStage+0x6a>
 8007e00:	e01d      	b.n	8007e3e <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	22aa      	movs	r2, #170	; 0xaa
 8007e06:	0092      	lsls	r2, r2, #2
 8007e08:	189a      	adds	r2, r3, r2
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	0011      	movs	r1, r2
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f000 fa10 	bl	8008234 <USBD_StdDevReq>
      break;
 8007e14:	e020      	b.n	8007e58 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	22aa      	movs	r2, #170	; 0xaa
 8007e1a:	0092      	lsls	r2, r2, #2
 8007e1c:	189a      	adds	r2, r3, r2
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	0011      	movs	r1, r2
 8007e22:	0018      	movs	r0, r3
 8007e24:	f000 fa78 	bl	8008318 <USBD_StdItfReq>
      break;
 8007e28:	e016      	b.n	8007e58 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	22aa      	movs	r2, #170	; 0xaa
 8007e2e:	0092      	lsls	r2, r2, #2
 8007e30:	189a      	adds	r2, r3, r2
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	0011      	movs	r1, r2
 8007e36:	0018      	movs	r0, r3
 8007e38:	f000 fac5 	bl	80083c6 <USBD_StdEPReq>
      break;
 8007e3c:	e00c      	b.n	8007e58 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	23aa      	movs	r3, #170	; 0xaa
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	5cd3      	ldrb	r3, [r2, r3]
 8007e46:	227f      	movs	r2, #127	; 0x7f
 8007e48:	4393      	bics	r3, r2
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	0011      	movs	r1, r2
 8007e50:	0018      	movs	r0, r3
 8007e52:	f001 fc52 	bl	80096fa <USBD_LL_StallEP>
      break;
 8007e56:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007e58:	2300      	movs	r3, #0
}
 8007e5a:	0018      	movs	r0, r3
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	b002      	add	sp, #8
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	000002ae 	.word	0x000002ae

08007e68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	200b      	movs	r0, #11
 8007e74:	183b      	adds	r3, r7, r0
 8007e76:	1c0a      	adds	r2, r1, #0
 8007e78:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e7a:	183b      	adds	r3, r7, r0
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d154      	bne.n	8007f2c <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3355      	adds	r3, #85	; 0x55
 8007e86:	33ff      	adds	r3, #255	; 0xff
 8007e88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	23a5      	movs	r3, #165	; 0xa5
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	58d3      	ldr	r3, [r2, r3]
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d139      	bne.n	8007f0a <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d919      	bls.n	8007ed6 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d203      	bcs.n	8007ec4 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	e002      	b.n	8007eca <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	001a      	movs	r2, r3
 8007ed0:	f001 f89b 	bl	800900a <USBD_CtlContinueRx>
 8007ed4:	e045      	b.n	8007f62 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	23ad      	movs	r3, #173	; 0xad
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	58d3      	ldr	r3, [r2, r3]
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00d      	beq.n	8007f00 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	23a7      	movs	r3, #167	; 0xa7
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007eec:	2b03      	cmp	r3, #3
 8007eee:	d107      	bne.n	8007f00 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	23ad      	movs	r3, #173	; 0xad
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	58d3      	ldr	r3, [r2, r3]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	0010      	movs	r0, r2
 8007efe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	0018      	movs	r0, r3
 8007f04:	f001 f894 	bl	8009030 <USBD_CtlSendStatus>
 8007f08:	e02b      	b.n	8007f62 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	23a5      	movs	r3, #165	; 0xa5
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	58d3      	ldr	r3, [r2, r3]
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d125      	bne.n	8007f62 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	23a5      	movs	r3, #165	; 0xa5
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2100      	movs	r1, #0
 8007f24:	0018      	movs	r0, r3
 8007f26:	f001 fbe8 	bl	80096fa <USBD_LL_StallEP>
 8007f2a:	e01a      	b.n	8007f62 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	23ad      	movs	r3, #173	; 0xad
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	58d3      	ldr	r3, [r2, r3]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	23a7      	movs	r3, #167	; 0xa7
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f42:	2b03      	cmp	r3, #3
 8007f44:	d10b      	bne.n	8007f5e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	23ad      	movs	r3, #173	; 0xad
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	58d3      	ldr	r3, [r2, r3]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	220b      	movs	r2, #11
 8007f52:	18ba      	adds	r2, r7, r2
 8007f54:	7811      	ldrb	r1, [r2, #0]
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	0010      	movs	r0, r2
 8007f5a:	4798      	blx	r3
 8007f5c:	e001      	b.n	8007f62 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f5e:	2302      	movs	r3, #2
 8007f60:	e000      	b.n	8007f64 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	0018      	movs	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b006      	add	sp, #24
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	607a      	str	r2, [r7, #4]
 8007f76:	200b      	movs	r0, #11
 8007f78:	183b      	adds	r3, r7, r0
 8007f7a:	1c0a      	adds	r2, r1, #0
 8007f7c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f7e:	183b      	adds	r3, r7, r0
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d000      	beq.n	8007f88 <USBD_LL_DataInStage+0x1c>
 8007f86:	e08e      	b.n	80080a6 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3314      	adds	r3, #20
 8007f8c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f8e:	68fa      	ldr	r2, [r7, #12]
 8007f90:	23a5      	movs	r3, #165	; 0xa5
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	58d3      	ldr	r3, [r2, r3]
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d164      	bne.n	8008064 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d915      	bls.n	8007fd2 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	68da      	ldr	r2, [r3, #12]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f000 ffec 	bl	8008f9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	f001 fc7e 	bl	80098cc <USBD_LL_PrepareReceive>
 8007fd0:	e059      	b.n	8008086 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	689a      	ldr	r2, [r3, #8]
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	0019      	movs	r1, r3
 8007fdc:	0010      	movs	r0, r2
 8007fde:	f7f8 f92b 	bl	8000238 <__aeabi_uidivmod>
 8007fe2:	1e0b      	subs	r3, r1, #0
 8007fe4:	d11f      	bne.n	8008026 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	689a      	ldr	r2, [r3, #8]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d319      	bcc.n	8008026 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	68f9      	ldr	r1, [r7, #12]
 8007ff8:	23a6      	movs	r3, #166	; 0xa6
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d211      	bcs.n	8008026 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	0018      	movs	r0, r3
 800800a:	f000 ffc7 	bl	8008f9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	23a6      	movs	r3, #166	; 0xa6
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	2100      	movs	r1, #0
 8008016:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	2300      	movs	r3, #0
 800801c:	2200      	movs	r2, #0
 800801e:	2100      	movs	r1, #0
 8008020:	f001 fc54 	bl	80098cc <USBD_LL_PrepareReceive>
 8008024:	e02f      	b.n	8008086 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	23ad      	movs	r3, #173	; 0xad
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	58d3      	ldr	r3, [r2, r3]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00d      	beq.n	8008050 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	23a7      	movs	r3, #167	; 0xa7
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800803c:	2b03      	cmp	r3, #3
 800803e:	d107      	bne.n	8008050 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	23ad      	movs	r3, #173	; 0xad
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	58d3      	ldr	r3, [r2, r3]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	0010      	movs	r0, r2
 800804e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2180      	movs	r1, #128	; 0x80
 8008054:	0018      	movs	r0, r3
 8008056:	f001 fb50 	bl	80096fa <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	0018      	movs	r0, r3
 800805e:	f000 fffb 	bl	8009058 <USBD_CtlReceiveStatus>
 8008062:	e010      	b.n	8008086 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	23a5      	movs	r3, #165	; 0xa5
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	58d3      	ldr	r3, [r2, r3]
 800806c:	2b04      	cmp	r3, #4
 800806e:	d005      	beq.n	800807c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	23a5      	movs	r3, #165	; 0xa5
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008078:	2b00      	cmp	r3, #0
 800807a:	d104      	bne.n	8008086 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2180      	movs	r1, #128	; 0x80
 8008080:	0018      	movs	r0, r3
 8008082:	f001 fb3a 	bl	80096fa <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	23a8      	movs	r3, #168	; 0xa8
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	5cd3      	ldrb	r3, [r2, r3]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d124      	bne.n	80080dc <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	0018      	movs	r0, r3
 8008096:	f7ff fe42 	bl	8007d1e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	23a8      	movs	r3, #168	; 0xa8
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	2100      	movs	r1, #0
 80080a2:	54d1      	strb	r1, [r2, r3]
 80080a4:	e01a      	b.n	80080dc <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	23ad      	movs	r3, #173	; 0xad
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	58d3      	ldr	r3, [r2, r3]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d011      	beq.n	80080d8 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	23a7      	movs	r3, #167	; 0xa7
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80080bc:	2b03      	cmp	r3, #3
 80080be:	d10b      	bne.n	80080d8 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	23ad      	movs	r3, #173	; 0xad
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	58d3      	ldr	r3, [r2, r3]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	220b      	movs	r2, #11
 80080cc:	18ba      	adds	r2, r7, r2
 80080ce:	7811      	ldrb	r1, [r2, #0]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	0010      	movs	r0, r2
 80080d4:	4798      	blx	r3
 80080d6:	e001      	b.n	80080dc <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080d8:	2302      	movs	r3, #2
 80080da:	e000      	b.n	80080de <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80080dc:	2300      	movs	r3, #0
}
 80080de:	0018      	movs	r0, r3
 80080e0:	46bd      	mov	sp, r7
 80080e2:	b006      	add	sp, #24
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	2340      	movs	r3, #64	; 0x40
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	f001 fa9e 	bl	8009636 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080fa:	687a      	ldr	r2, [r7, #4]
 80080fc:	23ac      	movs	r3, #172	; 0xac
 80080fe:	005b      	lsls	r3, r3, #1
 8008100:	2101      	movs	r1, #1
 8008102:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	23b2      	movs	r3, #178	; 0xb2
 8008108:	005b      	lsls	r3, r3, #1
 800810a:	2140      	movs	r1, #64	; 0x40
 800810c:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	2340      	movs	r3, #64	; 0x40
 8008112:	2200      	movs	r2, #0
 8008114:	2180      	movs	r1, #128	; 0x80
 8008116:	f001 fa8e 	bl	8009636 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2240      	movs	r2, #64	; 0x40
 8008124:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	23a7      	movs	r3, #167	; 0xa7
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	2101      	movs	r1, #1
 800812e:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	23a5      	movs	r3, #165	; 0xa5
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	2100      	movs	r1, #0
 8008138:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	23a9      	movs	r3, #169	; 0xa9
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	2100      	movs	r1, #0
 8008148:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	23ae      	movs	r3, #174	; 0xae
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	58d3      	ldr	r3, [r2, r3]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00a      	beq.n	800816c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	23ad      	movs	r3, #173	; 0xad
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	58d3      	ldr	r3, [r2, r3]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	b2d9      	uxtb	r1, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	0018      	movs	r0, r3
 800816a:	4790      	blx	r2
  }

  return USBD_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	0018      	movs	r0, r3
 8008170:	46bd      	mov	sp, r7
 8008172:	b002      	add	sp, #8
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b082      	sub	sp, #8
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	000a      	movs	r2, r1
 8008180:	1cfb      	adds	r3, r7, #3
 8008182:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	1cfa      	adds	r2, r7, #3
 8008188:	7812      	ldrb	r2, [r2, #0]
 800818a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	0018      	movs	r0, r3
 8008190:	46bd      	mov	sp, r7
 8008192:	b002      	add	sp, #8
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	23a7      	movs	r3, #167	; 0xa7
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	5cd1      	ldrb	r1, [r2, r3]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a06      	ldr	r2, [pc, #24]	; (80081c4 <USBD_LL_Suspend+0x2c>)
 80081ac:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	23a7      	movs	r3, #167	; 0xa7
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	2104      	movs	r1, #4
 80081b6:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80081b8:	2300      	movs	r3, #0
}
 80081ba:	0018      	movs	r0, r3
 80081bc:	46bd      	mov	sp, r7
 80081be:	b002      	add	sp, #8
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	46c0      	nop			; (mov r8, r8)
 80081c4:	0000029d 	.word	0x0000029d

080081c8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	23a7      	movs	r3, #167	; 0xa7
 80081d4:	009b      	lsls	r3, r3, #2
 80081d6:	5cd3      	ldrb	r3, [r2, r3]
 80081d8:	2b04      	cmp	r3, #4
 80081da:	d106      	bne.n	80081ea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a05      	ldr	r2, [pc, #20]	; (80081f4 <USBD_LL_Resume+0x2c>)
 80081e0:	5c99      	ldrb	r1, [r3, r2]
 80081e2:	687a      	ldr	r2, [r7, #4]
 80081e4:	23a7      	movs	r3, #167	; 0xa7
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	0018      	movs	r0, r3
 80081ee:	46bd      	mov	sp, r7
 80081f0:	b002      	add	sp, #8
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	0000029d 	.word	0x0000029d

080081f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	23a7      	movs	r3, #167	; 0xa7
 8008204:	009b      	lsls	r3, r3, #2
 8008206:	5cd3      	ldrb	r3, [r2, r3]
 8008208:	2b03      	cmp	r3, #3
 800820a:	d10e      	bne.n	800822a <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	23ad      	movs	r3, #173	; 0xad
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	58d3      	ldr	r3, [r2, r3]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d007      	beq.n	800822a <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	23ad      	movs	r3, #173	; 0xad
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	58d3      	ldr	r3, [r2, r3]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	0010      	movs	r0, r2
 8008228:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	0018      	movs	r0, r3
 800822e:	46bd      	mov	sp, r7
 8008230:	b002      	add	sp, #8
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800823e:	230f      	movs	r3, #15
 8008240:	18fb      	adds	r3, r7, r3
 8008242:	2200      	movs	r2, #0
 8008244:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	001a      	movs	r2, r3
 800824c:	2360      	movs	r3, #96	; 0x60
 800824e:	4013      	ands	r3, r2
 8008250:	2b40      	cmp	r3, #64	; 0x40
 8008252:	d004      	beq.n	800825e <USBD_StdDevReq+0x2a>
 8008254:	d84f      	bhi.n	80082f6 <USBD_StdDevReq+0xc2>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00b      	beq.n	8008272 <USBD_StdDevReq+0x3e>
 800825a:	2b20      	cmp	r3, #32
 800825c:	d14b      	bne.n	80082f6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	23ad      	movs	r3, #173	; 0xad
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	58d3      	ldr	r3, [r2, r3]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	6839      	ldr	r1, [r7, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	0010      	movs	r0, r2
 800826e:	4798      	blx	r3
      break;
 8008270:	e048      	b.n	8008304 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	785b      	ldrb	r3, [r3, #1]
 8008276:	2b09      	cmp	r3, #9
 8008278:	d835      	bhi.n	80082e6 <USBD_StdDevReq+0xb2>
 800827a:	009a      	lsls	r2, r3, #2
 800827c:	4b25      	ldr	r3, [pc, #148]	; (8008314 <USBD_StdDevReq+0xe0>)
 800827e:	18d3      	adds	r3, r2, r3
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	0011      	movs	r1, r2
 800828a:	0018      	movs	r0, r3
 800828c:	f000 fa52 	bl	8008734 <USBD_GetDescriptor>
          break;
 8008290:	e030      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	0011      	movs	r1, r2
 8008298:	0018      	movs	r0, r3
 800829a:	f000 fbfd 	bl	8008a98 <USBD_SetAddress>
          break;
 800829e:	e029      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	0011      	movs	r1, r2
 80082a6:	0018      	movs	r0, r3
 80082a8:	f000 fc4a 	bl	8008b40 <USBD_SetConfig>
          break;
 80082ac:	e022      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80082ae:	683a      	ldr	r2, [r7, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	0011      	movs	r1, r2
 80082b4:	0018      	movs	r0, r3
 80082b6:	f000 fce7 	bl	8008c88 <USBD_GetConfig>
          break;
 80082ba:	e01b      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	0011      	movs	r1, r2
 80082c2:	0018      	movs	r0, r3
 80082c4:	f000 fd1b 	bl	8008cfe <USBD_GetStatus>
          break;
 80082c8:	e014      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	0011      	movs	r1, r2
 80082d0:	0018      	movs	r0, r3
 80082d2:	f000 fd4e 	bl	8008d72 <USBD_SetFeature>
          break;
 80082d6:	e00d      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	0011      	movs	r1, r2
 80082de:	0018      	movs	r0, r3
 80082e0:	f000 fd5d 	bl	8008d9e <USBD_ClrFeature>
          break;
 80082e4:	e006      	b.n	80082f4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	0011      	movs	r1, r2
 80082ec:	0018      	movs	r0, r3
 80082ee:	f000 fdb7 	bl	8008e60 <USBD_CtlError>
          break;
 80082f2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80082f4:	e006      	b.n	8008304 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	683a      	ldr	r2, [r7, #0]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	0011      	movs	r1, r2
 80082fc:	0018      	movs	r0, r3
 80082fe:	f000 fdaf 	bl	8008e60 <USBD_CtlError>
      break;
 8008302:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008304:	230f      	movs	r3, #15
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	781b      	ldrb	r3, [r3, #0]
}
 800830a:	0018      	movs	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	b004      	add	sp, #16
 8008310:	bd80      	pop	{r7, pc}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	0800a3f4 	.word	0x0800a3f4

08008318 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008318:	b5b0      	push	{r4, r5, r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008322:	230f      	movs	r3, #15
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	001a      	movs	r2, r3
 8008330:	2360      	movs	r3, #96	; 0x60
 8008332:	4013      	ands	r3, r2
 8008334:	2b40      	cmp	r3, #64	; 0x40
 8008336:	d004      	beq.n	8008342 <USBD_StdItfReq+0x2a>
 8008338:	d839      	bhi.n	80083ae <USBD_StdItfReq+0x96>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <USBD_StdItfReq+0x2a>
 800833e:	2b20      	cmp	r3, #32
 8008340:	d135      	bne.n	80083ae <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	23a7      	movs	r3, #167	; 0xa7
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	5cd3      	ldrb	r3, [r2, r3]
 800834a:	3b01      	subs	r3, #1
 800834c:	2b02      	cmp	r3, #2
 800834e:	d825      	bhi.n	800839c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	889b      	ldrh	r3, [r3, #4]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b01      	cmp	r3, #1
 8008358:	d819      	bhi.n	800838e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	23ad      	movs	r3, #173	; 0xad
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	58d3      	ldr	r3, [r2, r3]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	250f      	movs	r5, #15
 8008366:	197c      	adds	r4, r7, r5
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	0010      	movs	r0, r2
 800836e:	4798      	blx	r3
 8008370:	0003      	movs	r3, r0
 8008372:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	88db      	ldrh	r3, [r3, #6]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d116      	bne.n	80083aa <USBD_StdItfReq+0x92>
 800837c:	197b      	adds	r3, r7, r5
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d112      	bne.n	80083aa <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	0018      	movs	r0, r3
 8008388:	f000 fe52 	bl	8009030 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800838c:	e00d      	b.n	80083aa <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	0011      	movs	r1, r2
 8008394:	0018      	movs	r0, r3
 8008396:	f000 fd63 	bl	8008e60 <USBD_CtlError>
          break;
 800839a:	e006      	b.n	80083aa <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	0011      	movs	r1, r2
 80083a2:	0018      	movs	r0, r3
 80083a4:	f000 fd5c 	bl	8008e60 <USBD_CtlError>
          break;
 80083a8:	e000      	b.n	80083ac <USBD_StdItfReq+0x94>
          break;
 80083aa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80083ac:	e006      	b.n	80083bc <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	0011      	movs	r1, r2
 80083b4:	0018      	movs	r0, r3
 80083b6:	f000 fd53 	bl	8008e60 <USBD_CtlError>
      break;
 80083ba:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	0018      	movs	r0, r3
 80083c0:	46bd      	mov	sp, r7
 80083c2:	b004      	add	sp, #16
 80083c4:	bdb0      	pop	{r4, r5, r7, pc}

080083c6 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80083c6:	b5b0      	push	{r4, r5, r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083d0:	230f      	movs	r3, #15
 80083d2:	18fb      	adds	r3, r7, r3
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	889a      	ldrh	r2, [r3, #4]
 80083dc:	230e      	movs	r3, #14
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	001a      	movs	r2, r3
 80083e8:	2360      	movs	r3, #96	; 0x60
 80083ea:	4013      	ands	r3, r2
 80083ec:	2b40      	cmp	r3, #64	; 0x40
 80083ee:	d006      	beq.n	80083fe <USBD_StdEPReq+0x38>
 80083f0:	d900      	bls.n	80083f4 <USBD_StdEPReq+0x2e>
 80083f2:	e190      	b.n	8008716 <USBD_StdEPReq+0x350>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00c      	beq.n	8008412 <USBD_StdEPReq+0x4c>
 80083f8:	2b20      	cmp	r3, #32
 80083fa:	d000      	beq.n	80083fe <USBD_StdEPReq+0x38>
 80083fc:	e18b      	b.n	8008716 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	23ad      	movs	r3, #173	; 0xad
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	58d3      	ldr	r3, [r2, r3]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	0010      	movs	r0, r2
 800840e:	4798      	blx	r3
      break;
 8008410:	e188      	b.n	8008724 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	001a      	movs	r2, r3
 8008418:	2360      	movs	r3, #96	; 0x60
 800841a:	4013      	ands	r3, r2
 800841c:	2b20      	cmp	r3, #32
 800841e:	d10f      	bne.n	8008440 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008420:	687a      	ldr	r2, [r7, #4]
 8008422:	23ad      	movs	r3, #173	; 0xad
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	58d3      	ldr	r3, [r2, r3]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	250f      	movs	r5, #15
 800842c:	197c      	adds	r4, r7, r5
 800842e:	6839      	ldr	r1, [r7, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	0010      	movs	r0, r2
 8008434:	4798      	blx	r3
 8008436:	0003      	movs	r3, r0
 8008438:	7023      	strb	r3, [r4, #0]

        return ret;
 800843a:	197b      	adds	r3, r7, r5
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	e174      	b.n	800872a <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	785b      	ldrb	r3, [r3, #1]
 8008444:	2b03      	cmp	r3, #3
 8008446:	d007      	beq.n	8008458 <USBD_StdEPReq+0x92>
 8008448:	dd00      	ble.n	800844c <USBD_StdEPReq+0x86>
 800844a:	e15c      	b.n	8008706 <USBD_StdEPReq+0x340>
 800844c:	2b00      	cmp	r3, #0
 800844e:	d100      	bne.n	8008452 <USBD_StdEPReq+0x8c>
 8008450:	e092      	b.n	8008578 <USBD_StdEPReq+0x1b2>
 8008452:	2b01      	cmp	r3, #1
 8008454:	d04b      	beq.n	80084ee <USBD_StdEPReq+0x128>
 8008456:	e156      	b.n	8008706 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	23a7      	movs	r3, #167	; 0xa7
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	5cd3      	ldrb	r3, [r2, r3]
 8008460:	2b02      	cmp	r3, #2
 8008462:	d002      	beq.n	800846a <USBD_StdEPReq+0xa4>
 8008464:	2b03      	cmp	r3, #3
 8008466:	d01d      	beq.n	80084a4 <USBD_StdEPReq+0xde>
 8008468:	e039      	b.n	80084de <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800846a:	220e      	movs	r2, #14
 800846c:	18bb      	adds	r3, r7, r2
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d010      	beq.n	8008496 <USBD_StdEPReq+0xd0>
 8008474:	18bb      	adds	r3, r7, r2
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	2b80      	cmp	r3, #128	; 0x80
 800847a:	d00c      	beq.n	8008496 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800847c:	18bb      	adds	r3, r7, r2
 800847e:	781a      	ldrb	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	0011      	movs	r1, r2
 8008484:	0018      	movs	r0, r3
 8008486:	f001 f938 	bl	80096fa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2180      	movs	r1, #128	; 0x80
 800848e:	0018      	movs	r0, r3
 8008490:	f001 f933 	bl	80096fa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008494:	e02a      	b.n	80084ec <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f000 fcdf 	bl	8008e60 <USBD_CtlError>
              break;
 80084a2:	e023      	b.n	80084ec <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d113      	bne.n	80084d4 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80084ac:	220e      	movs	r2, #14
 80084ae:	18bb      	adds	r3, r7, r2
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00e      	beq.n	80084d4 <USBD_StdEPReq+0x10e>
 80084b6:	18bb      	adds	r3, r7, r2
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	2b80      	cmp	r3, #128	; 0x80
 80084bc:	d00a      	beq.n	80084d4 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	88db      	ldrh	r3, [r3, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084c6:	18bb      	adds	r3, r7, r2
 80084c8:	781a      	ldrb	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	0011      	movs	r1, r2
 80084ce:	0018      	movs	r0, r3
 80084d0:	f001 f913 	bl	80096fa <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	0018      	movs	r0, r3
 80084d8:	f000 fdaa 	bl	8009030 <USBD_CtlSendStatus>

              break;
 80084dc:	e006      	b.n	80084ec <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80084de:	683a      	ldr	r2, [r7, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	0011      	movs	r1, r2
 80084e4:	0018      	movs	r0, r3
 80084e6:	f000 fcbb 	bl	8008e60 <USBD_CtlError>
              break;
 80084ea:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80084ec:	e112      	b.n	8008714 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	23a7      	movs	r3, #167	; 0xa7
 80084f2:	009b      	lsls	r3, r3, #2
 80084f4:	5cd3      	ldrb	r3, [r2, r3]
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d002      	beq.n	8008500 <USBD_StdEPReq+0x13a>
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d01d      	beq.n	800853a <USBD_StdEPReq+0x174>
 80084fe:	e032      	b.n	8008566 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008500:	220e      	movs	r2, #14
 8008502:	18bb      	adds	r3, r7, r2
 8008504:	781b      	ldrb	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d010      	beq.n	800852c <USBD_StdEPReq+0x166>
 800850a:	18bb      	adds	r3, r7, r2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	2b80      	cmp	r3, #128	; 0x80
 8008510:	d00c      	beq.n	800852c <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008512:	18bb      	adds	r3, r7, r2
 8008514:	781a      	ldrb	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0011      	movs	r1, r2
 800851a:	0018      	movs	r0, r3
 800851c:	f001 f8ed 	bl	80096fa <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2180      	movs	r1, #128	; 0x80
 8008524:	0018      	movs	r0, r3
 8008526:	f001 f8e8 	bl	80096fa <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800852a:	e024      	b.n	8008576 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800852c:	683a      	ldr	r2, [r7, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	0011      	movs	r1, r2
 8008532:	0018      	movs	r0, r3
 8008534:	f000 fc94 	bl	8008e60 <USBD_CtlError>
              break;
 8008538:	e01d      	b.n	8008576 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	885b      	ldrh	r3, [r3, #2]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d118      	bne.n	8008574 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008542:	210e      	movs	r1, #14
 8008544:	187b      	adds	r3, r7, r1
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	227f      	movs	r2, #127	; 0x7f
 800854a:	4013      	ands	r3, r2
 800854c:	d006      	beq.n	800855c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800854e:	187b      	adds	r3, r7, r1
 8008550:	781a      	ldrb	r2, [r3, #0]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	0011      	movs	r1, r2
 8008556:	0018      	movs	r0, r3
 8008558:	f001 f8fa 	bl	8009750 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0018      	movs	r0, r3
 8008560:	f000 fd66 	bl	8009030 <USBD_CtlSendStatus>
              }
              break;
 8008564:	e006      	b.n	8008574 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	0011      	movs	r1, r2
 800856c:	0018      	movs	r0, r3
 800856e:	f000 fc77 	bl	8008e60 <USBD_CtlError>
              break;
 8008572:	e000      	b.n	8008576 <USBD_StdEPReq+0x1b0>
              break;
 8008574:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008576:	e0cd      	b.n	8008714 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	23a7      	movs	r3, #167	; 0xa7
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	5cd3      	ldrb	r3, [r2, r3]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d002      	beq.n	800858a <USBD_StdEPReq+0x1c4>
 8008584:	2b03      	cmp	r3, #3
 8008586:	d03c      	beq.n	8008602 <USBD_StdEPReq+0x23c>
 8008588:	e0b5      	b.n	80086f6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800858a:	220e      	movs	r2, #14
 800858c:	18bb      	adds	r3, r7, r2
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00a      	beq.n	80085aa <USBD_StdEPReq+0x1e4>
 8008594:	18bb      	adds	r3, r7, r2
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b80      	cmp	r3, #128	; 0x80
 800859a:	d006      	beq.n	80085aa <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	0011      	movs	r1, r2
 80085a2:	0018      	movs	r0, r3
 80085a4:	f000 fc5c 	bl	8008e60 <USBD_CtlError>
                break;
 80085a8:	e0ac      	b.n	8008704 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085aa:	220e      	movs	r2, #14
 80085ac:	18bb      	adds	r3, r7, r2
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	b25b      	sxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da0c      	bge.n	80085d0 <USBD_StdEPReq+0x20a>
 80085b6:	18bb      	adds	r3, r7, r2
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	227f      	movs	r2, #127	; 0x7f
 80085bc:	401a      	ands	r2, r3
 80085be:	0013      	movs	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	189b      	adds	r3, r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	3310      	adds	r3, #16
 80085c8:	687a      	ldr	r2, [r7, #4]
 80085ca:	18d3      	adds	r3, r2, r3
 80085cc:	3304      	adds	r3, #4
 80085ce:	e00d      	b.n	80085ec <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085d0:	230e      	movs	r3, #14
 80085d2:	18fb      	adds	r3, r7, r3
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	227f      	movs	r2, #127	; 0x7f
 80085d8:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085da:	0013      	movs	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	3351      	adds	r3, #81	; 0x51
 80085e4:	33ff      	adds	r3, #255	; 0xff
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	18d3      	adds	r3, r2, r3
 80085ea:	3304      	adds	r3, #4
 80085ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085f4:	68b9      	ldr	r1, [r7, #8]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2202      	movs	r2, #2
 80085fa:	0018      	movs	r0, r3
 80085fc:	f000 fcae 	bl	8008f5c <USBD_CtlSendData>
              break;
 8008600:	e080      	b.n	8008704 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008602:	220e      	movs	r2, #14
 8008604:	18bb      	adds	r3, r7, r2
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	b25b      	sxtb	r3, r3
 800860a:	2b00      	cmp	r3, #0
 800860c:	da14      	bge.n	8008638 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800860e:	18bb      	adds	r3, r7, r2
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	220f      	movs	r2, #15
 8008614:	401a      	ands	r2, r3
 8008616:	6879      	ldr	r1, [r7, #4]
 8008618:	0013      	movs	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	189b      	adds	r3, r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	18cb      	adds	r3, r1, r3
 8008622:	3318      	adds	r3, #24
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d11e      	bne.n	8008668 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	0011      	movs	r1, r2
 8008630:	0018      	movs	r0, r3
 8008632:	f000 fc15 	bl	8008e60 <USBD_CtlError>
                  break;
 8008636:	e065      	b.n	8008704 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008638:	230e      	movs	r3, #14
 800863a:	18fb      	adds	r3, r7, r3
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	220f      	movs	r2, #15
 8008640:	401a      	ands	r2, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	23ac      	movs	r3, #172	; 0xac
 8008646:	0059      	lsls	r1, r3, #1
 8008648:	0013      	movs	r3, r2
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	189b      	adds	r3, r3, r2
 800864e:	009b      	lsls	r3, r3, #2
 8008650:	18c3      	adds	r3, r0, r3
 8008652:	185b      	adds	r3, r3, r1
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d106      	bne.n	8008668 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	0011      	movs	r1, r2
 8008660:	0018      	movs	r0, r3
 8008662:	f000 fbfd 	bl	8008e60 <USBD_CtlError>
                  break;
 8008666:	e04d      	b.n	8008704 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008668:	220e      	movs	r2, #14
 800866a:	18bb      	adds	r3, r7, r2
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	b25b      	sxtb	r3, r3
 8008670:	2b00      	cmp	r3, #0
 8008672:	da0c      	bge.n	800868e <USBD_StdEPReq+0x2c8>
 8008674:	18bb      	adds	r3, r7, r2
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	227f      	movs	r2, #127	; 0x7f
 800867a:	401a      	ands	r2, r3
 800867c:	0013      	movs	r3, r2
 800867e:	009b      	lsls	r3, r3, #2
 8008680:	189b      	adds	r3, r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	3310      	adds	r3, #16
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	18d3      	adds	r3, r2, r3
 800868a:	3304      	adds	r3, #4
 800868c:	e00d      	b.n	80086aa <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800868e:	230e      	movs	r3, #14
 8008690:	18fb      	adds	r3, r7, r3
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	227f      	movs	r2, #127	; 0x7f
 8008696:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008698:	0013      	movs	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	189b      	adds	r3, r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	3351      	adds	r3, #81	; 0x51
 80086a2:	33ff      	adds	r3, #255	; 0xff
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	18d3      	adds	r3, r2, r3
 80086a8:	3304      	adds	r3, #4
 80086aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086ac:	220e      	movs	r2, #14
 80086ae:	18bb      	adds	r3, r7, r2
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <USBD_StdEPReq+0x2f8>
 80086b6:	18bb      	adds	r3, r7, r2
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	2b80      	cmp	r3, #128	; 0x80
 80086bc:	d103      	bne.n	80086c6 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	2200      	movs	r2, #0
 80086c2:	601a      	str	r2, [r3, #0]
 80086c4:	e010      	b.n	80086e8 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80086c6:	230e      	movs	r3, #14
 80086c8:	18fb      	adds	r3, r7, r3
 80086ca:	781a      	ldrb	r2, [r3, #0]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	0011      	movs	r1, r2
 80086d0:	0018      	movs	r0, r3
 80086d2:	f001 f868 	bl	80097a6 <USBD_LL_IsStallEP>
 80086d6:	1e03      	subs	r3, r0, #0
 80086d8:	d003      	beq.n	80086e2 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	2201      	movs	r2, #1
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e002      	b.n	80086e8 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	2200      	movs	r2, #0
 80086e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e8:	68b9      	ldr	r1, [r7, #8]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2202      	movs	r2, #2
 80086ee:	0018      	movs	r0, r3
 80086f0:	f000 fc34 	bl	8008f5c <USBD_CtlSendData>
              break;
 80086f4:	e006      	b.n	8008704 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	0011      	movs	r1, r2
 80086fc:	0018      	movs	r0, r3
 80086fe:	f000 fbaf 	bl	8008e60 <USBD_CtlError>
              break;
 8008702:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008704:	e006      	b.n	8008714 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	0011      	movs	r1, r2
 800870c:	0018      	movs	r0, r3
 800870e:	f000 fba7 	bl	8008e60 <USBD_CtlError>
          break;
 8008712:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008714:	e006      	b.n	8008724 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	0011      	movs	r1, r2
 800871c:	0018      	movs	r0, r3
 800871e:	f000 fb9f 	bl	8008e60 <USBD_CtlError>
      break;
 8008722:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008724:	230f      	movs	r3, #15
 8008726:	18fb      	adds	r3, r7, r3
 8008728:	781b      	ldrb	r3, [r3, #0]
}
 800872a:	0018      	movs	r0, r3
 800872c:	46bd      	mov	sp, r7
 800872e:	b004      	add	sp, #16
 8008730:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008734 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800873e:	2308      	movs	r3, #8
 8008740:	18fb      	adds	r3, r7, r3
 8008742:	2200      	movs	r2, #0
 8008744:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008746:	2300      	movs	r3, #0
 8008748:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800874a:	230b      	movs	r3, #11
 800874c:	18fb      	adds	r3, r7, r3
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	885b      	ldrh	r3, [r3, #2]
 8008756:	0a1b      	lsrs	r3, r3, #8
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b07      	cmp	r3, #7
 800875c:	d900      	bls.n	8008760 <USBD_GetDescriptor+0x2c>
 800875e:	e159      	b.n	8008a14 <USBD_GetDescriptor+0x2e0>
 8008760:	009a      	lsls	r2, r3, #2
 8008762:	4bcb      	ldr	r3, [pc, #812]	; (8008a90 <USBD_GetDescriptor+0x35c>)
 8008764:	18d3      	adds	r3, r2, r3
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	23ac      	movs	r3, #172	; 0xac
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	58d3      	ldr	r3, [r2, r3]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	7c12      	ldrb	r2, [r2, #16]
 8008778:	2108      	movs	r1, #8
 800877a:	1879      	adds	r1, r7, r1
 800877c:	0010      	movs	r0, r2
 800877e:	4798      	blx	r3
 8008780:	0003      	movs	r3, r0
 8008782:	60fb      	str	r3, [r7, #12]
      break;
 8008784:	e153      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	7c1b      	ldrb	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10f      	bne.n	80087ae <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	23ad      	movs	r3, #173	; 0xad
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	58d3      	ldr	r3, [r2, r3]
 8008796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008798:	2208      	movs	r2, #8
 800879a:	18ba      	adds	r2, r7, r2
 800879c:	0010      	movs	r0, r2
 800879e:	4798      	blx	r3
 80087a0:	0003      	movs	r3, r0
 80087a2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	2202      	movs	r2, #2
 80087aa:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087ac:	e13f      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	23ad      	movs	r3, #173	; 0xad
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	58d3      	ldr	r3, [r2, r3]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	2208      	movs	r2, #8
 80087ba:	18ba      	adds	r2, r7, r2
 80087bc:	0010      	movs	r0, r2
 80087be:	4798      	blx	r3
 80087c0:	0003      	movs	r3, r0
 80087c2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	3301      	adds	r3, #1
 80087c8:	2202      	movs	r2, #2
 80087ca:	701a      	strb	r2, [r3, #0]
      break;
 80087cc:	e12f      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	885b      	ldrh	r3, [r3, #2]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b05      	cmp	r3, #5
 80087d6:	d900      	bls.n	80087da <USBD_GetDescriptor+0xa6>
 80087d8:	e0d0      	b.n	800897c <USBD_GetDescriptor+0x248>
 80087da:	009a      	lsls	r2, r3, #2
 80087dc:	4bad      	ldr	r3, [pc, #692]	; (8008a94 <USBD_GetDescriptor+0x360>)
 80087de:	18d3      	adds	r3, r2, r3
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	23ac      	movs	r3, #172	; 0xac
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	58d3      	ldr	r3, [r2, r3]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00d      	beq.n	800880e <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	23ac      	movs	r3, #172	; 0xac
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	58d3      	ldr	r3, [r2, r3]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	2108      	movs	r1, #8
 8008802:	1879      	adds	r1, r7, r1
 8008804:	0010      	movs	r0, r2
 8008806:	4798      	blx	r3
 8008808:	0003      	movs	r3, r0
 800880a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880c:	e0c3      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800880e:	683a      	ldr	r2, [r7, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	0011      	movs	r1, r2
 8008814:	0018      	movs	r0, r3
 8008816:	f000 fb23 	bl	8008e60 <USBD_CtlError>
            err++;
 800881a:	210b      	movs	r1, #11
 800881c:	187b      	adds	r3, r7, r1
 800881e:	781a      	ldrb	r2, [r3, #0]
 8008820:	187b      	adds	r3, r7, r1
 8008822:	3201      	adds	r2, #1
 8008824:	701a      	strb	r2, [r3, #0]
          break;
 8008826:	e0b6      	b.n	8008996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	23ac      	movs	r3, #172	; 0xac
 800882c:	009b      	lsls	r3, r3, #2
 800882e:	58d3      	ldr	r3, [r2, r3]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d00d      	beq.n	8008852 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008836:	687a      	ldr	r2, [r7, #4]
 8008838:	23ac      	movs	r3, #172	; 0xac
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	58d3      	ldr	r3, [r2, r3]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7c12      	ldrb	r2, [r2, #16]
 8008844:	2108      	movs	r1, #8
 8008846:	1879      	adds	r1, r7, r1
 8008848:	0010      	movs	r0, r2
 800884a:	4798      	blx	r3
 800884c:	0003      	movs	r3, r0
 800884e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008850:	e0a1      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	0011      	movs	r1, r2
 8008858:	0018      	movs	r0, r3
 800885a:	f000 fb01 	bl	8008e60 <USBD_CtlError>
            err++;
 800885e:	210b      	movs	r1, #11
 8008860:	187b      	adds	r3, r7, r1
 8008862:	781a      	ldrb	r2, [r3, #0]
 8008864:	187b      	adds	r3, r7, r1
 8008866:	3201      	adds	r2, #1
 8008868:	701a      	strb	r2, [r3, #0]
          break;
 800886a:	e094      	b.n	8008996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	23ac      	movs	r3, #172	; 0xac
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	58d3      	ldr	r3, [r2, r3]
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00d      	beq.n	8008896 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	23ac      	movs	r3, #172	; 0xac
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	58d3      	ldr	r3, [r2, r3]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	7c12      	ldrb	r2, [r2, #16]
 8008888:	2108      	movs	r1, #8
 800888a:	1879      	adds	r1, r7, r1
 800888c:	0010      	movs	r0, r2
 800888e:	4798      	blx	r3
 8008890:	0003      	movs	r3, r0
 8008892:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008894:	e07f      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	0011      	movs	r1, r2
 800889c:	0018      	movs	r0, r3
 800889e:	f000 fadf 	bl	8008e60 <USBD_CtlError>
            err++;
 80088a2:	210b      	movs	r1, #11
 80088a4:	187b      	adds	r3, r7, r1
 80088a6:	781a      	ldrb	r2, [r3, #0]
 80088a8:	187b      	adds	r3, r7, r1
 80088aa:	3201      	adds	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
          break;
 80088ae:	e072      	b.n	8008996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	23ac      	movs	r3, #172	; 0xac
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	58d3      	ldr	r3, [r2, r3]
 80088b8:	691b      	ldr	r3, [r3, #16]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00d      	beq.n	80088da <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	23ac      	movs	r3, #172	; 0xac
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	58d3      	ldr	r3, [r2, r3]
 80088c6:	691b      	ldr	r3, [r3, #16]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7c12      	ldrb	r2, [r2, #16]
 80088cc:	2108      	movs	r1, #8
 80088ce:	1879      	adds	r1, r7, r1
 80088d0:	0010      	movs	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	0003      	movs	r3, r0
 80088d6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088d8:	e05d      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80088da:	683a      	ldr	r2, [r7, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	0011      	movs	r1, r2
 80088e0:	0018      	movs	r0, r3
 80088e2:	f000 fabd 	bl	8008e60 <USBD_CtlError>
            err++;
 80088e6:	210b      	movs	r1, #11
 80088e8:	187b      	adds	r3, r7, r1
 80088ea:	781a      	ldrb	r2, [r3, #0]
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	3201      	adds	r2, #1
 80088f0:	701a      	strb	r2, [r3, #0]
          break;
 80088f2:	e050      	b.n	8008996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	23ac      	movs	r3, #172	; 0xac
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	58d3      	ldr	r3, [r2, r3]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00d      	beq.n	800891e <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	23ac      	movs	r3, #172	; 0xac
 8008906:	009b      	lsls	r3, r3, #2
 8008908:	58d3      	ldr	r3, [r2, r3]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	7c12      	ldrb	r2, [r2, #16]
 8008910:	2108      	movs	r1, #8
 8008912:	1879      	adds	r1, r7, r1
 8008914:	0010      	movs	r0, r2
 8008916:	4798      	blx	r3
 8008918:	0003      	movs	r3, r0
 800891a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800891c:	e03b      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800891e:	683a      	ldr	r2, [r7, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	0011      	movs	r1, r2
 8008924:	0018      	movs	r0, r3
 8008926:	f000 fa9b 	bl	8008e60 <USBD_CtlError>
            err++;
 800892a:	210b      	movs	r1, #11
 800892c:	187b      	adds	r3, r7, r1
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	187b      	adds	r3, r7, r1
 8008932:	3201      	adds	r2, #1
 8008934:	701a      	strb	r2, [r3, #0]
          break;
 8008936:	e02e      	b.n	8008996 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	23ac      	movs	r3, #172	; 0xac
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	58d3      	ldr	r3, [r2, r3]
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00d      	beq.n	8008962 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008946:	687a      	ldr	r2, [r7, #4]
 8008948:	23ac      	movs	r3, #172	; 0xac
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	58d3      	ldr	r3, [r2, r3]
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	2108      	movs	r1, #8
 8008956:	1879      	adds	r1, r7, r1
 8008958:	0010      	movs	r0, r2
 800895a:	4798      	blx	r3
 800895c:	0003      	movs	r3, r0
 800895e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008960:	e019      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008962:	683a      	ldr	r2, [r7, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	0011      	movs	r1, r2
 8008968:	0018      	movs	r0, r3
 800896a:	f000 fa79 	bl	8008e60 <USBD_CtlError>
            err++;
 800896e:	210b      	movs	r1, #11
 8008970:	187b      	adds	r3, r7, r1
 8008972:	781a      	ldrb	r2, [r3, #0]
 8008974:	187b      	adds	r3, r7, r1
 8008976:	3201      	adds	r2, #1
 8008978:	701a      	strb	r2, [r3, #0]
          break;
 800897a:	e00c      	b.n	8008996 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	0011      	movs	r1, r2
 8008982:	0018      	movs	r0, r3
 8008984:	f000 fa6c 	bl	8008e60 <USBD_CtlError>
          err++;
 8008988:	210b      	movs	r1, #11
 800898a:	187b      	adds	r3, r7, r1
 800898c:	781a      	ldrb	r2, [r3, #0]
 800898e:	187b      	adds	r3, r7, r1
 8008990:	3201      	adds	r2, #1
 8008992:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008994:	e04b      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>
 8008996:	e04a      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	7c1b      	ldrb	r3, [r3, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10b      	bne.n	80089b8 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	23ad      	movs	r3, #173	; 0xad
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	58d3      	ldr	r3, [r2, r3]
 80089a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089aa:	2208      	movs	r2, #8
 80089ac:	18ba      	adds	r2, r7, r2
 80089ae:	0010      	movs	r0, r2
 80089b0:	4798      	blx	r3
 80089b2:	0003      	movs	r3, r0
 80089b4:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089b6:	e03a      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80089b8:	683a      	ldr	r2, [r7, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	0011      	movs	r1, r2
 80089be:	0018      	movs	r0, r3
 80089c0:	f000 fa4e 	bl	8008e60 <USBD_CtlError>
        err++;
 80089c4:	210b      	movs	r1, #11
 80089c6:	187b      	adds	r3, r7, r1
 80089c8:	781a      	ldrb	r2, [r3, #0]
 80089ca:	187b      	adds	r3, r7, r1
 80089cc:	3201      	adds	r2, #1
 80089ce:	701a      	strb	r2, [r3, #0]
      break;
 80089d0:	e02d      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	7c1b      	ldrb	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10f      	bne.n	80089fa <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	23ad      	movs	r3, #173	; 0xad
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	58d3      	ldr	r3, [r2, r3]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	2208      	movs	r2, #8
 80089e6:	18ba      	adds	r2, r7, r2
 80089e8:	0010      	movs	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	0003      	movs	r3, r0
 80089ee:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3301      	adds	r3, #1
 80089f4:	2207      	movs	r2, #7
 80089f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089f8:	e019      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80089fa:	683a      	ldr	r2, [r7, #0]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	0011      	movs	r1, r2
 8008a00:	0018      	movs	r0, r3
 8008a02:	f000 fa2d 	bl	8008e60 <USBD_CtlError>
        err++;
 8008a06:	210b      	movs	r1, #11
 8008a08:	187b      	adds	r3, r7, r1
 8008a0a:	781a      	ldrb	r2, [r3, #0]
 8008a0c:	187b      	adds	r3, r7, r1
 8008a0e:	3201      	adds	r2, #1
 8008a10:	701a      	strb	r2, [r3, #0]
      break;
 8008a12:	e00c      	b.n	8008a2e <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008a14:	683a      	ldr	r2, [r7, #0]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	0011      	movs	r1, r2
 8008a1a:	0018      	movs	r0, r3
 8008a1c:	f000 fa20 	bl	8008e60 <USBD_CtlError>
      err++;
 8008a20:	210b      	movs	r1, #11
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	187b      	adds	r3, r7, r1
 8008a28:	3201      	adds	r2, #1
 8008a2a:	701a      	strb	r2, [r3, #0]
      break;
 8008a2c:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008a2e:	230b      	movs	r3, #11
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	781b      	ldrb	r3, [r3, #0]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d127      	bne.n	8008a88 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a38:	2108      	movs	r1, #8
 8008a3a:	187b      	adds	r3, r7, r1
 8008a3c:	881b      	ldrh	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d019      	beq.n	8008a76 <USBD_GetDescriptor+0x342>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	88db      	ldrh	r3, [r3, #6]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d015      	beq.n	8008a76 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	88da      	ldrh	r2, [r3, #6]
 8008a4e:	187b      	adds	r3, r7, r1
 8008a50:	881b      	ldrh	r3, [r3, #0]
 8008a52:	1c18      	adds	r0, r3, #0
 8008a54:	1c11      	adds	r1, r2, #0
 8008a56:	b28a      	uxth	r2, r1
 8008a58:	b283      	uxth	r3, r0
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d900      	bls.n	8008a60 <USBD_GetDescriptor+0x32c>
 8008a5e:	1c01      	adds	r1, r0, #0
 8008a60:	b28a      	uxth	r2, r1
 8008a62:	2108      	movs	r1, #8
 8008a64:	187b      	adds	r3, r7, r1
 8008a66:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a68:	187b      	adds	r3, r7, r1
 8008a6a:	881a      	ldrh	r2, [r3, #0]
 8008a6c:	68f9      	ldr	r1, [r7, #12]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	0018      	movs	r0, r3
 8008a72:	f000 fa73 	bl	8008f5c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	88db      	ldrh	r3, [r3, #6]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d105      	bne.n	8008a8a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	0018      	movs	r0, r3
 8008a82:	f000 fad5 	bl	8009030 <USBD_CtlSendStatus>
 8008a86:	e000      	b.n	8008a8a <USBD_GetDescriptor+0x356>
    return;
 8008a88:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	b004      	add	sp, #16
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	0800a41c 	.word	0x0800a41c
 8008a94:	0800a43c 	.word	0x0800a43c

08008a98 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	889b      	ldrh	r3, [r3, #4]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d13d      	bne.n	8008b26 <USBD_SetAddress+0x8e>
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	88db      	ldrh	r3, [r3, #6]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d139      	bne.n	8008b26 <USBD_SetAddress+0x8e>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	885b      	ldrh	r3, [r3, #2]
 8008ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ab8:	d835      	bhi.n	8008b26 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	885b      	ldrh	r3, [r3, #2]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	230f      	movs	r3, #15
 8008ac2:	18fb      	adds	r3, r7, r3
 8008ac4:	217f      	movs	r1, #127	; 0x7f
 8008ac6:	400a      	ands	r2, r1
 8008ac8:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	23a7      	movs	r3, #167	; 0xa7
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	5cd3      	ldrb	r3, [r2, r3]
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d106      	bne.n	8008ae4 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008ad6:	683a      	ldr	r2, [r7, #0]
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	0011      	movs	r1, r2
 8008adc:	0018      	movs	r0, r3
 8008ade:	f000 f9bf 	bl	8008e60 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae2:	e027      	b.n	8008b34 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	240f      	movs	r4, #15
 8008ae8:	193a      	adds	r2, r7, r4
 8008aea:	4914      	ldr	r1, [pc, #80]	; (8008b3c <USBD_SetAddress+0xa4>)
 8008aec:	7812      	ldrb	r2, [r2, #0]
 8008aee:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008af0:	193b      	adds	r3, r7, r4
 8008af2:	781a      	ldrb	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	0011      	movs	r1, r2
 8008af8:	0018      	movs	r0, r3
 8008afa:	f000 fe85 	bl	8009808 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	0018      	movs	r0, r3
 8008b02:	f000 fa95 	bl	8009030 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b06:	193b      	adds	r3, r7, r4
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	23a7      	movs	r3, #167	; 0xa7
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	2102      	movs	r1, #2
 8008b16:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b18:	e00c      	b.n	8008b34 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	23a7      	movs	r3, #167	; 0xa7
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	2101      	movs	r1, #1
 8008b22:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b24:	e006      	b.n	8008b34 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	0011      	movs	r1, r2
 8008b2c:	0018      	movs	r0, r3
 8008b2e:	f000 f997 	bl	8008e60 <USBD_CtlError>
  }
}
 8008b32:	46c0      	nop			; (mov r8, r8)
 8008b34:	46c0      	nop			; (mov r8, r8)
 8008b36:	46bd      	mov	sp, r7
 8008b38:	b005      	add	sp, #20
 8008b3a:	bd90      	pop	{r4, r7, pc}
 8008b3c:	0000029e 	.word	0x0000029e

08008b40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	4b4c      	ldr	r3, [pc, #304]	; (8008c84 <USBD_SetConfig+0x144>)
 8008b52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b54:	4b4b      	ldr	r3, [pc, #300]	; (8008c84 <USBD_SetConfig+0x144>)
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d906      	bls.n	8008b6a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0011      	movs	r1, r2
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 f97c 	bl	8008e60 <USBD_CtlError>
 8008b68:	e088      	b.n	8008c7c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008b6a:	687a      	ldr	r2, [r7, #4]
 8008b6c:	23a7      	movs	r3, #167	; 0xa7
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	5cd3      	ldrb	r3, [r2, r3]
 8008b72:	2b02      	cmp	r3, #2
 8008b74:	d002      	beq.n	8008b7c <USBD_SetConfig+0x3c>
 8008b76:	2b03      	cmp	r3, #3
 8008b78:	d029      	beq.n	8008bce <USBD_SetConfig+0x8e>
 8008b7a:	e071      	b.n	8008c60 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b7c:	4b41      	ldr	r3, [pc, #260]	; (8008c84 <USBD_SetConfig+0x144>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01f      	beq.n	8008bc4 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008b84:	4b3f      	ldr	r3, [pc, #252]	; (8008c84 <USBD_SetConfig+0x144>)
 8008b86:	781b      	ldrb	r3, [r3, #0]
 8008b88:	001a      	movs	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	23a7      	movs	r3, #167	; 0xa7
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	2103      	movs	r1, #3
 8008b96:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b98:	4b3a      	ldr	r3, [pc, #232]	; (8008c84 <USBD_SetConfig+0x144>)
 8008b9a:	781a      	ldrb	r2, [r3, #0]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	0011      	movs	r1, r2
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f7ff f8c5 	bl	8007d30 <USBD_SetClassConfig>
 8008ba6:	0003      	movs	r3, r0
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d106      	bne.n	8008bba <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	0011      	movs	r1, r2
 8008bb2:	0018      	movs	r0, r3
 8008bb4:	f000 f954 	bl	8008e60 <USBD_CtlError>
            return;
 8008bb8:	e060      	b.n	8008c7c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f000 fa37 	bl	8009030 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008bc2:	e05b      	b.n	8008c7c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f000 fa32 	bl	8009030 <USBD_CtlSendStatus>
        break;
 8008bcc:	e056      	b.n	8008c7c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008bce:	4b2d      	ldr	r3, [pc, #180]	; (8008c84 <USBD_SetConfig+0x144>)
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d115      	bne.n	8008c02 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	23a7      	movs	r3, #167	; 0xa7
 8008bda:	009b      	lsls	r3, r3, #2
 8008bdc:	2102      	movs	r1, #2
 8008bde:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <USBD_SetConfig+0x144>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	001a      	movs	r2, r3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008bea:	4b26      	ldr	r3, [pc, #152]	; (8008c84 <USBD_SetConfig+0x144>)
 8008bec:	781a      	ldrb	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	0011      	movs	r1, r2
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7ff f8c3 	bl	8007d7e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	f000 fa18 	bl	8009030 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008c00:	e03c      	b.n	8008c7c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008c02:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <USBD_SetConfig+0x144>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	001a      	movs	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d022      	beq.n	8008c56 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	b2da      	uxtb	r2, r3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	0011      	movs	r1, r2
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f7ff f8af 	bl	8007d7e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c20:	4b18      	ldr	r3, [pc, #96]	; (8008c84 <USBD_SetConfig+0x144>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	001a      	movs	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c2a:	4b16      	ldr	r3, [pc, #88]	; (8008c84 <USBD_SetConfig+0x144>)
 8008c2c:	781a      	ldrb	r2, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	0011      	movs	r1, r2
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff f87c 	bl	8007d30 <USBD_SetClassConfig>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d106      	bne.n	8008c4c <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008c3e:	683a      	ldr	r2, [r7, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	0011      	movs	r1, r2
 8008c44:	0018      	movs	r0, r3
 8008c46:	f000 f90b 	bl	8008e60 <USBD_CtlError>
            return;
 8008c4a:	e017      	b.n	8008c7c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f000 f9ee 	bl	8009030 <USBD_CtlSendStatus>
        break;
 8008c54:	e012      	b.n	8008c7c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	0018      	movs	r0, r3
 8008c5a:	f000 f9e9 	bl	8009030 <USBD_CtlSendStatus>
        break;
 8008c5e:	e00d      	b.n	8008c7c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008c60:	683a      	ldr	r2, [r7, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	0011      	movs	r1, r2
 8008c66:	0018      	movs	r0, r3
 8008c68:	f000 f8fa 	bl	8008e60 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <USBD_SetConfig+0x144>)
 8008c6e:	781a      	ldrb	r2, [r3, #0]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	0011      	movs	r1, r2
 8008c74:	0018      	movs	r0, r3
 8008c76:	f7ff f882 	bl	8007d7e <USBD_ClrClassConfig>
        break;
 8008c7a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	b002      	add	sp, #8
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	46c0      	nop			; (mov r8, r8)
 8008c84:	2000021c 	.word	0x2000021c

08008c88 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	88db      	ldrh	r3, [r3, #6]
 8008c96:	2b01      	cmp	r3, #1
 8008c98:	d006      	beq.n	8008ca8 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	0011      	movs	r1, r2
 8008ca0:	0018      	movs	r0, r3
 8008ca2:	f000 f8dd 	bl	8008e60 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ca6:	e026      	b.n	8008cf6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	23a7      	movs	r3, #167	; 0xa7
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	5cd3      	ldrb	r3, [r2, r3]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	dc02      	bgt.n	8008cba <USBD_GetConfig+0x32>
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	dc03      	bgt.n	8008cc0 <USBD_GetConfig+0x38>
 8008cb8:	e016      	b.n	8008ce8 <USBD_GetConfig+0x60>
 8008cba:	2b03      	cmp	r3, #3
 8008cbc:	d00c      	beq.n	8008cd8 <USBD_GetConfig+0x50>
 8008cbe:	e013      	b.n	8008ce8 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	3308      	adds	r3, #8
 8008cca:	0019      	movs	r1, r3
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	0018      	movs	r0, r3
 8008cd2:	f000 f943 	bl	8008f5c <USBD_CtlSendData>
        break;
 8008cd6:	e00e      	b.n	8008cf6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	1d19      	adds	r1, r3, #4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f000 f93b 	bl	8008f5c <USBD_CtlSendData>
        break;
 8008ce6:	e006      	b.n	8008cf6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	0011      	movs	r1, r2
 8008cee:	0018      	movs	r0, r3
 8008cf0:	f000 f8b6 	bl	8008e60 <USBD_CtlError>
        break;
 8008cf4:	46c0      	nop			; (mov r8, r8)
}
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	b002      	add	sp, #8
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	23a7      	movs	r3, #167	; 0xa7
 8008d0c:	009b      	lsls	r3, r3, #2
 8008d0e:	5cd3      	ldrb	r3, [r2, r3]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d822      	bhi.n	8008d5c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d006      	beq.n	8008d2c <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	0011      	movs	r1, r2
 8008d24:	0018      	movs	r0, r3
 8008d26:	f000 f89b 	bl	8008e60 <USBD_CtlError>
        break;
 8008d2a:	e01e      	b.n	8008d6a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	23a9      	movs	r3, #169	; 0xa9
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	58d3      	ldr	r3, [r2, r3]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d005      	beq.n	8008d4a <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	2202      	movs	r2, #2
 8008d44:	431a      	orrs	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	330c      	adds	r3, #12
 8008d4e:	0019      	movs	r1, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2202      	movs	r2, #2
 8008d54:	0018      	movs	r0, r3
 8008d56:	f000 f901 	bl	8008f5c <USBD_CtlSendData>
      break;
 8008d5a:	e006      	b.n	8008d6a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	0011      	movs	r1, r2
 8008d62:	0018      	movs	r0, r3
 8008d64:	f000 f87c 	bl	8008e60 <USBD_CtlError>
      break;
 8008d68:	46c0      	nop			; (mov r8, r8)
  }
}
 8008d6a:	46c0      	nop			; (mov r8, r8)
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	b002      	add	sp, #8
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b082      	sub	sp, #8
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
 8008d7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d108      	bne.n	8008d96 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	23a9      	movs	r3, #169	; 0xa9
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	0018      	movs	r0, r3
 8008d92:	f000 f94d 	bl	8009030 <USBD_CtlSendStatus>
  }
}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	b002      	add	sp, #8
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	23a7      	movs	r3, #167	; 0xa7
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	5cd3      	ldrb	r3, [r2, r3]
 8008db0:	3b01      	subs	r3, #1
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d80d      	bhi.n	8008dd2 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	885b      	ldrh	r3, [r3, #2]
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d110      	bne.n	8008de0 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	23a9      	movs	r3, #169	; 0xa9
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f000 f930 	bl	8009030 <USBD_CtlSendStatus>
      }
      break;
 8008dd0:	e006      	b.n	8008de0 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	683a      	ldr	r2, [r7, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	0011      	movs	r1, r2
 8008dd8:	0018      	movs	r0, r3
 8008dda:	f000 f841 	bl	8008e60 <USBD_CtlError>
      break;
 8008dde:	e000      	b.n	8008de2 <USBD_ClrFeature+0x44>
      break;
 8008de0:	46c0      	nop			; (mov r8, r8)
  }
}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b002      	add	sp, #8
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	781a      	ldrb	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	785a      	ldrb	r2, [r3, #1]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	3302      	adds	r3, #2
 8008e08:	781b      	ldrb	r3, [r3, #0]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	3303      	adds	r3, #3
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	021b      	lsls	r3, r3, #8
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	18d3      	adds	r3, r2, r3
 8008e1a:	b29a      	uxth	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	3304      	adds	r3, #4
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	3305      	adds	r3, #5
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	021b      	lsls	r3, r3, #8
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	18d3      	adds	r3, r2, r3
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	3306      	adds	r3, #6
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	3307      	adds	r3, #7
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	18d3      	adds	r3, r2, r3
 8008e52:	b29a      	uxth	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	80da      	strh	r2, [r3, #6]

}
 8008e58:	46c0      	nop			; (mov r8, r8)
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	b002      	add	sp, #8
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2180      	movs	r1, #128	; 0x80
 8008e6e:	0018      	movs	r0, r3
 8008e70:	f000 fc43 	bl	80096fa <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2100      	movs	r1, #0
 8008e78:	0018      	movs	r0, r3
 8008e7a:	f000 fc3e 	bl	80096fa <USBD_LL_StallEP>
}
 8008e7e:	46c0      	nop			; (mov r8, r8)
 8008e80:	46bd      	mov	sp, r7
 8008e82:	b002      	add	sp, #8
 8008e84:	bd80      	pop	{r7, pc}

08008e86 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e86:	b590      	push	{r4, r7, lr}
 8008e88:	b087      	sub	sp, #28
 8008e8a:	af00      	add	r7, sp, #0
 8008e8c:	60f8      	str	r0, [r7, #12]
 8008e8e:	60b9      	str	r1, [r7, #8]
 8008e90:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e92:	2417      	movs	r4, #23
 8008e94:	193b      	adds	r3, r7, r4
 8008e96:	2200      	movs	r2, #0
 8008e98:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d03c      	beq.n	8008f1a <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f000 f83d 	bl	8008f22 <USBD_GetLen>
 8008ea8:	0003      	movs	r3, r0
 8008eaa:	3301      	adds	r3, #1
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	18db      	adds	r3, r3, r3
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008eb6:	193b      	adds	r3, r7, r4
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	193a      	adds	r2, r7, r4
 8008ebc:	1c59      	adds	r1, r3, #1
 8008ebe:	7011      	strb	r1, [r2, #0]
 8008ec0:	001a      	movs	r2, r3
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	189b      	adds	r3, r3, r2
 8008ec6:	687a      	ldr	r2, [r7, #4]
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008ecc:	193b      	adds	r3, r7, r4
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	193a      	adds	r2, r7, r4
 8008ed2:	1c59      	adds	r1, r3, #1
 8008ed4:	7011      	strb	r1, [r2, #0]
 8008ed6:	001a      	movs	r2, r3
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	189b      	adds	r3, r3, r2
 8008edc:	2203      	movs	r2, #3
 8008ede:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008ee0:	e017      	b.n	8008f12 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	1c5a      	adds	r2, r3, #1
 8008ee6:	60fa      	str	r2, [r7, #12]
 8008ee8:	2417      	movs	r4, #23
 8008eea:	193a      	adds	r2, r7, r4
 8008eec:	7812      	ldrb	r2, [r2, #0]
 8008eee:	1939      	adds	r1, r7, r4
 8008ef0:	1c50      	adds	r0, r2, #1
 8008ef2:	7008      	strb	r0, [r1, #0]
 8008ef4:	0011      	movs	r1, r2
 8008ef6:	68ba      	ldr	r2, [r7, #8]
 8008ef8:	1852      	adds	r2, r2, r1
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008efe:	193b      	adds	r3, r7, r4
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	193a      	adds	r2, r7, r4
 8008f04:	1c59      	adds	r1, r3, #1
 8008f06:	7011      	strb	r1, [r2, #0]
 8008f08:	001a      	movs	r2, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	189b      	adds	r3, r3, r2
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e3      	bne.n	8008ee2 <USBD_GetString+0x5c>
    }
  }
}
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	b007      	add	sp, #28
 8008f20:	bd90      	pop	{r4, r7, pc}

08008f22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f2a:	230f      	movs	r3, #15
 8008f2c:	18fb      	adds	r3, r7, r3
 8008f2e:	2200      	movs	r2, #0
 8008f30:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008f32:	e008      	b.n	8008f46 <USBD_GetLen+0x24>
  {
    len++;
 8008f34:	210f      	movs	r1, #15
 8008f36:	187b      	adds	r3, r7, r1
 8008f38:	781a      	ldrb	r2, [r3, #0]
 8008f3a:	187b      	adds	r3, r7, r1
 8008f3c:	3201      	adds	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
    buf++;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	3301      	adds	r3, #1
 8008f44:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	781b      	ldrb	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d1f2      	bne.n	8008f34 <USBD_GetLen+0x12>
  }

  return len;
 8008f4e:	230f      	movs	r3, #15
 8008f50:	18fb      	adds	r3, r7, r3
 8008f52:	781b      	ldrb	r3, [r3, #0]
}
 8008f54:	0018      	movs	r0, r3
 8008f56:	46bd      	mov	sp, r7
 8008f58:	b004      	add	sp, #16
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	60f8      	str	r0, [r7, #12]
 8008f64:	60b9      	str	r1, [r7, #8]
 8008f66:	1dbb      	adds	r3, r7, #6
 8008f68:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f6a:	68fa      	ldr	r2, [r7, #12]
 8008f6c:	23a5      	movs	r3, #165	; 0xa5
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	2102      	movs	r1, #2
 8008f72:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008f74:	1dbb      	adds	r3, r7, #6
 8008f76:	881a      	ldrh	r2, [r3, #0]
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f7c:	1dbb      	adds	r3, r7, #6
 8008f7e:	881a      	ldrh	r2, [r3, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f84:	1dbb      	adds	r3, r7, #6
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	68f8      	ldr	r0, [r7, #12]
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	f000 fc66 	bl	800985e <USBD_LL_Transmit>

  return USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	0018      	movs	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	b004      	add	sp, #16
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	1dbb      	adds	r3, r7, #6
 8008fa8:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008faa:	1dbb      	adds	r3, r7, #6
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	f000 fc53 	bl	800985e <USBD_LL_Transmit>

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	0018      	movs	r0, r3
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	b004      	add	sp, #16
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b084      	sub	sp, #16
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	60f8      	str	r0, [r7, #12]
 8008fca:	60b9      	str	r1, [r7, #8]
 8008fcc:	1dbb      	adds	r3, r7, #6
 8008fce:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fd0:	68fa      	ldr	r2, [r7, #12]
 8008fd2:	23a5      	movs	r3, #165	; 0xa5
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	2103      	movs	r1, #3
 8008fd8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008fda:	1dbb      	adds	r3, r7, #6
 8008fdc:	8819      	ldrh	r1, [r3, #0]
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	23ae      	movs	r3, #174	; 0xae
 8008fe2:	005b      	lsls	r3, r3, #1
 8008fe4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008fe6:	1dbb      	adds	r3, r7, #6
 8008fe8:	8819      	ldrh	r1, [r3, #0]
 8008fea:	68fa      	ldr	r2, [r7, #12]
 8008fec:	23b0      	movs	r3, #176	; 0xb0
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ff2:	1dbb      	adds	r3, r7, #6
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	68ba      	ldr	r2, [r7, #8]
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	f000 fc66 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009000:	2300      	movs	r3, #0
}
 8009002:	0018      	movs	r0, r3
 8009004:	46bd      	mov	sp, r7
 8009006:	b004      	add	sp, #16
 8009008:	bd80      	pop	{r7, pc}

0800900a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b084      	sub	sp, #16
 800900e:	af00      	add	r7, sp, #0
 8009010:	60f8      	str	r0, [r7, #12]
 8009012:	60b9      	str	r1, [r7, #8]
 8009014:	1dbb      	adds	r3, r7, #6
 8009016:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009018:	1dbb      	adds	r3, r7, #6
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	68ba      	ldr	r2, [r7, #8]
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	2100      	movs	r1, #0
 8009022:	f000 fc53 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	0018      	movs	r0, r3
 800902a:	46bd      	mov	sp, r7
 800902c:	b004      	add	sp, #16
 800902e:	bd80      	pop	{r7, pc}

08009030 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	23a5      	movs	r3, #165	; 0xa5
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	2104      	movs	r1, #4
 8009040:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	2300      	movs	r3, #0
 8009046:	2200      	movs	r2, #0
 8009048:	2100      	movs	r1, #0
 800904a:	f000 fc08 	bl	800985e <USBD_LL_Transmit>

  return USBD_OK;
 800904e:	2300      	movs	r3, #0
}
 8009050:	0018      	movs	r0, r3
 8009052:	46bd      	mov	sp, r7
 8009054:	b002      	add	sp, #8
 8009056:	bd80      	pop	{r7, pc}

08009058 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	23a5      	movs	r3, #165	; 0xa5
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	2105      	movs	r1, #5
 8009068:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	2300      	movs	r3, #0
 800906e:	2200      	movs	r2, #0
 8009070:	2100      	movs	r1, #0
 8009072:	f000 fc2b 	bl	80098cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	0018      	movs	r0, r3
 800907a:	46bd      	mov	sp, r7
 800907c:	b002      	add	sp, #8
 800907e:	bd80      	pop	{r7, pc}

08009080 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009084:	4914      	ldr	r1, [pc, #80]	; (80090d8 <MX_USB_DEVICE_Init+0x58>)
 8009086:	4b15      	ldr	r3, [pc, #84]	; (80090dc <MX_USB_DEVICE_Init+0x5c>)
 8009088:	2200      	movs	r2, #0
 800908a:	0018      	movs	r0, r3
 800908c:	f7fe fde9 	bl	8007c62 <USBD_Init>
 8009090:	1e03      	subs	r3, r0, #0
 8009092:	d001      	beq.n	8009098 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009094:	f7f7 ff58 	bl	8000f48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009098:	4a11      	ldr	r2, [pc, #68]	; (80090e0 <MX_USB_DEVICE_Init+0x60>)
 800909a:	4b10      	ldr	r3, [pc, #64]	; (80090dc <MX_USB_DEVICE_Init+0x5c>)
 800909c:	0011      	movs	r1, r2
 800909e:	0018      	movs	r0, r3
 80090a0:	f7fe fe10 	bl	8007cc4 <USBD_RegisterClass>
 80090a4:	1e03      	subs	r3, r0, #0
 80090a6:	d001      	beq.n	80090ac <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80090a8:	f7f7 ff4e 	bl	8000f48 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80090ac:	4a0d      	ldr	r2, [pc, #52]	; (80090e4 <MX_USB_DEVICE_Init+0x64>)
 80090ae:	4b0b      	ldr	r3, [pc, #44]	; (80090dc <MX_USB_DEVICE_Init+0x5c>)
 80090b0:	0011      	movs	r1, r2
 80090b2:	0018      	movs	r0, r3
 80090b4:	f7fe fdba 	bl	8007c2c <USBD_CUSTOM_HID_RegisterInterface>
 80090b8:	1e03      	subs	r3, r0, #0
 80090ba:	d001      	beq.n	80090c0 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80090bc:	f7f7 ff44 	bl	8000f48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090c0:	4b06      	ldr	r3, [pc, #24]	; (80090dc <MX_USB_DEVICE_Init+0x5c>)
 80090c2:	0018      	movs	r0, r3
 80090c4:	f7fe fe1e 	bl	8007d04 <USBD_Start>
 80090c8:	1e03      	subs	r3, r0, #0
 80090ca:	d001      	beq.n	80090d0 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80090cc:	f7f7 ff3c 	bl	8000f48 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090d0:	46c0      	nop			; (mov r8, r8)
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	46c0      	nop			; (mov r8, r8)
 80090d8:	20000148 	.word	0x20000148
 80090dc:	20000338 	.word	0x20000338
 80090e0:	2000000c 	.word	0x2000000c
 80090e4:	20000138 	.word	0x20000138

080090e8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090ee:	0018      	movs	r0, r3
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80090f8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090fa:	0018      	movs	r0, r3
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	0002      	movs	r2, r0
 8009108:	1dfb      	adds	r3, r7, #7
 800910a:	701a      	strb	r2, [r3, #0]
 800910c:	1dbb      	adds	r3, r7, #6
 800910e:	1c0a      	adds	r2, r1, #0
 8009110:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009114:	0018      	movs	r0, r3
 8009116:	46bd      	mov	sp, r7
 8009118:	b002      	add	sp, #8
 800911a:	bd80      	pop	{r7, pc}

0800911c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	0002      	movs	r2, r0
 8009124:	6039      	str	r1, [r7, #0]
 8009126:	1dfb      	adds	r3, r7, #7
 8009128:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2212      	movs	r2, #18
 800912e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009132:	0018      	movs	r0, r3
 8009134:	46bd      	mov	sp, r7
 8009136:	b002      	add	sp, #8
 8009138:	bd80      	pop	{r7, pc}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	20000164 	.word	0x20000164

08009140 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	0002      	movs	r2, r0
 8009148:	6039      	str	r1, [r7, #0]
 800914a:	1dfb      	adds	r3, r7, #7
 800914c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2204      	movs	r2, #4
 8009152:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009156:	0018      	movs	r0, r3
 8009158:	46bd      	mov	sp, r7
 800915a:	b002      	add	sp, #8
 800915c:	bd80      	pop	{r7, pc}
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	20000178 	.word	0x20000178

08009164 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
 800916a:	0002      	movs	r2, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	1dfb      	adds	r3, r7, #7
 8009170:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009172:	1dfb      	adds	r3, r7, #7
 8009174:	781b      	ldrb	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d106      	bne.n	8009188 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4908      	ldr	r1, [pc, #32]	; (80091a0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800917e:	4b09      	ldr	r3, [pc, #36]	; (80091a4 <USBD_FS_ProductStrDescriptor+0x40>)
 8009180:	0018      	movs	r0, r3
 8009182:	f7ff fe80 	bl	8008e86 <USBD_GetString>
 8009186:	e005      	b.n	8009194 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	4905      	ldr	r1, [pc, #20]	; (80091a0 <USBD_FS_ProductStrDescriptor+0x3c>)
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <USBD_FS_ProductStrDescriptor+0x40>)
 800918e:	0018      	movs	r0, r3
 8009190:	f7ff fe79 	bl	8008e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009194:	4b02      	ldr	r3, [pc, #8]	; (80091a0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8009196:	0018      	movs	r0, r3
 8009198:	46bd      	mov	sp, r7
 800919a:	b002      	add	sp, #8
 800919c:	bd80      	pop	{r7, pc}
 800919e:	46c0      	nop			; (mov r8, r8)
 80091a0:	200005fc 	.word	0x200005fc
 80091a4:	0800a2f8 	.word	0x0800a2f8

080091a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	0002      	movs	r2, r0
 80091b0:	6039      	str	r1, [r7, #0]
 80091b2:	1dfb      	adds	r3, r7, #7
 80091b4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	4904      	ldr	r1, [pc, #16]	; (80091cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80091bc:	0018      	movs	r0, r3
 80091be:	f7ff fe62 	bl	8008e86 <USBD_GetString>
  return USBD_StrDesc;
 80091c2:	4b02      	ldr	r3, [pc, #8]	; (80091cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80091c4:	0018      	movs	r0, r3
 80091c6:	46bd      	mov	sp, r7
 80091c8:	b002      	add	sp, #8
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	200005fc 	.word	0x200005fc
 80091d0:	0800a318 	.word	0x0800a318

080091d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	0002      	movs	r2, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	1dfb      	adds	r3, r7, #7
 80091e0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	221a      	movs	r2, #26
 80091e6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091e8:	f000 f84c 	bl	8009284 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80091ee:	0018      	movs	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	b002      	add	sp, #8
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	2000017c 	.word	0x2000017c

080091fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	0002      	movs	r2, r0
 8009204:	6039      	str	r1, [r7, #0]
 8009206:	1dfb      	adds	r3, r7, #7
 8009208:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800920a:	1dfb      	adds	r3, r7, #7
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d106      	bne.n	8009220 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009212:	683a      	ldr	r2, [r7, #0]
 8009214:	4908      	ldr	r1, [pc, #32]	; (8009238 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009216:	4b09      	ldr	r3, [pc, #36]	; (800923c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009218:	0018      	movs	r0, r3
 800921a:	f7ff fe34 	bl	8008e86 <USBD_GetString>
 800921e:	e005      	b.n	800922c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	4905      	ldr	r1, [pc, #20]	; (8009238 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <USBD_FS_ConfigStrDescriptor+0x40>)
 8009226:	0018      	movs	r0, r3
 8009228:	f7ff fe2d 	bl	8008e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 800922c:	4b02      	ldr	r3, [pc, #8]	; (8009238 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800922e:	0018      	movs	r0, r3
 8009230:	46bd      	mov	sp, r7
 8009232:	b002      	add	sp, #8
 8009234:	bd80      	pop	{r7, pc}
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	200005fc 	.word	0x200005fc
 800923c:	0800a32c 	.word	0x0800a32c

08009240 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	0002      	movs	r2, r0
 8009248:	6039      	str	r1, [r7, #0]
 800924a:	1dfb      	adds	r3, r7, #7
 800924c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800924e:	1dfb      	adds	r3, r7, #7
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d106      	bne.n	8009264 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	4908      	ldr	r1, [pc, #32]	; (800927c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800925a:	4b09      	ldr	r3, [pc, #36]	; (8009280 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800925c:	0018      	movs	r0, r3
 800925e:	f7ff fe12 	bl	8008e86 <USBD_GetString>
 8009262:	e005      	b.n	8009270 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	4905      	ldr	r1, [pc, #20]	; (800927c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009268:	4b05      	ldr	r3, [pc, #20]	; (8009280 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800926a:	0018      	movs	r0, r3
 800926c:	f7ff fe0b 	bl	8008e86 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8009272:	0018      	movs	r0, r3
 8009274:	46bd      	mov	sp, r7
 8009276:	b002      	add	sp, #8
 8009278:	bd80      	pop	{r7, pc}
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	200005fc 	.word	0x200005fc
 8009280:	0800a340 	.word	0x0800a340

08009284 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800928a:	4b10      	ldr	r3, [pc, #64]	; (80092cc <Get_SerialNum+0x48>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009290:	4b0f      	ldr	r3, [pc, #60]	; (80092d0 <Get_SerialNum+0x4c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <Get_SerialNum+0x50>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	18d3      	adds	r3, r2, r3
 80092a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d00b      	beq.n	80092c2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80092aa:	490b      	ldr	r1, [pc, #44]	; (80092d8 <Get_SerialNum+0x54>)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2208      	movs	r2, #8
 80092b0:	0018      	movs	r0, r3
 80092b2:	f000 f815 	bl	80092e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80092b6:	4909      	ldr	r1, [pc, #36]	; (80092dc <Get_SerialNum+0x58>)
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	2204      	movs	r2, #4
 80092bc:	0018      	movs	r0, r3
 80092be:	f000 f80f 	bl	80092e0 <IntToUnicode>
  }
}
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	46bd      	mov	sp, r7
 80092c6:	b004      	add	sp, #16
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	46c0      	nop			; (mov r8, r8)
 80092cc:	1ff80050 	.word	0x1ff80050
 80092d0:	1ff80054 	.word	0x1ff80054
 80092d4:	1ff80058 	.word	0x1ff80058
 80092d8:	2000017e 	.word	0x2000017e
 80092dc:	2000018e 	.word	0x2000018e

080092e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	1dfb      	adds	r3, r7, #7
 80092ec:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80092ee:	2117      	movs	r1, #23
 80092f0:	187b      	adds	r3, r7, r1
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80092f6:	187b      	adds	r3, r7, r1
 80092f8:	2200      	movs	r2, #0
 80092fa:	701a      	strb	r2, [r3, #0]
 80092fc:	e02f      	b.n	800935e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	0f1b      	lsrs	r3, r3, #28
 8009302:	2b09      	cmp	r3, #9
 8009304:	d80d      	bhi.n	8009322 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	0f1b      	lsrs	r3, r3, #28
 800930a:	b2da      	uxtb	r2, r3
 800930c:	2317      	movs	r3, #23
 800930e:	18fb      	adds	r3, r7, r3
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	0019      	movs	r1, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	185b      	adds	r3, r3, r1
 800931a:	3230      	adds	r2, #48	; 0x30
 800931c:	b2d2      	uxtb	r2, r2
 800931e:	701a      	strb	r2, [r3, #0]
 8009320:	e00c      	b.n	800933c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	0f1b      	lsrs	r3, r3, #28
 8009326:	b2da      	uxtb	r2, r3
 8009328:	2317      	movs	r3, #23
 800932a:	18fb      	adds	r3, r7, r3
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	005b      	lsls	r3, r3, #1
 8009330:	0019      	movs	r1, r3
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	185b      	adds	r3, r3, r1
 8009336:	3237      	adds	r2, #55	; 0x37
 8009338:	b2d2      	uxtb	r2, r2
 800933a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009342:	2117      	movs	r1, #23
 8009344:	187b      	adds	r3, r7, r1
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	005b      	lsls	r3, r3, #1
 800934a:	3301      	adds	r3, #1
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	18d3      	adds	r3, r2, r3
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009354:	187b      	adds	r3, r7, r1
 8009356:	781a      	ldrb	r2, [r3, #0]
 8009358:	187b      	adds	r3, r7, r1
 800935a:	3201      	adds	r2, #1
 800935c:	701a      	strb	r2, [r3, #0]
 800935e:	2317      	movs	r3, #23
 8009360:	18fa      	adds	r2, r7, r3
 8009362:	1dfb      	adds	r3, r7, #7
 8009364:	7812      	ldrb	r2, [r2, #0]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	429a      	cmp	r2, r3
 800936a:	d3c8      	bcc.n	80092fe <IntToUnicode+0x1e>
  }
}
 800936c:	46c0      	nop			; (mov r8, r8)
 800936e:	46c0      	nop			; (mov r8, r8)
 8009370:	46bd      	mov	sp, r7
 8009372:	b006      	add	sp, #24
 8009374:	bd80      	pop	{r7, pc}
	...

08009378 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <HAL_PCD_MspInit+0x38>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d10e      	bne.n	80093a8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800938a:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <HAL_PCD_MspInit+0x3c>)
 800938c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800938e:	4b09      	ldr	r3, [pc, #36]	; (80093b4 <HAL_PCD_MspInit+0x3c>)
 8009390:	2180      	movs	r1, #128	; 0x80
 8009392:	0409      	lsls	r1, r1, #16
 8009394:	430a      	orrs	r2, r1
 8009396:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009398:	2200      	movs	r2, #0
 800939a:	2100      	movs	r1, #0
 800939c:	201f      	movs	r0, #31
 800939e:	f7f8 fcc3 	bl	8001d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80093a2:	201f      	movs	r0, #31
 80093a4:	f7f8 fcd5 	bl	8001d52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80093a8:	46c0      	nop			; (mov r8, r8)
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b002      	add	sp, #8
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	40005c00 	.word	0x40005c00
 80093b4:	40021000 	.word	0x40021000

080093b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	23bc      	movs	r3, #188	; 0xbc
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	58d2      	ldr	r2, [r2, r3]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	21ac      	movs	r1, #172	; 0xac
 80093cc:	0089      	lsls	r1, r1, #2
 80093ce:	468c      	mov	ip, r1
 80093d0:	4463      	add	r3, ip
 80093d2:	0019      	movs	r1, r3
 80093d4:	0010      	movs	r0, r2
 80093d6:	f7fe fce9 	bl	8007dac <USBD_LL_SetupStage>
}
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	46bd      	mov	sp, r7
 80093de:	b002      	add	sp, #8
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e2:	b590      	push	{r4, r7, lr}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
 80093ea:	000a      	movs	r2, r1
 80093ec:	1cfb      	adds	r3, r7, #3
 80093ee:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	23bc      	movs	r3, #188	; 0xbc
 80093f4:	009b      	lsls	r3, r3, #2
 80093f6:	58d4      	ldr	r4, [r2, r3]
 80093f8:	1cfb      	adds	r3, r7, #3
 80093fa:	781a      	ldrb	r2, [r3, #0]
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	23be      	movs	r3, #190	; 0xbe
 8009400:	0059      	lsls	r1, r3, #1
 8009402:	0013      	movs	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	189b      	adds	r3, r3, r2
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	18c3      	adds	r3, r0, r3
 800940c:	185b      	adds	r3, r3, r1
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	1cfb      	adds	r3, r7, #3
 8009412:	781b      	ldrb	r3, [r3, #0]
 8009414:	0019      	movs	r1, r3
 8009416:	0020      	movs	r0, r4
 8009418:	f7fe fd26 	bl	8007e68 <USBD_LL_DataOutStage>
}
 800941c:	46c0      	nop			; (mov r8, r8)
 800941e:	46bd      	mov	sp, r7
 8009420:	b003      	add	sp, #12
 8009422:	bd90      	pop	{r4, r7, pc}

08009424 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	000a      	movs	r2, r1
 800942e:	1cfb      	adds	r3, r7, #3
 8009430:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	23bc      	movs	r3, #188	; 0xbc
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	58d0      	ldr	r0, [r2, r3]
 800943a:	1cfb      	adds	r3, r7, #3
 800943c:	781a      	ldrb	r2, [r3, #0]
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	0013      	movs	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	189b      	adds	r3, r3, r2
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	18cb      	adds	r3, r1, r3
 800944a:	333c      	adds	r3, #60	; 0x3c
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	1cfb      	adds	r3, r7, #3
 8009450:	781b      	ldrb	r3, [r3, #0]
 8009452:	0019      	movs	r1, r3
 8009454:	f7fe fd8a 	bl	8007f6c <USBD_LL_DataInStage>
}
 8009458:	46c0      	nop			; (mov r8, r8)
 800945a:	46bd      	mov	sp, r7
 800945c:	b002      	add	sp, #8
 800945e:	bd80      	pop	{r7, pc}

08009460 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b082      	sub	sp, #8
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	23bc      	movs	r3, #188	; 0xbc
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	58d3      	ldr	r3, [r2, r3]
 8009470:	0018      	movs	r0, r3
 8009472:	f7fe fec1 	bl	80081f8 <USBD_LL_SOF>
}
 8009476:	46c0      	nop			; (mov r8, r8)
 8009478:	46bd      	mov	sp, r7
 800947a:	b002      	add	sp, #8
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b084      	sub	sp, #16
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009486:	230f      	movs	r3, #15
 8009488:	18fb      	adds	r3, r7, r3
 800948a:	2201      	movs	r2, #1
 800948c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d001      	beq.n	800949a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8009496:	f7f7 fd57 	bl	8000f48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	23bc      	movs	r3, #188	; 0xbc
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	58d2      	ldr	r2, [r2, r3]
 80094a2:	230f      	movs	r3, #15
 80094a4:	18fb      	adds	r3, r7, r3
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	0019      	movs	r1, r3
 80094aa:	0010      	movs	r0, r2
 80094ac:	f7fe fe63 	bl	8008176 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	23bc      	movs	r3, #188	; 0xbc
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	58d3      	ldr	r3, [r2, r3]
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7fe fe14 	bl	80080e6 <USBD_LL_Reset>
}
 80094be:	46c0      	nop			; (mov r8, r8)
 80094c0:	46bd      	mov	sp, r7
 80094c2:	b004      	add	sp, #16
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094d0:	687a      	ldr	r2, [r7, #4]
 80094d2:	23bc      	movs	r3, #188	; 0xbc
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	58d3      	ldr	r3, [r2, r3]
 80094d8:	0018      	movs	r0, r3
 80094da:	f7fe fe5d 	bl	8008198 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d005      	beq.n	80094f2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094e6:	4b05      	ldr	r3, [pc, #20]	; (80094fc <HAL_PCD_SuspendCallback+0x34>)
 80094e8:	691a      	ldr	r2, [r3, #16]
 80094ea:	4b04      	ldr	r3, [pc, #16]	; (80094fc <HAL_PCD_SuspendCallback+0x34>)
 80094ec:	2106      	movs	r1, #6
 80094ee:	430a      	orrs	r2, r1
 80094f0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	46bd      	mov	sp, r7
 80094f6:	b002      	add	sp, #8
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	e000ed00 	.word	0xe000ed00

08009500 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d007      	beq.n	8009520 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009510:	4b09      	ldr	r3, [pc, #36]	; (8009538 <HAL_PCD_ResumeCallback+0x38>)
 8009512:	691a      	ldr	r2, [r3, #16]
 8009514:	4b08      	ldr	r3, [pc, #32]	; (8009538 <HAL_PCD_ResumeCallback+0x38>)
 8009516:	2106      	movs	r1, #6
 8009518:	438a      	bics	r2, r1
 800951a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800951c:	f000 fa0d 	bl	800993a <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	23bc      	movs	r3, #188	; 0xbc
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	58d3      	ldr	r3, [r2, r3]
 8009528:	0018      	movs	r0, r3
 800952a:	f7fe fe4d 	bl	80081c8 <USBD_LL_Resume>
}
 800952e:	46c0      	nop			; (mov r8, r8)
 8009530:	46bd      	mov	sp, r7
 8009532:	b002      	add	sp, #8
 8009534:	bd80      	pop	{r7, pc}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	e000ed00 	.word	0xe000ed00

0800953c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009544:	4a27      	ldr	r2, [pc, #156]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009546:	23bc      	movs	r3, #188	; 0xbc
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	23b0      	movs	r3, #176	; 0xb0
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	4923      	ldr	r1, [pc, #140]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009556:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009558:	4b22      	ldr	r3, [pc, #136]	; (80095e4 <USBD_LL_Init+0xa8>)
 800955a:	4a23      	ldr	r2, [pc, #140]	; (80095e8 <USBD_LL_Init+0xac>)
 800955c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800955e:	4b21      	ldr	r3, [pc, #132]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009560:	2208      	movs	r2, #8
 8009562:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009564:	4b1f      	ldr	r3, [pc, #124]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009566:	2202      	movs	r2, #2
 8009568:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800956a:	4b1e      	ldr	r3, [pc, #120]	; (80095e4 <USBD_LL_Init+0xa8>)
 800956c:	2202      	movs	r2, #2
 800956e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009570:	4b1c      	ldr	r3, [pc, #112]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009572:	2200      	movs	r2, #0
 8009574:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009576:	4b1b      	ldr	r3, [pc, #108]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009578:	2200      	movs	r2, #0
 800957a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800957c:	4b19      	ldr	r3, [pc, #100]	; (80095e4 <USBD_LL_Init+0xa8>)
 800957e:	2200      	movs	r2, #0
 8009580:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009582:	4b18      	ldr	r3, [pc, #96]	; (80095e4 <USBD_LL_Init+0xa8>)
 8009584:	0018      	movs	r0, r3
 8009586:	f7f8 fdb9 	bl	80020fc <HAL_PCD_Init>
 800958a:	1e03      	subs	r3, r0, #0
 800958c:	d001      	beq.n	8009592 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800958e:	f7f7 fcdb 	bl	8000f48 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	23b0      	movs	r3, #176	; 0xb0
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	58d0      	ldr	r0, [r2, r3]
 800959a:	2318      	movs	r3, #24
 800959c:	2200      	movs	r2, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	f7fa fb82 	bl	8003ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	23b0      	movs	r3, #176	; 0xb0
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	58d0      	ldr	r0, [r2, r3]
 80095ac:	2358      	movs	r3, #88	; 0x58
 80095ae:	2200      	movs	r2, #0
 80095b0:	2180      	movs	r1, #128	; 0x80
 80095b2:	f7fa fb79 	bl	8003ca8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	23b0      	movs	r3, #176	; 0xb0
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	58d0      	ldr	r0, [r2, r3]
 80095be:	2398      	movs	r3, #152	; 0x98
 80095c0:	2200      	movs	r2, #0
 80095c2:	2181      	movs	r1, #129	; 0x81
 80095c4:	f7fa fb70 	bl	8003ca8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	23b0      	movs	r3, #176	; 0xb0
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	58d0      	ldr	r0, [r2, r3]
 80095d0:	23d8      	movs	r3, #216	; 0xd8
 80095d2:	2200      	movs	r2, #0
 80095d4:	2101      	movs	r1, #1
 80095d6:	f7fa fb67 	bl	8003ca8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	0018      	movs	r0, r3
 80095de:	46bd      	mov	sp, r7
 80095e0:	b002      	add	sp, #8
 80095e2:	bd80      	pop	{r7, pc}
 80095e4:	200007fc 	.word	0x200007fc
 80095e8:	40005c00 	.word	0x40005c00

080095ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f4:	210f      	movs	r1, #15
 80095f6:	187b      	adds	r3, r7, r1
 80095f8:	2200      	movs	r2, #0
 80095fa:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095fc:	260e      	movs	r6, #14
 80095fe:	19bb      	adds	r3, r7, r6
 8009600:	2200      	movs	r2, #0
 8009602:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	23b0      	movs	r3, #176	; 0xb0
 8009608:	009b      	lsls	r3, r3, #2
 800960a:	58d3      	ldr	r3, [r2, r3]
 800960c:	000d      	movs	r5, r1
 800960e:	187c      	adds	r4, r7, r1
 8009610:	0018      	movs	r0, r3
 8009612:	f7f8 fe83 	bl	800231c <HAL_PCD_Start>
 8009616:	0003      	movs	r3, r0
 8009618:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800961a:	19bc      	adds	r4, r7, r6
 800961c:	197b      	adds	r3, r7, r5
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	0018      	movs	r0, r3
 8009622:	f000 f991 	bl	8009948 <USBD_Get_USB_Status>
 8009626:	0003      	movs	r3, r0
 8009628:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800962a:	19bb      	adds	r3, r7, r6
 800962c:	781b      	ldrb	r3, [r3, #0]
}
 800962e:	0018      	movs	r0, r3
 8009630:	46bd      	mov	sp, r7
 8009632:	b005      	add	sp, #20
 8009634:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009636 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009636:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009638:	b085      	sub	sp, #20
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	000c      	movs	r4, r1
 8009640:	0010      	movs	r0, r2
 8009642:	0019      	movs	r1, r3
 8009644:	1cfb      	adds	r3, r7, #3
 8009646:	1c22      	adds	r2, r4, #0
 8009648:	701a      	strb	r2, [r3, #0]
 800964a:	1cbb      	adds	r3, r7, #2
 800964c:	1c02      	adds	r2, r0, #0
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	003b      	movs	r3, r7
 8009652:	1c0a      	adds	r2, r1, #0
 8009654:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009656:	260f      	movs	r6, #15
 8009658:	19bb      	adds	r3, r7, r6
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965e:	250e      	movs	r5, #14
 8009660:	197b      	adds	r3, r7, r5
 8009662:	2200      	movs	r2, #0
 8009664:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	23b0      	movs	r3, #176	; 0xb0
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	58d0      	ldr	r0, [r2, r3]
 800966e:	19bc      	adds	r4, r7, r6
 8009670:	1cbb      	adds	r3, r7, #2
 8009672:	781d      	ldrb	r5, [r3, #0]
 8009674:	003b      	movs	r3, r7
 8009676:	881a      	ldrh	r2, [r3, #0]
 8009678:	1cfb      	adds	r3, r7, #3
 800967a:	7819      	ldrb	r1, [r3, #0]
 800967c:	002b      	movs	r3, r5
 800967e:	f7f9 f81a 	bl	80026b6 <HAL_PCD_EP_Open>
 8009682:	0003      	movs	r3, r0
 8009684:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009686:	250e      	movs	r5, #14
 8009688:	197c      	adds	r4, r7, r5
 800968a:	19bb      	adds	r3, r7, r6
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	0018      	movs	r0, r3
 8009690:	f000 f95a 	bl	8009948 <USBD_Get_USB_Status>
 8009694:	0003      	movs	r3, r0
 8009696:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009698:	197b      	adds	r3, r7, r5
 800969a:	781b      	ldrb	r3, [r3, #0]
}
 800969c:	0018      	movs	r0, r3
 800969e:	46bd      	mov	sp, r7
 80096a0:	b005      	add	sp, #20
 80096a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096a4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	000a      	movs	r2, r1
 80096ae:	1cfb      	adds	r3, r7, #3
 80096b0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b2:	210f      	movs	r1, #15
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	2200      	movs	r2, #0
 80096b8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096ba:	260e      	movs	r6, #14
 80096bc:	19bb      	adds	r3, r7, r6
 80096be:	2200      	movs	r2, #0
 80096c0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	23b0      	movs	r3, #176	; 0xb0
 80096c6:	009b      	lsls	r3, r3, #2
 80096c8:	58d2      	ldr	r2, [r2, r3]
 80096ca:	000d      	movs	r5, r1
 80096cc:	187c      	adds	r4, r7, r1
 80096ce:	1cfb      	adds	r3, r7, #3
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	0019      	movs	r1, r3
 80096d4:	0010      	movs	r0, r2
 80096d6:	f7f9 f866 	bl	80027a6 <HAL_PCD_EP_Close>
 80096da:	0003      	movs	r3, r0
 80096dc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096de:	19bc      	adds	r4, r7, r6
 80096e0:	197b      	adds	r3, r7, r5
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	0018      	movs	r0, r3
 80096e6:	f000 f92f 	bl	8009948 <USBD_Get_USB_Status>
 80096ea:	0003      	movs	r3, r0
 80096ec:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096ee:	19bb      	adds	r3, r7, r6
 80096f0:	781b      	ldrb	r3, [r3, #0]
}
 80096f2:	0018      	movs	r0, r3
 80096f4:	46bd      	mov	sp, r7
 80096f6:	b005      	add	sp, #20
 80096f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096fa <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fc:	b085      	sub	sp, #20
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	000a      	movs	r2, r1
 8009704:	1cfb      	adds	r3, r7, #3
 8009706:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009708:	210f      	movs	r1, #15
 800970a:	187b      	adds	r3, r7, r1
 800970c:	2200      	movs	r2, #0
 800970e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009710:	260e      	movs	r6, #14
 8009712:	19bb      	adds	r3, r7, r6
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	23b0      	movs	r3, #176	; 0xb0
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	58d2      	ldr	r2, [r2, r3]
 8009720:	000d      	movs	r5, r1
 8009722:	187c      	adds	r4, r7, r1
 8009724:	1cfb      	adds	r3, r7, #3
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	0019      	movs	r1, r3
 800972a:	0010      	movs	r0, r2
 800972c:	f7f9 f919 	bl	8002962 <HAL_PCD_EP_SetStall>
 8009730:	0003      	movs	r3, r0
 8009732:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009734:	19bc      	adds	r4, r7, r6
 8009736:	197b      	adds	r3, r7, r5
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	0018      	movs	r0, r3
 800973c:	f000 f904 	bl	8009948 <USBD_Get_USB_Status>
 8009740:	0003      	movs	r3, r0
 8009742:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009744:	19bb      	adds	r3, r7, r6
 8009746:	781b      	ldrb	r3, [r3, #0]
}
 8009748:	0018      	movs	r0, r3
 800974a:	46bd      	mov	sp, r7
 800974c:	b005      	add	sp, #20
 800974e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009750 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	000a      	movs	r2, r1
 800975a:	1cfb      	adds	r3, r7, #3
 800975c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975e:	210f      	movs	r1, #15
 8009760:	187b      	adds	r3, r7, r1
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009766:	260e      	movs	r6, #14
 8009768:	19bb      	adds	r3, r7, r6
 800976a:	2200      	movs	r2, #0
 800976c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	23b0      	movs	r3, #176	; 0xb0
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	58d2      	ldr	r2, [r2, r3]
 8009776:	000d      	movs	r5, r1
 8009778:	187c      	adds	r4, r7, r1
 800977a:	1cfb      	adds	r3, r7, #3
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	0019      	movs	r1, r3
 8009780:	0010      	movs	r0, r2
 8009782:	f7f9 f94a 	bl	8002a1a <HAL_PCD_EP_ClrStall>
 8009786:	0003      	movs	r3, r0
 8009788:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800978a:	19bc      	adds	r4, r7, r6
 800978c:	197b      	adds	r3, r7, r5
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	0018      	movs	r0, r3
 8009792:	f000 f8d9 	bl	8009948 <USBD_Get_USB_Status>
 8009796:	0003      	movs	r3, r0
 8009798:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800979a:	19bb      	adds	r3, r7, r6
 800979c:	781b      	ldrb	r3, [r3, #0]
}
 800979e:	0018      	movs	r0, r3
 80097a0:	46bd      	mov	sp, r7
 80097a2:	b005      	add	sp, #20
 80097a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097a6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	000a      	movs	r2, r1
 80097b0:	1cfb      	adds	r3, r7, #3
 80097b2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	23b0      	movs	r3, #176	; 0xb0
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	58d3      	ldr	r3, [r2, r3]
 80097bc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097be:	1cfb      	adds	r3, r7, #3
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b25b      	sxtb	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	da0d      	bge.n	80097e4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097c8:	1cfb      	adds	r3, r7, #3
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	227f      	movs	r2, #127	; 0x7f
 80097ce:	4013      	ands	r3, r2
 80097d0:	68f9      	ldr	r1, [r7, #12]
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	0013      	movs	r3, r2
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	189b      	adds	r3, r3, r2
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	18cb      	adds	r3, r1, r3
 80097de:	3302      	adds	r3, #2
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	e00d      	b.n	8009800 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097e4:	1cfb      	adds	r3, r7, #3
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	227f      	movs	r2, #127	; 0x7f
 80097ea:	401a      	ands	r2, r3
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	23b5      	movs	r3, #181	; 0xb5
 80097f0:	0059      	lsls	r1, r3, #1
 80097f2:	0013      	movs	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	189b      	adds	r3, r3, r2
 80097f8:	00db      	lsls	r3, r3, #3
 80097fa:	18c3      	adds	r3, r0, r3
 80097fc:	185b      	adds	r3, r3, r1
 80097fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009800:	0018      	movs	r0, r3
 8009802:	46bd      	mov	sp, r7
 8009804:	b004      	add	sp, #16
 8009806:	bd80      	pop	{r7, pc}

08009808 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	000a      	movs	r2, r1
 8009812:	1cfb      	adds	r3, r7, #3
 8009814:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009816:	210f      	movs	r1, #15
 8009818:	187b      	adds	r3, r7, r1
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800981e:	260e      	movs	r6, #14
 8009820:	19bb      	adds	r3, r7, r6
 8009822:	2200      	movs	r2, #0
 8009824:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	23b0      	movs	r3, #176	; 0xb0
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	58d2      	ldr	r2, [r2, r3]
 800982e:	000d      	movs	r5, r1
 8009830:	187c      	adds	r4, r7, r1
 8009832:	1cfb      	adds	r3, r7, #3
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	0019      	movs	r1, r3
 8009838:	0010      	movs	r0, r2
 800983a:	f7f8 ff11 	bl	8002660 <HAL_PCD_SetAddress>
 800983e:	0003      	movs	r3, r0
 8009840:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009842:	19bc      	adds	r4, r7, r6
 8009844:	197b      	adds	r3, r7, r5
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	0018      	movs	r0, r3
 800984a:	f000 f87d 	bl	8009948 <USBD_Get_USB_Status>
 800984e:	0003      	movs	r3, r0
 8009850:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009852:	19bb      	adds	r3, r7, r6
 8009854:	781b      	ldrb	r3, [r3, #0]
}
 8009856:	0018      	movs	r0, r3
 8009858:	46bd      	mov	sp, r7
 800985a:	b005      	add	sp, #20
 800985c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800985e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800985e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009860:	b087      	sub	sp, #28
 8009862:	af00      	add	r7, sp, #0
 8009864:	60f8      	str	r0, [r7, #12]
 8009866:	0008      	movs	r0, r1
 8009868:	607a      	str	r2, [r7, #4]
 800986a:	0019      	movs	r1, r3
 800986c:	230b      	movs	r3, #11
 800986e:	18fb      	adds	r3, r7, r3
 8009870:	1c02      	adds	r2, r0, #0
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	2408      	movs	r4, #8
 8009876:	193b      	adds	r3, r7, r4
 8009878:	1c0a      	adds	r2, r1, #0
 800987a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2117      	movs	r1, #23
 800987e:	187b      	adds	r3, r7, r1
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2516      	movs	r5, #22
 8009886:	197b      	adds	r3, r7, r5
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	23b0      	movs	r3, #176	; 0xb0
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	58d0      	ldr	r0, [r2, r3]
 8009894:	193b      	adds	r3, r7, r4
 8009896:	881d      	ldrh	r5, [r3, #0]
 8009898:	000e      	movs	r6, r1
 800989a:	187c      	adds	r4, r7, r1
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	230b      	movs	r3, #11
 80098a0:	18fb      	adds	r3, r7, r3
 80098a2:	7819      	ldrb	r1, [r3, #0]
 80098a4:	002b      	movs	r3, r5
 80098a6:	f7f9 f813 	bl	80028d0 <HAL_PCD_EP_Transmit>
 80098aa:	0003      	movs	r3, r0
 80098ac:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098ae:	2516      	movs	r5, #22
 80098b0:	197c      	adds	r4, r7, r5
 80098b2:	19bb      	adds	r3, r7, r6
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	0018      	movs	r0, r3
 80098b8:	f000 f846 	bl	8009948 <USBD_Get_USB_Status>
 80098bc:	0003      	movs	r3, r0
 80098be:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80098c0:	197b      	adds	r3, r7, r5
 80098c2:	781b      	ldrb	r3, [r3, #0]
}
 80098c4:	0018      	movs	r0, r3
 80098c6:	46bd      	mov	sp, r7
 80098c8:	b007      	add	sp, #28
 80098ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ce:	b087      	sub	sp, #28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	0008      	movs	r0, r1
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	0019      	movs	r1, r3
 80098da:	230b      	movs	r3, #11
 80098dc:	18fb      	adds	r3, r7, r3
 80098de:	1c02      	adds	r2, r0, #0
 80098e0:	701a      	strb	r2, [r3, #0]
 80098e2:	2408      	movs	r4, #8
 80098e4:	193b      	adds	r3, r7, r4
 80098e6:	1c0a      	adds	r2, r1, #0
 80098e8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098ea:	2117      	movs	r1, #23
 80098ec:	187b      	adds	r3, r7, r1
 80098ee:	2200      	movs	r2, #0
 80098f0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098f2:	2516      	movs	r5, #22
 80098f4:	197b      	adds	r3, r7, r5
 80098f6:	2200      	movs	r2, #0
 80098f8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	23b0      	movs	r3, #176	; 0xb0
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	58d0      	ldr	r0, [r2, r3]
 8009902:	193b      	adds	r3, r7, r4
 8009904:	881d      	ldrh	r5, [r3, #0]
 8009906:	000e      	movs	r6, r1
 8009908:	187c      	adds	r4, r7, r1
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	230b      	movs	r3, #11
 800990e:	18fb      	adds	r3, r7, r3
 8009910:	7819      	ldrb	r1, [r3, #0]
 8009912:	002b      	movs	r3, r5
 8009914:	f7f8 ff98 	bl	8002848 <HAL_PCD_EP_Receive>
 8009918:	0003      	movs	r3, r0
 800991a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800991c:	2516      	movs	r5, #22
 800991e:	197c      	adds	r4, r7, r5
 8009920:	19bb      	adds	r3, r7, r6
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	0018      	movs	r0, r3
 8009926:	f000 f80f 	bl	8009948 <USBD_Get_USB_Status>
 800992a:	0003      	movs	r3, r0
 800992c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800992e:	197b      	adds	r3, r7, r5
 8009930:	781b      	ldrb	r3, [r3, #0]
}
 8009932:	0018      	movs	r0, r3
 8009934:	46bd      	mov	sp, r7
 8009936:	b007      	add	sp, #28
 8009938:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800993a <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800993e:	f7f7 f911 	bl	8000b64 <SystemClock_Config>
}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	0002      	movs	r2, r0
 8009950:	1dfb      	adds	r3, r7, #7
 8009952:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	230f      	movs	r3, #15
 8009956:	18fb      	adds	r3, r7, r3
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800995c:	1dfb      	adds	r3, r7, #7
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	2b03      	cmp	r3, #3
 8009962:	d017      	beq.n	8009994 <USBD_Get_USB_Status+0x4c>
 8009964:	dc1b      	bgt.n	800999e <USBD_Get_USB_Status+0x56>
 8009966:	2b02      	cmp	r3, #2
 8009968:	d00f      	beq.n	800998a <USBD_Get_USB_Status+0x42>
 800996a:	dc18      	bgt.n	800999e <USBD_Get_USB_Status+0x56>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d002      	beq.n	8009976 <USBD_Get_USB_Status+0x2e>
 8009970:	2b01      	cmp	r3, #1
 8009972:	d005      	beq.n	8009980 <USBD_Get_USB_Status+0x38>
 8009974:	e013      	b.n	800999e <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009976:	230f      	movs	r3, #15
 8009978:	18fb      	adds	r3, r7, r3
 800997a:	2200      	movs	r2, #0
 800997c:	701a      	strb	r2, [r3, #0]
    break;
 800997e:	e013      	b.n	80099a8 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009980:	230f      	movs	r3, #15
 8009982:	18fb      	adds	r3, r7, r3
 8009984:	2202      	movs	r2, #2
 8009986:	701a      	strb	r2, [r3, #0]
    break;
 8009988:	e00e      	b.n	80099a8 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800998a:	230f      	movs	r3, #15
 800998c:	18fb      	adds	r3, r7, r3
 800998e:	2201      	movs	r2, #1
 8009990:	701a      	strb	r2, [r3, #0]
    break;
 8009992:	e009      	b.n	80099a8 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009994:	230f      	movs	r3, #15
 8009996:	18fb      	adds	r3, r7, r3
 8009998:	2202      	movs	r2, #2
 800999a:	701a      	strb	r2, [r3, #0]
    break;
 800999c:	e004      	b.n	80099a8 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800999e:	230f      	movs	r3, #15
 80099a0:	18fb      	adds	r3, r7, r3
 80099a2:	2202      	movs	r2, #2
 80099a4:	701a      	strb	r2, [r3, #0]
    break;
 80099a6:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80099a8:	230f      	movs	r3, #15
 80099aa:	18fb      	adds	r3, r7, r3
 80099ac:	781b      	ldrb	r3, [r3, #0]
}
 80099ae:	0018      	movs	r0, r3
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b004      	add	sp, #16
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <__errno>:
 80099b8:	4b01      	ldr	r3, [pc, #4]	; (80099c0 <__errno+0x8>)
 80099ba:	6818      	ldr	r0, [r3, #0]
 80099bc:	4770      	bx	lr
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	20000198 	.word	0x20000198

080099c4 <__libc_init_array>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	2600      	movs	r6, #0
 80099c8:	4d0c      	ldr	r5, [pc, #48]	; (80099fc <__libc_init_array+0x38>)
 80099ca:	4c0d      	ldr	r4, [pc, #52]	; (8009a00 <__libc_init_array+0x3c>)
 80099cc:	1b64      	subs	r4, r4, r5
 80099ce:	10a4      	asrs	r4, r4, #2
 80099d0:	42a6      	cmp	r6, r4
 80099d2:	d109      	bne.n	80099e8 <__libc_init_array+0x24>
 80099d4:	2600      	movs	r6, #0
 80099d6:	f000 fc5b 	bl	800a290 <_init>
 80099da:	4d0a      	ldr	r5, [pc, #40]	; (8009a04 <__libc_init_array+0x40>)
 80099dc:	4c0a      	ldr	r4, [pc, #40]	; (8009a08 <__libc_init_array+0x44>)
 80099de:	1b64      	subs	r4, r4, r5
 80099e0:	10a4      	asrs	r4, r4, #2
 80099e2:	42a6      	cmp	r6, r4
 80099e4:	d105      	bne.n	80099f2 <__libc_init_array+0x2e>
 80099e6:	bd70      	pop	{r4, r5, r6, pc}
 80099e8:	00b3      	lsls	r3, r6, #2
 80099ea:	58eb      	ldr	r3, [r5, r3]
 80099ec:	4798      	blx	r3
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7ee      	b.n	80099d0 <__libc_init_array+0xc>
 80099f2:	00b3      	lsls	r3, r6, #2
 80099f4:	58eb      	ldr	r3, [r5, r3]
 80099f6:	4798      	blx	r3
 80099f8:	3601      	adds	r6, #1
 80099fa:	e7f2      	b.n	80099e2 <__libc_init_array+0x1e>
 80099fc:	0800a490 	.word	0x0800a490
 8009a00:	0800a490 	.word	0x0800a490
 8009a04:	0800a490 	.word	0x0800a490
 8009a08:	0800a494 	.word	0x0800a494

08009a0c <malloc>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <malloc+0x10>)
 8009a10:	0001      	movs	r1, r0
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	f000 f860 	bl	8009ad8 <_malloc_r>
 8009a18:	bd10      	pop	{r4, pc}
 8009a1a:	46c0      	nop			; (mov r8, r8)
 8009a1c:	20000198 	.word	0x20000198

08009a20 <free>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4b03      	ldr	r3, [pc, #12]	; (8009a30 <free+0x10>)
 8009a24:	0001      	movs	r1, r0
 8009a26:	6818      	ldr	r0, [r3, #0]
 8009a28:	f000 f80c 	bl	8009a44 <_free_r>
 8009a2c:	bd10      	pop	{r4, pc}
 8009a2e:	46c0      	nop			; (mov r8, r8)
 8009a30:	20000198 	.word	0x20000198

08009a34 <memset>:
 8009a34:	0003      	movs	r3, r0
 8009a36:	1882      	adds	r2, r0, r2
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d100      	bne.n	8009a3e <memset+0xa>
 8009a3c:	4770      	bx	lr
 8009a3e:	7019      	strb	r1, [r3, #0]
 8009a40:	3301      	adds	r3, #1
 8009a42:	e7f9      	b.n	8009a38 <memset+0x4>

08009a44 <_free_r>:
 8009a44:	b570      	push	{r4, r5, r6, lr}
 8009a46:	0005      	movs	r5, r0
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	d010      	beq.n	8009a6e <_free_r+0x2a>
 8009a4c:	1f0c      	subs	r4, r1, #4
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	da00      	bge.n	8009a56 <_free_r+0x12>
 8009a54:	18e4      	adds	r4, r4, r3
 8009a56:	0028      	movs	r0, r5
 8009a58:	f000 f8ce 	bl	8009bf8 <__malloc_lock>
 8009a5c:	4a1d      	ldr	r2, [pc, #116]	; (8009ad4 <_free_r+0x90>)
 8009a5e:	6813      	ldr	r3, [r2, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d105      	bne.n	8009a70 <_free_r+0x2c>
 8009a64:	6063      	str	r3, [r4, #4]
 8009a66:	6014      	str	r4, [r2, #0]
 8009a68:	0028      	movs	r0, r5
 8009a6a:	f000 f8cd 	bl	8009c08 <__malloc_unlock>
 8009a6e:	bd70      	pop	{r4, r5, r6, pc}
 8009a70:	42a3      	cmp	r3, r4
 8009a72:	d908      	bls.n	8009a86 <_free_r+0x42>
 8009a74:	6821      	ldr	r1, [r4, #0]
 8009a76:	1860      	adds	r0, r4, r1
 8009a78:	4283      	cmp	r3, r0
 8009a7a:	d1f3      	bne.n	8009a64 <_free_r+0x20>
 8009a7c:	6818      	ldr	r0, [r3, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	1841      	adds	r1, r0, r1
 8009a82:	6021      	str	r1, [r4, #0]
 8009a84:	e7ee      	b.n	8009a64 <_free_r+0x20>
 8009a86:	001a      	movs	r2, r3
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <_free_r+0x4e>
 8009a8e:	42a3      	cmp	r3, r4
 8009a90:	d9f9      	bls.n	8009a86 <_free_r+0x42>
 8009a92:	6811      	ldr	r1, [r2, #0]
 8009a94:	1850      	adds	r0, r2, r1
 8009a96:	42a0      	cmp	r0, r4
 8009a98:	d10b      	bne.n	8009ab2 <_free_r+0x6e>
 8009a9a:	6820      	ldr	r0, [r4, #0]
 8009a9c:	1809      	adds	r1, r1, r0
 8009a9e:	1850      	adds	r0, r2, r1
 8009aa0:	6011      	str	r1, [r2, #0]
 8009aa2:	4283      	cmp	r3, r0
 8009aa4:	d1e0      	bne.n	8009a68 <_free_r+0x24>
 8009aa6:	6818      	ldr	r0, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	1841      	adds	r1, r0, r1
 8009aac:	6011      	str	r1, [r2, #0]
 8009aae:	6053      	str	r3, [r2, #4]
 8009ab0:	e7da      	b.n	8009a68 <_free_r+0x24>
 8009ab2:	42a0      	cmp	r0, r4
 8009ab4:	d902      	bls.n	8009abc <_free_r+0x78>
 8009ab6:	230c      	movs	r3, #12
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	e7d5      	b.n	8009a68 <_free_r+0x24>
 8009abc:	6821      	ldr	r1, [r4, #0]
 8009abe:	1860      	adds	r0, r4, r1
 8009ac0:	4283      	cmp	r3, r0
 8009ac2:	d103      	bne.n	8009acc <_free_r+0x88>
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	1841      	adds	r1, r0, r1
 8009aca:	6021      	str	r1, [r4, #0]
 8009acc:	6063      	str	r3, [r4, #4]
 8009ace:	6054      	str	r4, [r2, #4]
 8009ad0:	e7ca      	b.n	8009a68 <_free_r+0x24>
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	20000220 	.word	0x20000220

08009ad8 <_malloc_r>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	2303      	movs	r3, #3
 8009adc:	1ccd      	adds	r5, r1, #3
 8009ade:	439d      	bics	r5, r3
 8009ae0:	3508      	adds	r5, #8
 8009ae2:	0006      	movs	r6, r0
 8009ae4:	2d0c      	cmp	r5, #12
 8009ae6:	d21f      	bcs.n	8009b28 <_malloc_r+0x50>
 8009ae8:	250c      	movs	r5, #12
 8009aea:	42a9      	cmp	r1, r5
 8009aec:	d81e      	bhi.n	8009b2c <_malloc_r+0x54>
 8009aee:	0030      	movs	r0, r6
 8009af0:	f000 f882 	bl	8009bf8 <__malloc_lock>
 8009af4:	4925      	ldr	r1, [pc, #148]	; (8009b8c <_malloc_r+0xb4>)
 8009af6:	680a      	ldr	r2, [r1, #0]
 8009af8:	0014      	movs	r4, r2
 8009afa:	2c00      	cmp	r4, #0
 8009afc:	d11a      	bne.n	8009b34 <_malloc_r+0x5c>
 8009afe:	4f24      	ldr	r7, [pc, #144]	; (8009b90 <_malloc_r+0xb8>)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <_malloc_r+0x38>
 8009b06:	0021      	movs	r1, r4
 8009b08:	0030      	movs	r0, r6
 8009b0a:	f000 f843 	bl	8009b94 <_sbrk_r>
 8009b0e:	6038      	str	r0, [r7, #0]
 8009b10:	0029      	movs	r1, r5
 8009b12:	0030      	movs	r0, r6
 8009b14:	f000 f83e 	bl	8009b94 <_sbrk_r>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d12b      	bne.n	8009b74 <_malloc_r+0x9c>
 8009b1c:	230c      	movs	r3, #12
 8009b1e:	0030      	movs	r0, r6
 8009b20:	6033      	str	r3, [r6, #0]
 8009b22:	f000 f871 	bl	8009c08 <__malloc_unlock>
 8009b26:	e003      	b.n	8009b30 <_malloc_r+0x58>
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	dade      	bge.n	8009aea <_malloc_r+0x12>
 8009b2c:	230c      	movs	r3, #12
 8009b2e:	6033      	str	r3, [r6, #0]
 8009b30:	2000      	movs	r0, #0
 8009b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b34:	6823      	ldr	r3, [r4, #0]
 8009b36:	1b5b      	subs	r3, r3, r5
 8009b38:	d419      	bmi.n	8009b6e <_malloc_r+0x96>
 8009b3a:	2b0b      	cmp	r3, #11
 8009b3c:	d903      	bls.n	8009b46 <_malloc_r+0x6e>
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	18e4      	adds	r4, r4, r3
 8009b42:	6025      	str	r5, [r4, #0]
 8009b44:	e003      	b.n	8009b4e <_malloc_r+0x76>
 8009b46:	6863      	ldr	r3, [r4, #4]
 8009b48:	42a2      	cmp	r2, r4
 8009b4a:	d10e      	bne.n	8009b6a <_malloc_r+0x92>
 8009b4c:	600b      	str	r3, [r1, #0]
 8009b4e:	0030      	movs	r0, r6
 8009b50:	f000 f85a 	bl	8009c08 <__malloc_unlock>
 8009b54:	0020      	movs	r0, r4
 8009b56:	2207      	movs	r2, #7
 8009b58:	300b      	adds	r0, #11
 8009b5a:	1d23      	adds	r3, r4, #4
 8009b5c:	4390      	bics	r0, r2
 8009b5e:	1ac2      	subs	r2, r0, r3
 8009b60:	4298      	cmp	r0, r3
 8009b62:	d0e6      	beq.n	8009b32 <_malloc_r+0x5a>
 8009b64:	1a1b      	subs	r3, r3, r0
 8009b66:	50a3      	str	r3, [r4, r2]
 8009b68:	e7e3      	b.n	8009b32 <_malloc_r+0x5a>
 8009b6a:	6053      	str	r3, [r2, #4]
 8009b6c:	e7ef      	b.n	8009b4e <_malloc_r+0x76>
 8009b6e:	0022      	movs	r2, r4
 8009b70:	6864      	ldr	r4, [r4, #4]
 8009b72:	e7c2      	b.n	8009afa <_malloc_r+0x22>
 8009b74:	2303      	movs	r3, #3
 8009b76:	1cc4      	adds	r4, r0, #3
 8009b78:	439c      	bics	r4, r3
 8009b7a:	42a0      	cmp	r0, r4
 8009b7c:	d0e1      	beq.n	8009b42 <_malloc_r+0x6a>
 8009b7e:	1a21      	subs	r1, r4, r0
 8009b80:	0030      	movs	r0, r6
 8009b82:	f000 f807 	bl	8009b94 <_sbrk_r>
 8009b86:	1c43      	adds	r3, r0, #1
 8009b88:	d1db      	bne.n	8009b42 <_malloc_r+0x6a>
 8009b8a:	e7c7      	b.n	8009b1c <_malloc_r+0x44>
 8009b8c:	20000220 	.word	0x20000220
 8009b90:	20000224 	.word	0x20000224

08009b94 <_sbrk_r>:
 8009b94:	2300      	movs	r3, #0
 8009b96:	b570      	push	{r4, r5, r6, lr}
 8009b98:	4d06      	ldr	r5, [pc, #24]	; (8009bb4 <_sbrk_r+0x20>)
 8009b9a:	0004      	movs	r4, r0
 8009b9c:	0008      	movs	r0, r1
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	f7f7 fa90 	bl	80010c4 <_sbrk>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d103      	bne.n	8009bb0 <_sbrk_r+0x1c>
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d000      	beq.n	8009bb0 <_sbrk_r+0x1c>
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	bd70      	pop	{r4, r5, r6, pc}
 8009bb2:	46c0      	nop			; (mov r8, r8)
 8009bb4:	20000af0 	.word	0x20000af0

08009bb8 <siprintf>:
 8009bb8:	b40e      	push	{r1, r2, r3}
 8009bba:	b500      	push	{lr}
 8009bbc:	490b      	ldr	r1, [pc, #44]	; (8009bec <siprintf+0x34>)
 8009bbe:	b09c      	sub	sp, #112	; 0x70
 8009bc0:	ab1d      	add	r3, sp, #116	; 0x74
 8009bc2:	9002      	str	r0, [sp, #8]
 8009bc4:	9006      	str	r0, [sp, #24]
 8009bc6:	9107      	str	r1, [sp, #28]
 8009bc8:	9104      	str	r1, [sp, #16]
 8009bca:	4809      	ldr	r0, [pc, #36]	; (8009bf0 <siprintf+0x38>)
 8009bcc:	4909      	ldr	r1, [pc, #36]	; (8009bf4 <siprintf+0x3c>)
 8009bce:	cb04      	ldmia	r3!, {r2}
 8009bd0:	9105      	str	r1, [sp, #20]
 8009bd2:	6800      	ldr	r0, [r0, #0]
 8009bd4:	a902      	add	r1, sp, #8
 8009bd6:	9301      	str	r3, [sp, #4]
 8009bd8:	f000 f880 	bl	8009cdc <_svfiprintf_r>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	9a02      	ldr	r2, [sp, #8]
 8009be0:	7013      	strb	r3, [r2, #0]
 8009be2:	b01c      	add	sp, #112	; 0x70
 8009be4:	bc08      	pop	{r3}
 8009be6:	b003      	add	sp, #12
 8009be8:	4718      	bx	r3
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	7fffffff 	.word	0x7fffffff
 8009bf0:	20000198 	.word	0x20000198
 8009bf4:	ffff0208 	.word	0xffff0208

08009bf8 <__malloc_lock>:
 8009bf8:	b510      	push	{r4, lr}
 8009bfa:	4802      	ldr	r0, [pc, #8]	; (8009c04 <__malloc_lock+0xc>)
 8009bfc:	f000 faf0 	bl	800a1e0 <__retarget_lock_acquire_recursive>
 8009c00:	bd10      	pop	{r4, pc}
 8009c02:	46c0      	nop			; (mov r8, r8)
 8009c04:	20000af8 	.word	0x20000af8

08009c08 <__malloc_unlock>:
 8009c08:	b510      	push	{r4, lr}
 8009c0a:	4802      	ldr	r0, [pc, #8]	; (8009c14 <__malloc_unlock+0xc>)
 8009c0c:	f000 fae9 	bl	800a1e2 <__retarget_lock_release_recursive>
 8009c10:	bd10      	pop	{r4, pc}
 8009c12:	46c0      	nop			; (mov r8, r8)
 8009c14:	20000af8 	.word	0x20000af8

08009c18 <__ssputs_r>:
 8009c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c1a:	688e      	ldr	r6, [r1, #8]
 8009c1c:	b085      	sub	sp, #20
 8009c1e:	0007      	movs	r7, r0
 8009c20:	000c      	movs	r4, r1
 8009c22:	9203      	str	r2, [sp, #12]
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	429e      	cmp	r6, r3
 8009c28:	d83c      	bhi.n	8009ca4 <__ssputs_r+0x8c>
 8009c2a:	2390      	movs	r3, #144	; 0x90
 8009c2c:	898a      	ldrh	r2, [r1, #12]
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	421a      	tst	r2, r3
 8009c32:	d034      	beq.n	8009c9e <__ssputs_r+0x86>
 8009c34:	2503      	movs	r5, #3
 8009c36:	6909      	ldr	r1, [r1, #16]
 8009c38:	6823      	ldr	r3, [r4, #0]
 8009c3a:	1a5b      	subs	r3, r3, r1
 8009c3c:	9302      	str	r3, [sp, #8]
 8009c3e:	6963      	ldr	r3, [r4, #20]
 8009c40:	9802      	ldr	r0, [sp, #8]
 8009c42:	435d      	muls	r5, r3
 8009c44:	0feb      	lsrs	r3, r5, #31
 8009c46:	195d      	adds	r5, r3, r5
 8009c48:	9b01      	ldr	r3, [sp, #4]
 8009c4a:	106d      	asrs	r5, r5, #1
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	181b      	adds	r3, r3, r0
 8009c50:	42ab      	cmp	r3, r5
 8009c52:	d900      	bls.n	8009c56 <__ssputs_r+0x3e>
 8009c54:	001d      	movs	r5, r3
 8009c56:	0553      	lsls	r3, r2, #21
 8009c58:	d532      	bpl.n	8009cc0 <__ssputs_r+0xa8>
 8009c5a:	0029      	movs	r1, r5
 8009c5c:	0038      	movs	r0, r7
 8009c5e:	f7ff ff3b 	bl	8009ad8 <_malloc_r>
 8009c62:	1e06      	subs	r6, r0, #0
 8009c64:	d109      	bne.n	8009c7a <__ssputs_r+0x62>
 8009c66:	230c      	movs	r3, #12
 8009c68:	603b      	str	r3, [r7, #0]
 8009c6a:	2340      	movs	r3, #64	; 0x40
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	89a2      	ldrh	r2, [r4, #12]
 8009c70:	4240      	negs	r0, r0
 8009c72:	4313      	orrs	r3, r2
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	b005      	add	sp, #20
 8009c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c7a:	9a02      	ldr	r2, [sp, #8]
 8009c7c:	6921      	ldr	r1, [r4, #16]
 8009c7e:	f000 fabc 	bl	800a1fa <memcpy>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	4a14      	ldr	r2, [pc, #80]	; (8009cd8 <__ssputs_r+0xc0>)
 8009c86:	401a      	ands	r2, r3
 8009c88:	2380      	movs	r3, #128	; 0x80
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	81a3      	strh	r3, [r4, #12]
 8009c8e:	9b02      	ldr	r3, [sp, #8]
 8009c90:	6126      	str	r6, [r4, #16]
 8009c92:	18f6      	adds	r6, r6, r3
 8009c94:	6026      	str	r6, [r4, #0]
 8009c96:	6165      	str	r5, [r4, #20]
 8009c98:	9e01      	ldr	r6, [sp, #4]
 8009c9a:	1aed      	subs	r5, r5, r3
 8009c9c:	60a5      	str	r5, [r4, #8]
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	429e      	cmp	r6, r3
 8009ca2:	d900      	bls.n	8009ca6 <__ssputs_r+0x8e>
 8009ca4:	9e01      	ldr	r6, [sp, #4]
 8009ca6:	0032      	movs	r2, r6
 8009ca8:	9903      	ldr	r1, [sp, #12]
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	f000 faae 	bl	800a20c <memmove>
 8009cb0:	68a3      	ldr	r3, [r4, #8]
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	1b9b      	subs	r3, r3, r6
 8009cb6:	60a3      	str	r3, [r4, #8]
 8009cb8:	6823      	ldr	r3, [r4, #0]
 8009cba:	199e      	adds	r6, r3, r6
 8009cbc:	6026      	str	r6, [r4, #0]
 8009cbe:	e7da      	b.n	8009c76 <__ssputs_r+0x5e>
 8009cc0:	002a      	movs	r2, r5
 8009cc2:	0038      	movs	r0, r7
 8009cc4:	f000 fab5 	bl	800a232 <_realloc_r>
 8009cc8:	1e06      	subs	r6, r0, #0
 8009cca:	d1e0      	bne.n	8009c8e <__ssputs_r+0x76>
 8009ccc:	0038      	movs	r0, r7
 8009cce:	6921      	ldr	r1, [r4, #16]
 8009cd0:	f7ff feb8 	bl	8009a44 <_free_r>
 8009cd4:	e7c7      	b.n	8009c66 <__ssputs_r+0x4e>
 8009cd6:	46c0      	nop			; (mov r8, r8)
 8009cd8:	fffffb7f 	.word	0xfffffb7f

08009cdc <_svfiprintf_r>:
 8009cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cde:	b0a1      	sub	sp, #132	; 0x84
 8009ce0:	9003      	str	r0, [sp, #12]
 8009ce2:	001d      	movs	r5, r3
 8009ce4:	898b      	ldrh	r3, [r1, #12]
 8009ce6:	000f      	movs	r7, r1
 8009ce8:	0016      	movs	r6, r2
 8009cea:	061b      	lsls	r3, r3, #24
 8009cec:	d511      	bpl.n	8009d12 <_svfiprintf_r+0x36>
 8009cee:	690b      	ldr	r3, [r1, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10e      	bne.n	8009d12 <_svfiprintf_r+0x36>
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	f7ff feef 	bl	8009ad8 <_malloc_r>
 8009cfa:	6038      	str	r0, [r7, #0]
 8009cfc:	6138      	str	r0, [r7, #16]
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d105      	bne.n	8009d0e <_svfiprintf_r+0x32>
 8009d02:	230c      	movs	r3, #12
 8009d04:	9a03      	ldr	r2, [sp, #12]
 8009d06:	3801      	subs	r0, #1
 8009d08:	6013      	str	r3, [r2, #0]
 8009d0a:	b021      	add	sp, #132	; 0x84
 8009d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d0e:	2340      	movs	r3, #64	; 0x40
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	2300      	movs	r3, #0
 8009d14:	ac08      	add	r4, sp, #32
 8009d16:	6163      	str	r3, [r4, #20]
 8009d18:	3320      	adds	r3, #32
 8009d1a:	7663      	strb	r3, [r4, #25]
 8009d1c:	3310      	adds	r3, #16
 8009d1e:	76a3      	strb	r3, [r4, #26]
 8009d20:	9507      	str	r5, [sp, #28]
 8009d22:	0035      	movs	r5, r6
 8009d24:	782b      	ldrb	r3, [r5, #0]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <_svfiprintf_r+0x52>
 8009d2a:	2b25      	cmp	r3, #37	; 0x25
 8009d2c:	d147      	bne.n	8009dbe <_svfiprintf_r+0xe2>
 8009d2e:	1bab      	subs	r3, r5, r6
 8009d30:	9305      	str	r3, [sp, #20]
 8009d32:	42b5      	cmp	r5, r6
 8009d34:	d00c      	beq.n	8009d50 <_svfiprintf_r+0x74>
 8009d36:	0032      	movs	r2, r6
 8009d38:	0039      	movs	r1, r7
 8009d3a:	9803      	ldr	r0, [sp, #12]
 8009d3c:	f7ff ff6c 	bl	8009c18 <__ssputs_r>
 8009d40:	1c43      	adds	r3, r0, #1
 8009d42:	d100      	bne.n	8009d46 <_svfiprintf_r+0x6a>
 8009d44:	e0ae      	b.n	8009ea4 <_svfiprintf_r+0x1c8>
 8009d46:	6962      	ldr	r2, [r4, #20]
 8009d48:	9b05      	ldr	r3, [sp, #20]
 8009d4a:	4694      	mov	ip, r2
 8009d4c:	4463      	add	r3, ip
 8009d4e:	6163      	str	r3, [r4, #20]
 8009d50:	782b      	ldrb	r3, [r5, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d100      	bne.n	8009d58 <_svfiprintf_r+0x7c>
 8009d56:	e0a5      	b.n	8009ea4 <_svfiprintf_r+0x1c8>
 8009d58:	2201      	movs	r2, #1
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4252      	negs	r2, r2
 8009d5e:	6062      	str	r2, [r4, #4]
 8009d60:	a904      	add	r1, sp, #16
 8009d62:	3254      	adds	r2, #84	; 0x54
 8009d64:	1852      	adds	r2, r2, r1
 8009d66:	1c6e      	adds	r6, r5, #1
 8009d68:	6023      	str	r3, [r4, #0]
 8009d6a:	60e3      	str	r3, [r4, #12]
 8009d6c:	60a3      	str	r3, [r4, #8]
 8009d6e:	7013      	strb	r3, [r2, #0]
 8009d70:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d72:	2205      	movs	r2, #5
 8009d74:	7831      	ldrb	r1, [r6, #0]
 8009d76:	4854      	ldr	r0, [pc, #336]	; (8009ec8 <_svfiprintf_r+0x1ec>)
 8009d78:	f000 fa34 	bl	800a1e4 <memchr>
 8009d7c:	1c75      	adds	r5, r6, #1
 8009d7e:	2800      	cmp	r0, #0
 8009d80:	d11f      	bne.n	8009dc2 <_svfiprintf_r+0xe6>
 8009d82:	6822      	ldr	r2, [r4, #0]
 8009d84:	06d3      	lsls	r3, r2, #27
 8009d86:	d504      	bpl.n	8009d92 <_svfiprintf_r+0xb6>
 8009d88:	2353      	movs	r3, #83	; 0x53
 8009d8a:	a904      	add	r1, sp, #16
 8009d8c:	185b      	adds	r3, r3, r1
 8009d8e:	2120      	movs	r1, #32
 8009d90:	7019      	strb	r1, [r3, #0]
 8009d92:	0713      	lsls	r3, r2, #28
 8009d94:	d504      	bpl.n	8009da0 <_svfiprintf_r+0xc4>
 8009d96:	2353      	movs	r3, #83	; 0x53
 8009d98:	a904      	add	r1, sp, #16
 8009d9a:	185b      	adds	r3, r3, r1
 8009d9c:	212b      	movs	r1, #43	; 0x2b
 8009d9e:	7019      	strb	r1, [r3, #0]
 8009da0:	7833      	ldrb	r3, [r6, #0]
 8009da2:	2b2a      	cmp	r3, #42	; 0x2a
 8009da4:	d016      	beq.n	8009dd4 <_svfiprintf_r+0xf8>
 8009da6:	0035      	movs	r5, r6
 8009da8:	2100      	movs	r1, #0
 8009daa:	200a      	movs	r0, #10
 8009dac:	68e3      	ldr	r3, [r4, #12]
 8009dae:	782a      	ldrb	r2, [r5, #0]
 8009db0:	1c6e      	adds	r6, r5, #1
 8009db2:	3a30      	subs	r2, #48	; 0x30
 8009db4:	2a09      	cmp	r2, #9
 8009db6:	d94e      	bls.n	8009e56 <_svfiprintf_r+0x17a>
 8009db8:	2900      	cmp	r1, #0
 8009dba:	d111      	bne.n	8009de0 <_svfiprintf_r+0x104>
 8009dbc:	e017      	b.n	8009dee <_svfiprintf_r+0x112>
 8009dbe:	3501      	adds	r5, #1
 8009dc0:	e7b0      	b.n	8009d24 <_svfiprintf_r+0x48>
 8009dc2:	4b41      	ldr	r3, [pc, #260]	; (8009ec8 <_svfiprintf_r+0x1ec>)
 8009dc4:	6822      	ldr	r2, [r4, #0]
 8009dc6:	1ac0      	subs	r0, r0, r3
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4083      	lsls	r3, r0
 8009dcc:	4313      	orrs	r3, r2
 8009dce:	002e      	movs	r6, r5
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	e7ce      	b.n	8009d72 <_svfiprintf_r+0x96>
 8009dd4:	9b07      	ldr	r3, [sp, #28]
 8009dd6:	1d19      	adds	r1, r3, #4
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	9107      	str	r1, [sp, #28]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	db01      	blt.n	8009de4 <_svfiprintf_r+0x108>
 8009de0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009de2:	e004      	b.n	8009dee <_svfiprintf_r+0x112>
 8009de4:	425b      	negs	r3, r3
 8009de6:	60e3      	str	r3, [r4, #12]
 8009de8:	2302      	movs	r3, #2
 8009dea:	4313      	orrs	r3, r2
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	782b      	ldrb	r3, [r5, #0]
 8009df0:	2b2e      	cmp	r3, #46	; 0x2e
 8009df2:	d10a      	bne.n	8009e0a <_svfiprintf_r+0x12e>
 8009df4:	786b      	ldrb	r3, [r5, #1]
 8009df6:	2b2a      	cmp	r3, #42	; 0x2a
 8009df8:	d135      	bne.n	8009e66 <_svfiprintf_r+0x18a>
 8009dfa:	9b07      	ldr	r3, [sp, #28]
 8009dfc:	3502      	adds	r5, #2
 8009dfe:	1d1a      	adds	r2, r3, #4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	9207      	str	r2, [sp, #28]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	db2b      	blt.n	8009e60 <_svfiprintf_r+0x184>
 8009e08:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0a:	4e30      	ldr	r6, [pc, #192]	; (8009ecc <_svfiprintf_r+0x1f0>)
 8009e0c:	2203      	movs	r2, #3
 8009e0e:	0030      	movs	r0, r6
 8009e10:	7829      	ldrb	r1, [r5, #0]
 8009e12:	f000 f9e7 	bl	800a1e4 <memchr>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	d006      	beq.n	8009e28 <_svfiprintf_r+0x14c>
 8009e1a:	2340      	movs	r3, #64	; 0x40
 8009e1c:	1b80      	subs	r0, r0, r6
 8009e1e:	4083      	lsls	r3, r0
 8009e20:	6822      	ldr	r2, [r4, #0]
 8009e22:	3501      	adds	r5, #1
 8009e24:	4313      	orrs	r3, r2
 8009e26:	6023      	str	r3, [r4, #0]
 8009e28:	7829      	ldrb	r1, [r5, #0]
 8009e2a:	2206      	movs	r2, #6
 8009e2c:	4828      	ldr	r0, [pc, #160]	; (8009ed0 <_svfiprintf_r+0x1f4>)
 8009e2e:	1c6e      	adds	r6, r5, #1
 8009e30:	7621      	strb	r1, [r4, #24]
 8009e32:	f000 f9d7 	bl	800a1e4 <memchr>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d03c      	beq.n	8009eb4 <_svfiprintf_r+0x1d8>
 8009e3a:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d125      	bne.n	8009e8c <_svfiprintf_r+0x1b0>
 8009e40:	2207      	movs	r2, #7
 8009e42:	9b07      	ldr	r3, [sp, #28]
 8009e44:	3307      	adds	r3, #7
 8009e46:	4393      	bics	r3, r2
 8009e48:	3308      	adds	r3, #8
 8009e4a:	9307      	str	r3, [sp, #28]
 8009e4c:	6963      	ldr	r3, [r4, #20]
 8009e4e:	9a04      	ldr	r2, [sp, #16]
 8009e50:	189b      	adds	r3, r3, r2
 8009e52:	6163      	str	r3, [r4, #20]
 8009e54:	e765      	b.n	8009d22 <_svfiprintf_r+0x46>
 8009e56:	4343      	muls	r3, r0
 8009e58:	0035      	movs	r5, r6
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	189b      	adds	r3, r3, r2
 8009e5e:	e7a6      	b.n	8009dae <_svfiprintf_r+0xd2>
 8009e60:	2301      	movs	r3, #1
 8009e62:	425b      	negs	r3, r3
 8009e64:	e7d0      	b.n	8009e08 <_svfiprintf_r+0x12c>
 8009e66:	2300      	movs	r3, #0
 8009e68:	200a      	movs	r0, #10
 8009e6a:	001a      	movs	r2, r3
 8009e6c:	3501      	adds	r5, #1
 8009e6e:	6063      	str	r3, [r4, #4]
 8009e70:	7829      	ldrb	r1, [r5, #0]
 8009e72:	1c6e      	adds	r6, r5, #1
 8009e74:	3930      	subs	r1, #48	; 0x30
 8009e76:	2909      	cmp	r1, #9
 8009e78:	d903      	bls.n	8009e82 <_svfiprintf_r+0x1a6>
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0c5      	beq.n	8009e0a <_svfiprintf_r+0x12e>
 8009e7e:	9209      	str	r2, [sp, #36]	; 0x24
 8009e80:	e7c3      	b.n	8009e0a <_svfiprintf_r+0x12e>
 8009e82:	4342      	muls	r2, r0
 8009e84:	0035      	movs	r5, r6
 8009e86:	2301      	movs	r3, #1
 8009e88:	1852      	adds	r2, r2, r1
 8009e8a:	e7f1      	b.n	8009e70 <_svfiprintf_r+0x194>
 8009e8c:	ab07      	add	r3, sp, #28
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	003a      	movs	r2, r7
 8009e92:	0021      	movs	r1, r4
 8009e94:	4b10      	ldr	r3, [pc, #64]	; (8009ed8 <_svfiprintf_r+0x1fc>)
 8009e96:	9803      	ldr	r0, [sp, #12]
 8009e98:	e000      	b.n	8009e9c <_svfiprintf_r+0x1c0>
 8009e9a:	bf00      	nop
 8009e9c:	9004      	str	r0, [sp, #16]
 8009e9e:	9b04      	ldr	r3, [sp, #16]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	d1d3      	bne.n	8009e4c <_svfiprintf_r+0x170>
 8009ea4:	89bb      	ldrh	r3, [r7, #12]
 8009ea6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009ea8:	065b      	lsls	r3, r3, #25
 8009eaa:	d400      	bmi.n	8009eae <_svfiprintf_r+0x1d2>
 8009eac:	e72d      	b.n	8009d0a <_svfiprintf_r+0x2e>
 8009eae:	2001      	movs	r0, #1
 8009eb0:	4240      	negs	r0, r0
 8009eb2:	e72a      	b.n	8009d0a <_svfiprintf_r+0x2e>
 8009eb4:	ab07      	add	r3, sp, #28
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	003a      	movs	r2, r7
 8009eba:	0021      	movs	r1, r4
 8009ebc:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <_svfiprintf_r+0x1fc>)
 8009ebe:	9803      	ldr	r0, [sp, #12]
 8009ec0:	f000 f87c 	bl	8009fbc <_printf_i>
 8009ec4:	e7ea      	b.n	8009e9c <_svfiprintf_r+0x1c0>
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	0800a454 	.word	0x0800a454
 8009ecc:	0800a45a 	.word	0x0800a45a
 8009ed0:	0800a45e 	.word	0x0800a45e
 8009ed4:	00000000 	.word	0x00000000
 8009ed8:	08009c19 	.word	0x08009c19

08009edc <_printf_common>:
 8009edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ede:	0015      	movs	r5, r2
 8009ee0:	9301      	str	r3, [sp, #4]
 8009ee2:	688a      	ldr	r2, [r1, #8]
 8009ee4:	690b      	ldr	r3, [r1, #16]
 8009ee6:	000c      	movs	r4, r1
 8009ee8:	9000      	str	r0, [sp, #0]
 8009eea:	4293      	cmp	r3, r2
 8009eec:	da00      	bge.n	8009ef0 <_printf_common+0x14>
 8009eee:	0013      	movs	r3, r2
 8009ef0:	0022      	movs	r2, r4
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	3243      	adds	r2, #67	; 0x43
 8009ef6:	7812      	ldrb	r2, [r2, #0]
 8009ef8:	2a00      	cmp	r2, #0
 8009efa:	d001      	beq.n	8009f00 <_printf_common+0x24>
 8009efc:	3301      	adds	r3, #1
 8009efe:	602b      	str	r3, [r5, #0]
 8009f00:	6823      	ldr	r3, [r4, #0]
 8009f02:	069b      	lsls	r3, r3, #26
 8009f04:	d502      	bpl.n	8009f0c <_printf_common+0x30>
 8009f06:	682b      	ldr	r3, [r5, #0]
 8009f08:	3302      	adds	r3, #2
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	6822      	ldr	r2, [r4, #0]
 8009f0e:	2306      	movs	r3, #6
 8009f10:	0017      	movs	r7, r2
 8009f12:	401f      	ands	r7, r3
 8009f14:	421a      	tst	r2, r3
 8009f16:	d027      	beq.n	8009f68 <_printf_common+0x8c>
 8009f18:	0023      	movs	r3, r4
 8009f1a:	3343      	adds	r3, #67	; 0x43
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	1e5a      	subs	r2, r3, #1
 8009f20:	4193      	sbcs	r3, r2
 8009f22:	6822      	ldr	r2, [r4, #0]
 8009f24:	0692      	lsls	r2, r2, #26
 8009f26:	d430      	bmi.n	8009f8a <_printf_common+0xae>
 8009f28:	0022      	movs	r2, r4
 8009f2a:	9901      	ldr	r1, [sp, #4]
 8009f2c:	9800      	ldr	r0, [sp, #0]
 8009f2e:	9e08      	ldr	r6, [sp, #32]
 8009f30:	3243      	adds	r2, #67	; 0x43
 8009f32:	47b0      	blx	r6
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	d025      	beq.n	8009f84 <_printf_common+0xa8>
 8009f38:	2306      	movs	r3, #6
 8009f3a:	6820      	ldr	r0, [r4, #0]
 8009f3c:	682a      	ldr	r2, [r5, #0]
 8009f3e:	68e1      	ldr	r1, [r4, #12]
 8009f40:	2500      	movs	r5, #0
 8009f42:	4003      	ands	r3, r0
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d103      	bne.n	8009f50 <_printf_common+0x74>
 8009f48:	1a8d      	subs	r5, r1, r2
 8009f4a:	43eb      	mvns	r3, r5
 8009f4c:	17db      	asrs	r3, r3, #31
 8009f4e:	401d      	ands	r5, r3
 8009f50:	68a3      	ldr	r3, [r4, #8]
 8009f52:	6922      	ldr	r2, [r4, #16]
 8009f54:	4293      	cmp	r3, r2
 8009f56:	dd01      	ble.n	8009f5c <_printf_common+0x80>
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	18ed      	adds	r5, r5, r3
 8009f5c:	2700      	movs	r7, #0
 8009f5e:	42bd      	cmp	r5, r7
 8009f60:	d120      	bne.n	8009fa4 <_printf_common+0xc8>
 8009f62:	2000      	movs	r0, #0
 8009f64:	e010      	b.n	8009f88 <_printf_common+0xac>
 8009f66:	3701      	adds	r7, #1
 8009f68:	68e3      	ldr	r3, [r4, #12]
 8009f6a:	682a      	ldr	r2, [r5, #0]
 8009f6c:	1a9b      	subs	r3, r3, r2
 8009f6e:	42bb      	cmp	r3, r7
 8009f70:	ddd2      	ble.n	8009f18 <_printf_common+0x3c>
 8009f72:	0022      	movs	r2, r4
 8009f74:	2301      	movs	r3, #1
 8009f76:	9901      	ldr	r1, [sp, #4]
 8009f78:	9800      	ldr	r0, [sp, #0]
 8009f7a:	9e08      	ldr	r6, [sp, #32]
 8009f7c:	3219      	adds	r2, #25
 8009f7e:	47b0      	blx	r6
 8009f80:	1c43      	adds	r3, r0, #1
 8009f82:	d1f0      	bne.n	8009f66 <_printf_common+0x8a>
 8009f84:	2001      	movs	r0, #1
 8009f86:	4240      	negs	r0, r0
 8009f88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f8a:	2030      	movs	r0, #48	; 0x30
 8009f8c:	18e1      	adds	r1, r4, r3
 8009f8e:	3143      	adds	r1, #67	; 0x43
 8009f90:	7008      	strb	r0, [r1, #0]
 8009f92:	0021      	movs	r1, r4
 8009f94:	1c5a      	adds	r2, r3, #1
 8009f96:	3145      	adds	r1, #69	; 0x45
 8009f98:	7809      	ldrb	r1, [r1, #0]
 8009f9a:	18a2      	adds	r2, r4, r2
 8009f9c:	3243      	adds	r2, #67	; 0x43
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	7011      	strb	r1, [r2, #0]
 8009fa2:	e7c1      	b.n	8009f28 <_printf_common+0x4c>
 8009fa4:	0022      	movs	r2, r4
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	9901      	ldr	r1, [sp, #4]
 8009faa:	9800      	ldr	r0, [sp, #0]
 8009fac:	9e08      	ldr	r6, [sp, #32]
 8009fae:	321a      	adds	r2, #26
 8009fb0:	47b0      	blx	r6
 8009fb2:	1c43      	adds	r3, r0, #1
 8009fb4:	d0e6      	beq.n	8009f84 <_printf_common+0xa8>
 8009fb6:	3701      	adds	r7, #1
 8009fb8:	e7d1      	b.n	8009f5e <_printf_common+0x82>
	...

08009fbc <_printf_i>:
 8009fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fbe:	b08b      	sub	sp, #44	; 0x2c
 8009fc0:	9206      	str	r2, [sp, #24]
 8009fc2:	000a      	movs	r2, r1
 8009fc4:	3243      	adds	r2, #67	; 0x43
 8009fc6:	9307      	str	r3, [sp, #28]
 8009fc8:	9005      	str	r0, [sp, #20]
 8009fca:	9204      	str	r2, [sp, #16]
 8009fcc:	7e0a      	ldrb	r2, [r1, #24]
 8009fce:	000c      	movs	r4, r1
 8009fd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fd2:	2a78      	cmp	r2, #120	; 0x78
 8009fd4:	d806      	bhi.n	8009fe4 <_printf_i+0x28>
 8009fd6:	2a62      	cmp	r2, #98	; 0x62
 8009fd8:	d808      	bhi.n	8009fec <_printf_i+0x30>
 8009fda:	2a00      	cmp	r2, #0
 8009fdc:	d100      	bne.n	8009fe0 <_printf_i+0x24>
 8009fde:	e0c0      	b.n	800a162 <_printf_i+0x1a6>
 8009fe0:	2a58      	cmp	r2, #88	; 0x58
 8009fe2:	d052      	beq.n	800a08a <_printf_i+0xce>
 8009fe4:	0026      	movs	r6, r4
 8009fe6:	3642      	adds	r6, #66	; 0x42
 8009fe8:	7032      	strb	r2, [r6, #0]
 8009fea:	e022      	b.n	800a032 <_printf_i+0x76>
 8009fec:	0010      	movs	r0, r2
 8009fee:	3863      	subs	r0, #99	; 0x63
 8009ff0:	2815      	cmp	r0, #21
 8009ff2:	d8f7      	bhi.n	8009fe4 <_printf_i+0x28>
 8009ff4:	f7f6 f890 	bl	8000118 <__gnu_thumb1_case_shi>
 8009ff8:	001f0016 	.word	0x001f0016
 8009ffc:	fff6fff6 	.word	0xfff6fff6
 800a000:	fff6fff6 	.word	0xfff6fff6
 800a004:	fff6001f 	.word	0xfff6001f
 800a008:	fff6fff6 	.word	0xfff6fff6
 800a00c:	00a8fff6 	.word	0x00a8fff6
 800a010:	009a0036 	.word	0x009a0036
 800a014:	fff6fff6 	.word	0xfff6fff6
 800a018:	fff600b9 	.word	0xfff600b9
 800a01c:	fff60036 	.word	0xfff60036
 800a020:	009efff6 	.word	0x009efff6
 800a024:	0026      	movs	r6, r4
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	3642      	adds	r6, #66	; 0x42
 800a02a:	1d11      	adds	r1, r2, #4
 800a02c:	6019      	str	r1, [r3, #0]
 800a02e:	6813      	ldr	r3, [r2, #0]
 800a030:	7033      	strb	r3, [r6, #0]
 800a032:	2301      	movs	r3, #1
 800a034:	e0a7      	b.n	800a186 <_printf_i+0x1ca>
 800a036:	6808      	ldr	r0, [r1, #0]
 800a038:	6819      	ldr	r1, [r3, #0]
 800a03a:	1d0a      	adds	r2, r1, #4
 800a03c:	0605      	lsls	r5, r0, #24
 800a03e:	d50b      	bpl.n	800a058 <_printf_i+0x9c>
 800a040:	680d      	ldr	r5, [r1, #0]
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	2d00      	cmp	r5, #0
 800a046:	da03      	bge.n	800a050 <_printf_i+0x94>
 800a048:	232d      	movs	r3, #45	; 0x2d
 800a04a:	9a04      	ldr	r2, [sp, #16]
 800a04c:	426d      	negs	r5, r5
 800a04e:	7013      	strb	r3, [r2, #0]
 800a050:	4b61      	ldr	r3, [pc, #388]	; (800a1d8 <_printf_i+0x21c>)
 800a052:	270a      	movs	r7, #10
 800a054:	9303      	str	r3, [sp, #12]
 800a056:	e032      	b.n	800a0be <_printf_i+0x102>
 800a058:	680d      	ldr	r5, [r1, #0]
 800a05a:	601a      	str	r2, [r3, #0]
 800a05c:	0641      	lsls	r1, r0, #25
 800a05e:	d5f1      	bpl.n	800a044 <_printf_i+0x88>
 800a060:	b22d      	sxth	r5, r5
 800a062:	e7ef      	b.n	800a044 <_printf_i+0x88>
 800a064:	680d      	ldr	r5, [r1, #0]
 800a066:	6819      	ldr	r1, [r3, #0]
 800a068:	1d08      	adds	r0, r1, #4
 800a06a:	6018      	str	r0, [r3, #0]
 800a06c:	062e      	lsls	r6, r5, #24
 800a06e:	d501      	bpl.n	800a074 <_printf_i+0xb8>
 800a070:	680d      	ldr	r5, [r1, #0]
 800a072:	e003      	b.n	800a07c <_printf_i+0xc0>
 800a074:	066d      	lsls	r5, r5, #25
 800a076:	d5fb      	bpl.n	800a070 <_printf_i+0xb4>
 800a078:	680d      	ldr	r5, [r1, #0]
 800a07a:	b2ad      	uxth	r5, r5
 800a07c:	4b56      	ldr	r3, [pc, #344]	; (800a1d8 <_printf_i+0x21c>)
 800a07e:	270a      	movs	r7, #10
 800a080:	9303      	str	r3, [sp, #12]
 800a082:	2a6f      	cmp	r2, #111	; 0x6f
 800a084:	d117      	bne.n	800a0b6 <_printf_i+0xfa>
 800a086:	2708      	movs	r7, #8
 800a088:	e015      	b.n	800a0b6 <_printf_i+0xfa>
 800a08a:	3145      	adds	r1, #69	; 0x45
 800a08c:	700a      	strb	r2, [r1, #0]
 800a08e:	4a52      	ldr	r2, [pc, #328]	; (800a1d8 <_printf_i+0x21c>)
 800a090:	9203      	str	r2, [sp, #12]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	6821      	ldr	r1, [r4, #0]
 800a096:	ca20      	ldmia	r2!, {r5}
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	0608      	lsls	r0, r1, #24
 800a09c:	d550      	bpl.n	800a140 <_printf_i+0x184>
 800a09e:	07cb      	lsls	r3, r1, #31
 800a0a0:	d502      	bpl.n	800a0a8 <_printf_i+0xec>
 800a0a2:	2320      	movs	r3, #32
 800a0a4:	4319      	orrs	r1, r3
 800a0a6:	6021      	str	r1, [r4, #0]
 800a0a8:	2710      	movs	r7, #16
 800a0aa:	2d00      	cmp	r5, #0
 800a0ac:	d103      	bne.n	800a0b6 <_printf_i+0xfa>
 800a0ae:	2320      	movs	r3, #32
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	439a      	bics	r2, r3
 800a0b4:	6022      	str	r2, [r4, #0]
 800a0b6:	0023      	movs	r3, r4
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	3343      	adds	r3, #67	; 0x43
 800a0bc:	701a      	strb	r2, [r3, #0]
 800a0be:	6863      	ldr	r3, [r4, #4]
 800a0c0:	60a3      	str	r3, [r4, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	db03      	blt.n	800a0ce <_printf_i+0x112>
 800a0c6:	2204      	movs	r2, #4
 800a0c8:	6821      	ldr	r1, [r4, #0]
 800a0ca:	4391      	bics	r1, r2
 800a0cc:	6021      	str	r1, [r4, #0]
 800a0ce:	2d00      	cmp	r5, #0
 800a0d0:	d102      	bne.n	800a0d8 <_printf_i+0x11c>
 800a0d2:	9e04      	ldr	r6, [sp, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00c      	beq.n	800a0f2 <_printf_i+0x136>
 800a0d8:	9e04      	ldr	r6, [sp, #16]
 800a0da:	0028      	movs	r0, r5
 800a0dc:	0039      	movs	r1, r7
 800a0de:	f7f6 f8ab 	bl	8000238 <__aeabi_uidivmod>
 800a0e2:	9b03      	ldr	r3, [sp, #12]
 800a0e4:	3e01      	subs	r6, #1
 800a0e6:	5c5b      	ldrb	r3, [r3, r1]
 800a0e8:	7033      	strb	r3, [r6, #0]
 800a0ea:	002b      	movs	r3, r5
 800a0ec:	0005      	movs	r5, r0
 800a0ee:	429f      	cmp	r7, r3
 800a0f0:	d9f3      	bls.n	800a0da <_printf_i+0x11e>
 800a0f2:	2f08      	cmp	r7, #8
 800a0f4:	d109      	bne.n	800a10a <_printf_i+0x14e>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	07db      	lsls	r3, r3, #31
 800a0fa:	d506      	bpl.n	800a10a <_printf_i+0x14e>
 800a0fc:	6863      	ldr	r3, [r4, #4]
 800a0fe:	6922      	ldr	r2, [r4, #16]
 800a100:	4293      	cmp	r3, r2
 800a102:	dc02      	bgt.n	800a10a <_printf_i+0x14e>
 800a104:	2330      	movs	r3, #48	; 0x30
 800a106:	3e01      	subs	r6, #1
 800a108:	7033      	strb	r3, [r6, #0]
 800a10a:	9b04      	ldr	r3, [sp, #16]
 800a10c:	1b9b      	subs	r3, r3, r6
 800a10e:	6123      	str	r3, [r4, #16]
 800a110:	9b07      	ldr	r3, [sp, #28]
 800a112:	0021      	movs	r1, r4
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	9805      	ldr	r0, [sp, #20]
 800a118:	9b06      	ldr	r3, [sp, #24]
 800a11a:	aa09      	add	r2, sp, #36	; 0x24
 800a11c:	f7ff fede 	bl	8009edc <_printf_common>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d135      	bne.n	800a190 <_printf_i+0x1d4>
 800a124:	2001      	movs	r0, #1
 800a126:	4240      	negs	r0, r0
 800a128:	b00b      	add	sp, #44	; 0x2c
 800a12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a12c:	2220      	movs	r2, #32
 800a12e:	6809      	ldr	r1, [r1, #0]
 800a130:	430a      	orrs	r2, r1
 800a132:	6022      	str	r2, [r4, #0]
 800a134:	0022      	movs	r2, r4
 800a136:	2178      	movs	r1, #120	; 0x78
 800a138:	3245      	adds	r2, #69	; 0x45
 800a13a:	7011      	strb	r1, [r2, #0]
 800a13c:	4a27      	ldr	r2, [pc, #156]	; (800a1dc <_printf_i+0x220>)
 800a13e:	e7a7      	b.n	800a090 <_printf_i+0xd4>
 800a140:	0648      	lsls	r0, r1, #25
 800a142:	d5ac      	bpl.n	800a09e <_printf_i+0xe2>
 800a144:	b2ad      	uxth	r5, r5
 800a146:	e7aa      	b.n	800a09e <_printf_i+0xe2>
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	680d      	ldr	r5, [r1, #0]
 800a14c:	1d10      	adds	r0, r2, #4
 800a14e:	6949      	ldr	r1, [r1, #20]
 800a150:	6018      	str	r0, [r3, #0]
 800a152:	6813      	ldr	r3, [r2, #0]
 800a154:	062e      	lsls	r6, r5, #24
 800a156:	d501      	bpl.n	800a15c <_printf_i+0x1a0>
 800a158:	6019      	str	r1, [r3, #0]
 800a15a:	e002      	b.n	800a162 <_printf_i+0x1a6>
 800a15c:	066d      	lsls	r5, r5, #25
 800a15e:	d5fb      	bpl.n	800a158 <_printf_i+0x19c>
 800a160:	8019      	strh	r1, [r3, #0]
 800a162:	2300      	movs	r3, #0
 800a164:	9e04      	ldr	r6, [sp, #16]
 800a166:	6123      	str	r3, [r4, #16]
 800a168:	e7d2      	b.n	800a110 <_printf_i+0x154>
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	1d11      	adds	r1, r2, #4
 800a16e:	6019      	str	r1, [r3, #0]
 800a170:	6816      	ldr	r6, [r2, #0]
 800a172:	2100      	movs	r1, #0
 800a174:	0030      	movs	r0, r6
 800a176:	6862      	ldr	r2, [r4, #4]
 800a178:	f000 f834 	bl	800a1e4 <memchr>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d001      	beq.n	800a184 <_printf_i+0x1c8>
 800a180:	1b80      	subs	r0, r0, r6
 800a182:	6060      	str	r0, [r4, #4]
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	2300      	movs	r3, #0
 800a18a:	9a04      	ldr	r2, [sp, #16]
 800a18c:	7013      	strb	r3, [r2, #0]
 800a18e:	e7bf      	b.n	800a110 <_printf_i+0x154>
 800a190:	6923      	ldr	r3, [r4, #16]
 800a192:	0032      	movs	r2, r6
 800a194:	9906      	ldr	r1, [sp, #24]
 800a196:	9805      	ldr	r0, [sp, #20]
 800a198:	9d07      	ldr	r5, [sp, #28]
 800a19a:	47a8      	blx	r5
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d0c1      	beq.n	800a124 <_printf_i+0x168>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	079b      	lsls	r3, r3, #30
 800a1a4:	d415      	bmi.n	800a1d2 <_printf_i+0x216>
 800a1a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a8:	68e0      	ldr	r0, [r4, #12]
 800a1aa:	4298      	cmp	r0, r3
 800a1ac:	dabc      	bge.n	800a128 <_printf_i+0x16c>
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	e7ba      	b.n	800a128 <_printf_i+0x16c>
 800a1b2:	0022      	movs	r2, r4
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	9906      	ldr	r1, [sp, #24]
 800a1b8:	9805      	ldr	r0, [sp, #20]
 800a1ba:	9e07      	ldr	r6, [sp, #28]
 800a1bc:	3219      	adds	r2, #25
 800a1be:	47b0      	blx	r6
 800a1c0:	1c43      	adds	r3, r0, #1
 800a1c2:	d0af      	beq.n	800a124 <_printf_i+0x168>
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	68e3      	ldr	r3, [r4, #12]
 800a1c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1ca:	1a9b      	subs	r3, r3, r2
 800a1cc:	42ab      	cmp	r3, r5
 800a1ce:	dcf0      	bgt.n	800a1b2 <_printf_i+0x1f6>
 800a1d0:	e7e9      	b.n	800a1a6 <_printf_i+0x1ea>
 800a1d2:	2500      	movs	r5, #0
 800a1d4:	e7f7      	b.n	800a1c6 <_printf_i+0x20a>
 800a1d6:	46c0      	nop			; (mov r8, r8)
 800a1d8:	0800a465 	.word	0x0800a465
 800a1dc:	0800a476 	.word	0x0800a476

0800a1e0 <__retarget_lock_acquire_recursive>:
 800a1e0:	4770      	bx	lr

0800a1e2 <__retarget_lock_release_recursive>:
 800a1e2:	4770      	bx	lr

0800a1e4 <memchr>:
 800a1e4:	b2c9      	uxtb	r1, r1
 800a1e6:	1882      	adds	r2, r0, r2
 800a1e8:	4290      	cmp	r0, r2
 800a1ea:	d101      	bne.n	800a1f0 <memchr+0xc>
 800a1ec:	2000      	movs	r0, #0
 800a1ee:	4770      	bx	lr
 800a1f0:	7803      	ldrb	r3, [r0, #0]
 800a1f2:	428b      	cmp	r3, r1
 800a1f4:	d0fb      	beq.n	800a1ee <memchr+0xa>
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	e7f6      	b.n	800a1e8 <memchr+0x4>

0800a1fa <memcpy>:
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d100      	bne.n	800a204 <memcpy+0xa>
 800a202:	bd10      	pop	{r4, pc}
 800a204:	5ccc      	ldrb	r4, [r1, r3]
 800a206:	54c4      	strb	r4, [r0, r3]
 800a208:	3301      	adds	r3, #1
 800a20a:	e7f8      	b.n	800a1fe <memcpy+0x4>

0800a20c <memmove>:
 800a20c:	b510      	push	{r4, lr}
 800a20e:	4288      	cmp	r0, r1
 800a210:	d902      	bls.n	800a218 <memmove+0xc>
 800a212:	188b      	adds	r3, r1, r2
 800a214:	4298      	cmp	r0, r3
 800a216:	d303      	bcc.n	800a220 <memmove+0x14>
 800a218:	2300      	movs	r3, #0
 800a21a:	e007      	b.n	800a22c <memmove+0x20>
 800a21c:	5c8b      	ldrb	r3, [r1, r2]
 800a21e:	5483      	strb	r3, [r0, r2]
 800a220:	3a01      	subs	r2, #1
 800a222:	d2fb      	bcs.n	800a21c <memmove+0x10>
 800a224:	bd10      	pop	{r4, pc}
 800a226:	5ccc      	ldrb	r4, [r1, r3]
 800a228:	54c4      	strb	r4, [r0, r3]
 800a22a:	3301      	adds	r3, #1
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d1fa      	bne.n	800a226 <memmove+0x1a>
 800a230:	e7f8      	b.n	800a224 <memmove+0x18>

0800a232 <_realloc_r>:
 800a232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a234:	0007      	movs	r7, r0
 800a236:	000d      	movs	r5, r1
 800a238:	0016      	movs	r6, r2
 800a23a:	2900      	cmp	r1, #0
 800a23c:	d105      	bne.n	800a24a <_realloc_r+0x18>
 800a23e:	0011      	movs	r1, r2
 800a240:	f7ff fc4a 	bl	8009ad8 <_malloc_r>
 800a244:	0004      	movs	r4, r0
 800a246:	0020      	movs	r0, r4
 800a248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a24a:	2a00      	cmp	r2, #0
 800a24c:	d103      	bne.n	800a256 <_realloc_r+0x24>
 800a24e:	f7ff fbf9 	bl	8009a44 <_free_r>
 800a252:	0034      	movs	r4, r6
 800a254:	e7f7      	b.n	800a246 <_realloc_r+0x14>
 800a256:	f000 f812 	bl	800a27e <_malloc_usable_size_r>
 800a25a:	002c      	movs	r4, r5
 800a25c:	42b0      	cmp	r0, r6
 800a25e:	d2f2      	bcs.n	800a246 <_realloc_r+0x14>
 800a260:	0031      	movs	r1, r6
 800a262:	0038      	movs	r0, r7
 800a264:	f7ff fc38 	bl	8009ad8 <_malloc_r>
 800a268:	1e04      	subs	r4, r0, #0
 800a26a:	d0ec      	beq.n	800a246 <_realloc_r+0x14>
 800a26c:	0029      	movs	r1, r5
 800a26e:	0032      	movs	r2, r6
 800a270:	f7ff ffc3 	bl	800a1fa <memcpy>
 800a274:	0029      	movs	r1, r5
 800a276:	0038      	movs	r0, r7
 800a278:	f7ff fbe4 	bl	8009a44 <_free_r>
 800a27c:	e7e3      	b.n	800a246 <_realloc_r+0x14>

0800a27e <_malloc_usable_size_r>:
 800a27e:	1f0b      	subs	r3, r1, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	1f18      	subs	r0, r3, #4
 800a284:	2b00      	cmp	r3, #0
 800a286:	da01      	bge.n	800a28c <_malloc_usable_size_r+0xe>
 800a288:	580b      	ldr	r3, [r1, r0]
 800a28a:	18c0      	adds	r0, r0, r3
 800a28c:	4770      	bx	lr
	...

0800a290 <_init>:
 800a290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a292:	46c0      	nop			; (mov r8, r8)
 800a294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a296:	bc08      	pop	{r3}
 800a298:	469e      	mov	lr, r3
 800a29a:	4770      	bx	lr

0800a29c <_fini>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	46c0      	nop			; (mov r8, r8)
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr
