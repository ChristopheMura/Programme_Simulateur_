
Simulator_HID_CUSTOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a60  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009b20  08009b20  00019b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c7c  08009c7c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c84  08009c84  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c84  08009c84  00019c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c88  08009c88  00019c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08009c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  200001f4  08009e80  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20000b44  08009e80  00020b44  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d1c  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c4  00000000  00000000  00038f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0003c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  0003d440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184a9  00000000  00000000  0003e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a5e  00000000  00000000  000565d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cf1  00000000  00000000  0006b02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1d20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  000f1d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f4 	.word	0x200001f4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009b08 	.word	0x08009b08

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001f8 	.word	0x200001f8
 8000104:	08009b08 	.word	0x08009b08

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b09b      	sub	sp, #108	; 0x6c
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t ADC_VAL[5];
	char msg[80];

	pumahid.hat0 = 0x00;
 80004a2:	4bb9      	ldr	r3, [pc, #740]	; (8000788 <main+0x2ec>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	//pumahid.hat1 = 0x00;
	//pumahid.hat2 = 0x00;
	pumahid.key3 = 0x00;
 80004a8:	4bb7      	ldr	r3, [pc, #732]	; (8000788 <main+0x2ec>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	705a      	strb	r2, [r3, #1]
	pumahid.but0 = 0x00;
 80004ae:	4bb6      	ldr	r3, [pc, #728]	; (8000788 <main+0x2ec>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	709a      	strb	r2, [r3, #2]
	pumahid.but1 = 0x00;
 80004b4:	4bb4      	ldr	r3, [pc, #720]	; (8000788 <main+0x2ec>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	70da      	strb	r2, [r3, #3]
	pumahid.but2 = 0x00;
 80004ba:	4bb3      	ldr	r3, [pc, #716]	; (8000788 <main+0x2ec>)
 80004bc:	2200      	movs	r2, #0
 80004be:	711a      	strb	r2, [r3, #4]
	pumahid.but3 = 0x00;
 80004c0:	4bb1      	ldr	r3, [pc, #708]	; (8000788 <main+0x2ec>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	715a      	strb	r2, [r3, #5]
	pumahid.x = 0x0000;
 80004c6:	4bb0      	ldr	r3, [pc, #704]	; (8000788 <main+0x2ec>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	80da      	strh	r2, [r3, #6]
	pumahid.y = 0x0000;
 80004cc:	4bae      	ldr	r3, [pc, #696]	; (8000788 <main+0x2ec>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	811a      	strh	r2, [r3, #8]
	pumahid.z = 0x0000;
 80004d2:	4bad      	ldr	r3, [pc, #692]	; (8000788 <main+0x2ec>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	815a      	strh	r2, [r3, #10]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fddc 	bl	8001094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 fac2 	bl	8000a64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fc0a 	bl	8000cf8 <MX_GPIO_Init>
  MX_ADC_Init();
 80004e4:	f000 fb38 	bl	8000b58 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 fbd6 	bl	8000c98 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004ec:	f008 fd46 	bl	8008f7c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	00d9      	lsls	r1, r3, #3
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2201      	movs	r2, #1
 80004fa:	0018      	movs	r0, r3
 80004fc:	f001 fe01 	bl	8002102 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	48a1      	ldr	r0, [pc, #644]	; (800078c <main+0x2f0>)
 8000506:	2200      	movs	r2, #0
 8000508:	0019      	movs	r1, r3
 800050a:	f001 fdfa 	bl	8002102 <HAL_GPIO_WritePin>
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);		// Calibration de l'ADC
 800050e:	4ba0      	ldr	r3, [pc, #640]	; (8000790 <main+0x2f4>)
 8000510:	2100      	movs	r1, #0
 8000512:	0018      	movs	r0, r3
 8000514:	f001 fade 	bl	8001ad4 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);				// Entrée CH pour le débouncer
 8000518:	2380      	movs	r3, #128	; 0x80
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	4a9b      	ldr	r2, [pc, #620]	; (800078c <main+0x2f0>)
 800051e:	0019      	movs	r1, r3
 8000520:	0010      	movs	r0, r2
 8000522:	f001 fdd1 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000526:	0003      	movs	r3, r0
 8000528:	001a      	movs	r2, r3
 800052a:	4b9a      	ldr	r3, [pc, #616]	; (8000794 <main+0x2f8>)
 800052c:	701a      	strb	r2, [r3, #0]

	  /******************** LECTURE DES BOUTONS POUSSOIRS ********************/

	  /************ BOUTON SUR MANCHE ************/

	  BP_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);			// Lecture bouton 1
 800052e:	4b97      	ldr	r3, [pc, #604]	; (800078c <main+0x2f0>)
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	0018      	movs	r0, r3
 8000534:	f001 fdc8 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000538:	0003      	movs	r3, r0
 800053a:	001a      	movs	r2, r3
 800053c:	4b96      	ldr	r3, [pc, #600]	; (8000798 <main+0x2fc>)
 800053e:	701a      	strb	r2, [r3, #0]
	  BP_3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);			// Lecture bouton 3
 8000540:	4b92      	ldr	r3, [pc, #584]	; (800078c <main+0x2f0>)
 8000542:	2120      	movs	r1, #32
 8000544:	0018      	movs	r0, r3
 8000546:	f001 fdbf 	bl	80020c8 <HAL_GPIO_ReadPin>
 800054a:	0003      	movs	r3, r0
 800054c:	001a      	movs	r2, r3
 800054e:	4b93      	ldr	r3, [pc, #588]	; (800079c <main+0x300>)
 8000550:	701a      	strb	r2, [r3, #0]
	  hat_east = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);		// Lecture chapeau est
 8000552:	4b8e      	ldr	r3, [pc, #568]	; (800078c <main+0x2f0>)
 8000554:	2110      	movs	r1, #16
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fdb6 	bl	80020c8 <HAL_GPIO_ReadPin>
 800055c:	0003      	movs	r3, r0
 800055e:	001a      	movs	r2, r3
 8000560:	4b8f      	ldr	r3, [pc, #572]	; (80007a0 <main+0x304>)
 8000562:	701a      	strb	r2, [r3, #0]

	  hat_north = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);		// Lecture chapeau nord
 8000564:	4b89      	ldr	r3, [pc, #548]	; (800078c <main+0x2f0>)
 8000566:	2108      	movs	r1, #8
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fdad 	bl	80020c8 <HAL_GPIO_ReadPin>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	4b8c      	ldr	r3, [pc, #560]	; (80007a4 <main+0x308>)
 8000574:	701a      	strb	r2, [r3, #0]
	  hat_west = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);		// Lecture chapeau ouest
 8000576:	2380      	movs	r3, #128	; 0x80
 8000578:	021a      	lsls	r2, r3, #8
 800057a:	23a0      	movs	r3, #160	; 0xa0
 800057c:	05db      	lsls	r3, r3, #23
 800057e:	0011      	movs	r1, r2
 8000580:	0018      	movs	r0, r3
 8000582:	f001 fda1 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000586:	0003      	movs	r3, r0
 8000588:	001a      	movs	r2, r3
 800058a:	4b87      	ldr	r3, [pc, #540]	; (80007a8 <main+0x30c>)
 800058c:	701a      	strb	r2, [r3, #0]

	  BP_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);			// Lecture bouton 2
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	009a      	lsls	r2, r3, #2
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fd95 	bl	80020c8 <HAL_GPIO_ReadPin>
 800059e:	0003      	movs	r3, r0
 80005a0:	001a      	movs	r2, r3
 80005a2:	4b82      	ldr	r3, [pc, #520]	; (80007ac <main+0x310>)
 80005a4:	701a      	strb	r2, [r3, #0]
	  BP_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);			// Lecture bouton 4
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	005a      	lsls	r2, r3, #1
 80005aa:	23a0      	movs	r3, #160	; 0xa0
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	0011      	movs	r1, r2
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fd89 	bl	80020c8 <HAL_GPIO_ReadPin>
 80005b6:	0003      	movs	r3, r0
 80005b8:	001a      	movs	r2, r3
 80005ba:	4b7d      	ldr	r3, [pc, #500]	; (80007b0 <main+0x314>)
 80005bc:	701a      	strb	r2, [r3, #0]
	  hat_south = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);		// Lecture chapeau sud
 80005be:	2380      	movs	r3, #128	; 0x80
 80005c0:	021b      	lsls	r3, r3, #8
 80005c2:	4a72      	ldr	r2, [pc, #456]	; (800078c <main+0x2f0>)
 80005c4:	0019      	movs	r1, r3
 80005c6:	0010      	movs	r0, r2
 80005c8:	f001 fd7e 	bl	80020c8 <HAL_GPIO_ReadPin>
 80005cc:	0003      	movs	r3, r0
 80005ce:	001a      	movs	r2, r3
 80005d0:	4b78      	ldr	r3, [pc, #480]	; (80007b4 <main+0x318>)
 80005d2:	701a      	strb	r2, [r3, #0]

	  /************ BOUTON SUR CONLLECTIVE ************/

	  BP_5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);			// Lecture bouton 5 rouge
 80005d4:	2380      	movs	r3, #128	; 0x80
 80005d6:	019b      	lsls	r3, r3, #6
 80005d8:	4a6c      	ldr	r2, [pc, #432]	; (800078c <main+0x2f0>)
 80005da:	0019      	movs	r1, r3
 80005dc:	0010      	movs	r0, r2
 80005de:	f001 fd73 	bl	80020c8 <HAL_GPIO_ReadPin>
 80005e2:	0003      	movs	r3, r0
 80005e4:	001a      	movs	r2, r3
 80005e6:	4b74      	ldr	r3, [pc, #464]	; (80007b8 <main+0x31c>)
 80005e8:	701a      	strb	r2, [r3, #0]
	  BP_6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);			// Lecture bouton 6 rouge
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	01db      	lsls	r3, r3, #7
 80005ee:	4a67      	ldr	r2, [pc, #412]	; (800078c <main+0x2f0>)
 80005f0:	0019      	movs	r1, r3
 80005f2:	0010      	movs	r0, r2
 80005f4:	f001 fd68 	bl	80020c8 <HAL_GPIO_ReadPin>
 80005f8:	0003      	movs	r3, r0
 80005fa:	001a      	movs	r2, r3
 80005fc:	4b6f      	ldr	r3, [pc, #444]	; (80007bc <main+0x320>)
 80005fe:	701a      	strb	r2, [r3, #0]

	  BP_7 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);			// Lecture switch rouge position haut
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	4a61      	ldr	r2, [pc, #388]	; (800078c <main+0x2f0>)
 8000606:	0019      	movs	r1, r3
 8000608:	0010      	movs	r0, r2
 800060a:	f001 fd5d 	bl	80020c8 <HAL_GPIO_ReadPin>
 800060e:	0003      	movs	r3, r0
 8000610:	001a      	movs	r2, r3
 8000612:	4b6b      	ldr	r3, [pc, #428]	; (80007c0 <main+0x324>)
 8000614:	701a      	strb	r2, [r3, #0]
	  BP_8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);			// Lecture switch rouge position bas
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	00db      	lsls	r3, r3, #3
 800061a:	4a5c      	ldr	r2, [pc, #368]	; (800078c <main+0x2f0>)
 800061c:	0019      	movs	r1, r3
 800061e:	0010      	movs	r0, r2
 8000620:	f001 fd52 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000624:	0003      	movs	r3, r0
 8000626:	001a      	movs	r2, r3
 8000628:	4b66      	ldr	r3, [pc, #408]	; (80007c4 <main+0x328>)
 800062a:	701a      	strb	r2, [r3, #0]

	  BP_20 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);			// Lecture swtich noir config 1 position haut
 800062c:	4b57      	ldr	r3, [pc, #348]	; (800078c <main+0x2f0>)
 800062e:	2104      	movs	r1, #4
 8000630:	0018      	movs	r0, r3
 8000632:	f001 fd49 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000636:	0003      	movs	r3, r0
 8000638:	001a      	movs	r2, r3
 800063a:	4b63      	ldr	r3, [pc, #396]	; (80007c8 <main+0x32c>)
 800063c:	701a      	strb	r2, [r3, #0]
	  BP_11 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);			// Lecture switch noir config 1 position bas
 800063e:	4b53      	ldr	r3, [pc, #332]	; (800078c <main+0x2f0>)
 8000640:	2102      	movs	r1, #2
 8000642:	0018      	movs	r0, r3
 8000644:	f001 fd40 	bl	80020c8 <HAL_GPIO_ReadPin>
 8000648:	0003      	movs	r3, r0
 800064a:	001a      	movs	r2, r3
 800064c:	4b5f      	ldr	r3, [pc, #380]	; (80007cc <main+0x330>)
 800064e:	701a      	strb	r2, [r3, #0]
	  BP_21 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);			// Lecture switch noir config 2 position haut
 8000650:	4b4e      	ldr	r3, [pc, #312]	; (800078c <main+0x2f0>)
 8000652:	2101      	movs	r1, #1
 8000654:	0018      	movs	r0, r3
 8000656:	f001 fd37 	bl	80020c8 <HAL_GPIO_ReadPin>
 800065a:	0003      	movs	r3, r0
 800065c:	001a      	movs	r2, r3
 800065e:	4b5c      	ldr	r3, [pc, #368]	; (80007d0 <main+0x334>)
 8000660:	701a      	strb	r2, [r3, #0]
	  BP_30 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);			// Lecture switch noir config 2 position bas
 8000662:	23a0      	movs	r3, #160	; 0xa0
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fd2d 	bl	80020c8 <HAL_GPIO_ReadPin>
 800066e:	0003      	movs	r3, r0
 8000670:	001a      	movs	r2, r3
 8000672:	4b58      	ldr	r3, [pc, #352]	; (80007d4 <main+0x338>)
 8000674:	701a      	strb	r2, [r3, #0]

	  /******************** CONVERSION DES DONNEES ANALOGIQUE ********************/

	  HAL_ADC_Start(&hadc);								// Scan des entrées ADC
 8000676:	4b46      	ldr	r3, [pc, #280]	; (8000790 <main+0x2f4>)
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff13 	bl	80014a4 <HAL_ADC_Start>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc);					// ADC channel 0
 800067e:	4b44      	ldr	r3, [pc, #272]	; (8000790 <main+0x2f4>)
 8000680:	0018      	movs	r0, r3
 8000682:	f001 f83f 	bl	8001704 <HAL_ADC_GetValue>
 8000686:	0002      	movs	r2, r0
 8000688:	2454      	movs	r4, #84	; 0x54
 800068a:	193b      	adds	r3, r7, r4
 800068c:	601a      	str	r2, [r3, #0]
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc);					// ADC channel 1
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <main+0x2f4>)
 8000690:	0018      	movs	r0, r3
 8000692:	f001 f837 	bl	8001704 <HAL_ADC_GetValue>
 8000696:	0002      	movs	r2, r0
 8000698:	193b      	adds	r3, r7, r4
 800069a:	605a      	str	r2, [r3, #4]
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc);					// ADC channel 4
 800069c:	4b3c      	ldr	r3, [pc, #240]	; (8000790 <main+0x2f4>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f001 f830 	bl	8001704 <HAL_ADC_GetValue>
 80006a4:	0002      	movs	r2, r0
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	609a      	str	r2, [r3, #8]
	  ADC_VAL[3] = HAL_ADC_GetValue(&hadc);					// ADC channel 5
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <main+0x2f4>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f001 f829 	bl	8001704 <HAL_ADC_GetValue>
 80006b2:	0002      	movs	r2, r0
 80006b4:	193b      	adds	r3, r7, r4
 80006b6:	60da      	str	r2, [r3, #12]
	  ADC_VAL[4] = HAL_ADC_GetValue(&hadc);					// ADC channel 6
 80006b8:	4b35      	ldr	r3, [pc, #212]	; (8000790 <main+0x2f4>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 f822 	bl	8001704 <HAL_ADC_GetValue>
 80006c0:	0002      	movs	r2, r0
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	611a      	str	r2, [r3, #16]
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);		// Fin de conversion
 80006c6:	2301      	movs	r3, #1
 80006c8:	425a      	negs	r2, r3
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <main+0x2f4>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f000 ff7c 	bl	80015cc <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc);									// Stop la conversion
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <main+0x2f4>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f000 ff38 	bl	800154c <HAL_ADC_Stop>

	  if (hat_north == 0) pumahid.hat0 = 0x00;				// Appuie sur chapeau nord
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <main+0x308>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d103      	bne.n	80006ec <main+0x250>
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <main+0x2ec>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e01a      	b.n	8000722 <main+0x286>
	  else if (hat_west == 0) pumahid.hat0 = 0x06;			// Appuie sur chapeau ouest
 80006ec:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <main+0x30c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <main+0x260>
 80006f4:	4b24      	ldr	r3, [pc, #144]	; (8000788 <main+0x2ec>)
 80006f6:	2206      	movs	r2, #6
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e012      	b.n	8000722 <main+0x286>
	  else if (hat_east == 0) pumahid.hat0 = 0x02;			// Appuie sur chapeau est
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <main+0x304>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d103      	bne.n	800070c <main+0x270>
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <main+0x2ec>)
 8000706:	2202      	movs	r2, #2
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	e00a      	b.n	8000722 <main+0x286>
	  else if (hat_south == 0) pumahid.hat0 = 0x04;			// Appuie sur chapeau sud
 800070c:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <main+0x318>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d103      	bne.n	800071c <main+0x280>
 8000714:	4b1c      	ldr	r3, [pc, #112]	; (8000788 <main+0x2ec>)
 8000716:	2204      	movs	r2, #4
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e002      	b.n	8000722 <main+0x286>
	  else pumahid.hat0 = 0x07;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <main+0x2ec>)
 800071e:	2207      	movs	r2, #7
 8000720:	701a      	strb	r2, [r3, #0]

	  if (BP_1 == 0) pumahid.but0 = 0x01;					// Appuie sur bouton 1
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <main+0x2fc>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d103      	bne.n	8000732 <main+0x296>
 800072a:	4b17      	ldr	r3, [pc, #92]	; (8000788 <main+0x2ec>)
 800072c:	2201      	movs	r2, #1
 800072e:	709a      	strb	r2, [r3, #2]
 8000730:	e01a      	b.n	8000768 <main+0x2cc>
	  else if (BP_3 == 0) pumahid.but0 = 0x02;				// Appuie sur bouton 3
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <main+0x300>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	2b00      	cmp	r3, #0
 8000738:	d103      	bne.n	8000742 <main+0x2a6>
 800073a:	4b13      	ldr	r3, [pc, #76]	; (8000788 <main+0x2ec>)
 800073c:	2202      	movs	r2, #2
 800073e:	709a      	strb	r2, [r3, #2]
 8000740:	e012      	b.n	8000768 <main+0x2cc>
	  else if (BP_2 == 0) pumahid.but0 = 0x04;				// Appuie sur bouton 2
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <main+0x310>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d103      	bne.n	8000752 <main+0x2b6>
 800074a:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <main+0x2ec>)
 800074c:	2204      	movs	r2, #4
 800074e:	709a      	strb	r2, [r3, #2]
 8000750:	e00a      	b.n	8000768 <main+0x2cc>
	  else if (BP_4 == 0) pumahid.but0 = 0X08;				// Appuie sur bouton 4
 8000752:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <main+0x314>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d103      	bne.n	8000762 <main+0x2c6>
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <main+0x2ec>)
 800075c:	2208      	movs	r2, #8
 800075e:	709a      	strb	r2, [r3, #2]
 8000760:	e002      	b.n	8000768 <main+0x2cc>
	  else pumahid.but0 = 0x10;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <main+0x2ec>)
 8000764:	2210      	movs	r2, #16
 8000766:	709a      	strb	r2, [r3, #2]

	  if (BP_5 == 0) pumahid.but1 = 0x01;					// Appuie sur bouton 5
 8000768:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <main+0x31c>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d103      	bne.n	8000778 <main+0x2dc>
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <main+0x2ec>)
 8000772:	2201      	movs	r2, #1
 8000774:	70da      	strb	r2, [r3, #3]
 8000776:	e032      	b.n	80007de <main+0x342>
	  else if (BP_6 == 0) pumahid.but1 = 0x02;				// Appuie sur bouton 6
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <main+0x320>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d12b      	bne.n	80007d8 <main+0x33c>
 8000780:	4b01      	ldr	r3, [pc, #4]	; (8000788 <main+0x2ec>)
 8000782:	2202      	movs	r2, #2
 8000784:	70da      	strb	r2, [r3, #3]
 8000786:	e02a      	b.n	80007de <main+0x342>
 8000788:	20000230 	.word	0x20000230
 800078c:	50000400 	.word	0x50000400
 8000790:	200002c4 	.word	0x200002c4
 8000794:	20000222 	.word	0x20000222
 8000798:	20000229 	.word	0x20000229
 800079c:	2000022e 	.word	0x2000022e
 80007a0:	20000225 	.word	0x20000225
 80007a4:	2000022d 	.word	0x2000022d
 80007a8:	2000023c 	.word	0x2000023c
 80007ac:	20000224 	.word	0x20000224
 80007b0:	20000226 	.word	0x20000226
 80007b4:	2000022a 	.word	0x2000022a
 80007b8:	20000228 	.word	0x20000228
 80007bc:	20000220 	.word	0x20000220
 80007c0:	20000221 	.word	0x20000221
 80007c4:	2000023d 	.word	0x2000023d
 80007c8:	20000227 	.word	0x20000227
 80007cc:	20000223 	.word	0x20000223
 80007d0:	2000022b 	.word	0x2000022b
 80007d4:	2000022c 	.word	0x2000022c
	  else pumahid.but1 = 0x04;
 80007d8:	4b95      	ldr	r3, [pc, #596]	; (8000a30 <main+0x594>)
 80007da:	2204      	movs	r2, #4
 80007dc:	70da      	strb	r2, [r3, #3]


	  if (BP_7 == 0)
 80007de:	4b95      	ldr	r3, [pc, #596]	; (8000a34 <main+0x598>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d10d      	bne.n	8000802 <main+0x366>
	  {
		  if (BP_11 == 0) pumahid.but2 = 0x01;
 80007e6:	4b94      	ldr	r3, [pc, #592]	; (8000a38 <main+0x59c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d102      	bne.n	80007f4 <main+0x358>
 80007ee:	4b90      	ldr	r3, [pc, #576]	; (8000a30 <main+0x594>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	711a      	strb	r2, [r3, #4]
		  if (BP_20 == 0) pumahid.but2 = 0x02; // À revoir
 80007f4:	4b91      	ldr	r3, [pc, #580]	; (8000a3c <main+0x5a0>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <main+0x366>
 80007fc:	4b8c      	ldr	r3, [pc, #560]	; (8000a30 <main+0x594>)
 80007fe:	2202      	movs	r2, #2
 8000800:	711a      	strb	r2, [r3, #4]
	  else if (BP_21 == 1) pumahid.but3 = 3;
	  else if (BP_30 == 1) pumahid.but3 = 4;
	  else pumahid.but3 = 5;*/


	  ADC_VAL[0] -= 1725;											// AXE X
 8000802:	2154      	movs	r1, #84	; 0x54
 8000804:	187b      	adds	r3, r7, r1
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a8d      	ldr	r2, [pc, #564]	; (8000a40 <main+0x5a4>)
 800080a:	189a      	adds	r2, r3, r2
 800080c:	187b      	adds	r3, r7, r1
 800080e:	601a      	str	r2, [r3, #0]
	  if (ADC_VAL[0] < 0 | ADC_VAL[0] > 60000) ADC_VAL[0] = 0;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a8b      	ldr	r2, [pc, #556]	; (8000a44 <main+0x5a8>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d902      	bls.n	8000820 <main+0x384>
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
	  ADC_VAL[0] = (ADC_VAL[0]*255)/511;
 8000820:	2454      	movs	r4, #84	; 0x54
 8000822:	193b      	adds	r3, r7, r4
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	0013      	movs	r3, r2
 8000828:	021b      	lsls	r3, r3, #8
 800082a:	1a9b      	subs	r3, r3, r2
 800082c:	4986      	ldr	r1, [pc, #536]	; (8000a48 <main+0x5ac>)
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff fc6a 	bl	8000108 <__udivsi3>
 8000834:	0003      	movs	r3, r0
 8000836:	001a      	movs	r2, r3
 8000838:	193b      	adds	r3, r7, r4
 800083a:	601a      	str	r2, [r3, #0]
	  if (ADC_VAL[0] > 255 & ADC_VAL[0] < 50000) ADC_VAL[0] = 255;
 800083c:	193b      	adds	r3, r7, r4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	22ff      	movs	r2, #255	; 0xff
 8000842:	429a      	cmp	r2, r3
 8000844:	419b      	sbcs	r3, r3
 8000846:	425b      	negs	r3, r3
 8000848:	b2da      	uxtb	r2, r3
 800084a:	193b      	adds	r3, r7, r4
 800084c:	6819      	ldr	r1, [r3, #0]
 800084e:	487f      	ldr	r0, [pc, #508]	; (8000a4c <main+0x5b0>)
 8000850:	2300      	movs	r3, #0
 8000852:	4288      	cmp	r0, r1
 8000854:	415b      	adcs	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4013      	ands	r3, r2
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <main+0x3ca>
 8000860:	193b      	adds	r3, r7, r4
 8000862:	22ff      	movs	r2, #255	; 0xff
 8000864:	601a      	str	r2, [r3, #0]

	  ADC_VAL[1] -= 1766;											// AXE Y
 8000866:	2154      	movs	r1, #84	; 0x54
 8000868:	187b      	adds	r3, r7, r1
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	4a78      	ldr	r2, [pc, #480]	; (8000a50 <main+0x5b4>)
 800086e:	189a      	adds	r2, r3, r2
 8000870:	187b      	adds	r3, r7, r1
 8000872:	605a      	str	r2, [r3, #4]
	  if (ADC_VAL[1] < 0 | ADC_VAL[1] > 60000) ADC_VAL[1] = 0;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	4a72      	ldr	r2, [pc, #456]	; (8000a44 <main+0x5a8>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d902      	bls.n	8000884 <main+0x3e8>
 800087e:	187b      	adds	r3, r7, r1
 8000880:	2200      	movs	r2, #0
 8000882:	605a      	str	r2, [r3, #4]
	  ADC_VAL[1] = (ADC_VAL[1]*255)/490;
 8000884:	2454      	movs	r4, #84	; 0x54
 8000886:	193b      	adds	r3, r7, r4
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	0013      	movs	r3, r2
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	22f5      	movs	r2, #245	; 0xf5
 8000892:	0051      	lsls	r1, r2, #1
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fc37 	bl	8000108 <__udivsi3>
 800089a:	0003      	movs	r3, r0
 800089c:	001a      	movs	r2, r3
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	605a      	str	r2, [r3, #4]
	  if (ADC_VAL[1] > 255 & ADC_VAL[1] < 50000) ADC_VAL[1] = 255;
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	22ff      	movs	r2, #255	; 0xff
 80008a8:	429a      	cmp	r2, r3
 80008aa:	419b      	sbcs	r3, r3
 80008ac:	425b      	negs	r3, r3
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	6859      	ldr	r1, [r3, #4]
 80008b4:	4865      	ldr	r0, [pc, #404]	; (8000a4c <main+0x5b0>)
 80008b6:	2300      	movs	r3, #0
 80008b8:	4288      	cmp	r0, r1
 80008ba:	415b      	adcs	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4013      	ands	r3, r2
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d002      	beq.n	80008cc <main+0x430>
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	22ff      	movs	r2, #255	; 0xff
 80008ca:	605a      	str	r2, [r3, #4]

	  ADC_VAL[2] -= 1850;											// COLLECTIVE AXE Z
 80008cc:	2154      	movs	r1, #84	; 0x54
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4a60      	ldr	r2, [pc, #384]	; (8000a54 <main+0x5b8>)
 80008d4:	189a      	adds	r2, r3, r2
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	609a      	str	r2, [r3, #8]
	  if (ADC_VAL[2] < 0 | ADC_VAL[2] > 60000) ADC_VAL[2] = 0;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4a59      	ldr	r2, [pc, #356]	; (8000a44 <main+0x5a8>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d902      	bls.n	80008ea <main+0x44e>
 80008e4:	187b      	adds	r3, r7, r1
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
	  ADC_VAL[2] = (ADC_VAL[2]*255)/700;
 80008ea:	2454      	movs	r4, #84	; 0x54
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	0013      	movs	r3, r2
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	1a9b      	subs	r3, r3, r2
 80008f6:	22af      	movs	r2, #175	; 0xaf
 80008f8:	0091      	lsls	r1, r2, #2
 80008fa:	0018      	movs	r0, r3
 80008fc:	f7ff fc04 	bl	8000108 <__udivsi3>
 8000900:	0003      	movs	r3, r0
 8000902:	001a      	movs	r2, r3
 8000904:	193b      	adds	r3, r7, r4
 8000906:	609a      	str	r2, [r3, #8]
	  if (ADC_VAL[2] > 255 & ADC_VAL[2] < 50000) ADC_VAL[2] = 255;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	22ff      	movs	r2, #255	; 0xff
 800090e:	429a      	cmp	r2, r3
 8000910:	419b      	sbcs	r3, r3
 8000912:	425b      	negs	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	193b      	adds	r3, r7, r4
 8000918:	6899      	ldr	r1, [r3, #8]
 800091a:	484c      	ldr	r0, [pc, #304]	; (8000a4c <main+0x5b0>)
 800091c:	2300      	movs	r3, #0
 800091e:	4288      	cmp	r0, r1
 8000920:	415b      	adcs	r3, r3
 8000922:	b2db      	uxtb	r3, r3
 8000924:	4013      	ands	r3, r2
 8000926:	b2db      	uxtb	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d002      	beq.n	8000932 <main+0x496>
 800092c:	193b      	adds	r3, r7, r4
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	609a      	str	r2, [r3, #8]

	  ADC_VAL[3] -= 3912;											// PEDAL X ROTATION
 8000932:	2154      	movs	r1, #84	; 0x54
 8000934:	187b      	adds	r3, r7, r1
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a47      	ldr	r2, [pc, #284]	; (8000a58 <main+0x5bc>)
 800093a:	189a      	adds	r2, r3, r2
 800093c:	187b      	adds	r3, r7, r1
 800093e:	60da      	str	r2, [r3, #12]
	  if (ADC_VAL[3] < 0 | ADC_VAL[3] > 60000) ADC_VAL[3] = 0;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	68db      	ldr	r3, [r3, #12]
 8000944:	4a3f      	ldr	r2, [pc, #252]	; (8000a44 <main+0x5a8>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d902      	bls.n	8000950 <main+0x4b4>
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
	  ADC_VAL[3] = (ADC_VAL[3]*255)/38;
 8000950:	2454      	movs	r4, #84	; 0x54
 8000952:	193b      	adds	r3, r7, r4
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	0013      	movs	r3, r2
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	2126      	movs	r1, #38	; 0x26
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fbd2 	bl	8000108 <__udivsi3>
 8000964:	0003      	movs	r3, r0
 8000966:	001a      	movs	r2, r3
 8000968:	193b      	adds	r3, r7, r4
 800096a:	60da      	str	r2, [r3, #12]
	  if (ADC_VAL[3] > 255 & ADC_VAL[3] < 50000) ADC_VAL[3] = 255;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	22ff      	movs	r2, #255	; 0xff
 8000972:	429a      	cmp	r2, r3
 8000974:	419b      	sbcs	r3, r3
 8000976:	425b      	negs	r3, r3
 8000978:	b2da      	uxtb	r2, r3
 800097a:	193b      	adds	r3, r7, r4
 800097c:	68d9      	ldr	r1, [r3, #12]
 800097e:	4833      	ldr	r0, [pc, #204]	; (8000a4c <main+0x5b0>)
 8000980:	2300      	movs	r3, #0
 8000982:	4288      	cmp	r0, r1
 8000984:	415b      	adcs	r3, r3
 8000986:	b2db      	uxtb	r3, r3
 8000988:	4013      	ands	r3, r2
 800098a:	b2db      	uxtb	r3, r3
 800098c:	2b00      	cmp	r3, #0
 800098e:	d002      	beq.n	8000996 <main+0x4fa>
 8000990:	193b      	adds	r3, r7, r4
 8000992:	22ff      	movs	r2, #255	; 0xff
 8000994:	60da      	str	r2, [r3, #12]

	  ADC_VAL[4] -= 2264;											// COLLECTIVE Y ROTATION
 8000996:	2154      	movs	r1, #84	; 0x54
 8000998:	187b      	adds	r3, r7, r1
 800099a:	691b      	ldr	r3, [r3, #16]
 800099c:	4a2f      	ldr	r2, [pc, #188]	; (8000a5c <main+0x5c0>)
 800099e:	189a      	adds	r2, r3, r2
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	611a      	str	r2, [r3, #16]
	  if (ADC_VAL[4] < 0 | ADC_VAL[4] > 60000) ADC_VAL[4] = 0;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4a26      	ldr	r2, [pc, #152]	; (8000a44 <main+0x5a8>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d902      	bls.n	80009b4 <main+0x518>
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
	  ADC_VAL[4] = (ADC_VAL[4]*255)/104;
 80009b4:	2454      	movs	r4, #84	; 0x54
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	691a      	ldr	r2, [r3, #16]
 80009ba:	0013      	movs	r3, r2
 80009bc:	021b      	lsls	r3, r3, #8
 80009be:	1a9b      	subs	r3, r3, r2
 80009c0:	2168      	movs	r1, #104	; 0x68
 80009c2:	0018      	movs	r0, r3
 80009c4:	f7ff fba0 	bl	8000108 <__udivsi3>
 80009c8:	0003      	movs	r3, r0
 80009ca:	001a      	movs	r2, r3
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	611a      	str	r2, [r3, #16]
	  if (ADC_VAL[4] > 255 & ADC_VAL[4] < 50000) ADC_VAL[4] = 255;
 80009d0:	193b      	adds	r3, r7, r4
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	22ff      	movs	r2, #255	; 0xff
 80009d6:	429a      	cmp	r2, r3
 80009d8:	419b      	sbcs	r3, r3
 80009da:	425b      	negs	r3, r3
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	193b      	adds	r3, r7, r4
 80009e0:	6919      	ldr	r1, [r3, #16]
 80009e2:	481a      	ldr	r0, [pc, #104]	; (8000a4c <main+0x5b0>)
 80009e4:	2300      	movs	r3, #0
 80009e6:	4288      	cmp	r0, r1
 80009e8:	415b      	adcs	r3, r3
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	4013      	ands	r3, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <main+0x55e>
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	22ff      	movs	r2, #255	; 0xff
 80009f8:	611a      	str	r2, [r3, #16]

	  /*********** Attribution des valeurs analogiques aux différents axes ***********/

	  pumahid.x = ADC_VAL[0];
 80009fa:	2154      	movs	r1, #84	; 0x54
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <main+0x594>)
 8000a04:	80da      	strh	r2, [r3, #6]
	  pumahid.y = ADC_VAL[1];
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	4b08      	ldr	r3, [pc, #32]	; (8000a30 <main+0x594>)
 8000a0e:	811a      	strh	r2, [r3, #8]
	  pumahid.z = ADC_VAL[2];
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <main+0x594>)
 8000a18:	815a      	strh	r2, [r3, #10]
	  //pumahid.rx = ADC_VAL[3];
	  //pumahid.ry = ADC_VAL[4];

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));	// Envoie des valeurs par USB
 8000a1a:	4905      	ldr	r1, [pc, #20]	; (8000a30 <main+0x594>)
 8000a1c:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <main+0x5c4>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	0018      	movs	r0, r3
 8000a22:	f006 ffcf 	bl	80079c4 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(10);
 8000a26:	200a      	movs	r0, #10
 8000a28:	f000 fba4 	bl	8001174 <HAL_Delay>
	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);				// Entrée CH pour le débouncer
 8000a2c:	e574      	b.n	8000518 <main+0x7c>
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	20000230 	.word	0x20000230
 8000a34:	20000221 	.word	0x20000221
 8000a38:	20000223 	.word	0x20000223
 8000a3c:	20000227 	.word	0x20000227
 8000a40:	fffff943 	.word	0xfffff943
 8000a44:	0000ea60 	.word	0x0000ea60
 8000a48:	000001ff 	.word	0x000001ff
 8000a4c:	0000c34f 	.word	0x0000c34f
 8000a50:	fffff91a 	.word	0xfffff91a
 8000a54:	fffff8c6 	.word	0xfffff8c6
 8000a58:	fffff0b8 	.word	0xfffff0b8
 8000a5c:	fffff728 	.word	0xfffff728
 8000a60:	20000324 	.word	0x20000324

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b590      	push	{r4, r7, lr}
 8000a66:	b09f      	sub	sp, #124	; 0x7c
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	2440      	movs	r4, #64	; 0x40
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2338      	movs	r3, #56	; 0x38
 8000a72:	001a      	movs	r2, r3
 8000a74:	2100      	movs	r1, #0
 8000a76:	f008 ff72 	bl	800995e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7a:	232c      	movs	r3, #44	; 0x2c
 8000a7c:	18fb      	adds	r3, r7, r3
 8000a7e:	0018      	movs	r0, r3
 8000a80:	2314      	movs	r3, #20
 8000a82:	001a      	movs	r2, r3
 8000a84:	2100      	movs	r1, #0
 8000a86:	f008 ff6a 	bl	800995e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	2328      	movs	r3, #40	; 0x28
 8000a90:	001a      	movs	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	f008 ff63 	bl	800995e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a98:	4b2d      	ldr	r3, [pc, #180]	; (8000b50 <SystemClock_Config+0xec>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2d      	ldr	r2, [pc, #180]	; (8000b54 <SystemClock_Config+0xf0>)
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <SystemClock_Config+0xec>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	0109      	lsls	r1, r1, #4
 8000aa6:	430a      	orrs	r2, r1
 8000aa8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000aaa:	0021      	movs	r1, r4
 8000aac:	187b      	adds	r3, r7, r1
 8000aae:	2222      	movs	r2, #34	; 0x22
 8000ab0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab8:	187b      	adds	r3, r7, r1
 8000aba:	2210      	movs	r2, #16
 8000abc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000abe:	187b      	adds	r3, r7, r1
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac4:	187b      	adds	r3, r7, r1
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aca:	187b      	adds	r3, r7, r1
 8000acc:	2200      	movs	r2, #0
 8000ace:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000ad0:	187b      	adds	r3, r7, r1
 8000ad2:	2280      	movs	r2, #128	; 0x80
 8000ad4:	02d2      	lsls	r2, r2, #11
 8000ad6:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	03d2      	lsls	r2, r2, #15
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f003 f984 	bl	8003df0 <HAL_RCC_OscConfig>
 8000ae8:	1e03      	subs	r3, r0, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000aec:	f000 f9ae 	bl	8000e4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	212c      	movs	r1, #44	; 0x2c
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	220f      	movs	r2, #15
 8000af6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2203      	movs	r2, #3
 8000afc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b10:	187b      	adds	r3, r7, r1
 8000b12:	2101      	movs	r1, #1
 8000b14:	0018      	movs	r0, r3
 8000b16:	f003 fd3f 	bl	8004598 <HAL_RCC_ClockConfig>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000b1e:	f000 f995 	bl	8000e4c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000b22:	1d3b      	adds	r3, r7, #4
 8000b24:	2242      	movs	r2, #66	; 0x42
 8000b26:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	04d2      	lsls	r2, r2, #19
 8000b34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b36:	1d3b      	adds	r3, r7, #4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f003 ff51 	bl	80049e0 <HAL_RCCEx_PeriphCLKConfig>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000b42:	f000 f983 	bl	8000e4c <Error_Handler>
  }
}
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	b01f      	add	sp, #124	; 0x7c
 8000b4c:	bd90      	pop	{r4, r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40007000 	.word	0x40007000
 8000b54:	ffffe7ff 	.word	0xffffe7ff

08000b58 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5e:	003b      	movs	r3, r7
 8000b60:	0018      	movs	r0, r3
 8000b62:	2308      	movs	r3, #8
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f008 fef9 	bl	800995e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b6c:	4b44      	ldr	r3, [pc, #272]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b6e:	4a45      	ldr	r2, [pc, #276]	; (8000c84 <MX_ADC_Init+0x12c>)
 8000b70:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b72:	4b43      	ldr	r3, [pc, #268]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b78:	4b41      	ldr	r3, [pc, #260]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	05d2      	lsls	r2, r2, #23
 8000b7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b80:	4b3f      	ldr	r3, [pc, #252]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b8c:	4b3c      	ldr	r3, [pc, #240]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b92:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000b98:	4b39      	ldr	r3, [pc, #228]	; (8000c80 <MX_ADC_Init+0x128>)
 8000b9a:	2220      	movs	r2, #32
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ba0:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <MX_ADC_Init+0x128>)
 8000ba2:	2221      	movs	r2, #33	; 0x21
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba8:	4b35      	ldr	r3, [pc, #212]	; (8000c80 <MX_ADC_Init+0x128>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bae:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bb0:	22c2      	movs	r2, #194	; 0xc2
 8000bb2:	32ff      	adds	r2, #255	; 0xff
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000bb6:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bb8:	222c      	movs	r2, #44	; 0x2c
 8000bba:	2100      	movs	r1, #0
 8000bbc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bbe:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bc0:	2204      	movs	r2, #4
 8000bc2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc4:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bd6:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 faec 	bl	80011bc <HAL_ADC_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000be8:	f000 f930 	bl	8000e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bec:	003b      	movs	r3, r7
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	2280      	movs	r2, #128	; 0x80
 8000bf6:	0152      	lsls	r2, r2, #5
 8000bf8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bfa:	003a      	movs	r2, r7
 8000bfc:	4b20      	ldr	r3, [pc, #128]	; (8000c80 <MX_ADC_Init+0x128>)
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fd8b 	bl	800171c <HAL_ADC_ConfigChannel>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000c0a:	f000 f91f 	bl	8000e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c0e:	003b      	movs	r3, r7
 8000c10:	4a1d      	ldr	r2, [pc, #116]	; (8000c88 <MX_ADC_Init+0x130>)
 8000c12:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c14:	003a      	movs	r2, r7
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_ADC_Init+0x128>)
 8000c18:	0011      	movs	r1, r2
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 fd7e 	bl	800171c <HAL_ADC_ConfigChannel>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000c24:	f000 f912 	bl	8000e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c28:	003b      	movs	r3, r7
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <MX_ADC_Init+0x134>)
 8000c2c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c2e:	003a      	movs	r2, r7
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_ADC_Init+0x128>)
 8000c32:	0011      	movs	r1, r2
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fd71 	bl	800171c <HAL_ADC_ConfigChannel>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000c3e:	f000 f905 	bl	8000e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c42:	003b      	movs	r3, r7
 8000c44:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <MX_ADC_Init+0x138>)
 8000c46:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c48:	003a      	movs	r2, r7
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	; (8000c80 <MX_ADC_Init+0x128>)
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fd64 	bl	800171c <HAL_ADC_ConfigChannel>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000c58:	f000 f8f8 	bl	8000e4c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	4a0d      	ldr	r2, [pc, #52]	; (8000c94 <MX_ADC_Init+0x13c>)
 8000c60:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c62:	003a      	movs	r2, r7
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_ADC_Init+0x128>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f000 fd57 	bl	800171c <HAL_ADC_ConfigChannel>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000c72:	f000 f8eb 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	200002c4 	.word	0x200002c4
 8000c84:	40012400 	.word	0x40012400
 8000c88:	04000002 	.word	0x04000002
 8000c8c:	10000010 	.word	0x10000010
 8000c90:	14000020 	.word	0x14000020
 8000c94:	18000040 	.word	0x18000040

08000c98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000c9e:	4a15      	ldr	r2, [pc, #84]	; (8000cf4 <MX_USART2_UART_Init+0x5c>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000ca4:	22e1      	movs	r2, #225	; 0xe1
 8000ca6:	0252      	lsls	r2, r2, #9
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <MX_USART2_UART_Init+0x58>)
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f003 fff3 	bl	8004cc8 <HAL_UART_Init>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce6:	f000 f8b1 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000240 	.word	0x20000240
 8000cf4:	40004400 	.word	0x40004400

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b089      	sub	sp, #36	; 0x24
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	240c      	movs	r4, #12
 8000d00:	193b      	adds	r3, r7, r4
 8000d02:	0018      	movs	r0, r3
 8000d04:	2314      	movs	r3, #20
 8000d06:	001a      	movs	r2, r3
 8000d08:	2100      	movs	r1, #0
 8000d0a:	f008 fe28 	bl	800995e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	4b4a      	ldr	r3, [pc, #296]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	430a      	orrs	r2, r1
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4013      	ands	r3, r2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d2a:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d2c:	2102      	movs	r1, #2
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <MX_GPIO_Init+0x140>)
 8000d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d36:	2202      	movs	r2, #2
 8000d38:	4013      	ands	r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_V_GPIO_Port, LED_V_Pin, GPIO_PIN_RESET);
 8000d3e:	2380      	movs	r3, #128	; 0x80
 8000d40:	00d9      	lsls	r1, r3, #3
 8000d42:	23a0      	movs	r3, #160	; 0xa0
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	2200      	movs	r2, #0
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f001 f9da 	bl	8002102 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000d4e:	2380      	movs	r3, #128	; 0x80
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	483a      	ldr	r0, [pc, #232]	; (8000e3c <MX_GPIO_Init+0x144>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	0019      	movs	r1, r3
 8000d58:	f001 f9d3 	bl	8002102 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BP30_Pin BP4_Pin HAT_WEST_Pin */
  GPIO_InitStruct.Pin = BP30_Pin|BP4_Pin|HAT_WEST_Pin;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	4a38      	ldr	r2, [pc, #224]	; (8000e40 <MX_GPIO_Init+0x148>)
 8000d60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6e:	193a      	adds	r2, r7, r4
 8000d70:	23a0      	movs	r3, #160	; 0xa0
 8000d72:	05db      	lsls	r3, r3, #23
 8000d74:	0011      	movs	r1, r2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f001 f828 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP21_Pin BP11_Pin BP8_Pin BP7_Pin
                           HAT_SOUTH_Pin HAT_NORTH_Pin HAT_EAST_Pin BP3_Pin
                           BP1_Pin */
  GPIO_InitStruct.Pin = BP21_Pin|BP11_Pin|BP8_Pin|BP7_Pin
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <MX_GPIO_Init+0x14c>)
 8000d80:	601a      	str	r2, [r3, #0]
                          |HAT_SOUTH_Pin|HAT_NORTH_Pin|HAT_EAST_Pin|BP3_Pin
                          |BP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2200      	movs	r2, #0
 8000d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	4a2a      	ldr	r2, [pc, #168]	; (8000e3c <MX_GPIO_Init+0x144>)
 8000d92:	0019      	movs	r1, r3
 8000d94:	0010      	movs	r0, r2
 8000d96:	f001 f819 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : BP20_Pin BP5_Pin BP6_Pin CH_Pin */
  GPIO_InitStruct.Pin = BP20_Pin|BP5_Pin|BP6_Pin|CH_Pin;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <MX_GPIO_Init+0x150>)
 8000d9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2202      	movs	r2, #2
 8000daa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <MX_GPIO_Init+0x144>)
 8000db0:	0019      	movs	r1, r3
 8000db2:	0010      	movs	r0, r2
 8000db4:	f001 f80a 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BP2_Pin */
  GPIO_InitStruct.Pin = BP2_Pin;
 8000db8:	193b      	adds	r3, r7, r4
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	193b      	adds	r3, r7, r4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	193b      	adds	r3, r7, r4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	193a      	adds	r2, r7, r4
 8000dce:	23a0      	movs	r3, #160	; 0xa0
 8000dd0:	05db      	lsls	r3, r3, #23
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fff9 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_V_Pin */
  GPIO_InitStruct.Pin = LED_V_Pin;
 8000dda:	0021      	movs	r1, r4
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2280      	movs	r2, #128	; 0x80
 8000de0:	00d2      	lsls	r2, r2, #3
 8000de2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de4:	000c      	movs	r4, r1
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	2201      	movs	r2, #1
 8000dea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	193b      	adds	r3, r7, r4
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df2:	193b      	adds	r3, r7, r4
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_V_GPIO_Port, &GPIO_InitStruct);
 8000df8:	193a      	adds	r2, r7, r4
 8000dfa:	23a0      	movs	r3, #160	; 0xa0
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	0011      	movs	r1, r2
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 ffe3 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000e06:	0021      	movs	r1, r4
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2201      	movs	r2, #1
 8000e14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	2202      	movs	r2, #2
 8000e1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <MX_GPIO_Init+0x144>)
 8000e26:	0019      	movs	r1, r3
 8000e28:	0010      	movs	r0, r2
 8000e2a:	f000 ffcf 	bl	8001dcc <HAL_GPIO_Init>

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b009      	add	sp, #36	; 0x24
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	50000400 	.word	0x50000400
 8000e40:	00008180 	.word	0x00008180
 8000e44:	00008c7b 	.word	0x00008c7b
 8000e48:	00006104 	.word	0x00006104

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_MspInit+0x24>)
 8000e5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_MspInit+0x24>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	430a      	orrs	r2, r1
 8000e66:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <HAL_MspInit+0x24>)
 8000e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_MspInit+0x24>)
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	0549      	lsls	r1, r1, #21
 8000e72:	430a      	orrs	r2, r1
 8000e74:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b089      	sub	sp, #36	; 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	240c      	movs	r4, #12
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	2314      	movs	r3, #20
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f008 fd63 	bl	800995e <memset>
  if(hadc->Instance==ADC1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <HAL_ADC_MspInit+0x70>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d122      	bne.n	8000ee8 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea6:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000ea8:	2180      	movs	r1, #128	; 0x80
 8000eaa:	0089      	lsls	r1, r1, #2
 8000eac:	430a      	orrs	r2, r1
 8000eae:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	; (8000ef4 <HAL_ADC_MspInit+0x74>)
 8000ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = AXE_X_Pin|AXE_Y_Pin|AXE_Z_Pin|COLLECTIVE_Y_Pin
 8000ec8:	193b      	adds	r3, r7, r4
 8000eca:	2273      	movs	r2, #115	; 0x73
 8000ecc:	601a      	str	r2, [r3, #0]
                          |PEDALE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	193b      	adds	r3, r7, r4
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	193a      	adds	r2, r7, r4
 8000edc:	23a0      	movs	r3, #160	; 0xa0
 8000ede:	05db      	lsls	r3, r3, #23
 8000ee0:	0011      	movs	r1, r2
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	f000 ff72 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b009      	add	sp, #36	; 0x24
 8000eee:	bd90      	pop	{r4, r7, pc}
 8000ef0:	40012400 	.word	0x40012400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	240c      	movs	r4, #12
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2314      	movs	r3, #20
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f008 fd27 	bl	800995e <memset>
  if(huart->Instance==USART2)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a18      	ldr	r2, [pc, #96]	; (8000f78 <HAL_UART_MspInit+0x80>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d129      	bne.n	8000f6e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_UART_MspInit+0x84>)
 8000f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x84>)
 8000f20:	2180      	movs	r1, #128	; 0x80
 8000f22:	0289      	lsls	r1, r1, #10
 8000f24:	430a      	orrs	r2, r1
 8000f26:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0x84>)
 8000f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_UART_MspInit+0x84>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f34:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0x84>)
 8000f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f40:	0021      	movs	r1, r4
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	220c      	movs	r2, #12
 8000f46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2203      	movs	r2, #3
 8000f58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	187a      	adds	r2, r7, r1
 8000f62:	23a0      	movs	r3, #160	; 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 ff2f 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	b009      	add	sp, #36	; 0x24
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40021000 	.word	0x40021000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f8ca 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
	...

08000fb0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <USB_IRQHandler+0x14>)
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f001 f9f6 	bl	80023a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	20000840 	.word	0x20000840

08000fc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd0:	4a14      	ldr	r2, [pc, #80]	; (8001024 <_sbrk+0x5c>)
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <_sbrk+0x60>)
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d102      	bne.n	8000fea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <_sbrk+0x64>)
 8000fe6:	4a12      	ldr	r2, [pc, #72]	; (8001030 <_sbrk+0x68>)
 8000fe8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <_sbrk+0x64>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d207      	bcs.n	8001008 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff8:	f008 fc6a 	bl	80098d0 <__errno>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	220c      	movs	r2, #12
 8001000:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001002:	2301      	movs	r3, #1
 8001004:	425b      	negs	r3, r3
 8001006:	e009      	b.n	800101c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <_sbrk+0x64>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <_sbrk+0x64>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	18d2      	adds	r2, r2, r3
 8001016:	4b05      	ldr	r3, [pc, #20]	; (800102c <_sbrk+0x64>)
 8001018:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800101a:	68fb      	ldr	r3, [r7, #12]
}
 800101c:	0018      	movs	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	b006      	add	sp, #24
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20005000 	.word	0x20005000
 8001028:	00000400 	.word	0x00000400
 800102c:	20000210 	.word	0x20000210
 8001030:	20000b48 	.word	0x20000b48

08001034 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001042:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490e      	ldr	r1, [pc, #56]	; (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0e      	ldr	r2, [pc, #56]	; (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0b      	ldr	r4, [pc, #44]	; (800108c <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800106a:	f7ff ffe3 	bl	8001034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800106e:	f008 fc35 	bl	80098dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001072:	f7ff fa13 	bl	800049c <main>

08001076 <LoopForever>:

LoopForever:
    b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
   ldr   r0, =_estack
 8001078:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001084:	08009c8c 	.word	0x08009c8c
  ldr r2, =_sbss
 8001088:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 800108c:	20000b44 	.word	0x20000b44

08001090 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC1_COMP_IRQHandler>
	...

08001094 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010a0:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_Init+0x3c>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <HAL_Init+0x3c>)
 80010a6:	2140      	movs	r1, #64	; 0x40
 80010a8:	430a      	orrs	r2, r1
 80010aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ac:	2003      	movs	r0, #3
 80010ae:	f000 f811 	bl	80010d4 <HAL_InitTick>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d003      	beq.n	80010be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010b6:	1dfb      	adds	r3, r7, #7
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e001      	b.n	80010c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010be:	f7ff fecb 	bl	8000e58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
}
 80010c6:	0018      	movs	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40022000 	.word	0x40022000

080010d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010dc:	4b14      	ldr	r3, [pc, #80]	; (8001130 <HAL_InitTick+0x5c>)
 80010de:	681c      	ldr	r4, [r3, #0]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_InitTick+0x60>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	0019      	movs	r1, r3
 80010e6:	23fa      	movs	r3, #250	; 0xfa
 80010e8:	0098      	lsls	r0, r3, #2
 80010ea:	f7ff f80d 	bl	8000108 <__udivsi3>
 80010ee:	0003      	movs	r3, r0
 80010f0:	0019      	movs	r1, r3
 80010f2:	0020      	movs	r0, r4
 80010f4:	f7ff f808 	bl	8000108 <__udivsi3>
 80010f8:	0003      	movs	r3, r0
 80010fa:	0018      	movs	r0, r3
 80010fc:	f000 fe59 	bl	8001db2 <HAL_SYSTICK_Config>
 8001100:	1e03      	subs	r3, r0, #0
 8001102:	d001      	beq.n	8001108 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e00f      	b.n	8001128 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b03      	cmp	r3, #3
 800110c:	d80b      	bhi.n	8001126 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	2301      	movs	r3, #1
 8001112:	425b      	negs	r3, r3
 8001114:	2200      	movs	r2, #0
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fe26 	bl	8001d68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_InitTick+0x64>)
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	0018      	movs	r0, r3
 800112a:	46bd      	mov	sp, r7
 800112c:	b003      	add	sp, #12
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_IncTick+0x1c>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	001a      	movs	r2, r3
 8001146:	4b05      	ldr	r3, [pc, #20]	; (800115c <HAL_IncTick+0x20>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	18d2      	adds	r2, r2, r3
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_IncTick+0x20>)
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	20000008 	.word	0x20000008
 800115c:	20000320 	.word	0x20000320

08001160 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  return uwTick;
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <HAL_GetTick+0x10>)
 8001166:	681b      	ldr	r3, [r3, #0]
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	20000320 	.word	0x20000320

08001174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800117c:	f7ff fff0 	bl	8001160 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	d005      	beq.n	800119a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800118e:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_Delay+0x44>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	001a      	movs	r2, r3
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	189b      	adds	r3, r3, r2
 8001198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	f7ff ffe0 	bl	8001160 <HAL_GetTick>
 80011a0:	0002      	movs	r2, r0
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d8f7      	bhi.n	800119c <HAL_Delay+0x28>
  {
  }
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b004      	add	sp, #16
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000008 	.word	0x20000008

080011bc <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e159      	b.n	8001482 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10a      	bne.n	80011ec <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2250      	movs	r2, #80	; 0x50
 80011e0:	2100      	movs	r1, #0
 80011e2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff fe4a 	bl	8000e80 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f0:	2210      	movs	r2, #16
 80011f2:	4013      	ands	r3, r2
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	d005      	beq.n	8001204 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	2204      	movs	r2, #4
 8001200:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001202:	d00b      	beq.n	800121c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001208:	2210      	movs	r2, #16
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2250      	movs	r2, #80	; 0x50
 8001214:	2100      	movs	r1, #0
 8001216:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e132      	b.n	8001482 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	4a9a      	ldr	r2, [pc, #616]	; (800148c <HAL_ADC_Init+0x2d0>)
 8001222:	4013      	ands	r3, r2
 8001224:	2202      	movs	r2, #2
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2203      	movs	r2, #3
 8001234:	4013      	ands	r3, r2
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_ADC_Init+0x90>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2201      	movs	r2, #1
 8001242:	4013      	ands	r3, r2
 8001244:	2b01      	cmp	r3, #1
 8001246:	d101      	bne.n	800124c <HAL_ADC_Init+0x90>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_ADC_Init+0x92>
 800124c:	2300      	movs	r3, #0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d149      	bne.n	80012e6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	23c0      	movs	r3, #192	; 0xc0
 8001258:	061b      	lsls	r3, r3, #24
 800125a:	429a      	cmp	r2, r3
 800125c:	d00b      	beq.n	8001276 <HAL_ADC_Init+0xba>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	05db      	lsls	r3, r3, #23
 8001266:	429a      	cmp	r2, r3
 8001268:	d005      	beq.n	8001276 <HAL_ADC_Init+0xba>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	2380      	movs	r3, #128	; 0x80
 8001270:	061b      	lsls	r3, r3, #24
 8001272:	429a      	cmp	r2, r3
 8001274:	d111      	bne.n	800129a <HAL_ADC_Init+0xde>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	0092      	lsls	r2, r2, #2
 8001282:	0892      	lsrs	r2, r2, #2
 8001284:	611a      	str	r2, [r3, #16]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6919      	ldr	r1, [r3, #16]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	e014      	b.n	80012c4 <HAL_ADC_Init+0x108>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	0092      	lsls	r2, r2, #2
 80012a6:	0892      	lsrs	r2, r2, #2
 80012a8:	611a      	str	r2, [r3, #16]
 80012aa:	4b79      	ldr	r3, [pc, #484]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	4b78      	ldr	r3, [pc, #480]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012b0:	4978      	ldr	r1, [pc, #480]	; (8001494 <HAL_ADC_Init+0x2d8>)
 80012b2:	400a      	ands	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	4b76      	ldr	r3, [pc, #472]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4b74      	ldr	r3, [pc, #464]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2118      	movs	r1, #24
 80012d0:	438a      	bics	r2, r1
 80012d2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	68d9      	ldr	r1, [r3, #12]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689a      	ldr	r2, [r3, #8]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80012e6:	4b6a      	ldr	r3, [pc, #424]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b69      	ldr	r3, [pc, #420]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012ec:	496a      	ldr	r1, [pc, #424]	; (8001498 <HAL_ADC_Init+0x2dc>)
 80012ee:	400a      	ands	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80012f2:	4b67      	ldr	r3, [pc, #412]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012f4:	6819      	ldr	r1, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fa:	065a      	lsls	r2, r3, #25
 80012fc:	4b64      	ldr	r3, [pc, #400]	; (8001490 <HAL_ADC_Init+0x2d4>)
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	2380      	movs	r3, #128	; 0x80
 800130a:	055b      	lsls	r3, r3, #21
 800130c:	4013      	ands	r3, r2
 800130e:	d108      	bne.n	8001322 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	0549      	lsls	r1, r1, #21
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	495b      	ldr	r1, [pc, #364]	; (800149c <HAL_ADC_Init+0x2e0>)
 800132e:	400a      	ands	r2, r1
 8001330:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b02      	cmp	r3, #2
 8001342:	d101      	bne.n	8001348 <HAL_ADC_Init+0x18c>
 8001344:	2304      	movs	r3, #4
 8001346:	e000      	b.n	800134a <HAL_ADC_Init+0x18e>
 8001348:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800134a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2020      	movs	r0, #32
 8001350:	5c1b      	ldrb	r3, [r3, r0]
 8001352:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001354:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	202c      	movs	r0, #44	; 0x2c
 800135a:	5c1b      	ldrb	r3, [r3, r0]
 800135c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800135e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001364:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800136c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001374:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	430a      	orrs	r2, r1
 800137c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001382:	23c2      	movs	r3, #194	; 0xc2
 8001384:	33ff      	adds	r3, #255	; 0xff
 8001386:	429a      	cmp	r2, r3
 8001388:	d00b      	beq.n	80013a2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68d9      	ldr	r1, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	430a      	orrs	r2, r1
 80013a0:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2221      	movs	r2, #33	; 0x21
 80013a6:	5c9b      	ldrb	r3, [r3, r2]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d11a      	bne.n	80013e2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	5c9b      	ldrb	r3, [r3, r2]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68da      	ldr	r2, [r3, #12]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2180      	movs	r1, #128	; 0x80
 80013c2:	0249      	lsls	r1, r1, #9
 80013c4:	430a      	orrs	r2, r1
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	e00b      	b.n	80013e2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ce:	2220      	movs	r2, #32
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013da:	2201      	movs	r2, #1
 80013dc:	431a      	orrs	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d11f      	bne.n	800142a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	492a      	ldr	r1, [pc, #168]	; (80014a0 <HAL_ADC_Init+0x2e4>)
 80013f6:	400a      	ands	r2, r1
 80013f8:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6919      	ldr	r1, [r3, #16]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001408:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800140e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2101      	movs	r1, #1
 8001424:	430a      	orrs	r2, r1
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	e00e      	b.n	8001448 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2201      	movs	r2, #1
 8001432:	4013      	ands	r3, r2
 8001434:	2b01      	cmp	r3, #1
 8001436:	d107      	bne.n	8001448 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	691a      	ldr	r2, [r3, #16]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	438a      	bics	r2, r1
 8001446:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	695a      	ldr	r2, [r3, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2107      	movs	r1, #7
 8001454:	438a      	bics	r2, r1
 8001456:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6959      	ldr	r1, [r3, #20]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001474:	2203      	movs	r2, #3
 8001476:	4393      	bics	r3, r2
 8001478:	2201      	movs	r2, #1
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	0018      	movs	r0, r3
 8001484:	46bd      	mov	sp, r7
 8001486:	b002      	add	sp, #8
 8001488:	bd80      	pop	{r7, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	fffffefd 	.word	0xfffffefd
 8001490:	40012708 	.word	0x40012708
 8001494:	ffc3ffff 	.word	0xffc3ffff
 8001498:	fdffffff 	.word	0xfdffffff
 800149c:	fffe0219 	.word	0xfffe0219
 80014a0:	fffffc03 	.word	0xfffffc03

080014a4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ac:	230f      	movs	r3, #15
 80014ae:	18fb      	adds	r3, r7, r3
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2204      	movs	r2, #4
 80014bc:	4013      	ands	r3, r2
 80014be:	d138      	bne.n	8001532 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2250      	movs	r2, #80	; 0x50
 80014c4:	5c9b      	ldrb	r3, [r3, r2]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d101      	bne.n	80014ce <HAL_ADC_Start+0x2a>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e038      	b.n	8001540 <HAL_ADC_Start+0x9c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2250      	movs	r2, #80	; 0x50
 80014d2:	2101      	movs	r1, #1
 80014d4:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d007      	beq.n	80014ee <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80014de:	230f      	movs	r3, #15
 80014e0:	18fc      	adds	r4, r7, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f9b9 	bl	800185c <ADC_Enable>
 80014ea:	0003      	movs	r3, r0
 80014ec:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014ee:	230f      	movs	r3, #15
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d120      	bne.n	800153a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <HAL_ADC_Start+0xa4>)
 80014fe:	4013      	ands	r3, r2
 8001500:	2280      	movs	r2, #128	; 0x80
 8001502:	0052      	lsls	r2, r2, #1
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2250      	movs	r2, #80	; 0x50
 8001514:	2100      	movs	r1, #0
 8001516:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	221c      	movs	r2, #28
 800151e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2104      	movs	r1, #4
 800152c:	430a      	orrs	r2, r1
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	e003      	b.n	800153a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2202      	movs	r2, #2
 8001538:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800153a:	230f      	movs	r3, #15
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	781b      	ldrb	r3, [r3, #0]
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b005      	add	sp, #20
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	fffff0fe 	.word	0xfffff0fe

0800154c <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001554:	230f      	movs	r3, #15
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2250      	movs	r2, #80	; 0x50
 8001560:	5c9b      	ldrb	r3, [r3, r2]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <HAL_ADC_Stop+0x1e>
 8001566:	2302      	movs	r3, #2
 8001568:	e029      	b.n	80015be <HAL_ADC_Stop+0x72>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2250      	movs	r2, #80	; 0x50
 800156e:	2101      	movs	r1, #1
 8001570:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001572:	250f      	movs	r5, #15
 8001574:	197c      	adds	r4, r7, r5
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0018      	movs	r0, r3
 800157a:	f000 fa3e 	bl	80019fa <ADC_ConversionStop>
 800157e:	0003      	movs	r3, r0
 8001580:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001582:	197b      	adds	r3, r7, r5
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d112      	bne.n	80015b0 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800158a:	197c      	adds	r4, r7, r5
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	0018      	movs	r0, r3
 8001590:	f000 f9cc 	bl	800192c <ADC_Disable>
 8001594:	0003      	movs	r3, r0
 8001596:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001598:	197b      	adds	r3, r7, r5
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d107      	bne.n	80015b0 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a4:	4a08      	ldr	r2, [pc, #32]	; (80015c8 <HAL_ADC_Stop+0x7c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	2201      	movs	r2, #1
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2250      	movs	r2, #80	; 0x50
 80015b4:	2100      	movs	r1, #0
 80015b6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015b8:	230f      	movs	r3, #15
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	781b      	ldrb	r3, [r3, #0]
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b004      	add	sp, #16
 80015c4:	bdb0      	pop	{r4, r5, r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	fffffefe 	.word	0xfffffefe

080015cc <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d102      	bne.n	80015ec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80015e6:	2308      	movs	r3, #8
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e014      	b.n	8001616 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d10b      	bne.n	8001612 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	2220      	movs	r2, #32
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2250      	movs	r2, #80	; 0x50
 800160a:	2100      	movs	r1, #0
 800160c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e072      	b.n	80016f8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001612:	230c      	movs	r3, #12
 8001614:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001616:	f7ff fda3 	bl	8001160 <HAL_GetTick>
 800161a:	0003      	movs	r3, r0
 800161c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800161e:	e01f      	b.n	8001660 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	d01c      	beq.n	8001660 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d007      	beq.n	800163c <HAL_ADC_PollForConversion+0x70>
 800162c:	f7ff fd98 	bl	8001160 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	429a      	cmp	r2, r3
 800163a:	d211      	bcs.n	8001660 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4013      	ands	r3, r2
 8001646:	d10b      	bne.n	8001660 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	2204      	movs	r2, #4
 800164e:	431a      	orrs	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2250      	movs	r2, #80	; 0x50
 8001658:	2100      	movs	r1, #0
 800165a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e04b      	b.n	80016f8 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4013      	ands	r3, r2
 800166a:	d0d9      	beq.n	8001620 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0092      	lsls	r2, r2, #2
 8001674:	431a      	orrs	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	23c0      	movs	r3, #192	; 0xc0
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d12e      	bne.n	80016e6 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800168e:	2b00      	cmp	r3, #0
 8001690:	d129      	bne.n	80016e6 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2208      	movs	r2, #8
 800169a:	4013      	ands	r3, r2
 800169c:	2b08      	cmp	r3, #8
 800169e:	d122      	bne.n	80016e6 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	2204      	movs	r2, #4
 80016a8:	4013      	ands	r3, r2
 80016aa:	d110      	bne.n	80016ce <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685a      	ldr	r2, [r3, #4]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	210c      	movs	r1, #12
 80016b8:	438a      	bics	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_ADC_PollForConversion+0x134>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	2201      	movs	r2, #1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
 80016cc:	e00b      	b.n	80016e6 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	2220      	movs	r2, #32
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016de:	2201      	movs	r2, #1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d103      	bne.n	80016f6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b004      	add	sp, #16
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	fffffefe 	.word	0xfffffefe

08001704 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b002      	add	sp, #8
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2250      	movs	r2, #80	; 0x50
 800172a:	5c9b      	ldrb	r3, [r3, r2]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x18>
 8001730:	2302      	movs	r3, #2
 8001732:	e085      	b.n	8001840 <HAL_ADC_ConfigChannel+0x124>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2250      	movs	r2, #80	; 0x50
 8001738:	2101      	movs	r1, #1
 800173a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2204      	movs	r2, #4
 8001744:	4013      	ands	r3, r2
 8001746:	d00b      	beq.n	8001760 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174c:	2220      	movs	r2, #32
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2250      	movs	r2, #80	; 0x50
 8001758:	2100      	movs	r1, #0
 800175a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e06f      	b.n	8001840 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	4a38      	ldr	r2, [pc, #224]	; (8001848 <HAL_ADC_ConfigChannel+0x12c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d035      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	035b      	lsls	r3, r3, #13
 8001776:	0b5a      	lsrs	r2, r3, #13
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	02db      	lsls	r3, r3, #11
 8001788:	4013      	ands	r3, r2
 800178a:	d009      	beq.n	80017a0 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 800178c:	4b2f      	ldr	r3, [pc, #188]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	0409      	lsls	r1, r1, #16
 8001796:	430a      	orrs	r2, r1
 8001798:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800179a:	200a      	movs	r0, #10
 800179c:	f000 f97a 	bl	8001a94 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	; 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d006      	beq.n	80017ba <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 80017b2:	2180      	movs	r1, #128	; 0x80
 80017b4:	03c9      	lsls	r1, r1, #15
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4013      	ands	r3, r2
 80017c4:	d037      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	4b20      	ldr	r3, [pc, #128]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 80017cc:	2180      	movs	r1, #128	; 0x80
 80017ce:	0449      	lsls	r1, r1, #17
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	e02f      	b.n	8001836 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	035b      	lsls	r3, r3, #13
 80017e2:	0b5b      	lsrs	r3, r3, #13
 80017e4:	43d9      	mvns	r1, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	400a      	ands	r2, r1
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	02db      	lsls	r3, r3, #11
 80017f6:	4013      	ands	r3, r2
 80017f8:	d005      	beq.n	8001806 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 8001800:	4913      	ldr	r1, [pc, #76]	; (8001850 <HAL_ADC_ConfigChannel+0x134>)
 8001802:	400a      	ands	r2, r1
 8001804:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	029b      	lsls	r3, r3, #10
 800180e:	4013      	ands	r3, r2
 8001810:	d005      	beq.n	800181e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 8001818:	490e      	ldr	r1, [pc, #56]	; (8001854 <HAL_ADC_ConfigChannel+0x138>)
 800181a:	400a      	ands	r2, r1
 800181c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	4013      	ands	r3, r2
 8001828:	d005      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_ADC_ConfigChannel+0x130>)
 8001830:	4909      	ldr	r1, [pc, #36]	; (8001858 <HAL_ADC_ConfigChannel+0x13c>)
 8001832:	400a      	ands	r2, r1
 8001834:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2250      	movs	r2, #80	; 0x50
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
}
 8001840:	0018      	movs	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	b002      	add	sp, #8
 8001846:	bd80      	pop	{r7, pc}
 8001848:	00001001 	.word	0x00001001
 800184c:	40012708 	.word	0x40012708
 8001850:	ff7fffff 	.word	0xff7fffff
 8001854:	ffbfffff 	.word	0xffbfffff
 8001858:	feffffff 	.word	0xfeffffff

0800185c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	2b01      	cmp	r3, #1
 8001874:	d108      	bne.n	8001888 <ADC_Enable+0x2c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <ADC_Enable+0x2c>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <ADC_Enable+0x2e>
 8001888:	2300      	movs	r3, #0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d146      	bne.n	800191c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	4a24      	ldr	r2, [pc, #144]	; (8001928 <ADC_Enable+0xcc>)
 8001896:	4013      	ands	r3, r2
 8001898:	d00d      	beq.n	80018b6 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	2210      	movs	r2, #16
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	2201      	movs	r2, #1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e033      	b.n	800191e <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 f8e4 	bl	8001a94 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80018cc:	f7ff fc48 	bl	8001160 <HAL_GetTick>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018d4:	e01b      	b.n	800190e <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018d6:	f7ff fc43 	bl	8001160 <HAL_GetTick>
 80018da:	0002      	movs	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b0a      	cmp	r3, #10
 80018e2:	d914      	bls.n	800190e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2201      	movs	r2, #1
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d00d      	beq.n	800190e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	2210      	movs	r2, #16
 80018f8:	431a      	orrs	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	2201      	movs	r2, #1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e007      	b.n	800191e <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	2b01      	cmp	r3, #1
 800191a:	d1dc      	bne.n	80018d6 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b004      	add	sp, #16
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	80000017 	.word	0x80000017

0800192c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2203      	movs	r2, #3
 8001940:	4013      	ands	r3, r2
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <ADC_Disable+0x2c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <ADC_Disable+0x2c>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <ADC_Disable+0x2e>
 8001958:	2300      	movs	r3, #0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d048      	beq.n	80019f0 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	2205      	movs	r2, #5
 8001966:	4013      	ands	r3, r2
 8001968:	2b01      	cmp	r3, #1
 800196a:	d110      	bne.n	800198e <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2102      	movs	r1, #2
 8001978:	430a      	orrs	r2, r1
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2203      	movs	r2, #3
 8001982:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001984:	f7ff fbec 	bl	8001160 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800198c:	e029      	b.n	80019e2 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	2210      	movs	r2, #16
 8001994:	431a      	orrs	r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199e:	2201      	movs	r2, #1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e023      	b.n	80019f2 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019aa:	f7ff fbd9 	bl	8001160 <HAL_GetTick>
 80019ae:	0002      	movs	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b0a      	cmp	r3, #10
 80019b6:	d914      	bls.n	80019e2 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2201      	movs	r2, #1
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d10d      	bne.n	80019e2 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	2210      	movs	r2, #16
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	2201      	movs	r2, #1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e007      	b.n	80019f2 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2201      	movs	r2, #1
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d0dc      	beq.n	80019aa <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d03a      	beq.n	8001a88 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	d10d      	bne.n	8001a3c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2202      	movs	r2, #2
 8001a28:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001a2a:	d107      	bne.n	8001a3c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2110      	movs	r1, #16
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff fb90 	bl	8001160 <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a44:	e01a      	b.n	8001a7c <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001a46:	f7ff fb8b 	bl	8001160 <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b0a      	cmp	r3, #10
 8001a52:	d913      	bls.n	8001a7c <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2204      	movs	r2, #4
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d00d      	beq.n	8001a7c <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a64:	2210      	movs	r2, #16
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a70:	2201      	movs	r2, #1
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e006      	b.n	8001a8a <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2204      	movs	r2, #4
 8001a84:	4013      	ands	r3, r2
 8001a86:	d1de      	bne.n	8001a46 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
	...

08001a94 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001a9c:	4b0b      	ldr	r3, [pc, #44]	; (8001acc <ADC_DelayMicroSecond+0x38>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	490b      	ldr	r1, [pc, #44]	; (8001ad0 <ADC_DelayMicroSecond+0x3c>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7fe fb30 	bl	8000108 <__udivsi3>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	001a      	movs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4353      	muls	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001ab2:	e002      	b.n	8001aba <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f9      	bne.n	8001ab4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001ac0:	46c0      	nop			; (mov r8, r8)
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	b004      	add	sp, #16
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	000f4240 	.word	0x000f4240

08001ad4 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ade:	2317      	movs	r3, #23
 8001ae0:	18fb      	adds	r3, r7, r3
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2250      	movs	r2, #80	; 0x50
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_ADCEx_Calibration_Start+0x28>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e083      	b.n	8001c04 <HAL_ADCEx_Calibration_Start+0x130>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2250      	movs	r2, #80	; 0x50
 8001b00:	2101      	movs	r1, #1
 8001b02:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_ADCEx_Calibration_Start+0x50>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_ADCEx_Calibration_Start+0x50>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_ADCEx_Calibration_Start+0x52>
 8001b24:	2300      	movs	r3, #0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d15b      	bne.n	8001be2 <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b2e:	4a37      	ldr	r2, [pc, #220]	; (8001c0c <HAL_ADCEx_Calibration_Start+0x138>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	2202      	movs	r2, #2
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2203      	movs	r2, #3
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2103      	movs	r1, #3
 8001b52:	438a      	bics	r2, r1
 8001b54:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2180      	movs	r1, #128	; 0x80
 8001b62:	0609      	lsls	r1, r1, #24
 8001b64:	430a      	orrs	r2, r1
 8001b66:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b68:	f7ff fafa 	bl	8001160 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b70:	e01d      	b.n	8001bae <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b72:	f7ff faf5 	bl	8001160 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b0a      	cmp	r3, #10
 8001b7e:	d916      	bls.n	8001bae <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	0fdb      	lsrs	r3, r3, #31
 8001b88:	07da      	lsls	r2, r3, #31
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	061b      	lsls	r3, r3, #24
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d10d      	bne.n	8001bae <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b96:	2212      	movs	r2, #18
 8001b98:	4393      	bics	r3, r2
 8001b9a:	2210      	movs	r2, #16
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2250      	movs	r2, #80	; 0x50
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e02a      	b.n	8001c04 <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	0fdb      	lsrs	r3, r3, #31
 8001bb6:	07da      	lsls	r2, r3, #31
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d0d8      	beq.n	8001b72 <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68d9      	ldr	r1, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	2201      	movs	r2, #1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
 8001be0:	e009      	b.n	8001bf6 <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be6:	2220      	movs	r2, #32
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001bee:	2317      	movs	r3, #23
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2250      	movs	r2, #80	; 0x50
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001bfe:	2317      	movs	r3, #23
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	781b      	ldrb	r3, [r3, #0]
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b006      	add	sp, #24
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	fffffefd 	.word	0xfffffefd

08001c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	0002      	movs	r2, r0
 8001c18:	1dfb      	adds	r3, r7, #7
 8001c1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c1c:	1dfb      	adds	r3, r7, #7
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b7f      	cmp	r3, #127	; 0x7f
 8001c22:	d809      	bhi.n	8001c38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	001a      	movs	r2, r3
 8001c2a:	231f      	movs	r3, #31
 8001c2c:	401a      	ands	r2, r3
 8001c2e:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_EnableIRQ+0x30>)
 8001c30:	2101      	movs	r1, #1
 8001c32:	4091      	lsls	r1, r2
 8001c34:	000a      	movs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
  }
}
 8001c38:	46c0      	nop			; (mov r8, r8)
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	b002      	add	sp, #8
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	e000e100 	.word	0xe000e100

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b590      	push	{r4, r7, lr}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	0002      	movs	r2, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	1dfb      	adds	r3, r7, #7
 8001c50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c52:	1dfb      	adds	r3, r7, #7
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b7f      	cmp	r3, #127	; 0x7f
 8001c58:	d828      	bhi.n	8001cac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c5a:	4a2f      	ldr	r2, [pc, #188]	; (8001d18 <__NVIC_SetPriority+0xd4>)
 8001c5c:	1dfb      	adds	r3, r7, #7
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	33c0      	adds	r3, #192	; 0xc0
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	589b      	ldr	r3, [r3, r2]
 8001c6a:	1dfa      	adds	r2, r7, #7
 8001c6c:	7812      	ldrb	r2, [r2, #0]
 8001c6e:	0011      	movs	r1, r2
 8001c70:	2203      	movs	r2, #3
 8001c72:	400a      	ands	r2, r1
 8001c74:	00d2      	lsls	r2, r2, #3
 8001c76:	21ff      	movs	r1, #255	; 0xff
 8001c78:	4091      	lsls	r1, r2
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	43d2      	mvns	r2, r2
 8001c7e:	401a      	ands	r2, r3
 8001c80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	22ff      	movs	r2, #255	; 0xff
 8001c88:	401a      	ands	r2, r3
 8001c8a:	1dfb      	adds	r3, r7, #7
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	0018      	movs	r0, r3
 8001c90:	2303      	movs	r3, #3
 8001c92:	4003      	ands	r3, r0
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c98:	481f      	ldr	r0, [pc, #124]	; (8001d18 <__NVIC_SetPriority+0xd4>)
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	b25b      	sxtb	r3, r3
 8001ca0:	089b      	lsrs	r3, r3, #2
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	33c0      	adds	r3, #192	; 0xc0
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001caa:	e031      	b.n	8001d10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cac:	4a1b      	ldr	r2, [pc, #108]	; (8001d1c <__NVIC_SetPriority+0xd8>)
 8001cae:	1dfb      	adds	r3, r7, #7
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	0019      	movs	r1, r3
 8001cb4:	230f      	movs	r3, #15
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	3b08      	subs	r3, #8
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3306      	adds	r3, #6
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	18d3      	adds	r3, r2, r3
 8001cc2:	3304      	adds	r3, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	1dfa      	adds	r2, r7, #7
 8001cc8:	7812      	ldrb	r2, [r2, #0]
 8001cca:	0011      	movs	r1, r2
 8001ccc:	2203      	movs	r2, #3
 8001cce:	400a      	ands	r2, r1
 8001cd0:	00d2      	lsls	r2, r2, #3
 8001cd2:	21ff      	movs	r1, #255	; 0xff
 8001cd4:	4091      	lsls	r1, r2
 8001cd6:	000a      	movs	r2, r1
 8001cd8:	43d2      	mvns	r2, r2
 8001cda:	401a      	ands	r2, r3
 8001cdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	019b      	lsls	r3, r3, #6
 8001ce2:	22ff      	movs	r2, #255	; 0xff
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	1dfb      	adds	r3, r7, #7
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	0018      	movs	r0, r3
 8001cec:	2303      	movs	r3, #3
 8001cee:	4003      	ands	r3, r0
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <__NVIC_SetPriority+0xd8>)
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	001c      	movs	r4, r3
 8001cfc:	230f      	movs	r3, #15
 8001cfe:	4023      	ands	r3, r4
 8001d00:	3b08      	subs	r3, #8
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	430a      	orrs	r2, r1
 8001d06:	3306      	adds	r3, #6
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	18c3      	adds	r3, r0, r3
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	601a      	str	r2, [r3, #0]
}
 8001d10:	46c0      	nop			; (mov r8, r8)
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b003      	add	sp, #12
 8001d16:	bd90      	pop	{r4, r7, pc}
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	045b      	lsls	r3, r3, #17
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d301      	bcc.n	8001d38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d34:	2301      	movs	r3, #1
 8001d36:	e010      	b.n	8001d5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <SysTick_Config+0x44>)
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d40:	2301      	movs	r3, #1
 8001d42:	425b      	negs	r3, r3
 8001d44:	2103      	movs	r1, #3
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff ff7c 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <SysTick_Config+0x44>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <SysTick_Config+0x44>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b002      	add	sp, #8
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	210f      	movs	r1, #15
 8001d74:	187b      	adds	r3, r7, r1
 8001d76:	1c02      	adds	r2, r0, #0
 8001d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	187b      	adds	r3, r7, r1
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f7ff ff5d 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	0002      	movs	r2, r0
 8001d9a:	1dfb      	adds	r3, r7, #7
 8001d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d9e:	1dfb      	adds	r3, r7, #7
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b25b      	sxtb	r3, r3
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff ff33 	bl	8001c10 <__NVIC_EnableIRQ>
}
 8001daa:	46c0      	nop			; (mov r8, r8)
 8001dac:	46bd      	mov	sp, r7
 8001dae:	b002      	add	sp, #8
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f7ff ffaf 	bl	8001d20 <SysTick_Config>
 8001dc2:	0003      	movs	r3, r0
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b002      	add	sp, #8
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001de2:	e155      	b.n	8002090 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4091      	lsls	r1, r2
 8001dee:	000a      	movs	r2, r1
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d100      	bne.n	8001dfc <HAL_GPIO_Init+0x30>
 8001dfa:	e146      	b.n	800208a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2203      	movs	r2, #3
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d005      	beq.n	8001e14 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d130      	bne.n	8001e76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	409a      	lsls	r2, r3
 8001e22:	0013      	movs	r3, r2
 8001e24:	43da      	mvns	r2, r3
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	409a      	lsls	r2, r3
 8001e36:	0013      	movs	r3, r2
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	0013      	movs	r3, r2
 8001e52:	43da      	mvns	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	2201      	movs	r2, #1
 8001e62:	401a      	ands	r2, r3
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	409a      	lsls	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d017      	beq.n	8001eb2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	409a      	lsls	r2, r3
 8001e90:	0013      	movs	r3, r2
 8001e92:	43da      	mvns	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	0013      	movs	r3, r2
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d123      	bne.n	8001f06 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	58d3      	ldr	r3, [r2, r3]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	2207      	movs	r2, #7
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	43da      	mvns	r2, r3
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	2107      	movs	r1, #7
 8001eea:	400b      	ands	r3, r1
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	409a      	lsls	r2, r3
 8001ef0:	0013      	movs	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	0092      	lsls	r2, r2, #2
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	409a      	lsls	r2, r3
 8001f14:	0013      	movs	r3, r2
 8001f16:	43da      	mvns	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	401a      	ands	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	0013      	movs	r3, r2
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	23c0      	movs	r3, #192	; 0xc0
 8001f40:	029b      	lsls	r3, r3, #10
 8001f42:	4013      	ands	r3, r2
 8001f44:	d100      	bne.n	8001f48 <HAL_GPIO_Init+0x17c>
 8001f46:	e0a0      	b.n	800208a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f4c:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_GPIO_Init+0x2dc>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	430a      	orrs	r2, r1
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f54:	4a55      	ldr	r2, [pc, #340]	; (80020ac <HAL_GPIO_Init+0x2e0>)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	3302      	adds	r3, #2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	589b      	ldr	r3, [r3, r2]
 8001f60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	2203      	movs	r2, #3
 8001f66:	4013      	ands	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	220f      	movs	r2, #15
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	0013      	movs	r3, r2
 8001f70:	43da      	mvns	r2, r3
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	23a0      	movs	r3, #160	; 0xa0
 8001f7c:	05db      	lsls	r3, r3, #23
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d01f      	beq.n	8001fc2 <HAL_GPIO_Init+0x1f6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4a      	ldr	r2, [pc, #296]	; (80020b0 <HAL_GPIO_Init+0x2e4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d019      	beq.n	8001fbe <HAL_GPIO_Init+0x1f2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a49      	ldr	r2, [pc, #292]	; (80020b4 <HAL_GPIO_Init+0x2e8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d013      	beq.n	8001fba <HAL_GPIO_Init+0x1ee>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a48      	ldr	r2, [pc, #288]	; (80020b8 <HAL_GPIO_Init+0x2ec>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d00d      	beq.n	8001fb6 <HAL_GPIO_Init+0x1ea>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a47      	ldr	r2, [pc, #284]	; (80020bc <HAL_GPIO_Init+0x2f0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d007      	beq.n	8001fb2 <HAL_GPIO_Init+0x1e6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a46      	ldr	r2, [pc, #280]	; (80020c0 <HAL_GPIO_Init+0x2f4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_GPIO_Init+0x1e2>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e00a      	b.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e008      	b.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e006      	b.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e004      	b.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fba:	2302      	movs	r3, #2
 8001fbc:	e002      	b.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_GPIO_Init+0x1f8>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	2103      	movs	r1, #3
 8001fc8:	400a      	ands	r2, r1
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	4093      	lsls	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd4:	4935      	ldr	r1, [pc, #212]	; (80020ac <HAL_GPIO_Init+0x2e0>)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	089b      	lsrs	r3, r3, #2
 8001fda:	3302      	adds	r3, #2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43da      	mvns	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4013      	ands	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	025b      	lsls	r3, r3, #9
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d003      	beq.n	8002006 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43da      	mvns	r2, r3
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4013      	ands	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	2380      	movs	r3, #128	; 0x80
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	d003      	beq.n	8002030 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4313      	orrs	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002036:	4b23      	ldr	r3, [pc, #140]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43da      	mvns	r2, r3
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4013      	ands	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	035b      	lsls	r3, r3, #13
 800204e:	4013      	ands	r3, r2
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800205a:	4b1a      	ldr	r3, [pc, #104]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002060:	4b18      	ldr	r3, [pc, #96]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	43da      	mvns	r2, r3
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	039b      	lsls	r3, r3, #14
 8002078:	4013      	ands	r3, r2
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4313      	orrs	r3, r2
 8002082:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <HAL_GPIO_Init+0x2f8>)
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	40da      	lsrs	r2, r3
 8002098:	1e13      	subs	r3, r2, #0
 800209a:	d000      	beq.n	800209e <HAL_GPIO_Init+0x2d2>
 800209c:	e6a2      	b.n	8001de4 <HAL_GPIO_Init+0x18>
  }
}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	46c0      	nop			; (mov r8, r8)
 80020a2:	46bd      	mov	sp, r7
 80020a4:	b006      	add	sp, #24
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	50000400 	.word	0x50000400
 80020b4:	50000800 	.word	0x50000800
 80020b8:	50000c00 	.word	0x50000c00
 80020bc:	50001000 	.word	0x50001000
 80020c0:	50001c00 	.word	0x50001c00
 80020c4:	40010400 	.word	0x40010400

080020c8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	000a      	movs	r2, r1
 80020d2:	1cbb      	adds	r3, r7, #2
 80020d4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	1cba      	adds	r2, r7, #2
 80020dc:	8812      	ldrh	r2, [r2, #0]
 80020de:	4013      	ands	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80020e2:	230f      	movs	r3, #15
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	2201      	movs	r2, #1
 80020e8:	701a      	strb	r2, [r3, #0]
 80020ea:	e003      	b.n	80020f4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ec:	230f      	movs	r3, #15
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	2200      	movs	r2, #0
 80020f2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80020f4:	230f      	movs	r3, #15
 80020f6:	18fb      	adds	r3, r7, r3
 80020f8:	781b      	ldrb	r3, [r3, #0]
}
 80020fa:	0018      	movs	r0, r3
 80020fc:	46bd      	mov	sp, r7
 80020fe:	b004      	add	sp, #16
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	0008      	movs	r0, r1
 800210c:	0011      	movs	r1, r2
 800210e:	1cbb      	adds	r3, r7, #2
 8002110:	1c02      	adds	r2, r0, #0
 8002112:	801a      	strh	r2, [r3, #0]
 8002114:	1c7b      	adds	r3, r7, #1
 8002116:	1c0a      	adds	r2, r1, #0
 8002118:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800211a:	1c7b      	adds	r3, r7, #1
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002122:	1cbb      	adds	r3, r7, #2
 8002124:	881a      	ldrh	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800212a:	e003      	b.n	8002134 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800212c:	1cbb      	adds	r3, r7, #2
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800213c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800213e:	b08b      	sub	sp, #44	; 0x2c
 8002140:	af06      	add	r7, sp, #24
 8002142:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d101      	bne.n	800214e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e0ff      	b.n	800234e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a81      	ldr	r2, [pc, #516]	; (8002358 <HAL_PCD_Init+0x21c>)
 8002152:	5c9b      	ldrb	r3, [r3, r2]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d108      	bne.n	800216c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	23aa      	movs	r3, #170	; 0xaa
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	2100      	movs	r1, #0
 8002162:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	0018      	movs	r0, r3
 8002168:	f007 f892 	bl	8009290 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <HAL_PCD_Init+0x21c>)
 8002170:	2103      	movs	r1, #3
 8002172:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	0018      	movs	r0, r3
 800217a:	f003 fa8d 	bl	8005698 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800217e:	230f      	movs	r3, #15
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
 8002186:	e058      	b.n	800223a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002188:	200f      	movs	r0, #15
 800218a:	183b      	adds	r3, r7, r0
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	0013      	movs	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	189b      	adds	r3, r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	18cb      	adds	r3, r1, r3
 800219c:	3301      	adds	r3, #1
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021a2:	183b      	adds	r3, r7, r0
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	0013      	movs	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	189b      	adds	r3, r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	183a      	adds	r2, r7, r0
 80021b4:	7812      	ldrb	r2, [r2, #0]
 80021b6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021b8:	0004      	movs	r4, r0
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	781a      	ldrb	r2, [r3, #0]
 80021be:	193b      	adds	r3, r7, r4
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	b298      	uxth	r0, r3
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	0013      	movs	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	189b      	adds	r3, r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	18cb      	adds	r3, r1, r3
 80021d0:	3336      	adds	r3, #54	; 0x36
 80021d2:	1c02      	adds	r2, r0, #0
 80021d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	0013      	movs	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	189b      	adds	r3, r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	18cb      	adds	r3, r1, r3
 80021e8:	3303      	adds	r3, #3
 80021ea:	2200      	movs	r2, #0
 80021ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021ee:	193b      	adds	r3, r7, r4
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	6879      	ldr	r1, [r7, #4]
 80021f4:	0013      	movs	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	189b      	adds	r3, r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	18cb      	adds	r3, r1, r3
 80021fe:	3338      	adds	r3, #56	; 0x38
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002204:	193b      	adds	r3, r7, r4
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	0013      	movs	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	189b      	adds	r3, r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	18cb      	adds	r3, r1, r3
 8002214:	333c      	adds	r3, #60	; 0x3c
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800221a:	193b      	adds	r3, r7, r4
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	0013      	movs	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	189b      	adds	r3, r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	18cb      	adds	r3, r1, r3
 800222a:	3340      	adds	r3, #64	; 0x40
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002230:	193b      	adds	r3, r7, r4
 8002232:	781a      	ldrb	r2, [r3, #0]
 8002234:	193b      	adds	r3, r7, r4
 8002236:	3201      	adds	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	210f      	movs	r1, #15
 800223c:	187b      	adds	r3, r7, r1
 800223e:	781a      	ldrb	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	d39f      	bcc.n	8002188 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002248:	187b      	adds	r3, r7, r1
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
 800224e:	e056      	b.n	80022fe <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002250:	240f      	movs	r4, #15
 8002252:	193b      	adds	r3, r7, r4
 8002254:	781a      	ldrb	r2, [r3, #0]
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	236a      	movs	r3, #106	; 0x6a
 800225a:	33ff      	adds	r3, #255	; 0xff
 800225c:	0019      	movs	r1, r3
 800225e:	0013      	movs	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	189b      	adds	r3, r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	18c3      	adds	r3, r0, r3
 8002268:	185b      	adds	r3, r3, r1
 800226a:	2200      	movs	r2, #0
 800226c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800226e:	193b      	adds	r3, r7, r4
 8002270:	781a      	ldrb	r2, [r3, #0]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	23b4      	movs	r3, #180	; 0xb4
 8002276:	0059      	lsls	r1, r3, #1
 8002278:	0013      	movs	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	189b      	adds	r3, r3, r2
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	18c3      	adds	r3, r0, r3
 8002282:	185b      	adds	r3, r3, r1
 8002284:	193a      	adds	r2, r7, r4
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800228a:	193b      	adds	r3, r7, r4
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	236c      	movs	r3, #108	; 0x6c
 8002292:	33ff      	adds	r3, #255	; 0xff
 8002294:	0019      	movs	r1, r3
 8002296:	0013      	movs	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	189b      	adds	r3, r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	18c3      	adds	r3, r0, r3
 80022a0:	185b      	adds	r3, r3, r1
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	23bc      	movs	r3, #188	; 0xbc
 80022ae:	0059      	lsls	r1, r3, #1
 80022b0:	0013      	movs	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	18c3      	adds	r3, r0, r3
 80022ba:	185b      	adds	r3, r3, r1
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022c0:	193b      	adds	r3, r7, r4
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	23be      	movs	r3, #190	; 0xbe
 80022c8:	0059      	lsls	r1, r3, #1
 80022ca:	0013      	movs	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	189b      	adds	r3, r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	18c3      	adds	r3, r0, r3
 80022d4:	185b      	adds	r3, r3, r1
 80022d6:	2200      	movs	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022da:	193b      	adds	r3, r7, r4
 80022dc:	781a      	ldrb	r2, [r3, #0]
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	0059      	lsls	r1, r3, #1
 80022e4:	0013      	movs	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	189b      	adds	r3, r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	18c3      	adds	r3, r0, r3
 80022ee:	185b      	adds	r3, r3, r1
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022f4:	193b      	adds	r3, r7, r4
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	3201      	adds	r2, #1
 80022fc:	701a      	strb	r2, [r3, #0]
 80022fe:	230f      	movs	r3, #15
 8002300:	18fb      	adds	r3, r7, r3
 8002302:	781a      	ldrb	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	429a      	cmp	r2, r3
 800230a:	d3a1      	bcc.n	8002250 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	466a      	mov	r2, sp
 8002314:	0011      	movs	r1, r2
 8002316:	001a      	movs	r2, r3
 8002318:	3210      	adds	r2, #16
 800231a:	ca70      	ldmia	r2!, {r4, r5, r6}
 800231c:	c170      	stmia	r1!, {r4, r5, r6}
 800231e:	ca30      	ldmia	r2!, {r4, r5}
 8002320:	c130      	stmia	r1!, {r4, r5}
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 f9d0 	bl	80056cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2224      	movs	r2, #36	; 0x24
 8002330:	2100      	movs	r1, #0
 8002332:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a08      	ldr	r2, [pc, #32]	; (8002358 <HAL_PCD_Init+0x21c>)
 8002338:	2101      	movs	r1, #1
 800233a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d103      	bne.n	800234c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0018      	movs	r0, r3
 8002348:	f001 fd1c 	bl	8003d84 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b005      	add	sp, #20
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	000002a9 	.word	0x000002a9

0800235c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	23aa      	movs	r3, #170	; 0xaa
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	5cd3      	ldrb	r3, [r2, r3]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_PCD_Start+0x18>
 8002370:	2302      	movs	r3, #2
 8002372:	e014      	b.n	800239e <HAL_PCD_Start+0x42>
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	23aa      	movs	r3, #170	; 0xaa
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	2101      	movs	r1, #1
 800237c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0018      	movs	r0, r3
 8002384:	f003 f972 	bl	800566c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	0018      	movs	r0, r3
 800238e:	f005 f8cd 	bl	800752c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	23aa      	movs	r3, #170	; 0xaa
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	2100      	movs	r1, #0
 800239a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	0018      	movs	r0, r3
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0018      	movs	r0, r3
 80023b6:	f005 f8cf 	bl	8007558 <USB_ReadInterrupts>
 80023ba:	0002      	movs	r2, r0
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	021b      	lsls	r3, r3, #8
 80023c0:	401a      	ands	r2, r3
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d103      	bne.n	80023d2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fba3 	bl	8002b18 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f005 f8be 	bl	8007558 <USB_ReadInterrupts>
 80023dc:	0002      	movs	r2, r0
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	401a      	ands	r2, r3
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d114      	bne.n	8002416 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2244      	movs	r2, #68	; 0x44
 80023f2:	5a9b      	ldrh	r3, [r3, r2]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	49a2      	ldr	r1, [pc, #648]	; (8002684 <HAL_PCD_IRQHandler+0x2dc>)
 80023fc:	400a      	ands	r2, r1
 80023fe:	b291      	uxth	r1, r2
 8002400:	2244      	movs	r2, #68	; 0x44
 8002402:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	0018      	movs	r0, r3
 8002408:	f006 ffc5 	bl	8009396 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2100      	movs	r1, #0
 8002410:	0018      	movs	r0, r3
 8002412:	f000 f945 	bl	80026a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0018      	movs	r0, r3
 800241c:	f005 f89c 	bl	8007558 <USB_ReadInterrupts>
 8002420:	0002      	movs	r2, r0
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	01db      	lsls	r3, r3, #7
 8002426:	401a      	ands	r2, r3
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	01db      	lsls	r3, r3, #7
 800242c:	429a      	cmp	r2, r3
 800242e:	d10b      	bne.n	8002448 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2244      	movs	r2, #68	; 0x44
 8002436:	5a9b      	ldrh	r3, [r3, r2]
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4992      	ldr	r1, [pc, #584]	; (8002688 <HAL_PCD_IRQHandler+0x2e0>)
 8002440:	400a      	ands	r2, r1
 8002442:	b291      	uxth	r1, r2
 8002444:	2244      	movs	r2, #68	; 0x44
 8002446:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	0018      	movs	r0, r3
 800244e:	f005 f883 	bl	8007558 <USB_ReadInterrupts>
 8002452:	0002      	movs	r2, r0
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	019b      	lsls	r3, r3, #6
 8002458:	401a      	ands	r2, r3
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	019b      	lsls	r3, r3, #6
 800245e:	429a      	cmp	r2, r3
 8002460:	d10b      	bne.n	800247a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2244      	movs	r2, #68	; 0x44
 8002468:	5a9b      	ldrh	r3, [r3, r2]
 800246a:	b29a      	uxth	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4986      	ldr	r1, [pc, #536]	; (800268c <HAL_PCD_IRQHandler+0x2e4>)
 8002472:	400a      	ands	r2, r1
 8002474:	b291      	uxth	r1, r2
 8002476:	2244      	movs	r2, #68	; 0x44
 8002478:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0018      	movs	r0, r3
 8002480:	f005 f86a 	bl	8007558 <USB_ReadInterrupts>
 8002484:	0002      	movs	r2, r0
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	015b      	lsls	r3, r3, #5
 800248a:	401a      	ands	r2, r3
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	015b      	lsls	r3, r3, #5
 8002490:	429a      	cmp	r2, r3
 8002492:	d137      	bne.n	8002504 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	5a9b      	ldrh	r3, [r3, r2]
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2104      	movs	r1, #4
 80024a4:	438a      	bics	r2, r1
 80024a6:	b291      	uxth	r1, r2
 80024a8:	2240      	movs	r2, #64	; 0x40
 80024aa:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2240      	movs	r2, #64	; 0x40
 80024b2:	5a9b      	ldrh	r3, [r3, r2]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2108      	movs	r1, #8
 80024bc:	438a      	bics	r2, r1
 80024be:	b291      	uxth	r1, r2
 80024c0:	2240      	movs	r2, #64	; 0x40
 80024c2:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	23b8      	movs	r3, #184	; 0xb8
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d109      	bne.n	80024e4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	23b8      	movs	r3, #184	; 0xb8
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	2100      	movs	r1, #0
 80024d8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2100      	movs	r1, #0
 80024de:	0018      	movs	r0, r3
 80024e0:	f001 fc7a 	bl	8003dd8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f006 ff96 	bl	8009418 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2244      	movs	r2, #68	; 0x44
 80024f2:	5a9b      	ldrh	r3, [r3, r2]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4965      	ldr	r1, [pc, #404]	; (8002690 <HAL_PCD_IRQHandler+0x2e8>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	b291      	uxth	r1, r2
 8002500:	2244      	movs	r2, #68	; 0x44
 8002502:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	0018      	movs	r0, r3
 800250a:	f005 f825 	bl	8007558 <USB_ReadInterrupts>
 800250e:	0002      	movs	r2, r0
 8002510:	2380      	movs	r3, #128	; 0x80
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	401a      	ands	r2, r3
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	429a      	cmp	r2, r3
 800251c:	d127      	bne.n	800256e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	5a9b      	ldrh	r3, [r3, r2]
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2108      	movs	r1, #8
 800252e:	430a      	orrs	r2, r1
 8002530:	b291      	uxth	r1, r2
 8002532:	2240      	movs	r2, #64	; 0x40
 8002534:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2244      	movs	r2, #68	; 0x44
 800253c:	5a9b      	ldrh	r3, [r3, r2]
 800253e:	b29a      	uxth	r2, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4953      	ldr	r1, [pc, #332]	; (8002694 <HAL_PCD_IRQHandler+0x2ec>)
 8002546:	400a      	ands	r2, r1
 8002548:	b291      	uxth	r1, r2
 800254a:	2244      	movs	r2, #68	; 0x44
 800254c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	5a9b      	ldrh	r3, [r3, r2]
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2104      	movs	r1, #4
 800255e:	430a      	orrs	r2, r1
 8002560:	b291      	uxth	r1, r2
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	0018      	movs	r0, r3
 800256a:	f006 ff39 	bl	80093e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	0018      	movs	r0, r3
 8002574:	f004 fff0 	bl	8007558 <USB_ReadInterrupts>
 8002578:	0003      	movs	r3, r0
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	4013      	ands	r3, r2
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d145      	bne.n	800260e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2244      	movs	r2, #68	; 0x44
 8002588:	5a9b      	ldrh	r3, [r3, r2]
 800258a:	b29a      	uxth	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2180      	movs	r1, #128	; 0x80
 8002592:	438a      	bics	r2, r1
 8002594:	b291      	uxth	r1, r2
 8002596:	2244      	movs	r2, #68	; 0x44
 8002598:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	23b8      	movs	r3, #184	; 0xb8
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d12f      	bne.n	8002606 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	5a9b      	ldrh	r3, [r3, r2]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2104      	movs	r1, #4
 80025b6:	430a      	orrs	r2, r1
 80025b8:	b291      	uxth	r1, r2
 80025ba:	2240      	movs	r2, #64	; 0x40
 80025bc:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2240      	movs	r2, #64	; 0x40
 80025c4:	5a9b      	ldrh	r3, [r3, r2]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2108      	movs	r1, #8
 80025ce:	430a      	orrs	r2, r1
 80025d0:	b291      	uxth	r1, r2
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	23b8      	movs	r3, #184	; 0xb8
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	2101      	movs	r1, #1
 80025de:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2254      	movs	r2, #84	; 0x54
 80025e6:	5a9b      	ldrh	r3, [r3, r2]
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	089b      	lsrs	r3, r3, #2
 80025ec:	223c      	movs	r2, #60	; 0x3c
 80025ee:	4013      	ands	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	23b9      	movs	r3, #185	; 0xb9
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2101      	movs	r1, #1
 80025fe:	0018      	movs	r0, r3
 8002600:	f001 fbea 	bl	8003dd8 <HAL_PCDEx_LPM_Callback>
 8002604:	e003      	b.n	800260e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	0018      	movs	r0, r3
 800260a:	f006 fee9 	bl	80093e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f004 ffa0 	bl	8007558 <USB_ReadInterrupts>
 8002618:	0002      	movs	r2, r0
 800261a:	2380      	movs	r3, #128	; 0x80
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	401a      	ands	r2, r3
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d10f      	bne.n	8002648 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2244      	movs	r2, #68	; 0x44
 800262e:	5a9b      	ldrh	r3, [r3, r2]
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4918      	ldr	r1, [pc, #96]	; (8002698 <HAL_PCD_IRQHandler+0x2f0>)
 8002638:	400a      	ands	r2, r1
 800263a:	b291      	uxth	r1, r2
 800263c:	2244      	movs	r2, #68	; 0x44
 800263e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f006 fe98 	bl	8009378 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	0018      	movs	r0, r3
 800264e:	f004 ff83 	bl	8007558 <USB_ReadInterrupts>
 8002652:	0002      	movs	r2, r0
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	401a      	ands	r2, r3
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	429a      	cmp	r2, r3
 8002660:	d10b      	bne.n	800267a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2244      	movs	r2, #68	; 0x44
 8002668:	5a9b      	ldrh	r3, [r3, r2]
 800266a:	b29a      	uxth	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	490a      	ldr	r1, [pc, #40]	; (800269c <HAL_PCD_IRQHandler+0x2f4>)
 8002672:	400a      	ands	r2, r1
 8002674:	b291      	uxth	r1, r2
 8002676:	2244      	movs	r2, #68	; 0x44
 8002678:	5299      	strh	r1, [r3, r2]
  }
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46bd      	mov	sp, r7
 800267e:	b002      	add	sp, #8
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	fffffbff 	.word	0xfffffbff
 8002688:	ffffbfff 	.word	0xffffbfff
 800268c:	ffffdfff 	.word	0xffffdfff
 8002690:	ffffefff 	.word	0xffffefff
 8002694:	fffff7ff 	.word	0xfffff7ff
 8002698:	fffffdff 	.word	0xfffffdff
 800269c:	fffffeff 	.word	0xfffffeff

080026a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	000a      	movs	r2, r1
 80026aa:	1cfb      	adds	r3, r7, #3
 80026ac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	23aa      	movs	r3, #170	; 0xaa
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	5cd3      	ldrb	r3, [r2, r3]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d101      	bne.n	80026be <HAL_PCD_SetAddress+0x1e>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e017      	b.n	80026ee <HAL_PCD_SetAddress+0x4e>
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	23aa      	movs	r3, #170	; 0xaa
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	2101      	movs	r1, #1
 80026c6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	1cfa      	adds	r2, r7, #3
 80026cc:	2124      	movs	r1, #36	; 0x24
 80026ce:	7812      	ldrb	r2, [r2, #0]
 80026d0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	1cfb      	adds	r3, r7, #3
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	0019      	movs	r1, r3
 80026dc:	0010      	movs	r0, r2
 80026de:	f004 ff11 	bl	8007504 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	23aa      	movs	r3, #170	; 0xaa
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	2100      	movs	r1, #0
 80026ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b002      	add	sp, #8
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80026f6:	b590      	push	{r4, r7, lr}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
 80026fe:	000c      	movs	r4, r1
 8002700:	0010      	movs	r0, r2
 8002702:	0019      	movs	r1, r3
 8002704:	1cfb      	adds	r3, r7, #3
 8002706:	1c22      	adds	r2, r4, #0
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	003b      	movs	r3, r7
 800270c:	1c02      	adds	r2, r0, #0
 800270e:	801a      	strh	r2, [r3, #0]
 8002710:	1cbb      	adds	r3, r7, #2
 8002712:	1c0a      	adds	r2, r1, #0
 8002714:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002716:	230b      	movs	r3, #11
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800271e:	1cfb      	adds	r3, r7, #3
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	b25b      	sxtb	r3, r3
 8002724:	2b00      	cmp	r3, #0
 8002726:	da0f      	bge.n	8002748 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002728:	1cfb      	adds	r3, r7, #3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2207      	movs	r2, #7
 800272e:	4013      	ands	r3, r2
 8002730:	1c5a      	adds	r2, r3, #1
 8002732:	0013      	movs	r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	189b      	adds	r3, r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	18d3      	adds	r3, r2, r3
 800273e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	705a      	strb	r2, [r3, #1]
 8002746:	e00f      	b.n	8002768 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002748:	1cfb      	adds	r3, r7, #3
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2207      	movs	r2, #7
 800274e:	401a      	ands	r2, r3
 8002750:	0013      	movs	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	189b      	adds	r3, r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3369      	adds	r3, #105	; 0x69
 800275a:	33ff      	adds	r3, #255	; 0xff
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	18d3      	adds	r3, r2, r3
 8002760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002768:	1cfb      	adds	r3, r7, #3
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2207      	movs	r2, #7
 800276e:	4013      	ands	r3, r2
 8002770:	b2da      	uxtb	r2, r3
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002776:	003b      	movs	r3, r7
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1cba      	adds	r2, r7, #2
 8002782:	7812      	ldrb	r2, [r2, #0]
 8002784:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	785b      	ldrb	r3, [r3, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002798:	1cbb      	adds	r3, r7, #2
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d102      	bne.n	80027a6 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	23aa      	movs	r3, #170	; 0xaa
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_PCD_EP_Open+0xc0>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e013      	b.n	80027de <HAL_PCD_EP_Open+0xe8>
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	23aa      	movs	r3, #170	; 0xaa
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	2101      	movs	r1, #1
 80027be:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f002 ffab 	bl	8005724 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	23aa      	movs	r3, #170	; 0xaa
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	2100      	movs	r1, #0
 80027d6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80027d8:	230b      	movs	r3, #11
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b005      	add	sp, #20
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	000a      	movs	r2, r1
 80027f0:	1cfb      	adds	r3, r7, #3
 80027f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f4:	1cfb      	adds	r3, r7, #3
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	da0f      	bge.n	800281e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fe:	1cfb      	adds	r3, r7, #3
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2207      	movs	r2, #7
 8002804:	4013      	ands	r3, r2
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	0013      	movs	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	189b      	adds	r3, r3, r2
 800280e:	00db      	lsls	r3, r3, #3
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	18d3      	adds	r3, r2, r3
 8002814:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	705a      	strb	r2, [r3, #1]
 800281c:	e00f      	b.n	800283e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800281e:	1cfb      	adds	r3, r7, #3
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2207      	movs	r2, #7
 8002824:	401a      	ands	r2, r3
 8002826:	0013      	movs	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	189b      	adds	r3, r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	3369      	adds	r3, #105	; 0x69
 8002830:	33ff      	adds	r3, #255	; 0xff
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	18d3      	adds	r3, r2, r3
 8002836:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800283e:	1cfb      	adds	r3, r7, #3
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2207      	movs	r2, #7
 8002844:	4013      	ands	r3, r2
 8002846:	b2da      	uxtb	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	23aa      	movs	r3, #170	; 0xaa
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	5cd3      	ldrb	r3, [r2, r3]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_PCD_EP_Close+0x76>
 8002858:	2302      	movs	r3, #2
 800285a:	e011      	b.n	8002880 <HAL_PCD_EP_Close+0x9a>
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	23aa      	movs	r3, #170	; 0xaa
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	2101      	movs	r1, #1
 8002864:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	0011      	movs	r1, r2
 800286e:	0018      	movs	r0, r3
 8002870:	f003 facc 	bl	8005e0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	23aa      	movs	r3, #170	; 0xaa
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	2100      	movs	r1, #0
 800287c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	607a      	str	r2, [r7, #4]
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	200b      	movs	r0, #11
 8002896:	183b      	adds	r3, r7, r0
 8002898:	1c0a      	adds	r2, r1, #0
 800289a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800289c:	0001      	movs	r1, r0
 800289e:	187b      	adds	r3, r7, r1
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2207      	movs	r2, #7
 80028a4:	401a      	ands	r2, r3
 80028a6:	0013      	movs	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	189b      	adds	r3, r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	3369      	adds	r3, #105	; 0x69
 80028b0:	33ff      	adds	r3, #255	; 0xff
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	18d3      	adds	r3, r2, r3
 80028b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2200      	movs	r2, #0
 80028c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028d0:	187b      	adds	r3, r7, r1
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2207      	movs	r2, #7
 80028d6:	4013      	ands	r3, r2
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4013      	ands	r3, r2
 80028e6:	d107      	bne.n	80028f8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	697a      	ldr	r2, [r7, #20]
 80028ee:	0011      	movs	r1, r2
 80028f0:	0018      	movs	r0, r3
 80028f2:	f003 fc4b 	bl	800618c <USB_EPStartXfer>
 80028f6:	e006      	b.n	8002906 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	0011      	movs	r1, r2
 8002900:	0018      	movs	r0, r3
 8002902:	f003 fc43 	bl	800618c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b006      	add	sp, #24
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	603b      	str	r3, [r7, #0]
 800291c:	200b      	movs	r0, #11
 800291e:	183b      	adds	r3, r7, r0
 8002920:	1c0a      	adds	r2, r1, #0
 8002922:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002924:	183b      	adds	r3, r7, r0
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2207      	movs	r2, #7
 800292a:	4013      	ands	r3, r2
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	0013      	movs	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	189b      	adds	r3, r3, r2
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	18d3      	adds	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2224      	movs	r2, #36	; 0x24
 800294c:	2101      	movs	r1, #1
 800294e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2200      	movs	r2, #0
 800295a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	2201      	movs	r2, #1
 8002960:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002962:	183b      	adds	r3, r7, r0
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2207      	movs	r2, #7
 8002968:	4013      	ands	r3, r2
 800296a:	b2da      	uxtb	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002970:	183b      	adds	r3, r7, r0
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2207      	movs	r2, #7
 8002976:	4013      	ands	r3, r2
 8002978:	d107      	bne.n	800298a <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	0011      	movs	r1, r2
 8002982:	0018      	movs	r0, r3
 8002984:	f003 fc02 	bl	800618c <USB_EPStartXfer>
 8002988:	e006      	b.n	8002998 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	0011      	movs	r1, r2
 8002992:	0018      	movs	r0, r3
 8002994:	f003 fbfa 	bl	800618c <USB_EPStartXfer>
  }

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b006      	add	sp, #24
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	000a      	movs	r2, r1
 80029ac:	1cfb      	adds	r3, r7, #3
 80029ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b0:	1cfb      	adds	r3, r7, #3
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2207      	movs	r2, #7
 80029b6:	401a      	ands	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d901      	bls.n	80029c4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e046      	b.n	8002a52 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c4:	1cfb      	adds	r3, r7, #3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da0f      	bge.n	80029ee <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	1cfb      	adds	r3, r7, #3
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2207      	movs	r2, #7
 80029d4:	4013      	ands	r3, r2
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	0013      	movs	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	189b      	adds	r3, r3, r2
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	18d3      	adds	r3, r2, r3
 80029e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	705a      	strb	r2, [r3, #1]
 80029ec:	e00d      	b.n	8002a0a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ee:	1cfb      	adds	r3, r7, #3
 80029f0:	781a      	ldrb	r2, [r3, #0]
 80029f2:	0013      	movs	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	189b      	adds	r3, r3, r2
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	3369      	adds	r3, #105	; 0x69
 80029fc:	33ff      	adds	r3, #255	; 0xff
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a10:	1cfb      	adds	r3, r7, #3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2207      	movs	r2, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	23aa      	movs	r3, #170	; 0xaa
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_PCD_EP_SetStall+0x8c>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e011      	b.n	8002a52 <HAL_PCD_EP_SetStall+0xb0>
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	23aa      	movs	r3, #170	; 0xaa
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	2101      	movs	r1, #1
 8002a36:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	0011      	movs	r1, r2
 8002a40:	0018      	movs	r0, r3
 8002a42:	f004 fc5d 	bl	8007300 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	23aa      	movs	r3, #170	; 0xaa
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	0018      	movs	r0, r3
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b084      	sub	sp, #16
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	000a      	movs	r2, r1
 8002a64:	1cfb      	adds	r3, r7, #3
 8002a66:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a68:	1cfb      	adds	r3, r7, #3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d901      	bls.n	8002a7c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e048      	b.n	8002b0e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a7c:	1cfb      	adds	r3, r7, #3
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	b25b      	sxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da0f      	bge.n	8002aa6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a86:	1cfb      	adds	r3, r7, #3
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2207      	movs	r2, #7
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	0013      	movs	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	18d3      	adds	r3, r2, r3
 8002a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	705a      	strb	r2, [r3, #1]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa6:	1cfb      	adds	r3, r7, #3
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2207      	movs	r2, #7
 8002aac:	401a      	ands	r2, r3
 8002aae:	0013      	movs	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	189b      	adds	r3, r3, r2
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3369      	adds	r3, #105	; 0x69
 8002ab8:	33ff      	adds	r3, #255	; 0xff
 8002aba:	687a      	ldr	r2, [r7, #4]
 8002abc:	18d3      	adds	r3, r2, r3
 8002abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002acc:	1cfb      	adds	r3, r7, #3
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	23aa      	movs	r3, #170	; 0xaa
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	5cd3      	ldrb	r3, [r2, r3]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_PCD_EP_ClrStall+0x90>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e011      	b.n	8002b0e <HAL_PCD_EP_ClrStall+0xb4>
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	23aa      	movs	r3, #170	; 0xaa
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	2101      	movs	r1, #1
 8002af2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	0011      	movs	r1, r2
 8002afc:	0018      	movs	r0, r3
 8002afe:	f004 fc4f 	bl	80073a0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	23aa      	movs	r3, #170	; 0xaa
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	2100      	movs	r1, #0
 8002b0a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	0018      	movs	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	b004      	add	sp, #16
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b096      	sub	sp, #88	; 0x58
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b20:	f000 fbd8 	bl	80032d4 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2056      	movs	r0, #86	; 0x56
 8002b2a:	183b      	adds	r3, r7, r0
 8002b2c:	2144      	movs	r1, #68	; 0x44
 8002b2e:	5a52      	ldrh	r2, [r2, r1]
 8002b30:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b32:	183b      	adds	r3, r7, r0
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	2455      	movs	r4, #85	; 0x55
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	210f      	movs	r1, #15
 8002b3e:	400a      	ands	r2, r1
 8002b40:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002b42:	193b      	adds	r3, r7, r4
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d000      	beq.n	8002b4c <PCD_EP_ISR_Handler+0x34>
 8002b4a:	e179      	b.n	8002e40 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b4c:	183b      	adds	r3, r7, r0
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	4013      	ands	r3, r2
 8002b54:	d154      	bne.n	8002c00 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	881b      	ldrh	r3, [r3, #0]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	200e      	movs	r0, #14
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	49af      	ldr	r1, [pc, #700]	; (8002e20 <PCD_EP_ISR_Handler+0x308>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	801a      	strh	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	183a      	adds	r2, r7, r0
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	49ac      	ldr	r1, [pc, #688]	; (8002e24 <PCD_EP_ISR_Handler+0x30c>)
 8002b72:	430a      	orrs	r2, r1
 8002b74:	b292      	uxth	r2, r2
 8002b76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3328      	adds	r3, #40	; 0x28
 8002b7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2250      	movs	r2, #80	; 0x50
 8002b84:	5a9b      	ldrh	r3, [r3, r2]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	001a      	movs	r2, r3
 8002b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	18d2      	adds	r2, r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	18d3      	adds	r3, r2, r3
 8002b98:	4aa3      	ldr	r2, [pc, #652]	; (8002e28 <PCD_EP_ISR_Handler+0x310>)
 8002b9a:	4694      	mov	ip, r2
 8002b9c:	4463      	add	r3, ip
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	059b      	lsls	r3, r3, #22
 8002ba2:	0d9a      	lsrs	r2, r3, #22
 8002ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ba6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	18d2      	adds	r2, r2, r3
 8002bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2100      	movs	r1, #0
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f006 fbbe 	bl	800933c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2224      	movs	r2, #36	; 0x24
 8002bc4:	5c9b      	ldrb	r3, [r3, r2]
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <PCD_EP_ISR_Handler+0xb8>
 8002bcc:	f000 fb82 	bl	80032d4 <PCD_EP_ISR_Handler+0x7bc>
 8002bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <PCD_EP_ISR_Handler+0xc4>
 8002bd8:	f000 fb7c 	bl	80032d4 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	5c9b      	ldrb	r3, [r3, r2]
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	4252      	negs	r2, r2
 8002be8:	4313      	orrs	r3, r2
 8002bea:	b2da      	uxtb	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b291      	uxth	r1, r2
 8002bf2:	224c      	movs	r2, #76	; 0x4c
 8002bf4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	; 0x24
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	5499      	strb	r1, [r3, r2]
 8002bfe:	e369      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3369      	adds	r3, #105	; 0x69
 8002c04:	33ff      	adds	r3, #255	; 0xff
 8002c06:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	2152      	movs	r1, #82	; 0x52
 8002c0e:	187b      	adds	r3, r7, r1
 8002c10:	8812      	ldrh	r2, [r2, #0]
 8002c12:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002c14:	187b      	adds	r3, r7, r1
 8002c16:	881a      	ldrh	r2, [r3, #0]
 8002c18:	2380      	movs	r3, #128	; 0x80
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	d037      	beq.n	8002c90 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2250      	movs	r2, #80	; 0x50
 8002c26:	5a9b      	ldrh	r3, [r3, r2]
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	001a      	movs	r2, r3
 8002c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	18d2      	adds	r2, r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	4a7c      	ldr	r2, [pc, #496]	; (8002e2c <PCD_EP_ISR_Handler+0x314>)
 8002c3c:	4694      	mov	ip, r2
 8002c3e:	4463      	add	r3, ip
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	059b      	lsls	r3, r3, #22
 8002c44:	0d9a      	lsrs	r2, r3, #22
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	22ac      	movs	r2, #172	; 0xac
 8002c52:	0092      	lsls	r2, r2, #2
 8002c54:	1899      	adds	r1, r3, r2
 8002c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c58:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c5c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	f004 fccc 	bl	80075fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	2010      	movs	r0, #16
 8002c6e:	183b      	adds	r3, r7, r0
 8002c70:	496f      	ldr	r1, [pc, #444]	; (8002e30 <PCD_EP_ISR_Handler+0x318>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	801a      	strh	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	183a      	adds	r2, r7, r0
 8002c7c:	8812      	ldrh	r2, [r2, #0]
 8002c7e:	2180      	movs	r1, #128	; 0x80
 8002c80:	430a      	orrs	r2, r1
 8002c82:	b292      	uxth	r2, r2
 8002c84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0018      	movs	r0, r3
 8002c8a:	f006 fb21 	bl	80092d0 <HAL_PCD_SetupStageCallback>
 8002c8e:	e321      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c90:	2352      	movs	r3, #82	; 0x52
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2200      	movs	r2, #0
 8002c96:	5e9b      	ldrsh	r3, [r3, r2]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	db00      	blt.n	8002c9e <PCD_EP_ISR_Handler+0x186>
 8002c9c:	e31a      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	201e      	movs	r0, #30
 8002ca8:	183b      	adds	r3, r7, r0
 8002caa:	4961      	ldr	r1, [pc, #388]	; (8002e30 <PCD_EP_ISR_Handler+0x318>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	801a      	strh	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	183a      	adds	r2, r7, r0
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	2180      	movs	r1, #128	; 0x80
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2250      	movs	r2, #80	; 0x50
 8002cc6:	5a9b      	ldrh	r3, [r3, r2]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	001a      	movs	r2, r3
 8002ccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	18d2      	adds	r2, r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	4a54      	ldr	r2, [pc, #336]	; (8002e2c <PCD_EP_ISR_Handler+0x314>)
 8002cdc:	4694      	mov	ip, r2
 8002cde:	4463      	add	r3, ip
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	059b      	lsls	r3, r3, #22
 8002ce4:	0d9a      	lsrs	r2, r3, #22
 8002ce6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ce8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <PCD_EP_ISR_Handler+0x210>
 8002cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf4:	695b      	ldr	r3, [r3, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d016      	beq.n	8002d28 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d00:	6959      	ldr	r1, [r3, #20]
 8002d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d04:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d08:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	f004 fc76 	bl	80075fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d12:	695a      	ldr	r2, [r3, #20]
 8002d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	18d2      	adds	r2, r2, r3
 8002d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d1c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2100      	movs	r1, #0
 8002d22:	0018      	movs	r0, r3
 8002d24:	f006 fae9 	bl	80092fa <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	001a      	movs	r2, r3
 8002d32:	2380      	movs	r3, #128	; 0x80
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	4013      	ands	r3, r2
 8002d38:	d000      	beq.n	8002d3c <PCD_EP_ISR_Handler+0x224>
 8002d3a:	e2cb      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2250      	movs	r2, #80	; 0x50
 8002d48:	5a9b      	ldrh	r3, [r3, r2]
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	001a      	movs	r2, r3
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	189b      	adds	r3, r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	4a35      	ldr	r2, [pc, #212]	; (8002e2c <PCD_EP_ISR_Handler+0x314>)
 8002d58:	4694      	mov	ip, r2
 8002d5a:	4463      	add	r3, ip
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d110      	bne.n	8002d88 <PCD_EP_ISR_Handler+0x270>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4a31      	ldr	r2, [pc, #196]	; (8002e34 <PCD_EP_ISR_Handler+0x31c>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	801a      	strh	r2, [r3, #0]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <PCD_EP_ISR_Handler+0x30c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	801a      	strh	r2, [r3, #0]
 8002d86:	e02b      	b.n	8002de0 <PCD_EP_ISR_Handler+0x2c8>
 8002d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b3e      	cmp	r3, #62	; 0x3e
 8002d8e:	d812      	bhi.n	8002db6 <PCD_EP_ISR_Handler+0x29e>
 8002d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	085b      	lsrs	r3, r3, #1
 8002d96:	647b      	str	r3, [r7, #68]	; 0x44
 8002d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d002      	beq.n	8002da8 <PCD_EP_ISR_Handler+0x290>
 8002da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002da4:	3301      	adds	r3, #1
 8002da6:	647b      	str	r3, [r7, #68]	; 0x44
 8002da8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	029b      	lsls	r3, r3, #10
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	801a      	strh	r2, [r3, #0]
 8002db4:	e014      	b.n	8002de0 <PCD_EP_ISR_Handler+0x2c8>
 8002db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	221f      	movs	r2, #31
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d102      	bne.n	8002dce <PCD_EP_ISR_Handler+0x2b6>
 8002dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8002dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	029b      	lsls	r3, r3, #10
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <PCD_EP_ISR_Handler+0x30c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	2012      	movs	r0, #18
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <PCD_EP_ISR_Handler+0x320>)
 8002dee:	400a      	ands	r2, r1
 8002df0:	801a      	strh	r2, [r3, #0]
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	183a      	adds	r2, r7, r0
 8002df6:	8812      	ldrh	r2, [r2, #0]
 8002df8:	2180      	movs	r1, #128	; 0x80
 8002dfa:	0149      	lsls	r1, r1, #5
 8002dfc:	404a      	eors	r2, r1
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	183b      	adds	r3, r7, r0
 8002e02:	183a      	adds	r2, r7, r0
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	2180      	movs	r1, #128	; 0x80
 8002e08:	0189      	lsls	r1, r1, #6
 8002e0a:	404a      	eors	r2, r1
 8002e0c:	801a      	strh	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	183a      	adds	r2, r7, r0
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	4909      	ldr	r1, [pc, #36]	; (8002e3c <PCD_EP_ISR_Handler+0x324>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	801a      	strh	r2, [r3, #0]
 8002e1e:	e259      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
 8002e20:	ffff8f0f 	.word	0xffff8f0f
 8002e24:	ffff8000 	.word	0xffff8000
 8002e28:	00000402 	.word	0x00000402
 8002e2c:	00000406 	.word	0x00000406
 8002e30:	00000f8f 	.word	0x00000f8f
 8002e34:	ffff83ff 	.word	0xffff83ff
 8002e38:	ffffbf8f 	.word	0xffffbf8f
 8002e3c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	001a      	movs	r2, r3
 8002e46:	2055      	movs	r0, #85	; 0x55
 8002e48:	183b      	adds	r3, r7, r0
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	18d2      	adds	r2, r2, r3
 8002e50:	2152      	movs	r1, #82	; 0x52
 8002e52:	187b      	adds	r3, r7, r1
 8002e54:	8812      	ldrh	r2, [r2, #0]
 8002e56:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	5e9b      	ldrsh	r3, [r3, r2]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	db00      	blt.n	8002e64 <PCD_EP_ISR_Handler+0x34c>
 8002e62:	e0fa      	b.n	800305a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	001a      	movs	r2, r3
 8002e6a:	183b      	adds	r3, r7, r0
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	18d3      	adds	r3, r2, r3
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	2450      	movs	r4, #80	; 0x50
 8002e78:	193b      	adds	r3, r7, r4
 8002e7a:	49cf      	ldr	r1, [pc, #828]	; (80031b8 <PCD_EP_ISR_Handler+0x6a0>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	801a      	strh	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	001a      	movs	r2, r3
 8002e86:	183b      	adds	r3, r7, r0
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	18d3      	adds	r3, r2, r3
 8002e8e:	193a      	adds	r2, r7, r4
 8002e90:	8812      	ldrh	r2, [r2, #0]
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	430a      	orrs	r2, r1
 8002e96:	b292      	uxth	r2, r2
 8002e98:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e9a:	183b      	adds	r3, r7, r0
 8002e9c:	781a      	ldrb	r2, [r3, #0]
 8002e9e:	0013      	movs	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	3369      	adds	r3, #105	; 0x69
 8002ea8:	33ff      	adds	r3, #255	; 0xff
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	18d3      	adds	r3, r2, r3
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eb2:	7b1b      	ldrb	r3, [r3, #12]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d125      	bne.n	8002f04 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2250      	movs	r2, #80	; 0x50
 8002ebe:	5a9b      	ldrh	r3, [r3, r2]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	18d2      	adds	r2, r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	18d3      	adds	r3, r2, r3
 8002ed2:	4aba      	ldr	r2, [pc, #744]	; (80031bc <PCD_EP_ISR_Handler+0x6a4>)
 8002ed4:	4694      	mov	ip, r2
 8002ed6:	4463      	add	r3, ip
 8002ed8:	881a      	ldrh	r2, [r3, #0]
 8002eda:	2448      	movs	r4, #72	; 0x48
 8002edc:	193b      	adds	r3, r7, r4
 8002ede:	0592      	lsls	r2, r2, #22
 8002ee0:	0d92      	lsrs	r2, r2, #22
 8002ee2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002ee4:	193b      	adds	r3, r7, r4
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d100      	bne.n	8002eee <PCD_EP_ISR_Handler+0x3d6>
 8002eec:	e08d      	b.n	800300a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef4:	6959      	ldr	r1, [r3, #20]
 8002ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef8:	88da      	ldrh	r2, [r3, #6]
 8002efa:	193b      	adds	r3, r7, r4
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	f004 fb7d 	bl	80075fc <USB_ReadPMA>
 8002f02:	e082      	b.n	800300a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	78db      	ldrb	r3, [r3, #3]
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d10c      	bne.n	8002f26 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f0c:	2348      	movs	r3, #72	; 0x48
 8002f0e:	18fc      	adds	r4, r7, r3
 8002f10:	2352      	movs	r3, #82	; 0x52
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	881a      	ldrh	r2, [r3, #0]
 8002f16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f000 f9ee 	bl	80032fc <HAL_PCD_EP_DB_Receive>
 8002f20:	0003      	movs	r3, r0
 8002f22:	8023      	strh	r3, [r4, #0]
 8002f24:	e071      	b.n	800300a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	204a      	movs	r0, #74	; 0x4a
 8002f3a:	183b      	adds	r3, r7, r0
 8002f3c:	49a0      	ldr	r1, [pc, #640]	; (80031c0 <PCD_EP_ISR_Handler+0x6a8>)
 8002f3e:	400a      	ands	r2, r1
 8002f40:	801a      	strh	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	001a      	movs	r2, r3
 8002f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	18d3      	adds	r3, r2, r3
 8002f50:	183a      	adds	r2, r7, r0
 8002f52:	8812      	ldrh	r2, [r2, #0]
 8002f54:	499b      	ldr	r1, [pc, #620]	; (80031c4 <PCD_EP_ISR_Handler+0x6ac>)
 8002f56:	430a      	orrs	r2, r1
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	001a      	movs	r2, r3
 8002f62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	18d3      	adds	r3, r2, r3
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	001a      	movs	r2, r3
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	01db      	lsls	r3, r3, #7
 8002f74:	4013      	ands	r3, r2
 8002f76:	d024      	beq.n	8002fc2 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2250      	movs	r2, #80	; 0x50
 8002f7e:	5a9b      	ldrh	r3, [r3, r2]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	001a      	movs	r2, r3
 8002f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	18d2      	adds	r2, r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	18d3      	adds	r3, r2, r3
 8002f92:	4a8d      	ldr	r2, [pc, #564]	; (80031c8 <PCD_EP_ISR_Handler+0x6b0>)
 8002f94:	4694      	mov	ip, r2
 8002f96:	4463      	add	r3, ip
 8002f98:	881a      	ldrh	r2, [r3, #0]
 8002f9a:	2448      	movs	r4, #72	; 0x48
 8002f9c:	193b      	adds	r3, r7, r4
 8002f9e:	0592      	lsls	r2, r2, #22
 8002fa0:	0d92      	lsrs	r2, r2, #22
 8002fa2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002fa4:	193b      	adds	r3, r7, r4
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02e      	beq.n	800300a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb2:	6959      	ldr	r1, [r3, #20]
 8002fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb6:	891a      	ldrh	r2, [r3, #8]
 8002fb8:	193b      	adds	r3, r7, r4
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	f004 fb1e 	bl	80075fc <USB_ReadPMA>
 8002fc0:	e023      	b.n	800300a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2250      	movs	r2, #80	; 0x50
 8002fc8:	5a9b      	ldrh	r3, [r3, r2]
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	001a      	movs	r2, r3
 8002fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	18d2      	adds	r2, r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	18d3      	adds	r3, r2, r3
 8002fdc:	4a77      	ldr	r2, [pc, #476]	; (80031bc <PCD_EP_ISR_Handler+0x6a4>)
 8002fde:	4694      	mov	ip, r2
 8002fe0:	4463      	add	r3, ip
 8002fe2:	881a      	ldrh	r2, [r3, #0]
 8002fe4:	2448      	movs	r4, #72	; 0x48
 8002fe6:	193b      	adds	r3, r7, r4
 8002fe8:	0592      	lsls	r2, r2, #22
 8002fea:	0d92      	lsrs	r2, r2, #22
 8002fec:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002fee:	193b      	adds	r3, r7, r4
 8002ff0:	881b      	ldrh	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	6959      	ldr	r1, [r3, #20]
 8002ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003000:	895a      	ldrh	r2, [r3, #10]
 8003002:	193b      	adds	r3, r7, r4
 8003004:	881b      	ldrh	r3, [r3, #0]
 8003006:	f004 faf9 	bl	80075fc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800300a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	2148      	movs	r1, #72	; 0x48
 8003010:	187b      	adds	r3, r7, r1
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	18d2      	adds	r2, r2, r3
 8003016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003018:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800301a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	187b      	adds	r3, r7, r1
 8003020:	881b      	ldrh	r3, [r3, #0]
 8003022:	18d2      	adds	r2, r2, r3
 8003024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003026:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <PCD_EP_ISR_Handler+0x524>
 8003030:	187b      	adds	r3, r7, r1
 8003032:	881a      	ldrh	r2, [r3, #0]
 8003034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	429a      	cmp	r2, r3
 800303a:	d207      	bcs.n	800304c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800303c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800303e:	781a      	ldrb	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	0011      	movs	r1, r2
 8003044:	0018      	movs	r0, r3
 8003046:	f006 f958 	bl	80092fa <HAL_PCD_DataOutStageCallback>
 800304a:	e006      	b.n	800305a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003052:	0011      	movs	r1, r2
 8003054:	0018      	movs	r0, r3
 8003056:	f003 f899 	bl	800618c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800305a:	2452      	movs	r4, #82	; 0x52
 800305c:	193b      	adds	r3, r7, r4
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	4013      	ands	r3, r2
 8003064:	d100      	bne.n	8003068 <PCD_EP_ISR_Handler+0x550>
 8003066:	e135      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003068:	2055      	movs	r0, #85	; 0x55
 800306a:	183b      	adds	r3, r7, r0
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	0013      	movs	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	189b      	adds	r3, r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	001a      	movs	r2, r3
 8003084:	183b      	adds	r3, r7, r0
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	18d3      	adds	r3, r2, r3
 800308c:	881b      	ldrh	r3, [r3, #0]
 800308e:	b29a      	uxth	r2, r3
 8003090:	2542      	movs	r5, #66	; 0x42
 8003092:	197b      	adds	r3, r7, r5
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <PCD_EP_ISR_Handler+0x6b4>)
 8003096:	400a      	ands	r2, r1
 8003098:	801a      	strh	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	001a      	movs	r2, r3
 80030a0:	183b      	adds	r3, r7, r0
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	197a      	adds	r2, r7, r5
 80030aa:	8812      	ldrh	r2, [r2, #0]
 80030ac:	4948      	ldr	r1, [pc, #288]	; (80031d0 <PCD_EP_ISR_Handler+0x6b8>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	b292      	uxth	r2, r2
 80030b2:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	78db      	ldrb	r3, [r3, #3]
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d100      	bne.n	80030be <PCD_EP_ISR_Handler+0x5a6>
 80030bc:	e0ad      	b.n	800321a <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80030be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030c0:	2200      	movs	r2, #0
 80030c2:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030c4:	193b      	adds	r3, r7, r4
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	2240      	movs	r2, #64	; 0x40
 80030ca:	4013      	ands	r3, r2
 80030cc:	d046      	beq.n	800315c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d125      	bne.n	8003122 <PCD_EP_ISR_Handler+0x60a>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	627b      	str	r3, [r7, #36]	; 0x24
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2250      	movs	r2, #80	; 0x50
 80030e2:	5a9b      	ldrh	r3, [r3, r2]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	001a      	movs	r2, r3
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	189b      	adds	r3, r3, r2
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
 80030ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	00da      	lsls	r2, r3, #3
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	18d3      	adds	r3, r2, r3
 80030f8:	4a33      	ldr	r2, [pc, #204]	; (80031c8 <PCD_EP_ISR_Handler+0x6b0>)
 80030fa:	4694      	mov	ip, r2
 80030fc:	4463      	add	r3, ip
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	881b      	ldrh	r3, [r3, #0]
 8003104:	b29b      	uxth	r3, r3
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <PCD_EP_ISR_Handler+0x6bc>)
 8003108:	4013      	ands	r3, r2
 800310a:	b29a      	uxth	r2, r3
 800310c:	6a3b      	ldr	r3, [r7, #32]
 800310e:	801a      	strh	r2, [r3, #0]
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4a2e      	ldr	r2, [pc, #184]	; (80031d0 <PCD_EP_ISR_Handler+0x6b8>)
 8003118:	4313      	orrs	r3, r2
 800311a:	b29a      	uxth	r2, r3
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	801a      	strh	r2, [r3, #0]
 8003120:	e073      	b.n	800320a <PCD_EP_ISR_Handler+0x6f2>
 8003122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d16f      	bne.n	800320a <PCD_EP_ISR_Handler+0x6f2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2250      	movs	r2, #80	; 0x50
 8003136:	5a9b      	ldrh	r3, [r3, r2]
 8003138:	b29b      	uxth	r3, r3
 800313a:	001a      	movs	r2, r3
 800313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800313e:	189b      	adds	r3, r3, r2
 8003140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	00da      	lsls	r2, r3, #3
 8003148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314a:	18d3      	adds	r3, r2, r3
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <PCD_EP_ISR_Handler+0x6b0>)
 800314e:	4694      	mov	ip, r2
 8003150:	4463      	add	r3, ip
 8003152:	62bb      	str	r3, [r7, #40]	; 0x28
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	2200      	movs	r2, #0
 8003158:	801a      	strh	r2, [r3, #0]
 800315a:	e056      	b.n	800320a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003164:	785b      	ldrb	r3, [r3, #1]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d136      	bne.n	80031d8 <PCD_EP_ISR_Handler+0x6c0>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2250      	movs	r2, #80	; 0x50
 8003176:	5a9b      	ldrh	r3, [r3, r2]
 8003178:	b29b      	uxth	r3, r3
 800317a:	001a      	movs	r2, r3
 800317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800317e:	189b      	adds	r3, r3, r2
 8003180:	637b      	str	r3, [r7, #52]	; 0x34
 8003182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	00da      	lsls	r2, r3, #3
 8003188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800318a:	18d3      	adds	r3, r2, r3
 800318c:	4a0b      	ldr	r2, [pc, #44]	; (80031bc <PCD_EP_ISR_Handler+0x6a4>)
 800318e:	4694      	mov	ip, r2
 8003190:	4463      	add	r3, ip
 8003192:	633b      	str	r3, [r7, #48]	; 0x30
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	4a0e      	ldr	r2, [pc, #56]	; (80031d4 <PCD_EP_ISR_Handler+0x6bc>)
 800319c:	4013      	ands	r3, r2
 800319e:	b29a      	uxth	r2, r3
 80031a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a2:	801a      	strh	r2, [r3, #0]
 80031a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a6:	881b      	ldrh	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <PCD_EP_ISR_Handler+0x6b8>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	e029      	b.n	800320a <PCD_EP_ISR_Handler+0x6f2>
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	00000f8f 	.word	0x00000f8f
 80031bc:	00000406 	.word	0x00000406
 80031c0:	ffff8f8f 	.word	0xffff8f8f
 80031c4:	ffff80c0 	.word	0xffff80c0
 80031c8:	00000402 	.word	0x00000402
 80031cc:	ffff8f0f 	.word	0xffff8f0f
 80031d0:	ffff8000 	.word	0xffff8000
 80031d4:	ffff83ff 	.word	0xffff83ff
 80031d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031da:	785b      	ldrb	r3, [r3, #1]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d114      	bne.n	800320a <PCD_EP_ISR_Handler+0x6f2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2250      	movs	r2, #80	; 0x50
 80031e6:	5a9b      	ldrh	r3, [r3, r2]
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	001a      	movs	r2, r3
 80031ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ee:	189b      	adds	r3, r3, r2
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	00da      	lsls	r2, r3, #3
 80031f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031fa:	18d3      	adds	r3, r2, r3
 80031fc:	4a3d      	ldr	r2, [pc, #244]	; (80032f4 <PCD_EP_ISR_Handler+0x7dc>)
 80031fe:	4694      	mov	ip, r2
 8003200:	4463      	add	r3, ip
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	2200      	movs	r2, #0
 8003208:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800320a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0011      	movs	r1, r2
 8003212:	0018      	movs	r0, r3
 8003214:	f006 f892 	bl	800933c <HAL_PCD_DataInStageCallback>
 8003218:	e05c      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800321a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321c:	78db      	ldrb	r3, [r3, #3]
 800321e:	2b02      	cmp	r3, #2
 8003220:	d150      	bne.n	80032c4 <PCD_EP_ISR_Handler+0x7ac>
 8003222:	2352      	movs	r3, #82	; 0x52
 8003224:	18fb      	adds	r3, r7, r3
 8003226:	881a      	ldrh	r2, [r3, #0]
 8003228:	2380      	movs	r3, #128	; 0x80
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4013      	ands	r3, r2
 800322e:	d149      	bne.n	80032c4 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2250      	movs	r2, #80	; 0x50
 8003236:	5a9b      	ldrh	r3, [r3, r2]
 8003238:	b29b      	uxth	r3, r3
 800323a:	001a      	movs	r2, r3
 800323c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	18d2      	adds	r2, r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	18d3      	adds	r3, r2, r3
 800324a:	4a2b      	ldr	r2, [pc, #172]	; (80032f8 <PCD_EP_ISR_Handler+0x7e0>)
 800324c:	4694      	mov	ip, r2
 800324e:	4463      	add	r3, ip
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	187b      	adds	r3, r7, r1
 8003256:	0592      	lsls	r2, r2, #22
 8003258:	0d92      	lsrs	r2, r2, #22
 800325a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 800325c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	187b      	adds	r3, r7, r1
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d907      	bls.n	8003278 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	187b      	adds	r3, r7, r1
 800326e:	881b      	ldrh	r3, [r3, #0]
 8003270:	1ad2      	subs	r2, r2, r3
 8003272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003274:	619a      	str	r2, [r3, #24]
 8003276:	e002      	b.n	800327e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800327e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d107      	bne.n	8003296 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	0011      	movs	r1, r2
 800328e:	0018      	movs	r0, r3
 8003290:	f006 f854 	bl	800933c <HAL_PCD_DataInStageCallback>
 8003294:	e01e      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8003296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003298:	695a      	ldr	r2, [r3, #20]
 800329a:	2140      	movs	r1, #64	; 0x40
 800329c:	187b      	adds	r3, r7, r1
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	18d2      	adds	r2, r2, r3
 80032a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80032a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	18d2      	adds	r2, r2, r3
 80032b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032b2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80032ba:	0011      	movs	r1, r2
 80032bc:	0018      	movs	r0, r3
 80032be:	f002 ff65 	bl	800618c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80032c2:	e007      	b.n	80032d4 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032c4:	2352      	movs	r3, #82	; 0x52
 80032c6:	18fb      	adds	r3, r7, r3
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 f930 	bl	8003534 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2244      	movs	r2, #68	; 0x44
 80032da:	5a9b      	ldrh	r3, [r3, r2]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	b21b      	sxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da01      	bge.n	80032e8 <PCD_EP_ISR_Handler+0x7d0>
 80032e4:	f7ff fc1e 	bl	8002b24 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b016      	add	sp, #88	; 0x58
 80032f0:	bdb0      	pop	{r4, r5, r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	00000406 	.word	0x00000406
 80032f8:	00000402 	.word	0x00000402

080032fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	1dbb      	adds	r3, r7, #6
 8003308:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800330a:	1dbb      	adds	r3, r7, #6
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	2380      	movs	r3, #128	; 0x80
 8003310:	01db      	lsls	r3, r3, #7
 8003312:	4013      	ands	r3, r2
 8003314:	d100      	bne.n	8003318 <HAL_PCD_EP_DB_Receive+0x1c>
 8003316:	e07d      	b.n	8003414 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2250      	movs	r2, #80	; 0x50
 800331e:	5a9b      	ldrh	r3, [r3, r2]
 8003320:	b29b      	uxth	r3, r3
 8003322:	001a      	movs	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	18d2      	adds	r2, r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	18d3      	adds	r3, r2, r3
 8003332:	4a7a      	ldr	r2, [pc, #488]	; (800351c <HAL_PCD_EP_DB_Receive+0x220>)
 8003334:	4694      	mov	ip, r2
 8003336:	4463      	add	r3, ip
 8003338:	881a      	ldrh	r2, [r3, #0]
 800333a:	211a      	movs	r1, #26
 800333c:	187b      	adds	r3, r7, r1
 800333e:	0592      	lsls	r2, r2, #22
 8003340:	0d92      	lsrs	r2, r2, #22
 8003342:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	187b      	adds	r3, r7, r1
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d307      	bcc.n	8003360 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	187b      	adds	r3, r7, r1
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	619a      	str	r2, [r3, #24]
 800335e:	e002      	b.n	8003366 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d121      	bne.n	80033b2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	001a      	movs	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	18d3      	adds	r3, r2, r3
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	b29a      	uxth	r2, r3
 8003380:	2018      	movs	r0, #24
 8003382:	183b      	adds	r3, r7, r0
 8003384:	4966      	ldr	r1, [pc, #408]	; (8003520 <HAL_PCD_EP_DB_Receive+0x224>)
 8003386:	400a      	ands	r2, r1
 8003388:	801a      	strh	r2, [r3, #0]
 800338a:	183b      	adds	r3, r7, r0
 800338c:	183a      	adds	r2, r7, r0
 800338e:	8812      	ldrh	r2, [r2, #0]
 8003390:	2180      	movs	r1, #128	; 0x80
 8003392:	0189      	lsls	r1, r1, #6
 8003394:	404a      	eors	r2, r1
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	001a      	movs	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	18d3      	adds	r3, r2, r3
 80033a6:	183a      	adds	r2, r7, r0
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	495e      	ldr	r1, [pc, #376]	; (8003524 <HAL_PCD_EP_DB_Receive+0x228>)
 80033ac:	430a      	orrs	r2, r1
 80033ae:	b292      	uxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80033b2:	1dbb      	adds	r3, r7, #6
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	4013      	ands	r3, r2
 80033ba:	d01a      	beq.n	80033f2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	001a      	movs	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	2016      	movs	r0, #22
 80033d0:	183b      	adds	r3, r7, r0
 80033d2:	4955      	ldr	r1, [pc, #340]	; (8003528 <HAL_PCD_EP_DB_Receive+0x22c>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	801a      	strh	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	001a      	movs	r2, r3
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	18d3      	adds	r3, r2, r3
 80033e6:	183a      	adds	r2, r7, r0
 80033e8:	8812      	ldrh	r2, [r2, #0]
 80033ea:	4950      	ldr	r1, [pc, #320]	; (800352c <HAL_PCD_EP_DB_Receive+0x230>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	b292      	uxth	r2, r2
 80033f0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80033f2:	241a      	movs	r4, #26
 80033f4:	193b      	adds	r3, r7, r4
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d100      	bne.n	80033fe <HAL_PCD_EP_DB_Receive+0x102>
 80033fc:	e086      	b.n	800350c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6818      	ldr	r0, [r3, #0]
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6959      	ldr	r1, [r3, #20]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	891a      	ldrh	r2, [r3, #8]
 800340a:	193b      	adds	r3, r7, r4
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	f004 f8f5 	bl	80075fc <USB_ReadPMA>
 8003412:	e07b      	b.n	800350c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2250      	movs	r2, #80	; 0x50
 800341a:	5a9b      	ldrh	r3, [r3, r2]
 800341c:	b29b      	uxth	r3, r3
 800341e:	001a      	movs	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	18d2      	adds	r2, r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	18d3      	adds	r3, r2, r3
 800342e:	4a40      	ldr	r2, [pc, #256]	; (8003530 <HAL_PCD_EP_DB_Receive+0x234>)
 8003430:	4694      	mov	ip, r2
 8003432:	4463      	add	r3, ip
 8003434:	881a      	ldrh	r2, [r3, #0]
 8003436:	211a      	movs	r1, #26
 8003438:	187b      	adds	r3, r7, r1
 800343a:	0592      	lsls	r2, r2, #22
 800343c:	0d92      	lsrs	r2, r2, #22
 800343e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	699a      	ldr	r2, [r3, #24]
 8003444:	187b      	adds	r3, r7, r1
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	429a      	cmp	r2, r3
 800344a:	d307      	bcc.n	800345c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	699a      	ldr	r2, [r3, #24]
 8003450:	187b      	adds	r3, r7, r1
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	1ad2      	subs	r2, r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	619a      	str	r2, [r3, #24]
 800345a:	e002      	b.n	8003462 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d121      	bne.n	80034ae <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	001a      	movs	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	18d3      	adds	r3, r2, r3
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	b29a      	uxth	r2, r3
 800347c:	201e      	movs	r0, #30
 800347e:	183b      	adds	r3, r7, r0
 8003480:	4927      	ldr	r1, [pc, #156]	; (8003520 <HAL_PCD_EP_DB_Receive+0x224>)
 8003482:	400a      	ands	r2, r1
 8003484:	801a      	strh	r2, [r3, #0]
 8003486:	183b      	adds	r3, r7, r0
 8003488:	183a      	adds	r2, r7, r0
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0189      	lsls	r1, r1, #6
 8003490:	404a      	eors	r2, r1
 8003492:	801a      	strh	r2, [r3, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	001a      	movs	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	18d3      	adds	r3, r2, r3
 80034a2:	183a      	adds	r2, r7, r0
 80034a4:	8812      	ldrh	r2, [r2, #0]
 80034a6:	491f      	ldr	r1, [pc, #124]	; (8003524 <HAL_PCD_EP_DB_Receive+0x228>)
 80034a8:	430a      	orrs	r2, r1
 80034aa:	b292      	uxth	r2, r2
 80034ac:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80034ae:	1dbb      	adds	r3, r7, #6
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	4013      	ands	r3, r2
 80034b6:	d11a      	bne.n	80034ee <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	001a      	movs	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	18d3      	adds	r3, r2, r3
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	201c      	movs	r0, #28
 80034cc:	183b      	adds	r3, r7, r0
 80034ce:	4916      	ldr	r1, [pc, #88]	; (8003528 <HAL_PCD_EP_DB_Receive+0x22c>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	001a      	movs	r2, r3
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	18d3      	adds	r3, r2, r3
 80034e2:	183a      	adds	r2, r7, r0
 80034e4:	8812      	ldrh	r2, [r2, #0]
 80034e6:	4911      	ldr	r1, [pc, #68]	; (800352c <HAL_PCD_EP_DB_Receive+0x230>)
 80034e8:	430a      	orrs	r2, r1
 80034ea:	b292      	uxth	r2, r2
 80034ec:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80034ee:	241a      	movs	r4, #26
 80034f0:	193b      	adds	r3, r7, r4
 80034f2:	881b      	ldrh	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	6959      	ldr	r1, [r3, #20]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	895a      	ldrh	r2, [r3, #10]
 8003504:	193b      	adds	r3, r7, r4
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	f004 f878 	bl	80075fc <USB_ReadPMA>
    }
  }

  return count;
 800350c:	231a      	movs	r3, #26
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	881b      	ldrh	r3, [r3, #0]
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b009      	add	sp, #36	; 0x24
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	00000402 	.word	0x00000402
 8003520:	ffffbf8f 	.word	0xffffbf8f
 8003524:	ffff8080 	.word	0xffff8080
 8003528:	ffff8f8f 	.word	0xffff8f8f
 800352c:	ffff80c0 	.word	0xffff80c0
 8003530:	00000406 	.word	0x00000406

08003534 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b0a2      	sub	sp, #136	; 0x88
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	1dbb      	adds	r3, r7, #6
 8003540:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003542:	1dbb      	adds	r3, r7, #6
 8003544:	881b      	ldrh	r3, [r3, #0]
 8003546:	2240      	movs	r2, #64	; 0x40
 8003548:	4013      	ands	r3, r2
 800354a:	d100      	bne.n	800354e <HAL_PCD_EP_DB_Transmit+0x1a>
 800354c:	e1c8      	b.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2250      	movs	r2, #80	; 0x50
 8003554:	5a9b      	ldrh	r3, [r3, r2]
 8003556:	b29b      	uxth	r3, r3
 8003558:	001a      	movs	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	18d2      	adds	r2, r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	18d3      	adds	r3, r2, r3
 8003568:	4ad7      	ldr	r2, [pc, #860]	; (80038c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 800356a:	4694      	mov	ip, r2
 800356c:	4463      	add	r3, ip
 800356e:	881a      	ldrh	r2, [r3, #0]
 8003570:	214e      	movs	r1, #78	; 0x4e
 8003572:	187b      	adds	r3, r7, r1
 8003574:	0592      	lsls	r2, r2, #22
 8003576:	0d92      	lsrs	r2, r2, #22
 8003578:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	187b      	adds	r3, r7, r1
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d907      	bls.n	8003596 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	699a      	ldr	r2, [r3, #24]
 800358a:	187b      	adds	r3, r7, r1
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	1ad2      	subs	r2, r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	619a      	str	r2, [r3, #24]
 8003594:	e002      	b.n	800359c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2200      	movs	r2, #0
 800359a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d000      	beq.n	80035a6 <HAL_PCD_EP_DB_Transmit+0x72>
 80035a4:	e0b5      	b.n	8003712 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d125      	bne.n	80035fa <HAL_PCD_EP_DB_Transmit+0xc6>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2250      	movs	r2, #80	; 0x50
 80035ba:	5a9b      	ldrh	r3, [r3, r2]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	001a      	movs	r2, r3
 80035c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	00da      	lsls	r2, r3, #3
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	18d3      	adds	r3, r2, r3
 80035d0:	4abd      	ldr	r2, [pc, #756]	; (80038c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80035d2:	4694      	mov	ip, r2
 80035d4:	4463      	add	r3, ip
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	881b      	ldrh	r3, [r3, #0]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4abb      	ldr	r2, [pc, #748]	; (80038cc <HAL_PCD_EP_DB_Transmit+0x398>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e6:	801a      	strh	r2, [r3, #0]
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	4ab8      	ldr	r2, [pc, #736]	; (80038d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e01b      	b.n	8003632 <HAL_PCD_EP_DB_Transmit+0xfe>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d117      	bne.n	8003632 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	633b      	str	r3, [r7, #48]	; 0x30
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2250      	movs	r2, #80	; 0x50
 800360e:	5a9b      	ldrh	r3, [r3, r2]
 8003610:	b29b      	uxth	r3, r3
 8003612:	001a      	movs	r2, r3
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	189b      	adds	r3, r3, r2
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	00da      	lsls	r2, r3, #3
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	4aa8      	ldr	r2, [pc, #672]	; (80038c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003626:	4694      	mov	ip, r2
 8003628:	4463      	add	r3, ip
 800362a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800362c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362e:	2200      	movs	r2, #0
 8003630:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	623b      	str	r3, [r7, #32]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d125      	bne.n	800368c <HAL_PCD_EP_DB_Transmit+0x158>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2250      	movs	r2, #80	; 0x50
 800364c:	5a9b      	ldrh	r3, [r3, r2]
 800364e:	b29b      	uxth	r3, r3
 8003650:	001a      	movs	r2, r3
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	189b      	adds	r3, r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	00da      	lsls	r2, r3, #3
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	18d3      	adds	r3, r2, r3
 8003662:	4a9c      	ldr	r2, [pc, #624]	; (80038d4 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003664:	4694      	mov	ip, r2
 8003666:	4463      	add	r3, ip
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	b29b      	uxth	r3, r3
 8003670:	4a96      	ldr	r2, [pc, #600]	; (80038cc <HAL_PCD_EP_DB_Transmit+0x398>)
 8003672:	4013      	ands	r3, r2
 8003674:	b29a      	uxth	r2, r3
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	801a      	strh	r2, [r3, #0]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	b29b      	uxth	r3, r3
 8003680:	4a93      	ldr	r2, [pc, #588]	; (80038d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003682:	4313      	orrs	r3, r2
 8003684:	b29a      	uxth	r2, r3
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	801a      	strh	r2, [r3, #0]
 800368a:	e018      	b.n	80036be <HAL_PCD_EP_DB_Transmit+0x18a>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d114      	bne.n	80036be <HAL_PCD_EP_DB_Transmit+0x18a>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2250      	movs	r2, #80	; 0x50
 800369a:	5a9b      	ldrh	r3, [r3, r2]
 800369c:	b29b      	uxth	r3, r3
 800369e:	001a      	movs	r2, r3
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	189b      	adds	r3, r3, r2
 80036a4:	623b      	str	r3, [r7, #32]
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	00da      	lsls	r2, r3, #3
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	18d3      	adds	r3, r2, r3
 80036b0:	4a88      	ldr	r2, [pc, #544]	; (80038d4 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80036b2:	4694      	mov	ip, r2
 80036b4:	4463      	add	r3, ip
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2200      	movs	r2, #0
 80036bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f005 fe38 	bl	800933c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	881a      	ldrh	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	01db      	lsls	r3, r3, #7
 80036d4:	4013      	ands	r3, r2
 80036d6:	d100      	bne.n	80036da <HAL_PCD_EP_DB_Transmit+0x1a6>
 80036d8:	e2d4      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	001a      	movs	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	18d3      	adds	r3, r2, r3
 80036e8:	881b      	ldrh	r3, [r3, #0]
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	2012      	movs	r0, #18
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	4979      	ldr	r1, [pc, #484]	; (80038d8 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	001a      	movs	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	18d3      	adds	r3, r2, r3
 8003704:	183a      	adds	r2, r7, r0
 8003706:	8812      	ldrh	r2, [r2, #0]
 8003708:	4974      	ldr	r1, [pc, #464]	; (80038dc <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800370a:	430a      	orrs	r2, r1
 800370c:	b292      	uxth	r2, r2
 800370e:	801a      	strh	r2, [r3, #0]
 8003710:	e2b8      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003712:	1dbb      	adds	r3, r7, #6
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	01db      	lsls	r3, r3, #7
 800371a:	4013      	ands	r3, r2
 800371c:	d01a      	beq.n	8003754 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	001a      	movs	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	18d3      	adds	r3, r2, r3
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29a      	uxth	r2, r3
 8003730:	2044      	movs	r0, #68	; 0x44
 8003732:	183b      	adds	r3, r7, r0
 8003734:	4968      	ldr	r1, [pc, #416]	; (80038d8 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003736:	400a      	ands	r2, r1
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	001a      	movs	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	18d3      	adds	r3, r2, r3
 8003748:	183a      	adds	r2, r7, r0
 800374a:	8812      	ldrh	r2, [r2, #0]
 800374c:	4963      	ldr	r1, [pc, #396]	; (80038dc <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800374e:	430a      	orrs	r2, r1
 8003750:	b292      	uxth	r2, r2
 8003752:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	5c9b      	ldrb	r3, [r3, r2]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d000      	beq.n	8003760 <HAL_PCD_EP_DB_Transmit+0x22c>
 800375e:	e291      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	214e      	movs	r1, #78	; 0x4e
 8003766:	187b      	adds	r3, r7, r1
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	18d2      	adds	r2, r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	69da      	ldr	r2, [r3, #28]
 8003774:	187b      	adds	r3, r7, r1
 8003776:	881b      	ldrh	r3, [r3, #0]
 8003778:	18d2      	adds	r2, r2, r3
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	6a1a      	ldr	r2, [r3, #32]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	429a      	cmp	r2, r3
 8003788:	d309      	bcc.n	800379e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	6a1a      	ldr	r2, [r3, #32]
 8003794:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003796:	1ad2      	subs	r2, r2, r3
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	621a      	str	r2, [r3, #32]
 800379c:	e016      	b.n	80037cc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d108      	bne.n	80037b8 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80037a6:	234e      	movs	r3, #78	; 0x4e
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2224      	movs	r2, #36	; 0x24
 80037b2:	2100      	movs	r1, #0
 80037b4:	5499      	strb	r1, [r3, r2]
 80037b6:	e009      	b.n	80037cc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	2100      	movs	r1, #0
 80037be:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2200      	movs	r2, #0
 80037ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d150      	bne.n	8003876 <HAL_PCD_EP_DB_Transmit+0x342>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2250      	movs	r2, #80	; 0x50
 80037e0:	5a9b      	ldrh	r3, [r3, r2]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	001a      	movs	r2, r3
 80037e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e8:	189b      	adds	r3, r3, r2
 80037ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	00da      	lsls	r2, r3, #3
 80037f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f4:	18d3      	adds	r3, r2, r3
 80037f6:	4a34      	ldr	r2, [pc, #208]	; (80038c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80037f8:	4694      	mov	ip, r2
 80037fa:	4463      	add	r3, ip
 80037fc:	637b      	str	r3, [r7, #52]	; 0x34
 80037fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003800:	2b00      	cmp	r3, #0
 8003802:	d110      	bne.n	8003826 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003804:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003806:	881b      	ldrh	r3, [r3, #0]
 8003808:	b29b      	uxth	r3, r3
 800380a:	4a30      	ldr	r2, [pc, #192]	; (80038cc <HAL_PCD_EP_DB_Transmit+0x398>)
 800380c:	4013      	ands	r3, r2
 800380e:	b29a      	uxth	r2, r3
 8003810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003816:	881b      	ldrh	r3, [r3, #0]
 8003818:	b29b      	uxth	r3, r3
 800381a:	4a2d      	ldr	r2, [pc, #180]	; (80038d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800381c:	4313      	orrs	r3, r2
 800381e:	b29a      	uxth	r2, r3
 8003820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e044      	b.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003828:	2b3e      	cmp	r3, #62	; 0x3e
 800382a:	d810      	bhi.n	800384e <HAL_PCD_EP_DB_Transmit+0x31a>
 800382c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800382e:	085b      	lsrs	r3, r3, #1
 8003830:	64bb      	str	r3, [r7, #72]	; 0x48
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	2201      	movs	r2, #1
 8003836:	4013      	ands	r3, r2
 8003838:	d002      	beq.n	8003840 <HAL_PCD_EP_DB_Transmit+0x30c>
 800383a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800383c:	3301      	adds	r3, #1
 800383e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003840:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003842:	b29b      	uxth	r3, r3
 8003844:	029b      	lsls	r3, r3, #10
 8003846:	b29a      	uxth	r2, r3
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	801a      	strh	r2, [r3, #0]
 800384c:	e030      	b.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 800384e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	64bb      	str	r3, [r7, #72]	; 0x48
 8003854:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003856:	221f      	movs	r2, #31
 8003858:	4013      	ands	r3, r2
 800385a:	d102      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x32e>
 800385c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385e:	3b01      	subs	r3, #1
 8003860:	64bb      	str	r3, [r7, #72]	; 0x48
 8003862:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003864:	b29b      	uxth	r3, r3
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	b29b      	uxth	r3, r3
 800386a:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	b29a      	uxth	r2, r3
 8003870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003872:	801a      	strh	r2, [r3, #0]
 8003874:	e01c      	b.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d118      	bne.n	80038b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	643b      	str	r3, [r7, #64]	; 0x40
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2250      	movs	r2, #80	; 0x50
 800388a:	5a9b      	ldrh	r3, [r3, r2]
 800388c:	b29b      	uxth	r3, r3
 800388e:	001a      	movs	r2, r3
 8003890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003892:	189b      	adds	r3, r3, r2
 8003894:	643b      	str	r3, [r7, #64]	; 0x40
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	00da      	lsls	r2, r3, #3
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	18d3      	adds	r3, r2, r3
 80038a0:	4a09      	ldr	r2, [pc, #36]	; (80038c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80038a2:	4694      	mov	ip, r2
 80038a4:	4463      	add	r3, ip
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6818      	ldr	r0, [r3, #0]
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	6959      	ldr	r1, [r3, #20]
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	891a      	ldrh	r2, [r3, #8]
 80038bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038be:	b29b      	uxth	r3, r3
 80038c0:	f003 fe58 	bl	8007574 <USB_WritePMA>
 80038c4:	e1de      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	00000402 	.word	0x00000402
 80038cc:	ffff83ff 	.word	0xffff83ff
 80038d0:	ffff8000 	.word	0xffff8000
 80038d4:	00000406 	.word	0x00000406
 80038d8:	ffff8f8f 	.word	0xffff8f8f
 80038dc:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2250      	movs	r2, #80	; 0x50
 80038e6:	5a9b      	ldrh	r3, [r3, r2]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	001a      	movs	r2, r3
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	00db      	lsls	r3, r3, #3
 80038f2:	18d2      	adds	r2, r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	4aca      	ldr	r2, [pc, #808]	; (8003c24 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80038fc:	4694      	mov	ip, r2
 80038fe:	4463      	add	r3, ip
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	214e      	movs	r1, #78	; 0x4e
 8003904:	187b      	adds	r3, r7, r1
 8003906:	0592      	lsls	r2, r2, #22
 8003908:	0d92      	lsrs	r2, r2, #22
 800390a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	187b      	adds	r3, r7, r1
 8003912:	881b      	ldrh	r3, [r3, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d307      	bcc.n	8003928 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	187b      	adds	r3, r7, r1
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	1ad2      	subs	r2, r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	619a      	str	r2, [r3, #24]
 8003926:	e002      	b.n	800392e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d000      	beq.n	8003938 <HAL_PCD_EP_DB_Transmit+0x404>
 8003936:	e0c0      	b.n	8003aba <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	785b      	ldrb	r3, [r3, #1]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d125      	bne.n	800398c <HAL_PCD_EP_DB_Transmit+0x458>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2250      	movs	r2, #80	; 0x50
 800394c:	5a9b      	ldrh	r3, [r3, r2]
 800394e:	b29b      	uxth	r3, r3
 8003950:	001a      	movs	r2, r3
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	189b      	adds	r3, r3, r2
 8003956:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	00da      	lsls	r2, r3, #3
 800395e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003960:	18d3      	adds	r3, r2, r3
 8003962:	4ab1      	ldr	r2, [pc, #708]	; (8003c28 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003964:	4694      	mov	ip, r2
 8003966:	4463      	add	r3, ip
 8003968:	66bb      	str	r3, [r7, #104]	; 0x68
 800396a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396c:	881b      	ldrh	r3, [r3, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	4aae      	ldr	r2, [pc, #696]	; (8003c2c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003972:	4013      	ands	r3, r2
 8003974:	b29a      	uxth	r2, r3
 8003976:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800397c:	881b      	ldrh	r3, [r3, #0]
 800397e:	b29b      	uxth	r3, r3
 8003980:	4aab      	ldr	r2, [pc, #684]	; (8003c30 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003982:	4313      	orrs	r3, r2
 8003984:	b29a      	uxth	r2, r3
 8003986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003988:	801a      	strh	r2, [r3, #0]
 800398a:	e01b      	b.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x490>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	785b      	ldrb	r3, [r3, #1]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d117      	bne.n	80039c4 <HAL_PCD_EP_DB_Transmit+0x490>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	677b      	str	r3, [r7, #116]	; 0x74
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2250      	movs	r2, #80	; 0x50
 80039a0:	5a9b      	ldrh	r3, [r3, r2]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	001a      	movs	r2, r3
 80039a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a8:	189b      	adds	r3, r3, r2
 80039aa:	677b      	str	r3, [r7, #116]	; 0x74
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	00da      	lsls	r2, r3, #3
 80039b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039b4:	18d3      	adds	r3, r2, r3
 80039b6:	4a9c      	ldr	r2, [pc, #624]	; (8003c28 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80039b8:	4694      	mov	ip, r2
 80039ba:	4463      	add	r3, ip
 80039bc:	673b      	str	r3, [r7, #112]	; 0x70
 80039be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039c0:	2200      	movs	r2, #0
 80039c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	785b      	ldrb	r3, [r3, #1]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d130      	bne.n	8003a34 <HAL_PCD_EP_DB_Transmit+0x500>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2180      	movs	r1, #128	; 0x80
 80039d8:	187a      	adds	r2, r7, r1
 80039da:	6013      	str	r3, [r2, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2250      	movs	r2, #80	; 0x50
 80039e2:	5a9b      	ldrh	r3, [r3, r2]
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	001a      	movs	r2, r3
 80039e8:	187b      	adds	r3, r7, r1
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	189b      	adds	r3, r3, r2
 80039ee:	187a      	adds	r2, r7, r1
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	00da      	lsls	r2, r3, #3
 80039f8:	187b      	adds	r3, r7, r1
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	4a89      	ldr	r2, [pc, #548]	; (8003c24 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a00:	4694      	mov	ip, r2
 8003a02:	4463      	add	r3, ip
 8003a04:	2184      	movs	r1, #132	; 0x84
 8003a06:	187a      	adds	r2, r7, r1
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	187b      	adds	r3, r7, r1
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4a86      	ldr	r2, [pc, #536]	; (8003c2c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	187b      	adds	r3, r7, r1
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	801a      	strh	r2, [r3, #0]
 8003a1e:	187b      	adds	r3, r7, r1
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	4a82      	ldr	r2, [pc, #520]	; (8003c30 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	187b      	adds	r3, r7, r1
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e018      	b.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x532>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	785b      	ldrb	r3, [r3, #1]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d114      	bne.n	8003a66 <HAL_PCD_EP_DB_Transmit+0x532>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2250      	movs	r2, #80	; 0x50
 8003a42:	5a9b      	ldrh	r3, [r3, r2]
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	001a      	movs	r2, r3
 8003a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00da      	lsls	r2, r3, #3
 8003a54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a56:	18d3      	adds	r3, r2, r3
 8003a58:	4a72      	ldr	r2, [pc, #456]	; (8003c24 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a5a:	4694      	mov	ip, r2
 8003a5c:	4463      	add	r3, ip
 8003a5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a62:	2200      	movs	r2, #0
 8003a64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f005 fc64 	bl	800933c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a74:	1dbb      	adds	r3, r7, #6
 8003a76:	881a      	ldrh	r2, [r3, #0]
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	01db      	lsls	r3, r3, #7
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d000      	beq.n	8003a82 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a80:	e100      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	001a      	movs	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	18d3      	adds	r3, r2, r3
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	2046      	movs	r0, #70	; 0x46
 8003a96:	183b      	adds	r3, r7, r0
 8003a98:	4966      	ldr	r1, [pc, #408]	; (8003c34 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	801a      	strh	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	18d3      	adds	r3, r2, r3
 8003aac:	183a      	adds	r2, r7, r0
 8003aae:	8812      	ldrh	r2, [r2, #0]
 8003ab0:	4961      	ldr	r1, [pc, #388]	; (8003c38 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	b292      	uxth	r2, r2
 8003ab6:	801a      	strh	r2, [r3, #0]
 8003ab8:	e0e4      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003aba:	1dbb      	adds	r3, r7, #6
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	01db      	lsls	r3, r3, #7
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d11a      	bne.n	8003afc <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	001a      	movs	r2, r3
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	18d3      	adds	r3, r2, r3
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	204c      	movs	r0, #76	; 0x4c
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	4955      	ldr	r1, [pc, #340]	; (8003c34 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003ade:	400a      	ands	r2, r1
 8003ae0:	801a      	strh	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	001a      	movs	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	18d3      	adds	r3, r2, r3
 8003af0:	183a      	adds	r2, r7, r0
 8003af2:	8812      	ldrh	r2, [r2, #0]
 8003af4:	4950      	ldr	r1, [pc, #320]	; (8003c38 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003af6:	430a      	orrs	r2, r1
 8003af8:	b292      	uxth	r2, r2
 8003afa:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	2224      	movs	r2, #36	; 0x24
 8003b00:	5c9b      	ldrb	r3, [r3, r2]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d000      	beq.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003b06:	e0bd      	b.n	8003c84 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	214e      	movs	r1, #78	; 0x4e
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	18d2      	adds	r2, r2, r3
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	18d2      	adds	r2, r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	6a1a      	ldr	r2, [r3, #32]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d309      	bcc.n	8003b46 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6a1a      	ldr	r2, [r3, #32]
 8003b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3e:	1ad2      	subs	r2, r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	621a      	str	r2, [r3, #32]
 8003b44:	e016      	b.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d108      	bne.n	8003b60 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003b4e:	234e      	movs	r3, #78	; 0x4e
 8003b50:	18fb      	adds	r3, r7, r3
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2224      	movs	r2, #36	; 0x24
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]
 8003b5e:	e009      	b.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2224      	movs	r2, #36	; 0x24
 8003b70:	2100      	movs	r1, #0
 8003b72:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	667b      	str	r3, [r7, #100]	; 0x64
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	785b      	ldrb	r3, [r3, #1]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d15c      	bne.n	8003c3c <HAL_PCD_EP_DB_Transmit+0x708>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2250      	movs	r2, #80	; 0x50
 8003b8e:	5a9b      	ldrh	r3, [r3, r2]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	001a      	movs	r2, r3
 8003b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	00da      	lsls	r2, r3, #3
 8003ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ba2:	18d3      	adds	r3, r2, r3
 8003ba4:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003ba6:	4694      	mov	ip, r2
 8003ba8:	4463      	add	r3, ip
 8003baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d110      	bne.n	8003bd4 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8003bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb4:	881b      	ldrh	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc0:	801a      	strh	r2, [r3, #0]
 8003bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc4:	881b      	ldrh	r3, [r3, #0]
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	4a19      	ldr	r2, [pc, #100]	; (8003c30 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bd0:	801a      	strh	r2, [r3, #0]
 8003bd2:	e04d      	b.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003bd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bd8:	d810      	bhi.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003bda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bdc:	085b      	lsrs	r3, r3, #1
 8003bde:	657b      	str	r3, [r7, #84]	; 0x54
 8003be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be2:	2201      	movs	r2, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d002      	beq.n	8003bee <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bea:	3301      	adds	r3, #1
 8003bec:	657b      	str	r3, [r7, #84]	; 0x54
 8003bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	029b      	lsls	r3, r3, #10
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf8:	801a      	strh	r2, [r3, #0]
 8003bfa:	e039      	b.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	657b      	str	r3, [r7, #84]	; 0x54
 8003c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c04:	221f      	movs	r2, #31
 8003c06:	4013      	ands	r3, r2
 8003c08:	d102      	bne.n	8003c10 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8003c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	029b      	lsls	r3, r3, #10
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c20:	801a      	strh	r2, [r3, #0]
 8003c22:	e025      	b.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c24:	00000406 	.word	0x00000406
 8003c28:	00000402 	.word	0x00000402
 8003c2c:	ffff83ff 	.word	0xffff83ff
 8003c30:	ffff8000 	.word	0xffff8000
 8003c34:	ffff8f8f 	.word	0xffff8f8f
 8003c38:	ffffc080 	.word	0xffffc080
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	785b      	ldrb	r3, [r3, #1]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d115      	bne.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2250      	movs	r2, #80	; 0x50
 8003c4a:	5a9b      	ldrh	r3, [r3, r2]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	001a      	movs	r2, r3
 8003c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	667b      	str	r3, [r7, #100]	; 0x64
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	00da      	lsls	r2, r3, #3
 8003c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5e:	18d3      	adds	r3, r2, r3
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003c62:	4694      	mov	ip, r2
 8003c64:	4463      	add	r3, ip
 8003c66:	663b      	str	r3, [r7, #96]	; 0x60
 8003c68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c6e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6959      	ldr	r1, [r3, #20]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	895a      	ldrh	r2, [r3, #10]
 8003c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f003 fc78 	bl	8007574 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	001a      	movs	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	18d3      	adds	r3, r2, r3
 8003c92:	881b      	ldrh	r3, [r3, #0]
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	2010      	movs	r0, #16
 8003c98:	183b      	adds	r3, r7, r0
 8003c9a:	4911      	ldr	r1, [pc, #68]	; (8003ce0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003c9c:	400a      	ands	r2, r1
 8003c9e:	801a      	strh	r2, [r3, #0]
 8003ca0:	183b      	adds	r3, r7, r0
 8003ca2:	183a      	adds	r2, r7, r0
 8003ca4:	8812      	ldrh	r2, [r2, #0]
 8003ca6:	2110      	movs	r1, #16
 8003ca8:	404a      	eors	r2, r1
 8003caa:	801a      	strh	r2, [r3, #0]
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	183a      	adds	r2, r7, r0
 8003cb0:	8812      	ldrh	r2, [r2, #0]
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	404a      	eors	r2, r1
 8003cb6:	801a      	strh	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	001a      	movs	r2, r3
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	18d3      	adds	r3, r2, r3
 8003cc6:	183a      	adds	r2, r7, r0
 8003cc8:	8812      	ldrh	r2, [r2, #0]
 8003cca:	4906      	ldr	r1, [pc, #24]	; (8003ce4 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b022      	add	sp, #136	; 0x88
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	00000406 	.word	0x00000406
 8003ce0:	ffff8fbf 	.word	0xffff8fbf
 8003ce4:	ffff8080 	.word	0xffff8080

08003ce8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ce8:	b590      	push	{r4, r7, lr}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	0008      	movs	r0, r1
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	240a      	movs	r4, #10
 8003cf8:	193b      	adds	r3, r7, r4
 8003cfa:	1c02      	adds	r2, r0, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	2308      	movs	r3, #8
 8003d00:	18fb      	adds	r3, r7, r3
 8003d02:	1c0a      	adds	r2, r1, #0
 8003d04:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003d06:	0021      	movs	r1, r4
 8003d08:	187b      	adds	r3, r7, r1
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	4013      	ands	r3, r2
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d16:	187b      	adds	r3, r7, r1
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	0013      	movs	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	189b      	adds	r3, r3, r2
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	18d3      	adds	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e00b      	b.n	8003d48 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d30:	230a      	movs	r3, #10
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	881a      	ldrh	r2, [r3, #0]
 8003d36:	0013      	movs	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	189b      	adds	r3, r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	3369      	adds	r3, #105	; 0x69
 8003d40:	33ff      	adds	r3, #255	; 0xff
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	18d3      	adds	r3, r2, r3
 8003d46:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003d48:	2308      	movs	r3, #8
 8003d4a:	18fb      	adds	r3, r7, r3
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2200      	movs	r2, #0
 8003d56:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	80da      	strh	r2, [r3, #6]
 8003d60:	e00b      	b.n	8003d7a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2201      	movs	r2, #1
 8003d66:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	b007      	add	sp, #28
 8003d82:	bd90      	pop	{r4, r7, pc}

08003d84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	23ba      	movs	r3, #186	; 0xba
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	2101      	movs	r1, #1
 8003d9a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	23b8      	movs	r3, #184	; 0xb8
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	2100      	movs	r1, #0
 8003da4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2254      	movs	r2, #84	; 0x54
 8003daa:	5a9b      	ldrh	r3, [r3, r2]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	2201      	movs	r2, #1
 8003db0:	4313      	orrs	r3, r2
 8003db2:	b299      	uxth	r1, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2254      	movs	r2, #84	; 0x54
 8003db8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2254      	movs	r2, #84	; 0x54
 8003dbe:	5a9b      	ldrh	r3, [r3, r2]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2254      	movs	r2, #84	; 0x54
 8003dcc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b004      	add	sp, #16
 8003dd6:	bd80      	pop	{r7, pc}

08003dd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b082      	sub	sp, #8
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	000a      	movs	r2, r1
 8003de2:	1cfb      	adds	r3, r7, #3
 8003de4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b002      	add	sp, #8
 8003dec:	bd80      	pop	{r7, pc}
	...

08003df0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b08a      	sub	sp, #40	; 0x28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f000 fbbf 	bl	8004582 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e04:	4bc9      	ldr	r3, [pc, #804]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	220c      	movs	r2, #12
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e0e:	4bc7      	ldr	r3, [pc, #796]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e10:	68da      	ldr	r2, [r3, #12]
 8003e12:	2380      	movs	r3, #128	; 0x80
 8003e14:	025b      	lsls	r3, r3, #9
 8003e16:	4013      	ands	r3, r2
 8003e18:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	4013      	ands	r3, r2
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x36>
 8003e24:	e07e      	b.n	8003f24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d007      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b0c      	cmp	r3, #12
 8003e30:	d112      	bne.n	8003e58 <HAL_RCC_OscConfig+0x68>
 8003e32:	69ba      	ldr	r2, [r7, #24]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	025b      	lsls	r3, r3, #9
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e3c:	4bbb      	ldr	r3, [pc, #748]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	2380      	movs	r3, #128	; 0x80
 8003e42:	029b      	lsls	r3, r3, #10
 8003e44:	4013      	ands	r3, r2
 8003e46:	d100      	bne.n	8003e4a <HAL_RCC_OscConfig+0x5a>
 8003e48:	e06b      	b.n	8003f22 <HAL_RCC_OscConfig+0x132>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d167      	bne.n	8003f22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f000 fb95 	bl	8004582 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	025b      	lsls	r3, r3, #9
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_OscConfig+0x84>
 8003e64:	4bb1      	ldr	r3, [pc, #708]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4bb0      	ldr	r3, [pc, #704]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	0249      	lsls	r1, r1, #9
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e027      	b.n	8003ec4 <HAL_RCC_OscConfig+0xd4>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	23a0      	movs	r3, #160	; 0xa0
 8003e7a:	02db      	lsls	r3, r3, #11
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d10e      	bne.n	8003e9e <HAL_RCC_OscConfig+0xae>
 8003e80:	4baa      	ldr	r3, [pc, #680]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4ba9      	ldr	r3, [pc, #676]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e86:	2180      	movs	r1, #128	; 0x80
 8003e88:	02c9      	lsls	r1, r1, #11
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	4ba7      	ldr	r3, [pc, #668]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	4ba6      	ldr	r3, [pc, #664]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	0249      	lsls	r1, r1, #9
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	e012      	b.n	8003ec4 <HAL_RCC_OscConfig+0xd4>
 8003e9e:	4ba3      	ldr	r3, [pc, #652]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4ba2      	ldr	r3, [pc, #648]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003ea4:	49a2      	ldr	r1, [pc, #648]	; (8004130 <HAL_RCC_OscConfig+0x340>)
 8003ea6:	400a      	ands	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	4ba0      	ldr	r3, [pc, #640]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	2380      	movs	r3, #128	; 0x80
 8003eb0:	025b      	lsls	r3, r3, #9
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4b9c      	ldr	r3, [pc, #624]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b9b      	ldr	r3, [pc, #620]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003ebe:	499d      	ldr	r1, [pc, #628]	; (8004134 <HAL_RCC_OscConfig+0x344>)
 8003ec0:	400a      	ands	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d015      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7fd f948 	bl	8001160 <HAL_GetTick>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003ed4:	e009      	b.n	8003eea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed6:	f7fd f943 	bl	8001160 <HAL_GetTick>
 8003eda:	0002      	movs	r2, r0
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b64      	cmp	r3, #100	; 0x64
 8003ee2:	d902      	bls.n	8003eea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	f000 fb4c 	bl	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003eea:	4b90      	ldr	r3, [pc, #576]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	2380      	movs	r3, #128	; 0x80
 8003ef0:	029b      	lsls	r3, r3, #10
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d0ef      	beq.n	8003ed6 <HAL_RCC_OscConfig+0xe6>
 8003ef6:	e015      	b.n	8003f24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f932 	bl	8001160 <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f02:	f7fd f92d 	bl	8001160 <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b64      	cmp	r3, #100	; 0x64
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e336      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003f14:	4b85      	ldr	r3, [pc, #532]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	029b      	lsls	r3, r3, #10
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x112>
 8003f20:	e000      	b.n	8003f24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d100      	bne.n	8003f30 <HAL_RCC_OscConfig+0x140>
 8003f2e:	e099      	b.n	8004064 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	2220      	movs	r2, #32
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003f3e:	4b7b      	ldr	r3, [pc, #492]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b7a      	ldr	r3, [pc, #488]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f44:	2120      	movs	r1, #32
 8003f46:	430a      	orrs	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	4393      	bics	r3, r2
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b04      	cmp	r3, #4
 8003f56:	d005      	beq.n	8003f64 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	2b0c      	cmp	r3, #12
 8003f5c:	d13e      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1ec>
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d13b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f64:	4b71      	ldr	r3, [pc, #452]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <HAL_RCC_OscConfig+0x188>
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e304      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f78:	4b6c      	ldr	r3, [pc, #432]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	4a6e      	ldr	r2, [pc, #440]	; (8004138 <HAL_RCC_OscConfig+0x348>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	021a      	lsls	r2, r3, #8
 8003f88:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f8e:	4b67      	ldr	r3, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2209      	movs	r2, #9
 8003f94:	4393      	bics	r3, r2
 8003f96:	0019      	movs	r1, r3
 8003f98:	4b64      	ldr	r3, [pc, #400]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fa0:	f000 fc42 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 8003fa4:	0001      	movs	r1, r0
 8003fa6:	4b61      	ldr	r3, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	220f      	movs	r2, #15
 8003fae:	4013      	ands	r3, r2
 8003fb0:	4a62      	ldr	r2, [pc, #392]	; (800413c <HAL_RCC_OscConfig+0x34c>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	000a      	movs	r2, r1
 8003fb6:	40da      	lsrs	r2, r3
 8003fb8:	4b61      	ldr	r3, [pc, #388]	; (8004140 <HAL_RCC_OscConfig+0x350>)
 8003fba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003fbc:	4b61      	ldr	r3, [pc, #388]	; (8004144 <HAL_RCC_OscConfig+0x354>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2513      	movs	r5, #19
 8003fc2:	197c      	adds	r4, r7, r5
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7fd f885 	bl	80010d4 <HAL_InitTick>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003fce:	197b      	adds	r3, r7, r5
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d046      	beq.n	8004064 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003fd6:	197b      	adds	r3, r7, r5
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	e2d2      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d027      	beq.n	8004032 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003fe2:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2209      	movs	r2, #9
 8003fe8:	4393      	bics	r3, r2
 8003fea:	0019      	movs	r1, r3
 8003fec:	4b4f      	ldr	r3, [pc, #316]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8003fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fd f8b4 	bl	8001160 <HAL_GetTick>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ffe:	f7fd f8af 	bl	8001160 <HAL_GetTick>
 8004002:	0002      	movs	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e2b8      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004010:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2204      	movs	r2, #4
 8004016:	4013      	ands	r3, r2
 8004018:	d0f1      	beq.n	8003ffe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800401a:	4b44      	ldr	r3, [pc, #272]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	4a46      	ldr	r2, [pc, #280]	; (8004138 <HAL_RCC_OscConfig+0x348>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	021a      	lsls	r2, r3, #8
 800402a:	4b40      	ldr	r3, [pc, #256]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
 8004030:	e018      	b.n	8004064 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004032:	4b3e      	ldr	r3, [pc, #248]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004038:	2101      	movs	r1, #1
 800403a:	438a      	bics	r2, r1
 800403c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403e:	f7fd f88f 	bl	8001160 <HAL_GetTick>
 8004042:	0003      	movs	r3, r0
 8004044:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004048:	f7fd f88a 	bl	8001160 <HAL_GetTick>
 800404c:	0002      	movs	r2, r0
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e293      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800405a:	4b34      	ldr	r3, [pc, #208]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2204      	movs	r2, #4
 8004060:	4013      	ands	r3, r2
 8004062:	d1f1      	bne.n	8004048 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2210      	movs	r2, #16
 800406a:	4013      	ands	r3, r2
 800406c:	d100      	bne.n	8004070 <HAL_RCC_OscConfig+0x280>
 800406e:	e0a2      	b.n	80041b6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d140      	bne.n	80040f8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d005      	beq.n	800408e <HAL_RCC_OscConfig+0x29e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d101      	bne.n	800408e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e279      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408e:	4b27      	ldr	r3, [pc, #156]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <HAL_RCC_OscConfig+0x358>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800409c:	4b23      	ldr	r3, [pc, #140]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a2:	4b22      	ldr	r3, [pc, #136]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	021b      	lsls	r3, r3, #8
 80040a8:	0a19      	lsrs	r1, r3, #8
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	061a      	lsls	r2, r3, #24
 80040b0:	4b1e      	ldr	r3, [pc, #120]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	0b5b      	lsrs	r3, r3, #13
 80040bc:	3301      	adds	r3, #1
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	0212      	lsls	r2, r2, #8
 80040c2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	210f      	movs	r1, #15
 80040cc:	400b      	ands	r3, r1
 80040ce:	491b      	ldr	r1, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x34c>)
 80040d0:	5ccb      	ldrb	r3, [r1, r3]
 80040d2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80040d4:	4b1a      	ldr	r3, [pc, #104]	; (8004140 <HAL_RCC_OscConfig+0x350>)
 80040d6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80040d8:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <HAL_RCC_OscConfig+0x354>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2513      	movs	r5, #19
 80040de:	197c      	adds	r4, r7, r5
 80040e0:	0018      	movs	r0, r3
 80040e2:	f7fc fff7 	bl	80010d4 <HAL_InitTick>
 80040e6:	0003      	movs	r3, r0
 80040e8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80040ea:	197b      	adds	r3, r7, r5
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d061      	beq.n	80041b6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	e244      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	69db      	ldr	r3, [r3, #28]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d040      	beq.n	8004182 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_OscConfig+0x33c>)
 8004106:	2180      	movs	r1, #128	; 0x80
 8004108:	0049      	lsls	r1, r1, #1
 800410a:	430a      	orrs	r2, r1
 800410c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800410e:	f7fd f827 	bl	8001160 <HAL_GetTick>
 8004112:	0003      	movs	r3, r0
 8004114:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004116:	e019      	b.n	800414c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004118:	f7fd f822 	bl	8001160 <HAL_GetTick>
 800411c:	0002      	movs	r2, r0
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d912      	bls.n	800414c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e22b      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	40021000 	.word	0x40021000
 8004130:	fffeffff 	.word	0xfffeffff
 8004134:	fffbffff 	.word	0xfffbffff
 8004138:	ffffe0ff 	.word	0xffffe0ff
 800413c:	08009b80 	.word	0x08009b80
 8004140:	20000000 	.word	0x20000000
 8004144:	20000004 	.word	0x20000004
 8004148:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800414c:	4bca      	ldr	r3, [pc, #808]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	4013      	ands	r3, r2
 8004156:	d0df      	beq.n	8004118 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004158:	4bc7      	ldr	r3, [pc, #796]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4ac7      	ldr	r2, [pc, #796]	; (800447c <HAL_RCC_OscConfig+0x68c>)
 800415e:	4013      	ands	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004166:	4bc4      	ldr	r3, [pc, #784]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004168:	430a      	orrs	r2, r1
 800416a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416c:	4bc2      	ldr	r3, [pc, #776]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	021b      	lsls	r3, r3, #8
 8004172:	0a19      	lsrs	r1, r3, #8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	061a      	lsls	r2, r3, #24
 800417a:	4bbf      	ldr	r3, [pc, #764]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	e019      	b.n	80041b6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004182:	4bbd      	ldr	r3, [pc, #756]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4bbc      	ldr	r3, [pc, #752]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004188:	49bd      	ldr	r1, [pc, #756]	; (8004480 <HAL_RCC_OscConfig+0x690>)
 800418a:	400a      	ands	r2, r1
 800418c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800418e:	f7fc ffe7 	bl	8001160 <HAL_GetTick>
 8004192:	0003      	movs	r3, r0
 8004194:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004198:	f7fc ffe2 	bl	8001160 <HAL_GetTick>
 800419c:	0002      	movs	r2, r0
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1eb      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80041aa:	4bb3      	ldr	r3, [pc, #716]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d1f0      	bne.n	8004198 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2208      	movs	r2, #8
 80041bc:	4013      	ands	r3, r2
 80041be:	d036      	beq.n	800422e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d019      	beq.n	80041fc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c8:	4bab      	ldr	r3, [pc, #684]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80041ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041cc:	4baa      	ldr	r3, [pc, #680]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80041ce:	2101      	movs	r1, #1
 80041d0:	430a      	orrs	r2, r1
 80041d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041d4:	f7fc ffc4 	bl	8001160 <HAL_GetTick>
 80041d8:	0003      	movs	r3, r0
 80041da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041de:	f7fc ffbf 	bl	8001160 <HAL_GetTick>
 80041e2:	0002      	movs	r2, r0
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1c8      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041f0:	4ba1      	ldr	r3, [pc, #644]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	2202      	movs	r2, #2
 80041f6:	4013      	ands	r3, r2
 80041f8:	d0f1      	beq.n	80041de <HAL_RCC_OscConfig+0x3ee>
 80041fa:	e018      	b.n	800422e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041fc:	4b9e      	ldr	r3, [pc, #632]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80041fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004200:	4b9d      	ldr	r3, [pc, #628]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004202:	2101      	movs	r1, #1
 8004204:	438a      	bics	r2, r1
 8004206:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004208:	f7fc ffaa 	bl	8001160 <HAL_GetTick>
 800420c:	0003      	movs	r3, r0
 800420e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004212:	f7fc ffa5 	bl	8001160 <HAL_GetTick>
 8004216:	0002      	movs	r2, r0
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1ae      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004224:	4b94      	ldr	r3, [pc, #592]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	2202      	movs	r2, #2
 800422a:	4013      	ands	r3, r2
 800422c:	d1f1      	bne.n	8004212 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2204      	movs	r2, #4
 8004234:	4013      	ands	r3, r2
 8004236:	d100      	bne.n	800423a <HAL_RCC_OscConfig+0x44a>
 8004238:	e0ae      	b.n	8004398 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423a:	2023      	movs	r0, #35	; 0x23
 800423c:	183b      	adds	r3, r7, r0
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004242:	4b8d      	ldr	r3, [pc, #564]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	2380      	movs	r3, #128	; 0x80
 8004248:	055b      	lsls	r3, r3, #21
 800424a:	4013      	ands	r3, r2
 800424c:	d109      	bne.n	8004262 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424e:	4b8a      	ldr	r3, [pc, #552]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004252:	4b89      	ldr	r3, [pc, #548]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	0549      	lsls	r1, r1, #21
 8004258:	430a      	orrs	r2, r1
 800425a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800425c:	183b      	adds	r3, r7, r0
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004262:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x694>)
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	2380      	movs	r3, #128	; 0x80
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4013      	ands	r3, r2
 800426c:	d11a      	bne.n	80042a4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800426e:	4b85      	ldr	r3, [pc, #532]	; (8004484 <HAL_RCC_OscConfig+0x694>)
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b84      	ldr	r3, [pc, #528]	; (8004484 <HAL_RCC_OscConfig+0x694>)
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	0049      	lsls	r1, r1, #1
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427c:	f7fc ff70 	bl	8001160 <HAL_GetTick>
 8004280:	0003      	movs	r3, r0
 8004282:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fc ff6b 	bl	8001160 <HAL_GetTick>
 800428a:	0002      	movs	r2, r0
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b64      	cmp	r3, #100	; 0x64
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e174      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x694>)
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	005b      	lsls	r3, r3, #1
 80042a0:	4013      	ands	r3, r2
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_OscConfig+0x4d0>
 80042b0:	4b71      	ldr	r3, [pc, #452]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b4:	4b70      	ldr	r3, [pc, #448]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	0049      	lsls	r1, r1, #1
 80042ba:	430a      	orrs	r2, r1
 80042bc:	651a      	str	r2, [r3, #80]	; 0x50
 80042be:	e031      	b.n	8004324 <HAL_RCC_OscConfig+0x534>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x4f2>
 80042c8:	4b6b      	ldr	r3, [pc, #428]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042cc:	4b6a      	ldr	r3, [pc, #424]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042ce:	496c      	ldr	r1, [pc, #432]	; (8004480 <HAL_RCC_OscConfig+0x690>)
 80042d0:	400a      	ands	r2, r1
 80042d2:	651a      	str	r2, [r3, #80]	; 0x50
 80042d4:	4b68      	ldr	r3, [pc, #416]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042d8:	4b67      	ldr	r3, [pc, #412]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042da:	496b      	ldr	r1, [pc, #428]	; (8004488 <HAL_RCC_OscConfig+0x698>)
 80042dc:	400a      	ands	r2, r1
 80042de:	651a      	str	r2, [r3, #80]	; 0x50
 80042e0:	e020      	b.n	8004324 <HAL_RCC_OscConfig+0x534>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	23a0      	movs	r3, #160	; 0xa0
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d10e      	bne.n	800430c <HAL_RCC_OscConfig+0x51c>
 80042ee:	4b62      	ldr	r3, [pc, #392]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042f2:	4b61      	ldr	r3, [pc, #388]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042f4:	2180      	movs	r1, #128	; 0x80
 80042f6:	00c9      	lsls	r1, r1, #3
 80042f8:	430a      	orrs	r2, r1
 80042fa:	651a      	str	r2, [r3, #80]	; 0x50
 80042fc:	4b5e      	ldr	r3, [pc, #376]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80042fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004300:	4b5d      	ldr	r3, [pc, #372]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004302:	2180      	movs	r1, #128	; 0x80
 8004304:	0049      	lsls	r1, r1, #1
 8004306:	430a      	orrs	r2, r1
 8004308:	651a      	str	r2, [r3, #80]	; 0x50
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0x534>
 800430c:	4b5a      	ldr	r3, [pc, #360]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800430e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004310:	4b59      	ldr	r3, [pc, #356]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004312:	495b      	ldr	r1, [pc, #364]	; (8004480 <HAL_RCC_OscConfig+0x690>)
 8004314:	400a      	ands	r2, r1
 8004316:	651a      	str	r2, [r3, #80]	; 0x50
 8004318:	4b57      	ldr	r3, [pc, #348]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800431a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800431c:	4b56      	ldr	r3, [pc, #344]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800431e:	495a      	ldr	r1, [pc, #360]	; (8004488 <HAL_RCC_OscConfig+0x698>)
 8004320:	400a      	ands	r2, r1
 8004322:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800432c:	f7fc ff18 	bl	8001160 <HAL_GetTick>
 8004330:	0003      	movs	r3, r0
 8004332:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004334:	e009      	b.n	800434a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fc ff13 	bl	8001160 <HAL_GetTick>
 800433a:	0002      	movs	r2, r0
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	4a52      	ldr	r2, [pc, #328]	; (800448c <HAL_RCC_OscConfig+0x69c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e11b      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800434a:	4b4b      	ldr	r3, [pc, #300]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800434c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4013      	ands	r3, r2
 8004354:	d0ef      	beq.n	8004336 <HAL_RCC_OscConfig+0x546>
 8004356:	e014      	b.n	8004382 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004358:	f7fc ff02 	bl	8001160 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004360:	e009      	b.n	8004376 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004362:	f7fc fefd 	bl	8001160 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a47      	ldr	r2, [pc, #284]	; (800448c <HAL_RCC_OscConfig+0x69c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e105      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004376:	4b40      	ldr	r3, [pc, #256]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4013      	ands	r3, r2
 8004380:	d1ef      	bne.n	8004362 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004382:	2323      	movs	r3, #35	; 0x23
 8004384:	18fb      	adds	r3, r7, r3
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d105      	bne.n	8004398 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800438c:	4b3a      	ldr	r3, [pc, #232]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800438e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004392:	493f      	ldr	r1, [pc, #252]	; (8004490 <HAL_RCC_OscConfig+0x6a0>)
 8004394:	400a      	ands	r2, r1
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2220      	movs	r2, #32
 800439e:	4013      	ands	r3, r2
 80043a0:	d049      	beq.n	8004436 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d026      	beq.n	80043f8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80043aa:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043b0:	2101      	movs	r1, #1
 80043b2:	430a      	orrs	r2, r1
 80043b4:	609a      	str	r2, [r3, #8]
 80043b6:	4b30      	ldr	r3, [pc, #192]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043ba:	4b2f      	ldr	r3, [pc, #188]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043bc:	2101      	movs	r1, #1
 80043be:	430a      	orrs	r2, r1
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34
 80043c2:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_RCC_OscConfig+0x6a4>)
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	4b33      	ldr	r3, [pc, #204]	; (8004494 <HAL_RCC_OscConfig+0x6a4>)
 80043c8:	2180      	movs	r1, #128	; 0x80
 80043ca:	0189      	lsls	r1, r1, #6
 80043cc:	430a      	orrs	r2, r1
 80043ce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fc fec6 	bl	8001160 <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043da:	f7fc fec1 	bl	8001160 <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e0ca      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043ec:	4b22      	ldr	r3, [pc, #136]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2202      	movs	r2, #2
 80043f2:	4013      	ands	r3, r2
 80043f4:	d0f1      	beq.n	80043da <HAL_RCC_OscConfig+0x5ea>
 80043f6:	e01e      	b.n	8004436 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043f8:	4b1f      	ldr	r3, [pc, #124]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 80043fe:	2101      	movs	r1, #1
 8004400:	438a      	bics	r2, r1
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCC_OscConfig+0x6a4>)
 8004406:	6a1a      	ldr	r2, [r3, #32]
 8004408:	4b22      	ldr	r3, [pc, #136]	; (8004494 <HAL_RCC_OscConfig+0x6a4>)
 800440a:	4923      	ldr	r1, [pc, #140]	; (8004498 <HAL_RCC_OscConfig+0x6a8>)
 800440c:	400a      	ands	r2, r1
 800440e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004410:	f7fc fea6 	bl	8001160 <HAL_GetTick>
 8004414:	0003      	movs	r3, r0
 8004416:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800441a:	f7fc fea1 	bl	8001160 <HAL_GetTick>
 800441e:	0002      	movs	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0aa      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800442c:	4b12      	ldr	r3, [pc, #72]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2202      	movs	r2, #2
 8004432:	4013      	ands	r3, r2
 8004434:	d1f1      	bne.n	800441a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d100      	bne.n	8004440 <HAL_RCC_OscConfig+0x650>
 800443e:	e09f      	b.n	8004580 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	2b0c      	cmp	r3, #12
 8004444:	d100      	bne.n	8004448 <HAL_RCC_OscConfig+0x658>
 8004446:	e078      	b.n	800453a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	2b02      	cmp	r3, #2
 800444e:	d159      	bne.n	8004504 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004450:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_RCC_OscConfig+0x688>)
 8004456:	4911      	ldr	r1, [pc, #68]	; (800449c <HAL_RCC_OscConfig+0x6ac>)
 8004458:	400a      	ands	r2, r1
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fc fe80 	bl	8001160 <HAL_GetTick>
 8004460:	0003      	movs	r3, r0
 8004462:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004464:	e01c      	b.n	80044a0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004466:	f7fc fe7b 	bl	8001160 <HAL_GetTick>
 800446a:	0002      	movs	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d915      	bls.n	80044a0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e084      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
 8004478:	40021000 	.word	0x40021000
 800447c:	ffff1fff 	.word	0xffff1fff
 8004480:	fffffeff 	.word	0xfffffeff
 8004484:	40007000 	.word	0x40007000
 8004488:	fffffbff 	.word	0xfffffbff
 800448c:	00001388 	.word	0x00001388
 8004490:	efffffff 	.word	0xefffffff
 8004494:	40010000 	.word	0x40010000
 8004498:	ffffdfff 	.word	0xffffdfff
 800449c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044a0:	4b3a      	ldr	r3, [pc, #232]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	2380      	movs	r3, #128	; 0x80
 80044a6:	049b      	lsls	r3, r3, #18
 80044a8:	4013      	ands	r3, r2
 80044aa:	d1dc      	bne.n	8004466 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044ac:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a37      	ldr	r2, [pc, #220]	; (8004590 <HAL_RCC_OscConfig+0x7a0>)
 80044b2:	4013      	ands	r3, r2
 80044b4:	0019      	movs	r1, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c4:	431a      	orrs	r2, r3
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 80044c8:	430a      	orrs	r2, r1
 80044ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044cc:	4b2f      	ldr	r3, [pc, #188]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	4b2e      	ldr	r3, [pc, #184]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 80044d2:	2180      	movs	r1, #128	; 0x80
 80044d4:	0449      	lsls	r1, r1, #17
 80044d6:	430a      	orrs	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044da:	f7fc fe41 	bl	8001160 <HAL_GetTick>
 80044de:	0003      	movs	r3, r0
 80044e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fc fe3c 	bl	8001160 <HAL_GetTick>
 80044e8:	0002      	movs	r2, r0
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e045      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80044f6:	4b25      	ldr	r3, [pc, #148]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	2380      	movs	r3, #128	; 0x80
 80044fc:	049b      	lsls	r3, r3, #18
 80044fe:	4013      	ands	r3, r2
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x6f4>
 8004502:	e03d      	b.n	8004580 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004504:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 800450a:	4922      	ldr	r1, [pc, #136]	; (8004594 <HAL_RCC_OscConfig+0x7a4>)
 800450c:	400a      	ands	r2, r1
 800450e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004510:	f7fc fe26 	bl	8001160 <HAL_GetTick>
 8004514:	0003      	movs	r3, r0
 8004516:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451a:	f7fc fe21 	bl	8001160 <HAL_GetTick>
 800451e:	0002      	movs	r2, r0
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e02a      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800452c:	4b17      	ldr	r3, [pc, #92]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	2380      	movs	r3, #128	; 0x80
 8004532:	049b      	lsls	r3, r3, #18
 8004534:	4013      	ands	r3, r2
 8004536:	d1f0      	bne.n	800451a <HAL_RCC_OscConfig+0x72a>
 8004538:	e022      	b.n	8004580 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e01d      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004546:	4b11      	ldr	r3, [pc, #68]	; (800458c <HAL_RCC_OscConfig+0x79c>)
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	025b      	lsls	r3, r3, #9
 8004552:	401a      	ands	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	429a      	cmp	r2, r3
 800455a:	d10f      	bne.n	800457c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	23f0      	movs	r3, #240	; 0xf0
 8004560:	039b      	lsls	r3, r3, #14
 8004562:	401a      	ands	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004568:	429a      	cmp	r2, r3
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	23c0      	movs	r3, #192	; 0xc0
 8004570:	041b      	lsls	r3, r3, #16
 8004572:	401a      	ands	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e000      	b.n	8004582 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b00a      	add	sp, #40	; 0x28
 8004588:	bdb0      	pop	{r4, r5, r7, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	40021000 	.word	0x40021000
 8004590:	ff02ffff 	.word	0xff02ffff
 8004594:	feffffff 	.word	0xfeffffff

08004598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b5b0      	push	{r4, r5, r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e128      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b96      	ldr	r3, [pc, #600]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4013      	ands	r3, r2
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d91e      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b93      	ldr	r3, [pc, #588]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2201      	movs	r2, #1
 80045c0:	4393      	bics	r3, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	4b90      	ldr	r3, [pc, #576]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	430a      	orrs	r2, r1
 80045ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045cc:	f7fc fdc8 	bl	8001160 <HAL_GetTick>
 80045d0:	0003      	movs	r3, r0
 80045d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d4:	e009      	b.n	80045ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d6:	f7fc fdc3 	bl	8001160 <HAL_GetTick>
 80045da:	0002      	movs	r2, r0
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	4a8a      	ldr	r2, [pc, #552]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e109      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ea:	4b87      	ldr	r3, [pc, #540]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2201      	movs	r2, #1
 80045f0:	4013      	ands	r3, r2
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1ee      	bne.n	80045d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2202      	movs	r2, #2
 80045fe:	4013      	ands	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004602:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	22f0      	movs	r2, #240	; 0xf0
 8004608:	4393      	bics	r3, r2
 800460a:	0019      	movs	r1, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	4b7f      	ldr	r3, [pc, #508]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 8004612:	430a      	orrs	r2, r1
 8004614:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	4013      	ands	r3, r2
 800461e:	d100      	bne.n	8004622 <HAL_RCC_ClockConfig+0x8a>
 8004620:	e089      	b.n	8004736 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2b02      	cmp	r3, #2
 8004628:	d107      	bne.n	800463a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800462a:	4b79      	ldr	r3, [pc, #484]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	029b      	lsls	r3, r3, #10
 8004632:	4013      	ands	r3, r2
 8004634:	d120      	bne.n	8004678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e0e1      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b03      	cmp	r3, #3
 8004640:	d107      	bne.n	8004652 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004642:	4b73      	ldr	r3, [pc, #460]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	049b      	lsls	r3, r3, #18
 800464a:	4013      	ands	r3, r2
 800464c:	d114      	bne.n	8004678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0d5      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d106      	bne.n	8004668 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800465a:	4b6d      	ldr	r3, [pc, #436]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2204      	movs	r2, #4
 8004660:	4013      	ands	r3, r2
 8004662:	d109      	bne.n	8004678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0ca      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004668:	4b69      	ldr	r3, [pc, #420]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	2380      	movs	r3, #128	; 0x80
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4013      	ands	r3, r2
 8004672:	d101      	bne.n	8004678 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e0c2      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004678:	4b65      	ldr	r3, [pc, #404]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2203      	movs	r2, #3
 800467e:	4393      	bics	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	4b62      	ldr	r3, [pc, #392]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 8004688:	430a      	orrs	r2, r1
 800468a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800468c:	f7fc fd68 	bl	8001160 <HAL_GetTick>
 8004690:	0003      	movs	r3, r0
 8004692:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d111      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800469c:	e009      	b.n	80046b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469e:	f7fc fd5f 	bl	8001160 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	4a58      	ldr	r2, [pc, #352]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e0a5      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80046b2:	4b57      	ldr	r3, [pc, #348]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	220c      	movs	r2, #12
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d1ef      	bne.n	800469e <HAL_RCC_ClockConfig+0x106>
 80046be:	e03a      	b.n	8004736 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b03      	cmp	r3, #3
 80046c6:	d111      	bne.n	80046ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046c8:	e009      	b.n	80046de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ca:	f7fc fd49 	bl	8001160 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	4a4d      	ldr	r2, [pc, #308]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e08f      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046de:	4b4c      	ldr	r3, [pc, #304]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	220c      	movs	r2, #12
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b0c      	cmp	r3, #12
 80046e8:	d1ef      	bne.n	80046ca <HAL_RCC_ClockConfig+0x132>
 80046ea:	e024      	b.n	8004736 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d11b      	bne.n	800472c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046f4:	e009      	b.n	800470a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046f6:	f7fc fd33 	bl	8001160 <HAL_GetTick>
 80046fa:	0002      	movs	r2, r0
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	4a42      	ldr	r2, [pc, #264]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e079      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800470a:	4b41      	ldr	r3, [pc, #260]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	220c      	movs	r2, #12
 8004710:	4013      	ands	r3, r2
 8004712:	2b04      	cmp	r3, #4
 8004714:	d1ef      	bne.n	80046f6 <HAL_RCC_ClockConfig+0x15e>
 8004716:	e00e      	b.n	8004736 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004718:	f7fc fd22 	bl	8001160 <HAL_GetTick>
 800471c:	0002      	movs	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	4a3a      	ldr	r2, [pc, #232]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e068      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800472c:	4b38      	ldr	r3, [pc, #224]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	220c      	movs	r2, #12
 8004732:	4013      	ands	r3, r2
 8004734:	d1f0      	bne.n	8004718 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004736:	4b34      	ldr	r3, [pc, #208]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2201      	movs	r2, #1
 800473c:	4013      	ands	r3, r2
 800473e:	683a      	ldr	r2, [r7, #0]
 8004740:	429a      	cmp	r2, r3
 8004742:	d21e      	bcs.n	8004782 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004744:	4b30      	ldr	r3, [pc, #192]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2201      	movs	r2, #1
 800474a:	4393      	bics	r3, r2
 800474c:	0019      	movs	r1, r3
 800474e:	4b2e      	ldr	r3, [pc, #184]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004756:	f7fc fd03 	bl	8001160 <HAL_GetTick>
 800475a:	0003      	movs	r3, r0
 800475c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	e009      	b.n	8004774 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004760:	f7fc fcfe 	bl	8001160 <HAL_GetTick>
 8004764:	0002      	movs	r2, r0
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	4a28      	ldr	r2, [pc, #160]	; (800480c <HAL_RCC_ClockConfig+0x274>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e044      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004774:	4b24      	ldr	r3, [pc, #144]	; (8004808 <HAL_RCC_ClockConfig+0x270>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2201      	movs	r2, #1
 800477a:	4013      	ands	r3, r2
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d1ee      	bne.n	8004760 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2204      	movs	r2, #4
 8004788:	4013      	ands	r3, r2
 800478a:	d009      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800478c:	4b20      	ldr	r3, [pc, #128]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_RCC_ClockConfig+0x27c>)
 8004792:	4013      	ands	r3, r2
 8004794:	0019      	movs	r1, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	4b1d      	ldr	r3, [pc, #116]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 800479c:	430a      	orrs	r2, r1
 800479e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2208      	movs	r2, #8
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047aa:	4b19      	ldr	r3, [pc, #100]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <HAL_RCC_ClockConfig+0x280>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	0019      	movs	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	00da      	lsls	r2, r3, #3
 80047ba:	4b15      	ldr	r3, [pc, #84]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 80047bc:	430a      	orrs	r2, r1
 80047be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047c0:	f000 f832 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 80047c4:	0001      	movs	r1, r0
 80047c6:	4b12      	ldr	r3, [pc, #72]	; (8004810 <HAL_RCC_ClockConfig+0x278>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	091b      	lsrs	r3, r3, #4
 80047cc:	220f      	movs	r2, #15
 80047ce:	4013      	ands	r3, r2
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <HAL_RCC_ClockConfig+0x284>)
 80047d2:	5cd3      	ldrb	r3, [r2, r3]
 80047d4:	000a      	movs	r2, r1
 80047d6:	40da      	lsrs	r2, r3
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <HAL_RCC_ClockConfig+0x288>)
 80047da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <HAL_RCC_ClockConfig+0x28c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	250b      	movs	r5, #11
 80047e2:	197c      	adds	r4, r7, r5
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fc fc75 	bl	80010d4 <HAL_InitTick>
 80047ea:	0003      	movs	r3, r0
 80047ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80047ee:	197b      	adds	r3, r7, r5
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80047f6:	197b      	adds	r3, r7, r5
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	e000      	b.n	80047fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	0018      	movs	r0, r3
 8004800:	46bd      	mov	sp, r7
 8004802:	b004      	add	sp, #16
 8004804:	bdb0      	pop	{r4, r5, r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	40022000 	.word	0x40022000
 800480c:	00001388 	.word	0x00001388
 8004810:	40021000 	.word	0x40021000
 8004814:	fffff8ff 	.word	0xfffff8ff
 8004818:	ffffc7ff 	.word	0xffffc7ff
 800481c:	08009b80 	.word	0x08009b80
 8004820:	20000000 	.word	0x20000000
 8004824:	20000004 	.word	0x20000004

08004828 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b08e      	sub	sp, #56	; 0x38
 800482c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800482e:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_GetSysClockFreq+0x138>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004836:	230c      	movs	r3, #12
 8004838:	4013      	ands	r3, r2
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d014      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x40>
 800483e:	d900      	bls.n	8004842 <HAL_RCC_GetSysClockFreq+0x1a>
 8004840:	e07b      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x112>
 8004842:	2b04      	cmp	r3, #4
 8004844:	d002      	beq.n	800484c <HAL_RCC_GetSysClockFreq+0x24>
 8004846:	2b08      	cmp	r3, #8
 8004848:	d00b      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0x3a>
 800484a:	e076      	b.n	800493a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800484c:	4b44      	ldr	r3, [pc, #272]	; (8004960 <HAL_RCC_GetSysClockFreq+0x138>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2210      	movs	r2, #16
 8004852:	4013      	ands	r3, r2
 8004854:	d002      	beq.n	800485c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004856:	4b43      	ldr	r3, [pc, #268]	; (8004964 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800485a:	e07c      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800485c:	4b42      	ldr	r3, [pc, #264]	; (8004968 <HAL_RCC_GetSysClockFreq+0x140>)
 800485e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004860:	e079      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004862:	4b42      	ldr	r3, [pc, #264]	; (800496c <HAL_RCC_GetSysClockFreq+0x144>)
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004866:	e076      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486a:	0c9a      	lsrs	r2, r3, #18
 800486c:	230f      	movs	r3, #15
 800486e:	401a      	ands	r2, r3
 8004870:	4b3f      	ldr	r3, [pc, #252]	; (8004970 <HAL_RCC_GetSysClockFreq+0x148>)
 8004872:	5c9b      	ldrb	r3, [r3, r2]
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	0d9a      	lsrs	r2, r3, #22
 800487a:	2303      	movs	r3, #3
 800487c:	4013      	ands	r3, r2
 800487e:	3301      	adds	r3, #1
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004882:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_GetSysClockFreq+0x138>)
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	025b      	lsls	r3, r3, #9
 800488a:	4013      	ands	r3, r2
 800488c:	d01a      	beq.n	80048c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	61bb      	str	r3, [r7, #24]
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	4a35      	ldr	r2, [pc, #212]	; (800496c <HAL_RCC_GetSysClockFreq+0x144>)
 8004898:	2300      	movs	r3, #0
 800489a:	69b8      	ldr	r0, [r7, #24]
 800489c:	69f9      	ldr	r1, [r7, #28]
 800489e:	f7fb fcdf 	bl	8000260 <__aeabi_lmul>
 80048a2:	0002      	movs	r2, r0
 80048a4:	000b      	movs	r3, r1
 80048a6:	0010      	movs	r0, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	613b      	str	r3, [r7, #16]
 80048ae:	2300      	movs	r3, #0
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f7fb fcb3 	bl	8000220 <__aeabi_uldivmod>
 80048ba:	0002      	movs	r2, r0
 80048bc:	000b      	movs	r3, r1
 80048be:	0013      	movs	r3, r2
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	e037      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80048c4:	4b26      	ldr	r3, [pc, #152]	; (8004960 <HAL_RCC_GetSysClockFreq+0x138>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2210      	movs	r2, #16
 80048ca:	4013      	ands	r3, r2
 80048cc:	d01a      	beq.n	8004904 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	4a23      	ldr	r2, [pc, #140]	; (8004964 <HAL_RCC_GetSysClockFreq+0x13c>)
 80048d8:	2300      	movs	r3, #0
 80048da:	68b8      	ldr	r0, [r7, #8]
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	f7fb fcbf 	bl	8000260 <__aeabi_lmul>
 80048e2:	0002      	movs	r2, r0
 80048e4:	000b      	movs	r3, r1
 80048e6:	0010      	movs	r0, r2
 80048e8:	0019      	movs	r1, r3
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	2300      	movs	r3, #0
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f7fb fc93 	bl	8000220 <__aeabi_uldivmod>
 80048fa:	0002      	movs	r2, r0
 80048fc:	000b      	movs	r3, r1
 80048fe:	0013      	movs	r3, r2
 8004900:	637b      	str	r3, [r7, #52]	; 0x34
 8004902:	e017      	b.n	8004934 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	0018      	movs	r0, r3
 8004908:	2300      	movs	r3, #0
 800490a:	0019      	movs	r1, r3
 800490c:	4a16      	ldr	r2, [pc, #88]	; (8004968 <HAL_RCC_GetSysClockFreq+0x140>)
 800490e:	2300      	movs	r3, #0
 8004910:	f7fb fca6 	bl	8000260 <__aeabi_lmul>
 8004914:	0002      	movs	r2, r0
 8004916:	000b      	movs	r3, r1
 8004918:	0010      	movs	r0, r2
 800491a:	0019      	movs	r1, r3
 800491c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491e:	001c      	movs	r4, r3
 8004920:	2300      	movs	r3, #0
 8004922:	001d      	movs	r5, r3
 8004924:	0022      	movs	r2, r4
 8004926:	002b      	movs	r3, r5
 8004928:	f7fb fc7a 	bl	8000220 <__aeabi_uldivmod>
 800492c:	0002      	movs	r2, r0
 800492e:	000b      	movs	r3, r1
 8004930:	0013      	movs	r3, r2
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004938:	e00d      	b.n	8004956 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800493a:	4b09      	ldr	r3, [pc, #36]	; (8004960 <HAL_RCC_GetSysClockFreq+0x138>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0b5b      	lsrs	r3, r3, #13
 8004940:	2207      	movs	r2, #7
 8004942:	4013      	ands	r3, r2
 8004944:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	3301      	adds	r3, #1
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	0212      	lsls	r2, r2, #8
 800494e:	409a      	lsls	r2, r3
 8004950:	0013      	movs	r3, r2
 8004952:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004954:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004958:	0018      	movs	r0, r3
 800495a:	46bd      	mov	sp, r7
 800495c:	b00e      	add	sp, #56	; 0x38
 800495e:	bdb0      	pop	{r4, r5, r7, pc}
 8004960:	40021000 	.word	0x40021000
 8004964:	003d0900 	.word	0x003d0900
 8004968:	00f42400 	.word	0x00f42400
 800496c:	007a1200 	.word	0x007a1200
 8004970:	08009b98 	.word	0x08009b98

08004974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <HAL_RCC_GetHCLKFreq+0x10>)
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	46c0      	nop			; (mov r8, r8)
 8004984:	20000000 	.word	0x20000000

08004988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800498c:	f7ff fff2 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 8004990:	0001      	movs	r1, r0
 8004992:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	2207      	movs	r2, #7
 800499a:	4013      	ands	r3, r2
 800499c:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800499e:	5cd3      	ldrb	r3, [r2, r3]
 80049a0:	40d9      	lsrs	r1, r3
 80049a2:	000b      	movs	r3, r1
}
 80049a4:	0018      	movs	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	40021000 	.word	0x40021000
 80049b0:	08009b90 	.word	0x08009b90

080049b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049b8:	f7ff ffdc 	bl	8004974 <HAL_RCC_GetHCLKFreq>
 80049bc:	0001      	movs	r1, r0
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	0adb      	lsrs	r3, r3, #11
 80049c4:	2207      	movs	r2, #7
 80049c6:	4013      	ands	r3, r2
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80049ca:	5cd3      	ldrb	r3, [r2, r3]
 80049cc:	40d9      	lsrs	r1, r3
 80049ce:	000b      	movs	r3, r1
}
 80049d0:	0018      	movs	r0, r3
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	40021000 	.word	0x40021000
 80049dc:	08009b90 	.word	0x08009b90

080049e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80049e8:	2317      	movs	r3, #23
 80049ea:	18fb      	adds	r3, r7, r3
 80049ec:	2200      	movs	r2, #0
 80049ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2220      	movs	r2, #32
 80049f6:	4013      	ands	r3, r2
 80049f8:	d106      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	2380      	movs	r3, #128	; 0x80
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	4013      	ands	r3, r2
 8004a04:	d100      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004a06:	e0d9      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a08:	4ba4      	ldr	r3, [pc, #656]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	055b      	lsls	r3, r3, #21
 8004a10:	4013      	ands	r3, r2
 8004a12:	d10a      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a14:	4ba1      	ldr	r3, [pc, #644]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a18:	4ba0      	ldr	r3, [pc, #640]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a1a:	2180      	movs	r1, #128	; 0x80
 8004a1c:	0549      	lsls	r1, r1, #21
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004a22:	2317      	movs	r3, #23
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a2a:	4b9d      	ldr	r3, [pc, #628]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	4013      	ands	r3, r2
 8004a34:	d11a      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a36:	4b9a      	ldr	r3, [pc, #616]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b99      	ldr	r3, [pc, #612]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a3c:	2180      	movs	r1, #128	; 0x80
 8004a3e:	0049      	lsls	r1, r1, #1
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a44:	f7fc fb8c 	bl	8001160 <HAL_GetTick>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4c:	e008      	b.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a4e:	f7fc fb87 	bl	8001160 <HAL_GetTick>
 8004a52:	0002      	movs	r2, r0
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	1ad3      	subs	r3, r2, r3
 8004a58:	2b64      	cmp	r3, #100	; 0x64
 8004a5a:	d901      	bls.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	e118      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a60:	4b8f      	ldr	r3, [pc, #572]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d0f0      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a6c:	4b8b      	ldr	r3, [pc, #556]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	23c0      	movs	r3, #192	; 0xc0
 8004a72:	039b      	lsls	r3, r3, #14
 8004a74:	4013      	ands	r3, r2
 8004a76:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	23c0      	movs	r3, #192	; 0xc0
 8004a7e:	039b      	lsls	r3, r3, #14
 8004a80:	4013      	ands	r3, r2
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d107      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	23c0      	movs	r3, #192	; 0xc0
 8004a8e:	039b      	lsls	r3, r3, #14
 8004a90:	4013      	ands	r3, r2
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d013      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	23c0      	movs	r3, #192	; 0xc0
 8004a9e:	029b      	lsls	r3, r3, #10
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	23c0      	movs	r3, #192	; 0xc0
 8004aa4:	029b      	lsls	r3, r3, #10
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004aaa:	4b7c      	ldr	r3, [pc, #496]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	; 0x80
 8004ab0:	029b      	lsls	r3, r3, #10
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	2380      	movs	r3, #128	; 0x80
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d101      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e0e8      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ac4:	23c0      	movs	r3, #192	; 0xc0
 8004ac6:	029b      	lsls	r3, r3, #10
 8004ac8:	4013      	ands	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d049      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	23c0      	movs	r3, #192	; 0xc0
 8004ad8:	029b      	lsls	r3, r3, #10
 8004ada:	4013      	ands	r3, r2
 8004adc:	68fa      	ldr	r2, [r7, #12]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d004      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	4013      	ands	r3, r2
 8004aea:	d10d      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	4013      	ands	r3, r2
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d034      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	2380      	movs	r3, #128	; 0x80
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	4013      	ands	r3, r2
 8004b06:	d02e      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004b08:	4b64      	ldr	r3, [pc, #400]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0c:	4a65      	ldr	r2, [pc, #404]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004b12:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b16:	4b61      	ldr	r3, [pc, #388]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	0309      	lsls	r1, r1, #12
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	4b5e      	ldr	r3, [pc, #376]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b24:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b26:	4960      	ldr	r1, [pc, #384]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004b28:	400a      	ands	r2, r1
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004b2c:	4b5b      	ldr	r3, [pc, #364]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	4013      	ands	r3, r2
 8004b3a:	d014      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fc fb10 	bl	8001160 <HAL_GetTick>
 8004b40:	0003      	movs	r3, r0
 8004b42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b44:	e009      	b.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b46:	f7fc fb0b 	bl	8001160 <HAL_GetTick>
 8004b4a:	0002      	movs	r2, r0
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	4a56      	ldr	r2, [pc, #344]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e09b      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b5a:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b5e:	2380      	movs	r3, #128	; 0x80
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d0ef      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	23c0      	movs	r3, #192	; 0xc0
 8004b6c:	029b      	lsls	r3, r3, #10
 8004b6e:	401a      	ands	r2, r3
 8004b70:	23c0      	movs	r3, #192	; 0xc0
 8004b72:	029b      	lsls	r3, r3, #10
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d10c      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004b78:	4b48      	ldr	r3, [pc, #288]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a4c      	ldr	r2, [pc, #304]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	0019      	movs	r1, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	23c0      	movs	r3, #192	; 0xc0
 8004b88:	039b      	lsls	r3, r3, #14
 8004b8a:	401a      	ands	r2, r3
 8004b8c:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	4b42      	ldr	r3, [pc, #264]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	23c0      	movs	r3, #192	; 0xc0
 8004b9c:	029b      	lsls	r3, r3, #10
 8004b9e:	401a      	ands	r2, r3
 8004ba0:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ba6:	2317      	movs	r3, #23
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d105      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb0:	4b3a      	ldr	r3, [pc, #232]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb4:	4b39      	ldr	r3, [pc, #228]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bb6:	493f      	ldr	r1, [pc, #252]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004bb8:	400a      	ands	r2, r1
 8004bba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc6:	4b35      	ldr	r3, [pc, #212]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bca:	2203      	movs	r2, #3
 8004bcc:	4393      	bics	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2202      	movs	r2, #2
 8004be0:	4013      	ands	r3, r2
 8004be2:	d009      	beq.n	8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b2d      	ldr	r3, [pc, #180]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be8:	220c      	movs	r2, #12
 8004bea:	4393      	bics	r3, r2
 8004bec:	0019      	movs	r1, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	4b2a      	ldr	r3, [pc, #168]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d009      	beq.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c02:	4b26      	ldr	r3, [pc, #152]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	4a2c      	ldr	r2, [pc, #176]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	4b22      	ldr	r3, [pc, #136]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c12:	430a      	orrs	r2, r1
 8004c14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d009      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004c26:	4013      	ands	r3, r2
 8004c28:	0019      	movs	r1, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c30:	430a      	orrs	r2, r1
 8004c32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	d009      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c40:	4b16      	ldr	r3, [pc, #88]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	0019      	movs	r1, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69da      	ldr	r2, [r3, #28]
 8004c4e:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c50:	430a      	orrs	r2, r1
 8004c52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	2240      	movs	r2, #64	; 0x40
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c62:	4a17      	ldr	r2, [pc, #92]	; (8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	0019      	movs	r1, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c7c:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c80:	4a10      	ldr	r2, [pc, #64]	; (8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	0019      	movs	r1, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1a      	ldr	r2, [r3, #32]
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	0018      	movs	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b006      	add	sp, #24
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40007000 	.word	0x40007000
 8004ca4:	fffcffff 	.word	0xfffcffff
 8004ca8:	fff7ffff 	.word	0xfff7ffff
 8004cac:	00001388 	.word	0x00001388
 8004cb0:	ffcfffff 	.word	0xffcfffff
 8004cb4:	efffffff 	.word	0xefffffff
 8004cb8:	fffff3ff 	.word	0xfffff3ff
 8004cbc:	ffffcfff 	.word	0xffffcfff
 8004cc0:	fbffffff 	.word	0xfbffffff
 8004cc4:	fff3ffff 	.word	0xfff3ffff

08004cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e044      	b.n	8004d64 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d107      	bne.n	8004cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2274      	movs	r2, #116	; 0x74
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	0018      	movs	r0, r3
 8004cee:	f7fc f903 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2224      	movs	r2, #36	; 0x24
 8004cf6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2101      	movs	r1, #1
 8004d04:	438a      	bics	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0018      	movs	r0, r3
 8004d0c:	f000 f830 	bl	8004d70 <UART_SetConfig>
 8004d10:	0003      	movs	r3, r0
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e024      	b.n	8004d64 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d003      	beq.n	8004d2a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	0018      	movs	r0, r3
 8004d26:	f000 fae1 	bl	80052ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	490d      	ldr	r1, [pc, #52]	; (8004d6c <HAL_UART_Init+0xa4>)
 8004d36:	400a      	ands	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	212a      	movs	r1, #42	; 0x2a
 8004d46:	438a      	bics	r2, r1
 8004d48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2101      	movs	r1, #1
 8004d56:	430a      	orrs	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	f000 fb79 	bl	8005454 <UART_CheckIdleState>
 8004d62:	0003      	movs	r3, r0
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	ffffb7ff 	.word	0xffffb7ff

08004d70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d70:	b5b0      	push	{r4, r5, r7, lr}
 8004d72:	b08e      	sub	sp, #56	; 0x38
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d78:	231a      	movs	r3, #26
 8004d7a:	2218      	movs	r2, #24
 8004d7c:	4694      	mov	ip, r2
 8004d7e:	44bc      	add	ip, r7
 8004d80:	4463      	add	r3, ip
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	431a      	orrs	r2, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4ab0      	ldr	r2, [pc, #704]	; (8005068 <UART_SetConfig+0x2f8>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	0019      	movs	r1, r3
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004db0:	430a      	orrs	r2, r1
 8004db2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	4aac      	ldr	r2, [pc, #688]	; (800506c <UART_SetConfig+0x2fc>)
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	0019      	movs	r1, r3
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4aa6      	ldr	r2, [pc, #664]	; (8005070 <UART_SetConfig+0x300>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d004      	beq.n	8004de6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004de2:	4313      	orrs	r3, r2
 8004de4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	4aa1      	ldr	r2, [pc, #644]	; (8005074 <UART_SetConfig+0x304>)
 8004dee:	4013      	ands	r3, r2
 8004df0:	0019      	movs	r1, r3
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a9d      	ldr	r2, [pc, #628]	; (8005078 <UART_SetConfig+0x308>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d136      	bne.n	8004e74 <UART_SetConfig+0x104>
 8004e06:	4b9d      	ldr	r3, [pc, #628]	; (800507c <UART_SetConfig+0x30c>)
 8004e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e0a:	2203      	movs	r2, #3
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d020      	beq.n	8004e54 <UART_SetConfig+0xe4>
 8004e12:	d827      	bhi.n	8004e64 <UART_SetConfig+0xf4>
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d00d      	beq.n	8004e34 <UART_SetConfig+0xc4>
 8004e18:	d824      	bhi.n	8004e64 <UART_SetConfig+0xf4>
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <UART_SetConfig+0xb4>
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d010      	beq.n	8004e44 <UART_SetConfig+0xd4>
 8004e22:	e01f      	b.n	8004e64 <UART_SetConfig+0xf4>
 8004e24:	231b      	movs	r3, #27
 8004e26:	2218      	movs	r2, #24
 8004e28:	4694      	mov	ip, r2
 8004e2a:	44bc      	add	ip, r7
 8004e2c:	4463      	add	r3, ip
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e0c5      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004e34:	231b      	movs	r3, #27
 8004e36:	2218      	movs	r2, #24
 8004e38:	4694      	mov	ip, r2
 8004e3a:	44bc      	add	ip, r7
 8004e3c:	4463      	add	r3, ip
 8004e3e:	2202      	movs	r2, #2
 8004e40:	701a      	strb	r2, [r3, #0]
 8004e42:	e0bd      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004e44:	231b      	movs	r3, #27
 8004e46:	2218      	movs	r2, #24
 8004e48:	4694      	mov	ip, r2
 8004e4a:	44bc      	add	ip, r7
 8004e4c:	4463      	add	r3, ip
 8004e4e:	2204      	movs	r2, #4
 8004e50:	701a      	strb	r2, [r3, #0]
 8004e52:	e0b5      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004e54:	231b      	movs	r3, #27
 8004e56:	2218      	movs	r2, #24
 8004e58:	4694      	mov	ip, r2
 8004e5a:	44bc      	add	ip, r7
 8004e5c:	4463      	add	r3, ip
 8004e5e:	2208      	movs	r2, #8
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	e0ad      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004e64:	231b      	movs	r3, #27
 8004e66:	2218      	movs	r2, #24
 8004e68:	4694      	mov	ip, r2
 8004e6a:	44bc      	add	ip, r7
 8004e6c:	4463      	add	r3, ip
 8004e6e:	2210      	movs	r2, #16
 8004e70:	701a      	strb	r2, [r3, #0]
 8004e72:	e0a5      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a81      	ldr	r2, [pc, #516]	; (8005080 <UART_SetConfig+0x310>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d136      	bne.n	8004eec <UART_SetConfig+0x17c>
 8004e7e:	4b7f      	ldr	r3, [pc, #508]	; (800507c <UART_SetConfig+0x30c>)
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	220c      	movs	r2, #12
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b0c      	cmp	r3, #12
 8004e88:	d020      	beq.n	8004ecc <UART_SetConfig+0x15c>
 8004e8a:	d827      	bhi.n	8004edc <UART_SetConfig+0x16c>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d00d      	beq.n	8004eac <UART_SetConfig+0x13c>
 8004e90:	d824      	bhi.n	8004edc <UART_SetConfig+0x16c>
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d002      	beq.n	8004e9c <UART_SetConfig+0x12c>
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d010      	beq.n	8004ebc <UART_SetConfig+0x14c>
 8004e9a:	e01f      	b.n	8004edc <UART_SetConfig+0x16c>
 8004e9c:	231b      	movs	r3, #27
 8004e9e:	2218      	movs	r2, #24
 8004ea0:	4694      	mov	ip, r2
 8004ea2:	44bc      	add	ip, r7
 8004ea4:	4463      	add	r3, ip
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e089      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004eac:	231b      	movs	r3, #27
 8004eae:	2218      	movs	r2, #24
 8004eb0:	4694      	mov	ip, r2
 8004eb2:	44bc      	add	ip, r7
 8004eb4:	4463      	add	r3, ip
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e081      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004ebc:	231b      	movs	r3, #27
 8004ebe:	2218      	movs	r2, #24
 8004ec0:	4694      	mov	ip, r2
 8004ec2:	44bc      	add	ip, r7
 8004ec4:	4463      	add	r3, ip
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e079      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004ecc:	231b      	movs	r3, #27
 8004ece:	2218      	movs	r2, #24
 8004ed0:	4694      	mov	ip, r2
 8004ed2:	44bc      	add	ip, r7
 8004ed4:	4463      	add	r3, ip
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e071      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004edc:	231b      	movs	r3, #27
 8004ede:	2218      	movs	r2, #24
 8004ee0:	4694      	mov	ip, r2
 8004ee2:	44bc      	add	ip, r7
 8004ee4:	4463      	add	r3, ip
 8004ee6:	2210      	movs	r2, #16
 8004ee8:	701a      	strb	r2, [r3, #0]
 8004eea:	e069      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a64      	ldr	r2, [pc, #400]	; (8005084 <UART_SetConfig+0x314>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d107      	bne.n	8004f06 <UART_SetConfig+0x196>
 8004ef6:	231b      	movs	r3, #27
 8004ef8:	2218      	movs	r2, #24
 8004efa:	4694      	mov	ip, r2
 8004efc:	44bc      	add	ip, r7
 8004efe:	4463      	add	r3, ip
 8004f00:	2200      	movs	r2, #0
 8004f02:	701a      	strb	r2, [r3, #0]
 8004f04:	e05c      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a5f      	ldr	r2, [pc, #380]	; (8005088 <UART_SetConfig+0x318>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d107      	bne.n	8004f20 <UART_SetConfig+0x1b0>
 8004f10:	231b      	movs	r3, #27
 8004f12:	2218      	movs	r2, #24
 8004f14:	4694      	mov	ip, r2
 8004f16:	44bc      	add	ip, r7
 8004f18:	4463      	add	r3, ip
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e04f      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a52      	ldr	r2, [pc, #328]	; (8005070 <UART_SetConfig+0x300>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d143      	bne.n	8004fb2 <UART_SetConfig+0x242>
 8004f2a:	4b54      	ldr	r3, [pc, #336]	; (800507c <UART_SetConfig+0x30c>)
 8004f2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f2e:	23c0      	movs	r3, #192	; 0xc0
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	4013      	ands	r3, r2
 8004f34:	22c0      	movs	r2, #192	; 0xc0
 8004f36:	0112      	lsls	r2, r2, #4
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d02a      	beq.n	8004f92 <UART_SetConfig+0x222>
 8004f3c:	22c0      	movs	r2, #192	; 0xc0
 8004f3e:	0112      	lsls	r2, r2, #4
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d82e      	bhi.n	8004fa2 <UART_SetConfig+0x232>
 8004f44:	2280      	movs	r2, #128	; 0x80
 8004f46:	0112      	lsls	r2, r2, #4
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d012      	beq.n	8004f72 <UART_SetConfig+0x202>
 8004f4c:	2280      	movs	r2, #128	; 0x80
 8004f4e:	0112      	lsls	r2, r2, #4
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d826      	bhi.n	8004fa2 <UART_SetConfig+0x232>
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <UART_SetConfig+0x1f2>
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	00d2      	lsls	r2, r2, #3
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d010      	beq.n	8004f82 <UART_SetConfig+0x212>
 8004f60:	e01f      	b.n	8004fa2 <UART_SetConfig+0x232>
 8004f62:	231b      	movs	r3, #27
 8004f64:	2218      	movs	r2, #24
 8004f66:	4694      	mov	ip, r2
 8004f68:	44bc      	add	ip, r7
 8004f6a:	4463      	add	r3, ip
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e026      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004f72:	231b      	movs	r3, #27
 8004f74:	2218      	movs	r2, #24
 8004f76:	4694      	mov	ip, r2
 8004f78:	44bc      	add	ip, r7
 8004f7a:	4463      	add	r3, ip
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	e01e      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004f82:	231b      	movs	r3, #27
 8004f84:	2218      	movs	r2, #24
 8004f86:	4694      	mov	ip, r2
 8004f88:	44bc      	add	ip, r7
 8004f8a:	4463      	add	r3, ip
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	701a      	strb	r2, [r3, #0]
 8004f90:	e016      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004f92:	231b      	movs	r3, #27
 8004f94:	2218      	movs	r2, #24
 8004f96:	4694      	mov	ip, r2
 8004f98:	44bc      	add	ip, r7
 8004f9a:	4463      	add	r3, ip
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e00e      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004fa2:	231b      	movs	r3, #27
 8004fa4:	2218      	movs	r2, #24
 8004fa6:	4694      	mov	ip, r2
 8004fa8:	44bc      	add	ip, r7
 8004faa:	4463      	add	r3, ip
 8004fac:	2210      	movs	r2, #16
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e006      	b.n	8004fc0 <UART_SetConfig+0x250>
 8004fb2:	231b      	movs	r3, #27
 8004fb4:	2218      	movs	r2, #24
 8004fb6:	4694      	mov	ip, r2
 8004fb8:	44bc      	add	ip, r7
 8004fba:	4463      	add	r3, ip
 8004fbc:	2210      	movs	r2, #16
 8004fbe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <UART_SetConfig+0x300>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d000      	beq.n	8004fcc <UART_SetConfig+0x25c>
 8004fca:	e09e      	b.n	800510a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fcc:	231b      	movs	r3, #27
 8004fce:	2218      	movs	r2, #24
 8004fd0:	4694      	mov	ip, r2
 8004fd2:	44bc      	add	ip, r7
 8004fd4:	4463      	add	r3, ip
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d01d      	beq.n	8005018 <UART_SetConfig+0x2a8>
 8004fdc:	dc20      	bgt.n	8005020 <UART_SetConfig+0x2b0>
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d015      	beq.n	800500e <UART_SetConfig+0x29e>
 8004fe2:	dc1d      	bgt.n	8005020 <UART_SetConfig+0x2b0>
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <UART_SetConfig+0x27e>
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	d005      	beq.n	8004ff8 <UART_SetConfig+0x288>
 8004fec:	e018      	b.n	8005020 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fee:	f7ff fccb 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8004ff2:	0003      	movs	r3, r0
 8004ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ff6:	e01d      	b.n	8005034 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ff8:	4b20      	ldr	r3, [pc, #128]	; (800507c <UART_SetConfig+0x30c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2210      	movs	r2, #16
 8004ffe:	4013      	ands	r3, r2
 8005000:	d002      	beq.n	8005008 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005002:	4b22      	ldr	r3, [pc, #136]	; (800508c <UART_SetConfig+0x31c>)
 8005004:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005006:	e015      	b.n	8005034 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <UART_SetConfig+0x320>)
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800500c:	e012      	b.n	8005034 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7ff fc0b 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 8005012:	0003      	movs	r3, r0
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005016:	e00d      	b.n	8005034 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005018:	2380      	movs	r3, #128	; 0x80
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800501e:	e009      	b.n	8005034 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8005020:	2300      	movs	r3, #0
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005024:	231a      	movs	r3, #26
 8005026:	2218      	movs	r2, #24
 8005028:	4694      	mov	ip, r2
 800502a:	44bc      	add	ip, r7
 800502c:	4463      	add	r3, ip
 800502e:	2201      	movs	r2, #1
 8005030:	701a      	strb	r2, [r3, #0]
        break;
 8005032:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d100      	bne.n	800503c <UART_SetConfig+0x2cc>
 800503a:	e13c      	b.n	80052b6 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	0013      	movs	r3, r2
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	189b      	adds	r3, r3, r2
 8005046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005048:	429a      	cmp	r2, r3
 800504a:	d305      	bcc.n	8005058 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005054:	429a      	cmp	r2, r3
 8005056:	d91d      	bls.n	8005094 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8005058:	231a      	movs	r3, #26
 800505a:	2218      	movs	r2, #24
 800505c:	4694      	mov	ip, r2
 800505e:	44bc      	add	ip, r7
 8005060:	4463      	add	r3, ip
 8005062:	2201      	movs	r2, #1
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	e126      	b.n	80052b6 <UART_SetConfig+0x546>
 8005068:	efff69f3 	.word	0xefff69f3
 800506c:	ffffcfff 	.word	0xffffcfff
 8005070:	40004800 	.word	0x40004800
 8005074:	fffff4ff 	.word	0xfffff4ff
 8005078:	40013800 	.word	0x40013800
 800507c:	40021000 	.word	0x40021000
 8005080:	40004400 	.word	0x40004400
 8005084:	40004c00 	.word	0x40004c00
 8005088:	40005000 	.word	0x40005000
 800508c:	003d0900 	.word	0x003d0900
 8005090:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005096:	613b      	str	r3, [r7, #16]
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
 800509c:	6939      	ldr	r1, [r7, #16]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	000b      	movs	r3, r1
 80050a2:	0e1b      	lsrs	r3, r3, #24
 80050a4:	0010      	movs	r0, r2
 80050a6:	0205      	lsls	r5, r0, #8
 80050a8:	431d      	orrs	r5, r3
 80050aa:	000b      	movs	r3, r1
 80050ac:	021c      	lsls	r4, r3, #8
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
 80050ba:	68b8      	ldr	r0, [r7, #8]
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	1900      	adds	r0, r0, r4
 80050c0:	4169      	adcs	r1, r5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	603b      	str	r3, [r7, #0]
 80050c8:	2300      	movs	r3, #0
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f7fb f8a6 	bl	8000220 <__aeabi_uldivmod>
 80050d4:	0002      	movs	r2, r0
 80050d6:	000b      	movs	r3, r1
 80050d8:	0013      	movs	r3, r2
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050de:	23c0      	movs	r3, #192	; 0xc0
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d309      	bcc.n	80050fa <UART_SetConfig+0x38a>
 80050e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	035b      	lsls	r3, r3, #13
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d204      	bcs.n	80050fa <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e0dd      	b.n	80052b6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80050fa:	231a      	movs	r3, #26
 80050fc:	2218      	movs	r2, #24
 80050fe:	4694      	mov	ip, r2
 8005100:	44bc      	add	ip, r7
 8005102:	4463      	add	r3, ip
 8005104:	2201      	movs	r2, #1
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	e0d5      	b.n	80052b6 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	021b      	lsls	r3, r3, #8
 8005112:	429a      	cmp	r2, r3
 8005114:	d000      	beq.n	8005118 <UART_SetConfig+0x3a8>
 8005116:	e074      	b.n	8005202 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8005118:	231b      	movs	r3, #27
 800511a:	2218      	movs	r2, #24
 800511c:	4694      	mov	ip, r2
 800511e:	44bc      	add	ip, r7
 8005120:	4463      	add	r3, ip
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b08      	cmp	r3, #8
 8005126:	d822      	bhi.n	800516e <UART_SetConfig+0x3fe>
 8005128:	009a      	lsls	r2, r3, #2
 800512a:	4b6b      	ldr	r3, [pc, #428]	; (80052d8 <UART_SetConfig+0x568>)
 800512c:	18d3      	adds	r3, r2, r3
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005132:	f7ff fc29 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8005136:	0003      	movs	r3, r0
 8005138:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800513a:	e022      	b.n	8005182 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7ff fc3a 	bl	80049b4 <HAL_RCC_GetPCLK2Freq>
 8005140:	0003      	movs	r3, r0
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005144:	e01d      	b.n	8005182 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005146:	4b65      	ldr	r3, [pc, #404]	; (80052dc <UART_SetConfig+0x56c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2210      	movs	r2, #16
 800514c:	4013      	ands	r3, r2
 800514e:	d002      	beq.n	8005156 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005150:	4b63      	ldr	r3, [pc, #396]	; (80052e0 <UART_SetConfig+0x570>)
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005154:	e015      	b.n	8005182 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8005156:	4b63      	ldr	r3, [pc, #396]	; (80052e4 <UART_SetConfig+0x574>)
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800515a:	e012      	b.n	8005182 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515c:	f7ff fb64 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 8005160:	0003      	movs	r3, r0
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005164:	e00d      	b.n	8005182 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800516c:	e009      	b.n	8005182 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005172:	231a      	movs	r3, #26
 8005174:	2218      	movs	r2, #24
 8005176:	4694      	mov	ip, r2
 8005178:	44bc      	add	ip, r7
 800517a:	4463      	add	r3, ip
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
        break;
 8005180:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d100      	bne.n	800518a <UART_SetConfig+0x41a>
 8005188:	e095      	b.n	80052b6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800518a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518c:	005a      	lsls	r2, r3, #1
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	18d2      	adds	r2, r2, r3
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	0019      	movs	r1, r3
 800519c:	0010      	movs	r0, r2
 800519e:	f7fa ffb3 	bl	8000108 <__udivsi3>
 80051a2:	0003      	movs	r3, r0
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051aa:	2b0f      	cmp	r3, #15
 80051ac:	d921      	bls.n	80051f2 <UART_SetConfig+0x482>
 80051ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	025b      	lsls	r3, r3, #9
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d21c      	bcs.n	80051f2 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	200e      	movs	r0, #14
 80051be:	2418      	movs	r4, #24
 80051c0:	193b      	adds	r3, r7, r4
 80051c2:	181b      	adds	r3, r3, r0
 80051c4:	210f      	movs	r1, #15
 80051c6:	438a      	bics	r2, r1
 80051c8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2207      	movs	r2, #7
 80051d2:	4013      	ands	r3, r2
 80051d4:	b299      	uxth	r1, r3
 80051d6:	193b      	adds	r3, r7, r4
 80051d8:	181b      	adds	r3, r3, r0
 80051da:	193a      	adds	r2, r7, r4
 80051dc:	1812      	adds	r2, r2, r0
 80051de:	8812      	ldrh	r2, [r2, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	193a      	adds	r2, r7, r4
 80051ea:	1812      	adds	r2, r2, r0
 80051ec:	8812      	ldrh	r2, [r2, #0]
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e061      	b.n	80052b6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80051f2:	231a      	movs	r3, #26
 80051f4:	2218      	movs	r2, #24
 80051f6:	4694      	mov	ip, r2
 80051f8:	44bc      	add	ip, r7
 80051fa:	4463      	add	r3, ip
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e059      	b.n	80052b6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005202:	231b      	movs	r3, #27
 8005204:	2218      	movs	r2, #24
 8005206:	4694      	mov	ip, r2
 8005208:	44bc      	add	ip, r7
 800520a:	4463      	add	r3, ip
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b08      	cmp	r3, #8
 8005210:	d822      	bhi.n	8005258 <UART_SetConfig+0x4e8>
 8005212:	009a      	lsls	r2, r3, #2
 8005214:	4b34      	ldr	r3, [pc, #208]	; (80052e8 <UART_SetConfig+0x578>)
 8005216:	18d3      	adds	r3, r2, r3
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7ff fbb4 	bl	8004988 <HAL_RCC_GetPCLK1Freq>
 8005220:	0003      	movs	r3, r0
 8005222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005224:	e022      	b.n	800526c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005226:	f7ff fbc5 	bl	80049b4 <HAL_RCC_GetPCLK2Freq>
 800522a:	0003      	movs	r3, r0
 800522c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800522e:	e01d      	b.n	800526c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005230:	4b2a      	ldr	r3, [pc, #168]	; (80052dc <UART_SetConfig+0x56c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2210      	movs	r2, #16
 8005236:	4013      	ands	r3, r2
 8005238:	d002      	beq.n	8005240 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800523a:	4b29      	ldr	r3, [pc, #164]	; (80052e0 <UART_SetConfig+0x570>)
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800523e:	e015      	b.n	800526c <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8005240:	4b28      	ldr	r3, [pc, #160]	; (80052e4 <UART_SetConfig+0x574>)
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005244:	e012      	b.n	800526c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005246:	f7ff faef 	bl	8004828 <HAL_RCC_GetSysClockFreq>
 800524a:	0003      	movs	r3, r0
 800524c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800524e:	e00d      	b.n	800526c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005256:	e009      	b.n	800526c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800525c:	231a      	movs	r3, #26
 800525e:	2218      	movs	r2, #24
 8005260:	4694      	mov	ip, r2
 8005262:	44bc      	add	ip, r7
 8005264:	4463      	add	r3, ip
 8005266:	2201      	movs	r2, #1
 8005268:	701a      	strb	r2, [r3, #0]
        break;
 800526a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d021      	beq.n	80052b6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	085a      	lsrs	r2, r3, #1
 8005278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527a:	18d2      	adds	r2, r2, r3
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	0019      	movs	r1, r3
 8005282:	0010      	movs	r0, r2
 8005284:	f7fa ff40 	bl	8000108 <__udivsi3>
 8005288:	0003      	movs	r3, r0
 800528a:	b29b      	uxth	r3, r3
 800528c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	2b0f      	cmp	r3, #15
 8005292:	d909      	bls.n	80052a8 <UART_SetConfig+0x538>
 8005294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005296:	2380      	movs	r3, #128	; 0x80
 8005298:	025b      	lsls	r3, r3, #9
 800529a:	429a      	cmp	r2, r3
 800529c:	d204      	bcs.n	80052a8 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a4:	60da      	str	r2, [r3, #12]
 80052a6:	e006      	b.n	80052b6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80052a8:	231a      	movs	r3, #26
 80052aa:	2218      	movs	r2, #24
 80052ac:	4694      	mov	ip, r2
 80052ae:	44bc      	add	ip, r7
 80052b0:	4463      	add	r3, ip
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	2200      	movs	r2, #0
 80052ba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	2200      	movs	r2, #0
 80052c0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80052c2:	231a      	movs	r3, #26
 80052c4:	2218      	movs	r2, #24
 80052c6:	4694      	mov	ip, r2
 80052c8:	44bc      	add	ip, r7
 80052ca:	4463      	add	r3, ip
 80052cc:	781b      	ldrb	r3, [r3, #0]
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b00e      	add	sp, #56	; 0x38
 80052d4:	bdb0      	pop	{r4, r5, r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	08009ba4 	.word	0x08009ba4
 80052dc:	40021000 	.word	0x40021000
 80052e0:	003d0900 	.word	0x003d0900
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	08009bc8 	.word	0x08009bc8

080052ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	2201      	movs	r2, #1
 80052fa:	4013      	ands	r3, r2
 80052fc:	d00b      	beq.n	8005316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	4a4a      	ldr	r2, [pc, #296]	; (8005430 <UART_AdvFeatureConfig+0x144>)
 8005306:	4013      	ands	r3, r2
 8005308:	0019      	movs	r1, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	2202      	movs	r2, #2
 800531c:	4013      	ands	r3, r2
 800531e:	d00b      	beq.n	8005338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	4a43      	ldr	r2, [pc, #268]	; (8005434 <UART_AdvFeatureConfig+0x148>)
 8005328:	4013      	ands	r3, r2
 800532a:	0019      	movs	r1, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	2204      	movs	r2, #4
 800533e:	4013      	ands	r3, r2
 8005340:	d00b      	beq.n	800535a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4a3b      	ldr	r2, [pc, #236]	; (8005438 <UART_AdvFeatureConfig+0x14c>)
 800534a:	4013      	ands	r3, r2
 800534c:	0019      	movs	r1, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	2208      	movs	r2, #8
 8005360:	4013      	ands	r3, r2
 8005362:	d00b      	beq.n	800537c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4a34      	ldr	r2, [pc, #208]	; (800543c <UART_AdvFeatureConfig+0x150>)
 800536c:	4013      	ands	r3, r2
 800536e:	0019      	movs	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2210      	movs	r2, #16
 8005382:	4013      	ands	r3, r2
 8005384:	d00b      	beq.n	800539e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <UART_AdvFeatureConfig+0x154>)
 800538e:	4013      	ands	r3, r2
 8005390:	0019      	movs	r1, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2220      	movs	r2, #32
 80053a4:	4013      	ands	r3, r2
 80053a6:	d00b      	beq.n	80053c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	4a25      	ldr	r2, [pc, #148]	; (8005444 <UART_AdvFeatureConfig+0x158>)
 80053b0:	4013      	ands	r3, r2
 80053b2:	0019      	movs	r1, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2240      	movs	r2, #64	; 0x40
 80053c6:	4013      	ands	r3, r2
 80053c8:	d01d      	beq.n	8005406 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <UART_AdvFeatureConfig+0x15c>)
 80053d2:	4013      	ands	r3, r2
 80053d4:	0019      	movs	r1, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e6:	2380      	movs	r3, #128	; 0x80
 80053e8:	035b      	lsls	r3, r3, #13
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d10b      	bne.n	8005406 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <UART_AdvFeatureConfig+0x160>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2280      	movs	r2, #128	; 0x80
 800540c:	4013      	ands	r3, r2
 800540e:	d00b      	beq.n	8005428 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <UART_AdvFeatureConfig+0x164>)
 8005418:	4013      	ands	r3, r2
 800541a:	0019      	movs	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b002      	add	sp, #8
 800542e:	bd80      	pop	{r7, pc}
 8005430:	fffdffff 	.word	0xfffdffff
 8005434:	fffeffff 	.word	0xfffeffff
 8005438:	fffbffff 	.word	0xfffbffff
 800543c:	ffff7fff 	.word	0xffff7fff
 8005440:	ffffefff 	.word	0xffffefff
 8005444:	ffffdfff 	.word	0xffffdfff
 8005448:	ffefffff 	.word	0xffefffff
 800544c:	ff9fffff 	.word	0xff9fffff
 8005450:	fff7ffff 	.word	0xfff7ffff

08005454 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af02      	add	r7, sp, #8
 800545a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2280      	movs	r2, #128	; 0x80
 8005460:	2100      	movs	r1, #0
 8005462:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005464:	f7fb fe7c 	bl	8001160 <HAL_GetTick>
 8005468:	0003      	movs	r3, r0
 800546a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2208      	movs	r2, #8
 8005474:	4013      	ands	r3, r2
 8005476:	2b08      	cmp	r3, #8
 8005478:	d10c      	bne.n	8005494 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2280      	movs	r2, #128	; 0x80
 800547e:	0391      	lsls	r1, r2, #14
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <UART_CheckIdleState+0x8c>)
 8005484:	9200      	str	r2, [sp, #0]
 8005486:	2200      	movs	r2, #0
 8005488:	f000 f82c 	bl	80054e4 <UART_WaitOnFlagUntilTimeout>
 800548c:	1e03      	subs	r3, r0, #0
 800548e:	d001      	beq.n	8005494 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e021      	b.n	80054d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2204      	movs	r2, #4
 800549c:	4013      	ands	r3, r2
 800549e:	2b04      	cmp	r3, #4
 80054a0:	d10c      	bne.n	80054bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	03d1      	lsls	r1, r2, #15
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4a0d      	ldr	r2, [pc, #52]	; (80054e0 <UART_CheckIdleState+0x8c>)
 80054ac:	9200      	str	r2, [sp, #0]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f000 f818 	bl	80054e4 <UART_WaitOnFlagUntilTimeout>
 80054b4:	1e03      	subs	r3, r0, #0
 80054b6:	d001      	beq.n	80054bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e00d      	b.n	80054d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2220      	movs	r2, #32
 80054c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2274      	movs	r2, #116	; 0x74
 80054d2:	2100      	movs	r1, #0
 80054d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	0018      	movs	r0, r3
 80054da:	46bd      	mov	sp, r7
 80054dc:	b004      	add	sp, #16
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	01ffffff 	.word	0x01ffffff

080054e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b094      	sub	sp, #80	; 0x50
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	603b      	str	r3, [r7, #0]
 80054f0:	1dfb      	adds	r3, r7, #7
 80054f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054f4:	e0a3      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054f8:	3301      	adds	r3, #1
 80054fa:	d100      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80054fc:	e09f      	b.n	800563e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7fb fe2f 	bl	8001160 <HAL_GetTick>
 8005502:	0002      	movs	r2, r0
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <UART_WaitOnFlagUntilTimeout+0x30>
 800550e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005510:	2b00      	cmp	r3, #0
 8005512:	d13d      	bne.n	8005590 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005514:	f3ef 8310 	mrs	r3, PRIMASK
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800551c:	647b      	str	r3, [r7, #68]	; 0x44
 800551e:	2301      	movs	r3, #1
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			; (mov r8, r8)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	494c      	ldr	r1, [pc, #304]	; (8005668 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005536:	400a      	ands	r2, r1
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	f383 8810 	msr	PRIMASK, r3
}
 8005544:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005546:	f3ef 8310 	mrs	r3, PRIMASK
 800554a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800554c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800554e:	643b      	str	r3, [r7, #64]	; 0x40
 8005550:	2301      	movs	r3, #1
 8005552:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005556:	f383 8810 	msr	PRIMASK, r3
}
 800555a:	46c0      	nop			; (mov r8, r8)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689a      	ldr	r2, [r3, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2101      	movs	r1, #1
 8005568:	438a      	bics	r2, r1
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2274      	movs	r2, #116	; 0x74
 8005588:	2100      	movs	r1, #0
 800558a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e067      	b.n	8005660 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2204      	movs	r2, #4
 8005598:	4013      	ands	r3, r2
 800559a:	d050      	beq.n	800563e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69da      	ldr	r2, [r3, #28]
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	401a      	ands	r2, r3
 80055a8:	2380      	movs	r3, #128	; 0x80
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d146      	bne.n	800563e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2280      	movs	r2, #128	; 0x80
 80055b6:	0112      	lsls	r2, r2, #4
 80055b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ba:	f3ef 8310 	mrs	r3, PRIMASK
 80055be:	613b      	str	r3, [r7, #16]
  return(result);
 80055c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c4:	2301      	movs	r3, #1
 80055c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4923      	ldr	r1, [pc, #140]	; (8005668 <UART_WaitOnFlagUntilTimeout+0x184>)
 80055dc:	400a      	ands	r2, r1
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	f383 8810 	msr	PRIMASK, r3
}
 80055ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ec:	f3ef 8310 	mrs	r3, PRIMASK
 80055f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80055f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055f6:	2301      	movs	r3, #1
 80055f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			; (mov r8, r8)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2101      	movs	r1, #1
 800560e:	438a      	bics	r2, r1
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005614:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	f383 8810 	msr	PRIMASK, r3
}
 800561c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2280      	movs	r2, #128	; 0x80
 800562e:	2120      	movs	r1, #32
 8005630:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2274      	movs	r2, #116	; 0x74
 8005636:	2100      	movs	r1, #0
 8005638:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e010      	b.n	8005660 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	4013      	ands	r3, r2
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	425a      	negs	r2, r3
 800564e:	4153      	adcs	r3, r2
 8005650:	b2db      	uxtb	r3, r3
 8005652:	001a      	movs	r2, r3
 8005654:	1dfb      	adds	r3, r7, #7
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	429a      	cmp	r2, r3
 800565a:	d100      	bne.n	800565e <UART_WaitOnFlagUntilTimeout+0x17a>
 800565c:	e74b      	b.n	80054f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	0018      	movs	r0, r3
 8005662:	46bd      	mov	sp, r7
 8005664:	b014      	add	sp, #80	; 0x50
 8005666:	bd80      	pop	{r7, pc}
 8005668:	fffffe5f 	.word	0xfffffe5f

0800566c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2244      	movs	r2, #68	; 0x44
 8005678:	2100      	movs	r1, #0
 800567a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800567c:	4b05      	ldr	r3, [pc, #20]	; (8005694 <USB_EnableGlobalInt+0x28>)
 800567e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	b299      	uxth	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2240      	movs	r2, #64	; 0x40
 8005688:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b004      	add	sp, #16
 8005692:	bd80      	pop	{r7, pc}
 8005694:	0000bf80 	.word	0x0000bf80

08005698 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80056a0:	4b09      	ldr	r3, [pc, #36]	; (80056c8 <USB_DisableGlobalInt+0x30>)
 80056a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	5a9b      	ldrh	r3, [r3, r2]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	b292      	uxth	r2, r2
 80056b0:	43d2      	mvns	r2, r2
 80056b2:	b292      	uxth	r2, r2
 80056b4:	4013      	ands	r3, r2
 80056b6:	b299      	uxth	r1, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2240      	movs	r2, #64	; 0x40
 80056bc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	0018      	movs	r0, r3
 80056c2:	46bd      	mov	sp, r7
 80056c4:	b004      	add	sp, #16
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	0000bf80 	.word	0x0000bf80

080056cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056cc:	b084      	sub	sp, #16
 80056ce:	b590      	push	{r4, r7, lr}
 80056d0:	46c6      	mov	lr, r8
 80056d2:	b500      	push	{lr}
 80056d4:	b082      	sub	sp, #8
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	2004      	movs	r0, #4
 80056dc:	2410      	movs	r4, #16
 80056de:	46a4      	mov	ip, r4
 80056e0:	2408      	movs	r4, #8
 80056e2:	46a0      	mov	r8, r4
 80056e4:	44b8      	add	r8, r7
 80056e6:	44c4      	add	ip, r8
 80056e8:	4460      	add	r0, ip
 80056ea:	6001      	str	r1, [r0, #0]
 80056ec:	6042      	str	r2, [r0, #4]
 80056ee:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2240      	movs	r2, #64	; 0x40
 80056f4:	2101      	movs	r1, #1
 80056f6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2240      	movs	r2, #64	; 0x40
 80056fc:	2100      	movs	r1, #0
 80056fe:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2244      	movs	r2, #68	; 0x44
 8005704:	2100      	movs	r1, #0
 8005706:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2250      	movs	r2, #80	; 0x50
 800570c:	2100      	movs	r1, #0
 800570e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	0018      	movs	r0, r3
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bc80      	pop	{r7}
 800571a:	46b8      	mov	r8, r7
 800571c:	bc90      	pop	{r4, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	b004      	add	sp, #16
 8005722:	4718      	bx	r3

08005724 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b09c      	sub	sp, #112	; 0x70
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800572e:	236f      	movs	r3, #111	; 0x6f
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	236c      	movs	r3, #108	; 0x6c
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	49cf      	ldr	r1, [pc, #828]	; (8005a88 <USB_ActivateEndpoint+0x364>)
 800574a:	400a      	ands	r2, r1
 800574c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	78db      	ldrb	r3, [r3, #3]
 8005752:	2b03      	cmp	r3, #3
 8005754:	d017      	beq.n	8005786 <USB_ActivateEndpoint+0x62>
 8005756:	dc28      	bgt.n	80057aa <USB_ActivateEndpoint+0x86>
 8005758:	2b02      	cmp	r3, #2
 800575a:	d00e      	beq.n	800577a <USB_ActivateEndpoint+0x56>
 800575c:	dc25      	bgt.n	80057aa <USB_ActivateEndpoint+0x86>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <USB_ActivateEndpoint+0x44>
 8005762:	2b01      	cmp	r3, #1
 8005764:	d018      	beq.n	8005798 <USB_ActivateEndpoint+0x74>
 8005766:	e020      	b.n	80057aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005768:	226c      	movs	r2, #108	; 0x6c
 800576a:	18bb      	adds	r3, r7, r2
 800576c:	18ba      	adds	r2, r7, r2
 800576e:	8812      	ldrh	r2, [r2, #0]
 8005770:	2180      	movs	r1, #128	; 0x80
 8005772:	0089      	lsls	r1, r1, #2
 8005774:	430a      	orrs	r2, r1
 8005776:	801a      	strh	r2, [r3, #0]
      break;
 8005778:	e01c      	b.n	80057b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800577a:	226c      	movs	r2, #108	; 0x6c
 800577c:	18bb      	adds	r3, r7, r2
 800577e:	18ba      	adds	r2, r7, r2
 8005780:	8812      	ldrh	r2, [r2, #0]
 8005782:	801a      	strh	r2, [r3, #0]
      break;
 8005784:	e016      	b.n	80057b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005786:	226c      	movs	r2, #108	; 0x6c
 8005788:	18bb      	adds	r3, r7, r2
 800578a:	18ba      	adds	r2, r7, r2
 800578c:	8812      	ldrh	r2, [r2, #0]
 800578e:	21c0      	movs	r1, #192	; 0xc0
 8005790:	00c9      	lsls	r1, r1, #3
 8005792:	430a      	orrs	r2, r1
 8005794:	801a      	strh	r2, [r3, #0]
      break;
 8005796:	e00d      	b.n	80057b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005798:	226c      	movs	r2, #108	; 0x6c
 800579a:	18bb      	adds	r3, r7, r2
 800579c:	18ba      	adds	r2, r7, r2
 800579e:	8812      	ldrh	r2, [r2, #0]
 80057a0:	2180      	movs	r1, #128	; 0x80
 80057a2:	00c9      	lsls	r1, r1, #3
 80057a4:	430a      	orrs	r2, r1
 80057a6:	801a      	strh	r2, [r3, #0]
      break;
 80057a8:	e004      	b.n	80057b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80057aa:	236f      	movs	r3, #111	; 0x6f
 80057ac:	18fb      	adds	r3, r7, r3
 80057ae:	2201      	movs	r2, #1
 80057b0:	701a      	strb	r2, [r3, #0]
      break;
 80057b2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	18d3      	adds	r3, r2, r3
 80057be:	226c      	movs	r2, #108	; 0x6c
 80057c0:	18ba      	adds	r2, r7, r2
 80057c2:	8812      	ldrh	r2, [r2, #0]
 80057c4:	49b1      	ldr	r1, [pc, #708]	; (8005a8c <USB_ActivateEndpoint+0x368>)
 80057c6:	430a      	orrs	r2, r1
 80057c8:	b292      	uxth	r2, r2
 80057ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	18d3      	adds	r3, r2, r3
 80057d6:	881b      	ldrh	r3, [r3, #0]
 80057d8:	b29b      	uxth	r3, r3
 80057da:	b21b      	sxth	r3, r3
 80057dc:	4aac      	ldr	r2, [pc, #688]	; (8005a90 <USB_ActivateEndpoint+0x36c>)
 80057de:	4013      	ands	r3, r2
 80057e0:	b21a      	sxth	r2, r3
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	b21b      	sxth	r3, r3
 80057e8:	4313      	orrs	r3, r2
 80057ea:	b21a      	sxth	r2, r3
 80057ec:	2166      	movs	r1, #102	; 0x66
 80057ee:	187b      	adds	r3, r7, r1
 80057f0:	801a      	strh	r2, [r3, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	18d3      	adds	r3, r2, r3
 80057fc:	187a      	adds	r2, r7, r1
 80057fe:	8812      	ldrh	r2, [r2, #0]
 8005800:	49a2      	ldr	r1, [pc, #648]	; (8005a8c <USB_ActivateEndpoint+0x368>)
 8005802:	430a      	orrs	r2, r1
 8005804:	b292      	uxth	r2, r2
 8005806:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	7b1b      	ldrb	r3, [r3, #12]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d000      	beq.n	8005812 <USB_ActivateEndpoint+0xee>
 8005810:	e150      	b.n	8005ab4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d100      	bne.n	800581c <USB_ActivateEndpoint+0xf8>
 800581a:	e07a      	b.n	8005912 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2250      	movs	r2, #80	; 0x50
 8005824:	5a9b      	ldrh	r3, [r3, r2]
 8005826:	b29b      	uxth	r3, r3
 8005828:	001a      	movs	r2, r3
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	189b      	adds	r3, r3, r2
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	00da      	lsls	r2, r3, #3
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	18d3      	adds	r3, r2, r3
 800583a:	2280      	movs	r2, #128	; 0x80
 800583c:	00d2      	lsls	r2, r2, #3
 800583e:	4694      	mov	ip, r2
 8005840:	4463      	add	r3, ip
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	88db      	ldrh	r3, [r3, #6]
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	b29b      	uxth	r3, r3
 800584c:	18db      	adds	r3, r3, r3
 800584e:	b29a      	uxth	r2, r3
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	18d2      	adds	r2, r2, r3
 800585e:	2112      	movs	r1, #18
 8005860:	187b      	adds	r3, r7, r1
 8005862:	8812      	ldrh	r2, [r2, #0]
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	187b      	adds	r3, r7, r1
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	4013      	ands	r3, r2
 800586e:	d016      	beq.n	800589e <USB_ActivateEndpoint+0x17a>
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29a      	uxth	r2, r3
 800587e:	2010      	movs	r0, #16
 8005880:	183b      	adds	r3, r7, r0
 8005882:	4983      	ldr	r1, [pc, #524]	; (8005a90 <USB_ActivateEndpoint+0x36c>)
 8005884:	400a      	ands	r2, r1
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	18d3      	adds	r3, r2, r3
 8005892:	183a      	adds	r2, r7, r0
 8005894:	8812      	ldrh	r2, [r2, #0]
 8005896:	497f      	ldr	r1, [pc, #508]	; (8005a94 <USB_ActivateEndpoint+0x370>)
 8005898:	430a      	orrs	r2, r1
 800589a:	b292      	uxth	r2, r2
 800589c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	78db      	ldrb	r3, [r3, #3]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d01d      	beq.n	80058e2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	18d3      	adds	r3, r2, r3
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	200c      	movs	r0, #12
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	4977      	ldr	r1, [pc, #476]	; (8005a98 <USB_ActivateEndpoint+0x374>)
 80058ba:	400a      	ands	r2, r1
 80058bc:	801a      	strh	r2, [r3, #0]
 80058be:	183b      	adds	r3, r7, r0
 80058c0:	183a      	adds	r2, r7, r0
 80058c2:	8812      	ldrh	r2, [r2, #0]
 80058c4:	2120      	movs	r1, #32
 80058c6:	404a      	eors	r2, r1
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	183a      	adds	r2, r7, r0
 80058d6:	8812      	ldrh	r2, [r2, #0]
 80058d8:	496c      	ldr	r1, [pc, #432]	; (8005a8c <USB_ActivateEndpoint+0x368>)
 80058da:	430a      	orrs	r2, r1
 80058dc:	b292      	uxth	r2, r2
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	e27a      	b.n	8005dd8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	18d3      	adds	r3, r2, r3
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	200e      	movs	r0, #14
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	4968      	ldr	r1, [pc, #416]	; (8005a98 <USB_ActivateEndpoint+0x374>)
 80058f6:	400a      	ands	r2, r1
 80058f8:	801a      	strh	r2, [r3, #0]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	183a      	adds	r2, r7, r0
 8005906:	8812      	ldrh	r2, [r2, #0]
 8005908:	4960      	ldr	r1, [pc, #384]	; (8005a8c <USB_ActivateEndpoint+0x368>)
 800590a:	430a      	orrs	r2, r1
 800590c:	b292      	uxth	r2, r2
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e262      	b.n	8005dd8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	633b      	str	r3, [r7, #48]	; 0x30
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2250      	movs	r2, #80	; 0x50
 800591a:	5a9b      	ldrh	r3, [r3, r2]
 800591c:	b29b      	uxth	r3, r3
 800591e:	001a      	movs	r2, r3
 8005920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005922:	189b      	adds	r3, r3, r2
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	00da      	lsls	r2, r3, #3
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	18d3      	adds	r3, r2, r3
 8005930:	4a5a      	ldr	r2, [pc, #360]	; (8005a9c <USB_ActivateEndpoint+0x378>)
 8005932:	4694      	mov	ip, r2
 8005934:	4463      	add	r3, ip
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	88db      	ldrh	r3, [r3, #6]
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	b29b      	uxth	r3, r3
 8005940:	18db      	adds	r3, r3, r3
 8005942:	b29a      	uxth	r2, r3
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	62bb      	str	r3, [r7, #40]	; 0x28
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2250      	movs	r2, #80	; 0x50
 8005950:	5a9b      	ldrh	r3, [r3, r2]
 8005952:	b29b      	uxth	r3, r3
 8005954:	001a      	movs	r2, r3
 8005956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005958:	189b      	adds	r3, r3, r2
 800595a:	62bb      	str	r3, [r7, #40]	; 0x28
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	00da      	lsls	r2, r3, #3
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	18d3      	adds	r3, r2, r3
 8005966:	4a4e      	ldr	r2, [pc, #312]	; (8005aa0 <USB_ActivateEndpoint+0x37c>)
 8005968:	4694      	mov	ip, r2
 800596a:	4463      	add	r3, ip
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d110      	bne.n	8005998 <USB_ActivateEndpoint+0x274>
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	4a49      	ldr	r2, [pc, #292]	; (8005aa4 <USB_ActivateEndpoint+0x380>)
 800597e:	4013      	ands	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	4a46      	ldr	r2, [pc, #280]	; (8005aa8 <USB_ActivateEndpoint+0x384>)
 800598e:	4313      	orrs	r3, r2
 8005990:	b29a      	uxth	r2, r3
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	e02b      	b.n	80059f0 <USB_ActivateEndpoint+0x2cc>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b3e      	cmp	r3, #62	; 0x3e
 800599e:	d812      	bhi.n	80059c6 <USB_ActivateEndpoint+0x2a2>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	2201      	movs	r2, #1
 80059ae:	4013      	ands	r3, r2
 80059b0:	d002      	beq.n	80059b8 <USB_ActivateEndpoint+0x294>
 80059b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059b4:	3301      	adds	r3, #1
 80059b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80059b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	029b      	lsls	r3, r3, #10
 80059be:	b29a      	uxth	r2, r3
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e014      	b.n	80059f0 <USB_ActivateEndpoint+0x2cc>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	221f      	movs	r2, #31
 80059d4:	4013      	ands	r3, r2
 80059d6:	d102      	bne.n	80059de <USB_ActivateEndpoint+0x2ba>
 80059d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059da:	3b01      	subs	r3, #1
 80059dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80059de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	029b      	lsls	r3, r3, #10
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	4a30      	ldr	r2, [pc, #192]	; (8005aa8 <USB_ActivateEndpoint+0x384>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	18d2      	adds	r2, r2, r3
 80059fa:	2122      	movs	r1, #34	; 0x22
 80059fc:	187b      	adds	r3, r7, r1
 80059fe:	8812      	ldrh	r2, [r2, #0]
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	187b      	adds	r3, r7, r1
 8005a04:	881a      	ldrh	r2, [r3, #0]
 8005a06:	2380      	movs	r3, #128	; 0x80
 8005a08:	01db      	lsls	r3, r3, #7
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d016      	beq.n	8005a3c <USB_ActivateEndpoint+0x318>
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	18d3      	adds	r3, r2, r3
 8005a18:	881b      	ldrh	r3, [r3, #0]
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	2020      	movs	r0, #32
 8005a1e:	183b      	adds	r3, r7, r0
 8005a20:	491b      	ldr	r1, [pc, #108]	; (8005a90 <USB_ActivateEndpoint+0x36c>)
 8005a22:	400a      	ands	r2, r1
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	18d3      	adds	r3, r2, r3
 8005a30:	183a      	adds	r2, r7, r0
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	491d      	ldr	r1, [pc, #116]	; (8005aac <USB_ActivateEndpoint+0x388>)
 8005a36:	430a      	orrs	r2, r1
 8005a38:	b292      	uxth	r2, r2
 8005a3a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	18d3      	adds	r3, r2, r3
 8005a46:	881b      	ldrh	r3, [r3, #0]
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	201e      	movs	r0, #30
 8005a4c:	183b      	adds	r3, r7, r0
 8005a4e:	4918      	ldr	r1, [pc, #96]	; (8005ab0 <USB_ActivateEndpoint+0x38c>)
 8005a50:	400a      	ands	r2, r1
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	183b      	adds	r3, r7, r0
 8005a56:	183a      	adds	r2, r7, r0
 8005a58:	8812      	ldrh	r2, [r2, #0]
 8005a5a:	2180      	movs	r1, #128	; 0x80
 8005a5c:	0149      	lsls	r1, r1, #5
 8005a5e:	404a      	eors	r2, r1
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	183b      	adds	r3, r7, r0
 8005a64:	183a      	adds	r2, r7, r0
 8005a66:	8812      	ldrh	r2, [r2, #0]
 8005a68:	2180      	movs	r1, #128	; 0x80
 8005a6a:	0189      	lsls	r1, r1, #6
 8005a6c:	404a      	eors	r2, r1
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	183a      	adds	r2, r7, r0
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	4903      	ldr	r1, [pc, #12]	; (8005a8c <USB_ActivateEndpoint+0x368>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	b292      	uxth	r2, r2
 8005a84:	801a      	strh	r2, [r3, #0]
 8005a86:	e1a7      	b.n	8005dd8 <USB_ActivateEndpoint+0x6b4>
 8005a88:	ffff898f 	.word	0xffff898f
 8005a8c:	ffff8080 	.word	0xffff8080
 8005a90:	ffff8f8f 	.word	0xffff8f8f
 8005a94:	ffff80c0 	.word	0xffff80c0
 8005a98:	ffff8fbf 	.word	0xffff8fbf
 8005a9c:	00000404 	.word	0x00000404
 8005aa0:	00000406 	.word	0x00000406
 8005aa4:	ffff83ff 	.word	0xffff83ff
 8005aa8:	ffff8000 	.word	0xffff8000
 8005aac:	ffffc080 	.word	0xffffc080
 8005ab0:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	78db      	ldrb	r3, [r3, #3]
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d117      	bne.n	8005aec <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	18d3      	adds	r3, r2, r3
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	2062      	movs	r0, #98	; 0x62
 8005acc:	183b      	adds	r3, r7, r0
 8005ace:	49c6      	ldr	r1, [pc, #792]	; (8005de8 <USB_ActivateEndpoint+0x6c4>)
 8005ad0:	400a      	ands	r2, r1
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	183a      	adds	r2, r7, r0
 8005ae0:	8812      	ldrh	r2, [r2, #0]
 8005ae2:	49c2      	ldr	r1, [pc, #776]	; (8005dec <USB_ActivateEndpoint+0x6c8>)
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	e016      	b.n	8005b1a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	18d3      	adds	r3, r2, r3
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29a      	uxth	r2, r3
 8005afa:	2064      	movs	r0, #100	; 0x64
 8005afc:	183b      	adds	r3, r7, r0
 8005afe:	49bc      	ldr	r1, [pc, #752]	; (8005df0 <USB_ActivateEndpoint+0x6cc>)
 8005b00:	400a      	ands	r2, r1
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	18d3      	adds	r3, r2, r3
 8005b0e:	183a      	adds	r2, r7, r0
 8005b10:	8812      	ldrh	r2, [r2, #0]
 8005b12:	49b8      	ldr	r1, [pc, #736]	; (8005df4 <USB_ActivateEndpoint+0x6d0>)
 8005b14:	430a      	orrs	r2, r1
 8005b16:	b292      	uxth	r2, r2
 8005b18:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2250      	movs	r2, #80	; 0x50
 8005b22:	5a9b      	ldrh	r3, [r3, r2]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	001a      	movs	r2, r3
 8005b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2a:	189b      	adds	r3, r3, r2
 8005b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	00da      	lsls	r2, r3, #3
 8005b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b36:	18d3      	adds	r3, r2, r3
 8005b38:	2280      	movs	r2, #128	; 0x80
 8005b3a:	00d2      	lsls	r2, r2, #3
 8005b3c:	4694      	mov	ip, r2
 8005b3e:	4463      	add	r3, ip
 8005b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	891b      	ldrh	r3, [r3, #8]
 8005b46:	085b      	lsrs	r3, r3, #1
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	18db      	adds	r3, r3, r3
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	657b      	str	r3, [r7, #84]	; 0x54
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2250      	movs	r2, #80	; 0x50
 8005b5a:	5a9b      	ldrh	r3, [r3, r2]
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	001a      	movs	r2, r3
 8005b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b62:	189b      	adds	r3, r3, r2
 8005b64:	657b      	str	r3, [r7, #84]	; 0x54
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	00da      	lsls	r2, r3, #3
 8005b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6e:	18d3      	adds	r3, r2, r3
 8005b70:	4aa1      	ldr	r2, [pc, #644]	; (8005df8 <USB_ActivateEndpoint+0x6d4>)
 8005b72:	4694      	mov	ip, r2
 8005b74:	4463      	add	r3, ip
 8005b76:	653b      	str	r3, [r7, #80]	; 0x50
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	895b      	ldrh	r3, [r3, #10]
 8005b7c:	085b      	lsrs	r3, r3, #1
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	18db      	adds	r3, r3, r3
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b86:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d000      	beq.n	8005b92 <USB_ActivateEndpoint+0x46e>
 8005b90:	e087      	b.n	8005ca2 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	18d2      	adds	r2, r2, r3
 8005b9c:	2140      	movs	r1, #64	; 0x40
 8005b9e:	187b      	adds	r3, r7, r1
 8005ba0:	8812      	ldrh	r2, [r2, #0]
 8005ba2:	801a      	strh	r2, [r3, #0]
 8005ba4:	187b      	adds	r3, r7, r1
 8005ba6:	881a      	ldrh	r2, [r3, #0]
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	01db      	lsls	r3, r3, #7
 8005bac:	4013      	ands	r3, r2
 8005bae:	d016      	beq.n	8005bde <USB_ActivateEndpoint+0x4ba>
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	18d3      	adds	r3, r2, r3
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	203e      	movs	r0, #62	; 0x3e
 8005bc0:	183b      	adds	r3, r7, r0
 8005bc2:	4989      	ldr	r1, [pc, #548]	; (8005de8 <USB_ActivateEndpoint+0x6c4>)
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	801a      	strh	r2, [r3, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	18d3      	adds	r3, r2, r3
 8005bd2:	183a      	adds	r2, r7, r0
 8005bd4:	8812      	ldrh	r2, [r2, #0]
 8005bd6:	4989      	ldr	r1, [pc, #548]	; (8005dfc <USB_ActivateEndpoint+0x6d8>)
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	b292      	uxth	r2, r2
 8005bdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	18d2      	adds	r2, r2, r3
 8005be8:	213c      	movs	r1, #60	; 0x3c
 8005bea:	187b      	adds	r3, r7, r1
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	801a      	strh	r2, [r3, #0]
 8005bf0:	187b      	adds	r3, r7, r1
 8005bf2:	881b      	ldrh	r3, [r3, #0]
 8005bf4:	2240      	movs	r2, #64	; 0x40
 8005bf6:	4013      	ands	r3, r2
 8005bf8:	d016      	beq.n	8005c28 <USB_ActivateEndpoint+0x504>
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	18d3      	adds	r3, r2, r3
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	203a      	movs	r0, #58	; 0x3a
 8005c0a:	183b      	adds	r3, r7, r0
 8005c0c:	4976      	ldr	r1, [pc, #472]	; (8005de8 <USB_ActivateEndpoint+0x6c4>)
 8005c0e:	400a      	ands	r2, r1
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	18d3      	adds	r3, r2, r3
 8005c1c:	183a      	adds	r2, r7, r0
 8005c1e:	8812      	ldrh	r2, [r2, #0]
 8005c20:	4977      	ldr	r1, [pc, #476]	; (8005e00 <USB_ActivateEndpoint+0x6dc>)
 8005c22:	430a      	orrs	r2, r1
 8005c24:	b292      	uxth	r2, r2
 8005c26:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	18d3      	adds	r3, r2, r3
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	2038      	movs	r0, #56	; 0x38
 8005c38:	183b      	adds	r3, r7, r0
 8005c3a:	4972      	ldr	r1, [pc, #456]	; (8005e04 <USB_ActivateEndpoint+0x6e0>)
 8005c3c:	400a      	ands	r2, r1
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	183b      	adds	r3, r7, r0
 8005c42:	183a      	adds	r2, r7, r0
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	2180      	movs	r1, #128	; 0x80
 8005c48:	0149      	lsls	r1, r1, #5
 8005c4a:	404a      	eors	r2, r1
 8005c4c:	801a      	strh	r2, [r3, #0]
 8005c4e:	183b      	adds	r3, r7, r0
 8005c50:	183a      	adds	r2, r7, r0
 8005c52:	8812      	ldrh	r2, [r2, #0]
 8005c54:	2180      	movs	r1, #128	; 0x80
 8005c56:	0189      	lsls	r1, r1, #6
 8005c58:	404a      	eors	r2, r1
 8005c5a:	801a      	strh	r2, [r3, #0]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	18d3      	adds	r3, r2, r3
 8005c66:	183a      	adds	r2, r7, r0
 8005c68:	8812      	ldrh	r2, [r2, #0]
 8005c6a:	4962      	ldr	r1, [pc, #392]	; (8005df4 <USB_ActivateEndpoint+0x6d0>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	b292      	uxth	r2, r2
 8005c70:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	18d3      	adds	r3, r2, r3
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	2036      	movs	r0, #54	; 0x36
 8005c82:	183b      	adds	r3, r7, r0
 8005c84:	4960      	ldr	r1, [pc, #384]	; (8005e08 <USB_ActivateEndpoint+0x6e4>)
 8005c86:	400a      	ands	r2, r1
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	18d3      	adds	r3, r2, r3
 8005c94:	183a      	adds	r2, r7, r0
 8005c96:	8812      	ldrh	r2, [r2, #0]
 8005c98:	4956      	ldr	r1, [pc, #344]	; (8005df4 <USB_ActivateEndpoint+0x6d0>)
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	b292      	uxth	r2, r2
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	e09a      	b.n	8005dd8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	18d2      	adds	r2, r2, r3
 8005cac:	214e      	movs	r1, #78	; 0x4e
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	8812      	ldrh	r2, [r2, #0]
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	187b      	adds	r3, r7, r1
 8005cb6:	881a      	ldrh	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d016      	beq.n	8005cee <USB_ActivateEndpoint+0x5ca>
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	18d3      	adds	r3, r2, r3
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	204c      	movs	r0, #76	; 0x4c
 8005cd0:	183b      	adds	r3, r7, r0
 8005cd2:	4945      	ldr	r1, [pc, #276]	; (8005de8 <USB_ActivateEndpoint+0x6c4>)
 8005cd4:	400a      	ands	r2, r1
 8005cd6:	801a      	strh	r2, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	18d3      	adds	r3, r2, r3
 8005ce2:	183a      	adds	r2, r7, r0
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	4945      	ldr	r1, [pc, #276]	; (8005dfc <USB_ActivateEndpoint+0x6d8>)
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	b292      	uxth	r2, r2
 8005cec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	18d2      	adds	r2, r2, r3
 8005cf8:	214a      	movs	r1, #74	; 0x4a
 8005cfa:	187b      	adds	r3, r7, r1
 8005cfc:	8812      	ldrh	r2, [r2, #0]
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	187b      	adds	r3, r7, r1
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	2240      	movs	r2, #64	; 0x40
 8005d06:	4013      	ands	r3, r2
 8005d08:	d016      	beq.n	8005d38 <USB_ActivateEndpoint+0x614>
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	18d3      	adds	r3, r2, r3
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	2048      	movs	r0, #72	; 0x48
 8005d1a:	183b      	adds	r3, r7, r0
 8005d1c:	4932      	ldr	r1, [pc, #200]	; (8005de8 <USB_ActivateEndpoint+0x6c4>)
 8005d1e:	400a      	ands	r2, r1
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	18d3      	adds	r3, r2, r3
 8005d2c:	183a      	adds	r2, r7, r0
 8005d2e:	8812      	ldrh	r2, [r2, #0]
 8005d30:	4933      	ldr	r1, [pc, #204]	; (8005e00 <USB_ActivateEndpoint+0x6dc>)
 8005d32:	430a      	orrs	r2, r1
 8005d34:	b292      	uxth	r2, r2
 8005d36:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	78db      	ldrb	r3, [r3, #3]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d01d      	beq.n	8005d7c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	18d3      	adds	r3, r2, r3
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	2044      	movs	r0, #68	; 0x44
 8005d50:	183b      	adds	r3, r7, r0
 8005d52:	492d      	ldr	r1, [pc, #180]	; (8005e08 <USB_ActivateEndpoint+0x6e4>)
 8005d54:	400a      	ands	r2, r1
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	183b      	adds	r3, r7, r0
 8005d5a:	183a      	adds	r2, r7, r0
 8005d5c:	8812      	ldrh	r2, [r2, #0]
 8005d5e:	2120      	movs	r1, #32
 8005d60:	404a      	eors	r2, r1
 8005d62:	801a      	strh	r2, [r3, #0]
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	18d3      	adds	r3, r2, r3
 8005d6e:	183a      	adds	r2, r7, r0
 8005d70:	8812      	ldrh	r2, [r2, #0]
 8005d72:	4920      	ldr	r1, [pc, #128]	; (8005df4 <USB_ActivateEndpoint+0x6d0>)
 8005d74:	430a      	orrs	r2, r1
 8005d76:	b292      	uxth	r2, r2
 8005d78:	801a      	strh	r2, [r3, #0]
 8005d7a:	e016      	b.n	8005daa <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	18d3      	adds	r3, r2, r3
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	2046      	movs	r0, #70	; 0x46
 8005d8c:	183b      	adds	r3, r7, r0
 8005d8e:	491e      	ldr	r1, [pc, #120]	; (8005e08 <USB_ActivateEndpoint+0x6e4>)
 8005d90:	400a      	ands	r2, r1
 8005d92:	801a      	strh	r2, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	18d3      	adds	r3, r2, r3
 8005d9e:	183a      	adds	r2, r7, r0
 8005da0:	8812      	ldrh	r2, [r2, #0]
 8005da2:	4914      	ldr	r1, [pc, #80]	; (8005df4 <USB_ActivateEndpoint+0x6d0>)
 8005da4:	430a      	orrs	r2, r1
 8005da6:	b292      	uxth	r2, r2
 8005da8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	18d3      	adds	r3, r2, r3
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	2042      	movs	r0, #66	; 0x42
 8005dba:	183b      	adds	r3, r7, r0
 8005dbc:	4911      	ldr	r1, [pc, #68]	; (8005e04 <USB_ActivateEndpoint+0x6e0>)
 8005dbe:	400a      	ands	r2, r1
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	183a      	adds	r2, r7, r0
 8005dce:	8812      	ldrh	r2, [r2, #0]
 8005dd0:	4908      	ldr	r1, [pc, #32]	; (8005df4 <USB_ActivateEndpoint+0x6d0>)
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	b292      	uxth	r2, r2
 8005dd6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005dd8:	236f      	movs	r3, #111	; 0x6f
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	781b      	ldrb	r3, [r3, #0]
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b01c      	add	sp, #112	; 0x70
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	ffff8f8f 	.word	0xffff8f8f
 8005dec:	ffff8180 	.word	0xffff8180
 8005df0:	ffff8e8f 	.word	0xffff8e8f
 8005df4:	ffff8080 	.word	0xffff8080
 8005df8:	00000404 	.word	0x00000404
 8005dfc:	ffffc080 	.word	0xffffc080
 8005e00:	ffff80c0 	.word	0xffff80c0
 8005e04:	ffffbf8f 	.word	0xffffbf8f
 8005e08:	ffff8fbf 	.word	0xffff8fbf

08005e0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08c      	sub	sp, #48	; 0x30
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	7b1b      	ldrb	r3, [r3, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d000      	beq.n	8005e20 <USB_DeactivateEndpoint+0x14>
 8005e1e:	e07e      	b.n	8005f1e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d03c      	beq.n	8005ea2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	18d2      	adds	r2, r2, r3
 8005e32:	210c      	movs	r1, #12
 8005e34:	187b      	adds	r3, r7, r1
 8005e36:	8812      	ldrh	r2, [r2, #0]
 8005e38:	801a      	strh	r2, [r3, #0]
 8005e3a:	187b      	adds	r3, r7, r1
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	2240      	movs	r2, #64	; 0x40
 8005e40:	4013      	ands	r3, r2
 8005e42:	d016      	beq.n	8005e72 <USB_DeactivateEndpoint+0x66>
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	18d3      	adds	r3, r2, r3
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	200a      	movs	r0, #10
 8005e54:	183b      	adds	r3, r7, r0
 8005e56:	49c7      	ldr	r1, [pc, #796]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 8005e58:	400a      	ands	r2, r1
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	18d3      	adds	r3, r2, r3
 8005e66:	183a      	adds	r2, r7, r0
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	49c3      	ldr	r1, [pc, #780]	; (8006178 <USB_DeactivateEndpoint+0x36c>)
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	18d3      	adds	r3, r2, r3
 8005e7c:	881b      	ldrh	r3, [r3, #0]
 8005e7e:	b29a      	uxth	r2, r3
 8005e80:	2008      	movs	r0, #8
 8005e82:	183b      	adds	r3, r7, r0
 8005e84:	49bd      	ldr	r1, [pc, #756]	; (800617c <USB_DeactivateEndpoint+0x370>)
 8005e86:	400a      	ands	r2, r1
 8005e88:	801a      	strh	r2, [r3, #0]
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	18d3      	adds	r3, r2, r3
 8005e94:	183a      	adds	r2, r7, r0
 8005e96:	8812      	ldrh	r2, [r2, #0]
 8005e98:	49b9      	ldr	r1, [pc, #740]	; (8006180 <USB_DeactivateEndpoint+0x374>)
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	b292      	uxth	r2, r2
 8005e9e:	801a      	strh	r2, [r3, #0]
 8005ea0:	e163      	b.n	800616a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	18d2      	adds	r2, r2, r3
 8005eac:	2112      	movs	r1, #18
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	801a      	strh	r2, [r3, #0]
 8005eb4:	187b      	adds	r3, r7, r1
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	2380      	movs	r3, #128	; 0x80
 8005eba:	01db      	lsls	r3, r3, #7
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d016      	beq.n	8005eee <USB_DeactivateEndpoint+0xe2>
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	18d3      	adds	r3, r2, r3
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	2010      	movs	r0, #16
 8005ed0:	183b      	adds	r3, r7, r0
 8005ed2:	49a8      	ldr	r1, [pc, #672]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 8005ed4:	400a      	ands	r2, r1
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	18d3      	adds	r3, r2, r3
 8005ee2:	183a      	adds	r2, r7, r0
 8005ee4:	8812      	ldrh	r2, [r2, #0]
 8005ee6:	49a7      	ldr	r1, [pc, #668]	; (8006184 <USB_DeactivateEndpoint+0x378>)
 8005ee8:	430a      	orrs	r2, r1
 8005eea:	b292      	uxth	r2, r2
 8005eec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	18d3      	adds	r3, r2, r3
 8005ef8:	881b      	ldrh	r3, [r3, #0]
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	200e      	movs	r0, #14
 8005efe:	183b      	adds	r3, r7, r0
 8005f00:	49a1      	ldr	r1, [pc, #644]	; (8006188 <USB_DeactivateEndpoint+0x37c>)
 8005f02:	400a      	ands	r2, r1
 8005f04:	801a      	strh	r2, [r3, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	18d3      	adds	r3, r2, r3
 8005f10:	183a      	adds	r2, r7, r0
 8005f12:	8812      	ldrh	r2, [r2, #0]
 8005f14:	499a      	ldr	r1, [pc, #616]	; (8006180 <USB_DeactivateEndpoint+0x374>)
 8005f16:	430a      	orrs	r2, r1
 8005f18:	b292      	uxth	r2, r2
 8005f1a:	801a      	strh	r2, [r3, #0]
 8005f1c:	e125      	b.n	800616a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	785b      	ldrb	r3, [r3, #1]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <USB_DeactivateEndpoint+0x11c>
 8005f26:	e090      	b.n	800604a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	18d2      	adds	r2, r2, r3
 8005f32:	2120      	movs	r1, #32
 8005f34:	187b      	adds	r3, r7, r1
 8005f36:	8812      	ldrh	r2, [r2, #0]
 8005f38:	801a      	strh	r2, [r3, #0]
 8005f3a:	187b      	adds	r3, r7, r1
 8005f3c:	881a      	ldrh	r2, [r3, #0]
 8005f3e:	2380      	movs	r3, #128	; 0x80
 8005f40:	01db      	lsls	r3, r3, #7
 8005f42:	4013      	ands	r3, r2
 8005f44:	d016      	beq.n	8005f74 <USB_DeactivateEndpoint+0x168>
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	18d3      	adds	r3, r2, r3
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	201e      	movs	r0, #30
 8005f56:	183b      	adds	r3, r7, r0
 8005f58:	4986      	ldr	r1, [pc, #536]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 8005f5a:	400a      	ands	r2, r1
 8005f5c:	801a      	strh	r2, [r3, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	18d3      	adds	r3, r2, r3
 8005f68:	183a      	adds	r2, r7, r0
 8005f6a:	8812      	ldrh	r2, [r2, #0]
 8005f6c:	4985      	ldr	r1, [pc, #532]	; (8006184 <USB_DeactivateEndpoint+0x378>)
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	b292      	uxth	r2, r2
 8005f72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	18d2      	adds	r2, r2, r3
 8005f7e:	211c      	movs	r1, #28
 8005f80:	187b      	adds	r3, r7, r1
 8005f82:	8812      	ldrh	r2, [r2, #0]
 8005f84:	801a      	strh	r2, [r3, #0]
 8005f86:	187b      	adds	r3, r7, r1
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	2240      	movs	r2, #64	; 0x40
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	d016      	beq.n	8005fbe <USB_DeactivateEndpoint+0x1b2>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	18d3      	adds	r3, r2, r3
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	201a      	movs	r0, #26
 8005fa0:	183b      	adds	r3, r7, r0
 8005fa2:	4974      	ldr	r1, [pc, #464]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 8005fa4:	400a      	ands	r2, r1
 8005fa6:	801a      	strh	r2, [r3, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	18d3      	adds	r3, r2, r3
 8005fb2:	183a      	adds	r2, r7, r0
 8005fb4:	8812      	ldrh	r2, [r2, #0]
 8005fb6:	4970      	ldr	r1, [pc, #448]	; (8006178 <USB_DeactivateEndpoint+0x36c>)
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	b292      	uxth	r2, r2
 8005fbc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	18d3      	adds	r3, r2, r3
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	2018      	movs	r0, #24
 8005fce:	183b      	adds	r3, r7, r0
 8005fd0:	4968      	ldr	r1, [pc, #416]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 8005fd2:	400a      	ands	r2, r1
 8005fd4:	801a      	strh	r2, [r3, #0]
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	18d3      	adds	r3, r2, r3
 8005fe0:	183a      	adds	r2, r7, r0
 8005fe2:	8812      	ldrh	r2, [r2, #0]
 8005fe4:	4964      	ldr	r1, [pc, #400]	; (8006178 <USB_DeactivateEndpoint+0x36c>)
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	b292      	uxth	r2, r2
 8005fea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	18d3      	adds	r3, r2, r3
 8005ff6:	881b      	ldrh	r3, [r3, #0]
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	2016      	movs	r0, #22
 8005ffc:	183b      	adds	r3, r7, r0
 8005ffe:	4962      	ldr	r1, [pc, #392]	; (8006188 <USB_DeactivateEndpoint+0x37c>)
 8006000:	400a      	ands	r2, r1
 8006002:	801a      	strh	r2, [r3, #0]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	18d3      	adds	r3, r2, r3
 800600e:	183a      	adds	r2, r7, r0
 8006010:	8812      	ldrh	r2, [r2, #0]
 8006012:	495b      	ldr	r1, [pc, #364]	; (8006180 <USB_DeactivateEndpoint+0x374>)
 8006014:	430a      	orrs	r2, r1
 8006016:	b292      	uxth	r2, r2
 8006018:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	18d3      	adds	r3, r2, r3
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29a      	uxth	r2, r3
 8006028:	2014      	movs	r0, #20
 800602a:	183b      	adds	r3, r7, r0
 800602c:	4953      	ldr	r1, [pc, #332]	; (800617c <USB_DeactivateEndpoint+0x370>)
 800602e:	400a      	ands	r2, r1
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	183a      	adds	r2, r7, r0
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	494f      	ldr	r1, [pc, #316]	; (8006180 <USB_DeactivateEndpoint+0x374>)
 8006042:	430a      	orrs	r2, r1
 8006044:	b292      	uxth	r2, r2
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e08f      	b.n	800616a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	18d2      	adds	r2, r2, r3
 8006054:	212e      	movs	r1, #46	; 0x2e
 8006056:	187b      	adds	r3, r7, r1
 8006058:	8812      	ldrh	r2, [r2, #0]
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	187b      	adds	r3, r7, r1
 800605e:	881a      	ldrh	r2, [r3, #0]
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4013      	ands	r3, r2
 8006066:	d016      	beq.n	8006096 <USB_DeactivateEndpoint+0x28a>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	18d3      	adds	r3, r2, r3
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29a      	uxth	r2, r3
 8006076:	202c      	movs	r0, #44	; 0x2c
 8006078:	183b      	adds	r3, r7, r0
 800607a:	493e      	ldr	r1, [pc, #248]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 800607c:	400a      	ands	r2, r1
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	18d3      	adds	r3, r2, r3
 800608a:	183a      	adds	r2, r7, r0
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	493d      	ldr	r1, [pc, #244]	; (8006184 <USB_DeactivateEndpoint+0x378>)
 8006090:	430a      	orrs	r2, r1
 8006092:	b292      	uxth	r2, r2
 8006094:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	18d2      	adds	r2, r2, r3
 80060a0:	212a      	movs	r1, #42	; 0x2a
 80060a2:	187b      	adds	r3, r7, r1
 80060a4:	8812      	ldrh	r2, [r2, #0]
 80060a6:	801a      	strh	r2, [r3, #0]
 80060a8:	187b      	adds	r3, r7, r1
 80060aa:	881b      	ldrh	r3, [r3, #0]
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	4013      	ands	r3, r2
 80060b0:	d016      	beq.n	80060e0 <USB_DeactivateEndpoint+0x2d4>
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	18d3      	adds	r3, r2, r3
 80060bc:	881b      	ldrh	r3, [r3, #0]
 80060be:	b29a      	uxth	r2, r3
 80060c0:	2028      	movs	r0, #40	; 0x28
 80060c2:	183b      	adds	r3, r7, r0
 80060c4:	492b      	ldr	r1, [pc, #172]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 80060c6:	400a      	ands	r2, r1
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	183a      	adds	r2, r7, r0
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	4927      	ldr	r1, [pc, #156]	; (8006178 <USB_DeactivateEndpoint+0x36c>)
 80060da:	430a      	orrs	r2, r1
 80060dc:	b292      	uxth	r2, r2
 80060de:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	18d3      	adds	r3, r2, r3
 80060ea:	881b      	ldrh	r3, [r3, #0]
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	2026      	movs	r0, #38	; 0x26
 80060f0:	183b      	adds	r3, r7, r0
 80060f2:	4920      	ldr	r1, [pc, #128]	; (8006174 <USB_DeactivateEndpoint+0x368>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	801a      	strh	r2, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	18d3      	adds	r3, r2, r3
 8006102:	183a      	adds	r2, r7, r0
 8006104:	8812      	ldrh	r2, [r2, #0]
 8006106:	491f      	ldr	r1, [pc, #124]	; (8006184 <USB_DeactivateEndpoint+0x378>)
 8006108:	430a      	orrs	r2, r1
 800610a:	b292      	uxth	r2, r2
 800610c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	18d3      	adds	r3, r2, r3
 8006118:	881b      	ldrh	r3, [r3, #0]
 800611a:	b29a      	uxth	r2, r3
 800611c:	2024      	movs	r0, #36	; 0x24
 800611e:	183b      	adds	r3, r7, r0
 8006120:	4916      	ldr	r1, [pc, #88]	; (800617c <USB_DeactivateEndpoint+0x370>)
 8006122:	400a      	ands	r2, r1
 8006124:	801a      	strh	r2, [r3, #0]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	18d3      	adds	r3, r2, r3
 8006130:	183a      	adds	r2, r7, r0
 8006132:	8812      	ldrh	r2, [r2, #0]
 8006134:	4912      	ldr	r1, [pc, #72]	; (8006180 <USB_DeactivateEndpoint+0x374>)
 8006136:	430a      	orrs	r2, r1
 8006138:	b292      	uxth	r2, r2
 800613a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800613c:	687a      	ldr	r2, [r7, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	18d3      	adds	r3, r2, r3
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29a      	uxth	r2, r3
 800614a:	2022      	movs	r0, #34	; 0x22
 800614c:	183b      	adds	r3, r7, r0
 800614e:	490e      	ldr	r1, [pc, #56]	; (8006188 <USB_DeactivateEndpoint+0x37c>)
 8006150:	400a      	ands	r2, r1
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	18d3      	adds	r3, r2, r3
 800615e:	183a      	adds	r2, r7, r0
 8006160:	8812      	ldrh	r2, [r2, #0]
 8006162:	4907      	ldr	r1, [pc, #28]	; (8006180 <USB_DeactivateEndpoint+0x374>)
 8006164:	430a      	orrs	r2, r1
 8006166:	b292      	uxth	r2, r2
 8006168:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800616a:	2300      	movs	r3, #0
}
 800616c:	0018      	movs	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	b00c      	add	sp, #48	; 0x30
 8006172:	bd80      	pop	{r7, pc}
 8006174:	ffff8f8f 	.word	0xffff8f8f
 8006178:	ffff80c0 	.word	0xffff80c0
 800617c:	ffff8fbf 	.word	0xffff8fbf
 8006180:	ffff8080 	.word	0xffff8080
 8006184:	ffffc080 	.word	0xffffc080
 8006188:	ffffbf8f 	.word	0xffffbf8f

0800618c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b0c3      	sub	sp, #268	; 0x10c
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d001      	beq.n	80061a2 <USB_EPStartXfer+0x16>
 800619e:	f000 fcef 	bl	8006b80 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d905      	bls.n	80061ba <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	1d7a      	adds	r2, r7, #5
 80061b4:	32ff      	adds	r2, #255	; 0xff
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	e004      	b.n	80061c4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	1d7a      	adds	r2, r7, #5
 80061c0:	32ff      	adds	r2, #255	; 0xff
 80061c2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	7b1b      	ldrb	r3, [r3, #12]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d125      	bne.n	8006218 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	6959      	ldr	r1, [r3, #20]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	88da      	ldrh	r2, [r3, #6]
 80061d4:	1d7b      	adds	r3, r7, #5
 80061d6:	33ff      	adds	r3, #255	; 0xff
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f001 f9c9 	bl	8007574 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	613b      	str	r3, [r7, #16]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2250      	movs	r2, #80	; 0x50
 80061ea:	5a9b      	ldrh	r3, [r3, r2]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	001a      	movs	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	613b      	str	r3, [r7, #16]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	00da      	lsls	r2, r3, #3
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	18d3      	adds	r3, r2, r3
 8006200:	4acc      	ldr	r2, [pc, #816]	; (8006534 <USB_EPStartXfer+0x3a8>)
 8006202:	4694      	mov	ip, r2
 8006204:	4463      	add	r3, ip
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	1d7b      	adds	r3, r7, #5
 800620a:	33ff      	adds	r3, #255	; 0xff
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	f000 fc8f 	bl	8006b36 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	78db      	ldrb	r3, [r3, #3]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d000      	beq.n	8006222 <USB_EPStartXfer+0x96>
 8006220:	e33a      	b.n	8006898 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6a1a      	ldr	r2, [r3, #32]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	429a      	cmp	r2, r3
 800622c:	d800      	bhi.n	8006230 <USB_EPStartXfer+0xa4>
 800622e:	e2df      	b.n	80067f0 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	18d3      	adds	r3, r2, r3
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29a      	uxth	r2, r3
 800623e:	2056      	movs	r0, #86	; 0x56
 8006240:	183b      	adds	r3, r7, r0
 8006242:	49bd      	ldr	r1, [pc, #756]	; (8006538 <USB_EPStartXfer+0x3ac>)
 8006244:	400a      	ands	r2, r1
 8006246:	801a      	strh	r2, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	18d3      	adds	r3, r2, r3
 8006252:	183a      	adds	r2, r7, r0
 8006254:	8812      	ldrh	r2, [r2, #0]
 8006256:	49b9      	ldr	r1, [pc, #740]	; (800653c <USB_EPStartXfer+0x3b0>)
 8006258:	430a      	orrs	r2, r1
 800625a:	b292      	uxth	r2, r2
 800625c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	1d7b      	adds	r3, r7, #5
 8006264:	33ff      	adds	r3, #255	; 0xff
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	18d3      	adds	r3, r2, r3
 8006278:	881b      	ldrh	r3, [r3, #0]
 800627a:	b29b      	uxth	r3, r3
 800627c:	001a      	movs	r2, r3
 800627e:	2340      	movs	r3, #64	; 0x40
 8006280:	4013      	ands	r3, r2
 8006282:	d100      	bne.n	8006286 <USB_EPStartXfer+0xfa>
 8006284:	e162      	b.n	800654c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	633b      	str	r3, [r7, #48]	; 0x30
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	785b      	ldrb	r3, [r3, #1]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d16a      	bne.n	8006368 <USB_EPStartXfer+0x1dc>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	62bb      	str	r3, [r7, #40]	; 0x28
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2250      	movs	r2, #80	; 0x50
 800629a:	5a9b      	ldrh	r3, [r3, r2]
 800629c:	b29b      	uxth	r3, r3
 800629e:	001a      	movs	r2, r3
 80062a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062a2:	189b      	adds	r3, r3, r2
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	00da      	lsls	r2, r3, #3
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	4aa3      	ldr	r2, [pc, #652]	; (8006540 <USB_EPStartXfer+0x3b4>)
 80062b2:	4694      	mov	ip, r2
 80062b4:	4463      	add	r3, ip
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	1d7b      	adds	r3, r7, #5
 80062ba:	33ff      	adds	r3, #255	; 0xff
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d110      	bne.n	80062e4 <USB_EPStartXfer+0x158>
 80062c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	4a9e      	ldr	r2, [pc, #632]	; (8006544 <USB_EPStartXfer+0x3b8>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	801a      	strh	r2, [r3, #0]
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	881b      	ldrh	r3, [r3, #0]
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	4a9b      	ldr	r2, [pc, #620]	; (8006548 <USB_EPStartXfer+0x3bc>)
 80062da:	4313      	orrs	r3, r2
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e05c      	b.n	800639e <USB_EPStartXfer+0x212>
 80062e4:	1d7b      	adds	r3, r7, #5
 80062e6:	33ff      	adds	r3, #255	; 0xff
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b3e      	cmp	r3, #62	; 0x3e
 80062ec:	d81c      	bhi.n	8006328 <USB_EPStartXfer+0x19c>
 80062ee:	1d7b      	adds	r3, r7, #5
 80062f0:	33ff      	adds	r3, #255	; 0xff
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	1c7a      	adds	r2, r7, #1
 80062f8:	32ff      	adds	r2, #255	; 0xff
 80062fa:	6013      	str	r3, [r2, #0]
 80062fc:	1d7b      	adds	r3, r7, #5
 80062fe:	33ff      	adds	r3, #255	; 0xff
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2201      	movs	r2, #1
 8006304:	4013      	ands	r3, r2
 8006306:	d006      	beq.n	8006316 <USB_EPStartXfer+0x18a>
 8006308:	1c7b      	adds	r3, r7, #1
 800630a:	33ff      	adds	r3, #255	; 0xff
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3301      	adds	r3, #1
 8006310:	1c7a      	adds	r2, r7, #1
 8006312:	32ff      	adds	r2, #255	; 0xff
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	1c7b      	adds	r3, r7, #1
 8006318:	33ff      	adds	r3, #255	; 0xff
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	b29b      	uxth	r3, r3
 800631e:	029b      	lsls	r3, r3, #10
 8006320:	b29a      	uxth	r2, r3
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	801a      	strh	r2, [r3, #0]
 8006326:	e03a      	b.n	800639e <USB_EPStartXfer+0x212>
 8006328:	1d7b      	adds	r3, r7, #5
 800632a:	33ff      	adds	r3, #255	; 0xff
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	1c7a      	adds	r2, r7, #1
 8006332:	32ff      	adds	r2, #255	; 0xff
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	1d7b      	adds	r3, r7, #5
 8006338:	33ff      	adds	r3, #255	; 0xff
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	221f      	movs	r2, #31
 800633e:	4013      	ands	r3, r2
 8006340:	d106      	bne.n	8006350 <USB_EPStartXfer+0x1c4>
 8006342:	1c7b      	adds	r3, r7, #1
 8006344:	33ff      	adds	r3, #255	; 0xff
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	1c7a      	adds	r2, r7, #1
 800634c:	32ff      	adds	r2, #255	; 0xff
 800634e:	6013      	str	r3, [r2, #0]
 8006350:	1c7b      	adds	r3, r7, #1
 8006352:	33ff      	adds	r3, #255	; 0xff
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	b29b      	uxth	r3, r3
 8006358:	029b      	lsls	r3, r3, #10
 800635a:	b29b      	uxth	r3, r3
 800635c:	4a7a      	ldr	r2, [pc, #488]	; (8006548 <USB_EPStartXfer+0x3bc>)
 800635e:	4313      	orrs	r3, r2
 8006360:	b29a      	uxth	r2, r3
 8006362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006364:	801a      	strh	r2, [r3, #0]
 8006366:	e01a      	b.n	800639e <USB_EPStartXfer+0x212>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	785b      	ldrb	r3, [r3, #1]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d116      	bne.n	800639e <USB_EPStartXfer+0x212>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2250      	movs	r2, #80	; 0x50
 8006374:	5a9b      	ldrh	r3, [r3, r2]
 8006376:	b29b      	uxth	r3, r3
 8006378:	001a      	movs	r2, r3
 800637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637c:	189b      	adds	r3, r3, r2
 800637e:	633b      	str	r3, [r7, #48]	; 0x30
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	00da      	lsls	r2, r3, #3
 8006386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006388:	18d3      	adds	r3, r2, r3
 800638a:	4a6d      	ldr	r2, [pc, #436]	; (8006540 <USB_EPStartXfer+0x3b4>)
 800638c:	4694      	mov	ip, r2
 800638e:	4463      	add	r3, ip
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	1d7b      	adds	r3, r7, #5
 8006394:	33ff      	adds	r3, #255	; 0xff
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	b29a      	uxth	r2, r3
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800639e:	2076      	movs	r0, #118	; 0x76
 80063a0:	183b      	adds	r3, r7, r0
 80063a2:	683a      	ldr	r2, [r7, #0]
 80063a4:	8952      	ldrh	r2, [r2, #10]
 80063a6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	6959      	ldr	r1, [r3, #20]
 80063ac:	1d7b      	adds	r3, r7, #5
 80063ae:	33ff      	adds	r3, #255	; 0xff
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	b29c      	uxth	r4, r3
 80063b4:	183b      	adds	r3, r7, r0
 80063b6:	881a      	ldrh	r2, [r3, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	0023      	movs	r3, r4
 80063bc:	f001 f8da 	bl	8007574 <USB_WritePMA>
            ep->xfer_buff += len;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	695a      	ldr	r2, [r3, #20]
 80063c4:	1d7b      	adds	r3, r7, #5
 80063c6:	33ff      	adds	r3, #255	; 0xff
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	18d2      	adds	r2, r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d908      	bls.n	80063ee <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	1d7b      	adds	r3, r7, #5
 80063e2:	33ff      	adds	r3, #255	; 0xff
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	1ad2      	subs	r2, r2, r3
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	621a      	str	r2, [r3, #32]
 80063ec:	e007      	b.n	80063fe <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	1d7a      	adds	r2, r7, #5
 80063f4:	32ff      	adds	r2, #255	; 0xff
 80063f6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2200      	movs	r2, #0
 80063fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d166      	bne.n	80064d4 <USB_EPStartXfer+0x348>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	61bb      	str	r3, [r7, #24]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2250      	movs	r2, #80	; 0x50
 800640e:	5a9b      	ldrh	r3, [r3, r2]
 8006410:	b29b      	uxth	r3, r3
 8006412:	001a      	movs	r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	189b      	adds	r3, r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	00da      	lsls	r2, r3, #3
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	18d3      	adds	r3, r2, r3
 8006424:	4a43      	ldr	r2, [pc, #268]	; (8006534 <USB_EPStartXfer+0x3a8>)
 8006426:	4694      	mov	ip, r2
 8006428:	4463      	add	r3, ip
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	1d7b      	adds	r3, r7, #5
 800642e:	33ff      	adds	r3, #255	; 0xff
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d110      	bne.n	8006458 <USB_EPStartXfer+0x2cc>
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	881b      	ldrh	r3, [r3, #0]
 800643a:	b29b      	uxth	r3, r3
 800643c:	4a41      	ldr	r2, [pc, #260]	; (8006544 <USB_EPStartXfer+0x3b8>)
 800643e:	4013      	ands	r3, r2
 8006440:	b29a      	uxth	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	881b      	ldrh	r3, [r3, #0]
 800644a:	b29b      	uxth	r3, r3
 800644c:	4a3e      	ldr	r2, [pc, #248]	; (8006548 <USB_EPStartXfer+0x3bc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	801a      	strh	r2, [r3, #0]
 8006456:	e05a      	b.n	800650e <USB_EPStartXfer+0x382>
 8006458:	1d7b      	adds	r3, r7, #5
 800645a:	33ff      	adds	r3, #255	; 0xff
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b3e      	cmp	r3, #62	; 0x3e
 8006460:	d81a      	bhi.n	8006498 <USB_EPStartXfer+0x30c>
 8006462:	1d7b      	adds	r3, r7, #5
 8006464:	33ff      	adds	r3, #255	; 0xff
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	21fc      	movs	r1, #252	; 0xfc
 800646c:	187a      	adds	r2, r7, r1
 800646e:	6013      	str	r3, [r2, #0]
 8006470:	1d7b      	adds	r3, r7, #5
 8006472:	33ff      	adds	r3, #255	; 0xff
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2201      	movs	r2, #1
 8006478:	4013      	ands	r3, r2
 800647a:	d004      	beq.n	8006486 <USB_EPStartXfer+0x2fa>
 800647c:	187b      	adds	r3, r7, r1
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3301      	adds	r3, #1
 8006482:	187a      	adds	r2, r7, r1
 8006484:	6013      	str	r3, [r2, #0]
 8006486:	23fc      	movs	r3, #252	; 0xfc
 8006488:	18fb      	adds	r3, r7, r3
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	b29b      	uxth	r3, r3
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	b29a      	uxth	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e03a      	b.n	800650e <USB_EPStartXfer+0x382>
 8006498:	1d7b      	adds	r3, r7, #5
 800649a:	33ff      	adds	r3, #255	; 0xff
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	21fc      	movs	r1, #252	; 0xfc
 80064a2:	187a      	adds	r2, r7, r1
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	1d7b      	adds	r3, r7, #5
 80064a8:	33ff      	adds	r3, #255	; 0xff
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	221f      	movs	r2, #31
 80064ae:	4013      	ands	r3, r2
 80064b0:	d104      	bne.n	80064bc <USB_EPStartXfer+0x330>
 80064b2:	187b      	adds	r3, r7, r1
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	187a      	adds	r2, r7, r1
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	23fc      	movs	r3, #252	; 0xfc
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	029b      	lsls	r3, r3, #10
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <USB_EPStartXfer+0x3bc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	801a      	strh	r2, [r3, #0]
 80064d2:	e01c      	b.n	800650e <USB_EPStartXfer+0x382>
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	785b      	ldrb	r3, [r3, #1]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d118      	bne.n	800650e <USB_EPStartXfer+0x382>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	623b      	str	r3, [r7, #32]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2250      	movs	r2, #80	; 0x50
 80064e4:	5a9b      	ldrh	r3, [r3, r2]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	001a      	movs	r2, r3
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	189b      	adds	r3, r3, r2
 80064ee:	623b      	str	r3, [r7, #32]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	00da      	lsls	r2, r3, #3
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	18d3      	adds	r3, r2, r3
 80064fa:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <USB_EPStartXfer+0x3a8>)
 80064fc:	4694      	mov	ip, r2
 80064fe:	4463      	add	r3, ip
 8006500:	61fb      	str	r3, [r7, #28]
 8006502:	1d7b      	adds	r3, r7, #5
 8006504:	33ff      	adds	r3, #255	; 0xff
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b29a      	uxth	r2, r3
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800650e:	2076      	movs	r0, #118	; 0x76
 8006510:	183b      	adds	r3, r7, r0
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	8912      	ldrh	r2, [r2, #8]
 8006516:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6959      	ldr	r1, [r3, #20]
 800651c:	1d7b      	adds	r3, r7, #5
 800651e:	33ff      	adds	r3, #255	; 0xff
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	b29c      	uxth	r4, r3
 8006524:	183b      	adds	r3, r7, r0
 8006526:	881a      	ldrh	r2, [r3, #0]
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	0023      	movs	r3, r4
 800652c:	f001 f822 	bl	8007574 <USB_WritePMA>
 8006530:	e301      	b.n	8006b36 <USB_EPStartXfer+0x9aa>
 8006532:	46c0      	nop			; (mov r8, r8)
 8006534:	00000402 	.word	0x00000402
 8006538:	ffff8f8f 	.word	0xffff8f8f
 800653c:	ffff8180 	.word	0xffff8180
 8006540:	00000406 	.word	0x00000406
 8006544:	ffff83ff 	.word	0xffff83ff
 8006548:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d166      	bne.n	8006622 <USB_EPStartXfer+0x496>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	64bb      	str	r3, [r7, #72]	; 0x48
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2250      	movs	r2, #80	; 0x50
 800655c:	5a9b      	ldrh	r3, [r3, r2]
 800655e:	b29b      	uxth	r3, r3
 8006560:	001a      	movs	r2, r3
 8006562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006564:	189b      	adds	r3, r3, r2
 8006566:	64bb      	str	r3, [r7, #72]	; 0x48
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	00da      	lsls	r2, r3, #3
 800656e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006570:	18d3      	adds	r3, r2, r3
 8006572:	4ac3      	ldr	r2, [pc, #780]	; (8006880 <USB_EPStartXfer+0x6f4>)
 8006574:	4694      	mov	ip, r2
 8006576:	4463      	add	r3, ip
 8006578:	647b      	str	r3, [r7, #68]	; 0x44
 800657a:	1d7b      	adds	r3, r7, #5
 800657c:	33ff      	adds	r3, #255	; 0xff
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d110      	bne.n	80065a6 <USB_EPStartXfer+0x41a>
 8006584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	4abe      	ldr	r2, [pc, #760]	; (8006884 <USB_EPStartXfer+0x6f8>)
 800658c:	4013      	ands	r3, r2
 800658e:	b29a      	uxth	r2, r3
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	4abb      	ldr	r2, [pc, #748]	; (8006888 <USB_EPStartXfer+0x6fc>)
 800659c:	4313      	orrs	r3, r2
 800659e:	b29a      	uxth	r2, r3
 80065a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065a2:	801a      	strh	r2, [r3, #0]
 80065a4:	e05a      	b.n	800665c <USB_EPStartXfer+0x4d0>
 80065a6:	1d7b      	adds	r3, r7, #5
 80065a8:	33ff      	adds	r3, #255	; 0xff
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b3e      	cmp	r3, #62	; 0x3e
 80065ae:	d81a      	bhi.n	80065e6 <USB_EPStartXfer+0x45a>
 80065b0:	1d7b      	adds	r3, r7, #5
 80065b2:	33ff      	adds	r3, #255	; 0xff
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	085b      	lsrs	r3, r3, #1
 80065b8:	21f8      	movs	r1, #248	; 0xf8
 80065ba:	187a      	adds	r2, r7, r1
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	1d7b      	adds	r3, r7, #5
 80065c0:	33ff      	adds	r3, #255	; 0xff
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	4013      	ands	r3, r2
 80065c8:	d004      	beq.n	80065d4 <USB_EPStartXfer+0x448>
 80065ca:	187b      	adds	r3, r7, r1
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	187a      	adds	r2, r7, r1
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	23f8      	movs	r3, #248	; 0xf8
 80065d6:	18fb      	adds	r3, r7, r3
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e03a      	b.n	800665c <USB_EPStartXfer+0x4d0>
 80065e6:	1d7b      	adds	r3, r7, #5
 80065e8:	33ff      	adds	r3, #255	; 0xff
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	095b      	lsrs	r3, r3, #5
 80065ee:	21f8      	movs	r1, #248	; 0xf8
 80065f0:	187a      	adds	r2, r7, r1
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	1d7b      	adds	r3, r7, #5
 80065f6:	33ff      	adds	r3, #255	; 0xff
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	221f      	movs	r2, #31
 80065fc:	4013      	ands	r3, r2
 80065fe:	d104      	bne.n	800660a <USB_EPStartXfer+0x47e>
 8006600:	187b      	adds	r3, r7, r1
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3b01      	subs	r3, #1
 8006606:	187a      	adds	r2, r7, r1
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	23f8      	movs	r3, #248	; 0xf8
 800660c:	18fb      	adds	r3, r7, r3
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4a9c      	ldr	r2, [pc, #624]	; (8006888 <USB_EPStartXfer+0x6fc>)
 8006618:	4313      	orrs	r3, r2
 800661a:	b29a      	uxth	r2, r3
 800661c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800661e:	801a      	strh	r2, [r3, #0]
 8006620:	e01c      	b.n	800665c <USB_EPStartXfer+0x4d0>
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	785b      	ldrb	r3, [r3, #1]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d118      	bne.n	800665c <USB_EPStartXfer+0x4d0>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	653b      	str	r3, [r7, #80]	; 0x50
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2250      	movs	r2, #80	; 0x50
 8006632:	5a9b      	ldrh	r3, [r3, r2]
 8006634:	b29b      	uxth	r3, r3
 8006636:	001a      	movs	r2, r3
 8006638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800663a:	189b      	adds	r3, r3, r2
 800663c:	653b      	str	r3, [r7, #80]	; 0x50
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	00da      	lsls	r2, r3, #3
 8006644:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006646:	18d3      	adds	r3, r2, r3
 8006648:	4a8d      	ldr	r2, [pc, #564]	; (8006880 <USB_EPStartXfer+0x6f4>)
 800664a:	4694      	mov	ip, r2
 800664c:	4463      	add	r3, ip
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006650:	1d7b      	adds	r3, r7, #5
 8006652:	33ff      	adds	r3, #255	; 0xff
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	b29a      	uxth	r2, r3
 8006658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800665a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800665c:	2076      	movs	r0, #118	; 0x76
 800665e:	183b      	adds	r3, r7, r0
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	8912      	ldrh	r2, [r2, #8]
 8006664:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6959      	ldr	r1, [r3, #20]
 800666a:	1d7b      	adds	r3, r7, #5
 800666c:	33ff      	adds	r3, #255	; 0xff
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	b29c      	uxth	r4, r3
 8006672:	183b      	adds	r3, r7, r0
 8006674:	881a      	ldrh	r2, [r3, #0]
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	0023      	movs	r3, r4
 800667a:	f000 ff7b 	bl	8007574 <USB_WritePMA>
            ep->xfer_buff += len;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	695a      	ldr	r2, [r3, #20]
 8006682:	1d7b      	adds	r3, r7, #5
 8006684:	33ff      	adds	r3, #255	; 0xff
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	18d2      	adds	r2, r2, r3
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6a1a      	ldr	r2, [r3, #32]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	429a      	cmp	r2, r3
 8006698:	d908      	bls.n	80066ac <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	6a1a      	ldr	r2, [r3, #32]
 800669e:	1d7b      	adds	r3, r7, #5
 80066a0:	33ff      	adds	r3, #255	; 0xff
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	1ad2      	subs	r2, r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	621a      	str	r2, [r3, #32]
 80066aa:	e007      	b.n	80066bc <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	1d7a      	adds	r2, r7, #5
 80066b2:	32ff      	adds	r2, #255	; 0xff
 80066b4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	2200      	movs	r2, #0
 80066ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	643b      	str	r3, [r7, #64]	; 0x40
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d166      	bne.n	8006796 <USB_EPStartXfer+0x60a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2250      	movs	r2, #80	; 0x50
 80066d0:	5a9b      	ldrh	r3, [r3, r2]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	001a      	movs	r2, r3
 80066d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d8:	189b      	adds	r3, r3, r2
 80066da:	63bb      	str	r3, [r7, #56]	; 0x38
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	00da      	lsls	r2, r3, #3
 80066e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066e4:	18d3      	adds	r3, r2, r3
 80066e6:	4a69      	ldr	r2, [pc, #420]	; (800688c <USB_EPStartXfer+0x700>)
 80066e8:	4694      	mov	ip, r2
 80066ea:	4463      	add	r3, ip
 80066ec:	637b      	str	r3, [r7, #52]	; 0x34
 80066ee:	1d7b      	adds	r3, r7, #5
 80066f0:	33ff      	adds	r3, #255	; 0xff
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d110      	bne.n	800671a <USB_EPStartXfer+0x58e>
 80066f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4a61      	ldr	r2, [pc, #388]	; (8006884 <USB_EPStartXfer+0x6f8>)
 8006700:	4013      	ands	r3, r2
 8006702:	b29a      	uxth	r2, r3
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	801a      	strh	r2, [r3, #0]
 8006708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670a:	881b      	ldrh	r3, [r3, #0]
 800670c:	b29b      	uxth	r3, r3
 800670e:	4a5e      	ldr	r2, [pc, #376]	; (8006888 <USB_EPStartXfer+0x6fc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e058      	b.n	80067cc <USB_EPStartXfer+0x640>
 800671a:	1d7b      	adds	r3, r7, #5
 800671c:	33ff      	adds	r3, #255	; 0xff
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b3e      	cmp	r3, #62	; 0x3e
 8006722:	d81a      	bhi.n	800675a <USB_EPStartXfer+0x5ce>
 8006724:	1d7b      	adds	r3, r7, #5
 8006726:	33ff      	adds	r3, #255	; 0xff
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	085b      	lsrs	r3, r3, #1
 800672c:	21f4      	movs	r1, #244	; 0xf4
 800672e:	187a      	adds	r2, r7, r1
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	1d7b      	adds	r3, r7, #5
 8006734:	33ff      	adds	r3, #255	; 0xff
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	2201      	movs	r2, #1
 800673a:	4013      	ands	r3, r2
 800673c:	d004      	beq.n	8006748 <USB_EPStartXfer+0x5bc>
 800673e:	187b      	adds	r3, r7, r1
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	3301      	adds	r3, #1
 8006744:	187a      	adds	r2, r7, r1
 8006746:	6013      	str	r3, [r2, #0]
 8006748:	23f4      	movs	r3, #244	; 0xf4
 800674a:	18fb      	adds	r3, r7, r3
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	b29b      	uxth	r3, r3
 8006750:	029b      	lsls	r3, r3, #10
 8006752:	b29a      	uxth	r2, r3
 8006754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006756:	801a      	strh	r2, [r3, #0]
 8006758:	e038      	b.n	80067cc <USB_EPStartXfer+0x640>
 800675a:	1d7b      	adds	r3, r7, #5
 800675c:	33ff      	adds	r3, #255	; 0xff
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	21f4      	movs	r1, #244	; 0xf4
 8006764:	187a      	adds	r2, r7, r1
 8006766:	6013      	str	r3, [r2, #0]
 8006768:	1d7b      	adds	r3, r7, #5
 800676a:	33ff      	adds	r3, #255	; 0xff
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	221f      	movs	r2, #31
 8006770:	4013      	ands	r3, r2
 8006772:	d104      	bne.n	800677e <USB_EPStartXfer+0x5f2>
 8006774:	187b      	adds	r3, r7, r1
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	187a      	adds	r2, r7, r1
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	23f4      	movs	r3, #244	; 0xf4
 8006780:	18fb      	adds	r3, r7, r3
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b29b      	uxth	r3, r3
 8006786:	029b      	lsls	r3, r3, #10
 8006788:	b29b      	uxth	r3, r3
 800678a:	4a3f      	ldr	r2, [pc, #252]	; (8006888 <USB_EPStartXfer+0x6fc>)
 800678c:	4313      	orrs	r3, r2
 800678e:	b29a      	uxth	r2, r3
 8006790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006792:	801a      	strh	r2, [r3, #0]
 8006794:	e01a      	b.n	80067cc <USB_EPStartXfer+0x640>
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	785b      	ldrb	r3, [r3, #1]
 800679a:	2b01      	cmp	r3, #1
 800679c:	d116      	bne.n	80067cc <USB_EPStartXfer+0x640>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2250      	movs	r2, #80	; 0x50
 80067a2:	5a9b      	ldrh	r3, [r3, r2]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	001a      	movs	r2, r3
 80067a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067aa:	189b      	adds	r3, r3, r2
 80067ac:	643b      	str	r3, [r7, #64]	; 0x40
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	00da      	lsls	r2, r3, #3
 80067b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b6:	18d3      	adds	r3, r2, r3
 80067b8:	4a34      	ldr	r2, [pc, #208]	; (800688c <USB_EPStartXfer+0x700>)
 80067ba:	4694      	mov	ip, r2
 80067bc:	4463      	add	r3, ip
 80067be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c0:	1d7b      	adds	r3, r7, #5
 80067c2:	33ff      	adds	r3, #255	; 0xff
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067cc:	2076      	movs	r0, #118	; 0x76
 80067ce:	183b      	adds	r3, r7, r0
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	8952      	ldrh	r2, [r2, #10]
 80067d4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	6959      	ldr	r1, [r3, #20]
 80067da:	1d7b      	adds	r3, r7, #5
 80067dc:	33ff      	adds	r3, #255	; 0xff
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	b29c      	uxth	r4, r3
 80067e2:	183b      	adds	r3, r7, r0
 80067e4:	881a      	ldrh	r2, [r3, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	0023      	movs	r3, r4
 80067ea:	f000 fec3 	bl	8007574 <USB_WritePMA>
 80067ee:	e1a2      	b.n	8006b36 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	1d7a      	adds	r2, r7, #5
 80067f6:	32ff      	adds	r2, #255	; 0xff
 80067f8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	18d3      	adds	r3, r2, r3
 8006804:	881b      	ldrh	r3, [r3, #0]
 8006806:	b29a      	uxth	r2, r3
 8006808:	2062      	movs	r0, #98	; 0x62
 800680a:	183b      	adds	r3, r7, r0
 800680c:	4920      	ldr	r1, [pc, #128]	; (8006890 <USB_EPStartXfer+0x704>)
 800680e:	400a      	ands	r2, r1
 8006810:	801a      	strh	r2, [r3, #0]
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	18d3      	adds	r3, r2, r3
 800681c:	183a      	adds	r2, r7, r0
 800681e:	8812      	ldrh	r2, [r2, #0]
 8006820:	491c      	ldr	r1, [pc, #112]	; (8006894 <USB_EPStartXfer+0x708>)
 8006822:	430a      	orrs	r2, r1
 8006824:	b292      	uxth	r2, r2
 8006826:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2250      	movs	r2, #80	; 0x50
 8006830:	5a9b      	ldrh	r3, [r3, r2]
 8006832:	b29b      	uxth	r3, r3
 8006834:	001a      	movs	r2, r3
 8006836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006838:	189b      	adds	r3, r3, r2
 800683a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	00da      	lsls	r2, r3, #3
 8006842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006844:	18d3      	adds	r3, r2, r3
 8006846:	4a0e      	ldr	r2, [pc, #56]	; (8006880 <USB_EPStartXfer+0x6f4>)
 8006848:	4694      	mov	ip, r2
 800684a:	4463      	add	r3, ip
 800684c:	65bb      	str	r3, [r7, #88]	; 0x58
 800684e:	1d7b      	adds	r3, r7, #5
 8006850:	33ff      	adds	r3, #255	; 0xff
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	b29a      	uxth	r2, r3
 8006856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006858:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800685a:	2076      	movs	r0, #118	; 0x76
 800685c:	183b      	adds	r3, r7, r0
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	8912      	ldrh	r2, [r2, #8]
 8006862:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	6959      	ldr	r1, [r3, #20]
 8006868:	1d7b      	adds	r3, r7, #5
 800686a:	33ff      	adds	r3, #255	; 0xff
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	b29c      	uxth	r4, r3
 8006870:	183b      	adds	r3, r7, r0
 8006872:	881a      	ldrh	r2, [r3, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	0023      	movs	r3, r4
 8006878:	f000 fe7c 	bl	8007574 <USB_WritePMA>
 800687c:	e15b      	b.n	8006b36 <USB_EPStartXfer+0x9aa>
 800687e:	46c0      	nop			; (mov r8, r8)
 8006880:	00000402 	.word	0x00000402
 8006884:	ffff83ff 	.word	0xffff83ff
 8006888:	ffff8000 	.word	0xffff8000
 800688c:	00000406 	.word	0x00000406
 8006890:	ffff8e8f 	.word	0xffff8e8f
 8006894:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	6a1a      	ldr	r2, [r3, #32]
 800689c:	1d7b      	adds	r3, r7, #5
 800689e:	33ff      	adds	r3, #255	; 0xff
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1ad2      	subs	r2, r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	18d3      	adds	r3, r2, r3
 80068b2:	881b      	ldrh	r3, [r3, #0]
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	001a      	movs	r2, r3
 80068b8:	2340      	movs	r3, #64	; 0x40
 80068ba:	4013      	ands	r3, r2
 80068bc:	d100      	bne.n	80068c0 <USB_EPStartXfer+0x734>
 80068be:	e099      	b.n	80069f4 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	673b      	str	r3, [r7, #112]	; 0x70
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	785b      	ldrb	r3, [r3, #1]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d166      	bne.n	800699a <USB_EPStartXfer+0x80e>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2250      	movs	r2, #80	; 0x50
 80068d4:	5a9b      	ldrh	r3, [r3, r2]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	001a      	movs	r2, r3
 80068da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	66bb      	str	r3, [r7, #104]	; 0x68
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	00da      	lsls	r2, r3, #3
 80068e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068e8:	18d3      	adds	r3, r2, r3
 80068ea:	4ad0      	ldr	r2, [pc, #832]	; (8006c2c <USB_EPStartXfer+0xaa0>)
 80068ec:	4694      	mov	ip, r2
 80068ee:	4463      	add	r3, ip
 80068f0:	667b      	str	r3, [r7, #100]	; 0x64
 80068f2:	1d7b      	adds	r3, r7, #5
 80068f4:	33ff      	adds	r3, #255	; 0xff
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d110      	bne.n	800691e <USB_EPStartXfer+0x792>
 80068fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	b29b      	uxth	r3, r3
 8006902:	4acb      	ldr	r2, [pc, #812]	; (8006c30 <USB_EPStartXfer+0xaa4>)
 8006904:	4013      	ands	r3, r2
 8006906:	b29a      	uxth	r2, r3
 8006908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800690e:	881b      	ldrh	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	4ac8      	ldr	r2, [pc, #800]	; (8006c34 <USB_EPStartXfer+0xaa8>)
 8006914:	4313      	orrs	r3, r2
 8006916:	b29a      	uxth	r2, r3
 8006918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e058      	b.n	80069d0 <USB_EPStartXfer+0x844>
 800691e:	1d7b      	adds	r3, r7, #5
 8006920:	33ff      	adds	r3, #255	; 0xff
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b3e      	cmp	r3, #62	; 0x3e
 8006926:	d81a      	bhi.n	800695e <USB_EPStartXfer+0x7d2>
 8006928:	1d7b      	adds	r3, r7, #5
 800692a:	33ff      	adds	r3, #255	; 0xff
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	085b      	lsrs	r3, r3, #1
 8006930:	21f0      	movs	r1, #240	; 0xf0
 8006932:	187a      	adds	r2, r7, r1
 8006934:	6013      	str	r3, [r2, #0]
 8006936:	1d7b      	adds	r3, r7, #5
 8006938:	33ff      	adds	r3, #255	; 0xff
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	4013      	ands	r3, r2
 8006940:	d004      	beq.n	800694c <USB_EPStartXfer+0x7c0>
 8006942:	187b      	adds	r3, r7, r1
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	187a      	adds	r2, r7, r1
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	23f0      	movs	r3, #240	; 0xf0
 800694e:	18fb      	adds	r3, r7, r3
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	b29b      	uxth	r3, r3
 8006954:	029b      	lsls	r3, r3, #10
 8006956:	b29a      	uxth	r2, r3
 8006958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695a:	801a      	strh	r2, [r3, #0]
 800695c:	e038      	b.n	80069d0 <USB_EPStartXfer+0x844>
 800695e:	1d7b      	adds	r3, r7, #5
 8006960:	33ff      	adds	r3, #255	; 0xff
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	095b      	lsrs	r3, r3, #5
 8006966:	21f0      	movs	r1, #240	; 0xf0
 8006968:	187a      	adds	r2, r7, r1
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	1d7b      	adds	r3, r7, #5
 800696e:	33ff      	adds	r3, #255	; 0xff
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	221f      	movs	r2, #31
 8006974:	4013      	ands	r3, r2
 8006976:	d104      	bne.n	8006982 <USB_EPStartXfer+0x7f6>
 8006978:	187b      	adds	r3, r7, r1
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	3b01      	subs	r3, #1
 800697e:	187a      	adds	r2, r7, r1
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	23f0      	movs	r3, #240	; 0xf0
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	b29b      	uxth	r3, r3
 800698a:	029b      	lsls	r3, r3, #10
 800698c:	b29b      	uxth	r3, r3
 800698e:	4aa9      	ldr	r2, [pc, #676]	; (8006c34 <USB_EPStartXfer+0xaa8>)
 8006990:	4313      	orrs	r3, r2
 8006992:	b29a      	uxth	r2, r3
 8006994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006996:	801a      	strh	r2, [r3, #0]
 8006998:	e01a      	b.n	80069d0 <USB_EPStartXfer+0x844>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d116      	bne.n	80069d0 <USB_EPStartXfer+0x844>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2250      	movs	r2, #80	; 0x50
 80069a6:	5a9b      	ldrh	r3, [r3, r2]
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	001a      	movs	r2, r3
 80069ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ae:	189b      	adds	r3, r3, r2
 80069b0:	673b      	str	r3, [r7, #112]	; 0x70
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	00da      	lsls	r2, r3, #3
 80069b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069ba:	18d3      	adds	r3, r2, r3
 80069bc:	4a9b      	ldr	r2, [pc, #620]	; (8006c2c <USB_EPStartXfer+0xaa0>)
 80069be:	4694      	mov	ip, r2
 80069c0:	4463      	add	r3, ip
 80069c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069c4:	1d7b      	adds	r3, r7, #5
 80069c6:	33ff      	adds	r3, #255	; 0xff
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80069d0:	2076      	movs	r0, #118	; 0x76
 80069d2:	183b      	adds	r3, r7, r0
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	8952      	ldrh	r2, [r2, #10]
 80069d8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	6959      	ldr	r1, [r3, #20]
 80069de:	1d7b      	adds	r3, r7, #5
 80069e0:	33ff      	adds	r3, #255	; 0xff
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	b29c      	uxth	r4, r3
 80069e6:	183b      	adds	r3, r7, r0
 80069e8:	881a      	ldrh	r2, [r3, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	0023      	movs	r3, r4
 80069ee:	f000 fdc1 	bl	8007574 <USB_WritePMA>
 80069f2:	e0a0      	b.n	8006b36 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	785b      	ldrb	r3, [r3, #1]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d166      	bne.n	8006aca <USB_EPStartXfer+0x93e>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2250      	movs	r2, #80	; 0x50
 8006a04:	5a9b      	ldrh	r3, [r3, r2]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	001a      	movs	r2, r3
 8006a0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a0c:	189b      	adds	r3, r3, r2
 8006a0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	00da      	lsls	r2, r3, #3
 8006a16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006a18:	18d3      	adds	r3, r2, r3
 8006a1a:	4a87      	ldr	r2, [pc, #540]	; (8006c38 <USB_EPStartXfer+0xaac>)
 8006a1c:	4694      	mov	ip, r2
 8006a1e:	4463      	add	r3, ip
 8006a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a22:	1d7b      	adds	r3, r7, #5
 8006a24:	33ff      	adds	r3, #255	; 0xff
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d110      	bne.n	8006a4e <USB_EPStartXfer+0x8c2>
 8006a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	4a7f      	ldr	r2, [pc, #508]	; (8006c30 <USB_EPStartXfer+0xaa4>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3a:	801a      	strh	r2, [r3, #0]
 8006a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a3e:	881b      	ldrh	r3, [r3, #0]
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	4a7c      	ldr	r2, [pc, #496]	; (8006c34 <USB_EPStartXfer+0xaa8>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4a:	801a      	strh	r2, [r3, #0]
 8006a4c:	e062      	b.n	8006b14 <USB_EPStartXfer+0x988>
 8006a4e:	1d7b      	adds	r3, r7, #5
 8006a50:	33ff      	adds	r3, #255	; 0xff
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b3e      	cmp	r3, #62	; 0x3e
 8006a56:	d81a      	bhi.n	8006a8e <USB_EPStartXfer+0x902>
 8006a58:	1d7b      	adds	r3, r7, #5
 8006a5a:	33ff      	adds	r3, #255	; 0xff
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	21ec      	movs	r1, #236	; 0xec
 8006a62:	187a      	adds	r2, r7, r1
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	1d7b      	adds	r3, r7, #5
 8006a68:	33ff      	adds	r3, #255	; 0xff
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	4013      	ands	r3, r2
 8006a70:	d004      	beq.n	8006a7c <USB_EPStartXfer+0x8f0>
 8006a72:	187b      	adds	r3, r7, r1
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3301      	adds	r3, #1
 8006a78:	187a      	adds	r2, r7, r1
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	23ec      	movs	r3, #236	; 0xec
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	029b      	lsls	r3, r3, #10
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	e042      	b.n	8006b14 <USB_EPStartXfer+0x988>
 8006a8e:	1d7b      	adds	r3, r7, #5
 8006a90:	33ff      	adds	r3, #255	; 0xff
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	21ec      	movs	r1, #236	; 0xec
 8006a98:	187a      	adds	r2, r7, r1
 8006a9a:	6013      	str	r3, [r2, #0]
 8006a9c:	1d7b      	adds	r3, r7, #5
 8006a9e:	33ff      	adds	r3, #255	; 0xff
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	221f      	movs	r2, #31
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	d104      	bne.n	8006ab2 <USB_EPStartXfer+0x926>
 8006aa8:	187b      	adds	r3, r7, r1
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	187a      	adds	r2, r7, r1
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	23ec      	movs	r3, #236	; 0xec
 8006ab4:	18fb      	adds	r3, r7, r3
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	029b      	lsls	r3, r3, #10
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	4a5d      	ldr	r2, [pc, #372]	; (8006c34 <USB_EPStartXfer+0xaa8>)
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e024      	b.n	8006b14 <USB_EPStartXfer+0x988>
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	785b      	ldrb	r3, [r3, #1]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d120      	bne.n	8006b14 <USB_EPStartXfer+0x988>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2184      	movs	r1, #132	; 0x84
 8006ad6:	187a      	adds	r2, r7, r1
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2250      	movs	r2, #80	; 0x50
 8006ade:	5a9b      	ldrh	r3, [r3, r2]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	001a      	movs	r2, r3
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	189b      	adds	r3, r3, r2
 8006aea:	187a      	adds	r2, r7, r1
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	00da      	lsls	r2, r3, #3
 8006af4:	187b      	adds	r3, r7, r1
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	18d3      	adds	r3, r2, r3
 8006afa:	4a4f      	ldr	r2, [pc, #316]	; (8006c38 <USB_EPStartXfer+0xaac>)
 8006afc:	4694      	mov	ip, r2
 8006afe:	4463      	add	r3, ip
 8006b00:	2180      	movs	r1, #128	; 0x80
 8006b02:	187a      	adds	r2, r7, r1
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	1d7b      	adds	r3, r7, #5
 8006b08:	33ff      	adds	r3, #255	; 0xff
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	187b      	adds	r3, r7, r1
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006b14:	2076      	movs	r0, #118	; 0x76
 8006b16:	183b      	adds	r3, r7, r0
 8006b18:	683a      	ldr	r2, [r7, #0]
 8006b1a:	8912      	ldrh	r2, [r2, #8]
 8006b1c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	6959      	ldr	r1, [r3, #20]
 8006b22:	1d7b      	adds	r3, r7, #5
 8006b24:	33ff      	adds	r3, #255	; 0xff
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	b29c      	uxth	r4, r3
 8006b2a:	183b      	adds	r3, r7, r0
 8006b2c:	881a      	ldrh	r2, [r3, #0]
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	0023      	movs	r3, r4
 8006b32:	f000 fd1f 	bl	8007574 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	18d3      	adds	r3, r2, r3
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	200a      	movs	r0, #10
 8006b46:	183b      	adds	r3, r7, r0
 8006b48:	493c      	ldr	r1, [pc, #240]	; (8006c3c <USB_EPStartXfer+0xab0>)
 8006b4a:	400a      	ands	r2, r1
 8006b4c:	801a      	strh	r2, [r3, #0]
 8006b4e:	183b      	adds	r3, r7, r0
 8006b50:	183a      	adds	r2, r7, r0
 8006b52:	8812      	ldrh	r2, [r2, #0]
 8006b54:	2110      	movs	r1, #16
 8006b56:	404a      	eors	r2, r1
 8006b58:	801a      	strh	r2, [r3, #0]
 8006b5a:	183b      	adds	r3, r7, r0
 8006b5c:	183a      	adds	r2, r7, r0
 8006b5e:	8812      	ldrh	r2, [r2, #0]
 8006b60:	2120      	movs	r1, #32
 8006b62:	404a      	eors	r2, r1
 8006b64:	801a      	strh	r2, [r3, #0]
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	18d3      	adds	r3, r2, r3
 8006b70:	183a      	adds	r2, r7, r0
 8006b72:	8812      	ldrh	r2, [r2, #0]
 8006b74:	4932      	ldr	r1, [pc, #200]	; (8006c40 <USB_EPStartXfer+0xab4>)
 8006b76:	430a      	orrs	r2, r1
 8006b78:	b292      	uxth	r2, r2
 8006b7a:	801a      	strh	r2, [r3, #0]
 8006b7c:	f000 fbaf 	bl	80072de <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	7b1b      	ldrb	r3, [r3, #12]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d000      	beq.n	8006b8a <USB_EPStartXfer+0x9fe>
 8006b88:	e09e      	b.n	8006cc8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d90d      	bls.n	8006bb2 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	1d7a      	adds	r2, r7, #5
 8006b9c:	32ff      	adds	r2, #255	; 0xff
 8006b9e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	699a      	ldr	r2, [r3, #24]
 8006ba4:	1d7b      	adds	r3, r7, #5
 8006ba6:	33ff      	adds	r3, #255	; 0xff
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	1ad2      	subs	r2, r2, r3
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	619a      	str	r2, [r3, #24]
 8006bb0:	e007      	b.n	8006bc2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	1d7a      	adds	r2, r7, #5
 8006bb8:	32ff      	adds	r2, #255	; 0xff
 8006bba:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2190      	movs	r1, #144	; 0x90
 8006bc6:	187a      	adds	r2, r7, r1
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2250      	movs	r2, #80	; 0x50
 8006bce:	5a9b      	ldrh	r3, [r3, r2]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	001a      	movs	r2, r3
 8006bd4:	187b      	adds	r3, r7, r1
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	189b      	adds	r3, r3, r2
 8006bda:	187a      	adds	r2, r7, r1
 8006bdc:	6013      	str	r3, [r2, #0]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	00da      	lsls	r2, r3, #3
 8006be4:	187b      	adds	r3, r7, r1
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	18d3      	adds	r3, r2, r3
 8006bea:	4a10      	ldr	r2, [pc, #64]	; (8006c2c <USB_EPStartXfer+0xaa0>)
 8006bec:	4694      	mov	ip, r2
 8006bee:	4463      	add	r3, ip
 8006bf0:	218c      	movs	r1, #140	; 0x8c
 8006bf2:	187a      	adds	r2, r7, r1
 8006bf4:	6013      	str	r3, [r2, #0]
 8006bf6:	1d7b      	adds	r3, r7, #5
 8006bf8:	33ff      	adds	r3, #255	; 0xff
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d121      	bne.n	8006c44 <USB_EPStartXfer+0xab8>
 8006c00:	187b      	adds	r3, r7, r1
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <USB_EPStartXfer+0xaa4>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	187b      	adds	r3, r7, r1
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	801a      	strh	r2, [r3, #0]
 8006c14:	187b      	adds	r3, r7, r1
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	4a05      	ldr	r2, [pc, #20]	; (8006c34 <USB_EPStartXfer+0xaa8>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	187b      	adds	r3, r7, r1
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	801a      	strh	r2, [r3, #0]
 8006c28:	e334      	b.n	8007294 <USB_EPStartXfer+0x1108>
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	00000406 	.word	0x00000406
 8006c30:	ffff83ff 	.word	0xffff83ff
 8006c34:	ffff8000 	.word	0xffff8000
 8006c38:	00000402 	.word	0x00000402
 8006c3c:	ffff8fbf 	.word	0xffff8fbf
 8006c40:	ffff8080 	.word	0xffff8080
 8006c44:	1d7b      	adds	r3, r7, #5
 8006c46:	33ff      	adds	r3, #255	; 0xff
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8006c4c:	d81c      	bhi.n	8006c88 <USB_EPStartXfer+0xafc>
 8006c4e:	1d7b      	adds	r3, r7, #5
 8006c50:	33ff      	adds	r3, #255	; 0xff
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	085b      	lsrs	r3, r3, #1
 8006c56:	21e8      	movs	r1, #232	; 0xe8
 8006c58:	187a      	adds	r2, r7, r1
 8006c5a:	6013      	str	r3, [r2, #0]
 8006c5c:	1d7b      	adds	r3, r7, #5
 8006c5e:	33ff      	adds	r3, #255	; 0xff
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2201      	movs	r2, #1
 8006c64:	4013      	ands	r3, r2
 8006c66:	d004      	beq.n	8006c72 <USB_EPStartXfer+0xae6>
 8006c68:	187b      	adds	r3, r7, r1
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	187a      	adds	r2, r7, r1
 8006c70:	6013      	str	r3, [r2, #0]
 8006c72:	23e8      	movs	r3, #232	; 0xe8
 8006c74:	18fb      	adds	r3, r7, r3
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	029b      	lsls	r3, r3, #10
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	238c      	movs	r3, #140	; 0x8c
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	801a      	strh	r2, [r3, #0]
 8006c86:	e305      	b.n	8007294 <USB_EPStartXfer+0x1108>
 8006c88:	1d7b      	adds	r3, r7, #5
 8006c8a:	33ff      	adds	r3, #255	; 0xff
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	095b      	lsrs	r3, r3, #5
 8006c90:	21e8      	movs	r1, #232	; 0xe8
 8006c92:	187a      	adds	r2, r7, r1
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	1d7b      	adds	r3, r7, #5
 8006c98:	33ff      	adds	r3, #255	; 0xff
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	221f      	movs	r2, #31
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d104      	bne.n	8006cac <USB_EPStartXfer+0xb20>
 8006ca2:	187b      	adds	r3, r7, r1
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	187a      	adds	r2, r7, r1
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	23e8      	movs	r3, #232	; 0xe8
 8006cae:	18fb      	adds	r3, r7, r3
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	029b      	lsls	r3, r3, #10
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	4aca      	ldr	r2, [pc, #808]	; (8006fe4 <USB_EPStartXfer+0xe58>)
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	b29a      	uxth	r2, r3
 8006cbe:	238c      	movs	r3, #140	; 0x8c
 8006cc0:	18fb      	adds	r3, r7, r3
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	801a      	strh	r2, [r3, #0]
 8006cc6:	e2e5      	b.n	8007294 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	78db      	ldrb	r3, [r3, #3]
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d000      	beq.n	8006cd2 <USB_EPStartXfer+0xb46>
 8006cd0:	e16f      	b.n	8006fb2 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d16f      	bne.n	8006dba <USB_EPStartXfer+0xc2e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	21ac      	movs	r1, #172	; 0xac
 8006cde:	187a      	adds	r2, r7, r1
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2250      	movs	r2, #80	; 0x50
 8006ce6:	5a9b      	ldrh	r3, [r3, r2]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	001a      	movs	r2, r3
 8006cec:	187b      	adds	r3, r7, r1
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	189b      	adds	r3, r3, r2
 8006cf2:	187a      	adds	r2, r7, r1
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	00da      	lsls	r2, r3, #3
 8006cfc:	187b      	adds	r3, r7, r1
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	18d3      	adds	r3, r2, r3
 8006d02:	4ab9      	ldr	r2, [pc, #740]	; (8006fe8 <USB_EPStartXfer+0xe5c>)
 8006d04:	4694      	mov	ip, r2
 8006d06:	4463      	add	r3, ip
 8006d08:	21a8      	movs	r1, #168	; 0xa8
 8006d0a:	187a      	adds	r2, r7, r1
 8006d0c:	6013      	str	r3, [r2, #0]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d114      	bne.n	8006d40 <USB_EPStartXfer+0xbb4>
 8006d16:	187b      	adds	r3, r7, r1
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4ab3      	ldr	r2, [pc, #716]	; (8006fec <USB_EPStartXfer+0xe60>)
 8006d20:	4013      	ands	r3, r2
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	187b      	adds	r3, r7, r1
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	801a      	strh	r2, [r3, #0]
 8006d2a:	187b      	adds	r3, r7, r1
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	881b      	ldrh	r3, [r3, #0]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	4aac      	ldr	r2, [pc, #688]	; (8006fe4 <USB_EPStartXfer+0xe58>)
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	187b      	adds	r3, r7, r1
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	801a      	strh	r2, [r3, #0]
 8006d3e:	e060      	b.n	8006e02 <USB_EPStartXfer+0xc76>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b3e      	cmp	r3, #62	; 0x3e
 8006d46:	d81a      	bhi.n	8006d7e <USB_EPStartXfer+0xbf2>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	21e4      	movs	r1, #228	; 0xe4
 8006d50:	187a      	adds	r2, r7, r1
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d004      	beq.n	8006d68 <USB_EPStartXfer+0xbdc>
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3301      	adds	r3, #1
 8006d64:	187a      	adds	r2, r7, r1
 8006d66:	6013      	str	r3, [r2, #0]
 8006d68:	23e4      	movs	r3, #228	; 0xe4
 8006d6a:	18fb      	adds	r3, r7, r3
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	029b      	lsls	r3, r3, #10
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	23a8      	movs	r3, #168	; 0xa8
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	801a      	strh	r2, [r3, #0]
 8006d7c:	e041      	b.n	8006e02 <USB_EPStartXfer+0xc76>
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	095b      	lsrs	r3, r3, #5
 8006d84:	21e4      	movs	r1, #228	; 0xe4
 8006d86:	187a      	adds	r2, r7, r1
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	221f      	movs	r2, #31
 8006d90:	4013      	ands	r3, r2
 8006d92:	d104      	bne.n	8006d9e <USB_EPStartXfer+0xc12>
 8006d94:	187b      	adds	r3, r7, r1
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3b01      	subs	r3, #1
 8006d9a:	187a      	adds	r2, r7, r1
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	23e4      	movs	r3, #228	; 0xe4
 8006da0:	18fb      	adds	r3, r7, r3
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	029b      	lsls	r3, r3, #10
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	4a8e      	ldr	r2, [pc, #568]	; (8006fe4 <USB_EPStartXfer+0xe58>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	23a8      	movs	r3, #168	; 0xa8
 8006db2:	18fb      	adds	r3, r7, r3
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e023      	b.n	8006e02 <USB_EPStartXfer+0xc76>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	785b      	ldrb	r3, [r3, #1]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11f      	bne.n	8006e02 <USB_EPStartXfer+0xc76>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	21b4      	movs	r1, #180	; 0xb4
 8006dc6:	187a      	adds	r2, r7, r1
 8006dc8:	6013      	str	r3, [r2, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2250      	movs	r2, #80	; 0x50
 8006dce:	5a9b      	ldrh	r3, [r3, r2]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	001a      	movs	r2, r3
 8006dd4:	187b      	adds	r3, r7, r1
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	189b      	adds	r3, r3, r2
 8006dda:	187a      	adds	r2, r7, r1
 8006ddc:	6013      	str	r3, [r2, #0]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	00da      	lsls	r2, r3, #3
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	18d3      	adds	r3, r2, r3
 8006dea:	4a7f      	ldr	r2, [pc, #508]	; (8006fe8 <USB_EPStartXfer+0xe5c>)
 8006dec:	4694      	mov	ip, r2
 8006dee:	4463      	add	r3, ip
 8006df0:	21b0      	movs	r1, #176	; 0xb0
 8006df2:	187a      	adds	r2, r7, r1
 8006df4:	6013      	str	r3, [r2, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	187b      	adds	r3, r7, r1
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	801a      	strh	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	22a4      	movs	r2, #164	; 0xa4
 8006e06:	18ba      	adds	r2, r7, r2
 8006e08:	6013      	str	r3, [r2, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	785b      	ldrb	r3, [r3, #1]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d16f      	bne.n	8006ef2 <USB_EPStartXfer+0xd66>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	219c      	movs	r1, #156	; 0x9c
 8006e16:	187a      	adds	r2, r7, r1
 8006e18:	6013      	str	r3, [r2, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2250      	movs	r2, #80	; 0x50
 8006e1e:	5a9b      	ldrh	r3, [r3, r2]
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	001a      	movs	r2, r3
 8006e24:	187b      	adds	r3, r7, r1
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	187a      	adds	r2, r7, r1
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	00da      	lsls	r2, r3, #3
 8006e34:	187b      	adds	r3, r7, r1
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	4a6d      	ldr	r2, [pc, #436]	; (8006ff0 <USB_EPStartXfer+0xe64>)
 8006e3c:	4694      	mov	ip, r2
 8006e3e:	4463      	add	r3, ip
 8006e40:	2198      	movs	r1, #152	; 0x98
 8006e42:	187a      	adds	r2, r7, r1
 8006e44:	6013      	str	r3, [r2, #0]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d114      	bne.n	8006e78 <USB_EPStartXfer+0xcec>
 8006e4e:	187b      	adds	r3, r7, r1
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4a65      	ldr	r2, [pc, #404]	; (8006fec <USB_EPStartXfer+0xe60>)
 8006e58:	4013      	ands	r3, r2
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	187b      	adds	r3, r7, r1
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	187b      	adds	r3, r7, r1
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	881b      	ldrh	r3, [r3, #0]
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	4a5e      	ldr	r2, [pc, #376]	; (8006fe4 <USB_EPStartXfer+0xe58>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	187b      	adds	r3, r7, r1
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	801a      	strh	r2, [r3, #0]
 8006e76:	e05d      	b.n	8006f34 <USB_EPStartXfer+0xda8>
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e7e:	d81a      	bhi.n	8006eb6 <USB_EPStartXfer+0xd2a>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	085b      	lsrs	r3, r3, #1
 8006e86:	21e0      	movs	r1, #224	; 0xe0
 8006e88:	187a      	adds	r2, r7, r1
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2201      	movs	r2, #1
 8006e92:	4013      	ands	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <USB_EPStartXfer+0xd14>
 8006e96:	187b      	adds	r3, r7, r1
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	187a      	adds	r2, r7, r1
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	23e0      	movs	r3, #224	; 0xe0
 8006ea2:	18fb      	adds	r3, r7, r3
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	029b      	lsls	r3, r3, #10
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	2398      	movs	r3, #152	; 0x98
 8006eae:	18fb      	adds	r3, r7, r3
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	801a      	strh	r2, [r3, #0]
 8006eb4:	e03e      	b.n	8006f34 <USB_EPStartXfer+0xda8>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	21e0      	movs	r1, #224	; 0xe0
 8006ebe:	187a      	adds	r2, r7, r1
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	221f      	movs	r2, #31
 8006ec8:	4013      	ands	r3, r2
 8006eca:	d104      	bne.n	8006ed6 <USB_EPStartXfer+0xd4a>
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	187a      	adds	r2, r7, r1
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	23e0      	movs	r3, #224	; 0xe0
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	029b      	lsls	r3, r3, #10
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	4a40      	ldr	r2, [pc, #256]	; (8006fe4 <USB_EPStartXfer+0xe58>)
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	2398      	movs	r3, #152	; 0x98
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	801a      	strh	r2, [r3, #0]
 8006ef0:	e020      	b.n	8006f34 <USB_EPStartXfer+0xda8>
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	785b      	ldrb	r3, [r3, #1]
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d11c      	bne.n	8006f34 <USB_EPStartXfer+0xda8>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2250      	movs	r2, #80	; 0x50
 8006efe:	5a9b      	ldrh	r3, [r3, r2]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	001a      	movs	r2, r3
 8006f04:	21a4      	movs	r1, #164	; 0xa4
 8006f06:	187b      	adds	r3, r7, r1
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	189b      	adds	r3, r3, r2
 8006f0c:	187a      	adds	r2, r7, r1
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	00da      	lsls	r2, r3, #3
 8006f16:	187b      	adds	r3, r7, r1
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	18d3      	adds	r3, r2, r3
 8006f1c:	4a34      	ldr	r2, [pc, #208]	; (8006ff0 <USB_EPStartXfer+0xe64>)
 8006f1e:	4694      	mov	ip, r2
 8006f20:	4463      	add	r3, ip
 8006f22:	21a0      	movs	r1, #160	; 0xa0
 8006f24:	187a      	adds	r2, r7, r1
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	187b      	adds	r3, r7, r1
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d100      	bne.n	8006f3e <USB_EPStartXfer+0xdb2>
 8006f3c:	e1aa      	b.n	8007294 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	009b      	lsls	r3, r3, #2
 8006f46:	18d2      	adds	r2, r2, r3
 8006f48:	2196      	movs	r1, #150	; 0x96
 8006f4a:	187b      	adds	r3, r7, r1
 8006f4c:	8812      	ldrh	r2, [r2, #0]
 8006f4e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f50:	187b      	adds	r3, r7, r1
 8006f52:	881a      	ldrh	r2, [r3, #0]
 8006f54:	2380      	movs	r3, #128	; 0x80
 8006f56:	01db      	lsls	r3, r3, #7
 8006f58:	4013      	ands	r3, r2
 8006f5a:	d004      	beq.n	8006f66 <USB_EPStartXfer+0xdda>
 8006f5c:	187b      	adds	r3, r7, r1
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	2240      	movs	r2, #64	; 0x40
 8006f62:	4013      	ands	r3, r2
 8006f64:	d10d      	bne.n	8006f82 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f66:	2196      	movs	r1, #150	; 0x96
 8006f68:	187b      	adds	r3, r7, r1
 8006f6a:	881a      	ldrh	r2, [r3, #0]
 8006f6c:	2380      	movs	r3, #128	; 0x80
 8006f6e:	01db      	lsls	r3, r3, #7
 8006f70:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006f72:	d000      	beq.n	8006f76 <USB_EPStartXfer+0xdea>
 8006f74:	e18e      	b.n	8007294 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	2240      	movs	r2, #64	; 0x40
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d000      	beq.n	8006f82 <USB_EPStartXfer+0xdf6>
 8006f80:	e188      	b.n	8007294 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	18d3      	adds	r3, r2, r3
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	2094      	movs	r0, #148	; 0x94
 8006f92:	183b      	adds	r3, r7, r0
 8006f94:	4917      	ldr	r1, [pc, #92]	; (8006ff4 <USB_EPStartXfer+0xe68>)
 8006f96:	400a      	ands	r2, r1
 8006f98:	801a      	strh	r2, [r3, #0]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	18d3      	adds	r3, r2, r3
 8006fa4:	183a      	adds	r2, r7, r0
 8006fa6:	8812      	ldrh	r2, [r2, #0]
 8006fa8:	4913      	ldr	r1, [pc, #76]	; (8006ff8 <USB_EPStartXfer+0xe6c>)
 8006faa:	430a      	orrs	r2, r1
 8006fac:	b292      	uxth	r2, r2
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	e170      	b.n	8007294 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	78db      	ldrb	r3, [r3, #3]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d000      	beq.n	8006fbc <USB_EPStartXfer+0xe30>
 8006fba:	e169      	b.n	8007290 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d919      	bls.n	8006ffc <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	1d7a      	adds	r2, r7, #5
 8006fce:	32ff      	adds	r2, #255	; 0xff
 8006fd0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	699a      	ldr	r2, [r3, #24]
 8006fd6:	1d7b      	adds	r3, r7, #5
 8006fd8:	33ff      	adds	r3, #255	; 0xff
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	1ad2      	subs	r2, r2, r3
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	619a      	str	r2, [r3, #24]
 8006fe2:	e013      	b.n	800700c <USB_EPStartXfer+0xe80>
 8006fe4:	ffff8000 	.word	0xffff8000
 8006fe8:	00000402 	.word	0x00000402
 8006fec:	ffff83ff 	.word	0xffff83ff
 8006ff0:	00000406 	.word	0x00000406
 8006ff4:	ffff8f8f 	.word	0xffff8f8f
 8006ff8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	1d7a      	adds	r2, r7, #5
 8007002:	32ff      	adds	r2, #255	; 0xff
 8007004:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2200      	movs	r2, #0
 800700a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d000      	beq.n	8007016 <USB_EPStartXfer+0xe8a>
 8007014:	e075      	b.n	8007102 <USB_EPStartXfer+0xf76>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	21cc      	movs	r1, #204	; 0xcc
 800701a:	187a      	adds	r2, r7, r1
 800701c:	6013      	str	r3, [r2, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2250      	movs	r2, #80	; 0x50
 8007022:	5a9b      	ldrh	r3, [r3, r2]
 8007024:	b29b      	uxth	r3, r3
 8007026:	001a      	movs	r2, r3
 8007028:	187b      	adds	r3, r7, r1
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	189b      	adds	r3, r3, r2
 800702e:	187a      	adds	r2, r7, r1
 8007030:	6013      	str	r3, [r2, #0]
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	00da      	lsls	r2, r3, #3
 8007038:	187b      	adds	r3, r7, r1
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	18d3      	adds	r3, r2, r3
 800703e:	4aaa      	ldr	r2, [pc, #680]	; (80072e8 <USB_EPStartXfer+0x115c>)
 8007040:	4694      	mov	ip, r2
 8007042:	4463      	add	r3, ip
 8007044:	21c8      	movs	r1, #200	; 0xc8
 8007046:	187a      	adds	r2, r7, r1
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	1d7b      	adds	r3, r7, #5
 800704c:	33ff      	adds	r3, #255	; 0xff
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d114      	bne.n	800707e <USB_EPStartXfer+0xef2>
 8007054:	187b      	adds	r3, r7, r1
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	4aa3      	ldr	r2, [pc, #652]	; (80072ec <USB_EPStartXfer+0x1160>)
 800705e:	4013      	ands	r3, r2
 8007060:	b29a      	uxth	r2, r3
 8007062:	187b      	adds	r3, r7, r1
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	801a      	strh	r2, [r3, #0]
 8007068:	187b      	adds	r3, r7, r1
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29b      	uxth	r3, r3
 8007070:	4a9f      	ldr	r2, [pc, #636]	; (80072f0 <USB_EPStartXfer+0x1164>)
 8007072:	4313      	orrs	r3, r2
 8007074:	b29a      	uxth	r2, r3
 8007076:	187b      	adds	r3, r7, r1
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e066      	b.n	800714c <USB_EPStartXfer+0xfc0>
 800707e:	1d7b      	adds	r3, r7, #5
 8007080:	33ff      	adds	r3, #255	; 0xff
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b3e      	cmp	r3, #62	; 0x3e
 8007086:	d81c      	bhi.n	80070c2 <USB_EPStartXfer+0xf36>
 8007088:	1d7b      	adds	r3, r7, #5
 800708a:	33ff      	adds	r3, #255	; 0xff
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	21dc      	movs	r1, #220	; 0xdc
 8007092:	187a      	adds	r2, r7, r1
 8007094:	6013      	str	r3, [r2, #0]
 8007096:	1d7b      	adds	r3, r7, #5
 8007098:	33ff      	adds	r3, #255	; 0xff
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2201      	movs	r2, #1
 800709e:	4013      	ands	r3, r2
 80070a0:	d004      	beq.n	80070ac <USB_EPStartXfer+0xf20>
 80070a2:	187b      	adds	r3, r7, r1
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3301      	adds	r3, #1
 80070a8:	187a      	adds	r2, r7, r1
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	23dc      	movs	r3, #220	; 0xdc
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	029b      	lsls	r3, r3, #10
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	23c8      	movs	r3, #200	; 0xc8
 80070ba:	18fb      	adds	r3, r7, r3
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	801a      	strh	r2, [r3, #0]
 80070c0:	e044      	b.n	800714c <USB_EPStartXfer+0xfc0>
 80070c2:	1d7b      	adds	r3, r7, #5
 80070c4:	33ff      	adds	r3, #255	; 0xff
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	095b      	lsrs	r3, r3, #5
 80070ca:	21dc      	movs	r1, #220	; 0xdc
 80070cc:	187a      	adds	r2, r7, r1
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	1d7b      	adds	r3, r7, #5
 80070d2:	33ff      	adds	r3, #255	; 0xff
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	221f      	movs	r2, #31
 80070d8:	4013      	ands	r3, r2
 80070da:	d104      	bne.n	80070e6 <USB_EPStartXfer+0xf5a>
 80070dc:	187b      	adds	r3, r7, r1
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	3b01      	subs	r3, #1
 80070e2:	187a      	adds	r2, r7, r1
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	23dc      	movs	r3, #220	; 0xdc
 80070e8:	18fb      	adds	r3, r7, r3
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	029b      	lsls	r3, r3, #10
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	4a7f      	ldr	r2, [pc, #508]	; (80072f0 <USB_EPStartXfer+0x1164>)
 80070f4:	4313      	orrs	r3, r2
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	23c8      	movs	r3, #200	; 0xc8
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	801a      	strh	r2, [r3, #0]
 8007100:	e024      	b.n	800714c <USB_EPStartXfer+0xfc0>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d120      	bne.n	800714c <USB_EPStartXfer+0xfc0>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	21d4      	movs	r1, #212	; 0xd4
 800710e:	187a      	adds	r2, r7, r1
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2250      	movs	r2, #80	; 0x50
 8007116:	5a9b      	ldrh	r3, [r3, r2]
 8007118:	b29b      	uxth	r3, r3
 800711a:	001a      	movs	r2, r3
 800711c:	187b      	adds	r3, r7, r1
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	189b      	adds	r3, r3, r2
 8007122:	187a      	adds	r2, r7, r1
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	00da      	lsls	r2, r3, #3
 800712c:	187b      	adds	r3, r7, r1
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	18d3      	adds	r3, r2, r3
 8007132:	4a6d      	ldr	r2, [pc, #436]	; (80072e8 <USB_EPStartXfer+0x115c>)
 8007134:	4694      	mov	ip, r2
 8007136:	4463      	add	r3, ip
 8007138:	21d0      	movs	r1, #208	; 0xd0
 800713a:	187a      	adds	r2, r7, r1
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	1d7b      	adds	r3, r7, #5
 8007140:	33ff      	adds	r3, #255	; 0xff
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b29a      	uxth	r2, r3
 8007146:	187b      	adds	r3, r7, r1
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	22c4      	movs	r2, #196	; 0xc4
 8007150:	18ba      	adds	r2, r7, r2
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d000      	beq.n	800715e <USB_EPStartXfer+0xfd2>
 800715c:	e075      	b.n	800724a <USB_EPStartXfer+0x10be>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	21bc      	movs	r1, #188	; 0xbc
 8007162:	187a      	adds	r2, r7, r1
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2250      	movs	r2, #80	; 0x50
 800716a:	5a9b      	ldrh	r3, [r3, r2]
 800716c:	b29b      	uxth	r3, r3
 800716e:	001a      	movs	r2, r3
 8007170:	187b      	adds	r3, r7, r1
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	189b      	adds	r3, r3, r2
 8007176:	187a      	adds	r2, r7, r1
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	00da      	lsls	r2, r3, #3
 8007180:	187b      	adds	r3, r7, r1
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	18d3      	adds	r3, r2, r3
 8007186:	4a5b      	ldr	r2, [pc, #364]	; (80072f4 <USB_EPStartXfer+0x1168>)
 8007188:	4694      	mov	ip, r2
 800718a:	4463      	add	r3, ip
 800718c:	21b8      	movs	r1, #184	; 0xb8
 800718e:	187a      	adds	r2, r7, r1
 8007190:	6013      	str	r3, [r2, #0]
 8007192:	1d7b      	adds	r3, r7, #5
 8007194:	33ff      	adds	r3, #255	; 0xff
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d114      	bne.n	80071c6 <USB_EPStartXfer+0x103a>
 800719c:	187b      	adds	r3, r7, r1
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	4a51      	ldr	r2, [pc, #324]	; (80072ec <USB_EPStartXfer+0x1160>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	187b      	adds	r3, r7, r1
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	187b      	adds	r3, r7, r1
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4a4d      	ldr	r2, [pc, #308]	; (80072f0 <USB_EPStartXfer+0x1164>)
 80071ba:	4313      	orrs	r3, r2
 80071bc:	b29a      	uxth	r2, r3
 80071be:	187b      	adds	r3, r7, r1
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	801a      	strh	r2, [r3, #0]
 80071c4:	e066      	b.n	8007294 <USB_EPStartXfer+0x1108>
 80071c6:	1d7b      	adds	r3, r7, #5
 80071c8:	33ff      	adds	r3, #255	; 0xff
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b3e      	cmp	r3, #62	; 0x3e
 80071ce:	d81c      	bhi.n	800720a <USB_EPStartXfer+0x107e>
 80071d0:	1d7b      	adds	r3, r7, #5
 80071d2:	33ff      	adds	r3, #255	; 0xff
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	21d8      	movs	r1, #216	; 0xd8
 80071da:	187a      	adds	r2, r7, r1
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	1d7b      	adds	r3, r7, #5
 80071e0:	33ff      	adds	r3, #255	; 0xff
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	4013      	ands	r3, r2
 80071e8:	d004      	beq.n	80071f4 <USB_EPStartXfer+0x1068>
 80071ea:	187b      	adds	r3, r7, r1
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	3301      	adds	r3, #1
 80071f0:	187a      	adds	r2, r7, r1
 80071f2:	6013      	str	r3, [r2, #0]
 80071f4:	23d8      	movs	r3, #216	; 0xd8
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29a      	uxth	r2, r3
 8007200:	23b8      	movs	r3, #184	; 0xb8
 8007202:	18fb      	adds	r3, r7, r3
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	801a      	strh	r2, [r3, #0]
 8007208:	e044      	b.n	8007294 <USB_EPStartXfer+0x1108>
 800720a:	1d7b      	adds	r3, r7, #5
 800720c:	33ff      	adds	r3, #255	; 0xff
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	095b      	lsrs	r3, r3, #5
 8007212:	21d8      	movs	r1, #216	; 0xd8
 8007214:	187a      	adds	r2, r7, r1
 8007216:	6013      	str	r3, [r2, #0]
 8007218:	1d7b      	adds	r3, r7, #5
 800721a:	33ff      	adds	r3, #255	; 0xff
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	221f      	movs	r2, #31
 8007220:	4013      	ands	r3, r2
 8007222:	d104      	bne.n	800722e <USB_EPStartXfer+0x10a2>
 8007224:	187b      	adds	r3, r7, r1
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3b01      	subs	r3, #1
 800722a:	187a      	adds	r2, r7, r1
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	23d8      	movs	r3, #216	; 0xd8
 8007230:	18fb      	adds	r3, r7, r3
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	029b      	lsls	r3, r3, #10
 8007238:	b29b      	uxth	r3, r3
 800723a:	4a2d      	ldr	r2, [pc, #180]	; (80072f0 <USB_EPStartXfer+0x1164>)
 800723c:	4313      	orrs	r3, r2
 800723e:	b29a      	uxth	r2, r3
 8007240:	23b8      	movs	r3, #184	; 0xb8
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e024      	b.n	8007294 <USB_EPStartXfer+0x1108>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d120      	bne.n	8007294 <USB_EPStartXfer+0x1108>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2250      	movs	r2, #80	; 0x50
 8007256:	5a9b      	ldrh	r3, [r3, r2]
 8007258:	b29b      	uxth	r3, r3
 800725a:	001a      	movs	r2, r3
 800725c:	21c4      	movs	r1, #196	; 0xc4
 800725e:	187b      	adds	r3, r7, r1
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	189b      	adds	r3, r3, r2
 8007264:	187a      	adds	r2, r7, r1
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	00da      	lsls	r2, r3, #3
 800726e:	187b      	adds	r3, r7, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	18d3      	adds	r3, r2, r3
 8007274:	4a1f      	ldr	r2, [pc, #124]	; (80072f4 <USB_EPStartXfer+0x1168>)
 8007276:	4694      	mov	ip, r2
 8007278:	4463      	add	r3, ip
 800727a:	21c0      	movs	r1, #192	; 0xc0
 800727c:	187a      	adds	r2, r7, r1
 800727e:	6013      	str	r3, [r2, #0]
 8007280:	1d7b      	adds	r3, r7, #5
 8007282:	33ff      	adds	r3, #255	; 0xff
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	b29a      	uxth	r2, r3
 8007288:	187b      	adds	r3, r7, r1
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	801a      	strh	r2, [r3, #0]
 800728e:	e001      	b.n	8007294 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e025      	b.n	80072e0 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	18d3      	adds	r3, r2, r3
 800729e:	881b      	ldrh	r3, [r3, #0]
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	208a      	movs	r0, #138	; 0x8a
 80072a4:	183b      	adds	r3, r7, r0
 80072a6:	4914      	ldr	r1, [pc, #80]	; (80072f8 <USB_EPStartXfer+0x116c>)
 80072a8:	400a      	ands	r2, r1
 80072aa:	801a      	strh	r2, [r3, #0]
 80072ac:	183b      	adds	r3, r7, r0
 80072ae:	183a      	adds	r2, r7, r0
 80072b0:	8812      	ldrh	r2, [r2, #0]
 80072b2:	2180      	movs	r1, #128	; 0x80
 80072b4:	0149      	lsls	r1, r1, #5
 80072b6:	404a      	eors	r2, r1
 80072b8:	801a      	strh	r2, [r3, #0]
 80072ba:	183b      	adds	r3, r7, r0
 80072bc:	183a      	adds	r2, r7, r0
 80072be:	8812      	ldrh	r2, [r2, #0]
 80072c0:	2180      	movs	r1, #128	; 0x80
 80072c2:	0189      	lsls	r1, r1, #6
 80072c4:	404a      	eors	r2, r1
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	18d3      	adds	r3, r2, r3
 80072d2:	183a      	adds	r2, r7, r0
 80072d4:	8812      	ldrh	r2, [r2, #0]
 80072d6:	4909      	ldr	r1, [pc, #36]	; (80072fc <USB_EPStartXfer+0x1170>)
 80072d8:	430a      	orrs	r2, r1
 80072da:	b292      	uxth	r2, r2
 80072dc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	0018      	movs	r0, r3
 80072e2:	46bd      	mov	sp, r7
 80072e4:	b043      	add	sp, #268	; 0x10c
 80072e6:	bd90      	pop	{r4, r7, pc}
 80072e8:	00000402 	.word	0x00000402
 80072ec:	ffff83ff 	.word	0xffff83ff
 80072f0:	ffff8000 	.word	0xffff8000
 80072f4:	00000406 	.word	0x00000406
 80072f8:	ffffbf8f 	.word	0xffffbf8f
 80072fc:	ffff8080 	.word	0xffff8080

08007300 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	785b      	ldrb	r3, [r3, #1]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d01d      	beq.n	800734e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	18d3      	adds	r3, r2, r3
 800731c:	881b      	ldrh	r3, [r3, #0]
 800731e:	b29a      	uxth	r2, r3
 8007320:	200c      	movs	r0, #12
 8007322:	183b      	adds	r3, r7, r0
 8007324:	491b      	ldr	r1, [pc, #108]	; (8007394 <USB_EPSetStall+0x94>)
 8007326:	400a      	ands	r2, r1
 8007328:	801a      	strh	r2, [r3, #0]
 800732a:	183b      	adds	r3, r7, r0
 800732c:	183a      	adds	r2, r7, r0
 800732e:	8812      	ldrh	r2, [r2, #0]
 8007330:	2110      	movs	r1, #16
 8007332:	404a      	eors	r2, r1
 8007334:	801a      	strh	r2, [r3, #0]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	18d3      	adds	r3, r2, r3
 8007340:	183a      	adds	r2, r7, r0
 8007342:	8812      	ldrh	r2, [r2, #0]
 8007344:	4914      	ldr	r1, [pc, #80]	; (8007398 <USB_EPSetStall+0x98>)
 8007346:	430a      	orrs	r2, r1
 8007348:	b292      	uxth	r2, r2
 800734a:	801a      	strh	r2, [r3, #0]
 800734c:	e01d      	b.n	800738a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	18d3      	adds	r3, r2, r3
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29a      	uxth	r2, r3
 800735c:	200e      	movs	r0, #14
 800735e:	183b      	adds	r3, r7, r0
 8007360:	490e      	ldr	r1, [pc, #56]	; (800739c <USB_EPSetStall+0x9c>)
 8007362:	400a      	ands	r2, r1
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	183b      	adds	r3, r7, r0
 8007368:	183a      	adds	r2, r7, r0
 800736a:	8812      	ldrh	r2, [r2, #0]
 800736c:	2180      	movs	r1, #128	; 0x80
 800736e:	0149      	lsls	r1, r1, #5
 8007370:	404a      	eors	r2, r1
 8007372:	801a      	strh	r2, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	18d3      	adds	r3, r2, r3
 800737e:	183a      	adds	r2, r7, r0
 8007380:	8812      	ldrh	r2, [r2, #0]
 8007382:	4905      	ldr	r1, [pc, #20]	; (8007398 <USB_EPSetStall+0x98>)
 8007384:	430a      	orrs	r2, r1
 8007386:	b292      	uxth	r2, r2
 8007388:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	0018      	movs	r0, r3
 800738e:	46bd      	mov	sp, r7
 8007390:	b004      	add	sp, #16
 8007392:	bd80      	pop	{r7, pc}
 8007394:	ffff8fbf 	.word	0xffff8fbf
 8007398:	ffff8080 	.word	0xffff8080
 800739c:	ffffbf8f 	.word	0xffffbf8f

080073a0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b086      	sub	sp, #24
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	7b1b      	ldrb	r3, [r3, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d000      	beq.n	80073b4 <USB_EPClearStall+0x14>
 80073b2:	e095      	b.n	80074e0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	785b      	ldrb	r3, [r3, #1]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d046      	beq.n	800744a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	18d2      	adds	r2, r2, r3
 80073c6:	2110      	movs	r1, #16
 80073c8:	187b      	adds	r3, r7, r1
 80073ca:	8812      	ldrh	r2, [r2, #0]
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	187b      	adds	r3, r7, r1
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	2240      	movs	r2, #64	; 0x40
 80073d4:	4013      	ands	r3, r2
 80073d6:	d016      	beq.n	8007406 <USB_EPClearStall+0x66>
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	18d3      	adds	r3, r2, r3
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	200e      	movs	r0, #14
 80073e8:	183b      	adds	r3, r7, r0
 80073ea:	4940      	ldr	r1, [pc, #256]	; (80074ec <USB_EPClearStall+0x14c>)
 80073ec:	400a      	ands	r2, r1
 80073ee:	801a      	strh	r2, [r3, #0]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	18d3      	adds	r3, r2, r3
 80073fa:	183a      	adds	r2, r7, r0
 80073fc:	8812      	ldrh	r2, [r2, #0]
 80073fe:	493c      	ldr	r1, [pc, #240]	; (80074f0 <USB_EPClearStall+0x150>)
 8007400:	430a      	orrs	r2, r1
 8007402:	b292      	uxth	r2, r2
 8007404:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	78db      	ldrb	r3, [r3, #3]
 800740a:	2b01      	cmp	r3, #1
 800740c:	d068      	beq.n	80074e0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	18d3      	adds	r3, r2, r3
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29a      	uxth	r2, r3
 800741c:	200c      	movs	r0, #12
 800741e:	183b      	adds	r3, r7, r0
 8007420:	4934      	ldr	r1, [pc, #208]	; (80074f4 <USB_EPClearStall+0x154>)
 8007422:	400a      	ands	r2, r1
 8007424:	801a      	strh	r2, [r3, #0]
 8007426:	183b      	adds	r3, r7, r0
 8007428:	183a      	adds	r2, r7, r0
 800742a:	8812      	ldrh	r2, [r2, #0]
 800742c:	2120      	movs	r1, #32
 800742e:	404a      	eors	r2, r1
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	18d3      	adds	r3, r2, r3
 800743c:	183a      	adds	r2, r7, r0
 800743e:	8812      	ldrh	r2, [r2, #0]
 8007440:	492d      	ldr	r1, [pc, #180]	; (80074f8 <USB_EPClearStall+0x158>)
 8007442:	430a      	orrs	r2, r1
 8007444:	b292      	uxth	r2, r2
 8007446:	801a      	strh	r2, [r3, #0]
 8007448:	e04a      	b.n	80074e0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	18d2      	adds	r2, r2, r3
 8007454:	2116      	movs	r1, #22
 8007456:	187b      	adds	r3, r7, r1
 8007458:	8812      	ldrh	r2, [r2, #0]
 800745a:	801a      	strh	r2, [r3, #0]
 800745c:	187b      	adds	r3, r7, r1
 800745e:	881a      	ldrh	r2, [r3, #0]
 8007460:	2380      	movs	r3, #128	; 0x80
 8007462:	01db      	lsls	r3, r3, #7
 8007464:	4013      	ands	r3, r2
 8007466:	d016      	beq.n	8007496 <USB_EPClearStall+0xf6>
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	18d3      	adds	r3, r2, r3
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	b29a      	uxth	r2, r3
 8007476:	2014      	movs	r0, #20
 8007478:	183b      	adds	r3, r7, r0
 800747a:	491c      	ldr	r1, [pc, #112]	; (80074ec <USB_EPClearStall+0x14c>)
 800747c:	400a      	ands	r2, r1
 800747e:	801a      	strh	r2, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	18d3      	adds	r3, r2, r3
 800748a:	183a      	adds	r2, r7, r0
 800748c:	8812      	ldrh	r2, [r2, #0]
 800748e:	491b      	ldr	r1, [pc, #108]	; (80074fc <USB_EPClearStall+0x15c>)
 8007490:	430a      	orrs	r2, r1
 8007492:	b292      	uxth	r2, r2
 8007494:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	881b      	ldrh	r3, [r3, #0]
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	2012      	movs	r0, #18
 80074a6:	183b      	adds	r3, r7, r0
 80074a8:	4915      	ldr	r1, [pc, #84]	; (8007500 <USB_EPClearStall+0x160>)
 80074aa:	400a      	ands	r2, r1
 80074ac:	801a      	strh	r2, [r3, #0]
 80074ae:	183b      	adds	r3, r7, r0
 80074b0:	183a      	adds	r2, r7, r0
 80074b2:	8812      	ldrh	r2, [r2, #0]
 80074b4:	2180      	movs	r1, #128	; 0x80
 80074b6:	0149      	lsls	r1, r1, #5
 80074b8:	404a      	eors	r2, r1
 80074ba:	801a      	strh	r2, [r3, #0]
 80074bc:	183b      	adds	r3, r7, r0
 80074be:	183a      	adds	r2, r7, r0
 80074c0:	8812      	ldrh	r2, [r2, #0]
 80074c2:	2180      	movs	r1, #128	; 0x80
 80074c4:	0189      	lsls	r1, r1, #6
 80074c6:	404a      	eors	r2, r1
 80074c8:	801a      	strh	r2, [r3, #0]
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	18d3      	adds	r3, r2, r3
 80074d4:	183a      	adds	r2, r7, r0
 80074d6:	8812      	ldrh	r2, [r2, #0]
 80074d8:	4907      	ldr	r1, [pc, #28]	; (80074f8 <USB_EPClearStall+0x158>)
 80074da:	430a      	orrs	r2, r1
 80074dc:	b292      	uxth	r2, r2
 80074de:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	0018      	movs	r0, r3
 80074e4:	46bd      	mov	sp, r7
 80074e6:	b006      	add	sp, #24
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	ffff8f8f 	.word	0xffff8f8f
 80074f0:	ffff80c0 	.word	0xffff80c0
 80074f4:	ffff8fbf 	.word	0xffff8fbf
 80074f8:	ffff8080 	.word	0xffff8080
 80074fc:	ffffc080 	.word	0xffffc080
 8007500:	ffffbf8f 	.word	0xffffbf8f

08007504 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	000a      	movs	r2, r1
 800750e:	1cfb      	adds	r3, r7, #3
 8007510:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8007512:	1cfb      	adds	r3, r7, #3
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	224c      	movs	r2, #76	; 0x4c
 800751e:	2180      	movs	r1, #128	; 0x80
 8007520:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b002      	add	sp, #8
 800752a:	bd80      	pop	{r7, pc}

0800752c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2258      	movs	r2, #88	; 0x58
 8007538:	5a9b      	ldrh	r3, [r3, r2]
 800753a:	b29b      	uxth	r3, r3
 800753c:	4a05      	ldr	r2, [pc, #20]	; (8007554 <USB_DevConnect+0x28>)
 800753e:	4313      	orrs	r3, r2
 8007540:	b299      	uxth	r1, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2258      	movs	r2, #88	; 0x58
 8007546:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	0018      	movs	r0, r3
 800754c:	46bd      	mov	sp, r7
 800754e:	b002      	add	sp, #8
 8007550:	bd80      	pop	{r7, pc}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	ffff8000 	.word	0xffff8000

08007558 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2244      	movs	r2, #68	; 0x44
 8007564:	5a9b      	ldrh	r3, [r3, r2]
 8007566:	b29b      	uxth	r3, r3
 8007568:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800756a:	68fb      	ldr	r3, [r7, #12]
}
 800756c:	0018      	movs	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	b004      	add	sp, #16
 8007572:	bd80      	pop	{r7, pc}

08007574 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08c      	sub	sp, #48	; 0x30
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	0019      	movs	r1, r3
 8007580:	1dbb      	adds	r3, r7, #6
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	1d3b      	adds	r3, r7, #4
 8007586:	1c0a      	adds	r2, r1, #0
 8007588:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800758a:	1d3b      	adds	r3, r7, #4
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	3301      	adds	r3, #1
 8007590:	085b      	lsrs	r3, r3, #1
 8007592:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800759c:	1dbb      	adds	r3, r7, #6
 800759e:	881a      	ldrh	r2, [r3, #0]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	18d3      	adds	r3, r2, r3
 80075a4:	2280      	movs	r2, #128	; 0x80
 80075a6:	00d2      	lsls	r2, r2, #3
 80075a8:	4694      	mov	ip, r2
 80075aa:	4463      	add	r3, ip
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075b2:	e01b      	b.n	80075ec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075bc:	3301      	adds	r3, #1
 80075be:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80075c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	021b      	lsls	r3, r3, #8
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	001a      	movs	r2, r3
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80075da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075dc:	3302      	adds	r3, #2
 80075de:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e2:	3301      	adds	r3, #1
 80075e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80075e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e8:	3b01      	subs	r3, #1
 80075ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e0      	bne.n	80075b4 <USB_WritePMA+0x40>
  }
}
 80075f2:	46c0      	nop			; (mov r8, r8)
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	b00c      	add	sp, #48	; 0x30
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	; 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	0019      	movs	r1, r3
 8007608:	1dbb      	adds	r3, r7, #6
 800760a:	801a      	strh	r2, [r3, #0]
 800760c:	1d3b      	adds	r3, r7, #4
 800760e:	1c0a      	adds	r2, r1, #0
 8007610:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007612:	1d3b      	adds	r3, r7, #4
 8007614:	881b      	ldrh	r3, [r3, #0]
 8007616:	085b      	lsrs	r3, r3, #1
 8007618:	b29b      	uxth	r3, r3
 800761a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007624:	1dbb      	adds	r3, r7, #6
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	18d3      	adds	r3, r2, r3
 800762c:	2280      	movs	r2, #128	; 0x80
 800762e:	00d2      	lsls	r2, r2, #3
 8007630:	4694      	mov	ip, r2
 8007632:	4463      	add	r3, ip
 8007634:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
 800763a:	e018      	b.n	800766e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	881b      	ldrh	r3, [r3, #0]
 8007640:	b29b      	uxth	r3, r3
 8007642:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007644:	6a3b      	ldr	r3, [r7, #32]
 8007646:	3302      	adds	r3, #2
 8007648:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	b2da      	uxtb	r2, r3
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	3301      	adds	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	0a1b      	lsrs	r3, r3, #8
 800765c:	b2da      	uxtb	r2, r3
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007662:	69fb      	ldr	r3, [r7, #28]
 8007664:	3301      	adds	r3, #1
 8007666:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	3b01      	subs	r3, #1
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e3      	bne.n	800763c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007674:	1d3b      	adds	r3, r7, #4
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	2201      	movs	r2, #1
 800767a:	4013      	ands	r3, r2
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d007      	beq.n	8007692 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8007682:	6a3b      	ldr	r3, [r7, #32]
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	b29b      	uxth	r3, r3
 8007688:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	b2da      	uxtb	r2, r3
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	701a      	strb	r2, [r3, #0]
  }
}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	46bd      	mov	sp, r7
 8007696:	b00a      	add	sp, #40	; 0x28
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 800769a:	b590      	push	{r4, r7, lr}
 800769c:	b085      	sub	sp, #20
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	000a      	movs	r2, r1
 80076a4:	1cfb      	adds	r3, r7, #3
 80076a6:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80076a8:	240f      	movs	r4, #15
 80076aa:	193b      	adds	r3, r7, r4
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	2355      	movs	r3, #85	; 0x55
 80076b4:	2203      	movs	r2, #3
 80076b6:	2181      	movs	r1, #129	; 0x81
 80076b8:	f001 ff49 	bl	800954e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	2355      	movs	r3, #85	; 0x55
 80076c6:	2203      	movs	r2, #3
 80076c8:	2101      	movs	r1, #1
 80076ca:	f001 ff40 	bl	800954e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80076ce:	687a      	ldr	r2, [r7, #4]
 80076d0:	23b6      	movs	r3, #182	; 0xb6
 80076d2:	005b      	lsls	r3, r3, #1
 80076d4:	2101      	movs	r1, #1
 80076d6:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80076d8:	2064      	movs	r0, #100	; 0x64
 80076da:	f002 f923 	bl	8009924 <malloc>
 80076de:	0003      	movs	r3, r0
 80076e0:	0019      	movs	r1, r3
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	23ae      	movs	r3, #174	; 0xae
 80076e6:	009b      	lsls	r3, r3, #2
 80076e8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	23ae      	movs	r3, #174	; 0xae
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	58d3      	ldr	r3, [r2, r3]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 80076f6:	193b      	adds	r3, r7, r4
 80076f8:	2201      	movs	r2, #1
 80076fa:	701a      	strb	r2, [r3, #0]
 80076fc:	e014      	b.n	8007728 <USBD_CUSTOM_HID_Init+0x8e>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	23ae      	movs	r3, #174	; 0xae
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	58d3      	ldr	r3, [r2, r3]
 8007706:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2260      	movs	r2, #96	; 0x60
 800770c:	2100      	movs	r1, #0
 800770e:	5499      	strb	r1, [r3, r2]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	23af      	movs	r3, #175	; 0xaf
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	58d3      	ldr	r3, [r2, r3]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	234d      	movs	r3, #77	; 0x4d
 8007722:	2101      	movs	r1, #1
 8007724:	f002 f85e 	bl	80097e4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007728:	230f      	movs	r3, #15
 800772a:	18fb      	adds	r3, r7, r3
 800772c:	781b      	ldrb	r3, [r3, #0]
}
 800772e:	0018      	movs	r0, r3
 8007730:	46bd      	mov	sp, r7
 8007732:	b005      	add	sp, #20
 8007734:	bd90      	pop	{r4, r7, pc}

08007736 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b082      	sub	sp, #8
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	000a      	movs	r2, r1
 8007740:	1cfb      	adds	r3, r7, #3
 8007742:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2181      	movs	r1, #129	; 0x81
 8007748:	0018      	movs	r0, r3
 800774a:	f001 ff37 	bl	80095bc <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2101      	movs	r1, #1
 8007758:	0018      	movs	r0, r3
 800775a:	f001 ff2f 	bl	80095bc <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	23b6      	movs	r3, #182	; 0xb6
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	2100      	movs	r1, #0
 8007766:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	23ae      	movs	r3, #174	; 0xae
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	58d3      	ldr	r3, [r2, r3]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d011      	beq.n	8007798 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	23af      	movs	r3, #175	; 0xaf
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	58d3      	ldr	r3, [r2, r3]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	23ae      	movs	r3, #174	; 0xae
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	58d3      	ldr	r3, [r2, r3]
 8007788:	0018      	movs	r0, r3
 800778a:	f002 f8d5 	bl	8009938 <free>
    pdev->pClassData = NULL;
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	23ae      	movs	r3, #174	; 0xae
 8007792:	009b      	lsls	r3, r3, #2
 8007794:	2100      	movs	r1, #0
 8007796:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	0018      	movs	r0, r3
 800779c:	46bd      	mov	sp, r7
 800779e:	b002      	add	sp, #8
 80077a0:	bd80      	pop	{r7, pc}
	...

080077a4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	23ae      	movs	r3, #174	; 0xae
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	58d3      	ldr	r3, [r2, r3]
 80077b6:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80077b8:	231e      	movs	r3, #30
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	2200      	movs	r2, #0
 80077be:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80077c0:	2300      	movs	r3, #0
 80077c2:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80077c4:	230e      	movs	r3, #14
 80077c6:	18fb      	adds	r3, r7, r3
 80077c8:	2200      	movs	r2, #0
 80077ca:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80077cc:	2317      	movs	r3, #23
 80077ce:	18fb      	adds	r3, r7, r3
 80077d0:	2200      	movs	r2, #0
 80077d2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	001a      	movs	r2, r3
 80077da:	2360      	movs	r3, #96	; 0x60
 80077dc:	4013      	ands	r3, r2
 80077de:	d044      	beq.n	800786a <USBD_CUSTOM_HID_Setup+0xc6>
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d000      	beq.n	80077e6 <USBD_CUSTOM_HID_Setup+0x42>
 80077e4:	e0d8      	b.n	8007998 <USBD_CUSTOM_HID_Setup+0x1f4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b0b      	cmp	r3, #11
 80077ec:	d831      	bhi.n	8007852 <USBD_CUSTOM_HID_Setup+0xae>
 80077ee:	009a      	lsls	r2, r3, #2
 80077f0:	4b72      	ldr	r3, [pc, #456]	; (80079bc <USBD_CUSTOM_HID_Setup+0x218>)
 80077f2:	18d3      	adds	r3, r2, r3
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	885b      	ldrh	r3, [r3, #2]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	001a      	movs	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	651a      	str	r2, [r3, #80]	; 0x50
          break;
 8007804:	e030      	b.n	8007868 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	3350      	adds	r3, #80	; 0x50
 800780a:	0019      	movs	r1, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	0018      	movs	r0, r3
 8007812:	f001 fb21 	bl	8008e58 <USBD_CtlSendData>
          break;
 8007816:	e027      	b.n	8007868 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	885b      	ldrh	r3, [r3, #2]
 800781c:	0a1b      	lsrs	r3, r3, #8
 800781e:	b29b      	uxth	r3, r3
 8007820:	b2db      	uxtb	r3, r3
 8007822:	001a      	movs	r2, r3
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	655a      	str	r2, [r3, #84]	; 0x54
          break;
 8007828:	e01e      	b.n	8007868 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3354      	adds	r3, #84	; 0x54
 800782e:	0019      	movs	r1, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	0018      	movs	r0, r3
 8007836:	f001 fb0f 	bl	8008e58 <USBD_CtlSendData>
          break;
 800783a:	e015      	b.n	8007868 <USBD_CUSTOM_HID_Setup+0xc4>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2201      	movs	r2, #1
 8007840:	65da      	str	r2, [r3, #92]	; 0x5c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007842:	6939      	ldr	r1, [r7, #16]
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	88da      	ldrh	r2, [r3, #6]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	0018      	movs	r0, r3
 800784c:	f001 fb37 	bl	8008ebe <USBD_CtlPrepareRx>
          break;
 8007850:	e00a      	b.n	8007868 <USBD_CUSTOM_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	0011      	movs	r1, r2
 8007858:	0018      	movs	r0, r3
 800785a:	f001 fa7f 	bl	8008d5c <USBD_CtlError>
          ret = USBD_FAIL;
 800785e:	2317      	movs	r3, #23
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	2202      	movs	r2, #2
 8007864:	701a      	strb	r2, [r3, #0]
          break;
 8007866:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007868:	e0a1      	b.n	80079ae <USBD_CUSTOM_HID_Setup+0x20a>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	785b      	ldrb	r3, [r3, #1]
 800786e:	2b0b      	cmp	r3, #11
 8007870:	d100      	bne.n	8007874 <USBD_CUSTOM_HID_Setup+0xd0>
 8007872:	e06d      	b.n	8007950 <USBD_CUSTOM_HID_Setup+0x1ac>
 8007874:	dd00      	ble.n	8007878 <USBD_CUSTOM_HID_Setup+0xd4>
 8007876:	e083      	b.n	8007980 <USBD_CUSTOM_HID_Setup+0x1dc>
 8007878:	2b0a      	cmp	r3, #10
 800787a:	d04f      	beq.n	800791c <USBD_CUSTOM_HID_Setup+0x178>
 800787c:	dd00      	ble.n	8007880 <USBD_CUSTOM_HID_Setup+0xdc>
 800787e:	e07f      	b.n	8007980 <USBD_CUSTOM_HID_Setup+0x1dc>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <USBD_CUSTOM_HID_Setup+0xe6>
 8007884:	2b06      	cmp	r3, #6
 8007886:	d019      	beq.n	80078bc <USBD_CUSTOM_HID_Setup+0x118>
 8007888:	e07a      	b.n	8007980 <USBD_CUSTOM_HID_Setup+0x1dc>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	23a7      	movs	r3, #167	; 0xa7
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	5cd3      	ldrb	r3, [r2, r3]
 8007892:	2b03      	cmp	r3, #3
 8007894:	d107      	bne.n	80078a6 <USBD_CUSTOM_HID_Setup+0x102>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007896:	230e      	movs	r3, #14
 8007898:	18f9      	adds	r1, r7, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2202      	movs	r2, #2
 800789e:	0018      	movs	r0, r3
 80078a0:	f001 fada 	bl	8008e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80078a4:	e077      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0011      	movs	r1, r2
 80078ac:	0018      	movs	r0, r3
 80078ae:	f001 fa55 	bl	8008d5c <USBD_CtlError>
            ret = USBD_FAIL;
 80078b2:	2317      	movs	r3, #23
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	2202      	movs	r2, #2
 80078b8:	701a      	strb	r2, [r3, #0]
          break;
 80078ba:	e06c      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	885b      	ldrh	r3, [r3, #2]
 80078c0:	0a1b      	lsrs	r3, r3, #8
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	2b22      	cmp	r3, #34	; 0x22
 80078c6:	d10f      	bne.n	80078e8 <USBD_CUSTOM_HID_Setup+0x144>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	88db      	ldrh	r3, [r3, #6]
 80078cc:	221e      	movs	r2, #30
 80078ce:	18ba      	adds	r2, r7, r2
 80078d0:	b299      	uxth	r1, r3
 80078d2:	294d      	cmp	r1, #77	; 0x4d
 80078d4:	d900      	bls.n	80078d8 <USBD_CUSTOM_HID_Setup+0x134>
 80078d6:	234d      	movs	r3, #77	; 0x4d
 80078d8:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	23af      	movs	r3, #175	; 0xaf
 80078de:	009b      	lsls	r3, r3, #2
 80078e0:	58d3      	ldr	r3, [r2, r3]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	61bb      	str	r3, [r7, #24]
 80078e6:	e010      	b.n	800790a <USBD_CUSTOM_HID_Setup+0x166>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	885b      	ldrh	r3, [r3, #2]
 80078ec:	0a1b      	lsrs	r3, r3, #8
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	2b21      	cmp	r3, #33	; 0x21
 80078f2:	d10a      	bne.n	800790a <USBD_CUSTOM_HID_Setup+0x166>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80078f4:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <USBD_CUSTOM_HID_Setup+0x21c>)
 80078f6:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	88db      	ldrh	r3, [r3, #6]
 80078fc:	221e      	movs	r2, #30
 80078fe:	18ba      	adds	r2, r7, r2
 8007900:	b299      	uxth	r1, r3
 8007902:	2909      	cmp	r1, #9
 8007904:	d900      	bls.n	8007908 <USBD_CUSTOM_HID_Setup+0x164>
 8007906:	2309      	movs	r3, #9
 8007908:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800790a:	231e      	movs	r3, #30
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	69b9      	ldr	r1, [r7, #24]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0018      	movs	r0, r3
 8007916:	f001 fa9f 	bl	8008e58 <USBD_CtlSendData>
          break;
 800791a:	e03c      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	23a7      	movs	r3, #167	; 0xa7
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	5cd3      	ldrb	r3, [r2, r3]
 8007924:	2b03      	cmp	r3, #3
 8007926:	d108      	bne.n	800793a <USBD_CUSTOM_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	3358      	adds	r3, #88	; 0x58
 800792c:	0019      	movs	r1, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	0018      	movs	r0, r3
 8007934:	f001 fa90 	bl	8008e58 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007938:	e02d      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800793a:	683a      	ldr	r2, [r7, #0]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	0011      	movs	r1, r2
 8007940:	0018      	movs	r0, r3
 8007942:	f001 fa0b 	bl	8008d5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007946:	2317      	movs	r3, #23
 8007948:	18fb      	adds	r3, r7, r3
 800794a:	2202      	movs	r2, #2
 800794c:	701a      	strb	r2, [r3, #0]
          break;
 800794e:	e022      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	23a7      	movs	r3, #167	; 0xa7
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	5cd3      	ldrb	r3, [r2, r3]
 8007958:	2b03      	cmp	r3, #3
 800795a:	d106      	bne.n	800796a <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	885b      	ldrh	r3, [r3, #2]
 8007960:	b2db      	uxtb	r3, r3
 8007962:	001a      	movs	r2, r3
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	659a      	str	r2, [r3, #88]	; 0x58
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007968:	e015      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>
            USBD_CtlError(pdev, req);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	0011      	movs	r1, r2
 8007970:	0018      	movs	r0, r3
 8007972:	f001 f9f3 	bl	8008d5c <USBD_CtlError>
            ret = USBD_FAIL;
 8007976:	2317      	movs	r3, #23
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	2202      	movs	r2, #2
 800797c:	701a      	strb	r2, [r3, #0]
          break;
 800797e:	e00a      	b.n	8007996 <USBD_CUSTOM_HID_Setup+0x1f2>

        default:
          USBD_CtlError(pdev, req);
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	0011      	movs	r1, r2
 8007986:	0018      	movs	r0, r3
 8007988:	f001 f9e8 	bl	8008d5c <USBD_CtlError>
          ret = USBD_FAIL;
 800798c:	2317      	movs	r3, #23
 800798e:	18fb      	adds	r3, r7, r3
 8007990:	2202      	movs	r2, #2
 8007992:	701a      	strb	r2, [r3, #0]
          break;
 8007994:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007996:	e00a      	b.n	80079ae <USBD_CUSTOM_HID_Setup+0x20a>

    default:
      USBD_CtlError(pdev, req);
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	0011      	movs	r1, r2
 800799e:	0018      	movs	r0, r3
 80079a0:	f001 f9dc 	bl	8008d5c <USBD_CtlError>
      ret = USBD_FAIL;
 80079a4:	2317      	movs	r3, #23
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	2202      	movs	r2, #2
 80079aa:	701a      	strb	r2, [r3, #0]
      break;
 80079ac:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 80079ae:	2317      	movs	r3, #23
 80079b0:	18fb      	adds	r3, r7, r3
 80079b2:	781b      	ldrb	r3, [r3, #0]
}
 80079b4:	0018      	movs	r0, r3
 80079b6:	46bd      	mov	sp, r7
 80079b8:	b008      	add	sp, #32
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	08009bec 	.word	0x08009bec
 80079c0:	200000c8 	.word	0x200000c8

080079c4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	1dbb      	adds	r3, r7, #6
 80079d0:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	23ae      	movs	r3, #174	; 0xae
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	58d3      	ldr	r3, [r2, r3]
 80079da:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	23a7      	movs	r3, #167	; 0xa7
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	5cd3      	ldrb	r3, [r2, r3]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d112      	bne.n	8007a0e <USBD_CUSTOM_HID_SendReport+0x4a>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2260      	movs	r2, #96	; 0x60
 80079ec:	5c9b      	ldrb	r3, [r3, r2]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10b      	bne.n	8007a0a <USBD_CUSTOM_HID_SendReport+0x46>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	2260      	movs	r2, #96	; 0x60
 80079f6:	2101      	movs	r1, #1
 80079f8:	5499      	strb	r1, [r3, r2]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80079fa:	1dbb      	adds	r3, r7, #6
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	2181      	movs	r1, #129	; 0x81
 8007a04:	f001 feb7 	bl	8009776 <USBD_LL_Transmit>
 8007a08:	e001      	b.n	8007a0e <USBD_CUSTOM_HID_SendReport+0x4a>
    }
    else
    {
      return USBD_BUSY;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e000      	b.n	8007a10 <USBD_CUSTOM_HID_SendReport+0x4c>
    }
  }
  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	0018      	movs	r0, r3
 8007a12:	46bd      	mov	sp, r7
 8007a14:	b006      	add	sp, #24
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2229      	movs	r2, #41	; 0x29
 8007a24:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007a26:	4b02      	ldr	r3, [pc, #8]	; (8007a30 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8007a28:	0018      	movs	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	b002      	add	sp, #8
 8007a2e:	bd80      	pop	{r7, pc}
 8007a30:	20000044 	.word	0x20000044

08007a34 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2229      	movs	r2, #41	; 0x29
 8007a40:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007a42:	4b02      	ldr	r3, [pc, #8]	; (8007a4c <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8007a44:	0018      	movs	r0, r3
 8007a46:	46bd      	mov	sp, r7
 8007a48:	b002      	add	sp, #8
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20000070 	.word	0x20000070

08007a50 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2229      	movs	r2, #41	; 0x29
 8007a5c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007a5e:	4b02      	ldr	r3, [pc, #8]	; (8007a68 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007a60:	0018      	movs	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b002      	add	sp, #8
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	2000009c 	.word	0x2000009c

08007a6c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	000a      	movs	r2, r1
 8007a76:	1cfb      	adds	r3, r7, #3
 8007a78:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	23ae      	movs	r3, #174	; 0xae
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	58d3      	ldr	r3, [r2, r3]
 8007a82:	2260      	movs	r2, #96	; 0x60
 8007a84:	2100      	movs	r1, #0
 8007a86:	5499      	strb	r1, [r3, r2]

  return USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b002      	add	sp, #8
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	000a      	movs	r2, r1
 8007a9c:	1cfb      	adds	r3, r7, #3
 8007a9e:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	23ae      	movs	r3, #174	; 0xae
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	58d3      	ldr	r3, [r2, r3]
 8007aa8:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	23af      	movs	r3, #175	; 0xaf
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	58d3      	ldr	r3, [r2, r3]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	0010      	movs	r0, r2
 8007ab8:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	234d      	movs	r3, #77	; 0x4d
 8007ac0:	2101      	movs	r1, #1
 8007ac2:	f001 fe8f 	bl	80097e4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	0018      	movs	r0, r3
 8007aca:	46bd      	mov	sp, r7
 8007acc:	b004      	add	sp, #16
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	23ae      	movs	r3, #174	; 0xae
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	58d3      	ldr	r3, [r2, r3]
 8007ae0:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d10a      	bne.n	8007b00 <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	23af      	movs	r3, #175	; 0xaf
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	58d3      	ldr	r3, [r2, r3]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	0010      	movs	r0, r2
 8007af8:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  return USBD_OK;
 8007b00:	2300      	movs	r3, #0
}
 8007b02:	0018      	movs	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b004      	add	sp, #16
 8007b08:	bd80      	pop	{r7, pc}
	...

08007b0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	220a      	movs	r2, #10
 8007b18:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007b1a:	4b02      	ldr	r3, [pc, #8]	; (8007b24 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8007b1c:	0018      	movs	r0, r3
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	b002      	add	sp, #8
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	200000d4 	.word	0x200000d4

08007b28 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007b32:	200f      	movs	r0, #15
 8007b34:	183b      	adds	r3, r7, r0
 8007b36:	2202      	movs	r2, #2
 8007b38:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	23af      	movs	r3, #175	; 0xaf
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007b4a:	183b      	adds	r3, r7, r0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007b50:	230f      	movs	r3, #15
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	781b      	ldrb	r3, [r3, #0]
}
 8007b56:	0018      	movs	r0, r3
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	b004      	add	sp, #16
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	1dfb      	adds	r3, r7, #7
 8007b6a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007b72:	2302      	movs	r3, #2
 8007b74:	e020      	b.n	8007bb8 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	23ad      	movs	r3, #173	; 0xad
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	58d3      	ldr	r3, [r2, r3]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d004      	beq.n	8007b8c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	23ad      	movs	r3, #173	; 0xad
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	2100      	movs	r1, #0
 8007b8a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d004      	beq.n	8007b9c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	23ac      	movs	r3, #172	; 0xac
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	68b9      	ldr	r1, [r7, #8]
 8007b9a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	23a7      	movs	r3, #167	; 0xa7
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1dfa      	adds	r2, r7, #7
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	0018      	movs	r0, r3
 8007bb2:	f001 fc4f 	bl	8009454 <USBD_LL_Init>

  return USBD_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	0018      	movs	r0, r3
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	b004      	add	sp, #16
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007bca:	200f      	movs	r0, #15
 8007bcc:	183b      	adds	r3, r7, r0
 8007bce:	2200      	movs	r2, #0
 8007bd0:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d008      	beq.n	8007bea <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	23ad      	movs	r3, #173	; 0xad
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007be2:	183b      	adds	r3, r7, r0
 8007be4:	2200      	movs	r2, #0
 8007be6:	701a      	strb	r2, [r3, #0]
 8007be8:	e003      	b.n	8007bf2 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007bea:	230f      	movs	r3, #15
 8007bec:	18fb      	adds	r3, r7, r3
 8007bee:	2202      	movs	r2, #2
 8007bf0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007bf2:	230f      	movs	r3, #15
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	781b      	ldrb	r3, [r3, #0]
}
 8007bf8:	0018      	movs	r0, r3
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	b004      	add	sp, #16
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f001 fc7a 	bl	8009504 <USBD_LL_Start>

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	0018      	movs	r0, r3
 8007c14:	46bd      	mov	sp, r7
 8007c16:	b002      	add	sp, #8
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	0018      	movs	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	b002      	add	sp, #8
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c2c:	b590      	push	{r4, r7, lr}
 8007c2e:	b085      	sub	sp, #20
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	000a      	movs	r2, r1
 8007c36:	1cfb      	adds	r3, r7, #3
 8007c38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007c3a:	240f      	movs	r4, #15
 8007c3c:	193b      	adds	r3, r7, r4
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	23ad      	movs	r3, #173	; 0xad
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	58d3      	ldr	r3, [r2, r3]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00e      	beq.n	8007c6c <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	23ad      	movs	r3, #173	; 0xad
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	58d3      	ldr	r3, [r2, r3]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	1cfa      	adds	r2, r7, #3
 8007c5a:	7811      	ldrb	r1, [r2, #0]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	0010      	movs	r0, r2
 8007c60:	4798      	blx	r3
 8007c62:	1e03      	subs	r3, r0, #0
 8007c64:	d102      	bne.n	8007c6c <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007c66:	193b      	adds	r3, r7, r4
 8007c68:	2200      	movs	r2, #0
 8007c6a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007c6c:	230f      	movs	r3, #15
 8007c6e:	18fb      	adds	r3, r7, r3
 8007c70:	781b      	ldrb	r3, [r3, #0]
}
 8007c72:	0018      	movs	r0, r3
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b005      	add	sp, #20
 8007c78:	bd90      	pop	{r4, r7, pc}

08007c7a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	000a      	movs	r2, r1
 8007c84:	1cfb      	adds	r3, r7, #3
 8007c86:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	23ad      	movs	r3, #173	; 0xad
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	58d3      	ldr	r3, [r2, r3]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	1cfa      	adds	r2, r7, #3
 8007c94:	7811      	ldrb	r1, [r2, #0]
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	0010      	movs	r0, r2
 8007c9a:	4798      	blx	r3

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b002      	add	sp, #8
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	22aa      	movs	r2, #170	; 0xaa
 8007cb6:	0092      	lsls	r2, r2, #2
 8007cb8:	4694      	mov	ip, r2
 8007cba:	4463      	add	r3, ip
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	0011      	movs	r1, r2
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f001 f810 	bl	8008ce6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	23a5      	movs	r3, #165	; 0xa5
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	2101      	movs	r1, #1
 8007cce:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a23      	ldr	r2, [pc, #140]	; (8007d60 <USBD_LL_SetupStage+0xb8>)
 8007cd4:	5a9b      	ldrh	r3, [r3, r2]
 8007cd6:	0019      	movs	r1, r3
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	23a6      	movs	r3, #166	; 0xa6
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	23aa      	movs	r3, #170	; 0xaa
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	5cd3      	ldrb	r3, [r2, r3]
 8007ce8:	001a      	movs	r2, r3
 8007cea:	231f      	movs	r3, #31
 8007cec:	4013      	ands	r3, r2
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d019      	beq.n	8007d26 <USBD_LL_SetupStage+0x7e>
 8007cf2:	d822      	bhi.n	8007d3a <USBD_LL_SetupStage+0x92>
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <USBD_LL_SetupStage+0x56>
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d00a      	beq.n	8007d12 <USBD_LL_SetupStage+0x6a>
 8007cfc:	e01d      	b.n	8007d3a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	22aa      	movs	r2, #170	; 0xaa
 8007d02:	0092      	lsls	r2, r2, #2
 8007d04:	189a      	adds	r2, r3, r2
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	0011      	movs	r1, r2
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f000 fa10 	bl	8008130 <USBD_StdDevReq>
      break;
 8007d10:	e020      	b.n	8007d54 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	22aa      	movs	r2, #170	; 0xaa
 8007d16:	0092      	lsls	r2, r2, #2
 8007d18:	189a      	adds	r2, r3, r2
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	0011      	movs	r1, r2
 8007d1e:	0018      	movs	r0, r3
 8007d20:	f000 fa78 	bl	8008214 <USBD_StdItfReq>
      break;
 8007d24:	e016      	b.n	8007d54 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	22aa      	movs	r2, #170	; 0xaa
 8007d2a:	0092      	lsls	r2, r2, #2
 8007d2c:	189a      	adds	r2, r3, r2
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	0011      	movs	r1, r2
 8007d32:	0018      	movs	r0, r3
 8007d34:	f000 fac5 	bl	80082c2 <USBD_StdEPReq>
      break;
 8007d38:	e00c      	b.n	8007d54 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	23aa      	movs	r3, #170	; 0xaa
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	5cd3      	ldrb	r3, [r2, r3]
 8007d42:	227f      	movs	r2, #127	; 0x7f
 8007d44:	4393      	bics	r3, r2
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	0011      	movs	r1, r2
 8007d4c:	0018      	movs	r0, r3
 8007d4e:	f001 fc60 	bl	8009612 <USBD_LL_StallEP>
      break;
 8007d52:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	0018      	movs	r0, r3
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	b002      	add	sp, #8
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	000002ae 	.word	0x000002ae

08007d64 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	607a      	str	r2, [r7, #4]
 8007d6e:	200b      	movs	r0, #11
 8007d70:	183b      	adds	r3, r7, r0
 8007d72:	1c0a      	adds	r2, r1, #0
 8007d74:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007d76:	183b      	adds	r3, r7, r0
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d154      	bne.n	8007e28 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3355      	adds	r3, #85	; 0x55
 8007d82:	33ff      	adds	r3, #255	; 0xff
 8007d84:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	23a5      	movs	r3, #165	; 0xa5
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	58d3      	ldr	r3, [r2, r3]
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d139      	bne.n	8007e06 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d919      	bls.n	8007dd2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	1ad2      	subs	r2, r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d203      	bcs.n	8007dc0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	e002      	b.n	8007dc6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	6879      	ldr	r1, [r7, #4]
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	001a      	movs	r2, r3
 8007dcc:	f001 f89b 	bl	8008f06 <USBD_CtlContinueRx>
 8007dd0:	e045      	b.n	8007e5e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	23ad      	movs	r3, #173	; 0xad
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	58d3      	ldr	r3, [r2, r3]
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00d      	beq.n	8007dfc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	23a7      	movs	r3, #167	; 0xa7
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d107      	bne.n	8007dfc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	23ad      	movs	r3, #173	; 0xad
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	58d3      	ldr	r3, [r2, r3]
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	0010      	movs	r0, r2
 8007dfa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	0018      	movs	r0, r3
 8007e00:	f001 f894 	bl	8008f2c <USBD_CtlSendStatus>
 8007e04:	e02b      	b.n	8007e5e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	23a5      	movs	r3, #165	; 0xa5
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	58d3      	ldr	r3, [r2, r3]
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d125      	bne.n	8007e5e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	23a5      	movs	r3, #165	; 0xa5
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	2100      	movs	r1, #0
 8007e1a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2100      	movs	r1, #0
 8007e20:	0018      	movs	r0, r3
 8007e22:	f001 fbf6 	bl	8009612 <USBD_LL_StallEP>
 8007e26:	e01a      	b.n	8007e5e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	23ad      	movs	r3, #173	; 0xad
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	58d3      	ldr	r3, [r2, r3]
 8007e30:	699b      	ldr	r3, [r3, #24]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d011      	beq.n	8007e5a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	23a7      	movs	r3, #167	; 0xa7
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d10b      	bne.n	8007e5a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	23ad      	movs	r3, #173	; 0xad
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	58d3      	ldr	r3, [r2, r3]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	220b      	movs	r2, #11
 8007e4e:	18ba      	adds	r2, r7, r2
 8007e50:	7811      	ldrb	r1, [r2, #0]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	0010      	movs	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	e001      	b.n	8007e5e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	e000      	b.n	8007e60 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	0018      	movs	r0, r3
 8007e62:	46bd      	mov	sp, r7
 8007e64:	b006      	add	sp, #24
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	200b      	movs	r0, #11
 8007e74:	183b      	adds	r3, r7, r0
 8007e76:	1c0a      	adds	r2, r1, #0
 8007e78:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e7a:	183b      	adds	r3, r7, r0
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d000      	beq.n	8007e84 <USBD_LL_DataInStage+0x1c>
 8007e82:	e08e      	b.n	8007fa2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3314      	adds	r3, #20
 8007e88:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	23a5      	movs	r3, #165	; 0xa5
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	58d3      	ldr	r3, [r2, r3]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d164      	bne.n	8007f60 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d915      	bls.n	8007ece <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	68da      	ldr	r2, [r3, #12]
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	1ad2      	subs	r2, r2, r3
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	6879      	ldr	r1, [r7, #4]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f000 ffec 	bl	8008e98 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ec0:	68f8      	ldr	r0, [r7, #12]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	f001 fc8c 	bl	80097e4 <USBD_LL_PrepareReceive>
 8007ecc:	e059      	b.n	8007f82 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	689a      	ldr	r2, [r3, #8]
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	0019      	movs	r1, r3
 8007ed8:	0010      	movs	r0, r2
 8007eda:	f7f8 f99b 	bl	8000214 <__aeabi_uidivmod>
 8007ede:	1e0b      	subs	r3, r1, #0
 8007ee0:	d11f      	bne.n	8007f22 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	689a      	ldr	r2, [r3, #8]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d319      	bcc.n	8007f22 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	689a      	ldr	r2, [r3, #8]
 8007ef2:	68f9      	ldr	r1, [r7, #12]
 8007ef4:	23a6      	movs	r3, #166	; 0xa6
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d211      	bcs.n	8007f22 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	2100      	movs	r1, #0
 8007f04:	0018      	movs	r0, r3
 8007f06:	f000 ffc7 	bl	8008e98 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	23a6      	movs	r3, #166	; 0xa6
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	2100      	movs	r1, #0
 8007f12:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	2300      	movs	r3, #0
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2100      	movs	r1, #0
 8007f1c:	f001 fc62 	bl	80097e4 <USBD_LL_PrepareReceive>
 8007f20:	e02f      	b.n	8007f82 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	23ad      	movs	r3, #173	; 0xad
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	58d3      	ldr	r3, [r2, r3]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00d      	beq.n	8007f4c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	23a7      	movs	r3, #167	; 0xa7
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d107      	bne.n	8007f4c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	23ad      	movs	r3, #173	; 0xad
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	58d3      	ldr	r3, [r2, r3]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	0010      	movs	r0, r2
 8007f4a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2180      	movs	r1, #128	; 0x80
 8007f50:	0018      	movs	r0, r3
 8007f52:	f001 fb5e 	bl	8009612 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	0018      	movs	r0, r3
 8007f5a:	f000 fffb 	bl	8008f54 <USBD_CtlReceiveStatus>
 8007f5e:	e010      	b.n	8007f82 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	23a5      	movs	r3, #165	; 0xa5
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	58d3      	ldr	r3, [r2, r3]
 8007f68:	2b04      	cmp	r3, #4
 8007f6a:	d005      	beq.n	8007f78 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	23a5      	movs	r3, #165	; 0xa5
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d104      	bne.n	8007f82 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2180      	movs	r1, #128	; 0x80
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f001 fb48 	bl	8009612 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007f82:	68fa      	ldr	r2, [r7, #12]
 8007f84:	23a8      	movs	r3, #168	; 0xa8
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	5cd3      	ldrb	r3, [r2, r3]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d124      	bne.n	8007fd8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7ff fe42 	bl	8007c1a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	23a8      	movs	r3, #168	; 0xa8
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	54d1      	strb	r1, [r2, r3]
 8007fa0:	e01a      	b.n	8007fd8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	23ad      	movs	r3, #173	; 0xad
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	58d3      	ldr	r3, [r2, r3]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	23a7      	movs	r3, #167	; 0xa7
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8007fb8:	2b03      	cmp	r3, #3
 8007fba:	d10b      	bne.n	8007fd4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007fbc:	68fa      	ldr	r2, [r7, #12]
 8007fbe:	23ad      	movs	r3, #173	; 0xad
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	58d3      	ldr	r3, [r2, r3]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	220b      	movs	r2, #11
 8007fc8:	18ba      	adds	r2, r7, r2
 8007fca:	7811      	ldrb	r1, [r2, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	0010      	movs	r0, r2
 8007fd0:	4798      	blx	r3
 8007fd2:	e001      	b.n	8007fd8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	e000      	b.n	8007fda <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	0018      	movs	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	b006      	add	sp, #24
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	2340      	movs	r3, #64	; 0x40
 8007fee:	2200      	movs	r2, #0
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	f001 faac 	bl	800954e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	23ac      	movs	r3, #172	; 0xac
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	23b2      	movs	r3, #178	; 0xb2
 8008004:	005b      	lsls	r3, r3, #1
 8008006:	2140      	movs	r1, #64	; 0x40
 8008008:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	2340      	movs	r3, #64	; 0x40
 800800e:	2200      	movs	r2, #0
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	f001 fa9c 	bl	800954e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2240      	movs	r2, #64	; 0x40
 8008020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	23a7      	movs	r3, #167	; 0xa7
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	2101      	movs	r1, #1
 800802a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	23a5      	movs	r3, #165	; 0xa5
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	2100      	movs	r1, #0
 8008034:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	23a9      	movs	r3, #169	; 0xa9
 8008040:	009b      	lsls	r3, r3, #2
 8008042:	2100      	movs	r1, #0
 8008044:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	23ae      	movs	r3, #174	; 0xae
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	58d3      	ldr	r3, [r2, r3]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	23ad      	movs	r3, #173	; 0xad
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	58d3      	ldr	r3, [r2, r3]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	b2d9      	uxtb	r1, r3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0018      	movs	r0, r3
 8008066:	4790      	blx	r2
  }

  return USBD_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	0018      	movs	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	b002      	add	sp, #8
 8008070:	bd80      	pop	{r7, pc}

08008072 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	000a      	movs	r2, r1
 800807c:	1cfb      	adds	r3, r7, #3
 800807e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	1cfa      	adds	r2, r7, #3
 8008084:	7812      	ldrb	r2, [r2, #0]
 8008086:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008088:	2300      	movs	r3, #0
}
 800808a:	0018      	movs	r0, r3
 800808c:	46bd      	mov	sp, r7
 800808e:	b002      	add	sp, #8
 8008090:	bd80      	pop	{r7, pc}
	...

08008094 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	23a7      	movs	r3, #167	; 0xa7
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	5cd1      	ldrb	r1, [r2, r3]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a06      	ldr	r2, [pc, #24]	; (80080c0 <USBD_LL_Suspend+0x2c>)
 80080a8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	23a7      	movs	r3, #167	; 0xa7
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	2104      	movs	r1, #4
 80080b2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	0018      	movs	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	b002      	add	sp, #8
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	0000029d 	.word	0x0000029d

080080c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	23a7      	movs	r3, #167	; 0xa7
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	5cd3      	ldrb	r3, [r2, r3]
 80080d4:	2b04      	cmp	r3, #4
 80080d6:	d106      	bne.n	80080e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <USBD_LL_Resume+0x2c>)
 80080dc:	5c99      	ldrb	r1, [r3, r2]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	23a7      	movs	r3, #167	; 0xa7
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	0018      	movs	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b002      	add	sp, #8
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	0000029d 	.word	0x0000029d

080080f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	23a7      	movs	r3, #167	; 0xa7
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	5cd3      	ldrb	r3, [r2, r3]
 8008104:	2b03      	cmp	r3, #3
 8008106:	d10e      	bne.n	8008126 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	23ad      	movs	r3, #173	; 0xad
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	58d3      	ldr	r3, [r2, r3]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d007      	beq.n	8008126 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	23ad      	movs	r3, #173	; 0xad
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	58d3      	ldr	r3, [r2, r3]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	0010      	movs	r0, r2
 8008124:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	0018      	movs	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}

08008130 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800813a:	230f      	movs	r3, #15
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	2200      	movs	r2, #0
 8008140:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	001a      	movs	r2, r3
 8008148:	2360      	movs	r3, #96	; 0x60
 800814a:	4013      	ands	r3, r2
 800814c:	2b40      	cmp	r3, #64	; 0x40
 800814e:	d004      	beq.n	800815a <USBD_StdDevReq+0x2a>
 8008150:	d84f      	bhi.n	80081f2 <USBD_StdDevReq+0xc2>
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <USBD_StdDevReq+0x3e>
 8008156:	2b20      	cmp	r3, #32
 8008158:	d14b      	bne.n	80081f2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	23ad      	movs	r3, #173	; 0xad
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	58d3      	ldr	r3, [r2, r3]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	0010      	movs	r0, r2
 800816a:	4798      	blx	r3
      break;
 800816c:	e048      	b.n	8008200 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	785b      	ldrb	r3, [r3, #1]
 8008172:	2b09      	cmp	r3, #9
 8008174:	d835      	bhi.n	80081e2 <USBD_StdDevReq+0xb2>
 8008176:	009a      	lsls	r2, r3, #2
 8008178:	4b25      	ldr	r3, [pc, #148]	; (8008210 <USBD_StdDevReq+0xe0>)
 800817a:	18d3      	adds	r3, r2, r3
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008180:	683a      	ldr	r2, [r7, #0]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	0011      	movs	r1, r2
 8008186:	0018      	movs	r0, r3
 8008188:	f000 fa52 	bl	8008630 <USBD_GetDescriptor>
          break;
 800818c:	e030      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f000 fbfd 	bl	8008994 <USBD_SetAddress>
          break;
 800819a:	e029      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	0011      	movs	r1, r2
 80081a2:	0018      	movs	r0, r3
 80081a4:	f000 fc4a 	bl	8008a3c <USBD_SetConfig>
          break;
 80081a8:	e022      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	0011      	movs	r1, r2
 80081b0:	0018      	movs	r0, r3
 80081b2:	f000 fce7 	bl	8008b84 <USBD_GetConfig>
          break;
 80081b6:	e01b      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	0011      	movs	r1, r2
 80081be:	0018      	movs	r0, r3
 80081c0:	f000 fd1b 	bl	8008bfa <USBD_GetStatus>
          break;
 80081c4:	e014      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	0011      	movs	r1, r2
 80081cc:	0018      	movs	r0, r3
 80081ce:	f000 fd4e 	bl	8008c6e <USBD_SetFeature>
          break;
 80081d2:	e00d      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	0011      	movs	r1, r2
 80081da:	0018      	movs	r0, r3
 80081dc:	f000 fd5d 	bl	8008c9a <USBD_ClrFeature>
          break;
 80081e0:	e006      	b.n	80081f0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80081e2:	683a      	ldr	r2, [r7, #0]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	0011      	movs	r1, r2
 80081e8:	0018      	movs	r0, r3
 80081ea:	f000 fdb7 	bl	8008d5c <USBD_CtlError>
          break;
 80081ee:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80081f0:	e006      	b.n	8008200 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	0011      	movs	r1, r2
 80081f8:	0018      	movs	r0, r3
 80081fa:	f000 fdaf 	bl	8008d5c <USBD_CtlError>
      break;
 80081fe:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008200:	230f      	movs	r3, #15
 8008202:	18fb      	adds	r3, r7, r3
 8008204:	781b      	ldrb	r3, [r3, #0]
}
 8008206:	0018      	movs	r0, r3
 8008208:	46bd      	mov	sp, r7
 800820a:	b004      	add	sp, #16
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	08009c1c 	.word	0x08009c1c

08008214 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008214:	b5b0      	push	{r4, r5, r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800821e:	230f      	movs	r3, #15
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	2200      	movs	r2, #0
 8008224:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	001a      	movs	r2, r3
 800822c:	2360      	movs	r3, #96	; 0x60
 800822e:	4013      	ands	r3, r2
 8008230:	2b40      	cmp	r3, #64	; 0x40
 8008232:	d004      	beq.n	800823e <USBD_StdItfReq+0x2a>
 8008234:	d839      	bhi.n	80082aa <USBD_StdItfReq+0x96>
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <USBD_StdItfReq+0x2a>
 800823a:	2b20      	cmp	r3, #32
 800823c:	d135      	bne.n	80082aa <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800823e:	687a      	ldr	r2, [r7, #4]
 8008240:	23a7      	movs	r3, #167	; 0xa7
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	5cd3      	ldrb	r3, [r2, r3]
 8008246:	3b01      	subs	r3, #1
 8008248:	2b02      	cmp	r3, #2
 800824a:	d825      	bhi.n	8008298 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	889b      	ldrh	r3, [r3, #4]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b01      	cmp	r3, #1
 8008254:	d819      	bhi.n	800828a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	23ad      	movs	r3, #173	; 0xad
 800825a:	009b      	lsls	r3, r3, #2
 800825c:	58d3      	ldr	r3, [r2, r3]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	250f      	movs	r5, #15
 8008262:	197c      	adds	r4, r7, r5
 8008264:	6839      	ldr	r1, [r7, #0]
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	0010      	movs	r0, r2
 800826a:	4798      	blx	r3
 800826c:	0003      	movs	r3, r0
 800826e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	88db      	ldrh	r3, [r3, #6]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d116      	bne.n	80082a6 <USBD_StdItfReq+0x92>
 8008278:	197b      	adds	r3, r7, r5
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d112      	bne.n	80082a6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	0018      	movs	r0, r3
 8008284:	f000 fe52 	bl	8008f2c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008288:	e00d      	b.n	80082a6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	0011      	movs	r1, r2
 8008290:	0018      	movs	r0, r3
 8008292:	f000 fd63 	bl	8008d5c <USBD_CtlError>
          break;
 8008296:	e006      	b.n	80082a6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	0011      	movs	r1, r2
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fd5c 	bl	8008d5c <USBD_CtlError>
          break;
 80082a4:	e000      	b.n	80082a8 <USBD_StdItfReq+0x94>
          break;
 80082a6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80082a8:	e006      	b.n	80082b8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	0011      	movs	r1, r2
 80082b0:	0018      	movs	r0, r3
 80082b2:	f000 fd53 	bl	8008d5c <USBD_CtlError>
      break;
 80082b6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	0018      	movs	r0, r3
 80082bc:	46bd      	mov	sp, r7
 80082be:	b004      	add	sp, #16
 80082c0:	bdb0      	pop	{r4, r5, r7, pc}

080082c2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80082c2:	b5b0      	push	{r4, r5, r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80082cc:	230f      	movs	r3, #15
 80082ce:	18fb      	adds	r3, r7, r3
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	889a      	ldrh	r2, [r3, #4]
 80082d8:	230e      	movs	r3, #14
 80082da:	18fb      	adds	r3, r7, r3
 80082dc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	001a      	movs	r2, r3
 80082e4:	2360      	movs	r3, #96	; 0x60
 80082e6:	4013      	ands	r3, r2
 80082e8:	2b40      	cmp	r3, #64	; 0x40
 80082ea:	d006      	beq.n	80082fa <USBD_StdEPReq+0x38>
 80082ec:	d900      	bls.n	80082f0 <USBD_StdEPReq+0x2e>
 80082ee:	e190      	b.n	8008612 <USBD_StdEPReq+0x350>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00c      	beq.n	800830e <USBD_StdEPReq+0x4c>
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d000      	beq.n	80082fa <USBD_StdEPReq+0x38>
 80082f8:	e18b      	b.n	8008612 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	23ad      	movs	r3, #173	; 0xad
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	58d3      	ldr	r3, [r2, r3]
 8008302:	689b      	ldr	r3, [r3, #8]
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	0010      	movs	r0, r2
 800830a:	4798      	blx	r3
      break;
 800830c:	e188      	b.n	8008620 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	001a      	movs	r2, r3
 8008314:	2360      	movs	r3, #96	; 0x60
 8008316:	4013      	ands	r3, r2
 8008318:	2b20      	cmp	r3, #32
 800831a:	d10f      	bne.n	800833c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	23ad      	movs	r3, #173	; 0xad
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	58d3      	ldr	r3, [r2, r3]
 8008324:	689b      	ldr	r3, [r3, #8]
 8008326:	250f      	movs	r5, #15
 8008328:	197c      	adds	r4, r7, r5
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	0010      	movs	r0, r2
 8008330:	4798      	blx	r3
 8008332:	0003      	movs	r3, r0
 8008334:	7023      	strb	r3, [r4, #0]

        return ret;
 8008336:	197b      	adds	r3, r7, r5
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	e174      	b.n	8008626 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	785b      	ldrb	r3, [r3, #1]
 8008340:	2b03      	cmp	r3, #3
 8008342:	d007      	beq.n	8008354 <USBD_StdEPReq+0x92>
 8008344:	dd00      	ble.n	8008348 <USBD_StdEPReq+0x86>
 8008346:	e15c      	b.n	8008602 <USBD_StdEPReq+0x340>
 8008348:	2b00      	cmp	r3, #0
 800834a:	d100      	bne.n	800834e <USBD_StdEPReq+0x8c>
 800834c:	e092      	b.n	8008474 <USBD_StdEPReq+0x1b2>
 800834e:	2b01      	cmp	r3, #1
 8008350:	d04b      	beq.n	80083ea <USBD_StdEPReq+0x128>
 8008352:	e156      	b.n	8008602 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	23a7      	movs	r3, #167	; 0xa7
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	5cd3      	ldrb	r3, [r2, r3]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d002      	beq.n	8008366 <USBD_StdEPReq+0xa4>
 8008360:	2b03      	cmp	r3, #3
 8008362:	d01d      	beq.n	80083a0 <USBD_StdEPReq+0xde>
 8008364:	e039      	b.n	80083da <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008366:	220e      	movs	r2, #14
 8008368:	18bb      	adds	r3, r7, r2
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d010      	beq.n	8008392 <USBD_StdEPReq+0xd0>
 8008370:	18bb      	adds	r3, r7, r2
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	2b80      	cmp	r3, #128	; 0x80
 8008376:	d00c      	beq.n	8008392 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008378:	18bb      	adds	r3, r7, r2
 800837a:	781a      	ldrb	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	0011      	movs	r1, r2
 8008380:	0018      	movs	r0, r3
 8008382:	f001 f946 	bl	8009612 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2180      	movs	r1, #128	; 0x80
 800838a:	0018      	movs	r0, r3
 800838c:	f001 f941 	bl	8009612 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008390:	e02a      	b.n	80083e8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	0011      	movs	r1, r2
 8008398:	0018      	movs	r0, r3
 800839a:	f000 fcdf 	bl	8008d5c <USBD_CtlError>
              break;
 800839e:	e023      	b.n	80083e8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	885b      	ldrh	r3, [r3, #2]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d113      	bne.n	80083d0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 80083a8:	220e      	movs	r2, #14
 80083aa:	18bb      	adds	r3, r7, r2
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00e      	beq.n	80083d0 <USBD_StdEPReq+0x10e>
 80083b2:	18bb      	adds	r3, r7, r2
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b80      	cmp	r3, #128	; 0x80
 80083b8:	d00a      	beq.n	80083d0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	88db      	ldrh	r3, [r3, #6]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80083c2:	18bb      	adds	r3, r7, r2
 80083c4:	781a      	ldrb	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	0011      	movs	r1, r2
 80083ca:	0018      	movs	r0, r3
 80083cc:	f001 f921 	bl	8009612 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	0018      	movs	r0, r3
 80083d4:	f000 fdaa 	bl	8008f2c <USBD_CtlSendStatus>

              break;
 80083d8:	e006      	b.n	80083e8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80083da:	683a      	ldr	r2, [r7, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	0011      	movs	r1, r2
 80083e0:	0018      	movs	r0, r3
 80083e2:	f000 fcbb 	bl	8008d5c <USBD_CtlError>
              break;
 80083e6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80083e8:	e112      	b.n	8008610 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	23a7      	movs	r3, #167	; 0xa7
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	5cd3      	ldrb	r3, [r2, r3]
 80083f2:	2b02      	cmp	r3, #2
 80083f4:	d002      	beq.n	80083fc <USBD_StdEPReq+0x13a>
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d01d      	beq.n	8008436 <USBD_StdEPReq+0x174>
 80083fa:	e032      	b.n	8008462 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80083fc:	220e      	movs	r2, #14
 80083fe:	18bb      	adds	r3, r7, r2
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d010      	beq.n	8008428 <USBD_StdEPReq+0x166>
 8008406:	18bb      	adds	r3, r7, r2
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	2b80      	cmp	r3, #128	; 0x80
 800840c:	d00c      	beq.n	8008428 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800840e:	18bb      	adds	r3, r7, r2
 8008410:	781a      	ldrb	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	0011      	movs	r1, r2
 8008416:	0018      	movs	r0, r3
 8008418:	f001 f8fb 	bl	8009612 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2180      	movs	r1, #128	; 0x80
 8008420:	0018      	movs	r0, r3
 8008422:	f001 f8f6 	bl	8009612 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008426:	e024      	b.n	8008472 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008428:	683a      	ldr	r2, [r7, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0011      	movs	r1, r2
 800842e:	0018      	movs	r0, r3
 8008430:	f000 fc94 	bl	8008d5c <USBD_CtlError>
              break;
 8008434:	e01d      	b.n	8008472 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	885b      	ldrh	r3, [r3, #2]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d118      	bne.n	8008470 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800843e:	210e      	movs	r1, #14
 8008440:	187b      	adds	r3, r7, r1
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	227f      	movs	r2, #127	; 0x7f
 8008446:	4013      	ands	r3, r2
 8008448:	d006      	beq.n	8008458 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800844a:	187b      	adds	r3, r7, r1
 800844c:	781a      	ldrb	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	0011      	movs	r1, r2
 8008452:	0018      	movs	r0, r3
 8008454:	f001 f908 	bl	8009668 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	0018      	movs	r0, r3
 800845c:	f000 fd66 	bl	8008f2c <USBD_CtlSendStatus>
              }
              break;
 8008460:	e006      	b.n	8008470 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8008462:	683a      	ldr	r2, [r7, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0011      	movs	r1, r2
 8008468:	0018      	movs	r0, r3
 800846a:	f000 fc77 	bl	8008d5c <USBD_CtlError>
              break;
 800846e:	e000      	b.n	8008472 <USBD_StdEPReq+0x1b0>
              break;
 8008470:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008472:	e0cd      	b.n	8008610 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	23a7      	movs	r3, #167	; 0xa7
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	5cd3      	ldrb	r3, [r2, r3]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d002      	beq.n	8008486 <USBD_StdEPReq+0x1c4>
 8008480:	2b03      	cmp	r3, #3
 8008482:	d03c      	beq.n	80084fe <USBD_StdEPReq+0x23c>
 8008484:	e0b5      	b.n	80085f2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008486:	220e      	movs	r2, #14
 8008488:	18bb      	adds	r3, r7, r2
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <USBD_StdEPReq+0x1e4>
 8008490:	18bb      	adds	r3, r7, r2
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b80      	cmp	r3, #128	; 0x80
 8008496:	d006      	beq.n	80084a6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	0011      	movs	r1, r2
 800849e:	0018      	movs	r0, r3
 80084a0:	f000 fc5c 	bl	8008d5c <USBD_CtlError>
                break;
 80084a4:	e0ac      	b.n	8008600 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084a6:	220e      	movs	r2, #14
 80084a8:	18bb      	adds	r3, r7, r2
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	b25b      	sxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	da0c      	bge.n	80084cc <USBD_StdEPReq+0x20a>
 80084b2:	18bb      	adds	r3, r7, r2
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	227f      	movs	r2, #127	; 0x7f
 80084b8:	401a      	ands	r2, r3
 80084ba:	0013      	movs	r3, r2
 80084bc:	009b      	lsls	r3, r3, #2
 80084be:	189b      	adds	r3, r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	3310      	adds	r3, #16
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	18d3      	adds	r3, r2, r3
 80084c8:	3304      	adds	r3, #4
 80084ca:	e00d      	b.n	80084e8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084cc:	230e      	movs	r3, #14
 80084ce:	18fb      	adds	r3, r7, r3
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	227f      	movs	r2, #127	; 0x7f
 80084d4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084d6:	0013      	movs	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	189b      	adds	r3, r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	3351      	adds	r3, #81	; 0x51
 80084e0:	33ff      	adds	r3, #255	; 0xff
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	18d3      	adds	r3, r2, r3
 80084e6:	3304      	adds	r3, #4
 80084e8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	2200      	movs	r2, #0
 80084ee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80084f0:	68b9      	ldr	r1, [r7, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2202      	movs	r2, #2
 80084f6:	0018      	movs	r0, r3
 80084f8:	f000 fcae 	bl	8008e58 <USBD_CtlSendData>
              break;
 80084fc:	e080      	b.n	8008600 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80084fe:	220e      	movs	r2, #14
 8008500:	18bb      	adds	r3, r7, r2
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	b25b      	sxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	da14      	bge.n	8008534 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800850a:	18bb      	adds	r3, r7, r2
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	220f      	movs	r2, #15
 8008510:	401a      	ands	r2, r3
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	0013      	movs	r3, r2
 8008516:	009b      	lsls	r3, r3, #2
 8008518:	189b      	adds	r3, r3, r2
 800851a:	009b      	lsls	r3, r3, #2
 800851c:	18cb      	adds	r3, r1, r3
 800851e:	3318      	adds	r3, #24
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d11e      	bne.n	8008564 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	0011      	movs	r1, r2
 800852c:	0018      	movs	r0, r3
 800852e:	f000 fc15 	bl	8008d5c <USBD_CtlError>
                  break;
 8008532:	e065      	b.n	8008600 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008534:	230e      	movs	r3, #14
 8008536:	18fb      	adds	r3, r7, r3
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	220f      	movs	r2, #15
 800853c:	401a      	ands	r2, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	23ac      	movs	r3, #172	; 0xac
 8008542:	0059      	lsls	r1, r3, #1
 8008544:	0013      	movs	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	189b      	adds	r3, r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	18c3      	adds	r3, r0, r3
 800854e:	185b      	adds	r3, r3, r1
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	0011      	movs	r1, r2
 800855c:	0018      	movs	r0, r3
 800855e:	f000 fbfd 	bl	8008d5c <USBD_CtlError>
                  break;
 8008562:	e04d      	b.n	8008600 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008564:	220e      	movs	r2, #14
 8008566:	18bb      	adds	r3, r7, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	b25b      	sxtb	r3, r3
 800856c:	2b00      	cmp	r3, #0
 800856e:	da0c      	bge.n	800858a <USBD_StdEPReq+0x2c8>
 8008570:	18bb      	adds	r3, r7, r2
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	227f      	movs	r2, #127	; 0x7f
 8008576:	401a      	ands	r2, r3
 8008578:	0013      	movs	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	189b      	adds	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	3310      	adds	r3, #16
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	18d3      	adds	r3, r2, r3
 8008586:	3304      	adds	r3, #4
 8008588:	e00d      	b.n	80085a6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800858a:	230e      	movs	r3, #14
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	227f      	movs	r2, #127	; 0x7f
 8008592:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008594:	0013      	movs	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	189b      	adds	r3, r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	3351      	adds	r3, #81	; 0x51
 800859e:	33ff      	adds	r3, #255	; 0xff
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	18d3      	adds	r3, r2, r3
 80085a4:	3304      	adds	r3, #4
 80085a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085a8:	220e      	movs	r2, #14
 80085aa:	18bb      	adds	r3, r7, r2
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <USBD_StdEPReq+0x2f8>
 80085b2:	18bb      	adds	r3, r7, r2
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b80      	cmp	r3, #128	; 0x80
 80085b8:	d103      	bne.n	80085c2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	2200      	movs	r2, #0
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	e010      	b.n	80085e4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80085c2:	230e      	movs	r3, #14
 80085c4:	18fb      	adds	r3, r7, r3
 80085c6:	781a      	ldrb	r2, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	0011      	movs	r1, r2
 80085cc:	0018      	movs	r0, r3
 80085ce:	f001 f876 	bl	80096be <USBD_LL_IsStallEP>
 80085d2:	1e03      	subs	r3, r0, #0
 80085d4:	d003      	beq.n	80085de <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2201      	movs	r2, #1
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	e002      	b.n	80085e4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085e4:	68b9      	ldr	r1, [r7, #8]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	0018      	movs	r0, r3
 80085ec:	f000 fc34 	bl	8008e58 <USBD_CtlSendData>
              break;
 80085f0:	e006      	b.n	8008600 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f000 fbaf 	bl	8008d5c <USBD_CtlError>
              break;
 80085fe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008600:	e006      	b.n	8008610 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	0011      	movs	r1, r2
 8008608:	0018      	movs	r0, r3
 800860a:	f000 fba7 	bl	8008d5c <USBD_CtlError>
          break;
 800860e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008610:	e006      	b.n	8008620 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	0011      	movs	r1, r2
 8008618:	0018      	movs	r0, r3
 800861a:	f000 fb9f 	bl	8008d5c <USBD_CtlError>
      break;
 800861e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008620:	230f      	movs	r3, #15
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	781b      	ldrb	r3, [r3, #0]
}
 8008626:	0018      	movs	r0, r3
 8008628:	46bd      	mov	sp, r7
 800862a:	b004      	add	sp, #16
 800862c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008630 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800863a:	2308      	movs	r3, #8
 800863c:	18fb      	adds	r3, r7, r3
 800863e:	2200      	movs	r2, #0
 8008640:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008646:	230b      	movs	r3, #11
 8008648:	18fb      	adds	r3, r7, r3
 800864a:	2200      	movs	r2, #0
 800864c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	885b      	ldrh	r3, [r3, #2]
 8008652:	0a1b      	lsrs	r3, r3, #8
 8008654:	b29b      	uxth	r3, r3
 8008656:	2b07      	cmp	r3, #7
 8008658:	d900      	bls.n	800865c <USBD_GetDescriptor+0x2c>
 800865a:	e159      	b.n	8008910 <USBD_GetDescriptor+0x2e0>
 800865c:	009a      	lsls	r2, r3, #2
 800865e:	4bcb      	ldr	r3, [pc, #812]	; (800898c <USBD_GetDescriptor+0x35c>)
 8008660:	18d3      	adds	r3, r2, r3
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	23ac      	movs	r3, #172	; 0xac
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	58d3      	ldr	r3, [r2, r3]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	7c12      	ldrb	r2, [r2, #16]
 8008674:	2108      	movs	r1, #8
 8008676:	1879      	adds	r1, r7, r1
 8008678:	0010      	movs	r0, r2
 800867a:	4798      	blx	r3
 800867c:	0003      	movs	r3, r0
 800867e:	60fb      	str	r3, [r7, #12]
      break;
 8008680:	e153      	b.n	800892a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	7c1b      	ldrb	r3, [r3, #16]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10f      	bne.n	80086aa <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	23ad      	movs	r3, #173	; 0xad
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	58d3      	ldr	r3, [r2, r3]
 8008692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008694:	2208      	movs	r2, #8
 8008696:	18ba      	adds	r2, r7, r2
 8008698:	0010      	movs	r0, r2
 800869a:	4798      	blx	r3
 800869c:	0003      	movs	r3, r0
 800869e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	3301      	adds	r3, #1
 80086a4:	2202      	movs	r2, #2
 80086a6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80086a8:	e13f      	b.n	800892a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	23ad      	movs	r3, #173	; 0xad
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	58d3      	ldr	r3, [r2, r3]
 80086b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b4:	2208      	movs	r2, #8
 80086b6:	18ba      	adds	r2, r7, r2
 80086b8:	0010      	movs	r0, r2
 80086ba:	4798      	blx	r3
 80086bc:	0003      	movs	r3, r0
 80086be:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	2202      	movs	r2, #2
 80086c6:	701a      	strb	r2, [r3, #0]
      break;
 80086c8:	e12f      	b.n	800892a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	885b      	ldrh	r3, [r3, #2]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b05      	cmp	r3, #5
 80086d2:	d900      	bls.n	80086d6 <USBD_GetDescriptor+0xa6>
 80086d4:	e0d0      	b.n	8008878 <USBD_GetDescriptor+0x248>
 80086d6:	009a      	lsls	r2, r3, #2
 80086d8:	4bad      	ldr	r3, [pc, #692]	; (8008990 <USBD_GetDescriptor+0x360>)
 80086da:	18d3      	adds	r3, r2, r3
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	23ac      	movs	r3, #172	; 0xac
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	58d3      	ldr	r3, [r2, r3]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00d      	beq.n	800870a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	23ac      	movs	r3, #172	; 0xac
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	58d3      	ldr	r3, [r2, r3]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	7c12      	ldrb	r2, [r2, #16]
 80086fc:	2108      	movs	r1, #8
 80086fe:	1879      	adds	r1, r7, r1
 8008700:	0010      	movs	r0, r2
 8008702:	4798      	blx	r3
 8008704:	0003      	movs	r3, r0
 8008706:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008708:	e0c3      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	0011      	movs	r1, r2
 8008710:	0018      	movs	r0, r3
 8008712:	f000 fb23 	bl	8008d5c <USBD_CtlError>
            err++;
 8008716:	210b      	movs	r1, #11
 8008718:	187b      	adds	r3, r7, r1
 800871a:	781a      	ldrb	r2, [r3, #0]
 800871c:	187b      	adds	r3, r7, r1
 800871e:	3201      	adds	r2, #1
 8008720:	701a      	strb	r2, [r3, #0]
          break;
 8008722:	e0b6      	b.n	8008892 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	23ac      	movs	r3, #172	; 0xac
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	58d3      	ldr	r3, [r2, r3]
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00d      	beq.n	800874e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008732:	687a      	ldr	r2, [r7, #4]
 8008734:	23ac      	movs	r3, #172	; 0xac
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	58d3      	ldr	r3, [r2, r3]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	7c12      	ldrb	r2, [r2, #16]
 8008740:	2108      	movs	r1, #8
 8008742:	1879      	adds	r1, r7, r1
 8008744:	0010      	movs	r0, r2
 8008746:	4798      	blx	r3
 8008748:	0003      	movs	r3, r0
 800874a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800874c:	e0a1      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	0011      	movs	r1, r2
 8008754:	0018      	movs	r0, r3
 8008756:	f000 fb01 	bl	8008d5c <USBD_CtlError>
            err++;
 800875a:	210b      	movs	r1, #11
 800875c:	187b      	adds	r3, r7, r1
 800875e:	781a      	ldrb	r2, [r3, #0]
 8008760:	187b      	adds	r3, r7, r1
 8008762:	3201      	adds	r2, #1
 8008764:	701a      	strb	r2, [r3, #0]
          break;
 8008766:	e094      	b.n	8008892 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	23ac      	movs	r3, #172	; 0xac
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	58d3      	ldr	r3, [r2, r3]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00d      	beq.n	8008792 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	23ac      	movs	r3, #172	; 0xac
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	58d3      	ldr	r3, [r2, r3]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	7c12      	ldrb	r2, [r2, #16]
 8008784:	2108      	movs	r1, #8
 8008786:	1879      	adds	r1, r7, r1
 8008788:	0010      	movs	r0, r2
 800878a:	4798      	blx	r3
 800878c:	0003      	movs	r3, r0
 800878e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008790:	e07f      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008792:	683a      	ldr	r2, [r7, #0]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	0011      	movs	r1, r2
 8008798:	0018      	movs	r0, r3
 800879a:	f000 fadf 	bl	8008d5c <USBD_CtlError>
            err++;
 800879e:	210b      	movs	r1, #11
 80087a0:	187b      	adds	r3, r7, r1
 80087a2:	781a      	ldrb	r2, [r3, #0]
 80087a4:	187b      	adds	r3, r7, r1
 80087a6:	3201      	adds	r2, #1
 80087a8:	701a      	strb	r2, [r3, #0]
          break;
 80087aa:	e072      	b.n	8008892 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	23ac      	movs	r3, #172	; 0xac
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	58d3      	ldr	r3, [r2, r3]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00d      	beq.n	80087d6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	23ac      	movs	r3, #172	; 0xac
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	58d3      	ldr	r3, [r2, r3]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	7c12      	ldrb	r2, [r2, #16]
 80087c8:	2108      	movs	r1, #8
 80087ca:	1879      	adds	r1, r7, r1
 80087cc:	0010      	movs	r0, r2
 80087ce:	4798      	blx	r3
 80087d0:	0003      	movs	r3, r0
 80087d2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d4:	e05d      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	0011      	movs	r1, r2
 80087dc:	0018      	movs	r0, r3
 80087de:	f000 fabd 	bl	8008d5c <USBD_CtlError>
            err++;
 80087e2:	210b      	movs	r1, #11
 80087e4:	187b      	adds	r3, r7, r1
 80087e6:	781a      	ldrb	r2, [r3, #0]
 80087e8:	187b      	adds	r3, r7, r1
 80087ea:	3201      	adds	r2, #1
 80087ec:	701a      	strb	r2, [r3, #0]
          break;
 80087ee:	e050      	b.n	8008892 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	23ac      	movs	r3, #172	; 0xac
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	58d3      	ldr	r3, [r2, r3]
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00d      	beq.n	800881a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	23ac      	movs	r3, #172	; 0xac
 8008802:	009b      	lsls	r3, r3, #2
 8008804:	58d3      	ldr	r3, [r2, r3]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	7c12      	ldrb	r2, [r2, #16]
 800880c:	2108      	movs	r1, #8
 800880e:	1879      	adds	r1, r7, r1
 8008810:	0010      	movs	r0, r2
 8008812:	4798      	blx	r3
 8008814:	0003      	movs	r3, r0
 8008816:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008818:	e03b      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800881a:	683a      	ldr	r2, [r7, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	0011      	movs	r1, r2
 8008820:	0018      	movs	r0, r3
 8008822:	f000 fa9b 	bl	8008d5c <USBD_CtlError>
            err++;
 8008826:	210b      	movs	r1, #11
 8008828:	187b      	adds	r3, r7, r1
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	187b      	adds	r3, r7, r1
 800882e:	3201      	adds	r2, #1
 8008830:	701a      	strb	r2, [r3, #0]
          break;
 8008832:	e02e      	b.n	8008892 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	23ac      	movs	r3, #172	; 0xac
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	58d3      	ldr	r3, [r2, r3]
 800883c:	699b      	ldr	r3, [r3, #24]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00d      	beq.n	800885e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	23ac      	movs	r3, #172	; 0xac
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	58d3      	ldr	r3, [r2, r3]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	687a      	ldr	r2, [r7, #4]
 800884e:	7c12      	ldrb	r2, [r2, #16]
 8008850:	2108      	movs	r1, #8
 8008852:	1879      	adds	r1, r7, r1
 8008854:	0010      	movs	r0, r2
 8008856:	4798      	blx	r3
 8008858:	0003      	movs	r3, r0
 800885a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800885c:	e019      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800885e:	683a      	ldr	r2, [r7, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	0011      	movs	r1, r2
 8008864:	0018      	movs	r0, r3
 8008866:	f000 fa79 	bl	8008d5c <USBD_CtlError>
            err++;
 800886a:	210b      	movs	r1, #11
 800886c:	187b      	adds	r3, r7, r1
 800886e:	781a      	ldrb	r2, [r3, #0]
 8008870:	187b      	adds	r3, r7, r1
 8008872:	3201      	adds	r2, #1
 8008874:	701a      	strb	r2, [r3, #0]
          break;
 8008876:	e00c      	b.n	8008892 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	0011      	movs	r1, r2
 800887e:	0018      	movs	r0, r3
 8008880:	f000 fa6c 	bl	8008d5c <USBD_CtlError>
          err++;
 8008884:	210b      	movs	r1, #11
 8008886:	187b      	adds	r3, r7, r1
 8008888:	781a      	ldrb	r2, [r3, #0]
 800888a:	187b      	adds	r3, r7, r1
 800888c:	3201      	adds	r2, #1
 800888e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8008890:	e04b      	b.n	800892a <USBD_GetDescriptor+0x2fa>
 8008892:	e04a      	b.n	800892a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	7c1b      	ldrb	r3, [r3, #16]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d10b      	bne.n	80088b4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800889c:	687a      	ldr	r2, [r7, #4]
 800889e:	23ad      	movs	r3, #173	; 0xad
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	58d3      	ldr	r3, [r2, r3]
 80088a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a6:	2208      	movs	r2, #8
 80088a8:	18ba      	adds	r2, r7, r2
 80088aa:	0010      	movs	r0, r2
 80088ac:	4798      	blx	r3
 80088ae:	0003      	movs	r3, r0
 80088b0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088b2:	e03a      	b.n	800892a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80088b4:	683a      	ldr	r2, [r7, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	0011      	movs	r1, r2
 80088ba:	0018      	movs	r0, r3
 80088bc:	f000 fa4e 	bl	8008d5c <USBD_CtlError>
        err++;
 80088c0:	210b      	movs	r1, #11
 80088c2:	187b      	adds	r3, r7, r1
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	187b      	adds	r3, r7, r1
 80088c8:	3201      	adds	r2, #1
 80088ca:	701a      	strb	r2, [r3, #0]
      break;
 80088cc:	e02d      	b.n	800892a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	7c1b      	ldrb	r3, [r3, #16]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10f      	bne.n	80088f6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80088d6:	687a      	ldr	r2, [r7, #4]
 80088d8:	23ad      	movs	r3, #173	; 0xad
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	58d3      	ldr	r3, [r2, r3]
 80088de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088e0:	2208      	movs	r2, #8
 80088e2:	18ba      	adds	r2, r7, r2
 80088e4:	0010      	movs	r0, r2
 80088e6:	4798      	blx	r3
 80088e8:	0003      	movs	r3, r0
 80088ea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	2207      	movs	r2, #7
 80088f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80088f4:	e019      	b.n	800892a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80088f6:	683a      	ldr	r2, [r7, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	0011      	movs	r1, r2
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 fa2d 	bl	8008d5c <USBD_CtlError>
        err++;
 8008902:	210b      	movs	r1, #11
 8008904:	187b      	adds	r3, r7, r1
 8008906:	781a      	ldrb	r2, [r3, #0]
 8008908:	187b      	adds	r3, r7, r1
 800890a:	3201      	adds	r2, #1
 800890c:	701a      	strb	r2, [r3, #0]
      break;
 800890e:	e00c      	b.n	800892a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008910:	683a      	ldr	r2, [r7, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	0011      	movs	r1, r2
 8008916:	0018      	movs	r0, r3
 8008918:	f000 fa20 	bl	8008d5c <USBD_CtlError>
      err++;
 800891c:	210b      	movs	r1, #11
 800891e:	187b      	adds	r3, r7, r1
 8008920:	781a      	ldrb	r2, [r3, #0]
 8008922:	187b      	adds	r3, r7, r1
 8008924:	3201      	adds	r2, #1
 8008926:	701a      	strb	r2, [r3, #0]
      break;
 8008928:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800892a:	230b      	movs	r3, #11
 800892c:	18fb      	adds	r3, r7, r3
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d127      	bne.n	8008984 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008934:	2108      	movs	r1, #8
 8008936:	187b      	adds	r3, r7, r1
 8008938:	881b      	ldrh	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d019      	beq.n	8008972 <USBD_GetDescriptor+0x342>
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	88db      	ldrh	r3, [r3, #6]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d015      	beq.n	8008972 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	88da      	ldrh	r2, [r3, #6]
 800894a:	187b      	adds	r3, r7, r1
 800894c:	881b      	ldrh	r3, [r3, #0]
 800894e:	1c18      	adds	r0, r3, #0
 8008950:	1c11      	adds	r1, r2, #0
 8008952:	b28a      	uxth	r2, r1
 8008954:	b283      	uxth	r3, r0
 8008956:	429a      	cmp	r2, r3
 8008958:	d900      	bls.n	800895c <USBD_GetDescriptor+0x32c>
 800895a:	1c01      	adds	r1, r0, #0
 800895c:	b28a      	uxth	r2, r1
 800895e:	2108      	movs	r1, #8
 8008960:	187b      	adds	r3, r7, r1
 8008962:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008964:	187b      	adds	r3, r7, r1
 8008966:	881a      	ldrh	r2, [r3, #0]
 8008968:	68f9      	ldr	r1, [r7, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	0018      	movs	r0, r3
 800896e:	f000 fa73 	bl	8008e58 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	88db      	ldrh	r3, [r3, #6]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d105      	bne.n	8008986 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	0018      	movs	r0, r3
 800897e:	f000 fad5 	bl	8008f2c <USBD_CtlSendStatus>
 8008982:	e000      	b.n	8008986 <USBD_GetDescriptor+0x356>
    return;
 8008984:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008986:	46bd      	mov	sp, r7
 8008988:	b004      	add	sp, #16
 800898a:	bd80      	pop	{r7, pc}
 800898c:	08009c44 	.word	0x08009c44
 8008990:	08009c64 	.word	0x08009c64

08008994 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008994:	b590      	push	{r4, r7, lr}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	889b      	ldrh	r3, [r3, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d13d      	bne.n	8008a22 <USBD_SetAddress+0x8e>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	88db      	ldrh	r3, [r3, #6]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d139      	bne.n	8008a22 <USBD_SetAddress+0x8e>
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	885b      	ldrh	r3, [r3, #2]
 80089b2:	2b7f      	cmp	r3, #127	; 0x7f
 80089b4:	d835      	bhi.n	8008a22 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	885b      	ldrh	r3, [r3, #2]
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	230f      	movs	r3, #15
 80089be:	18fb      	adds	r3, r7, r3
 80089c0:	217f      	movs	r1, #127	; 0x7f
 80089c2:	400a      	ands	r2, r1
 80089c4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	23a7      	movs	r3, #167	; 0xa7
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	5cd3      	ldrb	r3, [r2, r3]
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d106      	bne.n	80089e0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80089d2:	683a      	ldr	r2, [r7, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	0011      	movs	r1, r2
 80089d8:	0018      	movs	r0, r3
 80089da:	f000 f9bf 	bl	8008d5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089de:	e027      	b.n	8008a30 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	240f      	movs	r4, #15
 80089e4:	193a      	adds	r2, r7, r4
 80089e6:	4914      	ldr	r1, [pc, #80]	; (8008a38 <USBD_SetAddress+0xa4>)
 80089e8:	7812      	ldrb	r2, [r2, #0]
 80089ea:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80089ec:	193b      	adds	r3, r7, r4
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	0011      	movs	r1, r2
 80089f4:	0018      	movs	r0, r3
 80089f6:	f000 fe93 	bl	8009720 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	0018      	movs	r0, r3
 80089fe:	f000 fa95 	bl	8008f2c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a02:	193b      	adds	r3, r7, r4
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d005      	beq.n	8008a16 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	23a7      	movs	r3, #167	; 0xa7
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	2102      	movs	r1, #2
 8008a12:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a14:	e00c      	b.n	8008a30 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	23a7      	movs	r3, #167	; 0xa7
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	2101      	movs	r1, #1
 8008a1e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a20:	e006      	b.n	8008a30 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	0011      	movs	r1, r2
 8008a28:	0018      	movs	r0, r3
 8008a2a:	f000 f997 	bl	8008d5c <USBD_CtlError>
  }
}
 8008a2e:	46c0      	nop			; (mov r8, r8)
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b005      	add	sp, #20
 8008a36:	bd90      	pop	{r4, r7, pc}
 8008a38:	0000029e 	.word	0x0000029e

08008a3c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	885b      	ldrh	r3, [r3, #2]
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <USBD_SetConfig+0x144>)
 8008a4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a50:	4b4b      	ldr	r3, [pc, #300]	; (8008b80 <USBD_SetConfig+0x144>)
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	2b01      	cmp	r3, #1
 8008a56:	d906      	bls.n	8008a66 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	0011      	movs	r1, r2
 8008a5e:	0018      	movs	r0, r3
 8008a60:	f000 f97c 	bl	8008d5c <USBD_CtlError>
 8008a64:	e088      	b.n	8008b78 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	23a7      	movs	r3, #167	; 0xa7
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	5cd3      	ldrb	r3, [r2, r3]
 8008a6e:	2b02      	cmp	r3, #2
 8008a70:	d002      	beq.n	8008a78 <USBD_SetConfig+0x3c>
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d029      	beq.n	8008aca <USBD_SetConfig+0x8e>
 8008a76:	e071      	b.n	8008b5c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008a78:	4b41      	ldr	r3, [pc, #260]	; (8008b80 <USBD_SetConfig+0x144>)
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d01f      	beq.n	8008ac0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008a80:	4b3f      	ldr	r3, [pc, #252]	; (8008b80 <USBD_SetConfig+0x144>)
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	001a      	movs	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	23a7      	movs	r3, #167	; 0xa7
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	2103      	movs	r1, #3
 8008a92:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008a94:	4b3a      	ldr	r3, [pc, #232]	; (8008b80 <USBD_SetConfig+0x144>)
 8008a96:	781a      	ldrb	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	0011      	movs	r1, r2
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7ff f8c5 	bl	8007c2c <USBD_SetClassConfig>
 8008aa2:	0003      	movs	r3, r0
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d106      	bne.n	8008ab6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008aa8:	683a      	ldr	r2, [r7, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	0011      	movs	r1, r2
 8008aae:	0018      	movs	r0, r3
 8008ab0:	f000 f954 	bl	8008d5c <USBD_CtlError>
            return;
 8008ab4:	e060      	b.n	8008b78 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	0018      	movs	r0, r3
 8008aba:	f000 fa37 	bl	8008f2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008abe:	e05b      	b.n	8008b78 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	f000 fa32 	bl	8008f2c <USBD_CtlSendStatus>
        break;
 8008ac8:	e056      	b.n	8008b78 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008aca:	4b2d      	ldr	r3, [pc, #180]	; (8008b80 <USBD_SetConfig+0x144>)
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d115      	bne.n	8008afe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	23a7      	movs	r3, #167	; 0xa7
 8008ad6:	009b      	lsls	r3, r3, #2
 8008ad8:	2102      	movs	r1, #2
 8008ada:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008adc:	4b28      	ldr	r3, [pc, #160]	; (8008b80 <USBD_SetConfig+0x144>)
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	001a      	movs	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008ae6:	4b26      	ldr	r3, [pc, #152]	; (8008b80 <USBD_SetConfig+0x144>)
 8008ae8:	781a      	ldrb	r2, [r3, #0]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	0011      	movs	r1, r2
 8008aee:	0018      	movs	r0, r3
 8008af0:	f7ff f8c3 	bl	8007c7a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	0018      	movs	r0, r3
 8008af8:	f000 fa18 	bl	8008f2c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008afc:	e03c      	b.n	8008b78 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008afe:	4b20      	ldr	r3, [pc, #128]	; (8008b80 <USBD_SetConfig+0x144>)
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	001a      	movs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d022      	beq.n	8008b52 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	0011      	movs	r1, r2
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7ff f8af 	bl	8007c7a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008b1c:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <USBD_SetConfig+0x144>)
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	001a      	movs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b26:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <USBD_SetConfig+0x144>)
 8008b28:	781a      	ldrb	r2, [r3, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	0011      	movs	r1, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7ff f87c 	bl	8007c2c <USBD_SetClassConfig>
 8008b34:	0003      	movs	r3, r0
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d106      	bne.n	8008b48 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	0011      	movs	r1, r2
 8008b40:	0018      	movs	r0, r3
 8008b42:	f000 f90b 	bl	8008d5c <USBD_CtlError>
            return;
 8008b46:	e017      	b.n	8008b78 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f000 f9ee 	bl	8008f2c <USBD_CtlSendStatus>
        break;
 8008b50:	e012      	b.n	8008b78 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	0018      	movs	r0, r3
 8008b56:	f000 f9e9 	bl	8008f2c <USBD_CtlSendStatus>
        break;
 8008b5a:	e00d      	b.n	8008b78 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008b5c:	683a      	ldr	r2, [r7, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	0011      	movs	r1, r2
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 f8fa 	bl	8008d5c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <USBD_SetConfig+0x144>)
 8008b6a:	781a      	ldrb	r2, [r3, #0]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	0011      	movs	r1, r2
 8008b70:	0018      	movs	r0, r3
 8008b72:	f7ff f882 	bl	8007c7a <USBD_ClrClassConfig>
        break;
 8008b76:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	b002      	add	sp, #8
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	20000214 	.word	0x20000214

08008b84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	88db      	ldrh	r3, [r3, #6]
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d006      	beq.n	8008ba4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	0011      	movs	r1, r2
 8008b9c:	0018      	movs	r0, r3
 8008b9e:	f000 f8dd 	bl	8008d5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ba2:	e026      	b.n	8008bf2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	23a7      	movs	r3, #167	; 0xa7
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	5cd3      	ldrb	r3, [r2, r3]
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	dc02      	bgt.n	8008bb6 <USBD_GetConfig+0x32>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dc03      	bgt.n	8008bbc <USBD_GetConfig+0x38>
 8008bb4:	e016      	b.n	8008be4 <USBD_GetConfig+0x60>
 8008bb6:	2b03      	cmp	r3, #3
 8008bb8:	d00c      	beq.n	8008bd4 <USBD_GetConfig+0x50>
 8008bba:	e013      	b.n	8008be4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	3308      	adds	r3, #8
 8008bc6:	0019      	movs	r1, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f000 f943 	bl	8008e58 <USBD_CtlSendData>
        break;
 8008bd2:	e00e      	b.n	8008bf2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	1d19      	adds	r1, r3, #4
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	0018      	movs	r0, r3
 8008bde:	f000 f93b 	bl	8008e58 <USBD_CtlSendData>
        break;
 8008be2:	e006      	b.n	8008bf2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008be4:	683a      	ldr	r2, [r7, #0]
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	0011      	movs	r1, r2
 8008bea:	0018      	movs	r0, r3
 8008bec:	f000 f8b6 	bl	8008d5c <USBD_CtlError>
        break;
 8008bf0:	46c0      	nop			; (mov r8, r8)
}
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	b002      	add	sp, #8
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b082      	sub	sp, #8
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	23a7      	movs	r3, #167	; 0xa7
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	5cd3      	ldrb	r3, [r2, r3]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d822      	bhi.n	8008c58 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	88db      	ldrh	r3, [r3, #6]
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d006      	beq.n	8008c28 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	0011      	movs	r1, r2
 8008c20:	0018      	movs	r0, r3
 8008c22:	f000 f89b 	bl	8008d5c <USBD_CtlError>
        break;
 8008c26:	e01e      	b.n	8008c66 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	23a9      	movs	r3, #169	; 0xa9
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	58d3      	ldr	r3, [r2, r3]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d005      	beq.n	8008c46 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	2202      	movs	r2, #2
 8008c40:	431a      	orrs	r2, r3
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	330c      	adds	r3, #12
 8008c4a:	0019      	movs	r1, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	0018      	movs	r0, r3
 8008c52:	f000 f901 	bl	8008e58 <USBD_CtlSendData>
      break;
 8008c56:	e006      	b.n	8008c66 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008c58:	683a      	ldr	r2, [r7, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	0011      	movs	r1, r2
 8008c5e:	0018      	movs	r0, r3
 8008c60:	f000 f87c 	bl	8008d5c <USBD_CtlError>
      break;
 8008c64:	46c0      	nop			; (mov r8, r8)
  }
}
 8008c66:	46c0      	nop			; (mov r8, r8)
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	b002      	add	sp, #8
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b082      	sub	sp, #8
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	885b      	ldrh	r3, [r3, #2]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d108      	bne.n	8008c92 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	23a9      	movs	r3, #169	; 0xa9
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	2101      	movs	r1, #1
 8008c88:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f000 f94d 	bl	8008f2c <USBD_CtlSendStatus>
  }
}
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	46bd      	mov	sp, r7
 8008c96:	b002      	add	sp, #8
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	23a7      	movs	r3, #167	; 0xa7
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	5cd3      	ldrb	r3, [r2, r3]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d80d      	bhi.n	8008cce <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d110      	bne.n	8008cdc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	23a9      	movs	r3, #169	; 0xa9
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	0018      	movs	r0, r3
 8008cc8:	f000 f930 	bl	8008f2c <USBD_CtlSendStatus>
      }
      break;
 8008ccc:	e006      	b.n	8008cdc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	0011      	movs	r1, r2
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f000 f841 	bl	8008d5c <USBD_CtlError>
      break;
 8008cda:	e000      	b.n	8008cde <USBD_ClrFeature+0x44>
      break;
 8008cdc:	46c0      	nop			; (mov r8, r8)
  }
}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b002      	add	sp, #8
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	785a      	ldrb	r2, [r3, #1]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	3302      	adds	r3, #2
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	3303      	adds	r3, #3
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	18d3      	adds	r3, r2, r3
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	3305      	adds	r3, #5
 8008d28:	781b      	ldrb	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	021b      	lsls	r3, r3, #8
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	18d3      	adds	r3, r2, r3
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	3306      	adds	r3, #6
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	b29a      	uxth	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	3307      	adds	r3, #7
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	b29b      	uxth	r3, r3
 8008d48:	021b      	lsls	r3, r3, #8
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	18d3      	adds	r3, r2, r3
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	80da      	strh	r2, [r3, #6]

}
 8008d54:	46c0      	nop			; (mov r8, r8)
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2180      	movs	r1, #128	; 0x80
 8008d6a:	0018      	movs	r0, r3
 8008d6c:	f000 fc51 	bl	8009612 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2100      	movs	r1, #0
 8008d74:	0018      	movs	r0, r3
 8008d76:	f000 fc4c 	bl	8009612 <USBD_LL_StallEP>
}
 8008d7a:	46c0      	nop			; (mov r8, r8)
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	b002      	add	sp, #8
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d82:	b590      	push	{r4, r7, lr}
 8008d84:	b087      	sub	sp, #28
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	60f8      	str	r0, [r7, #12]
 8008d8a:	60b9      	str	r1, [r7, #8]
 8008d8c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d8e:	2417      	movs	r4, #23
 8008d90:	193b      	adds	r3, r7, r4
 8008d92:	2200      	movs	r2, #0
 8008d94:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d03c      	beq.n	8008e16 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f000 f83d 	bl	8008e1e <USBD_GetLen>
 8008da4:	0003      	movs	r3, r0
 8008da6:	3301      	adds	r3, #1
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	18db      	adds	r3, r3, r3
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008db2:	193b      	adds	r3, r7, r4
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	193a      	adds	r2, r7, r4
 8008db8:	1c59      	adds	r1, r3, #1
 8008dba:	7011      	strb	r1, [r2, #0]
 8008dbc:	001a      	movs	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	189b      	adds	r3, r3, r2
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	7812      	ldrb	r2, [r2, #0]
 8008dc6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008dc8:	193b      	adds	r3, r7, r4
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	193a      	adds	r2, r7, r4
 8008dce:	1c59      	adds	r1, r3, #1
 8008dd0:	7011      	strb	r1, [r2, #0]
 8008dd2:	001a      	movs	r2, r3
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	189b      	adds	r3, r3, r2
 8008dd8:	2203      	movs	r2, #3
 8008dda:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008ddc:	e017      	b.n	8008e0e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	1c5a      	adds	r2, r3, #1
 8008de2:	60fa      	str	r2, [r7, #12]
 8008de4:	2417      	movs	r4, #23
 8008de6:	193a      	adds	r2, r7, r4
 8008de8:	7812      	ldrb	r2, [r2, #0]
 8008dea:	1939      	adds	r1, r7, r4
 8008dec:	1c50      	adds	r0, r2, #1
 8008dee:	7008      	strb	r0, [r1, #0]
 8008df0:	0011      	movs	r1, r2
 8008df2:	68ba      	ldr	r2, [r7, #8]
 8008df4:	1852      	adds	r2, r2, r1
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008dfa:	193b      	adds	r3, r7, r4
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	193a      	adds	r2, r7, r4
 8008e00:	1c59      	adds	r1, r3, #1
 8008e02:	7011      	strb	r1, [r2, #0]
 8008e04:	001a      	movs	r2, r3
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	189b      	adds	r3, r3, r2
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e3      	bne.n	8008dde <USBD_GetString+0x5c>
    }
  }
}
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	b007      	add	sp, #28
 8008e1c:	bd90      	pop	{r4, r7, pc}

08008e1e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008e26:	230f      	movs	r3, #15
 8008e28:	18fb      	adds	r3, r7, r3
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008e2e:	e008      	b.n	8008e42 <USBD_GetLen+0x24>
  {
    len++;
 8008e30:	210f      	movs	r1, #15
 8008e32:	187b      	adds	r3, r7, r1
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	187b      	adds	r3, r7, r1
 8008e38:	3201      	adds	r2, #1
 8008e3a:	701a      	strb	r2, [r3, #0]
    buf++;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1f2      	bne.n	8008e30 <USBD_GetLen+0x12>
  }

  return len;
 8008e4a:	230f      	movs	r3, #15
 8008e4c:	18fb      	adds	r3, r7, r3
 8008e4e:	781b      	ldrb	r3, [r3, #0]
}
 8008e50:	0018      	movs	r0, r3
 8008e52:	46bd      	mov	sp, r7
 8008e54:	b004      	add	sp, #16
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	1dbb      	adds	r3, r7, #6
 8008e64:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	23a5      	movs	r3, #165	; 0xa5
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008e70:	1dbb      	adds	r3, r7, #6
 8008e72:	881a      	ldrh	r2, [r3, #0]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e78:	1dbb      	adds	r3, r7, #6
 8008e7a:	881a      	ldrh	r2, [r3, #0]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008e80:	1dbb      	adds	r3, r7, #6
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	f000 fc74 	bl	8009776 <USBD_LL_Transmit>

  return USBD_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	0018      	movs	r0, r3
 8008e92:	46bd      	mov	sp, r7
 8008e94:	b004      	add	sp, #16
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	60f8      	str	r0, [r7, #12]
 8008ea0:	60b9      	str	r1, [r7, #8]
 8008ea2:	1dbb      	adds	r3, r7, #6
 8008ea4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008ea6:	1dbb      	adds	r3, r7, #6
 8008ea8:	881b      	ldrh	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	2100      	movs	r1, #0
 8008eb0:	f000 fc61 	bl	8009776 <USBD_LL_Transmit>

  return USBD_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	0018      	movs	r0, r3
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	b004      	add	sp, #16
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	60b9      	str	r1, [r7, #8]
 8008ec8:	1dbb      	adds	r3, r7, #6
 8008eca:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ecc:	68fa      	ldr	r2, [r7, #12]
 8008ece:	23a5      	movs	r3, #165	; 0xa5
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	2103      	movs	r1, #3
 8008ed4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008ed6:	1dbb      	adds	r3, r7, #6
 8008ed8:	8819      	ldrh	r1, [r3, #0]
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	23ae      	movs	r3, #174	; 0xae
 8008ede:	005b      	lsls	r3, r3, #1
 8008ee0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008ee2:	1dbb      	adds	r3, r7, #6
 8008ee4:	8819      	ldrh	r1, [r3, #0]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	23b0      	movs	r3, #176	; 0xb0
 8008eea:	005b      	lsls	r3, r3, #1
 8008eec:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008eee:	1dbb      	adds	r3, r7, #6
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	68f8      	ldr	r0, [r7, #12]
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	f000 fc74 	bl	80097e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	0018      	movs	r0, r3
 8008f00:	46bd      	mov	sp, r7
 8008f02:	b004      	add	sp, #16
 8008f04:	bd80      	pop	{r7, pc}

08008f06 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	1dbb      	adds	r3, r7, #6
 8008f12:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f14:	1dbb      	adds	r3, r7, #6
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	f000 fc61 	bl	80097e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	0018      	movs	r0, r3
 8008f26:	46bd      	mov	sp, r7
 8008f28:	b004      	add	sp, #16
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	23a5      	movs	r3, #165	; 0xa5
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	2104      	movs	r1, #4
 8008f3c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	2300      	movs	r3, #0
 8008f42:	2200      	movs	r2, #0
 8008f44:	2100      	movs	r1, #0
 8008f46:	f000 fc16 	bl	8009776 <USBD_LL_Transmit>

  return USBD_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	b002      	add	sp, #8
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f5c:	687a      	ldr	r2, [r7, #4]
 8008f5e:	23a5      	movs	r3, #165	; 0xa5
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	2105      	movs	r1, #5
 8008f64:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	2300      	movs	r3, #0
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	f000 fc39 	bl	80097e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	0018      	movs	r0, r3
 8008f76:	46bd      	mov	sp, r7
 8008f78:	b002      	add	sp, #8
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008f80:	4914      	ldr	r1, [pc, #80]	; (8008fd4 <MX_USB_DEVICE_Init+0x58>)
 8008f82:	4b15      	ldr	r3, [pc, #84]	; (8008fd8 <MX_USB_DEVICE_Init+0x5c>)
 8008f84:	2200      	movs	r2, #0
 8008f86:	0018      	movs	r0, r3
 8008f88:	f7fe fde9 	bl	8007b5e <USBD_Init>
 8008f8c:	1e03      	subs	r3, r0, #0
 8008f8e:	d001      	beq.n	8008f94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008f90:	f7f7 ff5c 	bl	8000e4c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008f94:	4a11      	ldr	r2, [pc, #68]	; (8008fdc <MX_USB_DEVICE_Init+0x60>)
 8008f96:	4b10      	ldr	r3, [pc, #64]	; (8008fd8 <MX_USB_DEVICE_Init+0x5c>)
 8008f98:	0011      	movs	r1, r2
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f7fe fe10 	bl	8007bc0 <USBD_RegisterClass>
 8008fa0:	1e03      	subs	r3, r0, #0
 8008fa2:	d001      	beq.n	8008fa8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8008fa4:	f7f7 ff52 	bl	8000e4c <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008fa8:	4a0d      	ldr	r2, [pc, #52]	; (8008fe0 <MX_USB_DEVICE_Init+0x64>)
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <MX_USB_DEVICE_Init+0x5c>)
 8008fac:	0011      	movs	r1, r2
 8008fae:	0018      	movs	r0, r3
 8008fb0:	f7fe fdba 	bl	8007b28 <USBD_CUSTOM_HID_RegisterInterface>
 8008fb4:	1e03      	subs	r3, r0, #0
 8008fb6:	d001      	beq.n	8008fbc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8008fb8:	f7f7 ff48 	bl	8000e4c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <MX_USB_DEVICE_Init+0x5c>)
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f7fe fe1e 	bl	8007c00 <USBD_Start>
 8008fc4:	1e03      	subs	r3, r0, #0
 8008fc6:	d001      	beq.n	8008fcc <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8008fc8:	f7f7 ff40 	bl	8000e4c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008fcc:	46c0      	nop			; (mov r8, r8)
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	46c0      	nop			; (mov r8, r8)
 8008fd4:	20000140 	.word	0x20000140
 8008fd8:	20000324 	.word	0x20000324
 8008fdc:	2000000c 	.word	0x2000000c
 8008fe0:	20000130 	.word	0x20000130

08008fe4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008fe8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008fea:	0018      	movs	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008ff4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t *state)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 6 */
	memcpy(buffer, state, 0x55);
 8009004:	4a09      	ldr	r2, [pc, #36]	; (800902c <CUSTOM_HID_OutEvent_FS+0x30>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	0010      	movs	r0, r2
 800900a:	0019      	movs	r1, r3
 800900c:	2355      	movs	r3, #85	; 0x55
 800900e:	001a      	movs	r2, r3
 8009010:	f000 fc9c 	bl	800994c <memcpy>
	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer, sizeof(state));
 8009014:	4905      	ldr	r1, [pc, #20]	; (800902c <CUSTOM_HID_OutEvent_FS+0x30>)
 8009016:	4b06      	ldr	r3, [pc, #24]	; (8009030 <CUSTOM_HID_OutEvent_FS+0x34>)
 8009018:	2204      	movs	r2, #4
 800901a:	0018      	movs	r0, r3
 800901c:	f7fe fcd2 	bl	80079c4 <USBD_CUSTOM_HID_SendReport>
  return (USBD_OK);
 8009020:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009022:	0018      	movs	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	b002      	add	sp, #8
 8009028:	bd80      	pop	{r7, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	200005e8 	.word	0x200005e8
 8009030:	20000324 	.word	0x20000324

08009034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b082      	sub	sp, #8
 8009038:	af00      	add	r7, sp, #0
 800903a:	0002      	movs	r2, r0
 800903c:	6039      	str	r1, [r7, #0]
 800903e:	1dfb      	adds	r3, r7, #7
 8009040:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	2212      	movs	r2, #18
 8009046:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009048:	4b02      	ldr	r3, [pc, #8]	; (8009054 <USBD_FS_DeviceDescriptor+0x20>)
}
 800904a:	0018      	movs	r0, r3
 800904c:	46bd      	mov	sp, r7
 800904e:	b002      	add	sp, #8
 8009050:	bd80      	pop	{r7, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	2000015c 	.word	0x2000015c

08009058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	0002      	movs	r2, r0
 8009060:	6039      	str	r1, [r7, #0]
 8009062:	1dfb      	adds	r3, r7, #7
 8009064:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2204      	movs	r2, #4
 800906a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800906c:	4b02      	ldr	r3, [pc, #8]	; (8009078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800906e:	0018      	movs	r0, r3
 8009070:	46bd      	mov	sp, r7
 8009072:	b002      	add	sp, #8
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			; (mov r8, r8)
 8009078:	20000170 	.word	0x20000170

0800907c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	0002      	movs	r2, r0
 8009084:	6039      	str	r1, [r7, #0]
 8009086:	1dfb      	adds	r3, r7, #7
 8009088:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800908a:	1dfb      	adds	r3, r7, #7
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d106      	bne.n	80090a0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	4908      	ldr	r1, [pc, #32]	; (80090b8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <USBD_FS_ProductStrDescriptor+0x40>)
 8009098:	0018      	movs	r0, r3
 800909a:	f7ff fe72 	bl	8008d82 <USBD_GetString>
 800909e:	e005      	b.n	80090ac <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	4905      	ldr	r1, [pc, #20]	; (80090b8 <USBD_FS_ProductStrDescriptor+0x3c>)
 80090a4:	4b05      	ldr	r3, [pc, #20]	; (80090bc <USBD_FS_ProductStrDescriptor+0x40>)
 80090a6:	0018      	movs	r0, r3
 80090a8:	f7ff fe6b 	bl	8008d82 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090ac:	4b02      	ldr	r3, [pc, #8]	; (80090b8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 80090ae:	0018      	movs	r0, r3
 80090b0:	46bd      	mov	sp, r7
 80090b2:	b002      	add	sp, #8
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	20000640 	.word	0x20000640
 80090bc:	08009b20 	.word	0x08009b20

080090c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b082      	sub	sp, #8
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	0002      	movs	r2, r0
 80090c8:	6039      	str	r1, [r7, #0]
 80090ca:	1dfb      	adds	r3, r7, #7
 80090cc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4904      	ldr	r1, [pc, #16]	; (80090e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80090d2:	4b05      	ldr	r3, [pc, #20]	; (80090e8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80090d4:	0018      	movs	r0, r3
 80090d6:	f7ff fe54 	bl	8008d82 <USBD_GetString>
  return USBD_StrDesc;
 80090da:	4b02      	ldr	r3, [pc, #8]	; (80090e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80090dc:	0018      	movs	r0, r3
 80090de:	46bd      	mov	sp, r7
 80090e0:	b002      	add	sp, #8
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	20000640 	.word	0x20000640
 80090e8:	08009b40 	.word	0x08009b40

080090ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	0002      	movs	r2, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	1dfb      	adds	r3, r7, #7
 80090f8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	221a      	movs	r2, #26
 80090fe:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009100:	f000 f84c 	bl	800919c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009104:	4b02      	ldr	r3, [pc, #8]	; (8009110 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8009106:	0018      	movs	r0, r3
 8009108:	46bd      	mov	sp, r7
 800910a:	b002      	add	sp, #8
 800910c:	bd80      	pop	{r7, pc}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	20000174 	.word	0x20000174

08009114 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	0002      	movs	r2, r0
 800911c:	6039      	str	r1, [r7, #0]
 800911e:	1dfb      	adds	r3, r7, #7
 8009120:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8009122:	1dfb      	adds	r3, r7, #7
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	4908      	ldr	r1, [pc, #32]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800912e:	4b09      	ldr	r3, [pc, #36]	; (8009154 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009130:	0018      	movs	r0, r3
 8009132:	f7ff fe26 	bl	8008d82 <USBD_GetString>
 8009136:	e005      	b.n	8009144 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009138:	683a      	ldr	r2, [r7, #0]
 800913a:	4905      	ldr	r1, [pc, #20]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800913c:	4b05      	ldr	r3, [pc, #20]	; (8009154 <USBD_FS_ConfigStrDescriptor+0x40>)
 800913e:	0018      	movs	r0, r3
 8009140:	f7ff fe1f 	bl	8008d82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009144:	4b02      	ldr	r3, [pc, #8]	; (8009150 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009146:	0018      	movs	r0, r3
 8009148:	46bd      	mov	sp, r7
 800914a:	b002      	add	sp, #8
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	20000640 	.word	0x20000640
 8009154:	08009b54 	.word	0x08009b54

08009158 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	0002      	movs	r2, r0
 8009160:	6039      	str	r1, [r7, #0]
 8009162:	1dfb      	adds	r3, r7, #7
 8009164:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009166:	1dfb      	adds	r3, r7, #7
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d106      	bne.n	800917c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800916e:	683a      	ldr	r2, [r7, #0]
 8009170:	4908      	ldr	r1, [pc, #32]	; (8009194 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009172:	4b09      	ldr	r3, [pc, #36]	; (8009198 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009174:	0018      	movs	r0, r3
 8009176:	f7ff fe04 	bl	8008d82 <USBD_GetString>
 800917a:	e005      	b.n	8009188 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	4905      	ldr	r1, [pc, #20]	; (8009194 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009180:	4b05      	ldr	r3, [pc, #20]	; (8009198 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009182:	0018      	movs	r0, r3
 8009184:	f7ff fdfd 	bl	8008d82 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009188:	4b02      	ldr	r3, [pc, #8]	; (8009194 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800918a:	0018      	movs	r0, r3
 800918c:	46bd      	mov	sp, r7
 800918e:	b002      	add	sp, #8
 8009190:	bd80      	pop	{r7, pc}
 8009192:	46c0      	nop			; (mov r8, r8)
 8009194:	20000640 	.word	0x20000640
 8009198:	08009b68 	.word	0x08009b68

0800919c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091a2:	4b10      	ldr	r3, [pc, #64]	; (80091e4 <Get_SerialNum+0x48>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091a8:	4b0f      	ldr	r3, [pc, #60]	; (80091e8 <Get_SerialNum+0x4c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091ae:	4b0f      	ldr	r3, [pc, #60]	; (80091ec <Get_SerialNum+0x50>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091b4:	68fa      	ldr	r2, [r7, #12]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	18d3      	adds	r3, r2, r3
 80091ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091c2:	490b      	ldr	r1, [pc, #44]	; (80091f0 <Get_SerialNum+0x54>)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2208      	movs	r2, #8
 80091c8:	0018      	movs	r0, r3
 80091ca:	f000 f815 	bl	80091f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ce:	4909      	ldr	r1, [pc, #36]	; (80091f4 <Get_SerialNum+0x58>)
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2204      	movs	r2, #4
 80091d4:	0018      	movs	r0, r3
 80091d6:	f000 f80f 	bl	80091f8 <IntToUnicode>
  }
}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	46bd      	mov	sp, r7
 80091de:	b004      	add	sp, #16
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	1ff80050 	.word	0x1ff80050
 80091e8:	1ff80054 	.word	0x1ff80054
 80091ec:	1ff80058 	.word	0x1ff80058
 80091f0:	20000176 	.word	0x20000176
 80091f4:	20000186 	.word	0x20000186

080091f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	1dfb      	adds	r3, r7, #7
 8009204:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8009206:	2117      	movs	r1, #23
 8009208:	187b      	adds	r3, r7, r1
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800920e:	187b      	adds	r3, r7, r1
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
 8009214:	e02f      	b.n	8009276 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	0f1b      	lsrs	r3, r3, #28
 800921a:	2b09      	cmp	r3, #9
 800921c:	d80d      	bhi.n	800923a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	0f1b      	lsrs	r3, r3, #28
 8009222:	b2da      	uxtb	r2, r3
 8009224:	2317      	movs	r3, #23
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	0019      	movs	r1, r3
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	185b      	adds	r3, r3, r1
 8009232:	3230      	adds	r2, #48	; 0x30
 8009234:	b2d2      	uxtb	r2, r2
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	e00c      	b.n	8009254 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	0f1b      	lsrs	r3, r3, #28
 800923e:	b2da      	uxtb	r2, r3
 8009240:	2317      	movs	r3, #23
 8009242:	18fb      	adds	r3, r7, r3
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	0019      	movs	r1, r3
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	185b      	adds	r3, r3, r1
 800924e:	3237      	adds	r2, #55	; 0x37
 8009250:	b2d2      	uxtb	r2, r2
 8009252:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	011b      	lsls	r3, r3, #4
 8009258:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800925a:	2117      	movs	r1, #23
 800925c:	187b      	adds	r3, r7, r1
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	005b      	lsls	r3, r3, #1
 8009262:	3301      	adds	r3, #1
 8009264:	68ba      	ldr	r2, [r7, #8]
 8009266:	18d3      	adds	r3, r2, r3
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800926c:	187b      	adds	r3, r7, r1
 800926e:	781a      	ldrb	r2, [r3, #0]
 8009270:	187b      	adds	r3, r7, r1
 8009272:	3201      	adds	r2, #1
 8009274:	701a      	strb	r2, [r3, #0]
 8009276:	2317      	movs	r3, #23
 8009278:	18fa      	adds	r2, r7, r3
 800927a:	1dfb      	adds	r3, r7, #7
 800927c:	7812      	ldrb	r2, [r2, #0]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	429a      	cmp	r2, r3
 8009282:	d3c8      	bcc.n	8009216 <IntToUnicode+0x1e>
  }
}
 8009284:	46c0      	nop			; (mov r8, r8)
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	46bd      	mov	sp, r7
 800928a:	b006      	add	sp, #24
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a0a      	ldr	r2, [pc, #40]	; (80092c8 <HAL_PCD_MspInit+0x38>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d10e      	bne.n	80092c0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80092a2:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <HAL_PCD_MspInit+0x3c>)
 80092a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092a6:	4b09      	ldr	r3, [pc, #36]	; (80092cc <HAL_PCD_MspInit+0x3c>)
 80092a8:	2180      	movs	r1, #128	; 0x80
 80092aa:	0409      	lsls	r1, r1, #16
 80092ac:	430a      	orrs	r2, r1
 80092ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80092b0:	2200      	movs	r2, #0
 80092b2:	2100      	movs	r1, #0
 80092b4:	201f      	movs	r0, #31
 80092b6:	f7f8 fd57 	bl	8001d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 80092ba:	201f      	movs	r0, #31
 80092bc:	f7f8 fd69 	bl	8001d92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80092c0:	46c0      	nop			; (mov r8, r8)
 80092c2:	46bd      	mov	sp, r7
 80092c4:	b002      	add	sp, #8
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	40005c00 	.word	0x40005c00
 80092cc:	40021000 	.word	0x40021000

080092d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	23bc      	movs	r3, #188	; 0xbc
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	58d2      	ldr	r2, [r2, r3]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	21ac      	movs	r1, #172	; 0xac
 80092e4:	0089      	lsls	r1, r1, #2
 80092e6:	468c      	mov	ip, r1
 80092e8:	4463      	add	r3, ip
 80092ea:	0019      	movs	r1, r3
 80092ec:	0010      	movs	r0, r2
 80092ee:	f7fe fcdb 	bl	8007ca8 <USBD_LL_SetupStage>
}
 80092f2:	46c0      	nop			; (mov r8, r8)
 80092f4:	46bd      	mov	sp, r7
 80092f6:	b002      	add	sp, #8
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092fa:	b590      	push	{r4, r7, lr}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	000a      	movs	r2, r1
 8009304:	1cfb      	adds	r3, r7, #3
 8009306:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	23bc      	movs	r3, #188	; 0xbc
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	58d4      	ldr	r4, [r2, r3]
 8009310:	1cfb      	adds	r3, r7, #3
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	23be      	movs	r3, #190	; 0xbe
 8009318:	0059      	lsls	r1, r3, #1
 800931a:	0013      	movs	r3, r2
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	189b      	adds	r3, r3, r2
 8009320:	00db      	lsls	r3, r3, #3
 8009322:	18c3      	adds	r3, r0, r3
 8009324:	185b      	adds	r3, r3, r1
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	1cfb      	adds	r3, r7, #3
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	0019      	movs	r1, r3
 800932e:	0020      	movs	r0, r4
 8009330:	f7fe fd18 	bl	8007d64 <USBD_LL_DataOutStage>
}
 8009334:	46c0      	nop			; (mov r8, r8)
 8009336:	46bd      	mov	sp, r7
 8009338:	b003      	add	sp, #12
 800933a:	bd90      	pop	{r4, r7, pc}

0800933c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	000a      	movs	r2, r1
 8009346:	1cfb      	adds	r3, r7, #3
 8009348:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	23bc      	movs	r3, #188	; 0xbc
 800934e:	009b      	lsls	r3, r3, #2
 8009350:	58d0      	ldr	r0, [r2, r3]
 8009352:	1cfb      	adds	r3, r7, #3
 8009354:	781a      	ldrb	r2, [r3, #0]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	0013      	movs	r3, r2
 800935a:	009b      	lsls	r3, r3, #2
 800935c:	189b      	adds	r3, r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	18cb      	adds	r3, r1, r3
 8009362:	333c      	adds	r3, #60	; 0x3c
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	1cfb      	adds	r3, r7, #3
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	0019      	movs	r1, r3
 800936c:	f7fe fd7c 	bl	8007e68 <USBD_LL_DataInStage>
}
 8009370:	46c0      	nop			; (mov r8, r8)
 8009372:	46bd      	mov	sp, r7
 8009374:	b002      	add	sp, #8
 8009376:	bd80      	pop	{r7, pc}

08009378 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	23bc      	movs	r3, #188	; 0xbc
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	58d3      	ldr	r3, [r2, r3]
 8009388:	0018      	movs	r0, r3
 800938a:	f7fe feb3 	bl	80080f4 <USBD_LL_SOF>
}
 800938e:	46c0      	nop			; (mov r8, r8)
 8009390:	46bd      	mov	sp, r7
 8009392:	b002      	add	sp, #8
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800939e:	230f      	movs	r3, #15
 80093a0:	18fb      	adds	r3, r7, r3
 80093a2:	2201      	movs	r2, #1
 80093a4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d001      	beq.n	80093b2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80093ae:	f7f7 fd4d 	bl	8000e4c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	23bc      	movs	r3, #188	; 0xbc
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	58d2      	ldr	r2, [r2, r3]
 80093ba:	230f      	movs	r3, #15
 80093bc:	18fb      	adds	r3, r7, r3
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	0019      	movs	r1, r3
 80093c2:	0010      	movs	r0, r2
 80093c4:	f7fe fe55 	bl	8008072 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	23bc      	movs	r3, #188	; 0xbc
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	58d3      	ldr	r3, [r2, r3]
 80093d0:	0018      	movs	r0, r3
 80093d2:	f7fe fe06 	bl	8007fe2 <USBD_LL_Reset>
}
 80093d6:	46c0      	nop			; (mov r8, r8)
 80093d8:	46bd      	mov	sp, r7
 80093da:	b004      	add	sp, #16
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b082      	sub	sp, #8
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	23bc      	movs	r3, #188	; 0xbc
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	58d3      	ldr	r3, [r2, r3]
 80093f0:	0018      	movs	r0, r3
 80093f2:	f7fe fe4f 	bl	8008094 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_PCD_SuspendCallback+0x34>)
 8009400:	691a      	ldr	r2, [r3, #16]
 8009402:	4b04      	ldr	r3, [pc, #16]	; (8009414 <HAL_PCD_SuspendCallback+0x34>)
 8009404:	2106      	movs	r1, #6
 8009406:	430a      	orrs	r2, r1
 8009408:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800940a:	46c0      	nop			; (mov r8, r8)
 800940c:	46bd      	mov	sp, r7
 800940e:	b002      	add	sp, #8
 8009410:	bd80      	pop	{r7, pc}
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	e000ed00 	.word	0xe000ed00

08009418 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	699b      	ldr	r3, [r3, #24]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d007      	beq.n	8009438 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009428:	4b09      	ldr	r3, [pc, #36]	; (8009450 <HAL_PCD_ResumeCallback+0x38>)
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	4b08      	ldr	r3, [pc, #32]	; (8009450 <HAL_PCD_ResumeCallback+0x38>)
 800942e:	2106      	movs	r1, #6
 8009430:	438a      	bics	r2, r1
 8009432:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009434:	f000 fa0d 	bl	8009852 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009438:	687a      	ldr	r2, [r7, #4]
 800943a:	23bc      	movs	r3, #188	; 0xbc
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	58d3      	ldr	r3, [r2, r3]
 8009440:	0018      	movs	r0, r3
 8009442:	f7fe fe3f 	bl	80080c4 <USBD_LL_Resume>
}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	46bd      	mov	sp, r7
 800944a:	b002      	add	sp, #8
 800944c:	bd80      	pop	{r7, pc}
 800944e:	46c0      	nop			; (mov r8, r8)
 8009450:	e000ed00 	.word	0xe000ed00

08009454 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800945c:	4a27      	ldr	r2, [pc, #156]	; (80094fc <USBD_LL_Init+0xa8>)
 800945e:	23bc      	movs	r3, #188	; 0xbc
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	23b0      	movs	r3, #176	; 0xb0
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4923      	ldr	r1, [pc, #140]	; (80094fc <USBD_LL_Init+0xa8>)
 800946e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009470:	4b22      	ldr	r3, [pc, #136]	; (80094fc <USBD_LL_Init+0xa8>)
 8009472:	4a23      	ldr	r2, [pc, #140]	; (8009500 <USBD_LL_Init+0xac>)
 8009474:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009476:	4b21      	ldr	r3, [pc, #132]	; (80094fc <USBD_LL_Init+0xa8>)
 8009478:	2208      	movs	r2, #8
 800947a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800947c:	4b1f      	ldr	r3, [pc, #124]	; (80094fc <USBD_LL_Init+0xa8>)
 800947e:	2202      	movs	r2, #2
 8009480:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009482:	4b1e      	ldr	r3, [pc, #120]	; (80094fc <USBD_LL_Init+0xa8>)
 8009484:	2202      	movs	r2, #2
 8009486:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009488:	4b1c      	ldr	r3, [pc, #112]	; (80094fc <USBD_LL_Init+0xa8>)
 800948a:	2200      	movs	r2, #0
 800948c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800948e:	4b1b      	ldr	r3, [pc, #108]	; (80094fc <USBD_LL_Init+0xa8>)
 8009490:	2200      	movs	r2, #0
 8009492:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009494:	4b19      	ldr	r3, [pc, #100]	; (80094fc <USBD_LL_Init+0xa8>)
 8009496:	2200      	movs	r2, #0
 8009498:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800949a:	4b18      	ldr	r3, [pc, #96]	; (80094fc <USBD_LL_Init+0xa8>)
 800949c:	0018      	movs	r0, r3
 800949e:	f7f8 fe4d 	bl	800213c <HAL_PCD_Init>
 80094a2:	1e03      	subs	r3, r0, #0
 80094a4:	d001      	beq.n	80094aa <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80094a6:	f7f7 fcd1 	bl	8000e4c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	23b0      	movs	r3, #176	; 0xb0
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	58d0      	ldr	r0, [r2, r3]
 80094b2:	2318      	movs	r3, #24
 80094b4:	2200      	movs	r2, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	f7fa fc16 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	23b0      	movs	r3, #176	; 0xb0
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	58d0      	ldr	r0, [r2, r3]
 80094c4:	2358      	movs	r3, #88	; 0x58
 80094c6:	2200      	movs	r2, #0
 80094c8:	2180      	movs	r1, #128	; 0x80
 80094ca:	f7fa fc0d 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	23b0      	movs	r3, #176	; 0xb0
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	58d0      	ldr	r0, [r2, r3]
 80094d6:	2398      	movs	r3, #152	; 0x98
 80094d8:	2200      	movs	r2, #0
 80094da:	2181      	movs	r1, #129	; 0x81
 80094dc:	f7fa fc04 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	23b0      	movs	r3, #176	; 0xb0
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	58d0      	ldr	r0, [r2, r3]
 80094e8:	23d8      	movs	r3, #216	; 0xd8
 80094ea:	2200      	movs	r2, #0
 80094ec:	2101      	movs	r1, #1
 80094ee:	f7fa fbfb 	bl	8003ce8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	0018      	movs	r0, r3
 80094f6:	46bd      	mov	sp, r7
 80094f8:	b002      	add	sp, #8
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	20000840 	.word	0x20000840
 8009500:	40005c00 	.word	0x40005c00

08009504 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800950c:	210f      	movs	r1, #15
 800950e:	187b      	adds	r3, r7, r1
 8009510:	2200      	movs	r2, #0
 8009512:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009514:	260e      	movs	r6, #14
 8009516:	19bb      	adds	r3, r7, r6
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	23b0      	movs	r3, #176	; 0xb0
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	58d3      	ldr	r3, [r2, r3]
 8009524:	000d      	movs	r5, r1
 8009526:	187c      	adds	r4, r7, r1
 8009528:	0018      	movs	r0, r3
 800952a:	f7f8 ff17 	bl	800235c <HAL_PCD_Start>
 800952e:	0003      	movs	r3, r0
 8009530:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009532:	19bc      	adds	r4, r7, r6
 8009534:	197b      	adds	r3, r7, r5
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	0018      	movs	r0, r3
 800953a:	f000 f991 	bl	8009860 <USBD_Get_USB_Status>
 800953e:	0003      	movs	r3, r0
 8009540:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009542:	19bb      	adds	r3, r7, r6
 8009544:	781b      	ldrb	r3, [r3, #0]
}
 8009546:	0018      	movs	r0, r3
 8009548:	46bd      	mov	sp, r7
 800954a:	b005      	add	sp, #20
 800954c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800954e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800954e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009550:	b085      	sub	sp, #20
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	000c      	movs	r4, r1
 8009558:	0010      	movs	r0, r2
 800955a:	0019      	movs	r1, r3
 800955c:	1cfb      	adds	r3, r7, #3
 800955e:	1c22      	adds	r2, r4, #0
 8009560:	701a      	strb	r2, [r3, #0]
 8009562:	1cbb      	adds	r3, r7, #2
 8009564:	1c02      	adds	r2, r0, #0
 8009566:	701a      	strb	r2, [r3, #0]
 8009568:	003b      	movs	r3, r7
 800956a:	1c0a      	adds	r2, r1, #0
 800956c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800956e:	260f      	movs	r6, #15
 8009570:	19bb      	adds	r3, r7, r6
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009576:	250e      	movs	r5, #14
 8009578:	197b      	adds	r3, r7, r5
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	23b0      	movs	r3, #176	; 0xb0
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	58d0      	ldr	r0, [r2, r3]
 8009586:	19bc      	adds	r4, r7, r6
 8009588:	1cbb      	adds	r3, r7, #2
 800958a:	781d      	ldrb	r5, [r3, #0]
 800958c:	003b      	movs	r3, r7
 800958e:	881a      	ldrh	r2, [r3, #0]
 8009590:	1cfb      	adds	r3, r7, #3
 8009592:	7819      	ldrb	r1, [r3, #0]
 8009594:	002b      	movs	r3, r5
 8009596:	f7f9 f8ae 	bl	80026f6 <HAL_PCD_EP_Open>
 800959a:	0003      	movs	r3, r0
 800959c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800959e:	250e      	movs	r5, #14
 80095a0:	197c      	adds	r4, r7, r5
 80095a2:	19bb      	adds	r3, r7, r6
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	0018      	movs	r0, r3
 80095a8:	f000 f95a 	bl	8009860 <USBD_Get_USB_Status>
 80095ac:	0003      	movs	r3, r0
 80095ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80095b0:	197b      	adds	r3, r7, r5
 80095b2:	781b      	ldrb	r3, [r3, #0]
}
 80095b4:	0018      	movs	r0, r3
 80095b6:	46bd      	mov	sp, r7
 80095b8:	b005      	add	sp, #20
 80095ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80095bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	000a      	movs	r2, r1
 80095c6:	1cfb      	adds	r3, r7, #3
 80095c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ca:	210f      	movs	r1, #15
 80095cc:	187b      	adds	r3, r7, r1
 80095ce:	2200      	movs	r2, #0
 80095d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095d2:	260e      	movs	r6, #14
 80095d4:	19bb      	adds	r3, r7, r6
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	23b0      	movs	r3, #176	; 0xb0
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	58d2      	ldr	r2, [r2, r3]
 80095e2:	000d      	movs	r5, r1
 80095e4:	187c      	adds	r4, r7, r1
 80095e6:	1cfb      	adds	r3, r7, #3
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	0019      	movs	r1, r3
 80095ec:	0010      	movs	r0, r2
 80095ee:	f7f9 f8fa 	bl	80027e6 <HAL_PCD_EP_Close>
 80095f2:	0003      	movs	r3, r0
 80095f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095f6:	19bc      	adds	r4, r7, r6
 80095f8:	197b      	adds	r3, r7, r5
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	0018      	movs	r0, r3
 80095fe:	f000 f92f 	bl	8009860 <USBD_Get_USB_Status>
 8009602:	0003      	movs	r3, r0
 8009604:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009606:	19bb      	adds	r3, r7, r6
 8009608:	781b      	ldrb	r3, [r3, #0]
}
 800960a:	0018      	movs	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	b005      	add	sp, #20
 8009610:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009612 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009612:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009614:	b085      	sub	sp, #20
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	000a      	movs	r2, r1
 800961c:	1cfb      	adds	r3, r7, #3
 800961e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009620:	210f      	movs	r1, #15
 8009622:	187b      	adds	r3, r7, r1
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009628:	260e      	movs	r6, #14
 800962a:	19bb      	adds	r3, r7, r6
 800962c:	2200      	movs	r2, #0
 800962e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	23b0      	movs	r3, #176	; 0xb0
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	58d2      	ldr	r2, [r2, r3]
 8009638:	000d      	movs	r5, r1
 800963a:	187c      	adds	r4, r7, r1
 800963c:	1cfb      	adds	r3, r7, #3
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	0019      	movs	r1, r3
 8009642:	0010      	movs	r0, r2
 8009644:	f7f9 f9ad 	bl	80029a2 <HAL_PCD_EP_SetStall>
 8009648:	0003      	movs	r3, r0
 800964a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800964c:	19bc      	adds	r4, r7, r6
 800964e:	197b      	adds	r3, r7, r5
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	0018      	movs	r0, r3
 8009654:	f000 f904 	bl	8009860 <USBD_Get_USB_Status>
 8009658:	0003      	movs	r3, r0
 800965a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800965c:	19bb      	adds	r3, r7, r6
 800965e:	781b      	ldrb	r3, [r3, #0]
}
 8009660:	0018      	movs	r0, r3
 8009662:	46bd      	mov	sp, r7
 8009664:	b005      	add	sp, #20
 8009666:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009668 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	000a      	movs	r2, r1
 8009672:	1cfb      	adds	r3, r7, #3
 8009674:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009676:	210f      	movs	r1, #15
 8009678:	187b      	adds	r3, r7, r1
 800967a:	2200      	movs	r2, #0
 800967c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800967e:	260e      	movs	r6, #14
 8009680:	19bb      	adds	r3, r7, r6
 8009682:	2200      	movs	r2, #0
 8009684:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	23b0      	movs	r3, #176	; 0xb0
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	58d2      	ldr	r2, [r2, r3]
 800968e:	000d      	movs	r5, r1
 8009690:	187c      	adds	r4, r7, r1
 8009692:	1cfb      	adds	r3, r7, #3
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	0019      	movs	r1, r3
 8009698:	0010      	movs	r0, r2
 800969a:	f7f9 f9de 	bl	8002a5a <HAL_PCD_EP_ClrStall>
 800969e:	0003      	movs	r3, r0
 80096a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a2:	19bc      	adds	r4, r7, r6
 80096a4:	197b      	adds	r3, r7, r5
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	0018      	movs	r0, r3
 80096aa:	f000 f8d9 	bl	8009860 <USBD_Get_USB_Status>
 80096ae:	0003      	movs	r3, r0
 80096b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096b2:	19bb      	adds	r3, r7, r6
 80096b4:	781b      	ldrb	r3, [r3, #0]
}
 80096b6:	0018      	movs	r0, r3
 80096b8:	46bd      	mov	sp, r7
 80096ba:	b005      	add	sp, #20
 80096bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096be <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096be:	b580      	push	{r7, lr}
 80096c0:	b084      	sub	sp, #16
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
 80096c6:	000a      	movs	r2, r1
 80096c8:	1cfb      	adds	r3, r7, #3
 80096ca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	23b0      	movs	r3, #176	; 0xb0
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	58d3      	ldr	r3, [r2, r3]
 80096d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80096d6:	1cfb      	adds	r3, r7, #3
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	b25b      	sxtb	r3, r3
 80096dc:	2b00      	cmp	r3, #0
 80096de:	da0d      	bge.n	80096fc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80096e0:	1cfb      	adds	r3, r7, #3
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	227f      	movs	r2, #127	; 0x7f
 80096e6:	4013      	ands	r3, r2
 80096e8:	68f9      	ldr	r1, [r7, #12]
 80096ea:	1c5a      	adds	r2, r3, #1
 80096ec:	0013      	movs	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	189b      	adds	r3, r3, r2
 80096f2:	00db      	lsls	r3, r3, #3
 80096f4:	18cb      	adds	r3, r1, r3
 80096f6:	3302      	adds	r3, #2
 80096f8:	781b      	ldrb	r3, [r3, #0]
 80096fa:	e00d      	b.n	8009718 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80096fc:	1cfb      	adds	r3, r7, #3
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	227f      	movs	r2, #127	; 0x7f
 8009702:	401a      	ands	r2, r3
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	23b5      	movs	r3, #181	; 0xb5
 8009708:	0059      	lsls	r1, r3, #1
 800970a:	0013      	movs	r3, r2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	189b      	adds	r3, r3, r2
 8009710:	00db      	lsls	r3, r3, #3
 8009712:	18c3      	adds	r3, r0, r3
 8009714:	185b      	adds	r3, r3, r1
 8009716:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009718:	0018      	movs	r0, r3
 800971a:	46bd      	mov	sp, r7
 800971c:	b004      	add	sp, #16
 800971e:	bd80      	pop	{r7, pc}

08009720 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	000a      	movs	r2, r1
 800972a:	1cfb      	adds	r3, r7, #3
 800972c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800972e:	210f      	movs	r1, #15
 8009730:	187b      	adds	r3, r7, r1
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009736:	260e      	movs	r6, #14
 8009738:	19bb      	adds	r3, r7, r6
 800973a:	2200      	movs	r2, #0
 800973c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	23b0      	movs	r3, #176	; 0xb0
 8009742:	009b      	lsls	r3, r3, #2
 8009744:	58d2      	ldr	r2, [r2, r3]
 8009746:	000d      	movs	r5, r1
 8009748:	187c      	adds	r4, r7, r1
 800974a:	1cfb      	adds	r3, r7, #3
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	0019      	movs	r1, r3
 8009750:	0010      	movs	r0, r2
 8009752:	f7f8 ffa5 	bl	80026a0 <HAL_PCD_SetAddress>
 8009756:	0003      	movs	r3, r0
 8009758:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800975a:	19bc      	adds	r4, r7, r6
 800975c:	197b      	adds	r3, r7, r5
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	0018      	movs	r0, r3
 8009762:	f000 f87d 	bl	8009860 <USBD_Get_USB_Status>
 8009766:	0003      	movs	r3, r0
 8009768:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800976a:	19bb      	adds	r3, r7, r6
 800976c:	781b      	ldrb	r3, [r3, #0]
}
 800976e:	0018      	movs	r0, r3
 8009770:	46bd      	mov	sp, r7
 8009772:	b005      	add	sp, #20
 8009774:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009776 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009778:	b087      	sub	sp, #28
 800977a:	af00      	add	r7, sp, #0
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	0008      	movs	r0, r1
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	0019      	movs	r1, r3
 8009784:	230b      	movs	r3, #11
 8009786:	18fb      	adds	r3, r7, r3
 8009788:	1c02      	adds	r2, r0, #0
 800978a:	701a      	strb	r2, [r3, #0]
 800978c:	2408      	movs	r4, #8
 800978e:	193b      	adds	r3, r7, r4
 8009790:	1c0a      	adds	r2, r1, #0
 8009792:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009794:	2117      	movs	r1, #23
 8009796:	187b      	adds	r3, r7, r1
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979c:	2516      	movs	r5, #22
 800979e:	197b      	adds	r3, r7, r5
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	23b0      	movs	r3, #176	; 0xb0
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	58d0      	ldr	r0, [r2, r3]
 80097ac:	193b      	adds	r3, r7, r4
 80097ae:	881d      	ldrh	r5, [r3, #0]
 80097b0:	000e      	movs	r6, r1
 80097b2:	187c      	adds	r4, r7, r1
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	230b      	movs	r3, #11
 80097b8:	18fb      	adds	r3, r7, r3
 80097ba:	7819      	ldrb	r1, [r3, #0]
 80097bc:	002b      	movs	r3, r5
 80097be:	f7f9 f8a7 	bl	8002910 <HAL_PCD_EP_Transmit>
 80097c2:	0003      	movs	r3, r0
 80097c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097c6:	2516      	movs	r5, #22
 80097c8:	197c      	adds	r4, r7, r5
 80097ca:	19bb      	adds	r3, r7, r6
 80097cc:	781b      	ldrb	r3, [r3, #0]
 80097ce:	0018      	movs	r0, r3
 80097d0:	f000 f846 	bl	8009860 <USBD_Get_USB_Status>
 80097d4:	0003      	movs	r3, r0
 80097d6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80097d8:	197b      	adds	r3, r7, r5
 80097da:	781b      	ldrb	r3, [r3, #0]
}
 80097dc:	0018      	movs	r0, r3
 80097de:	46bd      	mov	sp, r7
 80097e0:	b007      	add	sp, #28
 80097e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080097e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80097e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097e6:	b087      	sub	sp, #28
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	0008      	movs	r0, r1
 80097ee:	607a      	str	r2, [r7, #4]
 80097f0:	0019      	movs	r1, r3
 80097f2:	230b      	movs	r3, #11
 80097f4:	18fb      	adds	r3, r7, r3
 80097f6:	1c02      	adds	r2, r0, #0
 80097f8:	701a      	strb	r2, [r3, #0]
 80097fa:	2408      	movs	r4, #8
 80097fc:	193b      	adds	r3, r7, r4
 80097fe:	1c0a      	adds	r2, r1, #0
 8009800:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009802:	2117      	movs	r1, #23
 8009804:	187b      	adds	r3, r7, r1
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800980a:	2516      	movs	r5, #22
 800980c:	197b      	adds	r3, r7, r5
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	23b0      	movs	r3, #176	; 0xb0
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	58d0      	ldr	r0, [r2, r3]
 800981a:	193b      	adds	r3, r7, r4
 800981c:	881d      	ldrh	r5, [r3, #0]
 800981e:	000e      	movs	r6, r1
 8009820:	187c      	adds	r4, r7, r1
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	230b      	movs	r3, #11
 8009826:	18fb      	adds	r3, r7, r3
 8009828:	7819      	ldrb	r1, [r3, #0]
 800982a:	002b      	movs	r3, r5
 800982c:	f7f9 f82c 	bl	8002888 <HAL_PCD_EP_Receive>
 8009830:	0003      	movs	r3, r0
 8009832:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009834:	2516      	movs	r5, #22
 8009836:	197c      	adds	r4, r7, r5
 8009838:	19bb      	adds	r3, r7, r6
 800983a:	781b      	ldrb	r3, [r3, #0]
 800983c:	0018      	movs	r0, r3
 800983e:	f000 f80f 	bl	8009860 <USBD_Get_USB_Status>
 8009842:	0003      	movs	r3, r0
 8009844:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009846:	197b      	adds	r3, r7, r5
 8009848:	781b      	ldrb	r3, [r3, #0]
}
 800984a:	0018      	movs	r0, r3
 800984c:	46bd      	mov	sp, r7
 800984e:	b007      	add	sp, #28
 8009850:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009852 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009856:	f7f7 f905 	bl	8000a64 <SystemClock_Config>
}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	0002      	movs	r2, r0
 8009868:	1dfb      	adds	r3, r7, #7
 800986a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	230f      	movs	r3, #15
 800986e:	18fb      	adds	r3, r7, r3
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009874:	1dfb      	adds	r3, r7, #7
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	2b03      	cmp	r3, #3
 800987a:	d017      	beq.n	80098ac <USBD_Get_USB_Status+0x4c>
 800987c:	dc1b      	bgt.n	80098b6 <USBD_Get_USB_Status+0x56>
 800987e:	2b02      	cmp	r3, #2
 8009880:	d00f      	beq.n	80098a2 <USBD_Get_USB_Status+0x42>
 8009882:	dc18      	bgt.n	80098b6 <USBD_Get_USB_Status+0x56>
 8009884:	2b00      	cmp	r3, #0
 8009886:	d002      	beq.n	800988e <USBD_Get_USB_Status+0x2e>
 8009888:	2b01      	cmp	r3, #1
 800988a:	d005      	beq.n	8009898 <USBD_Get_USB_Status+0x38>
 800988c:	e013      	b.n	80098b6 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800988e:	230f      	movs	r3, #15
 8009890:	18fb      	adds	r3, r7, r3
 8009892:	2200      	movs	r2, #0
 8009894:	701a      	strb	r2, [r3, #0]
    break;
 8009896:	e013      	b.n	80098c0 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009898:	230f      	movs	r3, #15
 800989a:	18fb      	adds	r3, r7, r3
 800989c:	2202      	movs	r2, #2
 800989e:	701a      	strb	r2, [r3, #0]
    break;
 80098a0:	e00e      	b.n	80098c0 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80098a2:	230f      	movs	r3, #15
 80098a4:	18fb      	adds	r3, r7, r3
 80098a6:	2201      	movs	r2, #1
 80098a8:	701a      	strb	r2, [r3, #0]
    break;
 80098aa:	e009      	b.n	80098c0 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098ac:	230f      	movs	r3, #15
 80098ae:	18fb      	adds	r3, r7, r3
 80098b0:	2202      	movs	r2, #2
 80098b2:	701a      	strb	r2, [r3, #0]
    break;
 80098b4:	e004      	b.n	80098c0 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80098b6:	230f      	movs	r3, #15
 80098b8:	18fb      	adds	r3, r7, r3
 80098ba:	2202      	movs	r2, #2
 80098bc:	701a      	strb	r2, [r3, #0]
    break;
 80098be:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80098c0:	230f      	movs	r3, #15
 80098c2:	18fb      	adds	r3, r7, r3
 80098c4:	781b      	ldrb	r3, [r3, #0]
}
 80098c6:	0018      	movs	r0, r3
 80098c8:	46bd      	mov	sp, r7
 80098ca:	b004      	add	sp, #16
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <__errno>:
 80098d0:	4b01      	ldr	r3, [pc, #4]	; (80098d8 <__errno+0x8>)
 80098d2:	6818      	ldr	r0, [r3, #0]
 80098d4:	4770      	bx	lr
 80098d6:	46c0      	nop			; (mov r8, r8)
 80098d8:	20000190 	.word	0x20000190

080098dc <__libc_init_array>:
 80098dc:	b570      	push	{r4, r5, r6, lr}
 80098de:	2600      	movs	r6, #0
 80098e0:	4d0c      	ldr	r5, [pc, #48]	; (8009914 <__libc_init_array+0x38>)
 80098e2:	4c0d      	ldr	r4, [pc, #52]	; (8009918 <__libc_init_array+0x3c>)
 80098e4:	1b64      	subs	r4, r4, r5
 80098e6:	10a4      	asrs	r4, r4, #2
 80098e8:	42a6      	cmp	r6, r4
 80098ea:	d109      	bne.n	8009900 <__libc_init_array+0x24>
 80098ec:	2600      	movs	r6, #0
 80098ee:	f000 f90b 	bl	8009b08 <_init>
 80098f2:	4d0a      	ldr	r5, [pc, #40]	; (800991c <__libc_init_array+0x40>)
 80098f4:	4c0a      	ldr	r4, [pc, #40]	; (8009920 <__libc_init_array+0x44>)
 80098f6:	1b64      	subs	r4, r4, r5
 80098f8:	10a4      	asrs	r4, r4, #2
 80098fa:	42a6      	cmp	r6, r4
 80098fc:	d105      	bne.n	800990a <__libc_init_array+0x2e>
 80098fe:	bd70      	pop	{r4, r5, r6, pc}
 8009900:	00b3      	lsls	r3, r6, #2
 8009902:	58eb      	ldr	r3, [r5, r3]
 8009904:	4798      	blx	r3
 8009906:	3601      	adds	r6, #1
 8009908:	e7ee      	b.n	80098e8 <__libc_init_array+0xc>
 800990a:	00b3      	lsls	r3, r6, #2
 800990c:	58eb      	ldr	r3, [r5, r3]
 800990e:	4798      	blx	r3
 8009910:	3601      	adds	r6, #1
 8009912:	e7f2      	b.n	80098fa <__libc_init_array+0x1e>
 8009914:	08009c84 	.word	0x08009c84
 8009918:	08009c84 	.word	0x08009c84
 800991c:	08009c84 	.word	0x08009c84
 8009920:	08009c88 	.word	0x08009c88

08009924 <malloc>:
 8009924:	b510      	push	{r4, lr}
 8009926:	4b03      	ldr	r3, [pc, #12]	; (8009934 <malloc+0x10>)
 8009928:	0001      	movs	r1, r0
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	f000 f86a 	bl	8009a04 <_malloc_r>
 8009930:	bd10      	pop	{r4, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	20000190 	.word	0x20000190

08009938 <free>:
 8009938:	b510      	push	{r4, lr}
 800993a:	4b03      	ldr	r3, [pc, #12]	; (8009948 <free+0x10>)
 800993c:	0001      	movs	r1, r0
 800993e:	6818      	ldr	r0, [r3, #0]
 8009940:	f000 f816 	bl	8009970 <_free_r>
 8009944:	bd10      	pop	{r4, pc}
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	20000190 	.word	0x20000190

0800994c <memcpy>:
 800994c:	2300      	movs	r3, #0
 800994e:	b510      	push	{r4, lr}
 8009950:	429a      	cmp	r2, r3
 8009952:	d100      	bne.n	8009956 <memcpy+0xa>
 8009954:	bd10      	pop	{r4, pc}
 8009956:	5ccc      	ldrb	r4, [r1, r3]
 8009958:	54c4      	strb	r4, [r0, r3]
 800995a:	3301      	adds	r3, #1
 800995c:	e7f8      	b.n	8009950 <memcpy+0x4>

0800995e <memset>:
 800995e:	0003      	movs	r3, r0
 8009960:	1882      	adds	r2, r0, r2
 8009962:	4293      	cmp	r3, r2
 8009964:	d100      	bne.n	8009968 <memset+0xa>
 8009966:	4770      	bx	lr
 8009968:	7019      	strb	r1, [r3, #0]
 800996a:	3301      	adds	r3, #1
 800996c:	e7f9      	b.n	8009962 <memset+0x4>
	...

08009970 <_free_r>:
 8009970:	b570      	push	{r4, r5, r6, lr}
 8009972:	0005      	movs	r5, r0
 8009974:	2900      	cmp	r1, #0
 8009976:	d010      	beq.n	800999a <_free_r+0x2a>
 8009978:	1f0c      	subs	r4, r1, #4
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	da00      	bge.n	8009982 <_free_r+0x12>
 8009980:	18e4      	adds	r4, r4, r3
 8009982:	0028      	movs	r0, r5
 8009984:	f000 f8ae 	bl	8009ae4 <__malloc_lock>
 8009988:	4a1d      	ldr	r2, [pc, #116]	; (8009a00 <_free_r+0x90>)
 800998a:	6813      	ldr	r3, [r2, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d105      	bne.n	800999c <_free_r+0x2c>
 8009990:	6063      	str	r3, [r4, #4]
 8009992:	6014      	str	r4, [r2, #0]
 8009994:	0028      	movs	r0, r5
 8009996:	f000 f8ad 	bl	8009af4 <__malloc_unlock>
 800999a:	bd70      	pop	{r4, r5, r6, pc}
 800999c:	42a3      	cmp	r3, r4
 800999e:	d908      	bls.n	80099b2 <_free_r+0x42>
 80099a0:	6821      	ldr	r1, [r4, #0]
 80099a2:	1860      	adds	r0, r4, r1
 80099a4:	4283      	cmp	r3, r0
 80099a6:	d1f3      	bne.n	8009990 <_free_r+0x20>
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	1841      	adds	r1, r0, r1
 80099ae:	6021      	str	r1, [r4, #0]
 80099b0:	e7ee      	b.n	8009990 <_free_r+0x20>
 80099b2:	001a      	movs	r2, r3
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d001      	beq.n	80099be <_free_r+0x4e>
 80099ba:	42a3      	cmp	r3, r4
 80099bc:	d9f9      	bls.n	80099b2 <_free_r+0x42>
 80099be:	6811      	ldr	r1, [r2, #0]
 80099c0:	1850      	adds	r0, r2, r1
 80099c2:	42a0      	cmp	r0, r4
 80099c4:	d10b      	bne.n	80099de <_free_r+0x6e>
 80099c6:	6820      	ldr	r0, [r4, #0]
 80099c8:	1809      	adds	r1, r1, r0
 80099ca:	1850      	adds	r0, r2, r1
 80099cc:	6011      	str	r1, [r2, #0]
 80099ce:	4283      	cmp	r3, r0
 80099d0:	d1e0      	bne.n	8009994 <_free_r+0x24>
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	1841      	adds	r1, r0, r1
 80099d8:	6011      	str	r1, [r2, #0]
 80099da:	6053      	str	r3, [r2, #4]
 80099dc:	e7da      	b.n	8009994 <_free_r+0x24>
 80099de:	42a0      	cmp	r0, r4
 80099e0:	d902      	bls.n	80099e8 <_free_r+0x78>
 80099e2:	230c      	movs	r3, #12
 80099e4:	602b      	str	r3, [r5, #0]
 80099e6:	e7d5      	b.n	8009994 <_free_r+0x24>
 80099e8:	6821      	ldr	r1, [r4, #0]
 80099ea:	1860      	adds	r0, r4, r1
 80099ec:	4283      	cmp	r3, r0
 80099ee:	d103      	bne.n	80099f8 <_free_r+0x88>
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	1841      	adds	r1, r0, r1
 80099f6:	6021      	str	r1, [r4, #0]
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	6054      	str	r4, [r2, #4]
 80099fc:	e7ca      	b.n	8009994 <_free_r+0x24>
 80099fe:	46c0      	nop			; (mov r8, r8)
 8009a00:	20000218 	.word	0x20000218

08009a04 <_malloc_r>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	2303      	movs	r3, #3
 8009a08:	1ccd      	adds	r5, r1, #3
 8009a0a:	439d      	bics	r5, r3
 8009a0c:	3508      	adds	r5, #8
 8009a0e:	0006      	movs	r6, r0
 8009a10:	2d0c      	cmp	r5, #12
 8009a12:	d21f      	bcs.n	8009a54 <_malloc_r+0x50>
 8009a14:	250c      	movs	r5, #12
 8009a16:	42a9      	cmp	r1, r5
 8009a18:	d81e      	bhi.n	8009a58 <_malloc_r+0x54>
 8009a1a:	0030      	movs	r0, r6
 8009a1c:	f000 f862 	bl	8009ae4 <__malloc_lock>
 8009a20:	4925      	ldr	r1, [pc, #148]	; (8009ab8 <_malloc_r+0xb4>)
 8009a22:	680a      	ldr	r2, [r1, #0]
 8009a24:	0014      	movs	r4, r2
 8009a26:	2c00      	cmp	r4, #0
 8009a28:	d11a      	bne.n	8009a60 <_malloc_r+0x5c>
 8009a2a:	4f24      	ldr	r7, [pc, #144]	; (8009abc <_malloc_r+0xb8>)
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d104      	bne.n	8009a3c <_malloc_r+0x38>
 8009a32:	0021      	movs	r1, r4
 8009a34:	0030      	movs	r0, r6
 8009a36:	f000 f843 	bl	8009ac0 <_sbrk_r>
 8009a3a:	6038      	str	r0, [r7, #0]
 8009a3c:	0029      	movs	r1, r5
 8009a3e:	0030      	movs	r0, r6
 8009a40:	f000 f83e 	bl	8009ac0 <_sbrk_r>
 8009a44:	1c43      	adds	r3, r0, #1
 8009a46:	d12b      	bne.n	8009aa0 <_malloc_r+0x9c>
 8009a48:	230c      	movs	r3, #12
 8009a4a:	0030      	movs	r0, r6
 8009a4c:	6033      	str	r3, [r6, #0]
 8009a4e:	f000 f851 	bl	8009af4 <__malloc_unlock>
 8009a52:	e003      	b.n	8009a5c <_malloc_r+0x58>
 8009a54:	2d00      	cmp	r5, #0
 8009a56:	dade      	bge.n	8009a16 <_malloc_r+0x12>
 8009a58:	230c      	movs	r3, #12
 8009a5a:	6033      	str	r3, [r6, #0]
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	1b5b      	subs	r3, r3, r5
 8009a64:	d419      	bmi.n	8009a9a <_malloc_r+0x96>
 8009a66:	2b0b      	cmp	r3, #11
 8009a68:	d903      	bls.n	8009a72 <_malloc_r+0x6e>
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	18e4      	adds	r4, r4, r3
 8009a6e:	6025      	str	r5, [r4, #0]
 8009a70:	e003      	b.n	8009a7a <_malloc_r+0x76>
 8009a72:	6863      	ldr	r3, [r4, #4]
 8009a74:	42a2      	cmp	r2, r4
 8009a76:	d10e      	bne.n	8009a96 <_malloc_r+0x92>
 8009a78:	600b      	str	r3, [r1, #0]
 8009a7a:	0030      	movs	r0, r6
 8009a7c:	f000 f83a 	bl	8009af4 <__malloc_unlock>
 8009a80:	0020      	movs	r0, r4
 8009a82:	2207      	movs	r2, #7
 8009a84:	300b      	adds	r0, #11
 8009a86:	1d23      	adds	r3, r4, #4
 8009a88:	4390      	bics	r0, r2
 8009a8a:	1ac2      	subs	r2, r0, r3
 8009a8c:	4298      	cmp	r0, r3
 8009a8e:	d0e6      	beq.n	8009a5e <_malloc_r+0x5a>
 8009a90:	1a1b      	subs	r3, r3, r0
 8009a92:	50a3      	str	r3, [r4, r2]
 8009a94:	e7e3      	b.n	8009a5e <_malloc_r+0x5a>
 8009a96:	6053      	str	r3, [r2, #4]
 8009a98:	e7ef      	b.n	8009a7a <_malloc_r+0x76>
 8009a9a:	0022      	movs	r2, r4
 8009a9c:	6864      	ldr	r4, [r4, #4]
 8009a9e:	e7c2      	b.n	8009a26 <_malloc_r+0x22>
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	1cc4      	adds	r4, r0, #3
 8009aa4:	439c      	bics	r4, r3
 8009aa6:	42a0      	cmp	r0, r4
 8009aa8:	d0e1      	beq.n	8009a6e <_malloc_r+0x6a>
 8009aaa:	1a21      	subs	r1, r4, r0
 8009aac:	0030      	movs	r0, r6
 8009aae:	f000 f807 	bl	8009ac0 <_sbrk_r>
 8009ab2:	1c43      	adds	r3, r0, #1
 8009ab4:	d1db      	bne.n	8009a6e <_malloc_r+0x6a>
 8009ab6:	e7c7      	b.n	8009a48 <_malloc_r+0x44>
 8009ab8:	20000218 	.word	0x20000218
 8009abc:	2000021c 	.word	0x2000021c

08009ac0 <_sbrk_r>:
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	b570      	push	{r4, r5, r6, lr}
 8009ac4:	4d06      	ldr	r5, [pc, #24]	; (8009ae0 <_sbrk_r+0x20>)
 8009ac6:	0004      	movs	r4, r0
 8009ac8:	0008      	movs	r0, r1
 8009aca:	602b      	str	r3, [r5, #0]
 8009acc:	f7f7 fa7c 	bl	8000fc8 <_sbrk>
 8009ad0:	1c43      	adds	r3, r0, #1
 8009ad2:	d103      	bne.n	8009adc <_sbrk_r+0x1c>
 8009ad4:	682b      	ldr	r3, [r5, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d000      	beq.n	8009adc <_sbrk_r+0x1c>
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	bd70      	pop	{r4, r5, r6, pc}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	20000b34 	.word	0x20000b34

08009ae4 <__malloc_lock>:
 8009ae4:	b510      	push	{r4, lr}
 8009ae6:	4802      	ldr	r0, [pc, #8]	; (8009af0 <__malloc_lock+0xc>)
 8009ae8:	f000 f80c 	bl	8009b04 <__retarget_lock_acquire_recursive>
 8009aec:	bd10      	pop	{r4, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	20000b3c 	.word	0x20000b3c

08009af4 <__malloc_unlock>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	4802      	ldr	r0, [pc, #8]	; (8009b00 <__malloc_unlock+0xc>)
 8009af8:	f000 f805 	bl	8009b06 <__retarget_lock_release_recursive>
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	46c0      	nop			; (mov r8, r8)
 8009b00:	20000b3c 	.word	0x20000b3c

08009b04 <__retarget_lock_acquire_recursive>:
 8009b04:	4770      	bx	lr

08009b06 <__retarget_lock_release_recursive>:
 8009b06:	4770      	bx	lr

08009b08 <_init>:
 8009b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b0a:	46c0      	nop			; (mov r8, r8)
 8009b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0e:	bc08      	pop	{r3}
 8009b10:	469e      	mov	lr, r3
 8009b12:	4770      	bx	lr

08009b14 <_fini>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	46c0      	nop			; (mov r8, r8)
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr
