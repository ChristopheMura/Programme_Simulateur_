
Simulator_HID_CUSTOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1d0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800a290  0800a290  0001a290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a43c  0800a43c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a43c  0800a43c  0001a43c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a444  0800a444  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a444  0800a444  0001a444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800a44c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  200001fc  0800a648  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b00  0800a648  00020b00  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d18  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003693  00000000  00000000  00038f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  0003c5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd8  00000000  00000000  0003d400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018499  00000000  00000000  0003e0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014955  00000000  00000000  00056571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cf4  00000000  00000000  0006aec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1bba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  000f1c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a278 	.word	0x0800a278

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	0800a278 	.word	0x0800a278

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8ba 	bl	800046c <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8b5 	bl	800046c <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzdi2>:
 800046c:	b510      	push	{r4, lr}
 800046e:	2900      	cmp	r1, #0
 8000470:	d103      	bne.n	800047a <__clzdi2+0xe>
 8000472:	f000 f807 	bl	8000484 <__clzsi2>
 8000476:	3020      	adds	r0, #32
 8000478:	e002      	b.n	8000480 <__clzdi2+0x14>
 800047a:	1c08      	adds	r0, r1, #0
 800047c:	f000 f802 	bl	8000484 <__clzsi2>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__clzsi2>:
 8000484:	211c      	movs	r1, #28
 8000486:	2301      	movs	r3, #1
 8000488:	041b      	lsls	r3, r3, #16
 800048a:	4298      	cmp	r0, r3
 800048c:	d301      	bcc.n	8000492 <__clzsi2+0xe>
 800048e:	0c00      	lsrs	r0, r0, #16
 8000490:	3910      	subs	r1, #16
 8000492:	0a1b      	lsrs	r3, r3, #8
 8000494:	4298      	cmp	r0, r3
 8000496:	d301      	bcc.n	800049c <__clzsi2+0x18>
 8000498:	0a00      	lsrs	r0, r0, #8
 800049a:	3908      	subs	r1, #8
 800049c:	091b      	lsrs	r3, r3, #4
 800049e:	4298      	cmp	r0, r3
 80004a0:	d301      	bcc.n	80004a6 <__clzsi2+0x22>
 80004a2:	0900      	lsrs	r0, r0, #4
 80004a4:	3904      	subs	r1, #4
 80004a6:	a202      	add	r2, pc, #8	; (adr r2, 80004b0 <__clzsi2+0x2c>)
 80004a8:	5c10      	ldrb	r0, [r2, r0]
 80004aa:	1840      	adds	r0, r0, r1
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	02020304 	.word	0x02020304
 80004b4:	01010101 	.word	0x01010101
	...

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b09b      	sub	sp, #108	; 0x6c
 80004c4:	af00      	add	r7, sp, #0

	uint32_t ADC_VAL[5];
	//uint32_t ADC_VAL1, ADC_VAL2, ADC_VAL3, ADC_VAL4, ADC_VAL5;
	char msg[80];

	pumahid.hat0 = 0x00;
 80004c6:	4be7      	ldr	r3, [pc, #924]	; (8000864 <main+0x3a4>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	701a      	strb	r2, [r3, #0]
	pumahid.hat1 = 0x00;
 80004cc:	4be5      	ldr	r3, [pc, #916]	; (8000864 <main+0x3a4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	705a      	strb	r2, [r3, #1]
	pumahid.hat2 = 0x00;
 80004d2:	4be4      	ldr	r3, [pc, #912]	; (8000864 <main+0x3a4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	709a      	strb	r2, [r3, #2]
	pumahid.key3 = 0x00;
 80004d8:	4be2      	ldr	r3, [pc, #904]	; (8000864 <main+0x3a4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	70da      	strb	r2, [r3, #3]
	pumahid.but0 = 0x00;
 80004de:	4be1      	ldr	r3, [pc, #900]	; (8000864 <main+0x3a4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	711a      	strb	r2, [r3, #4]
	pumahid.but1 = 0x00;
 80004e4:	4bdf      	ldr	r3, [pc, #892]	; (8000864 <main+0x3a4>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	715a      	strb	r2, [r3, #5]
	pumahid.but2 = 0x00;
 80004ea:	4bde      	ldr	r3, [pc, #888]	; (8000864 <main+0x3a4>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	719a      	strb	r2, [r3, #6]
	pumahid.but3 = 0x00;
 80004f0:	4bdc      	ldr	r3, [pc, #880]	; (8000864 <main+0x3a4>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	71da      	strb	r2, [r3, #7]
	pumahid.x = 0x0000;
 80004f6:	4bdb      	ldr	r3, [pc, #876]	; (8000864 <main+0x3a4>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	811a      	strh	r2, [r3, #8]
	pumahid.y = 0x0000;
 80004fc:	4bd9      	ldr	r3, [pc, #868]	; (8000864 <main+0x3a4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	815a      	strh	r2, [r3, #10]
	pumahid.z = 0x0000;
 8000502:	4bd8      	ldr	r3, [pc, #864]	; (8000864 <main+0x3a4>)
 8000504:	2200      	movs	r2, #0
 8000506:	819a      	strh	r2, [r3, #12]
	pumahid.rx = 0x0000;
 8000508:	4bd6      	ldr	r3, [pc, #856]	; (8000864 <main+0x3a4>)
 800050a:	2200      	movs	r2, #0
 800050c:	81da      	strh	r2, [r3, #14]
	pumahid.ry = 0x0000;
 800050e:	4bd5      	ldr	r3, [pc, #852]	; (8000864 <main+0x3a4>)
 8000510:	2200      	movs	r2, #0
 8000512:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000514:	f000 fd92 	bl	800103c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000518:	f000 fa7a 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800051c:	f000 fbc2 	bl	8000ca4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000520:	f000 faf0 	bl	8000b04 <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000524:	f000 fb8e 	bl	8000c44 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000528:	f008 fd9e 	bl	8009068 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	00d9      	lsls	r1, r3, #3
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	2201      	movs	r2, #1
 8000536:	0018      	movs	r0, r3
 8000538:	f001 fdb7 	bl	80020aa <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800053c:	2380      	movs	r3, #128	; 0x80
 800053e:	009b      	lsls	r3, r3, #2
 8000540:	48c9      	ldr	r0, [pc, #804]	; (8000868 <main+0x3a8>)
 8000542:	2200      	movs	r2, #0
 8000544:	0019      	movs	r1, r3
 8000546:	f001 fdb0 	bl	80020aa <HAL_GPIO_WritePin>

  ADC_VAL[0] = HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800054a:	4bc8      	ldr	r3, [pc, #800]	; (800086c <main+0x3ac>)
 800054c:	2100      	movs	r1, #0
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fa94 	bl	8001a7c <HAL_ADCEx_Calibration_Start>
 8000554:	0003      	movs	r3, r0
 8000556:	001a      	movs	r2, r3
 8000558:	2454      	movs	r4, #84	; 0x54
 800055a:	193b      	adds	r3, r7, r4
 800055c:	601a      	str	r2, [r3, #0]
  ADC_VAL[1] = HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 800055e:	4bc3      	ldr	r3, [pc, #780]	; (800086c <main+0x3ac>)
 8000560:	2100      	movs	r1, #0
 8000562:	0018      	movs	r0, r3
 8000564:	f001 fa8a 	bl	8001a7c <HAL_ADCEx_Calibration_Start>
 8000568:	0003      	movs	r3, r0
 800056a:	001a      	movs	r2, r3
 800056c:	193b      	adds	r3, r7, r4
 800056e:	605a      	str	r2, [r3, #4]
  ADC_VAL[2] = HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000570:	4bbe      	ldr	r3, [pc, #760]	; (800086c <main+0x3ac>)
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fa81 	bl	8001a7c <HAL_ADCEx_Calibration_Start>
 800057a:	0003      	movs	r3, r0
 800057c:	001a      	movs	r2, r3
 800057e:	193b      	adds	r3, r7, r4
 8000580:	609a      	str	r2, [r3, #8]
  ADC_VAL[3] = HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000582:	4bba      	ldr	r3, [pc, #744]	; (800086c <main+0x3ac>)
 8000584:	2100      	movs	r1, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f001 fa78 	bl	8001a7c <HAL_ADCEx_Calibration_Start>
 800058c:	0003      	movs	r3, r0
 800058e:	001a      	movs	r2, r3
 8000590:	193b      	adds	r3, r7, r4
 8000592:	60da      	str	r2, [r3, #12]
  ADC_VAL[4] = HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8000594:	4bb5      	ldr	r3, [pc, #724]	; (800086c <main+0x3ac>)
 8000596:	2100      	movs	r1, #0
 8000598:	0018      	movs	r0, r3
 800059a:	f001 fa6f 	bl	8001a7c <HAL_ADCEx_Calibration_Start>
 800059e:	0003      	movs	r3, r0
 80005a0:	001a      	movs	r2, r3
 80005a2:	193b      	adds	r3, r7, r4
 80005a4:	611a      	str	r2, [r3, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	4aaf      	ldr	r2, [pc, #700]	; (8000868 <main+0x3a8>)
 80005ac:	0019      	movs	r1, r3
 80005ae:	0010      	movs	r0, r2
 80005b0:	f001 fd5e 	bl	8002070 <HAL_GPIO_ReadPin>
 80005b4:	0003      	movs	r3, r0
 80005b6:	001a      	movs	r2, r3
 80005b8:	4bad      	ldr	r3, [pc, #692]	; (8000870 <main+0x3b0>)
 80005ba:	701a      	strb	r2, [r3, #0]

	  BP_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80005bc:	4baa      	ldr	r3, [pc, #680]	; (8000868 <main+0x3a8>)
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fd55 	bl	8002070 <HAL_GPIO_ReadPin>
 80005c6:	0003      	movs	r3, r0
 80005c8:	001a      	movs	r2, r3
 80005ca:	4baa      	ldr	r3, [pc, #680]	; (8000874 <main+0x3b4>)
 80005cc:	701a      	strb	r2, [r3, #0]
	  BP_3 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80005ce:	4ba6      	ldr	r3, [pc, #664]	; (8000868 <main+0x3a8>)
 80005d0:	2120      	movs	r1, #32
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 fd4c 	bl	8002070 <HAL_GPIO_ReadPin>
 80005d8:	0003      	movs	r3, r0
 80005da:	001a      	movs	r2, r3
 80005dc:	4ba6      	ldr	r3, [pc, #664]	; (8000878 <main+0x3b8>)
 80005de:	701a      	strb	r2, [r3, #0]
	  hat_east = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 80005e0:	4ba1      	ldr	r3, [pc, #644]	; (8000868 <main+0x3a8>)
 80005e2:	2110      	movs	r1, #16
 80005e4:	0018      	movs	r0, r3
 80005e6:	f001 fd43 	bl	8002070 <HAL_GPIO_ReadPin>
 80005ea:	0003      	movs	r3, r0
 80005ec:	001a      	movs	r2, r3
 80005ee:	4ba3      	ldr	r3, [pc, #652]	; (800087c <main+0x3bc>)
 80005f0:	701a      	strb	r2, [r3, #0]

	  hat_north = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 80005f2:	4b9d      	ldr	r3, [pc, #628]	; (8000868 <main+0x3a8>)
 80005f4:	2108      	movs	r1, #8
 80005f6:	0018      	movs	r0, r3
 80005f8:	f001 fd3a 	bl	8002070 <HAL_GPIO_ReadPin>
 80005fc:	0003      	movs	r3, r0
 80005fe:	001a      	movs	r2, r3
 8000600:	4b9f      	ldr	r3, [pc, #636]	; (8000880 <main+0x3c0>)
 8000602:	701a      	strb	r2, [r3, #0]
	  hat_west = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000604:	2380      	movs	r3, #128	; 0x80
 8000606:	021a      	lsls	r2, r3, #8
 8000608:	23a0      	movs	r3, #160	; 0xa0
 800060a:	05db      	lsls	r3, r3, #23
 800060c:	0011      	movs	r1, r2
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fd2e 	bl	8002070 <HAL_GPIO_ReadPin>
 8000614:	0003      	movs	r3, r0
 8000616:	001a      	movs	r2, r3
 8000618:	4b9a      	ldr	r3, [pc, #616]	; (8000884 <main+0x3c4>)
 800061a:	701a      	strb	r2, [r3, #0]

	  BP_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9);
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	009a      	lsls	r2, r3, #2
 8000620:	23a0      	movs	r3, #160	; 0xa0
 8000622:	05db      	lsls	r3, r3, #23
 8000624:	0011      	movs	r1, r2
 8000626:	0018      	movs	r0, r3
 8000628:	f001 fd22 	bl	8002070 <HAL_GPIO_ReadPin>
 800062c:	0003      	movs	r3, r0
 800062e:	001a      	movs	r2, r3
 8000630:	4b95      	ldr	r3, [pc, #596]	; (8000888 <main+0x3c8>)
 8000632:	701a      	strb	r2, [r3, #0]
	  BP_4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8);
 8000634:	2380      	movs	r3, #128	; 0x80
 8000636:	005a      	lsls	r2, r3, #1
 8000638:	23a0      	movs	r3, #160	; 0xa0
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f001 fd16 	bl	8002070 <HAL_GPIO_ReadPin>
 8000644:	0003      	movs	r3, r0
 8000646:	001a      	movs	r2, r3
 8000648:	4b90      	ldr	r3, [pc, #576]	; (800088c <main+0x3cc>)
 800064a:	701a      	strb	r2, [r3, #0]
	  hat_south = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	021b      	lsls	r3, r3, #8
 8000650:	4a85      	ldr	r2, [pc, #532]	; (8000868 <main+0x3a8>)
 8000652:	0019      	movs	r1, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f001 fd0b 	bl	8002070 <HAL_GPIO_ReadPin>
 800065a:	0003      	movs	r3, r0
 800065c:	001a      	movs	r2, r3
 800065e:	4b8c      	ldr	r3, [pc, #560]	; (8000890 <main+0x3d0>)
 8000660:	701a      	strb	r2, [r3, #0]

	  BP_5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8000662:	2380      	movs	r3, #128	; 0x80
 8000664:	019b      	lsls	r3, r3, #6
 8000666:	4a80      	ldr	r2, [pc, #512]	; (8000868 <main+0x3a8>)
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f001 fd00 	bl	8002070 <HAL_GPIO_ReadPin>
 8000670:	0003      	movs	r3, r0
 8000672:	001a      	movs	r2, r3
 8000674:	4b87      	ldr	r3, [pc, #540]	; (8000894 <main+0x3d4>)
 8000676:	701a      	strb	r2, [r3, #0]
	  BP_6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000678:	2380      	movs	r3, #128	; 0x80
 800067a:	01db      	lsls	r3, r3, #7
 800067c:	4a7a      	ldr	r2, [pc, #488]	; (8000868 <main+0x3a8>)
 800067e:	0019      	movs	r1, r3
 8000680:	0010      	movs	r0, r2
 8000682:	f001 fcf5 	bl	8002070 <HAL_GPIO_ReadPin>
 8000686:	0003      	movs	r3, r0
 8000688:	001a      	movs	r2, r3
 800068a:	4b83      	ldr	r3, [pc, #524]	; (8000898 <main+0x3d8>)
 800068c:	701a      	strb	r2, [r3, #0]

	  BP_7 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	4a75      	ldr	r2, [pc, #468]	; (8000868 <main+0x3a8>)
 8000694:	0019      	movs	r1, r3
 8000696:	0010      	movs	r0, r2
 8000698:	f001 fcea 	bl	8002070 <HAL_GPIO_ReadPin>
 800069c:	0003      	movs	r3, r0
 800069e:	001a      	movs	r2, r3
 80006a0:	4b7e      	ldr	r3, [pc, #504]	; (800089c <main+0x3dc>)
 80006a2:	701a      	strb	r2, [r3, #0]
	  BP_8 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	4a6f      	ldr	r2, [pc, #444]	; (8000868 <main+0x3a8>)
 80006aa:	0019      	movs	r1, r3
 80006ac:	0010      	movs	r0, r2
 80006ae:	f001 fcdf 	bl	8002070 <HAL_GPIO_ReadPin>
 80006b2:	0003      	movs	r3, r0
 80006b4:	001a      	movs	r2, r3
 80006b6:	4b7a      	ldr	r3, [pc, #488]	; (80008a0 <main+0x3e0>)
 80006b8:	701a      	strb	r2, [r3, #0]

	  BP_20 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 80006ba:	4b6b      	ldr	r3, [pc, #428]	; (8000868 <main+0x3a8>)
 80006bc:	2104      	movs	r1, #4
 80006be:	0018      	movs	r0, r3
 80006c0:	f001 fcd6 	bl	8002070 <HAL_GPIO_ReadPin>
 80006c4:	0003      	movs	r3, r0
 80006c6:	001a      	movs	r2, r3
 80006c8:	4b76      	ldr	r3, [pc, #472]	; (80008a4 <main+0x3e4>)
 80006ca:	701a      	strb	r2, [r3, #0]
	  BP_11 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <main+0x3a8>)
 80006ce:	2102      	movs	r1, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fccd 	bl	8002070 <HAL_GPIO_ReadPin>
 80006d6:	0003      	movs	r3, r0
 80006d8:	001a      	movs	r2, r3
 80006da:	4b73      	ldr	r3, [pc, #460]	; (80008a8 <main+0x3e8>)
 80006dc:	701a      	strb	r2, [r3, #0]
	  BP_21 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80006de:	4b62      	ldr	r3, [pc, #392]	; (8000868 <main+0x3a8>)
 80006e0:	2101      	movs	r1, #1
 80006e2:	0018      	movs	r0, r3
 80006e4:	f001 fcc4 	bl	8002070 <HAL_GPIO_ReadPin>
 80006e8:	0003      	movs	r3, r0
 80006ea:	001a      	movs	r2, r3
 80006ec:	4b6f      	ldr	r3, [pc, #444]	; (80008ac <main+0x3ec>)
 80006ee:	701a      	strb	r2, [r3, #0]
	  BP_30 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80006f0:	23a0      	movs	r3, #160	; 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2180      	movs	r1, #128	; 0x80
 80006f6:	0018      	movs	r0, r3
 80006f8:	f001 fcba 	bl	8002070 <HAL_GPIO_ReadPin>
 80006fc:	0003      	movs	r3, r0
 80006fe:	001a      	movs	r2, r3
 8000700:	4b6b      	ldr	r3, [pc, #428]	; (80008b0 <main+0x3f0>)
 8000702:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start(&hadc);
 8000704:	4b59      	ldr	r3, [pc, #356]	; (800086c <main+0x3ac>)
 8000706:	0018      	movs	r0, r3
 8000708:	f000 fea0 	bl	800144c <HAL_ADC_Start>
	  ADC_VAL[0] = HAL_ADC_GetValue(&hadc);
 800070c:	4b57      	ldr	r3, [pc, #348]	; (800086c <main+0x3ac>)
 800070e:	0018      	movs	r0, r3
 8000710:	f000 ffcc 	bl	80016ac <HAL_ADC_GetValue>
 8000714:	0002      	movs	r2, r0
 8000716:	2454      	movs	r4, #84	; 0x54
 8000718:	193b      	adds	r3, r7, r4
 800071a:	601a      	str	r2, [r3, #0]
	  ADC_VAL[1] = HAL_ADC_GetValue(&hadc);
 800071c:	4b53      	ldr	r3, [pc, #332]	; (800086c <main+0x3ac>)
 800071e:	0018      	movs	r0, r3
 8000720:	f000 ffc4 	bl	80016ac <HAL_ADC_GetValue>
 8000724:	0002      	movs	r2, r0
 8000726:	193b      	adds	r3, r7, r4
 8000728:	605a      	str	r2, [r3, #4]
	  ADC_VAL[2] = HAL_ADC_GetValue(&hadc);
 800072a:	4b50      	ldr	r3, [pc, #320]	; (800086c <main+0x3ac>)
 800072c:	0018      	movs	r0, r3
 800072e:	f000 ffbd 	bl	80016ac <HAL_ADC_GetValue>
 8000732:	0002      	movs	r2, r0
 8000734:	193b      	adds	r3, r7, r4
 8000736:	609a      	str	r2, [r3, #8]
	  ADC_VAL[3] = HAL_ADC_GetValue(&hadc);
 8000738:	4b4c      	ldr	r3, [pc, #304]	; (800086c <main+0x3ac>)
 800073a:	0018      	movs	r0, r3
 800073c:	f000 ffb6 	bl	80016ac <HAL_ADC_GetValue>
 8000740:	0002      	movs	r2, r0
 8000742:	193b      	adds	r3, r7, r4
 8000744:	60da      	str	r2, [r3, #12]
	  ADC_VAL[4] = HAL_ADC_GetValue(&hadc);
 8000746:	4b49      	ldr	r3, [pc, #292]	; (800086c <main+0x3ac>)
 8000748:	0018      	movs	r0, r3
 800074a:	f000 ffaf 	bl	80016ac <HAL_ADC_GetValue>
 800074e:	0002      	movs	r2, r0
 8000750:	193b      	adds	r3, r7, r4
 8000752:	611a      	str	r2, [r3, #16]
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000754:	2301      	movs	r3, #1
 8000756:	425a      	negs	r2, r3
 8000758:	4b44      	ldr	r3, [pc, #272]	; (800086c <main+0x3ac>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 ff09 	bl	8001574 <HAL_ADC_PollForConversion>
	  HAL_ADC_Stop(&hadc);
 8000762:	4b42      	ldr	r3, [pc, #264]	; (800086c <main+0x3ac>)
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fec5 	bl	80014f4 <HAL_ADC_Stop>

	  if (hat_north == 0) pumahid.hat0 = 0;
 800076a:	4b45      	ldr	r3, [pc, #276]	; (8000880 <main+0x3c0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <main+0x2ba>
 8000772:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <main+0x3a4>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	e01a      	b.n	80007b0 <main+0x2f0>
	  else if (hat_west == 0) pumahid.hat0 = 6;
 800077a:	4b42      	ldr	r3, [pc, #264]	; (8000884 <main+0x3c4>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <main+0x2ca>
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <main+0x3a4>)
 8000784:	2206      	movs	r2, #6
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e012      	b.n	80007b0 <main+0x2f0>
	  else if (hat_east == 0) pumahid.hat0 = 2;
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <main+0x3bc>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d103      	bne.n	800079a <main+0x2da>
 8000792:	4b34      	ldr	r3, [pc, #208]	; (8000864 <main+0x3a4>)
 8000794:	2202      	movs	r2, #2
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	e00a      	b.n	80007b0 <main+0x2f0>
	  else if (hat_south == 0) pumahid.hat0 = 4;
 800079a:	4b3d      	ldr	r3, [pc, #244]	; (8000890 <main+0x3d0>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d103      	bne.n	80007aa <main+0x2ea>
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <main+0x3a4>)
 80007a4:	2204      	movs	r2, #4
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e002      	b.n	80007b0 <main+0x2f0>
	  else pumahid.hat0 = 7;
 80007aa:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <main+0x3a4>)
 80007ac:	2207      	movs	r2, #7
 80007ae:	701a      	strb	r2, [r3, #0]

	  if (BP_1 == 0) pumahid.but0 = 0x01;		// Appuie sur bouton 1
 80007b0:	4b30      	ldr	r3, [pc, #192]	; (8000874 <main+0x3b4>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d103      	bne.n	80007c0 <main+0x300>
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <main+0x3a4>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	711a      	strb	r2, [r3, #4]
 80007be:	e01a      	b.n	80007f6 <main+0x336>
	  else if (BP_3 == 0) pumahid.but0 = 0x02;	// Appuie sur bouton 3
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <main+0x3b8>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d103      	bne.n	80007d0 <main+0x310>
 80007c8:	4b26      	ldr	r3, [pc, #152]	; (8000864 <main+0x3a4>)
 80007ca:	2202      	movs	r2, #2
 80007cc:	711a      	strb	r2, [r3, #4]
 80007ce:	e012      	b.n	80007f6 <main+0x336>
	  else if (BP_2 == 0) pumahid.but0 = 0x04;	// Appuie sur bouton 2
 80007d0:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <main+0x3c8>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d103      	bne.n	80007e0 <main+0x320>
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <main+0x3a4>)
 80007da:	2204      	movs	r2, #4
 80007dc:	711a      	strb	r2, [r3, #4]
 80007de:	e00a      	b.n	80007f6 <main+0x336>
	  else if (BP_4 == 0) pumahid.but0 = 0X08;	// Appuie sur bouton 4
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <main+0x3cc>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d103      	bne.n	80007f0 <main+0x330>
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <main+0x3a4>)
 80007ea:	2208      	movs	r2, #8
 80007ec:	711a      	strb	r2, [r3, #4]
 80007ee:	e002      	b.n	80007f6 <main+0x336>
	  else pumahid.but0 = 0x10;
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <main+0x3a4>)
 80007f2:	2210      	movs	r2, #16
 80007f4:	711a      	strb	r2, [r3, #4]

	  if (BP_5 == 0) pumahid.but1 = 0x01;		// Appuie sur bouton 5
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <main+0x3d4>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d103      	bne.n	8000806 <main+0x346>
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <main+0x3a4>)
 8000800:	2201      	movs	r2, #1
 8000802:	715a      	strb	r2, [r3, #5]
 8000804:	e00a      	b.n	800081c <main+0x35c>
	  else if (BP_6 == 0) pumahid.but1 = 0x02;	// Appuie sur bouton 6
 8000806:	4b24      	ldr	r3, [pc, #144]	; (8000898 <main+0x3d8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d103      	bne.n	8000816 <main+0x356>
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <main+0x3a4>)
 8000810:	2202      	movs	r2, #2
 8000812:	715a      	strb	r2, [r3, #5]
 8000814:	e002      	b.n	800081c <main+0x35c>
	  else pumahid.but1 = 0x04;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <main+0x3a4>)
 8000818:	2204      	movs	r2, #4
 800081a:	715a      	strb	r2, [r3, #5]

// -------------------------------------------------------------------------------------------- //

	  if (BP_7 == 1) pumahid.but2 = 1;			// Appuie sur bouton 7
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <main+0x3dc>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d103      	bne.n	800082c <main+0x36c>
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <main+0x3a4>)
 8000826:	2201      	movs	r2, #1
 8000828:	719a      	strb	r2, [r3, #6]
 800082a:	e00a      	b.n	8000842 <main+0x382>
	  else if (BP_8 == 1) pumahid.but2 = 2;		// Appuie sur bouton 8
 800082c:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <main+0x3e0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d103      	bne.n	800083c <main+0x37c>
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <main+0x3a4>)
 8000836:	2202      	movs	r2, #2
 8000838:	719a      	strb	r2, [r3, #6]
 800083a:	e002      	b.n	8000842 <main+0x382>
	  else pumahid.but2 = 3;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <main+0x3a4>)
 800083e:	2203      	movs	r2, #3
 8000840:	719a      	strb	r2, [r3, #6]

	  if (BP_20 == 1) pumahid.but3 = 1;
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <main+0x3e4>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d103      	bne.n	8000852 <main+0x392>
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <main+0x3a4>)
 800084c:	2201      	movs	r2, #1
 800084e:	71da      	strb	r2, [r3, #7]
 8000850:	e043      	b.n	80008da <main+0x41a>
	  else if (BP_11 == 1) pumahid.but3 = 2;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <main+0x3e8>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d12c      	bne.n	80008b4 <main+0x3f4>
 800085a:	4b02      	ldr	r3, [pc, #8]	; (8000864 <main+0x3a4>)
 800085c:	2202      	movs	r2, #2
 800085e:	71da      	strb	r2, [r3, #7]
 8000860:	e03b      	b.n	80008da <main+0x41a>
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	20000240 	.word	0x20000240
 8000868:	50000400 	.word	0x50000400
 800086c:	200002d8 	.word	0x200002d8
 8000870:	2000022a 	.word	0x2000022a
 8000874:	20000239 	.word	0x20000239
 8000878:	2000023e 	.word	0x2000023e
 800087c:	2000022e 	.word	0x2000022e
 8000880:	2000023d 	.word	0x2000023d
 8000884:	20000252 	.word	0x20000252
 8000888:	2000022c 	.word	0x2000022c
 800088c:	2000022f 	.word	0x2000022f
 8000890:	2000023a 	.word	0x2000023a
 8000894:	20000238 	.word	0x20000238
 8000898:	20000228 	.word	0x20000228
 800089c:	20000229 	.word	0x20000229
 80008a0:	20000253 	.word	0x20000253
 80008a4:	20000230 	.word	0x20000230
 80008a8:	2000022b 	.word	0x2000022b
 80008ac:	2000023b 	.word	0x2000023b
 80008b0:	2000023c 	.word	0x2000023c
	  else if (BP_21 == 1) pumahid.but3 = 3;
 80008b4:	4b4c      	ldr	r3, [pc, #304]	; (80009e8 <main+0x528>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d103      	bne.n	80008c4 <main+0x404>
 80008bc:	4b4b      	ldr	r3, [pc, #300]	; (80009ec <main+0x52c>)
 80008be:	2203      	movs	r2, #3
 80008c0:	71da      	strb	r2, [r3, #7]
 80008c2:	e00a      	b.n	80008da <main+0x41a>
	  else if (BP_30 == 1) pumahid.but3 = 4;
 80008c4:	4b4a      	ldr	r3, [pc, #296]	; (80009f0 <main+0x530>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d103      	bne.n	80008d4 <main+0x414>
 80008cc:	4b47      	ldr	r3, [pc, #284]	; (80009ec <main+0x52c>)
 80008ce:	2204      	movs	r2, #4
 80008d0:	71da      	strb	r2, [r3, #7]
 80008d2:	e002      	b.n	80008da <main+0x41a>
	  else pumahid.but3 = 5;
 80008d4:	4b45      	ldr	r3, [pc, #276]	; (80009ec <main+0x52c>)
 80008d6:	2205      	movs	r2, #5
 80008d8:	71da      	strb	r2, [r3, #7]


	  ADC_VAL[0] -= 1633;					// AXE X
 80008da:	2454      	movs	r4, #84	; 0x54
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a44      	ldr	r2, [pc, #272]	; (80009f4 <main+0x534>)
 80008e2:	189a      	adds	r2, r3, r2
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	601a      	str	r2, [r3, #0]
	  if (ADC_VAL[0] < 0) ADC_VAL[0] = 0;
	  ADC_VAL[0] = (ADC_VAL[0]*255)/520;
 80008e8:	193b      	adds	r3, r7, r4
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	0013      	movs	r3, r2
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	1a9b      	subs	r3, r3, r2
 80008f2:	2282      	movs	r2, #130	; 0x82
 80008f4:	0091      	lsls	r1, r2, #2
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff fc18 	bl	800012c <__udivsi3>
 80008fc:	0003      	movs	r3, r0
 80008fe:	001a      	movs	r2, r3
 8000900:	193b      	adds	r3, r7, r4
 8000902:	601a      	str	r2, [r3, #0]

	  ADC_VAL[1] -= 1825;					// AXE Y
 8000904:	193b      	adds	r3, r7, r4
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	4a3b      	ldr	r2, [pc, #236]	; (80009f8 <main+0x538>)
 800090a:	189a      	adds	r2, r3, r2
 800090c:	193b      	adds	r3, r7, r4
 800090e:	605a      	str	r2, [r3, #4]
	  if (ADC_VAL[1] < 0) ADC_VAL[1] = 0;
	  ADC_VAL[1] = (ADC_VAL[1]*255)/490;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	0013      	movs	r3, r2
 8000916:	021b      	lsls	r3, r3, #8
 8000918:	1a9b      	subs	r3, r3, r2
 800091a:	22f5      	movs	r2, #245	; 0xf5
 800091c:	0051      	lsls	r1, r2, #1
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff fc04 	bl	800012c <__udivsi3>
 8000924:	0003      	movs	r3, r0
 8000926:	001a      	movs	r2, r3
 8000928:	193b      	adds	r3, r7, r4
 800092a:	605a      	str	r2, [r3, #4]

	  ADC_VAL[2] -= 1870;					// AXE Z
 800092c:	193b      	adds	r3, r7, r4
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	4a32      	ldr	r2, [pc, #200]	; (80009fc <main+0x53c>)
 8000932:	189a      	adds	r2, r3, r2
 8000934:	193b      	adds	r3, r7, r4
 8000936:	609a      	str	r2, [r3, #8]
	  if (ADC_VAL[2] < 0) ADC_VAL[2] = 0;
	  ADC_VAL[2] = (ADC_VAL[2]*255)/760;
 8000938:	193b      	adds	r3, r7, r4
 800093a:	689a      	ldr	r2, [r3, #8]
 800093c:	0013      	movs	r3, r2
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	1a9b      	subs	r3, r3, r2
 8000942:	22be      	movs	r2, #190	; 0xbe
 8000944:	0091      	lsls	r1, r2, #2
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fbf0 	bl	800012c <__udivsi3>
 800094c:	0003      	movs	r3, r0
 800094e:	001a      	movs	r2, r3
 8000950:	193b      	adds	r3, r7, r4
 8000952:	609a      	str	r2, [r3, #8]

	  ADC_VAL[3] -= 1680;					// PEDAL X ROTATION
 8000954:	193b      	adds	r3, r7, r4
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <main+0x540>)
 800095a:	189a      	adds	r2, r3, r2
 800095c:	193b      	adds	r3, r7, r4
 800095e:	60da      	str	r2, [r3, #12]
	  if (ADC_VAL[3] < 0) ADC_VAL[3] = 0;
	  ADC_VAL[3] = (ADC_VAL[3]*255)/120;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	0013      	movs	r3, r2
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	1a9b      	subs	r3, r3, r2
 800096a:	2178      	movs	r1, #120	; 0x78
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fbdd 	bl	800012c <__udivsi3>
 8000972:	0003      	movs	r3, r0
 8000974:	001a      	movs	r2, r3
 8000976:	193b      	adds	r3, r7, r4
 8000978:	60da      	str	r2, [r3, #12]

	  /*ADC_VAL[4] -= 2320;					// COLLECTIVE Y ROTATION
	  if (ADC_VAL[4] < 0) ADC_VAL[4] = 0;
	  ADC_VAL[4] = (ADC_VAL[4]*255)/108;*/

	  pumahid.x = ADC_VAL[0];
 800097a:	193b      	adds	r3, r7, r4
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <main+0x52c>)
 8000982:	811a      	strh	r2, [r3, #8]
	  pumahid.y = ADC_VAL[1];
 8000984:	193b      	adds	r3, r7, r4
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b18      	ldr	r3, [pc, #96]	; (80009ec <main+0x52c>)
 800098c:	815a      	strh	r2, [r3, #10]
	  pumahid.z = ADC_VAL[2];
 800098e:	193b      	adds	r3, r7, r4
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	b29a      	uxth	r2, r3
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <main+0x52c>)
 8000996:	819a      	strh	r2, [r3, #12]
	  pumahid.rx = ADC_VAL[3];
 8000998:	193b      	adds	r3, r7, r4
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	b29a      	uxth	r2, r3
 800099e:	4b13      	ldr	r3, [pc, #76]	; (80009ec <main+0x52c>)
 80009a0:	81da      	strh	r2, [r3, #14]
	  pumahid.ry = ADC_VAL[4];
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	691b      	ldr	r3, [r3, #16]
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b10      	ldr	r3, [pc, #64]	; (80009ec <main+0x52c>)
 80009aa:	821a      	strh	r2, [r3, #16]


	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));
 80009ac:	490f      	ldr	r1, [pc, #60]	; (80009ec <main+0x52c>)
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <main+0x544>)
 80009b0:	2212      	movs	r2, #18
 80009b2:	0018      	movs	r0, r3
 80009b4:	f007 f880 	bl	8007ab8 <USBD_CUSTOM_HID_SendReport>

	  HAL_Delay(10);
 80009b8:	200a      	movs	r0, #10
 80009ba:	f000 fbaf 	bl	800111c <HAL_Delay>
	  //AXE X = %hu | AXE Y = %hu | AXE Z = %hu |
	  sprintf(msg, " PEDAL X = %hu | COLLECTIVE = %hu \n", /*ADC_VAL[0], ADC_VAL[1], ADC_VAL[2], */ADC_VAL[3], ADC_VAL[4]);
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	4910      	ldr	r1, [pc, #64]	; (8000a08 <main+0x548>)
 80009c8:	1d38      	adds	r0, r7, #4
 80009ca:	f009 f8e9 	bl	8009ba0 <siprintf>
	  HAL_UART_Transmit(&huart2, &msg, strlen(msg), HAL_MAX_DELAY);
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff fb99 	bl	8000108 <strlen>
 80009d6:	0003      	movs	r3, r0
 80009d8:	b29a      	uxth	r2, r3
 80009da:	2301      	movs	r3, #1
 80009dc:	425b      	negs	r3, r3
 80009de:	1d39      	adds	r1, r7, #4
 80009e0:	480a      	ldr	r0, [pc, #40]	; (8000a0c <main+0x54c>)
 80009e2:	f004 f999 	bl	8004d18 <HAL_UART_Transmit>
	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80009e6:	e5de      	b.n	80005a6 <main+0xe6>
 80009e8:	2000023b 	.word	0x2000023b
 80009ec:	20000240 	.word	0x20000240
 80009f0:	2000023c 	.word	0x2000023c
 80009f4:	fffff99f 	.word	0xfffff99f
 80009f8:	fffff8df 	.word	0xfffff8df
 80009fc:	fffff8b2 	.word	0xfffff8b2
 8000a00:	fffff970 	.word	0xfffff970
 8000a04:	20000338 	.word	0x20000338
 8000a08:	0800a290 	.word	0x0800a290
 8000a0c:	20000254 	.word	0x20000254

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b09f      	sub	sp, #124	; 0x7c
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	2440      	movs	r4, #64	; 0x40
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2338      	movs	r3, #56	; 0x38
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f008 fffb 	bl	8009a1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a26:	232c      	movs	r3, #44	; 0x2c
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2314      	movs	r3, #20
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f008 fff3 	bl	8009a1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	0018      	movs	r0, r3
 8000a3a:	2328      	movs	r3, #40	; 0x28
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	2100      	movs	r1, #0
 8000a40:	f008 ffec 	bl	8009a1c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <SystemClock_Config+0xec>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a2d      	ldr	r2, [pc, #180]	; (8000b00 <SystemClock_Config+0xf0>)
 8000a4a:	401a      	ands	r2, r3
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	; (8000afc <SystemClock_Config+0xec>)
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	0109      	lsls	r1, r1, #4
 8000a52:	430a      	orrs	r2, r1
 8000a54:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000a56:	0021      	movs	r1, r4
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2222      	movs	r2, #34	; 0x22
 8000a5c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2201      	movs	r2, #1
 8000a62:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2210      	movs	r2, #16
 8000a68:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2202      	movs	r2, #2
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	2200      	movs	r2, #0
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	02d2      	lsls	r2, r2, #11
 8000a82:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	03d2      	lsls	r2, r2, #15
 8000a8a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f003 f982 	bl	8003d98 <HAL_RCC_OscConfig>
 8000a94:	1e03      	subs	r3, r0, #0
 8000a96:	d001      	beq.n	8000a9c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a98:	f000 f9ac 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9c:	212c      	movs	r1, #44	; 0x2c
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	220f      	movs	r2, #15
 8000aa2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2101      	movs	r1, #1
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f003 fd3d 	bl	8004540 <HAL_RCC_ClockConfig>
 8000ac6:	1e03      	subs	r3, r0, #0
 8000ac8:	d001      	beq.n	8000ace <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000aca:	f000 f993 	bl	8000df4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2242      	movs	r2, #66	; 0x42
 8000ad2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	04d2      	lsls	r2, r2, #19
 8000ae0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f003 ff4f 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000aee:	f000 f981 	bl	8000df4 <Error_Handler>
  }
}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b01f      	add	sp, #124	; 0x7c
 8000af8:	bd90      	pop	{r4, r7, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	40007000 	.word	0x40007000
 8000b00:	ffffe7ff 	.word	0xffffe7ff

08000b04 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	2308      	movs	r3, #8
 8000b10:	001a      	movs	r2, r3
 8000b12:	2100      	movs	r1, #0
 8000b14:	f008 ff82 	bl	8009a1c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000b18:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b1a:	4a45      	ldr	r2, [pc, #276]	; (8000c30 <MX_ADC_Init+0x12c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000b1e:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b24:	4b41      	ldr	r3, [pc, #260]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b26:	2280      	movs	r2, #128	; 0x80
 8000b28:	05d2      	lsls	r2, r2, #23
 8000b2a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000b2c:	4b3f      	ldr	r3, [pc, #252]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b32:	4b3e      	ldr	r3, [pc, #248]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000b38:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b3e:	4b3b      	ldr	r3, [pc, #236]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000b44:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b46:	2220      	movs	r2, #32
 8000b48:	2101      	movs	r1, #1
 8000b4a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000b4c:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b4e:	2221      	movs	r2, #33	; 0x21
 8000b50:	2100      	movs	r1, #0
 8000b52:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b54:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b5a:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b5c:	22c2      	movs	r2, #194	; 0xc2
 8000b5e:	32ff      	adds	r2, #255	; 0xff
 8000b60:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b64:	222c      	movs	r2, #44	; 0x2c
 8000b66:	2100      	movs	r1, #0
 8000b68:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b6a:	4b30      	ldr	r3, [pc, #192]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b6c:	2204      	movs	r2, #4
 8000b6e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000b76:	4b2d      	ldr	r3, [pc, #180]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000b7c:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000b82:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000b88:	4b28      	ldr	r3, [pc, #160]	; (8000c2c <MX_ADC_Init+0x128>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f000 faea 	bl	8001164 <HAL_ADC_Init>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000b94:	f000 f92e 	bl	8000df4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0152      	lsls	r2, r2, #5
 8000ba4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ba6:	003a      	movs	r2, r7
 8000ba8:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <MX_ADC_Init+0x128>)
 8000baa:	0011      	movs	r1, r2
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fd89 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000bb6:	f000 f91d 	bl	8000df4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bba:	003b      	movs	r3, r7
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <MX_ADC_Init+0x130>)
 8000bbe:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bc0:	003a      	movs	r2, r7
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_ADC_Init+0x128>)
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 fd7c 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000bcc:	1e03      	subs	r3, r0, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000bd0:	f000 f910 	bl	8000df4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bd4:	003b      	movs	r3, r7
 8000bd6:	4a18      	ldr	r2, [pc, #96]	; (8000c38 <MX_ADC_Init+0x134>)
 8000bd8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bda:	003a      	movs	r2, r7
 8000bdc:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_ADC_Init+0x128>)
 8000bde:	0011      	movs	r1, r2
 8000be0:	0018      	movs	r0, r3
 8000be2:	f000 fd6f 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000bea:	f000 f903 	bl	8000df4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bee:	003b      	movs	r3, r7
 8000bf0:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <MX_ADC_Init+0x138>)
 8000bf2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000bf4:	003a      	movs	r2, r7
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <MX_ADC_Init+0x128>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fd62 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000c04:	f000 f8f6 	bl	8000df4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c08:	003b      	movs	r3, r7
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <MX_ADC_Init+0x13c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c0e:	003a      	movs	r2, r7
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_ADC_Init+0x128>)
 8000c12:	0011      	movs	r1, r2
 8000c14:	0018      	movs	r0, r3
 8000c16:	f000 fd55 	bl	80016c4 <HAL_ADC_ConfigChannel>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000c1e:	f000 f8e9 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	200002d8 	.word	0x200002d8
 8000c30:	40012400 	.word	0x40012400
 8000c34:	04000002 	.word	0x04000002
 8000c38:	10000010 	.word	0x10000010
 8000c3c:	14000020 	.word	0x14000020
 8000c40:	18000040 	.word	0x18000040

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c4a:	4a15      	ldr	r2, [pc, #84]	; (8000ca0 <MX_USART2_UART_Init+0x5c>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c50:	22e1      	movs	r2, #225	; 0xe1
 8000c52:	0252      	lsls	r2, r2, #9
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c86:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <MX_USART2_UART_Init+0x58>)
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f003 fff1 	bl	8004c70 <HAL_UART_Init>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c92:	f000 f8af 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000254 	.word	0x20000254
 8000ca0:	40004400 	.word	0x40004400

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b590      	push	{r4, r7, lr}
 8000ca6:	b089      	sub	sp, #36	; 0x24
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	240c      	movs	r4, #12
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	0018      	movs	r0, r3
 8000cb0:	2314      	movs	r3, #20
 8000cb2:	001a      	movs	r2, r3
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f008 feb1 	bl	8009a1c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b4a      	ldr	r3, [pc, #296]	; (8000de4 <MX_GPIO_Init+0x140>)
 8000cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cbe:	4b49      	ldr	r3, [pc, #292]	; (8000de4 <MX_GPIO_Init+0x140>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cc6:	4b47      	ldr	r3, [pc, #284]	; (8000de4 <MX_GPIO_Init+0x140>)
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b44      	ldr	r3, [pc, #272]	; (8000de4 <MX_GPIO_Init+0x140>)
 8000cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd6:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <MX_GPIO_Init+0x140>)
 8000cd8:	2102      	movs	r1, #2
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <MX_GPIO_Init+0x140>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	00d9      	lsls	r1, r3, #3
 8000cee:	23a0      	movs	r3, #160	; 0xa0
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f001 f9d8 	bl	80020aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000cfa:	2380      	movs	r3, #128	; 0x80
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	483a      	ldr	r0, [pc, #232]	; (8000de8 <MX_GPIO_Init+0x144>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	0019      	movs	r1, r3
 8000d04:	f001 f9d1 	bl	80020aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BP30_Pin */
  GPIO_InitStruct.Pin = BP30_Pin;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2280      	movs	r2, #128	; 0x80
 8000d0c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2202      	movs	r2, #2
 8000d18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BP30_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f001 f826 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP21_Pin BP11_Pin BP20_Pin BP8_Pin
                           BP7_Pin BP5_Pin BP6_Pin CH_Pin */
  GPIO_InitStruct.Pin = BP21_Pin|BP11_Pin|BP20_Pin|BP8_Pin
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	4a30      	ldr	r2, [pc, #192]	; (8000dec <MX_GPIO_Init+0x148>)
 8000d2c:	601a      	str	r2, [r3, #0]
                          |BP7_Pin|BP5_Pin|BP6_Pin|CH_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2202      	movs	r2, #2
 8000d38:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	4a2a      	ldr	r2, [pc, #168]	; (8000de8 <MX_GPIO_Init+0x144>)
 8000d3e:	0019      	movs	r1, r3
 8000d40:	0010      	movs	r0, r2
 8000d42:	f001 f817 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : HAT_SOUTH_Pin HAT_NORTH_Pin HAT_EAST_Pin BP3_Pin
                           BP1_Pin */
  GPIO_InitStruct.Pin = HAT_SOUTH_Pin|HAT_NORTH_Pin|HAT_EAST_Pin|BP3_Pin
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <MX_GPIO_Init+0x14c>)
 8000d4a:	601a      	str	r2, [r3, #0]
                          |BP1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2201      	movs	r2, #1
 8000d56:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <MX_GPIO_Init+0x144>)
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0010      	movs	r0, r2
 8000d60:	f001 f808 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP4_Pin BP2_Pin HAT_WEST_Pin */
  GPIO_InitStruct.Pin = BP4_Pin|BP2_Pin|HAT_WEST_Pin;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2283      	movs	r2, #131	; 0x83
 8000d68:	0212      	lsls	r2, r2, #8
 8000d6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	2201      	movs	r2, #1
 8000d76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	193a      	adds	r2, r7, r4
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fff7 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d86:	0021      	movs	r1, r4
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2280      	movs	r2, #128	; 0x80
 8000d8c:	00d2      	lsls	r2, r2, #3
 8000d8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	000c      	movs	r4, r1
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	2201      	movs	r2, #1
 8000d96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	193b      	adds	r3, r7, r4
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	2200      	movs	r2, #0
 8000da2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	193a      	adds	r2, r7, r4
 8000da6:	23a0      	movs	r3, #160	; 0xa0
 8000da8:	05db      	lsls	r3, r3, #23
 8000daa:	0011      	movs	r1, r2
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 ffe1 	bl	8001d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	0092      	lsls	r2, r2, #2
 8000dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	4a05      	ldr	r2, [pc, #20]	; (8000de8 <MX_GPIO_Init+0x144>)
 8000dd2:	0019      	movs	r1, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f000 ffcd 	bl	8001d74 <HAL_GPIO_Init>

}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b009      	add	sp, #36	; 0x24
 8000de0:	bd90      	pop	{r4, r7, pc}
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	40021000 	.word	0x40021000
 8000de8:	50000400 	.word	0x50000400
 8000dec:	00006d07 	.word	0x00006d07
 8000df0:	00008078 	.word	0x00008078

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
}
 8000dfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <Error_Handler+0x8>
	...

08000e00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <HAL_MspInit+0x24>)
 8000e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <HAL_MspInit+0x24>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_MspInit+0x24>)
 8000e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_MspInit+0x24>)
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	0549      	lsls	r1, r1, #21
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e28:	b590      	push	{r4, r7, lr}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	240c      	movs	r4, #12
 8000e32:	193b      	adds	r3, r7, r4
 8000e34:	0018      	movs	r0, r3
 8000e36:	2314      	movs	r3, #20
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	f008 fdee 	bl	8009a1c <memset>
  if(hadc->Instance==ADC1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a14      	ldr	r2, [pc, #80]	; (8000e98 <HAL_ADC_MspInit+0x70>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d122      	bne.n	8000e90 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e4a:	4b14      	ldr	r3, [pc, #80]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e4e:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e50:	2180      	movs	r1, #128	; 0x80
 8000e52:	0089      	lsls	r1, r1, #2
 8000e54:	430a      	orrs	r2, r1
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	430a      	orrs	r2, r1
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e64:	4b0d      	ldr	r3, [pc, #52]	; (8000e9c <HAL_ADC_MspInit+0x74>)
 8000e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = AXE_X_Pin|AXE_Y_Pin|AXE_Z_Pin|COLLECTIVE_Y_Pin
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	2273      	movs	r2, #115	; 0x73
 8000e74:	601a      	str	r2, [r3, #0]
                          |PEDALE_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e76:	193b      	adds	r3, r7, r4
 8000e78:	2203      	movs	r2, #3
 8000e7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	193b      	adds	r3, r7, r4
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	193a      	adds	r2, r7, r4
 8000e84:	23a0      	movs	r3, #160	; 0xa0
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	0011      	movs	r1, r2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 ff72 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e90:	46c0      	nop			; (mov r8, r8)
 8000e92:	46bd      	mov	sp, r7
 8000e94:	b009      	add	sp, #36	; 0x24
 8000e96:	bd90      	pop	{r4, r7, pc}
 8000e98:	40012400 	.word	0x40012400
 8000e9c:	40021000 	.word	0x40021000

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	240c      	movs	r4, #12
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	0018      	movs	r0, r3
 8000eae:	2314      	movs	r3, #20
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f008 fdb2 	bl	8009a1c <memset>
  if(huart->Instance==USART2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a18      	ldr	r2, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0x80>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d129      	bne.n	8000f16 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	0289      	lsls	r1, r1, #10
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <HAL_UART_MspInit+0x84>)
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ee8:	0021      	movs	r1, r4
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	220c      	movs	r2, #12
 8000eee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2203      	movs	r2, #3
 8000f00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2204      	movs	r2, #4
 8000f06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	187a      	adds	r2, r7, r1
 8000f0a:	23a0      	movs	r3, #160	; 0xa0
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 ff2f 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b009      	add	sp, #36	; 0x24
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f4c:	f000 f8ca 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <USB_IRQHandler+0x14>)
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 f9f6 	bl	8002350 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	200007fc 	.word	0x200007fc

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	18d3      	adds	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f008 fcfe 	bl	80099a0 <__errno>
 8000fa4:	0003      	movs	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	2301      	movs	r3, #1
 8000fac:	425b      	negs	r3, r3
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	18d2      	adds	r2, r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b006      	add	sp, #24
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20005000 	.word	0x20005000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	20000218 	.word	0x20000218
 8000fd8:	20000b00 	.word	0x20000b00

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
	...

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000fe8:	480d      	ldr	r0, [pc, #52]	; (8001020 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000fea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480d      	ldr	r0, [pc, #52]	; (8001024 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fee:	490e      	ldr	r1, [pc, #56]	; (8001028 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <LoopForever+0xe>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0b      	ldr	r2, [pc, #44]	; (8001030 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001004:	4c0b      	ldr	r4, [pc, #44]	; (8001034 <LoopForever+0x16>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001012:	f7ff ffe3 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001016:	f008 fcc9 	bl	80099ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101a:	f7ff fa51 	bl	80004c0 <main>

0800101e <LoopForever>:

LoopForever:
    b LoopForever
 800101e:	e7fe      	b.n	800101e <LoopForever>
   ldr   r0, =_estack
 8001020:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001028:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800102c:	0800a44c 	.word	0x0800a44c
  ldr r2, =_sbss
 8001030:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001034:	20000b00 	.word	0x20000b00

08001038 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001038:	e7fe      	b.n	8001038 <ADC1_COMP_IRQHandler>
	...

0800103c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001048:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <HAL_Init+0x3c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Init+0x3c>)
 800104e:	2140      	movs	r1, #64	; 0x40
 8001050:	430a      	orrs	r2, r1
 8001052:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001054:	2003      	movs	r0, #3
 8001056:	f000 f811 	bl	800107c <HAL_InitTick>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d003      	beq.n	8001066 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	e001      	b.n	800106a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001066:	f7ff fecb 	bl	8000e00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781b      	ldrb	r3, [r3, #0]
}
 800106e:	0018      	movs	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40022000 	.word	0x40022000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_InitTick+0x5c>)
 8001086:	681c      	ldr	r4, [r3, #0]
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	0019      	movs	r1, r3
 800108e:	23fa      	movs	r3, #250	; 0xfa
 8001090:	0098      	lsls	r0, r3, #2
 8001092:	f7ff f84b 	bl	800012c <__udivsi3>
 8001096:	0003      	movs	r3, r0
 8001098:	0019      	movs	r1, r3
 800109a:	0020      	movs	r0, r4
 800109c:	f7ff f846 	bl	800012c <__udivsi3>
 80010a0:	0003      	movs	r3, r0
 80010a2:	0018      	movs	r0, r3
 80010a4:	f000 fe59 	bl	8001d5a <HAL_SYSTICK_Config>
 80010a8:	1e03      	subs	r3, r0, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e00f      	b.n	80010d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d80b      	bhi.n	80010ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	2301      	movs	r3, #1
 80010ba:	425b      	negs	r3, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fe26 	bl	8001d10 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_InitTick+0x64>)
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	0018      	movs	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	b003      	add	sp, #12
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x1c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	001a      	movs	r2, r3
 80010ee:	4b05      	ldr	r3, [pc, #20]	; (8001104 <HAL_IncTick+0x20>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	18d2      	adds	r2, r2, r3
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_IncTick+0x20>)
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	46c0      	nop			; (mov r8, r8)
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	20000008 	.word	0x20000008
 8001104:	20000334 	.word	0x20000334

08001108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;
 800110c:	4b02      	ldr	r3, [pc, #8]	; (8001118 <HAL_GetTick+0x10>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	20000334 	.word	0x20000334

0800111c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff fff0 	bl	8001108 <HAL_GetTick>
 8001128:	0003      	movs	r3, r0
 800112a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	d005      	beq.n	8001142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001136:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_Delay+0x44>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	001a      	movs	r2, r3
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	189b      	adds	r3, r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	f7ff ffe0 	bl	8001108 <HAL_GetTick>
 8001148:	0002      	movs	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	429a      	cmp	r2, r3
 8001152:	d8f7      	bhi.n	8001144 <HAL_Delay+0x28>
  {
  }
}
 8001154:	46c0      	nop			; (mov r8, r8)
 8001156:	46c0      	nop			; (mov r8, r8)
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e159      	b.n	800142a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800117a:	2b00      	cmp	r3, #0
 800117c:	d10a      	bne.n	8001194 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2250      	movs	r2, #80	; 0x50
 8001188:	2100      	movs	r1, #0
 800118a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	0018      	movs	r0, r3
 8001190:	f7ff fe4a 	bl	8000e28 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001198:	2210      	movs	r2, #16
 800119a:	4013      	ands	r3, r2
 800119c:	2b10      	cmp	r3, #16
 800119e:	d005      	beq.n	80011ac <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011aa:	d00b      	beq.n	80011c4 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b0:	2210      	movs	r2, #16
 80011b2:	431a      	orrs	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2250      	movs	r2, #80	; 0x50
 80011bc:	2100      	movs	r1, #0
 80011be:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e132      	b.n	800142a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c8:	4a9a      	ldr	r2, [pc, #616]	; (8001434 <HAL_ADC_Init+0x2d0>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	2202      	movs	r2, #2
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	2203      	movs	r2, #3
 80011dc:	4013      	ands	r3, r2
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d108      	bne.n	80011f4 <HAL_ADC_Init+0x90>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2201      	movs	r2, #1
 80011ea:	4013      	ands	r3, r2
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d101      	bne.n	80011f4 <HAL_ADC_Init+0x90>
 80011f0:	2301      	movs	r3, #1
 80011f2:	e000      	b.n	80011f6 <HAL_ADC_Init+0x92>
 80011f4:	2300      	movs	r3, #0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d149      	bne.n	800128e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	23c0      	movs	r3, #192	; 0xc0
 8001200:	061b      	lsls	r3, r3, #24
 8001202:	429a      	cmp	r2, r3
 8001204:	d00b      	beq.n	800121e <HAL_ADC_Init+0xba>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	05db      	lsls	r3, r3, #23
 800120e:	429a      	cmp	r2, r3
 8001210:	d005      	beq.n	800121e <HAL_ADC_Init+0xba>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	061b      	lsls	r3, r3, #24
 800121a:	429a      	cmp	r2, r3
 800121c:	d111      	bne.n	8001242 <HAL_ADC_Init+0xde>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	691a      	ldr	r2, [r3, #16]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	0892      	lsrs	r2, r2, #2
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6919      	ldr	r1, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	611a      	str	r2, [r3, #16]
 8001240:	e014      	b.n	800126c <HAL_ADC_Init+0x108>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0092      	lsls	r2, r2, #2
 800124e:	0892      	lsrs	r2, r2, #2
 8001250:	611a      	str	r2, [r3, #16]
 8001252:	4b79      	ldr	r3, [pc, #484]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	4b78      	ldr	r3, [pc, #480]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001258:	4978      	ldr	r1, [pc, #480]	; (800143c <HAL_ADC_Init+0x2d8>)
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	4b76      	ldr	r3, [pc, #472]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001260:	6819      	ldr	r1, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	4b74      	ldr	r3, [pc, #464]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001268:	430a      	orrs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2118      	movs	r1, #24
 8001278:	438a      	bics	r2, r1
 800127a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68d9      	ldr	r1, [r3, #12]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800128e:	4b6a      	ldr	r3, [pc, #424]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	4b69      	ldr	r3, [pc, #420]	; (8001438 <HAL_ADC_Init+0x2d4>)
 8001294:	496a      	ldr	r1, [pc, #424]	; (8001440 <HAL_ADC_Init+0x2dc>)
 8001296:	400a      	ands	r2, r1
 8001298:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800129a:	4b67      	ldr	r3, [pc, #412]	; (8001438 <HAL_ADC_Init+0x2d4>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012a2:	065a      	lsls	r2, r3, #25
 80012a4:	4b64      	ldr	r3, [pc, #400]	; (8001438 <HAL_ADC_Init+0x2d4>)
 80012a6:	430a      	orrs	r2, r1
 80012a8:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	2380      	movs	r3, #128	; 0x80
 80012b2:	055b      	lsls	r3, r3, #21
 80012b4:	4013      	ands	r3, r2
 80012b6:	d108      	bne.n	80012ca <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2180      	movs	r1, #128	; 0x80
 80012c4:	0549      	lsls	r1, r1, #21
 80012c6:	430a      	orrs	r2, r1
 80012c8:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	495b      	ldr	r1, [pc, #364]	; (8001444 <HAL_ADC_Init+0x2e0>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_Init+0x18c>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e000      	b.n	80012f2 <HAL_ADC_Init+0x18e>
 80012f0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80012f2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2020      	movs	r0, #32
 80012f8:	5c1b      	ldrb	r3, [r3, r0]
 80012fa:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80012fc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	202c      	movs	r0, #44	; 0x2c
 8001302:	5c1b      	ldrb	r3, [r3, r0]
 8001304:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001306:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800130c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001314:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800131c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132a:	23c2      	movs	r3, #194	; 0xc2
 800132c:	33ff      	adds	r3, #255	; 0xff
 800132e:	429a      	cmp	r2, r3
 8001330:	d00b      	beq.n	800134a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2221      	movs	r2, #33	; 0x21
 800134e:	5c9b      	ldrb	r3, [r3, r2]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d11a      	bne.n	800138a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2220      	movs	r2, #32
 8001358:	5c9b      	ldrb	r3, [r3, r2]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d109      	bne.n	8001372 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0249      	lsls	r1, r1, #9
 800136c:	430a      	orrs	r2, r1
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e00b      	b.n	800138a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001376:	2220      	movs	r2, #32
 8001378:	431a      	orrs	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	2201      	movs	r2, #1
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800138e:	2b01      	cmp	r3, #1
 8001390:	d11f      	bne.n	80013d2 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	492a      	ldr	r1, [pc, #168]	; (8001448 <HAL_ADC_Init+0x2e4>)
 800139e:	400a      	ands	r2, r1
 80013a0:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6919      	ldr	r1, [r3, #16]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013b0:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80013b6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	430a      	orrs	r2, r1
 80013be:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691a      	ldr	r2, [r3, #16]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	e00e      	b.n	80013f0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	691b      	ldr	r3, [r3, #16]
 80013d8:	2201      	movs	r2, #1
 80013da:	4013      	ands	r3, r2
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d107      	bne.n	80013f0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2101      	movs	r1, #1
 80013ec:	438a      	bics	r2, r1
 80013ee:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695a      	ldr	r2, [r3, #20]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2107      	movs	r1, #7
 80013fc:	438a      	bics	r2, r1
 80013fe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6959      	ldr	r1, [r3, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800141c:	2203      	movs	r2, #3
 800141e:	4393      	bics	r3, r2
 8001420:	2201      	movs	r2, #1
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	0018      	movs	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	fffffefd 	.word	0xfffffefd
 8001438:	40012708 	.word	0x40012708
 800143c:	ffc3ffff 	.word	0xffc3ffff
 8001440:	fdffffff 	.word	0xfdffffff
 8001444:	fffe0219 	.word	0xfffe0219
 8001448:	fffffc03 	.word	0xfffffc03

0800144c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001454:	230f      	movs	r3, #15
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2204      	movs	r2, #4
 8001464:	4013      	ands	r3, r2
 8001466:	d138      	bne.n	80014da <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2250      	movs	r2, #80	; 0x50
 800146c:	5c9b      	ldrb	r3, [r3, r2]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d101      	bne.n	8001476 <HAL_ADC_Start+0x2a>
 8001472:	2302      	movs	r3, #2
 8001474:	e038      	b.n	80014e8 <HAL_ADC_Start+0x9c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2250      	movs	r2, #80	; 0x50
 800147a:	2101      	movs	r1, #1
 800147c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d007      	beq.n	8001496 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001486:	230f      	movs	r3, #15
 8001488:	18fc      	adds	r4, r7, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	0018      	movs	r0, r3
 800148e:	f000 f9b9 	bl	8001804 <ADC_Enable>
 8001492:	0003      	movs	r3, r0
 8001494:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001496:	230f      	movs	r3, #15
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d120      	bne.n	80014e2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	4a12      	ldr	r2, [pc, #72]	; (80014f0 <HAL_ADC_Start+0xa4>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0052      	lsls	r2, r2, #1
 80014ac:	431a      	orrs	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2250      	movs	r2, #80	; 0x50
 80014bc:	2100      	movs	r1, #0
 80014be:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	221c      	movs	r2, #28
 80014c6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2104      	movs	r1, #4
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	e003      	b.n	80014e2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014da:	230f      	movs	r3, #15
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	2202      	movs	r2, #2
 80014e0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014e2:	230f      	movs	r3, #15
 80014e4:	18fb      	adds	r3, r7, r3
 80014e6:	781b      	ldrb	r3, [r3, #0]
}
 80014e8:	0018      	movs	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b005      	add	sp, #20
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	fffff0fe 	.word	0xfffff0fe

080014f4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014f4:	b5b0      	push	{r4, r5, r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014fc:	230f      	movs	r3, #15
 80014fe:	18fb      	adds	r3, r7, r3
 8001500:	2200      	movs	r2, #0
 8001502:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2250      	movs	r2, #80	; 0x50
 8001508:	5c9b      	ldrb	r3, [r3, r2]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_ADC_Stop+0x1e>
 800150e:	2302      	movs	r3, #2
 8001510:	e029      	b.n	8001566 <HAL_ADC_Stop+0x72>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2250      	movs	r2, #80	; 0x50
 8001516:	2101      	movs	r1, #1
 8001518:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800151a:	250f      	movs	r5, #15
 800151c:	197c      	adds	r4, r7, r5
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	0018      	movs	r0, r3
 8001522:	f000 fa3e 	bl	80019a2 <ADC_ConversionStop>
 8001526:	0003      	movs	r3, r0
 8001528:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800152a:	197b      	adds	r3, r7, r5
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d112      	bne.n	8001558 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001532:	197c      	adds	r4, r7, r5
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	0018      	movs	r0, r3
 8001538:	f000 f9cc 	bl	80018d4 <ADC_Disable>
 800153c:	0003      	movs	r3, r0
 800153e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001540:	197b      	adds	r3, r7, r5
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d107      	bne.n	8001558 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800154c:	4a08      	ldr	r2, [pc, #32]	; (8001570 <HAL_ADC_Stop+0x7c>)
 800154e:	4013      	ands	r3, r2
 8001550:	2201      	movs	r2, #1
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2250      	movs	r2, #80	; 0x50
 800155c:	2100      	movs	r1, #0
 800155e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	781b      	ldrb	r3, [r3, #0]
}
 8001566:	0018      	movs	r0, r3
 8001568:	46bd      	mov	sp, r7
 800156a:	b004      	add	sp, #16
 800156c:	bdb0      	pop	{r4, r5, r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	fffffefe 	.word	0xfffffefe

08001574 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	2b08      	cmp	r3, #8
 800158c:	d102      	bne.n	8001594 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800158e:	2308      	movs	r3, #8
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	e014      	b.n	80015be <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2201      	movs	r2, #1
 800159c:	4013      	ands	r3, r2
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d10b      	bne.n	80015ba <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a6:	2220      	movs	r2, #32
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2250      	movs	r2, #80	; 0x50
 80015b2:	2100      	movs	r1, #0
 80015b4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e072      	b.n	80016a0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80015ba:	230c      	movs	r3, #12
 80015bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80015be:	f7ff fda3 	bl	8001108 <HAL_GetTick>
 80015c2:	0003      	movs	r3, r0
 80015c4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015c6:	e01f      	b.n	8001608 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	3301      	adds	r3, #1
 80015cc:	d01c      	beq.n	8001608 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_ADC_PollForConversion+0x70>
 80015d4:	f7ff fd98 	bl	8001108 <HAL_GetTick>
 80015d8:	0002      	movs	r2, r0
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d211      	bcs.n	8001608 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	d10b      	bne.n	8001608 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	2204      	movs	r2, #4
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2250      	movs	r2, #80	; 0x50
 8001600:	2100      	movs	r1, #0
 8001602:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e04b      	b.n	80016a0 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	d0d9      	beq.n	80015c8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	2280      	movs	r2, #128	; 0x80
 800161a:	0092      	lsls	r2, r2, #2
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	23c0      	movs	r3, #192	; 0xc0
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	4013      	ands	r3, r2
 800162e:	d12e      	bne.n	800168e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2220      	movs	r2, #32
 8001634:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001636:	2b00      	cmp	r3, #0
 8001638:	d129      	bne.n	800168e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2208      	movs	r2, #8
 8001642:	4013      	ands	r3, r2
 8001644:	2b08      	cmp	r3, #8
 8001646:	d122      	bne.n	800168e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2204      	movs	r2, #4
 8001650:	4013      	ands	r3, r2
 8001652:	d110      	bne.n	8001676 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	210c      	movs	r1, #12
 8001660:	438a      	bics	r2, r1
 8001662:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001668:	4a0f      	ldr	r2, [pc, #60]	; (80016a8 <HAL_ADC_PollForConversion+0x134>)
 800166a:	4013      	ands	r3, r2
 800166c:	2201      	movs	r2, #1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
 8001674:	e00b      	b.n	800168e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167a:	2220      	movs	r2, #32
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001686:	2201      	movs	r2, #1
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d103      	bne.n	800169e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	220c      	movs	r2, #12
 800169c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	0018      	movs	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	b004      	add	sp, #16
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	fffffefe 	.word	0xfffffefe

080016ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80016ba:	0018      	movs	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2250      	movs	r2, #80	; 0x50
 80016d2:	5c9b      	ldrb	r3, [r3, r2]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_ADC_ConfigChannel+0x18>
 80016d8:	2302      	movs	r3, #2
 80016da:	e085      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x124>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2250      	movs	r2, #80	; 0x50
 80016e0:	2101      	movs	r1, #1
 80016e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2204      	movs	r2, #4
 80016ec:	4013      	ands	r3, r2
 80016ee:	d00b      	beq.n	8001708 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	2220      	movs	r2, #32
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2250      	movs	r2, #80	; 0x50
 8001700:	2100      	movs	r1, #0
 8001702:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e06f      	b.n	80017e8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a38      	ldr	r2, [pc, #224]	; (80017f0 <HAL_ADC_ConfigChannel+0x12c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d035      	beq.n	800177e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	035b      	lsls	r3, r3, #13
 800171e:	0b5a      	lsrs	r2, r3, #13
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	02db      	lsls	r3, r3, #11
 8001730:	4013      	ands	r3, r2
 8001732:	d009      	beq.n	8001748 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001734:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 800173a:	2180      	movs	r1, #128	; 0x80
 800173c:	0409      	lsls	r1, r1, #16
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001742:	200a      	movs	r0, #10
 8001744:	f000 f97a 	bl	8001a3c <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	029b      	lsls	r3, r3, #10
 8001750:	4013      	ands	r3, r2
 8001752:	d006      	beq.n	8001762 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 800175a:	2180      	movs	r1, #128	; 0x80
 800175c:	03c9      	lsls	r1, r1, #15
 800175e:	430a      	orrs	r2, r1
 8001760:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	025b      	lsls	r3, r3, #9
 800176a:	4013      	ands	r3, r2
 800176c:	d037      	beq.n	80017de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 8001774:	2180      	movs	r1, #128	; 0x80
 8001776:	0449      	lsls	r1, r1, #17
 8001778:	430a      	orrs	r2, r1
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e02f      	b.n	80017de <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	035b      	lsls	r3, r3, #13
 800178a:	0b5b      	lsrs	r3, r3, #13
 800178c:	43d9      	mvns	r1, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	400a      	ands	r2, r1
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	02db      	lsls	r3, r3, #11
 800179e:	4013      	ands	r3, r2
 80017a0:	d005      	beq.n	80017ae <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 80017a8:	4913      	ldr	r1, [pc, #76]	; (80017f8 <HAL_ADC_ConfigChannel+0x134>)
 80017aa:	400a      	ands	r2, r1
 80017ac:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	029b      	lsls	r3, r3, #10
 80017b6:	4013      	ands	r3, r2
 80017b8:	d005      	beq.n	80017c6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80017ba:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_ADC_ConfigChannel+0x138>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	025b      	lsls	r3, r3, #9
 80017ce:	4013      	ands	r3, r2
 80017d0:	d005      	beq.n	80017de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_ADC_ConfigChannel+0x130>)
 80017d8:	4909      	ldr	r1, [pc, #36]	; (8001800 <HAL_ADC_ConfigChannel+0x13c>)
 80017da:	400a      	ands	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2250      	movs	r2, #80	; 0x50
 80017e2:	2100      	movs	r1, #0
 80017e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	00001001 	.word	0x00001001
 80017f4:	40012708 	.word	0x40012708
 80017f8:	ff7fffff 	.word	0xff7fffff
 80017fc:	ffbfffff 	.word	0xffbfffff
 8001800:	feffffff 	.word	0xfeffffff

08001804 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2203      	movs	r2, #3
 8001818:	4013      	ands	r3, r2
 800181a:	2b01      	cmp	r3, #1
 800181c:	d108      	bne.n	8001830 <ADC_Enable+0x2c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d101      	bne.n	8001830 <ADC_Enable+0x2c>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <ADC_Enable+0x2e>
 8001830:	2300      	movs	r3, #0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d146      	bne.n	80018c4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <ADC_Enable+0xcc>)
 800183e:	4013      	ands	r3, r2
 8001840:	d00d      	beq.n	800185e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001846:	2210      	movs	r2, #16
 8001848:	431a      	orrs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	2201      	movs	r2, #1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e033      	b.n	80018c6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2101      	movs	r1, #1
 800186a:	430a      	orrs	r2, r1
 800186c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800186e:	2001      	movs	r0, #1
 8001870:	f000 f8e4 	bl	8001a3c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001874:	f7ff fc48 	bl	8001108 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800187c:	e01b      	b.n	80018b6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800187e:	f7ff fc43 	bl	8001108 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b0a      	cmp	r3, #10
 800188a:	d914      	bls.n	80018b6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2201      	movs	r2, #1
 8001894:	4013      	ands	r3, r2
 8001896:	2b01      	cmp	r3, #1
 8001898:	d00d      	beq.n	80018b6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	2210      	movs	r2, #16
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	2201      	movs	r2, #1
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e007      	b.n	80018c6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d1dc      	bne.n	800187e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	0018      	movs	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	b004      	add	sp, #16
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	46c0      	nop			; (mov r8, r8)
 80018d0:	80000017 	.word	0x80000017

080018d4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2203      	movs	r2, #3
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d108      	bne.n	8001900 <ADC_Disable+0x2c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2201      	movs	r2, #1
 80018f6:	4013      	ands	r3, r2
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <ADC_Disable+0x2c>
 80018fc:	2301      	movs	r3, #1
 80018fe:	e000      	b.n	8001902 <ADC_Disable+0x2e>
 8001900:	2300      	movs	r3, #0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d048      	beq.n	8001998 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2205      	movs	r2, #5
 800190e:	4013      	ands	r3, r2
 8001910:	2b01      	cmp	r3, #1
 8001912:	d110      	bne.n	8001936 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2102      	movs	r1, #2
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2203      	movs	r2, #3
 800192a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800192c:	f7ff fbec 	bl	8001108 <HAL_GetTick>
 8001930:	0003      	movs	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001934:	e029      	b.n	800198a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193a:	2210      	movs	r2, #16
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	2201      	movs	r2, #1
 8001948:	431a      	orrs	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e023      	b.n	800199a <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001952:	f7ff fbd9 	bl	8001108 <HAL_GetTick>
 8001956:	0002      	movs	r2, r0
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b0a      	cmp	r3, #10
 800195e:	d914      	bls.n	800198a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	2201      	movs	r2, #1
 8001968:	4013      	ands	r3, r2
 800196a:	2b01      	cmp	r3, #1
 800196c:	d10d      	bne.n	800198a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	2210      	movs	r2, #16
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197e:	2201      	movs	r2, #1
 8001980:	431a      	orrs	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e007      	b.n	800199a <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	2201      	movs	r2, #1
 8001992:	4013      	ands	r3, r2
 8001994:	2b01      	cmp	r3, #1
 8001996:	d0dc      	beq.n	8001952 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	0018      	movs	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	b004      	add	sp, #16
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	2204      	movs	r2, #4
 80019b6:	4013      	ands	r3, r2
 80019b8:	d03a      	beq.n	8001a30 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2204      	movs	r2, #4
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b04      	cmp	r3, #4
 80019c6:	d10d      	bne.n	80019e4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80019d2:	d107      	bne.n	80019e4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689a      	ldr	r2, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2110      	movs	r1, #16
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fb90 	bl	8001108 <HAL_GetTick>
 80019e8:	0003      	movs	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019ec:	e01a      	b.n	8001a24 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80019ee:	f7ff fb8b 	bl	8001108 <HAL_GetTick>
 80019f2:	0002      	movs	r2, r0
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b0a      	cmp	r3, #10
 80019fa:	d913      	bls.n	8001a24 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2204      	movs	r2, #4
 8001a04:	4013      	ands	r3, r2
 8001a06:	d00d      	beq.n	8001a24 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a0c:	2210      	movs	r2, #16
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	2201      	movs	r2, #1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e006      	b.n	8001a32 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2204      	movs	r2, #4
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d1de      	bne.n	80019ee <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <ADC_DelayMicroSecond+0x38>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	490b      	ldr	r1, [pc, #44]	; (8001a78 <ADC_DelayMicroSecond+0x3c>)
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f7fe fb6e 	bl	800012c <__udivsi3>
 8001a50:	0003      	movs	r3, r0
 8001a52:	001a      	movs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4353      	muls	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001a5a:	e002      	b.n	8001a62 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001a68:	46c0      	nop			; (mov r8, r8)
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	b004      	add	sp, #16
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	46c0      	nop			; (mov r8, r8)
 8001a74:	20000000 	.word	0x20000000
 8001a78:	000f4240 	.word	0x000f4240

08001a7c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a86:	2317      	movs	r3, #23
 8001a88:	18fb      	adds	r3, r7, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2250      	movs	r2, #80	; 0x50
 8001a9a:	5c9b      	ldrb	r3, [r3, r2]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d101      	bne.n	8001aa4 <HAL_ADCEx_Calibration_Start+0x28>
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	e083      	b.n	8001bac <HAL_ADCEx_Calibration_Start+0x130>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2250      	movs	r2, #80	; 0x50
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	2203      	movs	r2, #3
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d108      	bne.n	8001acc <HAL_ADCEx_Calibration_Start+0x50>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_ADCEx_Calibration_Start+0x50>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_ADCEx_Calibration_Start+0x52>
 8001acc:	2300      	movs	r3, #0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d15b      	bne.n	8001b8a <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	4a37      	ldr	r2, [pc, #220]	; (8001bb4 <HAL_ADCEx_Calibration_Start+0x138>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2202      	movs	r2, #2
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68da      	ldr	r2, [r3, #12]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2103      	movs	r1, #3
 8001afa:	438a      	bics	r2, r1
 8001afc:	60da      	str	r2, [r3, #12]
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	0609      	lsls	r1, r1, #24
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001b10:	f7ff fafa 	bl	8001108 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]
    
    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b18:	e01d      	b.n	8001b56 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001b1a:	f7ff faf5 	bl	8001108 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b0a      	cmp	r3, #10
 8001b26:	d916      	bls.n	8001b56 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0fdb      	lsrs	r3, r3, #31
 8001b30:	07da      	lsls	r2, r3, #31
 8001b32:	2380      	movs	r3, #128	; 0x80
 8001b34:	061b      	lsls	r3, r3, #24
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d10d      	bne.n	8001b56 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	2212      	movs	r2, #18
 8001b40:	4393      	bics	r3, r2
 8001b42:	2210      	movs	r2, #16
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2250      	movs	r2, #80	; 0x50
 8001b4e:	2100      	movs	r1, #0
 8001b50:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e02a      	b.n	8001bac <HAL_ADCEx_Calibration_Start+0x130>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	0fdb      	lsrs	r3, r3, #31
 8001b5e:	07da      	lsls	r2, r3, #31
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	061b      	lsls	r3, r3, #24
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d0d8      	beq.n	8001b1a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68d9      	ldr	r1, [r3, #12]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	430a      	orrs	r2, r1
 8001b76:	60da      	str	r2, [r3, #12]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	4393      	bics	r3, r2
 8001b80:	2201      	movs	r2, #1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	655a      	str	r2, [r3, #84]	; 0x54
 8001b88:	e009      	b.n	8001b9e <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b8e:	2220      	movs	r2, #32
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	655a      	str	r2, [r3, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
 8001b96:	2317      	movs	r3, #23
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2250      	movs	r2, #80	; 0x50
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001ba6:	2317      	movs	r3, #23
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	781b      	ldrb	r3, [r3, #0]
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b006      	add	sp, #24
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	fffffefd 	.word	0xfffffefd

08001bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	0002      	movs	r2, r0
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	1dfb      	adds	r3, r7, #7
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8001bca:	d809      	bhi.n	8001be0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bcc:	1dfb      	adds	r3, r7, #7
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	001a      	movs	r2, r3
 8001bd2:	231f      	movs	r3, #31
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <__NVIC_EnableIRQ+0x30>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	4091      	lsls	r1, r2
 8001bdc:	000a      	movs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]
  }
}
 8001be0:	46c0      	nop			; (mov r8, r8)
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b002      	add	sp, #8
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	1dfb      	adds	r3, r7, #7
 8001bf8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	1dfb      	adds	r3, r7, #7
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8001c00:	d828      	bhi.n	8001c54 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c02:	4a2f      	ldr	r2, [pc, #188]	; (8001cc0 <__NVIC_SetPriority+0xd4>)
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	b25b      	sxtb	r3, r3
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	33c0      	adds	r3, #192	; 0xc0
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	589b      	ldr	r3, [r3, r2]
 8001c12:	1dfa      	adds	r2, r7, #7
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	0011      	movs	r1, r2
 8001c18:	2203      	movs	r2, #3
 8001c1a:	400a      	ands	r2, r1
 8001c1c:	00d2      	lsls	r2, r2, #3
 8001c1e:	21ff      	movs	r1, #255	; 0xff
 8001c20:	4091      	lsls	r1, r2
 8001c22:	000a      	movs	r2, r1
 8001c24:	43d2      	mvns	r2, r2
 8001c26:	401a      	ands	r2, r3
 8001c28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	019b      	lsls	r3, r3, #6
 8001c2e:	22ff      	movs	r2, #255	; 0xff
 8001c30:	401a      	ands	r2, r3
 8001c32:	1dfb      	adds	r3, r7, #7
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	0018      	movs	r0, r3
 8001c38:	2303      	movs	r3, #3
 8001c3a:	4003      	ands	r3, r0
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c40:	481f      	ldr	r0, [pc, #124]	; (8001cc0 <__NVIC_SetPriority+0xd4>)
 8001c42:	1dfb      	adds	r3, r7, #7
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b25b      	sxtb	r3, r3
 8001c48:	089b      	lsrs	r3, r3, #2
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	33c0      	adds	r3, #192	; 0xc0
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001c52:	e031      	b.n	8001cb8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c54:	4a1b      	ldr	r2, [pc, #108]	; (8001cc4 <__NVIC_SetPriority+0xd8>)
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	230f      	movs	r3, #15
 8001c5e:	400b      	ands	r3, r1
 8001c60:	3b08      	subs	r3, #8
 8001c62:	089b      	lsrs	r3, r3, #2
 8001c64:	3306      	adds	r3, #6
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	18d3      	adds	r3, r2, r3
 8001c6a:	3304      	adds	r3, #4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	1dfa      	adds	r2, r7, #7
 8001c70:	7812      	ldrb	r2, [r2, #0]
 8001c72:	0011      	movs	r1, r2
 8001c74:	2203      	movs	r2, #3
 8001c76:	400a      	ands	r2, r1
 8001c78:	00d2      	lsls	r2, r2, #3
 8001c7a:	21ff      	movs	r1, #255	; 0xff
 8001c7c:	4091      	lsls	r1, r2
 8001c7e:	000a      	movs	r2, r1
 8001c80:	43d2      	mvns	r2, r2
 8001c82:	401a      	ands	r2, r3
 8001c84:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	401a      	ands	r2, r3
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	0018      	movs	r0, r3
 8001c94:	2303      	movs	r3, #3
 8001c96:	4003      	ands	r3, r0
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <__NVIC_SetPriority+0xd8>)
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	001c      	movs	r4, r3
 8001ca4:	230f      	movs	r3, #15
 8001ca6:	4023      	ands	r3, r4
 8001ca8:	3b08      	subs	r3, #8
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	430a      	orrs	r2, r1
 8001cae:	3306      	adds	r3, #6
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	18c3      	adds	r3, r0, r3
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	601a      	str	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			; (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b003      	add	sp, #12
 8001cbe:	bd90      	pop	{r4, r7, pc}
 8001cc0:	e000e100 	.word	0xe000e100
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	1e5a      	subs	r2, r3, #1
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	045b      	lsls	r3, r3, #17
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d301      	bcc.n	8001ce0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e010      	b.n	8001d02 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce0:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <SysTick_Config+0x44>)
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ce8:	2301      	movs	r3, #1
 8001cea:	425b      	negs	r3, r3
 8001cec:	2103      	movs	r1, #3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f7ff ff7c 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <SysTick_Config+0x44>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SysTick_Config+0x44>)
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	0018      	movs	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	b002      	add	sp, #8
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	e000e010 	.word	0xe000e010

08001d10 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60b9      	str	r1, [r7, #8]
 8001d18:	607a      	str	r2, [r7, #4]
 8001d1a:	210f      	movs	r1, #15
 8001d1c:	187b      	adds	r3, r7, r1
 8001d1e:	1c02      	adds	r2, r0, #0
 8001d20:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	b25b      	sxtb	r3, r3
 8001d2a:	0011      	movs	r1, r2
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46bd      	mov	sp, r7
 8001d36:	b004      	add	sp, #16
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	0002      	movs	r2, r0
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d46:	1dfb      	adds	r3, r7, #7
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f7ff ff33 	bl	8001bb8 <__NVIC_EnableIRQ>
}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b002      	add	sp, #8
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff ffaf 	bl	8001cc8 <SysTick_Config>
 8001d6a:	0003      	movs	r3, r0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d8a:	e155      	b.n	8002038 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697a      	ldr	r2, [r7, #20]
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d100      	bne.n	8001da4 <HAL_GPIO_Init+0x30>
 8001da2:	e146      	b.n	8002032 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2203      	movs	r2, #3
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	2203      	movs	r2, #3
 8001db6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	409a      	lsls	r2, r3
 8001dca:	0013      	movs	r3, r2
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	0013      	movs	r3, r2
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	409a      	lsls	r2, r3
 8001df8:	0013      	movs	r3, r2
 8001dfa:	43da      	mvns	r2, r3
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	2201      	movs	r2, #1
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	0013      	movs	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2203      	movs	r2, #3
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	409a      	lsls	r2, r3
 8001e38:	0013      	movs	r3, r2
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	0013      	movs	r3, r2
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	2203      	movs	r2, #3
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	0092      	lsls	r2, r2, #2
 8001e70:	58d3      	ldr	r3, [r2, r3]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2207      	movs	r2, #7
 8001e78:	4013      	ands	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	0013      	movs	r3, r2
 8001e82:	43da      	mvns	r2, r3
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2107      	movs	r1, #7
 8001e92:	400b      	ands	r3, r1
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	409a      	lsls	r2, r3
 8001e98:	0013      	movs	r3, r2
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	6939      	ldr	r1, [r7, #16]
 8001eac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	0013      	movs	r3, r2
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	0013      	movs	r3, r2
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	23c0      	movs	r3, #192	; 0xc0
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_GPIO_Init+0x17c>
 8001eee:	e0a0      	b.n	8002032 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <HAL_GPIO_Init+0x2dc>)
 8001ef2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ef4:	4b56      	ldr	r3, [pc, #344]	; (8002050 <HAL_GPIO_Init+0x2dc>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efc:	4a55      	ldr	r2, [pc, #340]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	089b      	lsrs	r3, r3, #2
 8001f02:	3302      	adds	r3, #2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	589b      	ldr	r3, [r3, r2]
 8001f08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	4013      	ands	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	220f      	movs	r2, #15
 8001f14:	409a      	lsls	r2, r3
 8001f16:	0013      	movs	r3, r2
 8001f18:	43da      	mvns	r2, r3
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	23a0      	movs	r3, #160	; 0xa0
 8001f24:	05db      	lsls	r3, r3, #23
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d01f      	beq.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a4a      	ldr	r2, [pc, #296]	; (8002058 <HAL_GPIO_Init+0x2e4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d019      	beq.n	8001f66 <HAL_GPIO_Init+0x1f2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a49      	ldr	r2, [pc, #292]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d013      	beq.n	8001f62 <HAL_GPIO_Init+0x1ee>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a48      	ldr	r2, [pc, #288]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00d      	beq.n	8001f5e <HAL_GPIO_Init+0x1ea>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a47      	ldr	r2, [pc, #284]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d007      	beq.n	8001f5a <HAL_GPIO_Init+0x1e6>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a46      	ldr	r2, [pc, #280]	; (8002068 <HAL_GPIO_Init+0x2f4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d101      	bne.n	8001f56 <HAL_GPIO_Init+0x1e2>
 8001f52:	2305      	movs	r3, #5
 8001f54:	e00a      	b.n	8001f6c <HAL_GPIO_Init+0x1f8>
 8001f56:	2306      	movs	r3, #6
 8001f58:	e008      	b.n	8001f6c <HAL_GPIO_Init+0x1f8>
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	e006      	b.n	8001f6c <HAL_GPIO_Init+0x1f8>
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e004      	b.n	8001f6c <HAL_GPIO_Init+0x1f8>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_Init+0x1f8>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <HAL_GPIO_Init+0x1f8>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	2103      	movs	r1, #3
 8001f70:	400a      	ands	r2, r1
 8001f72:	0092      	lsls	r2, r2, #2
 8001f74:	4093      	lsls	r3, r2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f7c:	4935      	ldr	r1, [pc, #212]	; (8002054 <HAL_GPIO_Init+0x2e0>)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	089b      	lsrs	r3, r3, #2
 8001f82:	3302      	adds	r3, #2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43da      	mvns	r2, r3
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	2380      	movs	r3, #128	; 0x80
 8001fa0:	025b      	lsls	r3, r3, #9
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	d003      	beq.n	8001fae <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	43da      	mvns	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	43da      	mvns	r2, r3
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4013      	ands	r3, r2
 8001fec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685a      	ldr	r2, [r3, #4]
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	035b      	lsls	r3, r3, #13
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_GPIO_Init+0x2f8>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43da      	mvns	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	039b      	lsls	r3, r3, #14
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_GPIO_Init+0x2f8>)
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	3301      	adds	r3, #1
 8002036:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	40da      	lsrs	r2, r3
 8002040:	1e13      	subs	r3, r2, #0
 8002042:	d000      	beq.n	8002046 <HAL_GPIO_Init+0x2d2>
 8002044:	e6a2      	b.n	8001d8c <HAL_GPIO_Init+0x18>
  }
}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b006      	add	sp, #24
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000
 8002054:	40010000 	.word	0x40010000
 8002058:	50000400 	.word	0x50000400
 800205c:	50000800 	.word	0x50000800
 8002060:	50000c00 	.word	0x50000c00
 8002064:	50001000 	.word	0x50001000
 8002068:	50001c00 	.word	0x50001c00
 800206c:	40010400 	.word	0x40010400

08002070 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	000a      	movs	r2, r1
 800207a:	1cbb      	adds	r3, r7, #2
 800207c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	1cba      	adds	r2, r7, #2
 8002084:	8812      	ldrh	r2, [r2, #0]
 8002086:	4013      	ands	r3, r2
 8002088:	d004      	beq.n	8002094 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800208a:	230f      	movs	r3, #15
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
 8002092:	e003      	b.n	800209c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002094:	230f      	movs	r3, #15
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800209c:	230f      	movs	r3, #15
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	781b      	ldrb	r3, [r3, #0]
}
 80020a2:	0018      	movs	r0, r3
 80020a4:	46bd      	mov	sp, r7
 80020a6:	b004      	add	sp, #16
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	0008      	movs	r0, r1
 80020b4:	0011      	movs	r1, r2
 80020b6:	1cbb      	adds	r3, r7, #2
 80020b8:	1c02      	adds	r2, r0, #0
 80020ba:	801a      	strh	r2, [r3, #0]
 80020bc:	1c7b      	adds	r3, r7, #1
 80020be:	1c0a      	adds	r2, r1, #0
 80020c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c2:	1c7b      	adds	r3, r7, #1
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d004      	beq.n	80020d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ca:	1cbb      	adds	r3, r7, #2
 80020cc:	881a      	ldrh	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80020d2:	e003      	b.n	80020dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80020d4:	1cbb      	adds	r3, r7, #2
 80020d6:	881a      	ldrh	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46bd      	mov	sp, r7
 80020e0:	b002      	add	sp, #8
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	b08b      	sub	sp, #44	; 0x2c
 80020e8:	af06      	add	r7, sp, #24
 80020ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0ff      	b.n	80022f6 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a81      	ldr	r2, [pc, #516]	; (8002300 <HAL_PCD_Init+0x21c>)
 80020fa:	5c9b      	ldrb	r3, [r3, r2]
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d108      	bne.n	8002114 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	23aa      	movs	r3, #170	; 0xaa
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	2100      	movs	r1, #0
 800210a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	0018      	movs	r0, r3
 8002110:	f007 f926 	bl	8009360 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_PCD_Init+0x21c>)
 8002118:	2103      	movs	r1, #3
 800211a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	f003 fb35 	bl	8005790 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002126:	230f      	movs	r3, #15
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e058      	b.n	80021e2 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002130:	200f      	movs	r0, #15
 8002132:	183b      	adds	r3, r7, r0
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	1c5a      	adds	r2, r3, #1
 800213a:	0013      	movs	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	189b      	adds	r3, r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	18cb      	adds	r3, r1, r3
 8002144:	3301      	adds	r3, #1
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800214a:	183b      	adds	r3, r7, r0
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	0013      	movs	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	189b      	adds	r3, r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	183a      	adds	r2, r7, r0
 800215c:	7812      	ldrb	r2, [r2, #0]
 800215e:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002160:	0004      	movs	r4, r0
 8002162:	183b      	adds	r3, r7, r0
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	193b      	adds	r3, r7, r4
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b298      	uxth	r0, r3
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	0013      	movs	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	189b      	adds	r3, r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	18cb      	adds	r3, r1, r3
 8002178:	3336      	adds	r3, #54	; 0x36
 800217a:	1c02      	adds	r2, r0, #0
 800217c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800217e:	193b      	adds	r3, r7, r4
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	1c5a      	adds	r2, r3, #1
 8002186:	0013      	movs	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	189b      	adds	r3, r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	18cb      	adds	r3, r1, r3
 8002190:	3303      	adds	r3, #3
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002196:	193b      	adds	r3, r7, r4
 8002198:	781a      	ldrb	r2, [r3, #0]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	0013      	movs	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	189b      	adds	r3, r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	18cb      	adds	r3, r1, r3
 80021a6:	3338      	adds	r3, #56	; 0x38
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021ac:	193b      	adds	r3, r7, r4
 80021ae:	781a      	ldrb	r2, [r3, #0]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	0013      	movs	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	18cb      	adds	r3, r1, r3
 80021bc:	333c      	adds	r3, #60	; 0x3c
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	781a      	ldrb	r2, [r3, #0]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	0013      	movs	r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	189b      	adds	r3, r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	18cb      	adds	r3, r1, r3
 80021d2:	3340      	adds	r3, #64	; 0x40
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021d8:	193b      	adds	r3, r7, r4
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	193b      	adds	r3, r7, r4
 80021de:	3201      	adds	r2, #1
 80021e0:	701a      	strb	r2, [r3, #0]
 80021e2:	210f      	movs	r1, #15
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d39f      	bcc.n	8002130 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	e056      	b.n	80022a6 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021f8:	240f      	movs	r4, #15
 80021fa:	193b      	adds	r3, r7, r4
 80021fc:	781a      	ldrb	r2, [r3, #0]
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	236a      	movs	r3, #106	; 0x6a
 8002202:	33ff      	adds	r3, #255	; 0xff
 8002204:	0019      	movs	r1, r3
 8002206:	0013      	movs	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	189b      	adds	r3, r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	18c3      	adds	r3, r0, r3
 8002210:	185b      	adds	r3, r3, r1
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002216:	193b      	adds	r3, r7, r4
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	23b4      	movs	r3, #180	; 0xb4
 800221e:	0059      	lsls	r1, r3, #1
 8002220:	0013      	movs	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	189b      	adds	r3, r3, r2
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	18c3      	adds	r3, r0, r3
 800222a:	185b      	adds	r3, r3, r1
 800222c:	193a      	adds	r2, r7, r4
 800222e:	7812      	ldrb	r2, [r2, #0]
 8002230:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002232:	193b      	adds	r3, r7, r4
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	236c      	movs	r3, #108	; 0x6c
 800223a:	33ff      	adds	r3, #255	; 0xff
 800223c:	0019      	movs	r1, r3
 800223e:	0013      	movs	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	189b      	adds	r3, r3, r2
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	18c3      	adds	r3, r0, r3
 8002248:	185b      	adds	r3, r3, r1
 800224a:	2200      	movs	r2, #0
 800224c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800224e:	193b      	adds	r3, r7, r4
 8002250:	781a      	ldrb	r2, [r3, #0]
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	23bc      	movs	r3, #188	; 0xbc
 8002256:	0059      	lsls	r1, r3, #1
 8002258:	0013      	movs	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	189b      	adds	r3, r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	18c3      	adds	r3, r0, r3
 8002262:	185b      	adds	r3, r3, r1
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	23be      	movs	r3, #190	; 0xbe
 8002270:	0059      	lsls	r1, r3, #1
 8002272:	0013      	movs	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	189b      	adds	r3, r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	18c3      	adds	r3, r0, r3
 800227c:	185b      	adds	r3, r3, r1
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002282:	193b      	adds	r3, r7, r4
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	0059      	lsls	r1, r3, #1
 800228c:	0013      	movs	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	189b      	adds	r3, r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	18c3      	adds	r3, r0, r3
 8002296:	185b      	adds	r3, r3, r1
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	193b      	adds	r3, r7, r4
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	3201      	adds	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	230f      	movs	r3, #15
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	781a      	ldrb	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d3a1      	bcc.n	80021f8 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	466a      	mov	r2, sp
 80022bc:	0011      	movs	r1, r2
 80022be:	001a      	movs	r2, r3
 80022c0:	3210      	adds	r2, #16
 80022c2:	ca70      	ldmia	r2!, {r4, r5, r6}
 80022c4:	c170      	stmia	r1!, {r4, r5, r6}
 80022c6:	ca30      	ldmia	r2!, {r4, r5}
 80022c8:	c130      	stmia	r1!, {r4, r5}
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 fa78 	bl	80057c4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2224      	movs	r2, #36	; 0x24
 80022d8:	2100      	movs	r1, #0
 80022da:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a08      	ldr	r2, [pc, #32]	; (8002300 <HAL_PCD_Init+0x21c>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69db      	ldr	r3, [r3, #28]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d103      	bne.n	80022f4 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	0018      	movs	r0, r3
 80022f0:	f001 fd1c 	bl	8003d2c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	0018      	movs	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	b005      	add	sp, #20
 80022fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	000002a9 	.word	0x000002a9

08002304 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	23aa      	movs	r3, #170	; 0xaa
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	5cd3      	ldrb	r3, [r2, r3]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d101      	bne.n	800231c <HAL_PCD_Start+0x18>
 8002318:	2302      	movs	r3, #2
 800231a:	e014      	b.n	8002346 <HAL_PCD_Start+0x42>
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	23aa      	movs	r3, #170	; 0xaa
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	2101      	movs	r1, #1
 8002324:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0018      	movs	r0, r3
 800232c:	f003 fa1a 	bl	8005764 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0018      	movs	r0, r3
 8002336:	f005 f975 	bl	8007624 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	23aa      	movs	r3, #170	; 0xaa
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	2100      	movs	r1, #0
 8002342:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b002      	add	sp, #8
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0018      	movs	r0, r3
 800235e:	f005 f977 	bl	8007650 <USB_ReadInterrupts>
 8002362:	0002      	movs	r2, r0
 8002364:	2380      	movs	r3, #128	; 0x80
 8002366:	021b      	lsls	r3, r3, #8
 8002368:	401a      	ands	r2, r3
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	429a      	cmp	r2, r3
 8002370:	d103      	bne.n	800237a <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fba3 	bl	8002ac0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	0018      	movs	r0, r3
 8002380:	f005 f966 	bl	8007650 <USB_ReadInterrupts>
 8002384:	0002      	movs	r2, r0
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	401a      	ands	r2, r3
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	429a      	cmp	r2, r3
 8002392:	d114      	bne.n	80023be <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2244      	movs	r2, #68	; 0x44
 800239a:	5a9b      	ldrh	r3, [r3, r2]
 800239c:	b29a      	uxth	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	49a2      	ldr	r1, [pc, #648]	; (800262c <HAL_PCD_IRQHandler+0x2dc>)
 80023a4:	400a      	ands	r2, r1
 80023a6:	b291      	uxth	r1, r2
 80023a8:	2244      	movs	r2, #68	; 0x44
 80023aa:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	0018      	movs	r0, r3
 80023b0:	f007 f859 	bl	8009466 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2100      	movs	r1, #0
 80023b8:	0018      	movs	r0, r3
 80023ba:	f000 f945 	bl	8002648 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f005 f944 	bl	8007650 <USB_ReadInterrupts>
 80023c8:	0002      	movs	r2, r0
 80023ca:	2380      	movs	r3, #128	; 0x80
 80023cc:	01db      	lsls	r3, r3, #7
 80023ce:	401a      	ands	r2, r3
 80023d0:	2380      	movs	r3, #128	; 0x80
 80023d2:	01db      	lsls	r3, r3, #7
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10b      	bne.n	80023f0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2244      	movs	r2, #68	; 0x44
 80023de:	5a9b      	ldrh	r3, [r3, r2]
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4992      	ldr	r1, [pc, #584]	; (8002630 <HAL_PCD_IRQHandler+0x2e0>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	b291      	uxth	r1, r2
 80023ec:	2244      	movs	r2, #68	; 0x44
 80023ee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f005 f92b 	bl	8007650 <USB_ReadInterrupts>
 80023fa:	0002      	movs	r2, r0
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	019b      	lsls	r3, r3, #6
 8002400:	401a      	ands	r2, r3
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	429a      	cmp	r2, r3
 8002408:	d10b      	bne.n	8002422 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2244      	movs	r2, #68	; 0x44
 8002410:	5a9b      	ldrh	r3, [r3, r2]
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4986      	ldr	r1, [pc, #536]	; (8002634 <HAL_PCD_IRQHandler+0x2e4>)
 800241a:	400a      	ands	r2, r1
 800241c:	b291      	uxth	r1, r2
 800241e:	2244      	movs	r2, #68	; 0x44
 8002420:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	0018      	movs	r0, r3
 8002428:	f005 f912 	bl	8007650 <USB_ReadInterrupts>
 800242c:	0002      	movs	r2, r0
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	015b      	lsls	r3, r3, #5
 8002432:	401a      	ands	r2, r3
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	015b      	lsls	r3, r3, #5
 8002438:	429a      	cmp	r2, r3
 800243a:	d137      	bne.n	80024ac <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2240      	movs	r2, #64	; 0x40
 8002442:	5a9b      	ldrh	r3, [r3, r2]
 8002444:	b29a      	uxth	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2104      	movs	r1, #4
 800244c:	438a      	bics	r2, r1
 800244e:	b291      	uxth	r1, r2
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	5a9b      	ldrh	r3, [r3, r2]
 800245c:	b29a      	uxth	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2108      	movs	r1, #8
 8002464:	438a      	bics	r2, r1
 8002466:	b291      	uxth	r1, r2
 8002468:	2240      	movs	r2, #64	; 0x40
 800246a:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	23b8      	movs	r3, #184	; 0xb8
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d109      	bne.n	800248c <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	23b8      	movs	r3, #184	; 0xb8
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	2100      	movs	r1, #0
 8002480:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2100      	movs	r1, #0
 8002486:	0018      	movs	r0, r3
 8002488:	f001 fc7a 	bl	8003d80 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	0018      	movs	r0, r3
 8002490:	f007 f82a 	bl	80094e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2244      	movs	r2, #68	; 0x44
 800249a:	5a9b      	ldrh	r3, [r3, r2]
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_PCD_IRQHandler+0x2e8>)
 80024a4:	400a      	ands	r2, r1
 80024a6:	b291      	uxth	r1, r2
 80024a8:	2244      	movs	r2, #68	; 0x44
 80024aa:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f005 f8cd 	bl	8007650 <USB_ReadInterrupts>
 80024b6:	0002      	movs	r2, r0
 80024b8:	2380      	movs	r3, #128	; 0x80
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	401a      	ands	r2, r3
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d127      	bne.n	8002516 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2240      	movs	r2, #64	; 0x40
 80024cc:	5a9b      	ldrh	r3, [r3, r2]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2108      	movs	r1, #8
 80024d6:	430a      	orrs	r2, r1
 80024d8:	b291      	uxth	r1, r2
 80024da:	2240      	movs	r2, #64	; 0x40
 80024dc:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2244      	movs	r2, #68	; 0x44
 80024e4:	5a9b      	ldrh	r3, [r3, r2]
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4953      	ldr	r1, [pc, #332]	; (800263c <HAL_PCD_IRQHandler+0x2ec>)
 80024ee:	400a      	ands	r2, r1
 80024f0:	b291      	uxth	r1, r2
 80024f2:	2244      	movs	r2, #68	; 0x44
 80024f4:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2240      	movs	r2, #64	; 0x40
 80024fc:	5a9b      	ldrh	r3, [r3, r2]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2104      	movs	r1, #4
 8002506:	430a      	orrs	r2, r1
 8002508:	b291      	uxth	r1, r2
 800250a:	2240      	movs	r2, #64	; 0x40
 800250c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	0018      	movs	r0, r3
 8002512:	f006 ffcd 	bl	80094b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0018      	movs	r0, r3
 800251c:	f005 f898 	bl	8007650 <USB_ReadInterrupts>
 8002520:	0003      	movs	r3, r0
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	4013      	ands	r3, r2
 8002526:	2b80      	cmp	r3, #128	; 0x80
 8002528:	d145      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2244      	movs	r2, #68	; 0x44
 8002530:	5a9b      	ldrh	r3, [r3, r2]
 8002532:	b29a      	uxth	r2, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	438a      	bics	r2, r1
 800253c:	b291      	uxth	r1, r2
 800253e:	2244      	movs	r2, #68	; 0x44
 8002540:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	23b8      	movs	r3, #184	; 0xb8
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d12f      	bne.n	80025ae <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2240      	movs	r2, #64	; 0x40
 8002554:	5a9b      	ldrh	r3, [r3, r2]
 8002556:	b29a      	uxth	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2104      	movs	r1, #4
 800255e:	430a      	orrs	r2, r1
 8002560:	b291      	uxth	r1, r2
 8002562:	2240      	movs	r2, #64	; 0x40
 8002564:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2240      	movs	r2, #64	; 0x40
 800256c:	5a9b      	ldrh	r3, [r3, r2]
 800256e:	b29a      	uxth	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2108      	movs	r1, #8
 8002576:	430a      	orrs	r2, r1
 8002578:	b291      	uxth	r1, r2
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	23b8      	movs	r3, #184	; 0xb8
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	2101      	movs	r1, #1
 8002586:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2254      	movs	r2, #84	; 0x54
 800258e:	5a9b      	ldrh	r3, [r3, r2]
 8002590:	b29b      	uxth	r3, r3
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	223c      	movs	r2, #60	; 0x3c
 8002596:	4013      	ands	r3, r2
 8002598:	0019      	movs	r1, r3
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	23b9      	movs	r3, #185	; 0xb9
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2101      	movs	r1, #1
 80025a6:	0018      	movs	r0, r3
 80025a8:	f001 fbea 	bl	8003d80 <HAL_PCDEx_LPM_Callback>
 80025ac:	e003      	b.n	80025b6 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f006 ff7d 	bl	80094b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	0018      	movs	r0, r3
 80025bc:	f005 f848 	bl	8007650 <USB_ReadInterrupts>
 80025c0:	0002      	movs	r2, r0
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	401a      	ands	r2, r3
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d10f      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2244      	movs	r2, #68	; 0x44
 80025d6:	5a9b      	ldrh	r3, [r3, r2]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4918      	ldr	r1, [pc, #96]	; (8002640 <HAL_PCD_IRQHandler+0x2f0>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	b291      	uxth	r1, r2
 80025e4:	2244      	movs	r2, #68	; 0x44
 80025e6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	0018      	movs	r0, r3
 80025ec:	f006 ff2c 	bl	8009448 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	0018      	movs	r0, r3
 80025f6:	f005 f82b 	bl	8007650 <USB_ReadInterrupts>
 80025fa:	0002      	movs	r2, r0
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	401a      	ands	r2, r3
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	429a      	cmp	r2, r3
 8002608:	d10b      	bne.n	8002622 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2244      	movs	r2, #68	; 0x44
 8002610:	5a9b      	ldrh	r3, [r3, r2]
 8002612:	b29a      	uxth	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	490a      	ldr	r1, [pc, #40]	; (8002644 <HAL_PCD_IRQHandler+0x2f4>)
 800261a:	400a      	ands	r2, r1
 800261c:	b291      	uxth	r1, r2
 800261e:	2244      	movs	r2, #68	; 0x44
 8002620:	5299      	strh	r1, [r3, r2]
  }
}
 8002622:	46c0      	nop			; (mov r8, r8)
 8002624:	46bd      	mov	sp, r7
 8002626:	b002      	add	sp, #8
 8002628:	bd80      	pop	{r7, pc}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	fffffbff 	.word	0xfffffbff
 8002630:	ffffbfff 	.word	0xffffbfff
 8002634:	ffffdfff 	.word	0xffffdfff
 8002638:	ffffefff 	.word	0xffffefff
 800263c:	fffff7ff 	.word	0xfffff7ff
 8002640:	fffffdff 	.word	0xfffffdff
 8002644:	fffffeff 	.word	0xfffffeff

08002648 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	000a      	movs	r2, r1
 8002652:	1cfb      	adds	r3, r7, #3
 8002654:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	23aa      	movs	r3, #170	; 0xaa
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	5cd3      	ldrb	r3, [r2, r3]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_PCD_SetAddress+0x1e>
 8002662:	2302      	movs	r3, #2
 8002664:	e017      	b.n	8002696 <HAL_PCD_SetAddress+0x4e>
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	23aa      	movs	r3, #170	; 0xaa
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	2101      	movs	r1, #1
 800266e:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	1cfa      	adds	r2, r7, #3
 8002674:	2124      	movs	r1, #36	; 0x24
 8002676:	7812      	ldrb	r2, [r2, #0]
 8002678:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	1cfb      	adds	r3, r7, #3
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	0019      	movs	r1, r3
 8002684:	0010      	movs	r0, r2
 8002686:	f004 ffb9 	bl	80075fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	23aa      	movs	r3, #170	; 0xaa
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	2100      	movs	r1, #0
 8002692:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	0018      	movs	r0, r3
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800269e:	b590      	push	{r4, r7, lr}
 80026a0:	b085      	sub	sp, #20
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
 80026a6:	000c      	movs	r4, r1
 80026a8:	0010      	movs	r0, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	1cfb      	adds	r3, r7, #3
 80026ae:	1c22      	adds	r2, r4, #0
 80026b0:	701a      	strb	r2, [r3, #0]
 80026b2:	003b      	movs	r3, r7
 80026b4:	1c02      	adds	r2, r0, #0
 80026b6:	801a      	strh	r2, [r3, #0]
 80026b8:	1cbb      	adds	r3, r7, #2
 80026ba:	1c0a      	adds	r2, r1, #0
 80026bc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026be:	230b      	movs	r3, #11
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026c6:	1cfb      	adds	r3, r7, #3
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	b25b      	sxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	da0f      	bge.n	80026f0 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026d0:	1cfb      	adds	r3, r7, #3
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2207      	movs	r2, #7
 80026d6:	4013      	ands	r3, r2
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	0013      	movs	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	189b      	adds	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	687a      	ldr	r2, [r7, #4]
 80026e4:	18d3      	adds	r3, r2, r3
 80026e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2201      	movs	r2, #1
 80026ec:	705a      	strb	r2, [r3, #1]
 80026ee:	e00f      	b.n	8002710 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026f0:	1cfb      	adds	r3, r7, #3
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2207      	movs	r2, #7
 80026f6:	401a      	ands	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	189b      	adds	r3, r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	3369      	adds	r3, #105	; 0x69
 8002702:	33ff      	adds	r3, #255	; 0xff
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	18d3      	adds	r3, r2, r3
 8002708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002710:	1cfb      	adds	r3, r7, #3
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2207      	movs	r2, #7
 8002716:	4013      	ands	r3, r2
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800271e:	003b      	movs	r3, r7
 8002720:	881a      	ldrh	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1cba      	adds	r2, r7, #2
 800272a:	7812      	ldrb	r2, [r2, #0]
 800272c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002740:	1cbb      	adds	r3, r7, #2
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d102      	bne.n	800274e <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	23aa      	movs	r3, #170	; 0xaa
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_PCD_EP_Open+0xc0>
 800275a:	2302      	movs	r3, #2
 800275c:	e013      	b.n	8002786 <HAL_PCD_EP_Open+0xe8>
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	23aa      	movs	r3, #170	; 0xaa
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	2101      	movs	r1, #1
 8002766:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	0011      	movs	r1, r2
 8002770:	0018      	movs	r0, r3
 8002772:	f003 f853 	bl	800581c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	23aa      	movs	r3, #170	; 0xaa
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	2100      	movs	r1, #0
 800277e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002780:	230b      	movs	r3, #11
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	781b      	ldrb	r3, [r3, #0]
}
 8002786:	0018      	movs	r0, r3
 8002788:	46bd      	mov	sp, r7
 800278a:	b005      	add	sp, #20
 800278c:	bd90      	pop	{r4, r7, pc}

0800278e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	000a      	movs	r2, r1
 8002798:	1cfb      	adds	r3, r7, #3
 800279a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800279c:	1cfb      	adds	r3, r7, #3
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b25b      	sxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	da0f      	bge.n	80027c6 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027a6:	1cfb      	adds	r3, r7, #3
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2207      	movs	r2, #7
 80027ac:	4013      	ands	r3, r2
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	0013      	movs	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	189b      	adds	r3, r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	18d3      	adds	r3, r2, r3
 80027bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	705a      	strb	r2, [r3, #1]
 80027c4:	e00f      	b.n	80027e6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	1cfb      	adds	r3, r7, #3
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2207      	movs	r2, #7
 80027cc:	401a      	ands	r2, r3
 80027ce:	0013      	movs	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	189b      	adds	r3, r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	3369      	adds	r3, #105	; 0x69
 80027d8:	33ff      	adds	r3, #255	; 0xff
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027e6:	1cfb      	adds	r3, r7, #3
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	2207      	movs	r2, #7
 80027ec:	4013      	ands	r3, r2
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	23aa      	movs	r3, #170	; 0xaa
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	5cd3      	ldrb	r3, [r2, r3]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d101      	bne.n	8002804 <HAL_PCD_EP_Close+0x76>
 8002800:	2302      	movs	r3, #2
 8002802:	e011      	b.n	8002828 <HAL_PCD_EP_Close+0x9a>
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	23aa      	movs	r3, #170	; 0xaa
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	2101      	movs	r1, #1
 800280c:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	0011      	movs	r1, r2
 8002816:	0018      	movs	r0, r3
 8002818:	f003 fb74 	bl	8005f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	23aa      	movs	r3, #170	; 0xaa
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	2100      	movs	r1, #0
 8002824:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	0018      	movs	r0, r3
 800282a:	46bd      	mov	sp, r7
 800282c:	b004      	add	sp, #16
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	200b      	movs	r0, #11
 800283e:	183b      	adds	r3, r7, r0
 8002840:	1c0a      	adds	r2, r1, #0
 8002842:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002844:	0001      	movs	r1, r0
 8002846:	187b      	adds	r3, r7, r1
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2207      	movs	r2, #7
 800284c:	401a      	ands	r2, r3
 800284e:	0013      	movs	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	189b      	adds	r3, r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	3369      	adds	r3, #105	; 0x69
 8002858:	33ff      	adds	r3, #255	; 0xff
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	18d3      	adds	r3, r2, r3
 800285e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2200      	movs	r2, #0
 8002870:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2200      	movs	r2, #0
 8002876:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002878:	187b      	adds	r3, r7, r1
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2207      	movs	r2, #7
 800287e:	4013      	ands	r3, r2
 8002880:	b2da      	uxtb	r2, r3
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002886:	187b      	adds	r3, r7, r1
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2207      	movs	r2, #7
 800288c:	4013      	ands	r3, r2
 800288e:	d107      	bne.n	80028a0 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f003 fcf3 	bl	8006284 <USB_EPStartXfer>
 800289e:	e006      	b.n	80028ae <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	0011      	movs	r1, r2
 80028a8:	0018      	movs	r0, r3
 80028aa:	f003 fceb 	bl	8006284 <USB_EPStartXfer>
  }

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b006      	add	sp, #24
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	200b      	movs	r0, #11
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	1c0a      	adds	r2, r1, #0
 80028ca:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2207      	movs	r2, #7
 80028d2:	4013      	ands	r3, r2
 80028d4:	1c5a      	adds	r2, r3, #1
 80028d6:	0013      	movs	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	189b      	adds	r3, r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	18d3      	adds	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	2224      	movs	r2, #36	; 0x24
 80028f4:	2101      	movs	r1, #1
 80028f6:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2200      	movs	r2, #0
 8002902:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2201      	movs	r2, #1
 8002908:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800290a:	183b      	adds	r3, r7, r0
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2207      	movs	r2, #7
 8002910:	4013      	ands	r3, r2
 8002912:	b2da      	uxtb	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002918:	183b      	adds	r3, r7, r0
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2207      	movs	r2, #7
 800291e:	4013      	ands	r3, r2
 8002920:	d107      	bne.n	8002932 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	0011      	movs	r1, r2
 800292a:	0018      	movs	r0, r3
 800292c:	f003 fcaa 	bl	8006284 <USB_EPStartXfer>
 8002930:	e006      	b.n	8002940 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	0011      	movs	r1, r2
 800293a:	0018      	movs	r0, r3
 800293c:	f003 fca2 	bl	8006284 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	0018      	movs	r0, r3
 8002944:	46bd      	mov	sp, r7
 8002946:	b006      	add	sp, #24
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	000a      	movs	r2, r1
 8002954:	1cfb      	adds	r3, r7, #3
 8002956:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002958:	1cfb      	adds	r3, r7, #3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2207      	movs	r2, #7
 800295e:	401a      	ands	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d901      	bls.n	800296c <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e046      	b.n	80029fa <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800296c:	1cfb      	adds	r3, r7, #3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b25b      	sxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	da0f      	bge.n	8002996 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002976:	1cfb      	adds	r3, r7, #3
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2207      	movs	r2, #7
 800297c:	4013      	ands	r3, r2
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	0013      	movs	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	189b      	adds	r3, r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2201      	movs	r2, #1
 8002992:	705a      	strb	r2, [r3, #1]
 8002994:	e00d      	b.n	80029b2 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002996:	1cfb      	adds	r3, r7, #3
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	0013      	movs	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	189b      	adds	r3, r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	3369      	adds	r3, #105	; 0x69
 80029a4:	33ff      	adds	r3, #255	; 0xff
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	18d3      	adds	r3, r2, r3
 80029aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029b8:	1cfb      	adds	r3, r7, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2207      	movs	r2, #7
 80029be:	4013      	ands	r3, r2
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	23aa      	movs	r3, #170	; 0xaa
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d101      	bne.n	80029d6 <HAL_PCD_EP_SetStall+0x8c>
 80029d2:	2302      	movs	r3, #2
 80029d4:	e011      	b.n	80029fa <HAL_PCD_EP_SetStall+0xb0>
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	23aa      	movs	r3, #170	; 0xaa
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	2101      	movs	r1, #1
 80029de:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	0011      	movs	r1, r2
 80029e8:	0018      	movs	r0, r3
 80029ea:	f004 fd05 	bl	80073f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	23aa      	movs	r3, #170	; 0xaa
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	2100      	movs	r1, #0
 80029f6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	0018      	movs	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	000a      	movs	r2, r1
 8002a0c:	1cfb      	adds	r3, r7, #3
 8002a0e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a10:	1cfb      	adds	r3, r7, #3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	220f      	movs	r2, #15
 8002a16:	401a      	ands	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d901      	bls.n	8002a24 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e048      	b.n	8002ab6 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a24:	1cfb      	adds	r3, r7, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	b25b      	sxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da0f      	bge.n	8002a4e <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a2e:	1cfb      	adds	r3, r7, #3
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2207      	movs	r2, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	0013      	movs	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	705a      	strb	r2, [r3, #1]
 8002a4c:	e00f      	b.n	8002a6e <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a4e:	1cfb      	adds	r3, r7, #3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2207      	movs	r2, #7
 8002a54:	401a      	ands	r2, r3
 8002a56:	0013      	movs	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	189b      	adds	r3, r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	3369      	adds	r3, #105	; 0x69
 8002a60:	33ff      	adds	r3, #255	; 0xff
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	18d3      	adds	r3, r2, r3
 8002a66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a74:	1cfb      	adds	r3, r7, #3
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	b2da      	uxtb	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	23aa      	movs	r3, #170	; 0xaa
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_EP_ClrStall+0x90>
 8002a8e:	2302      	movs	r3, #2
 8002a90:	e011      	b.n	8002ab6 <HAL_PCD_EP_ClrStall+0xb4>
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	23aa      	movs	r3, #170	; 0xaa
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	2101      	movs	r1, #1
 8002a9a:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	0011      	movs	r1, r2
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f004 fcf7 	bl	8007498 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	23aa      	movs	r3, #170	; 0xaa
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b004      	add	sp, #16
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b096      	sub	sp, #88	; 0x58
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ac8:	f000 fbd8 	bl	800327c <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	2056      	movs	r0, #86	; 0x56
 8002ad2:	183b      	adds	r3, r7, r0
 8002ad4:	2144      	movs	r1, #68	; 0x44
 8002ad6:	5a52      	ldrh	r2, [r2, r1]
 8002ad8:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002ada:	183b      	adds	r3, r7, r0
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	2455      	movs	r4, #85	; 0x55
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	210f      	movs	r1, #15
 8002ae6:	400a      	ands	r2, r1
 8002ae8:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d000      	beq.n	8002af4 <PCD_EP_ISR_Handler+0x34>
 8002af2:	e179      	b.n	8002de8 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002af4:	183b      	adds	r3, r7, r0
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	2210      	movs	r2, #16
 8002afa:	4013      	ands	r3, r2
 8002afc:	d154      	bne.n	8002ba8 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	200e      	movs	r0, #14
 8002b08:	183b      	adds	r3, r7, r0
 8002b0a:	49af      	ldr	r1, [pc, #700]	; (8002dc8 <PCD_EP_ISR_Handler+0x308>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	801a      	strh	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	183a      	adds	r2, r7, r0
 8002b16:	8812      	ldrh	r2, [r2, #0]
 8002b18:	49ac      	ldr	r1, [pc, #688]	; (8002dcc <PCD_EP_ISR_Handler+0x30c>)
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3328      	adds	r3, #40	; 0x28
 8002b24:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2250      	movs	r2, #80	; 0x50
 8002b2c:	5a9b      	ldrh	r3, [r3, r2]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	001a      	movs	r2, r3
 8002b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	18d2      	adds	r2, r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	18d3      	adds	r3, r2, r3
 8002b40:	4aa3      	ldr	r2, [pc, #652]	; (8002dd0 <PCD_EP_ISR_Handler+0x310>)
 8002b42:	4694      	mov	ip, r2
 8002b44:	4463      	add	r3, ip
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	059b      	lsls	r3, r3, #22
 8002b4a:	0d9a      	lsrs	r2, r3, #22
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b4e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	18d2      	adds	r2, r2, r3
 8002b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b5c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2100      	movs	r1, #0
 8002b62:	0018      	movs	r0, r3
 8002b64:	f006 fc52 	bl	800940c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <PCD_EP_ISR_Handler+0xb8>
 8002b74:	f000 fb82 	bl	800327c <PCD_EP_ISR_Handler+0x7bc>
 8002b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <PCD_EP_ISR_Handler+0xc4>
 8002b80:	f000 fb7c 	bl	800327c <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2224      	movs	r2, #36	; 0x24
 8002b88:	5c9b      	ldrb	r3, [r3, r2]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	4252      	negs	r2, r2
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	b291      	uxth	r1, r2
 8002b9a:	224c      	movs	r2, #76	; 0x4c
 8002b9c:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2224      	movs	r2, #36	; 0x24
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	e369      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3369      	adds	r3, #105	; 0x69
 8002bac:	33ff      	adds	r3, #255	; 0xff
 8002bae:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	2152      	movs	r1, #82	; 0x52
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	8812      	ldrh	r2, [r2, #0]
 8002bba:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	881a      	ldrh	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	; 0x80
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d037      	beq.n	8002c38 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2250      	movs	r2, #80	; 0x50
 8002bce:	5a9b      	ldrh	r3, [r3, r2]
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	00db      	lsls	r3, r3, #3
 8002bda:	18d2      	adds	r2, r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	18d3      	adds	r3, r2, r3
 8002be2:	4a7c      	ldr	r2, [pc, #496]	; (8002dd4 <PCD_EP_ISR_Handler+0x314>)
 8002be4:	4694      	mov	ip, r2
 8002be6:	4463      	add	r3, ip
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	059b      	lsls	r3, r3, #22
 8002bec:	0d9a      	lsrs	r2, r3, #22
 8002bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	22ac      	movs	r2, #172	; 0xac
 8002bfa:	0092      	lsls	r2, r2, #2
 8002bfc:	1899      	adds	r1, r3, r2
 8002bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c00:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c04:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f004 fd74 	bl	80076f4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	2010      	movs	r0, #16
 8002c16:	183b      	adds	r3, r7, r0
 8002c18:	496f      	ldr	r1, [pc, #444]	; (8002dd8 <PCD_EP_ISR_Handler+0x318>)
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	801a      	strh	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	183a      	adds	r2, r7, r0
 8002c24:	8812      	ldrh	r2, [r2, #0]
 8002c26:	2180      	movs	r1, #128	; 0x80
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	b292      	uxth	r2, r2
 8002c2c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f006 fbb5 	bl	80093a0 <HAL_PCD_SetupStageCallback>
 8002c36:	e321      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c38:	2352      	movs	r3, #82	; 0x52
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	5e9b      	ldrsh	r3, [r3, r2]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db00      	blt.n	8002c46 <PCD_EP_ISR_Handler+0x186>
 8002c44:	e31a      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	201e      	movs	r0, #30
 8002c50:	183b      	adds	r3, r7, r0
 8002c52:	4961      	ldr	r1, [pc, #388]	; (8002dd8 <PCD_EP_ISR_Handler+0x318>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	801a      	strh	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	183a      	adds	r2, r7, r0
 8002c5e:	8812      	ldrh	r2, [r2, #0]
 8002c60:	2180      	movs	r1, #128	; 0x80
 8002c62:	430a      	orrs	r2, r1
 8002c64:	b292      	uxth	r2, r2
 8002c66:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2250      	movs	r2, #80	; 0x50
 8002c6e:	5a9b      	ldrh	r3, [r3, r2]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	001a      	movs	r2, r3
 8002c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	18d2      	adds	r2, r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	18d3      	adds	r3, r2, r3
 8002c82:	4a54      	ldr	r2, [pc, #336]	; (8002dd4 <PCD_EP_ISR_Handler+0x314>)
 8002c84:	4694      	mov	ip, r2
 8002c86:	4463      	add	r3, ip
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	059b      	lsls	r3, r3, #22
 8002c8c:	0d9a      	lsrs	r2, r3, #22
 8002c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c90:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d01a      	beq.n	8002cd0 <PCD_EP_ISR_Handler+0x210>
 8002c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d016      	beq.n	8002cd0 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca8:	6959      	ldr	r1, [r3, #20]
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f004 fd1e 	bl	80076f4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002cb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	18d2      	adds	r2, r2, r3
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2100      	movs	r1, #0
 8002cca:	0018      	movs	r0, r3
 8002ccc:	f006 fb7d 	bl	80093ca <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	001a      	movs	r2, r3
 8002cda:	2380      	movs	r3, #128	; 0x80
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d000      	beq.n	8002ce4 <PCD_EP_ISR_Handler+0x224>
 8002ce2:	e2cb      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2250      	movs	r2, #80	; 0x50
 8002cf0:	5a9b      	ldrh	r3, [r3, r2]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	001a      	movs	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	189b      	adds	r3, r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <PCD_EP_ISR_Handler+0x314>)
 8002d00:	4694      	mov	ip, r2
 8002d02:	4463      	add	r3, ip
 8002d04:	617b      	str	r3, [r7, #20]
 8002d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d110      	bne.n	8002d30 <PCD_EP_ISR_Handler+0x270>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	4a31      	ldr	r2, [pc, #196]	; (8002ddc <PCD_EP_ISR_Handler+0x31c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	801a      	strh	r2, [r3, #0]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <PCD_EP_ISR_Handler+0x30c>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	801a      	strh	r2, [r3, #0]
 8002d2e:	e02b      	b.n	8002d88 <PCD_EP_ISR_Handler+0x2c8>
 8002d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	2b3e      	cmp	r3, #62	; 0x3e
 8002d36:	d812      	bhi.n	8002d5e <PCD_EP_ISR_Handler+0x29e>
 8002d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d002      	beq.n	8002d50 <PCD_EP_ISR_Handler+0x290>
 8002d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8002d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	029b      	lsls	r3, r3, #10
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	801a      	strh	r2, [r3, #0]
 8002d5c:	e014      	b.n	8002d88 <PCD_EP_ISR_Handler+0x2c8>
 8002d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	647b      	str	r3, [r7, #68]	; 0x44
 8002d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	221f      	movs	r2, #31
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d102      	bne.n	8002d76 <PCD_EP_ISR_Handler+0x2b6>
 8002d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d72:	3b01      	subs	r3, #1
 8002d74:	647b      	str	r3, [r7, #68]	; 0x44
 8002d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	029b      	lsls	r3, r3, #10
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <PCD_EP_ISR_Handler+0x30c>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	2012      	movs	r0, #18
 8002d92:	183b      	adds	r3, r7, r0
 8002d94:	4912      	ldr	r1, [pc, #72]	; (8002de0 <PCD_EP_ISR_Handler+0x320>)
 8002d96:	400a      	ands	r2, r1
 8002d98:	801a      	strh	r2, [r3, #0]
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	183a      	adds	r2, r7, r0
 8002d9e:	8812      	ldrh	r2, [r2, #0]
 8002da0:	2180      	movs	r1, #128	; 0x80
 8002da2:	0149      	lsls	r1, r1, #5
 8002da4:	404a      	eors	r2, r1
 8002da6:	801a      	strh	r2, [r3, #0]
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	183a      	adds	r2, r7, r0
 8002dac:	8812      	ldrh	r2, [r2, #0]
 8002dae:	2180      	movs	r1, #128	; 0x80
 8002db0:	0189      	lsls	r1, r1, #6
 8002db2:	404a      	eors	r2, r1
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	183a      	adds	r2, r7, r0
 8002dbc:	8812      	ldrh	r2, [r2, #0]
 8002dbe:	4909      	ldr	r1, [pc, #36]	; (8002de4 <PCD_EP_ISR_Handler+0x324>)
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	b292      	uxth	r2, r2
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	e259      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
 8002dc8:	ffff8f0f 	.word	0xffff8f0f
 8002dcc:	ffff8000 	.word	0xffff8000
 8002dd0:	00000402 	.word	0x00000402
 8002dd4:	00000406 	.word	0x00000406
 8002dd8:	00000f8f 	.word	0x00000f8f
 8002ddc:	ffff83ff 	.word	0xffff83ff
 8002de0:	ffffbf8f 	.word	0xffffbf8f
 8002de4:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	001a      	movs	r2, r3
 8002dee:	2055      	movs	r0, #85	; 0x55
 8002df0:	183b      	adds	r3, r7, r0
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	18d2      	adds	r2, r2, r3
 8002df8:	2152      	movs	r1, #82	; 0x52
 8002dfa:	187b      	adds	r3, r7, r1
 8002dfc:	8812      	ldrh	r2, [r2, #0]
 8002dfe:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002e00:	187b      	adds	r3, r7, r1
 8002e02:	2200      	movs	r2, #0
 8002e04:	5e9b      	ldrsh	r3, [r3, r2]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db00      	blt.n	8002e0c <PCD_EP_ISR_Handler+0x34c>
 8002e0a:	e0fa      	b.n	8003002 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	001a      	movs	r2, r3
 8002e12:	183b      	adds	r3, r7, r0
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	18d3      	adds	r3, r2, r3
 8002e1a:	881b      	ldrh	r3, [r3, #0]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	2450      	movs	r4, #80	; 0x50
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	49cf      	ldr	r1, [pc, #828]	; (8003160 <PCD_EP_ISR_Handler+0x6a0>)
 8002e24:	400a      	ands	r2, r1
 8002e26:	801a      	strh	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	001a      	movs	r2, r3
 8002e2e:	183b      	adds	r3, r7, r0
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	18d3      	adds	r3, r2, r3
 8002e36:	193a      	adds	r2, r7, r4
 8002e38:	8812      	ldrh	r2, [r2, #0]
 8002e3a:	2180      	movs	r1, #128	; 0x80
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	b292      	uxth	r2, r2
 8002e40:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002e42:	183b      	adds	r3, r7, r0
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	0013      	movs	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	189b      	adds	r3, r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	3369      	adds	r3, #105	; 0x69
 8002e50:	33ff      	adds	r3, #255	; 0xff
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	18d3      	adds	r3, r2, r3
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	7b1b      	ldrb	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d125      	bne.n	8002eac <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2250      	movs	r2, #80	; 0x50
 8002e66:	5a9b      	ldrh	r3, [r3, r2]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	001a      	movs	r2, r3
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	18d2      	adds	r2, r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	18d3      	adds	r3, r2, r3
 8002e7a:	4aba      	ldr	r2, [pc, #744]	; (8003164 <PCD_EP_ISR_Handler+0x6a4>)
 8002e7c:	4694      	mov	ip, r2
 8002e7e:	4463      	add	r3, ip
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	2448      	movs	r4, #72	; 0x48
 8002e84:	193b      	adds	r3, r7, r4
 8002e86:	0592      	lsls	r2, r2, #22
 8002e88:	0d92      	lsrs	r2, r2, #22
 8002e8a:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002e8c:	193b      	adds	r3, r7, r4
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d100      	bne.n	8002e96 <PCD_EP_ISR_Handler+0x3d6>
 8002e94:	e08d      	b.n	8002fb2 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	6959      	ldr	r1, [r3, #20]
 8002e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ea0:	88da      	ldrh	r2, [r3, #6]
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	f004 fc25 	bl	80076f4 <USB_ReadPMA>
 8002eaa:	e082      	b.n	8002fb2 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eae:	78db      	ldrb	r3, [r3, #3]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d10c      	bne.n	8002ece <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002eb4:	2348      	movs	r3, #72	; 0x48
 8002eb6:	18fc      	adds	r4, r7, r3
 8002eb8:	2352      	movs	r3, #82	; 0x52
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	881a      	ldrh	r2, [r3, #0]
 8002ebe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 f9ee 	bl	80032a4 <HAL_PCD_EP_DB_Receive>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	8023      	strh	r3, [r4, #0]
 8002ecc:	e071      	b.n	8002fb2 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	001a      	movs	r2, r3
 8002ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	18d3      	adds	r3, r2, r3
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	204a      	movs	r0, #74	; 0x4a
 8002ee2:	183b      	adds	r3, r7, r0
 8002ee4:	49a0      	ldr	r1, [pc, #640]	; (8003168 <PCD_EP_ISR_Handler+0x6a8>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	801a      	strh	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	001a      	movs	r2, r3
 8002ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	18d3      	adds	r3, r2, r3
 8002ef8:	183a      	adds	r2, r7, r0
 8002efa:	8812      	ldrh	r2, [r2, #0]
 8002efc:	499b      	ldr	r1, [pc, #620]	; (800316c <PCD_EP_ISR_Handler+0x6ac>)
 8002efe:	430a      	orrs	r2, r1
 8002f00:	b292      	uxth	r2, r2
 8002f02:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	001a      	movs	r2, r3
 8002f0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	18d3      	adds	r3, r2, r3
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	001a      	movs	r2, r3
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	01db      	lsls	r3, r3, #7
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d024      	beq.n	8002f6a <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2250      	movs	r2, #80	; 0x50
 8002f26:	5a9b      	ldrh	r3, [r3, r2]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	18d2      	adds	r2, r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	18d3      	adds	r3, r2, r3
 8002f3a:	4a8d      	ldr	r2, [pc, #564]	; (8003170 <PCD_EP_ISR_Handler+0x6b0>)
 8002f3c:	4694      	mov	ip, r2
 8002f3e:	4463      	add	r3, ip
 8002f40:	881a      	ldrh	r2, [r3, #0]
 8002f42:	2448      	movs	r4, #72	; 0x48
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	0592      	lsls	r2, r2, #22
 8002f48:	0d92      	lsrs	r2, r2, #22
 8002f4a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002f4c:	193b      	adds	r3, r7, r4
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d02e      	beq.n	8002fb2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5a:	6959      	ldr	r1, [r3, #20]
 8002f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f5e:	891a      	ldrh	r2, [r3, #8]
 8002f60:	193b      	adds	r3, r7, r4
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	f004 fbc6 	bl	80076f4 <USB_ReadPMA>
 8002f68:	e023      	b.n	8002fb2 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2250      	movs	r2, #80	; 0x50
 8002f70:	5a9b      	ldrh	r3, [r3, r2]
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	001a      	movs	r2, r3
 8002f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	18d2      	adds	r2, r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	18d3      	adds	r3, r2, r3
 8002f84:	4a77      	ldr	r2, [pc, #476]	; (8003164 <PCD_EP_ISR_Handler+0x6a4>)
 8002f86:	4694      	mov	ip, r2
 8002f88:	4463      	add	r3, ip
 8002f8a:	881a      	ldrh	r2, [r3, #0]
 8002f8c:	2448      	movs	r4, #72	; 0x48
 8002f8e:	193b      	adds	r3, r7, r4
 8002f90:	0592      	lsls	r2, r2, #22
 8002f92:	0d92      	lsrs	r2, r2, #22
 8002f94:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002f96:	193b      	adds	r3, r7, r4
 8002f98:	881b      	ldrh	r3, [r3, #0]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d009      	beq.n	8002fb2 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	6959      	ldr	r1, [r3, #20]
 8002fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa8:	895a      	ldrh	r2, [r3, #10]
 8002faa:	193b      	adds	r3, r7, r4
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	f004 fba1 	bl	80076f4 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002fb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	2148      	movs	r1, #72	; 0x48
 8002fb8:	187b      	adds	r3, r7, r1
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	18d2      	adds	r2, r2, r3
 8002fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	187b      	adds	r3, r7, r1
 8002fc8:	881b      	ldrh	r3, [r3, #0]
 8002fca:	18d2      	adds	r2, r2, r3
 8002fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fce:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <PCD_EP_ISR_Handler+0x524>
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	881a      	ldrh	r2, [r3, #0]
 8002fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d207      	bcs.n	8002ff4 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f006 f9ec 	bl	80093ca <HAL_PCD_DataOutStageCallback>
 8002ff2:	e006      	b.n	8003002 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ffa:	0011      	movs	r1, r2
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f003 f941 	bl	8006284 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003002:	2452      	movs	r4, #82	; 0x52
 8003004:	193b      	adds	r3, r7, r4
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	2280      	movs	r2, #128	; 0x80
 800300a:	4013      	ands	r3, r2
 800300c:	d100      	bne.n	8003010 <PCD_EP_ISR_Handler+0x550>
 800300e:	e135      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8003010:	2055      	movs	r0, #85	; 0x55
 8003012:	183b      	adds	r3, r7, r0
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	1c5a      	adds	r2, r3, #1
 8003018:	0013      	movs	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	189b      	adds	r3, r3, r2
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	18d3      	adds	r3, r2, r3
 8003024:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	001a      	movs	r2, r3
 800302c:	183b      	adds	r3, r7, r0
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	18d3      	adds	r3, r2, r3
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b29a      	uxth	r2, r3
 8003038:	2542      	movs	r5, #66	; 0x42
 800303a:	197b      	adds	r3, r7, r5
 800303c:	494d      	ldr	r1, [pc, #308]	; (8003174 <PCD_EP_ISR_Handler+0x6b4>)
 800303e:	400a      	ands	r2, r1
 8003040:	801a      	strh	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	001a      	movs	r2, r3
 8003048:	183b      	adds	r3, r7, r0
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	18d3      	adds	r3, r2, r3
 8003050:	197a      	adds	r2, r7, r5
 8003052:	8812      	ldrh	r2, [r2, #0]
 8003054:	4948      	ldr	r1, [pc, #288]	; (8003178 <PCD_EP_ISR_Handler+0x6b8>)
 8003056:	430a      	orrs	r2, r1
 8003058:	b292      	uxth	r2, r2
 800305a:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 800305c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800305e:	78db      	ldrb	r3, [r3, #3]
 8003060:	2b02      	cmp	r3, #2
 8003062:	d100      	bne.n	8003066 <PCD_EP_ISR_Handler+0x5a6>
 8003064:	e0ad      	b.n	80031c2 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8003066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003068:	2200      	movs	r2, #0
 800306a:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800306c:	193b      	adds	r3, r7, r4
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	2240      	movs	r2, #64	; 0x40
 8003072:	4013      	ands	r3, r2
 8003074:	d046      	beq.n	8003104 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003076:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003078:	785b      	ldrb	r3, [r3, #1]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d125      	bne.n	80030ca <PCD_EP_ISR_Handler+0x60a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	627b      	str	r3, [r7, #36]	; 0x24
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2250      	movs	r2, #80	; 0x50
 800308a:	5a9b      	ldrh	r3, [r3, r2]
 800308c:	b29b      	uxth	r3, r3
 800308e:	001a      	movs	r2, r3
 8003090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003092:	189b      	adds	r3, r3, r2
 8003094:	627b      	str	r3, [r7, #36]	; 0x24
 8003096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	00da      	lsls	r2, r3, #3
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	18d3      	adds	r3, r2, r3
 80030a0:	4a33      	ldr	r2, [pc, #204]	; (8003170 <PCD_EP_ISR_Handler+0x6b0>)
 80030a2:	4694      	mov	ip, r2
 80030a4:	4463      	add	r3, ip
 80030a6:	623b      	str	r3, [r7, #32]
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	4a33      	ldr	r2, [pc, #204]	; (800317c <PCD_EP_ISR_Handler+0x6bc>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	801a      	strh	r2, [r3, #0]
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	4a2e      	ldr	r2, [pc, #184]	; (8003178 <PCD_EP_ISR_Handler+0x6b8>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	6a3b      	ldr	r3, [r7, #32]
 80030c6:	801a      	strh	r2, [r3, #0]
 80030c8:	e073      	b.n	80031b2 <PCD_EP_ISR_Handler+0x6f2>
 80030ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d16f      	bne.n	80031b2 <PCD_EP_ISR_Handler+0x6f2>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2250      	movs	r2, #80	; 0x50
 80030de:	5a9b      	ldrh	r3, [r3, r2]
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	001a      	movs	r2, r3
 80030e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e6:	189b      	adds	r3, r3, r2
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	00da      	lsls	r2, r3, #3
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	18d3      	adds	r3, r2, r3
 80030f4:	4a1e      	ldr	r2, [pc, #120]	; (8003170 <PCD_EP_ISR_Handler+0x6b0>)
 80030f6:	4694      	mov	ip, r2
 80030f8:	4463      	add	r3, ip
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80030fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030fe:	2200      	movs	r2, #0
 8003100:	801a      	strh	r2, [r3, #0]
 8003102:	e056      	b.n	80031b2 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800310c:	785b      	ldrb	r3, [r3, #1]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d136      	bne.n	8003180 <PCD_EP_ISR_Handler+0x6c0>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	637b      	str	r3, [r7, #52]	; 0x34
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2250      	movs	r2, #80	; 0x50
 800311e:	5a9b      	ldrh	r3, [r3, r2]
 8003120:	b29b      	uxth	r3, r3
 8003122:	001a      	movs	r2, r3
 8003124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003126:	189b      	adds	r3, r3, r2
 8003128:	637b      	str	r3, [r7, #52]	; 0x34
 800312a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	00da      	lsls	r2, r3, #3
 8003130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003132:	18d3      	adds	r3, r2, r3
 8003134:	4a0b      	ldr	r2, [pc, #44]	; (8003164 <PCD_EP_ISR_Handler+0x6a4>)
 8003136:	4694      	mov	ip, r2
 8003138:	4463      	add	r3, ip
 800313a:	633b      	str	r3, [r7, #48]	; 0x30
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4a0e      	ldr	r2, [pc, #56]	; (800317c <PCD_EP_ISR_Handler+0x6bc>)
 8003144:	4013      	ands	r3, r2
 8003146:	b29a      	uxth	r2, r3
 8003148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314a:	801a      	strh	r2, [r3, #0]
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	b29b      	uxth	r3, r3
 8003152:	4a09      	ldr	r2, [pc, #36]	; (8003178 <PCD_EP_ISR_Handler+0x6b8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	b29a      	uxth	r2, r3
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	801a      	strh	r2, [r3, #0]
 800315c:	e029      	b.n	80031b2 <PCD_EP_ISR_Handler+0x6f2>
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	00000f8f 	.word	0x00000f8f
 8003164:	00000406 	.word	0x00000406
 8003168:	ffff8f8f 	.word	0xffff8f8f
 800316c:	ffff80c0 	.word	0xffff80c0
 8003170:	00000402 	.word	0x00000402
 8003174:	ffff8f0f 	.word	0xffff8f0f
 8003178:	ffff8000 	.word	0xffff8000
 800317c:	ffff83ff 	.word	0xffff83ff
 8003180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d114      	bne.n	80031b2 <PCD_EP_ISR_Handler+0x6f2>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2250      	movs	r2, #80	; 0x50
 800318e:	5a9b      	ldrh	r3, [r3, r2]
 8003190:	b29b      	uxth	r3, r3
 8003192:	001a      	movs	r2, r3
 8003194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003196:	189b      	adds	r3, r3, r2
 8003198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	00da      	lsls	r2, r3, #3
 80031a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a2:	18d3      	adds	r3, r2, r3
 80031a4:	4a3d      	ldr	r2, [pc, #244]	; (800329c <PCD_EP_ISR_Handler+0x7dc>)
 80031a6:	4694      	mov	ip, r2
 80031a8:	4463      	add	r3, ip
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	2200      	movs	r2, #0
 80031b0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b4:	781a      	ldrb	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0011      	movs	r1, r2
 80031ba:	0018      	movs	r0, r3
 80031bc:	f006 f926 	bl	800940c <HAL_PCD_DataInStageCallback>
 80031c0:	e05c      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 80031c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c4:	78db      	ldrb	r3, [r3, #3]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d150      	bne.n	800326c <PCD_EP_ISR_Handler+0x7ac>
 80031ca:	2352      	movs	r3, #82	; 0x52
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	d149      	bne.n	800326c <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2250      	movs	r2, #80	; 0x50
 80031de:	5a9b      	ldrh	r3, [r3, r2]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	001a      	movs	r2, r3
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	18d2      	adds	r2, r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	18d3      	adds	r3, r2, r3
 80031f2:	4a2b      	ldr	r2, [pc, #172]	; (80032a0 <PCD_EP_ISR_Handler+0x7e0>)
 80031f4:	4694      	mov	ip, r2
 80031f6:	4463      	add	r3, ip
 80031f8:	881a      	ldrh	r2, [r3, #0]
 80031fa:	2140      	movs	r1, #64	; 0x40
 80031fc:	187b      	adds	r3, r7, r1
 80031fe:	0592      	lsls	r2, r2, #22
 8003200:	0d92      	lsrs	r2, r2, #22
 8003202:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8003204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	187b      	adds	r3, r7, r1
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	429a      	cmp	r2, r3
 800320e:	d907      	bls.n	8003220 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8003210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003212:	699a      	ldr	r2, [r3, #24]
 8003214:	187b      	adds	r3, r7, r1
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	1ad2      	subs	r2, r2, r3
 800321a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321c:	619a      	str	r2, [r3, #24]
 800321e:	e002      	b.n	8003226 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8003220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003222:	2200      	movs	r2, #0
 8003224:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8003226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003230:	781a      	ldrb	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0011      	movs	r1, r2
 8003236:	0018      	movs	r0, r3
 8003238:	f006 f8e8 	bl	800940c <HAL_PCD_DataInStageCallback>
 800323c:	e01e      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800323e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	2140      	movs	r1, #64	; 0x40
 8003244:	187b      	adds	r3, r7, r1
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	18d2      	adds	r2, r2, r3
 800324a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800324c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800324e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	187b      	adds	r3, r7, r1
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	18d2      	adds	r2, r2, r3
 8003258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800325a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003262:	0011      	movs	r1, r2
 8003264:	0018      	movs	r0, r3
 8003266:	f003 f80d 	bl	8006284 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800326a:	e007      	b.n	800327c <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800326c:	2352      	movs	r3, #82	; 0x52
 800326e:	18fb      	adds	r3, r7, r3
 8003270:	881a      	ldrh	r2, [r3, #0]
 8003272:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	0018      	movs	r0, r3
 8003278:	f000 f930 	bl	80034dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2244      	movs	r2, #68	; 0x44
 8003282:	5a9b      	ldrh	r3, [r3, r2]
 8003284:	b29b      	uxth	r3, r3
 8003286:	b21b      	sxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	da01      	bge.n	8003290 <PCD_EP_ISR_Handler+0x7d0>
 800328c:	f7ff fc1e 	bl	8002acc <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	0018      	movs	r0, r3
 8003294:	46bd      	mov	sp, r7
 8003296:	b016      	add	sp, #88	; 0x58
 8003298:	bdb0      	pop	{r4, r5, r7, pc}
 800329a:	46c0      	nop			; (mov r8, r8)
 800329c:	00000406 	.word	0x00000406
 80032a0:	00000402 	.word	0x00000402

080032a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032a4:	b590      	push	{r4, r7, lr}
 80032a6:	b089      	sub	sp, #36	; 0x24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	1dbb      	adds	r3, r7, #6
 80032b0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032b2:	1dbb      	adds	r3, r7, #6
 80032b4:	881a      	ldrh	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	01db      	lsls	r3, r3, #7
 80032ba:	4013      	ands	r3, r2
 80032bc:	d100      	bne.n	80032c0 <HAL_PCD_EP_DB_Receive+0x1c>
 80032be:	e07d      	b.n	80033bc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2250      	movs	r2, #80	; 0x50
 80032c6:	5a9b      	ldrh	r3, [r3, r2]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	001a      	movs	r2, r3
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	18d2      	adds	r2, r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	18d3      	adds	r3, r2, r3
 80032da:	4a7a      	ldr	r2, [pc, #488]	; (80034c4 <HAL_PCD_EP_DB_Receive+0x220>)
 80032dc:	4694      	mov	ip, r2
 80032de:	4463      	add	r3, ip
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	211a      	movs	r1, #26
 80032e4:	187b      	adds	r3, r7, r1
 80032e6:	0592      	lsls	r2, r2, #22
 80032e8:	0d92      	lsrs	r2, r2, #22
 80032ea:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d307      	bcc.n	8003308 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	699a      	ldr	r2, [r3, #24]
 80032fc:	187b      	adds	r3, r7, r1
 80032fe:	881b      	ldrh	r3, [r3, #0]
 8003300:	1ad2      	subs	r2, r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	619a      	str	r2, [r3, #24]
 8003306:	e002      	b.n	800330e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2200      	movs	r2, #0
 800330c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	699b      	ldr	r3, [r3, #24]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d121      	bne.n	800335a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	001a      	movs	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	18d3      	adds	r3, r2, r3
 8003324:	881b      	ldrh	r3, [r3, #0]
 8003326:	b29a      	uxth	r2, r3
 8003328:	2018      	movs	r0, #24
 800332a:	183b      	adds	r3, r7, r0
 800332c:	4966      	ldr	r1, [pc, #408]	; (80034c8 <HAL_PCD_EP_DB_Receive+0x224>)
 800332e:	400a      	ands	r2, r1
 8003330:	801a      	strh	r2, [r3, #0]
 8003332:	183b      	adds	r3, r7, r0
 8003334:	183a      	adds	r2, r7, r0
 8003336:	8812      	ldrh	r2, [r2, #0]
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	0189      	lsls	r1, r1, #6
 800333c:	404a      	eors	r2, r1
 800333e:	801a      	strh	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	001a      	movs	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	18d3      	adds	r3, r2, r3
 800334e:	183a      	adds	r2, r7, r0
 8003350:	8812      	ldrh	r2, [r2, #0]
 8003352:	495e      	ldr	r1, [pc, #376]	; (80034cc <HAL_PCD_EP_DB_Receive+0x228>)
 8003354:	430a      	orrs	r2, r1
 8003356:	b292      	uxth	r2, r2
 8003358:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800335a:	1dbb      	adds	r3, r7, #6
 800335c:	881b      	ldrh	r3, [r3, #0]
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	4013      	ands	r3, r2
 8003362:	d01a      	beq.n	800339a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	001a      	movs	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	18d3      	adds	r3, r2, r3
 8003372:	881b      	ldrh	r3, [r3, #0]
 8003374:	b29a      	uxth	r2, r3
 8003376:	2016      	movs	r0, #22
 8003378:	183b      	adds	r3, r7, r0
 800337a:	4955      	ldr	r1, [pc, #340]	; (80034d0 <HAL_PCD_EP_DB_Receive+0x22c>)
 800337c:	400a      	ands	r2, r1
 800337e:	801a      	strh	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	001a      	movs	r2, r3
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	183a      	adds	r2, r7, r0
 8003390:	8812      	ldrh	r2, [r2, #0]
 8003392:	4950      	ldr	r1, [pc, #320]	; (80034d4 <HAL_PCD_EP_DB_Receive+0x230>)
 8003394:	430a      	orrs	r2, r1
 8003396:	b292      	uxth	r2, r2
 8003398:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800339a:	241a      	movs	r4, #26
 800339c:	193b      	adds	r3, r7, r4
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d100      	bne.n	80033a6 <HAL_PCD_EP_DB_Receive+0x102>
 80033a4:	e086      	b.n	80034b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	6959      	ldr	r1, [r3, #20]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	891a      	ldrh	r2, [r3, #8]
 80033b2:	193b      	adds	r3, r7, r4
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	f004 f99d 	bl	80076f4 <USB_ReadPMA>
 80033ba:	e07b      	b.n	80034b4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2250      	movs	r2, #80	; 0x50
 80033c2:	5a9b      	ldrh	r3, [r3, r2]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	001a      	movs	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	18d2      	adds	r2, r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	4a40      	ldr	r2, [pc, #256]	; (80034d8 <HAL_PCD_EP_DB_Receive+0x234>)
 80033d8:	4694      	mov	ip, r2
 80033da:	4463      	add	r3, ip
 80033dc:	881a      	ldrh	r2, [r3, #0]
 80033de:	211a      	movs	r1, #26
 80033e0:	187b      	adds	r3, r7, r1
 80033e2:	0592      	lsls	r2, r2, #22
 80033e4:	0d92      	lsrs	r2, r2, #22
 80033e6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	699a      	ldr	r2, [r3, #24]
 80033ec:	187b      	adds	r3, r7, r1
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d307      	bcc.n	8003404 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	187b      	adds	r3, r7, r1
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	1ad2      	subs	r2, r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	619a      	str	r2, [r3, #24]
 8003402:	e002      	b.n	800340a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2200      	movs	r2, #0
 8003408:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d121      	bne.n	8003456 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	001a      	movs	r2, r3
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	18d3      	adds	r3, r2, r3
 8003420:	881b      	ldrh	r3, [r3, #0]
 8003422:	b29a      	uxth	r2, r3
 8003424:	201e      	movs	r0, #30
 8003426:	183b      	adds	r3, r7, r0
 8003428:	4927      	ldr	r1, [pc, #156]	; (80034c8 <HAL_PCD_EP_DB_Receive+0x224>)
 800342a:	400a      	ands	r2, r1
 800342c:	801a      	strh	r2, [r3, #0]
 800342e:	183b      	adds	r3, r7, r0
 8003430:	183a      	adds	r2, r7, r0
 8003432:	8812      	ldrh	r2, [r2, #0]
 8003434:	2180      	movs	r1, #128	; 0x80
 8003436:	0189      	lsls	r1, r1, #6
 8003438:	404a      	eors	r2, r1
 800343a:	801a      	strh	r2, [r3, #0]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	001a      	movs	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	18d3      	adds	r3, r2, r3
 800344a:	183a      	adds	r2, r7, r0
 800344c:	8812      	ldrh	r2, [r2, #0]
 800344e:	491f      	ldr	r1, [pc, #124]	; (80034cc <HAL_PCD_EP_DB_Receive+0x228>)
 8003450:	430a      	orrs	r2, r1
 8003452:	b292      	uxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003456:	1dbb      	adds	r3, r7, #6
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	2240      	movs	r2, #64	; 0x40
 800345c:	4013      	ands	r3, r2
 800345e:	d11a      	bne.n	8003496 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	001a      	movs	r2, r3
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	18d3      	adds	r3, r2, r3
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
 8003472:	201c      	movs	r0, #28
 8003474:	183b      	adds	r3, r7, r0
 8003476:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003478:	400a      	ands	r2, r1
 800347a:	801a      	strh	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	001a      	movs	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	18d3      	adds	r3, r2, r3
 800348a:	183a      	adds	r2, r7, r0
 800348c:	8812      	ldrh	r2, [r2, #0]
 800348e:	4911      	ldr	r1, [pc, #68]	; (80034d4 <HAL_PCD_EP_DB_Receive+0x230>)
 8003490:	430a      	orrs	r2, r1
 8003492:	b292      	uxth	r2, r2
 8003494:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003496:	241a      	movs	r4, #26
 8003498:	193b      	adds	r3, r7, r4
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d009      	beq.n	80034b4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6818      	ldr	r0, [r3, #0]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	6959      	ldr	r1, [r3, #20]
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	895a      	ldrh	r2, [r3, #10]
 80034ac:	193b      	adds	r3, r7, r4
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	f004 f920 	bl	80076f4 <USB_ReadPMA>
    }
  }

  return count;
 80034b4:	231a      	movs	r3, #26
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	881b      	ldrh	r3, [r3, #0]
}
 80034ba:	0018      	movs	r0, r3
 80034bc:	46bd      	mov	sp, r7
 80034be:	b009      	add	sp, #36	; 0x24
 80034c0:	bd90      	pop	{r4, r7, pc}
 80034c2:	46c0      	nop			; (mov r8, r8)
 80034c4:	00000402 	.word	0x00000402
 80034c8:	ffffbf8f 	.word	0xffffbf8f
 80034cc:	ffff8080 	.word	0xffff8080
 80034d0:	ffff8f8f 	.word	0xffff8f8f
 80034d4:	ffff80c0 	.word	0xffff80c0
 80034d8:	00000406 	.word	0x00000406

080034dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0a2      	sub	sp, #136	; 0x88
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	1dbb      	adds	r3, r7, #6
 80034e8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034ea:	1dbb      	adds	r3, r7, #6
 80034ec:	881b      	ldrh	r3, [r3, #0]
 80034ee:	2240      	movs	r2, #64	; 0x40
 80034f0:	4013      	ands	r3, r2
 80034f2:	d100      	bne.n	80034f6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80034f4:	e1c8      	b.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2250      	movs	r2, #80	; 0x50
 80034fc:	5a9b      	ldrh	r3, [r3, r2]
 80034fe:	b29b      	uxth	r3, r3
 8003500:	001a      	movs	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	18d2      	adds	r2, r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	18d3      	adds	r3, r2, r3
 8003510:	4ad7      	ldr	r2, [pc, #860]	; (8003870 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003512:	4694      	mov	ip, r2
 8003514:	4463      	add	r3, ip
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	214e      	movs	r1, #78	; 0x4e
 800351a:	187b      	adds	r3, r7, r1
 800351c:	0592      	lsls	r2, r2, #22
 800351e:	0d92      	lsrs	r2, r2, #22
 8003520:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	187b      	adds	r3, r7, r1
 8003528:	881b      	ldrh	r3, [r3, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d907      	bls.n	800353e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	187b      	adds	r3, r7, r1
 8003534:	881b      	ldrh	r3, [r3, #0]
 8003536:	1ad2      	subs	r2, r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	619a      	str	r2, [r3, #24]
 800353c:	e002      	b.n	8003544 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d000      	beq.n	800354e <HAL_PCD_EP_DB_Transmit+0x72>
 800354c:	e0b5      	b.n	80036ba <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	785b      	ldrb	r3, [r3, #1]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d125      	bne.n	80035a2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	62bb      	str	r3, [r7, #40]	; 0x28
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2250      	movs	r2, #80	; 0x50
 8003562:	5a9b      	ldrh	r3, [r3, r2]
 8003564:	b29b      	uxth	r3, r3
 8003566:	001a      	movs	r2, r3
 8003568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356a:	189b      	adds	r3, r3, r2
 800356c:	62bb      	str	r3, [r7, #40]	; 0x28
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	00da      	lsls	r2, r3, #3
 8003574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	4abd      	ldr	r2, [pc, #756]	; (8003870 <HAL_PCD_EP_DB_Transmit+0x394>)
 800357a:	4694      	mov	ip, r2
 800357c:	4463      	add	r3, ip
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4abb      	ldr	r2, [pc, #748]	; (8003874 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003588:	4013      	ands	r3, r2
 800358a:	b29a      	uxth	r2, r3
 800358c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358e:	801a      	strh	r2, [r3, #0]
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	4ab8      	ldr	r2, [pc, #736]	; (8003878 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	b29a      	uxth	r2, r3
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	801a      	strh	r2, [r3, #0]
 80035a0:	e01b      	b.n	80035da <HAL_PCD_EP_DB_Transmit+0xfe>
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	785b      	ldrb	r3, [r3, #1]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d117      	bne.n	80035da <HAL_PCD_EP_DB_Transmit+0xfe>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	633b      	str	r3, [r7, #48]	; 0x30
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2250      	movs	r2, #80	; 0x50
 80035b6:	5a9b      	ldrh	r3, [r3, r2]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	001a      	movs	r2, r3
 80035bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035be:	189b      	adds	r3, r3, r2
 80035c0:	633b      	str	r3, [r7, #48]	; 0x30
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00da      	lsls	r2, r3, #3
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	18d3      	adds	r3, r2, r3
 80035cc:	4aa8      	ldr	r2, [pc, #672]	; (8003870 <HAL_PCD_EP_DB_Transmit+0x394>)
 80035ce:	4694      	mov	ip, r2
 80035d0:	4463      	add	r3, ip
 80035d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035d6:	2200      	movs	r2, #0
 80035d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	623b      	str	r3, [r7, #32]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	785b      	ldrb	r3, [r3, #1]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d125      	bne.n	8003634 <HAL_PCD_EP_DB_Transmit+0x158>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2250      	movs	r2, #80	; 0x50
 80035f4:	5a9b      	ldrh	r3, [r3, r2]
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	001a      	movs	r2, r3
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	189b      	adds	r3, r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	00da      	lsls	r2, r3, #3
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	18d3      	adds	r3, r2, r3
 800360a:	4a9c      	ldr	r2, [pc, #624]	; (800387c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800360c:	4694      	mov	ip, r2
 800360e:	4463      	add	r3, ip
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	4a96      	ldr	r2, [pc, #600]	; (8003874 <HAL_PCD_EP_DB_Transmit+0x398>)
 800361a:	4013      	ands	r3, r2
 800361c:	b29a      	uxth	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	4a93      	ldr	r2, [pc, #588]	; (8003878 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	b29a      	uxth	r2, r3
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	801a      	strh	r2, [r3, #0]
 8003632:	e018      	b.n	8003666 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	785b      	ldrb	r3, [r3, #1]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d114      	bne.n	8003666 <HAL_PCD_EP_DB_Transmit+0x18a>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2250      	movs	r2, #80	; 0x50
 8003642:	5a9b      	ldrh	r3, [r3, r2]
 8003644:	b29b      	uxth	r3, r3
 8003646:	001a      	movs	r2, r3
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	189b      	adds	r3, r3, r2
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	00da      	lsls	r2, r3, #3
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	18d3      	adds	r3, r2, r3
 8003658:	4a88      	ldr	r2, [pc, #544]	; (800387c <HAL_PCD_EP_DB_Transmit+0x3a0>)
 800365a:	4694      	mov	ip, r2
 800365c:	4463      	add	r3, ip
 800365e:	61fb      	str	r3, [r7, #28]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	2200      	movs	r2, #0
 8003664:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781a      	ldrb	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	0011      	movs	r1, r2
 800366e:	0018      	movs	r0, r3
 8003670:	f005 fecc 	bl	800940c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003674:	1dbb      	adds	r3, r7, #6
 8003676:	881a      	ldrh	r2, [r3, #0]
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	01db      	lsls	r3, r3, #7
 800367c:	4013      	ands	r3, r2
 800367e:	d100      	bne.n	8003682 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003680:	e2d4      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	001a      	movs	r2, r3
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	18d3      	adds	r3, r2, r3
 8003690:	881b      	ldrh	r3, [r3, #0]
 8003692:	b29a      	uxth	r2, r3
 8003694:	2012      	movs	r0, #18
 8003696:	183b      	adds	r3, r7, r0
 8003698:	4979      	ldr	r1, [pc, #484]	; (8003880 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800369a:	400a      	ands	r2, r1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	001a      	movs	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	18d3      	adds	r3, r2, r3
 80036ac:	183a      	adds	r2, r7, r0
 80036ae:	8812      	ldrh	r2, [r2, #0]
 80036b0:	4974      	ldr	r1, [pc, #464]	; (8003884 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80036b2:	430a      	orrs	r2, r1
 80036b4:	b292      	uxth	r2, r2
 80036b6:	801a      	strh	r2, [r3, #0]
 80036b8:	e2b8      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	881a      	ldrh	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	01db      	lsls	r3, r3, #7
 80036c2:	4013      	ands	r3, r2
 80036c4:	d01a      	beq.n	80036fc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	001a      	movs	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	18d3      	adds	r3, r2, r3
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	2044      	movs	r0, #68	; 0x44
 80036da:	183b      	adds	r3, r7, r0
 80036dc:	4968      	ldr	r1, [pc, #416]	; (8003880 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80036de:	400a      	ands	r2, r1
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	001a      	movs	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	18d3      	adds	r3, r2, r3
 80036f0:	183a      	adds	r2, r7, r0
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	4963      	ldr	r1, [pc, #396]	; (8003884 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 80036f6:	430a      	orrs	r2, r1
 80036f8:	b292      	uxth	r2, r2
 80036fa:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	5c9b      	ldrb	r3, [r3, r2]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d000      	beq.n	8003708 <HAL_PCD_EP_DB_Transmit+0x22c>
 8003706:	e291      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	214e      	movs	r1, #78	; 0x4e
 800370e:	187b      	adds	r3, r7, r1
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	18d2      	adds	r2, r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	187b      	adds	r3, r7, r1
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	18d2      	adds	r2, r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	6a1a      	ldr	r2, [r3, #32]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	429a      	cmp	r2, r3
 8003730:	d309      	bcc.n	8003746 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	6a1a      	ldr	r2, [r3, #32]
 800373c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800373e:	1ad2      	subs	r2, r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	621a      	str	r2, [r3, #32]
 8003744:	e016      	b.n	8003774 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 800374e:	234e      	movs	r3, #78	; 0x4e
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	881b      	ldrh	r3, [r3, #0]
 8003754:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]
 800375e:	e009      	b.n	8003774 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2224      	movs	r2, #36	; 0x24
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2200      	movs	r2, #0
 8003772:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d150      	bne.n	800381e <HAL_PCD_EP_DB_Transmit+0x342>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	63bb      	str	r3, [r7, #56]	; 0x38
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2250      	movs	r2, #80	; 0x50
 8003788:	5a9b      	ldrh	r3, [r3, r2]
 800378a:	b29b      	uxth	r3, r3
 800378c:	001a      	movs	r2, r3
 800378e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003790:	189b      	adds	r3, r3, r2
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	00da      	lsls	r2, r3, #3
 800379a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800379c:	18d3      	adds	r3, r2, r3
 800379e:	4a34      	ldr	r2, [pc, #208]	; (8003870 <HAL_PCD_EP_DB_Transmit+0x394>)
 80037a0:	4694      	mov	ip, r2
 80037a2:	4463      	add	r3, ip
 80037a4:	637b      	str	r3, [r7, #52]	; 0x34
 80037a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d110      	bne.n	80037ce <HAL_PCD_EP_DB_Transmit+0x2f2>
 80037ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ae:	881b      	ldrh	r3, [r3, #0]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	4a30      	ldr	r2, [pc, #192]	; (8003874 <HAL_PCD_EP_DB_Transmit+0x398>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	801a      	strh	r2, [r3, #0]
 80037bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4a2d      	ldr	r2, [pc, #180]	; (8003878 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80037c4:	4313      	orrs	r3, r2
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ca:	801a      	strh	r2, [r3, #0]
 80037cc:	e044      	b.n	8003858 <HAL_PCD_EP_DB_Transmit+0x37c>
 80037ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d0:	2b3e      	cmp	r3, #62	; 0x3e
 80037d2:	d810      	bhi.n	80037f6 <HAL_PCD_EP_DB_Transmit+0x31a>
 80037d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80037da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	d002      	beq.n	80037e8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80037e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037e4:	3301      	adds	r3, #1
 80037e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	801a      	strh	r2, [r3, #0]
 80037f4:	e030      	b.n	8003858 <HAL_PCD_EP_DB_Transmit+0x37c>
 80037f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80037fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037fe:	221f      	movs	r2, #31
 8003800:	4013      	ands	r3, r2
 8003802:	d102      	bne.n	800380a <HAL_PCD_EP_DB_Transmit+0x32e>
 8003804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003806:	3b01      	subs	r3, #1
 8003808:	64bb      	str	r3, [r7, #72]	; 0x48
 800380a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800380c:	b29b      	uxth	r3, r3
 800380e:	029b      	lsls	r3, r3, #10
 8003810:	b29b      	uxth	r3, r3
 8003812:	4a19      	ldr	r2, [pc, #100]	; (8003878 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003814:	4313      	orrs	r3, r2
 8003816:	b29a      	uxth	r2, r3
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	801a      	strh	r2, [r3, #0]
 800381c:	e01c      	b.n	8003858 <HAL_PCD_EP_DB_Transmit+0x37c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d118      	bne.n	8003858 <HAL_PCD_EP_DB_Transmit+0x37c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	643b      	str	r3, [r7, #64]	; 0x40
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2250      	movs	r2, #80	; 0x50
 8003832:	5a9b      	ldrh	r3, [r3, r2]
 8003834:	b29b      	uxth	r3, r3
 8003836:	001a      	movs	r2, r3
 8003838:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383a:	189b      	adds	r3, r3, r2
 800383c:	643b      	str	r3, [r7, #64]	; 0x40
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	00da      	lsls	r2, r3, #3
 8003844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003846:	18d3      	adds	r3, r2, r3
 8003848:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_PCD_EP_DB_Transmit+0x394>)
 800384a:	4694      	mov	ip, r2
 800384c:	4463      	add	r3, ip
 800384e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003852:	b29a      	uxth	r2, r3
 8003854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003856:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	6959      	ldr	r1, [r3, #20]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	891a      	ldrh	r2, [r3, #8]
 8003864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003866:	b29b      	uxth	r3, r3
 8003868:	f003 ff00 	bl	800766c <USB_WritePMA>
 800386c:	e1de      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
 800386e:	46c0      	nop			; (mov r8, r8)
 8003870:	00000402 	.word	0x00000402
 8003874:	ffff83ff 	.word	0xffff83ff
 8003878:	ffff8000 	.word	0xffff8000
 800387c:	00000406 	.word	0x00000406
 8003880:	ffff8f8f 	.word	0xffff8f8f
 8003884:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2250      	movs	r2, #80	; 0x50
 800388e:	5a9b      	ldrh	r3, [r3, r2]
 8003890:	b29b      	uxth	r3, r3
 8003892:	001a      	movs	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	18d2      	adds	r2, r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	18d3      	adds	r3, r2, r3
 80038a2:	4aca      	ldr	r2, [pc, #808]	; (8003bcc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80038a4:	4694      	mov	ip, r2
 80038a6:	4463      	add	r3, ip
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	214e      	movs	r1, #78	; 0x4e
 80038ac:	187b      	adds	r3, r7, r1
 80038ae:	0592      	lsls	r2, r2, #22
 80038b0:	0d92      	lsrs	r2, r2, #22
 80038b2:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	881b      	ldrh	r3, [r3, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d307      	bcc.n	80038d0 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	699a      	ldr	r2, [r3, #24]
 80038c4:	187b      	adds	r3, r7, r1
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	1ad2      	subs	r2, r2, r3
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	619a      	str	r2, [r3, #24]
 80038ce:	e002      	b.n	80038d6 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2200      	movs	r2, #0
 80038d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d000      	beq.n	80038e0 <HAL_PCD_EP_DB_Transmit+0x404>
 80038de:	e0c0      	b.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	785b      	ldrb	r3, [r3, #1]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d125      	bne.n	8003934 <HAL_PCD_EP_DB_Transmit+0x458>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2250      	movs	r2, #80	; 0x50
 80038f4:	5a9b      	ldrh	r3, [r3, r2]
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	001a      	movs	r2, r3
 80038fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fc:	189b      	adds	r3, r3, r2
 80038fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00da      	lsls	r2, r3, #3
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	18d3      	adds	r3, r2, r3
 800390a:	4ab1      	ldr	r2, [pc, #708]	; (8003bd0 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 800390c:	4694      	mov	ip, r2
 800390e:	4463      	add	r3, ip
 8003910:	66bb      	str	r3, [r7, #104]	; 0x68
 8003912:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	b29b      	uxth	r3, r3
 8003918:	4aae      	ldr	r2, [pc, #696]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800391a:	4013      	ands	r3, r2
 800391c:	b29a      	uxth	r2, r3
 800391e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003920:	801a      	strh	r2, [r3, #0]
 8003922:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	4aab      	ldr	r2, [pc, #684]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	b29a      	uxth	r2, r3
 800392e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	e01b      	b.n	800396c <HAL_PCD_EP_DB_Transmit+0x490>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d117      	bne.n	800396c <HAL_PCD_EP_DB_Transmit+0x490>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	677b      	str	r3, [r7, #116]	; 0x74
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2250      	movs	r2, #80	; 0x50
 8003948:	5a9b      	ldrh	r3, [r3, r2]
 800394a:	b29b      	uxth	r3, r3
 800394c:	001a      	movs	r2, r3
 800394e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003950:	189b      	adds	r3, r3, r2
 8003952:	677b      	str	r3, [r7, #116]	; 0x74
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	00da      	lsls	r2, r3, #3
 800395a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800395c:	18d3      	adds	r3, r2, r3
 800395e:	4a9c      	ldr	r2, [pc, #624]	; (8003bd0 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003960:	4694      	mov	ip, r2
 8003962:	4463      	add	r3, ip
 8003964:	673b      	str	r3, [r7, #112]	; 0x70
 8003966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003968:	2200      	movs	r2, #0
 800396a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	67bb      	str	r3, [r7, #120]	; 0x78
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d130      	bne.n	80039dc <HAL_PCD_EP_DB_Transmit+0x500>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2180      	movs	r1, #128	; 0x80
 8003980:	187a      	adds	r2, r7, r1
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2250      	movs	r2, #80	; 0x50
 800398a:	5a9b      	ldrh	r3, [r3, r2]
 800398c:	b29b      	uxth	r3, r3
 800398e:	001a      	movs	r2, r3
 8003990:	187b      	adds	r3, r7, r1
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	189b      	adds	r3, r3, r2
 8003996:	187a      	adds	r2, r7, r1
 8003998:	6013      	str	r3, [r2, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	00da      	lsls	r2, r3, #3
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	18d3      	adds	r3, r2, r3
 80039a6:	4a89      	ldr	r2, [pc, #548]	; (8003bcc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80039a8:	4694      	mov	ip, r2
 80039aa:	4463      	add	r3, ip
 80039ac:	2184      	movs	r1, #132	; 0x84
 80039ae:	187a      	adds	r2, r7, r1
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	4a86      	ldr	r2, [pc, #536]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80039bc:	4013      	ands	r3, r2
 80039be:	b29a      	uxth	r2, r3
 80039c0:	187b      	adds	r3, r7, r1
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	187b      	adds	r3, r7, r1
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4a82      	ldr	r2, [pc, #520]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	187b      	adds	r3, r7, r1
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	801a      	strh	r2, [r3, #0]
 80039da:	e018      	b.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x532>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	785b      	ldrb	r3, [r3, #1]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d114      	bne.n	8003a0e <HAL_PCD_EP_DB_Transmit+0x532>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2250      	movs	r2, #80	; 0x50
 80039ea:	5a9b      	ldrh	r3, [r3, r2]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	001a      	movs	r2, r3
 80039f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	00da      	lsls	r2, r3, #3
 80039fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039fe:	18d3      	adds	r3, r2, r3
 8003a00:	4a72      	ldr	r2, [pc, #456]	; (8003bcc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003a02:	4694      	mov	ip, r2
 8003a04:	4463      	add	r3, ip
 8003a06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781a      	ldrb	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	0011      	movs	r1, r2
 8003a16:	0018      	movs	r0, r3
 8003a18:	f005 fcf8 	bl	800940c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a1c:	1dbb      	adds	r3, r7, #6
 8003a1e:	881a      	ldrh	r2, [r3, #0]
 8003a20:	2380      	movs	r3, #128	; 0x80
 8003a22:	01db      	lsls	r3, r3, #7
 8003a24:	4013      	ands	r3, r2
 8003a26:	d000      	beq.n	8003a2a <HAL_PCD_EP_DB_Transmit+0x54e>
 8003a28:	e100      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	001a      	movs	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	18d3      	adds	r3, r2, r3
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	2046      	movs	r0, #70	; 0x46
 8003a3e:	183b      	adds	r3, r7, r0
 8003a40:	4966      	ldr	r1, [pc, #408]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x700>)
 8003a42:	400a      	ands	r2, r1
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	18d3      	adds	r3, r2, r3
 8003a54:	183a      	adds	r2, r7, r0
 8003a56:	8812      	ldrh	r2, [r2, #0]
 8003a58:	4961      	ldr	r1, [pc, #388]	; (8003be0 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	e0e4      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a62:	1dbb      	adds	r3, r7, #6
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	01db      	lsls	r3, r3, #7
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d11a      	bne.n	8003aa4 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	001a      	movs	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	18d3      	adds	r3, r2, r3
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	204c      	movs	r0, #76	; 0x4c
 8003a82:	183b      	adds	r3, r7, r0
 8003a84:	4955      	ldr	r1, [pc, #340]	; (8003bdc <HAL_PCD_EP_DB_Transmit+0x700>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	001a      	movs	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	18d3      	adds	r3, r2, r3
 8003a98:	183a      	adds	r2, r7, r0
 8003a9a:	8812      	ldrh	r2, [r2, #0]
 8003a9c:	4950      	ldr	r1, [pc, #320]	; (8003be0 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2224      	movs	r2, #36	; 0x24
 8003aa8:	5c9b      	ldrb	r3, [r3, r2]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d000      	beq.n	8003ab0 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003aae:	e0bd      	b.n	8003c2c <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	214e      	movs	r1, #78	; 0x4e
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	18d2      	adds	r2, r2, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	881b      	ldrh	r3, [r3, #0]
 8003ac8:	18d2      	adds	r2, r2, r3
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a1a      	ldr	r2, [r3, #32]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d309      	bcc.n	8003aee <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	6a1a      	ldr	r2, [r3, #32]
 8003ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ae6:	1ad2      	subs	r2, r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	621a      	str	r2, [r3, #32]
 8003aec:	e016      	b.n	8003b1c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003af6:	234e      	movs	r3, #78	; 0x4e
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2224      	movs	r2, #36	; 0x24
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]
 8003b06:	e009      	b.n	8003b1c <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2200      	movs	r2, #0
 8003b12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	2224      	movs	r2, #36	; 0x24
 8003b18:	2100      	movs	r1, #0
 8003b1a:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	667b      	str	r3, [r7, #100]	; 0x64
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d15c      	bne.n	8003be4 <HAL_PCD_EP_DB_Transmit+0x708>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	2250      	movs	r2, #80	; 0x50
 8003b36:	5a9b      	ldrh	r3, [r3, r2]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	001a      	movs	r2, r3
 8003b3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b3e:	189b      	adds	r3, r3, r2
 8003b40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	00da      	lsls	r2, r3, #3
 8003b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b4a:	18d3      	adds	r3, r2, r3
 8003b4c:	4a1f      	ldr	r2, [pc, #124]	; (8003bcc <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003b4e:	4694      	mov	ip, r2
 8003b50:	4463      	add	r3, ip
 8003b52:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d110      	bne.n	8003b7c <HAL_PCD_EP_DB_Transmit+0x6a0>
 8003b5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b6c:	881b      	ldrh	r3, [r3, #0]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	4a19      	ldr	r2, [pc, #100]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e04d      	b.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b7e:	2b3e      	cmp	r3, #62	; 0x3e
 8003b80:	d810      	bhi.n	8003ba4 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b84:	085b      	lsrs	r3, r3, #1
 8003b86:	657b      	str	r3, [r7, #84]	; 0x54
 8003b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b92:	3301      	adds	r3, #1
 8003b94:	657b      	str	r3, [r7, #84]	; 0x54
 8003b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	e039      	b.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	657b      	str	r3, [r7, #84]	; 0x54
 8003baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bac:	221f      	movs	r2, #31
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003bb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	029b      	lsls	r3, r3, #10
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	4a05      	ldr	r2, [pc, #20]	; (8003bd8 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc8:	801a      	strh	r2, [r3, #0]
 8003bca:	e025      	b.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003bcc:	00000406 	.word	0x00000406
 8003bd0:	00000402 	.word	0x00000402
 8003bd4:	ffff83ff 	.word	0xffff83ff
 8003bd8:	ffff8000 	.word	0xffff8000
 8003bdc:	ffff8f8f 	.word	0xffff8f8f
 8003be0:	ffffc080 	.word	0xffffc080
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	785b      	ldrb	r3, [r3, #1]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d115      	bne.n	8003c18 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2250      	movs	r2, #80	; 0x50
 8003bf2:	5a9b      	ldrh	r3, [r3, r2]
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	001a      	movs	r2, r3
 8003bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bfa:	189b      	adds	r3, r3, r2
 8003bfc:	667b      	str	r3, [r7, #100]	; 0x64
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	00da      	lsls	r2, r3, #3
 8003c04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003c0a:	4694      	mov	ip, r2
 8003c0c:	4463      	add	r3, ip
 8003c0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c16:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6959      	ldr	r1, [r3, #20]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	895a      	ldrh	r2, [r3, #10]
 8003c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f003 fd20 	bl	800766c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	001a      	movs	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	18d3      	adds	r3, r2, r3
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	2010      	movs	r0, #16
 8003c40:	183b      	adds	r3, r7, r0
 8003c42:	4911      	ldr	r1, [pc, #68]	; (8003c88 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	801a      	strh	r2, [r3, #0]
 8003c48:	183b      	adds	r3, r7, r0
 8003c4a:	183a      	adds	r2, r7, r0
 8003c4c:	8812      	ldrh	r2, [r2, #0]
 8003c4e:	2110      	movs	r1, #16
 8003c50:	404a      	eors	r2, r1
 8003c52:	801a      	strh	r2, [r3, #0]
 8003c54:	183b      	adds	r3, r7, r0
 8003c56:	183a      	adds	r2, r7, r0
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	2120      	movs	r1, #32
 8003c5c:	404a      	eors	r2, r1
 8003c5e:	801a      	strh	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	001a      	movs	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	18d3      	adds	r3, r2, r3
 8003c6e:	183a      	adds	r2, r7, r0
 8003c70:	8812      	ldrh	r2, [r2, #0]
 8003c72:	4906      	ldr	r1, [pc, #24]	; (8003c8c <HAL_PCD_EP_DB_Transmit+0x7b0>)
 8003c74:	430a      	orrs	r2, r1
 8003c76:	b292      	uxth	r2, r2
 8003c78:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b022      	add	sp, #136	; 0x88
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	00000406 	.word	0x00000406
 8003c88:	ffff8fbf 	.word	0xffff8fbf
 8003c8c:	ffff8080 	.word	0xffff8080

08003c90 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c90:	b590      	push	{r4, r7, lr}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	0008      	movs	r0, r1
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	607b      	str	r3, [r7, #4]
 8003c9e:	240a      	movs	r4, #10
 8003ca0:	193b      	adds	r3, r7, r4
 8003ca2:	1c02      	adds	r2, r0, #0
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	1c0a      	adds	r2, r1, #0
 8003cac:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003cae:	0021      	movs	r1, r4
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	881b      	ldrh	r3, [r3, #0]
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cbe:	187b      	adds	r3, r7, r1
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	0013      	movs	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	189b      	adds	r3, r3, r2
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	18d3      	adds	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	e00b      	b.n	8003cf0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cd8:	230a      	movs	r3, #10
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	0013      	movs	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	189b      	adds	r3, r3, r2
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	3369      	adds	r3, #105	; 0x69
 8003ce8:	33ff      	adds	r3, #255	; 0xff
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	18d3      	adds	r3, r2, r3
 8003cee:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003cf0:	2308      	movs	r3, #8
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	881b      	ldrh	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d107      	bne.n	8003d0a <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	80da      	strh	r2, [r3, #6]
 8003d08:	e00b      	b.n	8003d22 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	0018      	movs	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	b007      	add	sp, #28
 8003d2a:	bd90      	pop	{r4, r7, pc}

08003d2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	23ba      	movs	r3, #186	; 0xba
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	2101      	movs	r1, #1
 8003d42:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	23b8      	movs	r3, #184	; 0xb8
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2254      	movs	r2, #84	; 0x54
 8003d52:	5a9b      	ldrh	r3, [r3, r2]
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	2201      	movs	r2, #1
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	b299      	uxth	r1, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2254      	movs	r2, #84	; 0x54
 8003d60:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2254      	movs	r2, #84	; 0x54
 8003d66:	5a9b      	ldrh	r3, [r3, r2]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	b299      	uxth	r1, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2254      	movs	r2, #84	; 0x54
 8003d74:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	0018      	movs	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b004      	add	sp, #16
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	000a      	movs	r2, r1
 8003d8a:	1cfb      	adds	r3, r7, #3
 8003d8c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b002      	add	sp, #8
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b5b0      	push	{r4, r5, r7, lr}
 8003d9a:	b08a      	sub	sp, #40	; 0x28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f000 fbbf 	bl	800452a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dac:	4bc9      	ldr	r3, [pc, #804]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	220c      	movs	r2, #12
 8003db2:	4013      	ands	r3, r2
 8003db4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db6:	4bc7      	ldr	r3, [pc, #796]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	2380      	movs	r3, #128	; 0x80
 8003dbc:	025b      	lsls	r3, r3, #9
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d100      	bne.n	8003dce <HAL_RCC_OscConfig+0x36>
 8003dcc:	e07e      	b.n	8003ecc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d007      	beq.n	8003de4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	2b0c      	cmp	r3, #12
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_OscConfig+0x68>
 8003dda:	69ba      	ldr	r2, [r7, #24]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	025b      	lsls	r3, r3, #9
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d10d      	bne.n	8003e00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	4bbb      	ldr	r3, [pc, #748]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	029b      	lsls	r3, r3, #10
 8003dec:	4013      	ands	r3, r2
 8003dee:	d100      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5a>
 8003df0:	e06b      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d167      	bne.n	8003eca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f000 fb95 	bl	800452a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685a      	ldr	r2, [r3, #4]
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	025b      	lsls	r3, r3, #9
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d107      	bne.n	8003e1c <HAL_RCC_OscConfig+0x84>
 8003e0c:	4bb1      	ldr	r3, [pc, #708]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	4bb0      	ldr	r3, [pc, #704]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	0249      	lsls	r1, r1, #9
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e027      	b.n	8003e6c <HAL_RCC_OscConfig+0xd4>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685a      	ldr	r2, [r3, #4]
 8003e20:	23a0      	movs	r3, #160	; 0xa0
 8003e22:	02db      	lsls	r3, r3, #11
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d10e      	bne.n	8003e46 <HAL_RCC_OscConfig+0xae>
 8003e28:	4baa      	ldr	r3, [pc, #680]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4ba9      	ldr	r3, [pc, #676]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e2e:	2180      	movs	r1, #128	; 0x80
 8003e30:	02c9      	lsls	r1, r1, #11
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	4ba7      	ldr	r3, [pc, #668]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	4ba6      	ldr	r3, [pc, #664]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	0249      	lsls	r1, r1, #9
 8003e40:	430a      	orrs	r2, r1
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e012      	b.n	8003e6c <HAL_RCC_OscConfig+0xd4>
 8003e46:	4ba3      	ldr	r3, [pc, #652]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4ba2      	ldr	r3, [pc, #648]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e4c:	49a2      	ldr	r1, [pc, #648]	; (80040d8 <HAL_RCC_OscConfig+0x340>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
 8003e52:	4ba0      	ldr	r3, [pc, #640]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	025b      	lsls	r3, r3, #9
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60fb      	str	r3, [r7, #12]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	4b9c      	ldr	r3, [pc, #624]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	4b9b      	ldr	r3, [pc, #620]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e66:	499d      	ldr	r1, [pc, #628]	; (80040dc <HAL_RCC_OscConfig+0x344>)
 8003e68:	400a      	ands	r2, r1
 8003e6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d015      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7fd f948 	bl	8001108 <HAL_GetTick>
 8003e78:	0003      	movs	r3, r0
 8003e7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e7c:	e009      	b.n	8003e92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e7e:	f7fd f943 	bl	8001108 <HAL_GetTick>
 8003e82:	0002      	movs	r2, r0
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b64      	cmp	r3, #100	; 0x64
 8003e8a:	d902      	bls.n	8003e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	f000 fb4c 	bl	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e92:	4b90      	ldr	r3, [pc, #576]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	029b      	lsls	r3, r3, #10
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d0ef      	beq.n	8003e7e <HAL_RCC_OscConfig+0xe6>
 8003e9e:	e015      	b.n	8003ecc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f932 	bl	8001108 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eaa:	f7fd f92d 	bl	8001108 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b64      	cmp	r3, #100	; 0x64
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e336      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003ebc:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	029b      	lsls	r3, r3, #10
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d1f0      	bne.n	8003eaa <HAL_RCC_OscConfig+0x112>
 8003ec8:	e000      	b.n	8003ecc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d100      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x140>
 8003ed6:	e099      	b.n	800400c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ee6:	4b7b      	ldr	r3, [pc, #492]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	4b7a      	ldr	r3, [pc, #488]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003eec:	2120      	movs	r1, #32
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d13e      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1ec>
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d13b      	bne.n	8003f84 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003f0c:	4b71      	ldr	r3, [pc, #452]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2204      	movs	r2, #4
 8003f12:	4013      	ands	r3, r2
 8003f14:	d004      	beq.n	8003f20 <HAL_RCC_OscConfig+0x188>
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d101      	bne.n	8003f20 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e304      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f20:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4a6e      	ldr	r2, [pc, #440]	; (80040e0 <HAL_RCC_OscConfig+0x348>)
 8003f26:	4013      	ands	r3, r2
 8003f28:	0019      	movs	r1, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	021a      	lsls	r2, r3, #8
 8003f30:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f32:	430a      	orrs	r2, r1
 8003f34:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f36:	4b67      	ldr	r3, [pc, #412]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2209      	movs	r2, #9
 8003f3c:	4393      	bics	r3, r2
 8003f3e:	0019      	movs	r1, r3
 8003f40:	4b64      	ldr	r3, [pc, #400]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f48:	f000 fc42 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8003f4c:	0001      	movs	r1, r0
 8003f4e:	4b61      	ldr	r3, [pc, #388]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	220f      	movs	r2, #15
 8003f56:	4013      	ands	r3, r2
 8003f58:	4a62      	ldr	r2, [pc, #392]	; (80040e4 <HAL_RCC_OscConfig+0x34c>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	000a      	movs	r2, r1
 8003f5e:	40da      	lsrs	r2, r3
 8003f60:	4b61      	ldr	r3, [pc, #388]	; (80040e8 <HAL_RCC_OscConfig+0x350>)
 8003f62:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f64:	4b61      	ldr	r3, [pc, #388]	; (80040ec <HAL_RCC_OscConfig+0x354>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2513      	movs	r5, #19
 8003f6a:	197c      	adds	r4, r7, r5
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7fd f885 	bl	800107c <HAL_InitTick>
 8003f72:	0003      	movs	r3, r0
 8003f74:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f76:	197b      	adds	r3, r7, r5
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d046      	beq.n	800400c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003f7e:	197b      	adds	r3, r7, r5
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	e2d2      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d027      	beq.n	8003fda <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f8a:	4b52      	ldr	r3, [pc, #328]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2209      	movs	r2, #9
 8003f90:	4393      	bics	r3, r2
 8003f92:	0019      	movs	r1, r3
 8003f94:	4b4f      	ldr	r3, [pc, #316]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9c:	f7fd f8b4 	bl	8001108 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fd f8af 	bl	8001108 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e2b8      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003fb8:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d0f1      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b44      	ldr	r3, [pc, #272]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a46      	ldr	r2, [pc, #280]	; (80040e0 <HAL_RCC_OscConfig+0x348>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	021a      	lsls	r2, r3, #8
 8003fd2:	4b40      	ldr	r3, [pc, #256]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	605a      	str	r2, [r3, #4]
 8003fd8:	e018      	b.n	800400c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fda:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fd f88f 	bl	8001108 <HAL_GetTick>
 8003fea:	0003      	movs	r3, r0
 8003fec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff0:	f7fd f88a 	bl	8001108 <HAL_GetTick>
 8003ff4:	0002      	movs	r2, r0
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e293      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004002:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2204      	movs	r2, #4
 8004008:	4013      	ands	r3, r2
 800400a:	d1f1      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	4013      	ands	r3, r2
 8004014:	d100      	bne.n	8004018 <HAL_RCC_OscConfig+0x280>
 8004016:	e0a2      	b.n	800415e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d140      	bne.n	80040a0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800401e:	4b2d      	ldr	r3, [pc, #180]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4013      	ands	r3, r2
 8004028:	d005      	beq.n	8004036 <HAL_RCC_OscConfig+0x29e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e279      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004036:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <HAL_RCC_OscConfig+0x358>)
 800403c:	4013      	ands	r3, r2
 800403e:	0019      	movs	r1, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800404a:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	0a19      	lsrs	r1, r3, #8
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	061a      	lsls	r2, r3, #24
 8004058:	4b1e      	ldr	r3, [pc, #120]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	0b5b      	lsrs	r3, r3, #13
 8004064:	3301      	adds	r3, #1
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	0212      	lsls	r2, r2, #8
 800406a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	210f      	movs	r1, #15
 8004074:	400b      	ands	r3, r1
 8004076:	491b      	ldr	r1, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x34c>)
 8004078:	5ccb      	ldrb	r3, [r1, r3]
 800407a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800407c:	4b1a      	ldr	r3, [pc, #104]	; (80040e8 <HAL_RCC_OscConfig+0x350>)
 800407e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004080:	4b1a      	ldr	r3, [pc, #104]	; (80040ec <HAL_RCC_OscConfig+0x354>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2513      	movs	r5, #19
 8004086:	197c      	adds	r4, r7, r5
 8004088:	0018      	movs	r0, r3
 800408a:	f7fc fff7 	bl	800107c <HAL_InitTick>
 800408e:	0003      	movs	r3, r0
 8004090:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004092:	197b      	adds	r3, r7, r5
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d061      	beq.n	800415e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800409a:	197b      	adds	r3, r7, r5
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	e244      	b.n	800452a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d040      	beq.n	800412a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040a8:	4b0a      	ldr	r3, [pc, #40]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_RCC_OscConfig+0x33c>)
 80040ae:	2180      	movs	r1, #128	; 0x80
 80040b0:	0049      	lsls	r1, r1, #1
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b6:	f7fd f827 	bl	8001108 <HAL_GetTick>
 80040ba:	0003      	movs	r3, r0
 80040bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040be:	e019      	b.n	80040f4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040c0:	f7fd f822 	bl	8001108 <HAL_GetTick>
 80040c4:	0002      	movs	r2, r0
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d912      	bls.n	80040f4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e22b      	b.n	800452a <HAL_RCC_OscConfig+0x792>
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	40021000 	.word	0x40021000
 80040d8:	fffeffff 	.word	0xfffeffff
 80040dc:	fffbffff 	.word	0xfffbffff
 80040e0:	ffffe0ff 	.word	0xffffe0ff
 80040e4:	0800a30c 	.word	0x0800a30c
 80040e8:	20000000 	.word	0x20000000
 80040ec:	20000004 	.word	0x20000004
 80040f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040f4:	4bca      	ldr	r3, [pc, #808]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	d0df      	beq.n	80040c0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004100:	4bc7      	ldr	r3, [pc, #796]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4ac7      	ldr	r2, [pc, #796]	; (8004424 <HAL_RCC_OscConfig+0x68c>)
 8004106:	4013      	ands	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800410e:	4bc4      	ldr	r3, [pc, #784]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004110:	430a      	orrs	r2, r1
 8004112:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004114:	4bc2      	ldr	r3, [pc, #776]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	0a19      	lsrs	r1, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	061a      	lsls	r2, r3, #24
 8004122:	4bbf      	ldr	r3, [pc, #764]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
 8004128:	e019      	b.n	800415e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800412a:	4bbd      	ldr	r3, [pc, #756]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	4bbc      	ldr	r3, [pc, #752]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004130:	49bd      	ldr	r1, [pc, #756]	; (8004428 <HAL_RCC_OscConfig+0x690>)
 8004132:	400a      	ands	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004136:	f7fc ffe7 	bl	8001108 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004140:	f7fc ffe2 	bl	8001108 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e1eb      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004152:	4bb3      	ldr	r3, [pc, #716]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4013      	ands	r3, r2
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2208      	movs	r2, #8
 8004164:	4013      	ands	r3, r2
 8004166:	d036      	beq.n	80041d6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	695b      	ldr	r3, [r3, #20]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d019      	beq.n	80041a4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004170:	4bab      	ldr	r3, [pc, #684]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004172:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004174:	4baa      	ldr	r3, [pc, #680]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004176:	2101      	movs	r1, #1
 8004178:	430a      	orrs	r2, r1
 800417a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417c:	f7fc ffc4 	bl	8001108 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004186:	f7fc ffbf 	bl	8001108 <HAL_GetTick>
 800418a:	0002      	movs	r2, r0
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1c8      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004198:	4ba1      	ldr	r3, [pc, #644]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800419a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419c:	2202      	movs	r2, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d0f1      	beq.n	8004186 <HAL_RCC_OscConfig+0x3ee>
 80041a2:	e018      	b.n	80041d6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a4:	4b9e      	ldr	r3, [pc, #632]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80041a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041a8:	4b9d      	ldr	r3, [pc, #628]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80041aa:	2101      	movs	r1, #1
 80041ac:	438a      	bics	r2, r1
 80041ae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b0:	f7fc ffaa 	bl	8001108 <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ba:	f7fc ffa5 	bl	8001108 <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1ae      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041cc:	4b94      	ldr	r3, [pc, #592]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80041ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d0:	2202      	movs	r2, #2
 80041d2:	4013      	ands	r3, r2
 80041d4:	d1f1      	bne.n	80041ba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2204      	movs	r2, #4
 80041dc:	4013      	ands	r3, r2
 80041de:	d100      	bne.n	80041e2 <HAL_RCC_OscConfig+0x44a>
 80041e0:	e0ae      	b.n	8004340 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e2:	2023      	movs	r0, #35	; 0x23
 80041e4:	183b      	adds	r3, r7, r0
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b8d      	ldr	r3, [pc, #564]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80041ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	055b      	lsls	r3, r3, #21
 80041f2:	4013      	ands	r3, r2
 80041f4:	d109      	bne.n	800420a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	4b8a      	ldr	r3, [pc, #552]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	4b89      	ldr	r3, [pc, #548]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80041fc:	2180      	movs	r1, #128	; 0x80
 80041fe:	0549      	lsls	r1, r1, #21
 8004200:	430a      	orrs	r2, r1
 8004202:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004204:	183b      	adds	r3, r7, r0
 8004206:	2201      	movs	r2, #1
 8004208:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b88      	ldr	r3, [pc, #544]	; (800442c <HAL_RCC_OscConfig+0x694>)
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	4013      	ands	r3, r2
 8004214:	d11a      	bne.n	800424c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b85      	ldr	r3, [pc, #532]	; (800442c <HAL_RCC_OscConfig+0x694>)
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b84      	ldr	r3, [pc, #528]	; (800442c <HAL_RCC_OscConfig+0x694>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0049      	lsls	r1, r1, #1
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004224:	f7fc ff70 	bl	8001108 <HAL_GetTick>
 8004228:	0003      	movs	r3, r0
 800422a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800422c:	e008      	b.n	8004240 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422e:	f7fc ff6b 	bl	8001108 <HAL_GetTick>
 8004232:	0002      	movs	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b64      	cmp	r3, #100	; 0x64
 800423a:	d901      	bls.n	8004240 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e174      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004240:	4b7a      	ldr	r3, [pc, #488]	; (800442c <HAL_RCC_OscConfig+0x694>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	2380      	movs	r3, #128	; 0x80
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4013      	ands	r3, r2
 800424a:	d0f0      	beq.n	800422e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	429a      	cmp	r2, r3
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x4d0>
 8004258:	4b71      	ldr	r3, [pc, #452]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800425a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800425c:	4b70      	ldr	r3, [pc, #448]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800425e:	2180      	movs	r1, #128	; 0x80
 8004260:	0049      	lsls	r1, r1, #1
 8004262:	430a      	orrs	r2, r1
 8004264:	651a      	str	r2, [r3, #80]	; 0x50
 8004266:	e031      	b.n	80042cc <HAL_RCC_OscConfig+0x534>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0x4f2>
 8004270:	4b6b      	ldr	r3, [pc, #428]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004272:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004274:	4b6a      	ldr	r3, [pc, #424]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004276:	496c      	ldr	r1, [pc, #432]	; (8004428 <HAL_RCC_OscConfig+0x690>)
 8004278:	400a      	ands	r2, r1
 800427a:	651a      	str	r2, [r3, #80]	; 0x50
 800427c:	4b68      	ldr	r3, [pc, #416]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800427e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004280:	4b67      	ldr	r3, [pc, #412]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004282:	496b      	ldr	r1, [pc, #428]	; (8004430 <HAL_RCC_OscConfig+0x698>)
 8004284:	400a      	ands	r2, r1
 8004286:	651a      	str	r2, [r3, #80]	; 0x50
 8004288:	e020      	b.n	80042cc <HAL_RCC_OscConfig+0x534>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	23a0      	movs	r3, #160	; 0xa0
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	429a      	cmp	r2, r3
 8004294:	d10e      	bne.n	80042b4 <HAL_RCC_OscConfig+0x51c>
 8004296:	4b62      	ldr	r3, [pc, #392]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004298:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800429a:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800429c:	2180      	movs	r1, #128	; 0x80
 800429e:	00c9      	lsls	r1, r1, #3
 80042a0:	430a      	orrs	r2, r1
 80042a2:	651a      	str	r2, [r3, #80]	; 0x50
 80042a4:	4b5e      	ldr	r3, [pc, #376]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a8:	4b5d      	ldr	r3, [pc, #372]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042aa:	2180      	movs	r1, #128	; 0x80
 80042ac:	0049      	lsls	r1, r1, #1
 80042ae:	430a      	orrs	r2, r1
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50
 80042b2:	e00b      	b.n	80042cc <HAL_RCC_OscConfig+0x534>
 80042b4:	4b5a      	ldr	r3, [pc, #360]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042b8:	4b59      	ldr	r3, [pc, #356]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042ba:	495b      	ldr	r1, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x690>)
 80042bc:	400a      	ands	r2, r1
 80042be:	651a      	str	r2, [r3, #80]	; 0x50
 80042c0:	4b57      	ldr	r3, [pc, #348]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042c4:	4b56      	ldr	r3, [pc, #344]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042c6:	495a      	ldr	r1, [pc, #360]	; (8004430 <HAL_RCC_OscConfig+0x698>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d015      	beq.n	8004300 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d4:	f7fc ff18 	bl	8001108 <HAL_GetTick>
 80042d8:	0003      	movs	r3, r0
 80042da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042dc:	e009      	b.n	80042f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fc ff13 	bl	8001108 <HAL_GetTick>
 80042e2:	0002      	movs	r2, r0
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	4a52      	ldr	r2, [pc, #328]	; (8004434 <HAL_RCC_OscConfig+0x69c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e11b      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042f2:	4b4b      	ldr	r3, [pc, #300]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80042f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042f6:	2380      	movs	r3, #128	; 0x80
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d0ef      	beq.n	80042de <HAL_RCC_OscConfig+0x546>
 80042fe:	e014      	b.n	800432a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004300:	f7fc ff02 	bl	8001108 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004308:	e009      	b.n	800431e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430a:	f7fc fefd 	bl	8001108 <HAL_GetTick>
 800430e:	0002      	movs	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	4a47      	ldr	r2, [pc, #284]	; (8004434 <HAL_RCC_OscConfig+0x69c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e105      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800431e:	4b40      	ldr	r3, [pc, #256]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4013      	ands	r3, r2
 8004328:	d1ef      	bne.n	800430a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800432a:	2323      	movs	r3, #35	; 0x23
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004334:	4b3a      	ldr	r3, [pc, #232]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 800433a:	493f      	ldr	r1, [pc, #252]	; (8004438 <HAL_RCC_OscConfig+0x6a0>)
 800433c:	400a      	ands	r2, r1
 800433e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2220      	movs	r2, #32
 8004346:	4013      	ands	r3, r2
 8004348:	d049      	beq.n	80043de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d026      	beq.n	80043a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004352:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	4b32      	ldr	r3, [pc, #200]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004358:	2101      	movs	r1, #1
 800435a:	430a      	orrs	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	4b2f      	ldr	r3, [pc, #188]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004364:	2101      	movs	r1, #1
 8004366:	430a      	orrs	r2, r1
 8004368:	635a      	str	r2, [r3, #52]	; 0x34
 800436a:	4b34      	ldr	r3, [pc, #208]	; (800443c <HAL_RCC_OscConfig+0x6a4>)
 800436c:	6a1a      	ldr	r2, [r3, #32]
 800436e:	4b33      	ldr	r3, [pc, #204]	; (800443c <HAL_RCC_OscConfig+0x6a4>)
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	0189      	lsls	r1, r1, #6
 8004374:	430a      	orrs	r2, r1
 8004376:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fc fec6 	bl	8001108 <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004380:	e008      	b.n	8004394 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004382:	f7fc fec1 	bl	8001108 <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e0ca      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2202      	movs	r2, #2
 800439a:	4013      	ands	r3, r2
 800439c:	d0f1      	beq.n	8004382 <HAL_RCC_OscConfig+0x5ea>
 800439e:	e01e      	b.n	80043de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80043a0:	4b1f      	ldr	r3, [pc, #124]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	4b1e      	ldr	r3, [pc, #120]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80043a6:	2101      	movs	r1, #1
 80043a8:	438a      	bics	r2, r1
 80043aa:	609a      	str	r2, [r3, #8]
 80043ac:	4b23      	ldr	r3, [pc, #140]	; (800443c <HAL_RCC_OscConfig+0x6a4>)
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_OscConfig+0x6a4>)
 80043b2:	4923      	ldr	r1, [pc, #140]	; (8004440 <HAL_RCC_OscConfig+0x6a8>)
 80043b4:	400a      	ands	r2, r1
 80043b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fc fea6 	bl	8001108 <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043c2:	f7fc fea1 	bl	8001108 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0aa      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043d4:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2202      	movs	r2, #2
 80043da:	4013      	ands	r3, r2
 80043dc:	d1f1      	bne.n	80043c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d100      	bne.n	80043e8 <HAL_RCC_OscConfig+0x650>
 80043e6:	e09f      	b.n	8004528 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d100      	bne.n	80043f0 <HAL_RCC_OscConfig+0x658>
 80043ee:	e078      	b.n	80044e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d159      	bne.n	80044ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_RCC_OscConfig+0x688>)
 80043fe:	4911      	ldr	r1, [pc, #68]	; (8004444 <HAL_RCC_OscConfig+0x6ac>)
 8004400:	400a      	ands	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fc fe80 	bl	8001108 <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800440c:	e01c      	b.n	8004448 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800440e:	f7fc fe7b 	bl	8001108 <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d915      	bls.n	8004448 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e084      	b.n	800452a <HAL_RCC_OscConfig+0x792>
 8004420:	40021000 	.word	0x40021000
 8004424:	ffff1fff 	.word	0xffff1fff
 8004428:	fffffeff 	.word	0xfffffeff
 800442c:	40007000 	.word	0x40007000
 8004430:	fffffbff 	.word	0xfffffbff
 8004434:	00001388 	.word	0x00001388
 8004438:	efffffff 	.word	0xefffffff
 800443c:	40010000 	.word	0x40010000
 8004440:	ffffdfff 	.word	0xffffdfff
 8004444:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004448:	4b3a      	ldr	r3, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	049b      	lsls	r3, r3, #18
 8004450:	4013      	ands	r3, r2
 8004452:	d1dc      	bne.n	800440e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004454:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	4a37      	ldr	r2, [pc, #220]	; (8004538 <HAL_RCC_OscConfig+0x7a0>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800446c:	431a      	orrs	r2, r3
 800446e:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 8004470:	430a      	orrs	r2, r1
 8004472:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004474:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b2e      	ldr	r3, [pc, #184]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 800447a:	2180      	movs	r1, #128	; 0x80
 800447c:	0449      	lsls	r1, r1, #17
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004482:	f7fc fe41 	bl	8001108 <HAL_GetTick>
 8004486:	0003      	movs	r3, r0
 8004488:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800448c:	f7fc fe3c 	bl	8001108 <HAL_GetTick>
 8004490:	0002      	movs	r2, r0
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e045      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800449e:	4b25      	ldr	r3, [pc, #148]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	049b      	lsls	r3, r3, #18
 80044a6:	4013      	ands	r3, r2
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x6f4>
 80044aa:	e03d      	b.n	8004528 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ac:	4b21      	ldr	r3, [pc, #132]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b20      	ldr	r3, [pc, #128]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 80044b2:	4922      	ldr	r1, [pc, #136]	; (800453c <HAL_RCC_OscConfig+0x7a4>)
 80044b4:	400a      	ands	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fc fe26 	bl	8001108 <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044c0:	e008      	b.n	80044d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c2:	f7fc fe21 	bl	8001108 <HAL_GetTick>
 80044c6:	0002      	movs	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e02a      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044d4:	4b17      	ldr	r3, [pc, #92]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	049b      	lsls	r3, r3, #18
 80044dc:	4013      	ands	r3, r2
 80044de:	d1f0      	bne.n	80044c2 <HAL_RCC_OscConfig+0x72a>
 80044e0:	e022      	b.n	8004528 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e01d      	b.n	800452a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ee:	4b11      	ldr	r3, [pc, #68]	; (8004534 <HAL_RCC_OscConfig+0x79c>)
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	2380      	movs	r3, #128	; 0x80
 80044f8:	025b      	lsls	r3, r3, #9
 80044fa:	401a      	ands	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	429a      	cmp	r2, r3
 8004502:	d10f      	bne.n	8004524 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004504:	69ba      	ldr	r2, [r7, #24]
 8004506:	23f0      	movs	r3, #240	; 0xf0
 8004508:	039b      	lsls	r3, r3, #14
 800450a:	401a      	ands	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004510:	429a      	cmp	r2, r3
 8004512:	d107      	bne.n	8004524 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	23c0      	movs	r3, #192	; 0xc0
 8004518:	041b      	lsls	r3, r3, #16
 800451a:	401a      	ands	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e000      	b.n	800452a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b00a      	add	sp, #40	; 0x28
 8004530:	bdb0      	pop	{r4, r5, r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40021000 	.word	0x40021000
 8004538:	ff02ffff 	.word	0xff02ffff
 800453c:	feffffff 	.word	0xfeffffff

08004540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b5b0      	push	{r4, r5, r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e128      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b96      	ldr	r3, [pc, #600]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2201      	movs	r2, #1
 800455a:	4013      	ands	r3, r2
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d91e      	bls.n	80045a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b93      	ldr	r3, [pc, #588]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2201      	movs	r2, #1
 8004568:	4393      	bics	r3, r2
 800456a:	0019      	movs	r1, r3
 800456c:	4b90      	ldr	r3, [pc, #576]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004574:	f7fc fdc8 	bl	8001108 <HAL_GetTick>
 8004578:	0003      	movs	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800457c:	e009      	b.n	8004592 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800457e:	f7fc fdc3 	bl	8001108 <HAL_GetTick>
 8004582:	0002      	movs	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	4a8a      	ldr	r2, [pc, #552]	; (80047b4 <HAL_RCC_ClockConfig+0x274>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e109      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	4013      	ands	r3, r2
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d1ee      	bne.n	800457e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2202      	movs	r2, #2
 80045a6:	4013      	ands	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045aa:	4b83      	ldr	r3, [pc, #524]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	22f0      	movs	r2, #240	; 0xf0
 80045b0:	4393      	bics	r3, r2
 80045b2:	0019      	movs	r1, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	4b7f      	ldr	r3, [pc, #508]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2201      	movs	r2, #1
 80045c4:	4013      	ands	r3, r2
 80045c6:	d100      	bne.n	80045ca <HAL_RCC_ClockConfig+0x8a>
 80045c8:	e089      	b.n	80046de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d107      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045d2:	4b79      	ldr	r3, [pc, #484]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	029b      	lsls	r3, r3, #10
 80045da:	4013      	ands	r3, r2
 80045dc:	d120      	bne.n	8004620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e0e1      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045ea:	4b73      	ldr	r3, [pc, #460]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	2380      	movs	r3, #128	; 0x80
 80045f0:	049b      	lsls	r3, r3, #18
 80045f2:	4013      	ands	r3, r2
 80045f4:	d114      	bne.n	8004620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e0d5      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d106      	bne.n	8004610 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004602:	4b6d      	ldr	r3, [pc, #436]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2204      	movs	r2, #4
 8004608:	4013      	ands	r3, r2
 800460a:	d109      	bne.n	8004620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0ca      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004610:	4b69      	ldr	r3, [pc, #420]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4013      	ands	r3, r2
 800461a:	d101      	bne.n	8004620 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0c2      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004620:	4b65      	ldr	r3, [pc, #404]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2203      	movs	r2, #3
 8004626:	4393      	bics	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004630:	430a      	orrs	r2, r1
 8004632:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004634:	f7fc fd68 	bl	8001108 <HAL_GetTick>
 8004638:	0003      	movs	r3, r0
 800463a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b02      	cmp	r3, #2
 8004642:	d111      	bne.n	8004668 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004644:	e009      	b.n	800465a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004646:	f7fc fd5f 	bl	8001108 <HAL_GetTick>
 800464a:	0002      	movs	r2, r0
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	4a58      	ldr	r2, [pc, #352]	; (80047b4 <HAL_RCC_ClockConfig+0x274>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e0a5      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800465a:	4b57      	ldr	r3, [pc, #348]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	220c      	movs	r2, #12
 8004660:	4013      	ands	r3, r2
 8004662:	2b08      	cmp	r3, #8
 8004664:	d1ef      	bne.n	8004646 <HAL_RCC_ClockConfig+0x106>
 8004666:	e03a      	b.n	80046de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d111      	bne.n	8004694 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004670:	e009      	b.n	8004686 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004672:	f7fc fd49 	bl	8001108 <HAL_GetTick>
 8004676:	0002      	movs	r2, r0
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	4a4d      	ldr	r2, [pc, #308]	; (80047b4 <HAL_RCC_ClockConfig+0x274>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e08f      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004686:	4b4c      	ldr	r3, [pc, #304]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	220c      	movs	r2, #12
 800468c:	4013      	ands	r3, r2
 800468e:	2b0c      	cmp	r3, #12
 8004690:	d1ef      	bne.n	8004672 <HAL_RCC_ClockConfig+0x132>
 8004692:	e024      	b.n	80046de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d11b      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800469c:	e009      	b.n	80046b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469e:	f7fc fd33 	bl	8001108 <HAL_GetTick>
 80046a2:	0002      	movs	r2, r0
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	4a42      	ldr	r2, [pc, #264]	; (80047b4 <HAL_RCC_ClockConfig+0x274>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e079      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046b2:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	220c      	movs	r2, #12
 80046b8:	4013      	ands	r3, r2
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d1ef      	bne.n	800469e <HAL_RCC_ClockConfig+0x15e>
 80046be:	e00e      	b.n	80046de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fc fd22 	bl	8001108 <HAL_GetTick>
 80046c4:	0002      	movs	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <HAL_RCC_ClockConfig+0x274>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e068      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046d4:	4b38      	ldr	r3, [pc, #224]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	220c      	movs	r2, #12
 80046da:	4013      	ands	r3, r2
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	4013      	ands	r3, r2
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d21e      	bcs.n	800472a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ec:	4b30      	ldr	r3, [pc, #192]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2201      	movs	r2, #1
 80046f2:	4393      	bics	r3, r2
 80046f4:	0019      	movs	r1, r3
 80046f6:	4b2e      	ldr	r3, [pc, #184]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046fe:	f7fc fd03 	bl	8001108 <HAL_GetTick>
 8004702:	0003      	movs	r3, r0
 8004704:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	e009      	b.n	800471c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004708:	f7fc fcfe 	bl	8001108 <HAL_GetTick>
 800470c:	0002      	movs	r2, r0
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	4a28      	ldr	r2, [pc, #160]	; (80047b4 <HAL_RCC_ClockConfig+0x274>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d901      	bls.n	800471c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e044      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471c:	4b24      	ldr	r3, [pc, #144]	; (80047b0 <HAL_RCC_ClockConfig+0x270>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2201      	movs	r2, #1
 8004722:	4013      	ands	r3, r2
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	429a      	cmp	r2, r3
 8004728:	d1ee      	bne.n	8004708 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2204      	movs	r2, #4
 8004730:	4013      	ands	r3, r2
 8004732:	d009      	beq.n	8004748 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004734:	4b20      	ldr	r3, [pc, #128]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_RCC_ClockConfig+0x27c>)
 800473a:	4013      	ands	r3, r2
 800473c:	0019      	movs	r1, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004744:	430a      	orrs	r2, r1
 8004746:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2208      	movs	r2, #8
 800474e:	4013      	ands	r3, r2
 8004750:	d00a      	beq.n	8004768 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004752:	4b19      	ldr	r3, [pc, #100]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	4a1a      	ldr	r2, [pc, #104]	; (80047c0 <HAL_RCC_ClockConfig+0x280>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	00da      	lsls	r2, r3, #3
 8004762:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004764:	430a      	orrs	r2, r1
 8004766:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004768:	f000 f832 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800476c:	0001      	movs	r1, r0
 800476e:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <HAL_RCC_ClockConfig+0x278>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	091b      	lsrs	r3, r3, #4
 8004774:	220f      	movs	r2, #15
 8004776:	4013      	ands	r3, r2
 8004778:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <HAL_RCC_ClockConfig+0x284>)
 800477a:	5cd3      	ldrb	r3, [r2, r3]
 800477c:	000a      	movs	r2, r1
 800477e:	40da      	lsrs	r2, r3
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <HAL_RCC_ClockConfig+0x288>)
 8004782:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004784:	4b11      	ldr	r3, [pc, #68]	; (80047cc <HAL_RCC_ClockConfig+0x28c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	250b      	movs	r5, #11
 800478a:	197c      	adds	r4, r7, r5
 800478c:	0018      	movs	r0, r3
 800478e:	f7fc fc75 	bl	800107c <HAL_InitTick>
 8004792:	0003      	movs	r3, r0
 8004794:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004796:	197b      	adds	r3, r7, r5
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800479e:	197b      	adds	r3, r7, r5
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	e000      	b.n	80047a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b004      	add	sp, #16
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	40022000 	.word	0x40022000
 80047b4:	00001388 	.word	0x00001388
 80047b8:	40021000 	.word	0x40021000
 80047bc:	fffff8ff 	.word	0xfffff8ff
 80047c0:	ffffc7ff 	.word	0xffffc7ff
 80047c4:	0800a30c 	.word	0x0800a30c
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000004 	.word	0x20000004

080047d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b5b0      	push	{r4, r5, r7, lr}
 80047d2:	b08e      	sub	sp, #56	; 0x38
 80047d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80047d6:	4b4c      	ldr	r3, [pc, #304]	; (8004908 <HAL_RCC_GetSysClockFreq+0x138>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047de:	230c      	movs	r3, #12
 80047e0:	4013      	ands	r3, r2
 80047e2:	2b0c      	cmp	r3, #12
 80047e4:	d014      	beq.n	8004810 <HAL_RCC_GetSysClockFreq+0x40>
 80047e6:	d900      	bls.n	80047ea <HAL_RCC_GetSysClockFreq+0x1a>
 80047e8:	e07b      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x112>
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d002      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0x24>
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d00b      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0x3a>
 80047f2:	e076      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047f4:	4b44      	ldr	r3, [pc, #272]	; (8004908 <HAL_RCC_GetSysClockFreq+0x138>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2210      	movs	r2, #16
 80047fa:	4013      	ands	r3, r2
 80047fc:	d002      	beq.n	8004804 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047fe:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004802:	e07c      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004804:	4b42      	ldr	r3, [pc, #264]	; (8004910 <HAL_RCC_GetSysClockFreq+0x140>)
 8004806:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004808:	e079      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800480a:	4b42      	ldr	r3, [pc, #264]	; (8004914 <HAL_RCC_GetSysClockFreq+0x144>)
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800480e:	e076      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	0c9a      	lsrs	r2, r3, #18
 8004814:	230f      	movs	r3, #15
 8004816:	401a      	ands	r2, r3
 8004818:	4b3f      	ldr	r3, [pc, #252]	; (8004918 <HAL_RCC_GetSysClockFreq+0x148>)
 800481a:	5c9b      	ldrb	r3, [r3, r2]
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	0d9a      	lsrs	r2, r3, #22
 8004822:	2303      	movs	r3, #3
 8004824:	4013      	ands	r3, r2
 8004826:	3301      	adds	r3, #1
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800482a:	4b37      	ldr	r3, [pc, #220]	; (8004908 <HAL_RCC_GetSysClockFreq+0x138>)
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	2380      	movs	r3, #128	; 0x80
 8004830:	025b      	lsls	r3, r3, #9
 8004832:	4013      	ands	r3, r2
 8004834:	d01a      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	4a35      	ldr	r2, [pc, #212]	; (8004914 <HAL_RCC_GetSysClockFreq+0x144>)
 8004840:	2300      	movs	r3, #0
 8004842:	69b8      	ldr	r0, [r7, #24]
 8004844:	69f9      	ldr	r1, [r7, #28]
 8004846:	f7fb fd1d 	bl	8000284 <__aeabi_lmul>
 800484a:	0002      	movs	r2, r0
 800484c:	000b      	movs	r3, r1
 800484e:	0010      	movs	r0, r2
 8004850:	0019      	movs	r1, r3
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	2300      	movs	r3, #0
 8004858:	617b      	str	r3, [r7, #20]
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f7fb fcf1 	bl	8000244 <__aeabi_uldivmod>
 8004862:	0002      	movs	r2, r0
 8004864:	000b      	movs	r3, r1
 8004866:	0013      	movs	r3, r2
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
 800486a:	e037      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800486c:	4b26      	ldr	r3, [pc, #152]	; (8004908 <HAL_RCC_GetSysClockFreq+0x138>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2210      	movs	r2, #16
 8004872:	4013      	ands	r3, r2
 8004874:	d01a      	beq.n	80048ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	4a23      	ldr	r2, [pc, #140]	; (800490c <HAL_RCC_GetSysClockFreq+0x13c>)
 8004880:	2300      	movs	r3, #0
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	f7fb fcfd 	bl	8000284 <__aeabi_lmul>
 800488a:	0002      	movs	r2, r0
 800488c:	000b      	movs	r3, r1
 800488e:	0010      	movs	r0, r2
 8004890:	0019      	movs	r1, r3
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	603b      	str	r3, [r7, #0]
 8004896:	2300      	movs	r3, #0
 8004898:	607b      	str	r3, [r7, #4]
 800489a:	683a      	ldr	r2, [r7, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f7fb fcd1 	bl	8000244 <__aeabi_uldivmod>
 80048a2:	0002      	movs	r2, r0
 80048a4:	000b      	movs	r3, r1
 80048a6:	0013      	movs	r3, r2
 80048a8:	637b      	str	r3, [r7, #52]	; 0x34
 80048aa:	e017      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	0018      	movs	r0, r3
 80048b0:	2300      	movs	r3, #0
 80048b2:	0019      	movs	r1, r3
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <HAL_RCC_GetSysClockFreq+0x140>)
 80048b6:	2300      	movs	r3, #0
 80048b8:	f7fb fce4 	bl	8000284 <__aeabi_lmul>
 80048bc:	0002      	movs	r2, r0
 80048be:	000b      	movs	r3, r1
 80048c0:	0010      	movs	r0, r2
 80048c2:	0019      	movs	r1, r3
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	001c      	movs	r4, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	001d      	movs	r5, r3
 80048cc:	0022      	movs	r2, r4
 80048ce:	002b      	movs	r3, r5
 80048d0:	f7fb fcb8 	bl	8000244 <__aeabi_uldivmod>
 80048d4:	0002      	movs	r2, r0
 80048d6:	000b      	movs	r3, r1
 80048d8:	0013      	movs	r3, r2
 80048da:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80048dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048e0:	e00d      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80048e2:	4b09      	ldr	r3, [pc, #36]	; (8004908 <HAL_RCC_GetSysClockFreq+0x138>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	0b5b      	lsrs	r3, r3, #13
 80048e8:	2207      	movs	r2, #7
 80048ea:	4013      	ands	r3, r2
 80048ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	3301      	adds	r3, #1
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	0212      	lsls	r2, r2, #8
 80048f6:	409a      	lsls	r2, r3
 80048f8:	0013      	movs	r3, r2
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80048fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b00e      	add	sp, #56	; 0x38
 8004906:	bdb0      	pop	{r4, r5, r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	003d0900 	.word	0x003d0900
 8004910:	00f42400 	.word	0x00f42400
 8004914:	007a1200 	.word	0x007a1200
 8004918:	0800a324 	.word	0x0800a324

0800491c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <HAL_RCC_GetHCLKFreq+0x10>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	0018      	movs	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	20000000 	.word	0x20000000

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff2 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004938:	0001      	movs	r1, r0
 800493a:	4b06      	ldr	r3, [pc, #24]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	2207      	movs	r2, #7
 8004942:	4013      	ands	r3, r2
 8004944:	4a04      	ldr	r2, [pc, #16]	; (8004958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	40d9      	lsrs	r1, r3
 800494a:	000b      	movs	r3, r1
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	46c0      	nop			; (mov r8, r8)
 8004954:	40021000 	.word	0x40021000
 8004958:	0800a31c 	.word	0x0800a31c

0800495c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004960:	f7ff ffdc 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004964:	0001      	movs	r1, r0
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	0adb      	lsrs	r3, r3, #11
 800496c:	2207      	movs	r2, #7
 800496e:	4013      	ands	r3, r2
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004972:	5cd3      	ldrb	r3, [r2, r3]
 8004974:	40d9      	lsrs	r1, r3
 8004976:	000b      	movs	r3, r1
}
 8004978:	0018      	movs	r0, r3
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	46c0      	nop			; (mov r8, r8)
 8004980:	40021000 	.word	0x40021000
 8004984:	0800a31c 	.word	0x0800a31c

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004990:	2317      	movs	r3, #23
 8004992:	18fb      	adds	r3, r7, r3
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2220      	movs	r2, #32
 800499e:	4013      	ands	r3, r2
 80049a0:	d106      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	4013      	ands	r3, r2
 80049ac:	d100      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80049ae:	e0d9      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049b0:	4ba4      	ldr	r3, [pc, #656]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	055b      	lsls	r3, r3, #21
 80049b8:	4013      	ands	r3, r2
 80049ba:	d10a      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049bc:	4ba1      	ldr	r3, [pc, #644]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049c0:	4ba0      	ldr	r3, [pc, #640]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80049c2:	2180      	movs	r1, #128	; 0x80
 80049c4:	0549      	lsls	r1, r1, #21
 80049c6:	430a      	orrs	r2, r1
 80049c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80049ca:	2317      	movs	r3, #23
 80049cc:	18fb      	adds	r3, r7, r3
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d2:	4b9d      	ldr	r3, [pc, #628]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	2380      	movs	r3, #128	; 0x80
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4013      	ands	r3, r2
 80049dc:	d11a      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049de:	4b9a      	ldr	r3, [pc, #616]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b99      	ldr	r3, [pc, #612]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049e4:	2180      	movs	r1, #128	; 0x80
 80049e6:	0049      	lsls	r1, r1, #1
 80049e8:	430a      	orrs	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ec:	f7fc fb8c 	bl	8001108 <HAL_GetTick>
 80049f0:	0003      	movs	r3, r0
 80049f2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f4:	e008      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049f6:	f7fc fb87 	bl	8001108 <HAL_GetTick>
 80049fa:	0002      	movs	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b64      	cmp	r3, #100	; 0x64
 8004a02:	d901      	bls.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e118      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b8f      	ldr	r3, [pc, #572]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	2380      	movs	r3, #128	; 0x80
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4013      	ands	r3, r2
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004a14:	4b8b      	ldr	r3, [pc, #556]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	23c0      	movs	r3, #192	; 0xc0
 8004a1a:	039b      	lsls	r3, r3, #14
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685a      	ldr	r2, [r3, #4]
 8004a24:	23c0      	movs	r3, #192	; 0xc0
 8004a26:	039b      	lsls	r3, r3, #14
 8004a28:	4013      	ands	r3, r2
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d107      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	23c0      	movs	r3, #192	; 0xc0
 8004a36:	039b      	lsls	r3, r3, #14
 8004a38:	4013      	ands	r3, r2
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d013      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	23c0      	movs	r3, #192	; 0xc0
 8004a46:	029b      	lsls	r3, r3, #10
 8004a48:	401a      	ands	r2, r3
 8004a4a:	23c0      	movs	r3, #192	; 0xc0
 8004a4c:	029b      	lsls	r3, r3, #10
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d10a      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a52:	4b7c      	ldr	r3, [pc, #496]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	2380      	movs	r3, #128	; 0x80
 8004a58:	029b      	lsls	r3, r3, #10
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	029b      	lsls	r3, r3, #10
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d101      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0e8      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a68:	4b76      	ldr	r3, [pc, #472]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004a6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a6c:	23c0      	movs	r3, #192	; 0xc0
 8004a6e:	029b      	lsls	r3, r3, #10
 8004a70:	4013      	ands	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d049      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	23c0      	movs	r3, #192	; 0xc0
 8004a80:	029b      	lsls	r3, r3, #10
 8004a82:	4013      	ands	r3, r2
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d004      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	4013      	ands	r3, r2
 8004a92:	d10d      	bne.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	23c0      	movs	r3, #192	; 0xc0
 8004a9a:	029b      	lsls	r3, r3, #10
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d034      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	4013      	ands	r3, r2
 8004aae:	d02e      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004ab0:	4b64      	ldr	r3, [pc, #400]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab4:	4a65      	ldr	r2, [pc, #404]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aba:	4b62      	ldr	r3, [pc, #392]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004abe:	4b61      	ldr	r3, [pc, #388]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ac0:	2180      	movs	r1, #128	; 0x80
 8004ac2:	0309      	lsls	r1, r1, #12
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac8:	4b5e      	ldr	r3, [pc, #376]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004aca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004acc:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ace:	4960      	ldr	r1, [pc, #384]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004ad4:	4b5b      	ldr	r3, [pc, #364]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	2380      	movs	r3, #128	; 0x80
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	d014      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae4:	f7fc fb10 	bl	8001108 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004aec:	e009      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7fc fb0b 	bl	8001108 <HAL_GetTick>
 8004af2:	0002      	movs	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	4a56      	ldr	r2, [pc, #344]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e09b      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b02:	4b50      	ldr	r3, [pc, #320]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d0ef      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	23c0      	movs	r3, #192	; 0xc0
 8004b14:	029b      	lsls	r3, r3, #10
 8004b16:	401a      	ands	r2, r3
 8004b18:	23c0      	movs	r3, #192	; 0xc0
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d10c      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8004b20:	4b48      	ldr	r3, [pc, #288]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a4c      	ldr	r2, [pc, #304]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004b26:	4013      	ands	r3, r2
 8004b28:	0019      	movs	r1, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685a      	ldr	r2, [r3, #4]
 8004b2e:	23c0      	movs	r3, #192	; 0xc0
 8004b30:	039b      	lsls	r3, r3, #14
 8004b32:	401a      	ands	r2, r3
 8004b34:	4b43      	ldr	r3, [pc, #268]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	4b42      	ldr	r3, [pc, #264]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	23c0      	movs	r3, #192	; 0xc0
 8004b44:	029b      	lsls	r3, r3, #10
 8004b46:	401a      	ands	r2, r3
 8004b48:	4b3e      	ldr	r3, [pc, #248]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b4e:	2317      	movs	r3, #23
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d105      	bne.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b5c:	4b39      	ldr	r3, [pc, #228]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b5e:	493f      	ldr	r1, [pc, #252]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004b60:	400a      	ands	r2, r1
 8004b62:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b6e:	4b35      	ldr	r3, [pc, #212]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	2203      	movs	r2, #3
 8004b74:	4393      	bics	r3, r2
 8004b76:	0019      	movs	r1, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	4b31      	ldr	r3, [pc, #196]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2202      	movs	r2, #2
 8004b88:	4013      	ands	r3, r2
 8004b8a:	d009      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	220c      	movs	r2, #12
 8004b92:	4393      	bics	r3, r2
 8004b94:	0019      	movs	r1, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	4b2a      	ldr	r3, [pc, #168]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d009      	beq.n	8004bbe <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004baa:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bae:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	0019      	movs	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	695a      	ldr	r2, [r3, #20]
 8004bb8:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bba:	430a      	orrs	r2, r1
 8004bbc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bc8:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	0019      	movs	r1, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699a      	ldr	r2, [r3, #24]
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	2380      	movs	r3, #128	; 0x80
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4013      	ands	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bec:	4a17      	ldr	r2, [pc, #92]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bee:	4013      	ands	r3, r2
 8004bf0:	0019      	movs	r1, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	69da      	ldr	r2, [r3, #28]
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	4013      	ands	r3, r2
 8004c04:	d009      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c06:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	0019      	movs	r1, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c14:	4b0b      	ldr	r3, [pc, #44]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c16:	430a      	orrs	r2, r1
 8004c18:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	4013      	ands	r3, r2
 8004c22:	d009      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c24:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c28:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	0019      	movs	r1, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1a      	ldr	r2, [r3, #32]
 8004c32:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004c34:	430a      	orrs	r2, r1
 8004c36:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b006      	add	sp, #24
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	fffcffff 	.word	0xfffcffff
 8004c50:	fff7ffff 	.word	0xfff7ffff
 8004c54:	00001388 	.word	0x00001388
 8004c58:	ffcfffff 	.word	0xffcfffff
 8004c5c:	efffffff 	.word	0xefffffff
 8004c60:	fffff3ff 	.word	0xfffff3ff
 8004c64:	ffffcfff 	.word	0xffffcfff
 8004c68:	fbffffff 	.word	0xfbffffff
 8004c6c:	fff3ffff 	.word	0xfff3ffff

08004c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e044      	b.n	8004d0c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2274      	movs	r2, #116	; 0x74
 8004c8e:	2100      	movs	r1, #0
 8004c90:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7fc f903 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2224      	movs	r2, #36	; 0x24
 8004c9e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2101      	movs	r1, #1
 8004cac:	438a      	bics	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f8d8 	bl	8004e68 <UART_SetConfig>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e024      	b.n	8004d0c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f000 fb89 	bl	80053e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	490d      	ldr	r1, [pc, #52]	; (8004d14 <HAL_UART_Init+0xa4>)
 8004cde:	400a      	ands	r2, r1
 8004ce0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	212a      	movs	r1, #42	; 0x2a
 8004cee:	438a      	bics	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2101      	movs	r1, #1
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	0018      	movs	r0, r3
 8004d06:	f000 fc21 	bl	800554c <UART_CheckIdleState>
 8004d0a:	0003      	movs	r3, r0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b002      	add	sp, #8
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	ffffb7ff 	.word	0xffffb7ff

08004d18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08a      	sub	sp, #40	; 0x28
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	1dbb      	adds	r3, r7, #6
 8004d26:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d000      	beq.n	8004d32 <HAL_UART_Transmit+0x1a>
 8004d30:	e095      	b.n	8004e5e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <HAL_UART_Transmit+0x28>
 8004d38:	1dbb      	adds	r3, r7, #6
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e08d      	b.n	8004e60 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	015b      	lsls	r3, r3, #5
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d109      	bne.n	8004d64 <HAL_UART_Transmit+0x4c>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d105      	bne.n	8004d64 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	d001      	beq.n	8004d64 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e07d      	b.n	8004e60 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2274      	movs	r2, #116	; 0x74
 8004d68:	5c9b      	ldrb	r3, [r3, r2]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_UART_Transmit+0x5a>
 8004d6e:	2302      	movs	r3, #2
 8004d70:	e076      	b.n	8004e60 <HAL_UART_Transmit+0x148>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2274      	movs	r2, #116	; 0x74
 8004d76:	2101      	movs	r1, #1
 8004d78:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2280      	movs	r2, #128	; 0x80
 8004d7e:	2100      	movs	r1, #0
 8004d80:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2221      	movs	r2, #33	; 0x21
 8004d86:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d88:	f7fc f9be 	bl	8001108 <HAL_GetTick>
 8004d8c:	0003      	movs	r3, r0
 8004d8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	1dba      	adds	r2, r7, #6
 8004d94:	2150      	movs	r1, #80	; 0x50
 8004d96:	8812      	ldrh	r2, [r2, #0]
 8004d98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1dba      	adds	r2, r7, #6
 8004d9e:	2152      	movs	r1, #82	; 0x52
 8004da0:	8812      	ldrh	r2, [r2, #0]
 8004da2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	015b      	lsls	r3, r3, #5
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d108      	bne.n	8004dc2 <HAL_UART_Transmit+0xaa>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d104      	bne.n	8004dc2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8004db8:	2300      	movs	r3, #0
 8004dba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	61bb      	str	r3, [r7, #24]
 8004dc0:	e003      	b.n	8004dca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2274      	movs	r2, #116	; 0x74
 8004dce:	2100      	movs	r1, #0
 8004dd0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004dd2:	e02c      	b.n	8004e2e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	0013      	movs	r3, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	f000 fbfb 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004de6:	1e03      	subs	r3, r0, #0
 8004de8:	d001      	beq.n	8004dee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e038      	b.n	8004e60 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10b      	bne.n	8004e0c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	881b      	ldrh	r3, [r3, #0]
 8004df8:	001a      	movs	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	05d2      	lsls	r2, r2, #23
 8004e00:	0dd2      	lsrs	r2, r2, #23
 8004e02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	3302      	adds	r3, #2
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e007      	b.n	8004e1c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	781a      	ldrb	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	3301      	adds	r3, #1
 8004e1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2252      	movs	r2, #82	; 0x52
 8004e20:	5a9b      	ldrh	r3, [r3, r2]
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b299      	uxth	r1, r3
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2252      	movs	r2, #82	; 0x52
 8004e2c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2252      	movs	r2, #82	; 0x52
 8004e32:	5a9b      	ldrh	r3, [r3, r2]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1cc      	bne.n	8004dd4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	0013      	movs	r3, r2
 8004e44:	2200      	movs	r2, #0
 8004e46:	2140      	movs	r1, #64	; 0x40
 8004e48:	f000 fbc8 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8004e4c:	1e03      	subs	r3, r0, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e005      	b.n	8004e60 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2220      	movs	r2, #32
 8004e58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	e000      	b.n	8004e60 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8004e5e:	2302      	movs	r3, #2
  }
}
 8004e60:	0018      	movs	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	b008      	add	sp, #32
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e68:	b5b0      	push	{r4, r5, r7, lr}
 8004e6a:	b08e      	sub	sp, #56	; 0x38
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e70:	231a      	movs	r3, #26
 8004e72:	2218      	movs	r2, #24
 8004e74:	4694      	mov	ip, r2
 8004e76:	44bc      	add	ip, r7
 8004e78:	4463      	add	r3, ip
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	431a      	orrs	r2, r3
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4ab0      	ldr	r2, [pc, #704]	; (8005160 <UART_SetConfig+0x2f8>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	0019      	movs	r1, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4aac      	ldr	r2, [pc, #688]	; (8005164 <UART_SetConfig+0x2fc>)
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4aa6      	ldr	r2, [pc, #664]	; (8005168 <UART_SetConfig+0x300>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eda:	4313      	orrs	r3, r2
 8004edc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4aa1      	ldr	r2, [pc, #644]	; (800516c <UART_SetConfig+0x304>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a9d      	ldr	r2, [pc, #628]	; (8005170 <UART_SetConfig+0x308>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d136      	bne.n	8004f6c <UART_SetConfig+0x104>
 8004efe:	4b9d      	ldr	r3, [pc, #628]	; (8005174 <UART_SetConfig+0x30c>)
 8004f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f02:	2203      	movs	r2, #3
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d020      	beq.n	8004f4c <UART_SetConfig+0xe4>
 8004f0a:	d827      	bhi.n	8004f5c <UART_SetConfig+0xf4>
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d00d      	beq.n	8004f2c <UART_SetConfig+0xc4>
 8004f10:	d824      	bhi.n	8004f5c <UART_SetConfig+0xf4>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <UART_SetConfig+0xb4>
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d010      	beq.n	8004f3c <UART_SetConfig+0xd4>
 8004f1a:	e01f      	b.n	8004f5c <UART_SetConfig+0xf4>
 8004f1c:	231b      	movs	r3, #27
 8004f1e:	2218      	movs	r2, #24
 8004f20:	4694      	mov	ip, r2
 8004f22:	44bc      	add	ip, r7
 8004f24:	4463      	add	r3, ip
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e0c5      	b.n	80050b8 <UART_SetConfig+0x250>
 8004f2c:	231b      	movs	r3, #27
 8004f2e:	2218      	movs	r2, #24
 8004f30:	4694      	mov	ip, r2
 8004f32:	44bc      	add	ip, r7
 8004f34:	4463      	add	r3, ip
 8004f36:	2202      	movs	r2, #2
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e0bd      	b.n	80050b8 <UART_SetConfig+0x250>
 8004f3c:	231b      	movs	r3, #27
 8004f3e:	2218      	movs	r2, #24
 8004f40:	4694      	mov	ip, r2
 8004f42:	44bc      	add	ip, r7
 8004f44:	4463      	add	r3, ip
 8004f46:	2204      	movs	r2, #4
 8004f48:	701a      	strb	r2, [r3, #0]
 8004f4a:	e0b5      	b.n	80050b8 <UART_SetConfig+0x250>
 8004f4c:	231b      	movs	r3, #27
 8004f4e:	2218      	movs	r2, #24
 8004f50:	4694      	mov	ip, r2
 8004f52:	44bc      	add	ip, r7
 8004f54:	4463      	add	r3, ip
 8004f56:	2208      	movs	r2, #8
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e0ad      	b.n	80050b8 <UART_SetConfig+0x250>
 8004f5c:	231b      	movs	r3, #27
 8004f5e:	2218      	movs	r2, #24
 8004f60:	4694      	mov	ip, r2
 8004f62:	44bc      	add	ip, r7
 8004f64:	4463      	add	r3, ip
 8004f66:	2210      	movs	r2, #16
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e0a5      	b.n	80050b8 <UART_SetConfig+0x250>
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a81      	ldr	r2, [pc, #516]	; (8005178 <UART_SetConfig+0x310>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d136      	bne.n	8004fe4 <UART_SetConfig+0x17c>
 8004f76:	4b7f      	ldr	r3, [pc, #508]	; (8005174 <UART_SetConfig+0x30c>)
 8004f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7a:	220c      	movs	r2, #12
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	2b0c      	cmp	r3, #12
 8004f80:	d020      	beq.n	8004fc4 <UART_SetConfig+0x15c>
 8004f82:	d827      	bhi.n	8004fd4 <UART_SetConfig+0x16c>
 8004f84:	2b08      	cmp	r3, #8
 8004f86:	d00d      	beq.n	8004fa4 <UART_SetConfig+0x13c>
 8004f88:	d824      	bhi.n	8004fd4 <UART_SetConfig+0x16c>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <UART_SetConfig+0x12c>
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d010      	beq.n	8004fb4 <UART_SetConfig+0x14c>
 8004f92:	e01f      	b.n	8004fd4 <UART_SetConfig+0x16c>
 8004f94:	231b      	movs	r3, #27
 8004f96:	2218      	movs	r2, #24
 8004f98:	4694      	mov	ip, r2
 8004f9a:	44bc      	add	ip, r7
 8004f9c:	4463      	add	r3, ip
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e089      	b.n	80050b8 <UART_SetConfig+0x250>
 8004fa4:	231b      	movs	r3, #27
 8004fa6:	2218      	movs	r2, #24
 8004fa8:	4694      	mov	ip, r2
 8004faa:	44bc      	add	ip, r7
 8004fac:	4463      	add	r3, ip
 8004fae:	2202      	movs	r2, #2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	e081      	b.n	80050b8 <UART_SetConfig+0x250>
 8004fb4:	231b      	movs	r3, #27
 8004fb6:	2218      	movs	r2, #24
 8004fb8:	4694      	mov	ip, r2
 8004fba:	44bc      	add	ip, r7
 8004fbc:	4463      	add	r3, ip
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e079      	b.n	80050b8 <UART_SetConfig+0x250>
 8004fc4:	231b      	movs	r3, #27
 8004fc6:	2218      	movs	r2, #24
 8004fc8:	4694      	mov	ip, r2
 8004fca:	44bc      	add	ip, r7
 8004fcc:	4463      	add	r3, ip
 8004fce:	2208      	movs	r2, #8
 8004fd0:	701a      	strb	r2, [r3, #0]
 8004fd2:	e071      	b.n	80050b8 <UART_SetConfig+0x250>
 8004fd4:	231b      	movs	r3, #27
 8004fd6:	2218      	movs	r2, #24
 8004fd8:	4694      	mov	ip, r2
 8004fda:	44bc      	add	ip, r7
 8004fdc:	4463      	add	r3, ip
 8004fde:	2210      	movs	r2, #16
 8004fe0:	701a      	strb	r2, [r3, #0]
 8004fe2:	e069      	b.n	80050b8 <UART_SetConfig+0x250>
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a64      	ldr	r2, [pc, #400]	; (800517c <UART_SetConfig+0x314>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d107      	bne.n	8004ffe <UART_SetConfig+0x196>
 8004fee:	231b      	movs	r3, #27
 8004ff0:	2218      	movs	r2, #24
 8004ff2:	4694      	mov	ip, r2
 8004ff4:	44bc      	add	ip, r7
 8004ff6:	4463      	add	r3, ip
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e05c      	b.n	80050b8 <UART_SetConfig+0x250>
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a5f      	ldr	r2, [pc, #380]	; (8005180 <UART_SetConfig+0x318>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d107      	bne.n	8005018 <UART_SetConfig+0x1b0>
 8005008:	231b      	movs	r3, #27
 800500a:	2218      	movs	r2, #24
 800500c:	4694      	mov	ip, r2
 800500e:	44bc      	add	ip, r7
 8005010:	4463      	add	r3, ip
 8005012:	2200      	movs	r2, #0
 8005014:	701a      	strb	r2, [r3, #0]
 8005016:	e04f      	b.n	80050b8 <UART_SetConfig+0x250>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a52      	ldr	r2, [pc, #328]	; (8005168 <UART_SetConfig+0x300>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d143      	bne.n	80050aa <UART_SetConfig+0x242>
 8005022:	4b54      	ldr	r3, [pc, #336]	; (8005174 <UART_SetConfig+0x30c>)
 8005024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005026:	23c0      	movs	r3, #192	; 0xc0
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	4013      	ands	r3, r2
 800502c:	22c0      	movs	r2, #192	; 0xc0
 800502e:	0112      	lsls	r2, r2, #4
 8005030:	4293      	cmp	r3, r2
 8005032:	d02a      	beq.n	800508a <UART_SetConfig+0x222>
 8005034:	22c0      	movs	r2, #192	; 0xc0
 8005036:	0112      	lsls	r2, r2, #4
 8005038:	4293      	cmp	r3, r2
 800503a:	d82e      	bhi.n	800509a <UART_SetConfig+0x232>
 800503c:	2280      	movs	r2, #128	; 0x80
 800503e:	0112      	lsls	r2, r2, #4
 8005040:	4293      	cmp	r3, r2
 8005042:	d012      	beq.n	800506a <UART_SetConfig+0x202>
 8005044:	2280      	movs	r2, #128	; 0x80
 8005046:	0112      	lsls	r2, r2, #4
 8005048:	4293      	cmp	r3, r2
 800504a:	d826      	bhi.n	800509a <UART_SetConfig+0x232>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <UART_SetConfig+0x1f2>
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	00d2      	lsls	r2, r2, #3
 8005054:	4293      	cmp	r3, r2
 8005056:	d010      	beq.n	800507a <UART_SetConfig+0x212>
 8005058:	e01f      	b.n	800509a <UART_SetConfig+0x232>
 800505a:	231b      	movs	r3, #27
 800505c:	2218      	movs	r2, #24
 800505e:	4694      	mov	ip, r2
 8005060:	44bc      	add	ip, r7
 8005062:	4463      	add	r3, ip
 8005064:	2200      	movs	r2, #0
 8005066:	701a      	strb	r2, [r3, #0]
 8005068:	e026      	b.n	80050b8 <UART_SetConfig+0x250>
 800506a:	231b      	movs	r3, #27
 800506c:	2218      	movs	r2, #24
 800506e:	4694      	mov	ip, r2
 8005070:	44bc      	add	ip, r7
 8005072:	4463      	add	r3, ip
 8005074:	2202      	movs	r2, #2
 8005076:	701a      	strb	r2, [r3, #0]
 8005078:	e01e      	b.n	80050b8 <UART_SetConfig+0x250>
 800507a:	231b      	movs	r3, #27
 800507c:	2218      	movs	r2, #24
 800507e:	4694      	mov	ip, r2
 8005080:	44bc      	add	ip, r7
 8005082:	4463      	add	r3, ip
 8005084:	2204      	movs	r2, #4
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	e016      	b.n	80050b8 <UART_SetConfig+0x250>
 800508a:	231b      	movs	r3, #27
 800508c:	2218      	movs	r2, #24
 800508e:	4694      	mov	ip, r2
 8005090:	44bc      	add	ip, r7
 8005092:	4463      	add	r3, ip
 8005094:	2208      	movs	r2, #8
 8005096:	701a      	strb	r2, [r3, #0]
 8005098:	e00e      	b.n	80050b8 <UART_SetConfig+0x250>
 800509a:	231b      	movs	r3, #27
 800509c:	2218      	movs	r2, #24
 800509e:	4694      	mov	ip, r2
 80050a0:	44bc      	add	ip, r7
 80050a2:	4463      	add	r3, ip
 80050a4:	2210      	movs	r2, #16
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	e006      	b.n	80050b8 <UART_SetConfig+0x250>
 80050aa:	231b      	movs	r3, #27
 80050ac:	2218      	movs	r2, #24
 80050ae:	4694      	mov	ip, r2
 80050b0:	44bc      	add	ip, r7
 80050b2:	4463      	add	r3, ip
 80050b4:	2210      	movs	r2, #16
 80050b6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a2a      	ldr	r2, [pc, #168]	; (8005168 <UART_SetConfig+0x300>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d000      	beq.n	80050c4 <UART_SetConfig+0x25c>
 80050c2:	e09e      	b.n	8005202 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050c4:	231b      	movs	r3, #27
 80050c6:	2218      	movs	r2, #24
 80050c8:	4694      	mov	ip, r2
 80050ca:	44bc      	add	ip, r7
 80050cc:	4463      	add	r3, ip
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	d01d      	beq.n	8005110 <UART_SetConfig+0x2a8>
 80050d4:	dc20      	bgt.n	8005118 <UART_SetConfig+0x2b0>
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d015      	beq.n	8005106 <UART_SetConfig+0x29e>
 80050da:	dc1d      	bgt.n	8005118 <UART_SetConfig+0x2b0>
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <UART_SetConfig+0x27e>
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d005      	beq.n	80050f0 <UART_SetConfig+0x288>
 80050e4:	e018      	b.n	8005118 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e6:	f7ff fc23 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80050ea:	0003      	movs	r3, r0
 80050ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050ee:	e01d      	b.n	800512c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f0:	4b20      	ldr	r3, [pc, #128]	; (8005174 <UART_SetConfig+0x30c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2210      	movs	r2, #16
 80050f6:	4013      	ands	r3, r2
 80050f8:	d002      	beq.n	8005100 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050fa:	4b22      	ldr	r3, [pc, #136]	; (8005184 <UART_SetConfig+0x31c>)
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050fe:	e015      	b.n	800512c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8005100:	4b21      	ldr	r3, [pc, #132]	; (8005188 <UART_SetConfig+0x320>)
 8005102:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005104:	e012      	b.n	800512c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005106:	f7ff fb63 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800510a:	0003      	movs	r3, r0
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800510e:	e00d      	b.n	800512c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005110:	2380      	movs	r3, #128	; 0x80
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005116:	e009      	b.n	800512c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800511c:	231a      	movs	r3, #26
 800511e:	2218      	movs	r2, #24
 8005120:	4694      	mov	ip, r2
 8005122:	44bc      	add	ip, r7
 8005124:	4463      	add	r3, ip
 8005126:	2201      	movs	r2, #1
 8005128:	701a      	strb	r2, [r3, #0]
        break;
 800512a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800512e:	2b00      	cmp	r3, #0
 8005130:	d100      	bne.n	8005134 <UART_SetConfig+0x2cc>
 8005132:	e13c      	b.n	80053ae <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	0013      	movs	r3, r2
 800513a:	005b      	lsls	r3, r3, #1
 800513c:	189b      	adds	r3, r3, r2
 800513e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005140:	429a      	cmp	r2, r3
 8005142:	d305      	bcc.n	8005150 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800514a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800514c:	429a      	cmp	r2, r3
 800514e:	d91d      	bls.n	800518c <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8005150:	231a      	movs	r3, #26
 8005152:	2218      	movs	r2, #24
 8005154:	4694      	mov	ip, r2
 8005156:	44bc      	add	ip, r7
 8005158:	4463      	add	r3, ip
 800515a:	2201      	movs	r2, #1
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e126      	b.n	80053ae <UART_SetConfig+0x546>
 8005160:	efff69f3 	.word	0xefff69f3
 8005164:	ffffcfff 	.word	0xffffcfff
 8005168:	40004800 	.word	0x40004800
 800516c:	fffff4ff 	.word	0xfffff4ff
 8005170:	40013800 	.word	0x40013800
 8005174:	40021000 	.word	0x40021000
 8005178:	40004400 	.word	0x40004400
 800517c:	40004c00 	.word	0x40004c00
 8005180:	40005000 	.word	0x40005000
 8005184:	003d0900 	.word	0x003d0900
 8005188:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	613b      	str	r3, [r7, #16]
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	6939      	ldr	r1, [r7, #16]
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	000b      	movs	r3, r1
 800519a:	0e1b      	lsrs	r3, r3, #24
 800519c:	0010      	movs	r0, r2
 800519e:	0205      	lsls	r5, r0, #8
 80051a0:	431d      	orrs	r5, r3
 80051a2:	000b      	movs	r3, r1
 80051a4:	021c      	lsls	r4, r3, #8
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	085b      	lsrs	r3, r3, #1
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	2300      	movs	r3, #0
 80051b0:	60fb      	str	r3, [r7, #12]
 80051b2:	68b8      	ldr	r0, [r7, #8]
 80051b4:	68f9      	ldr	r1, [r7, #12]
 80051b6:	1900      	adds	r0, r0, r4
 80051b8:	4169      	adcs	r1, r5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	2300      	movs	r3, #0
 80051c2:	607b      	str	r3, [r7, #4]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f7fb f83c 	bl	8000244 <__aeabi_uldivmod>
 80051cc:	0002      	movs	r2, r0
 80051ce:	000b      	movs	r3, r1
 80051d0:	0013      	movs	r3, r2
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d6:	23c0      	movs	r3, #192	; 0xc0
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	429a      	cmp	r2, r3
 80051dc:	d309      	bcc.n	80051f2 <UART_SetConfig+0x38a>
 80051de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e0:	2380      	movs	r3, #128	; 0x80
 80051e2:	035b      	lsls	r3, r3, #13
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d204      	bcs.n	80051f2 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ee:	60da      	str	r2, [r3, #12]
 80051f0:	e0dd      	b.n	80053ae <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80051f2:	231a      	movs	r3, #26
 80051f4:	2218      	movs	r2, #24
 80051f6:	4694      	mov	ip, r2
 80051f8:	44bc      	add	ip, r7
 80051fa:	4463      	add	r3, ip
 80051fc:	2201      	movs	r2, #1
 80051fe:	701a      	strb	r2, [r3, #0]
 8005200:	e0d5      	b.n	80053ae <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	69da      	ldr	r2, [r3, #28]
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	429a      	cmp	r2, r3
 800520c:	d000      	beq.n	8005210 <UART_SetConfig+0x3a8>
 800520e:	e074      	b.n	80052fa <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8005210:	231b      	movs	r3, #27
 8005212:	2218      	movs	r2, #24
 8005214:	4694      	mov	ip, r2
 8005216:	44bc      	add	ip, r7
 8005218:	4463      	add	r3, ip
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b08      	cmp	r3, #8
 800521e:	d822      	bhi.n	8005266 <UART_SetConfig+0x3fe>
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	4b6b      	ldr	r3, [pc, #428]	; (80053d0 <UART_SetConfig+0x568>)
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522a:	f7ff fb81 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 800522e:	0003      	movs	r3, r0
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005232:	e022      	b.n	800527a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7ff fb92 	bl	800495c <HAL_RCC_GetPCLK2Freq>
 8005238:	0003      	movs	r3, r0
 800523a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800523c:	e01d      	b.n	800527a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800523e:	4b65      	ldr	r3, [pc, #404]	; (80053d4 <UART_SetConfig+0x56c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	4013      	ands	r3, r2
 8005246:	d002      	beq.n	800524e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005248:	4b63      	ldr	r3, [pc, #396]	; (80053d8 <UART_SetConfig+0x570>)
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800524c:	e015      	b.n	800527a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800524e:	4b63      	ldr	r3, [pc, #396]	; (80053dc <UART_SetConfig+0x574>)
 8005250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005252:	e012      	b.n	800527a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005254:	f7ff fabc 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8005258:	0003      	movs	r3, r0
 800525a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800525c:	e00d      	b.n	800527a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005264:	e009      	b.n	800527a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800526a:	231a      	movs	r3, #26
 800526c:	2218      	movs	r2, #24
 800526e:	4694      	mov	ip, r2
 8005270:	44bc      	add	ip, r7
 8005272:	4463      	add	r3, ip
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
        break;
 8005278:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800527a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d100      	bne.n	8005282 <UART_SetConfig+0x41a>
 8005280:	e095      	b.n	80053ae <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005284:	005a      	lsls	r2, r3, #1
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	085b      	lsrs	r3, r3, #1
 800528c:	18d2      	adds	r2, r2, r3
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	0019      	movs	r1, r3
 8005294:	0010      	movs	r0, r2
 8005296:	f7fa ff49 	bl	800012c <__udivsi3>
 800529a:	0003      	movs	r3, r0
 800529c:	b29b      	uxth	r3, r3
 800529e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	2b0f      	cmp	r3, #15
 80052a4:	d921      	bls.n	80052ea <UART_SetConfig+0x482>
 80052a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052a8:	2380      	movs	r3, #128	; 0x80
 80052aa:	025b      	lsls	r3, r3, #9
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d21c      	bcs.n	80052ea <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	200e      	movs	r0, #14
 80052b6:	2418      	movs	r4, #24
 80052b8:	193b      	adds	r3, r7, r4
 80052ba:	181b      	adds	r3, r3, r0
 80052bc:	210f      	movs	r1, #15
 80052be:	438a      	bics	r2, r1
 80052c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2207      	movs	r2, #7
 80052ca:	4013      	ands	r3, r2
 80052cc:	b299      	uxth	r1, r3
 80052ce:	193b      	adds	r3, r7, r4
 80052d0:	181b      	adds	r3, r3, r0
 80052d2:	193a      	adds	r2, r7, r4
 80052d4:	1812      	adds	r2, r2, r0
 80052d6:	8812      	ldrh	r2, [r2, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	193a      	adds	r2, r7, r4
 80052e2:	1812      	adds	r2, r2, r0
 80052e4:	8812      	ldrh	r2, [r2, #0]
 80052e6:	60da      	str	r2, [r3, #12]
 80052e8:	e061      	b.n	80053ae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80052ea:	231a      	movs	r3, #26
 80052ec:	2218      	movs	r2, #24
 80052ee:	4694      	mov	ip, r2
 80052f0:	44bc      	add	ip, r7
 80052f2:	4463      	add	r3, ip
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
 80052f8:	e059      	b.n	80053ae <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052fa:	231b      	movs	r3, #27
 80052fc:	2218      	movs	r2, #24
 80052fe:	4694      	mov	ip, r2
 8005300:	44bc      	add	ip, r7
 8005302:	4463      	add	r3, ip
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b08      	cmp	r3, #8
 8005308:	d822      	bhi.n	8005350 <UART_SetConfig+0x4e8>
 800530a:	009a      	lsls	r2, r3, #2
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <UART_SetConfig+0x578>)
 800530e:	18d3      	adds	r3, r2, r3
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005314:	f7ff fb0c 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8005318:	0003      	movs	r3, r0
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800531c:	e022      	b.n	8005364 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800531e:	f7ff fb1d 	bl	800495c <HAL_RCC_GetPCLK2Freq>
 8005322:	0003      	movs	r3, r0
 8005324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005326:	e01d      	b.n	8005364 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005328:	4b2a      	ldr	r3, [pc, #168]	; (80053d4 <UART_SetConfig+0x56c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2210      	movs	r2, #16
 800532e:	4013      	ands	r3, r2
 8005330:	d002      	beq.n	8005338 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005332:	4b29      	ldr	r3, [pc, #164]	; (80053d8 <UART_SetConfig+0x570>)
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005336:	e015      	b.n	8005364 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8005338:	4b28      	ldr	r3, [pc, #160]	; (80053dc <UART_SetConfig+0x574>)
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800533c:	e012      	b.n	8005364 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533e:	f7ff fa47 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8005342:	0003      	movs	r3, r0
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005346:	e00d      	b.n	8005364 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005348:	2380      	movs	r3, #128	; 0x80
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800534e:	e009      	b.n	8005364 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005354:	231a      	movs	r3, #26
 8005356:	2218      	movs	r2, #24
 8005358:	4694      	mov	ip, r2
 800535a:	44bc      	add	ip, r7
 800535c:	4463      	add	r3, ip
 800535e:	2201      	movs	r2, #1
 8005360:	701a      	strb	r2, [r3, #0]
        break;
 8005362:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d021      	beq.n	80053ae <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	085a      	lsrs	r2, r3, #1
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	18d2      	adds	r2, r2, r3
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	0019      	movs	r1, r3
 800537a:	0010      	movs	r0, r2
 800537c:	f7fa fed6 	bl	800012c <__udivsi3>
 8005380:	0003      	movs	r3, r0
 8005382:	b29b      	uxth	r3, r3
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005388:	2b0f      	cmp	r3, #15
 800538a:	d909      	bls.n	80053a0 <UART_SetConfig+0x538>
 800538c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538e:	2380      	movs	r3, #128	; 0x80
 8005390:	025b      	lsls	r3, r3, #9
 8005392:	429a      	cmp	r2, r3
 8005394:	d204      	bcs.n	80053a0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800539c:	60da      	str	r2, [r3, #12]
 800539e:	e006      	b.n	80053ae <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80053a0:	231a      	movs	r3, #26
 80053a2:	2218      	movs	r2, #24
 80053a4:	4694      	mov	ip, r2
 80053a6:	44bc      	add	ip, r7
 80053a8:	4463      	add	r3, ip
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	2200      	movs	r2, #0
 80053b2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	2200      	movs	r2, #0
 80053b8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80053ba:	231a      	movs	r3, #26
 80053bc:	2218      	movs	r2, #24
 80053be:	4694      	mov	ip, r2
 80053c0:	44bc      	add	ip, r7
 80053c2:	4463      	add	r3, ip
 80053c4:	781b      	ldrb	r3, [r3, #0]
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b00e      	add	sp, #56	; 0x38
 80053cc:	bdb0      	pop	{r4, r5, r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	0800a330 	.word	0x0800a330
 80053d4:	40021000 	.word	0x40021000
 80053d8:	003d0900 	.word	0x003d0900
 80053dc:	00f42400 	.word	0x00f42400
 80053e0:	0800a354 	.word	0x0800a354

080053e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2201      	movs	r2, #1
 80053f2:	4013      	ands	r3, r2
 80053f4:	d00b      	beq.n	800540e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4a4a      	ldr	r2, [pc, #296]	; (8005528 <UART_AdvFeatureConfig+0x144>)
 80053fe:	4013      	ands	r3, r2
 8005400:	0019      	movs	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2202      	movs	r2, #2
 8005414:	4013      	ands	r3, r2
 8005416:	d00b      	beq.n	8005430 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4a43      	ldr	r2, [pc, #268]	; (800552c <UART_AdvFeatureConfig+0x148>)
 8005420:	4013      	ands	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	430a      	orrs	r2, r1
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	2204      	movs	r2, #4
 8005436:	4013      	ands	r3, r2
 8005438:	d00b      	beq.n	8005452 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	4a3b      	ldr	r2, [pc, #236]	; (8005530 <UART_AdvFeatureConfig+0x14c>)
 8005442:	4013      	ands	r3, r2
 8005444:	0019      	movs	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005456:	2208      	movs	r2, #8
 8005458:	4013      	ands	r3, r2
 800545a:	d00b      	beq.n	8005474 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4a34      	ldr	r2, [pc, #208]	; (8005534 <UART_AdvFeatureConfig+0x150>)
 8005464:	4013      	ands	r3, r2
 8005466:	0019      	movs	r1, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	2210      	movs	r2, #16
 800547a:	4013      	ands	r3, r2
 800547c:	d00b      	beq.n	8005496 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	4a2c      	ldr	r2, [pc, #176]	; (8005538 <UART_AdvFeatureConfig+0x154>)
 8005486:	4013      	ands	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	430a      	orrs	r2, r1
 8005494:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	2220      	movs	r2, #32
 800549c:	4013      	ands	r3, r2
 800549e:	d00b      	beq.n	80054b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	4a25      	ldr	r2, [pc, #148]	; (800553c <UART_AdvFeatureConfig+0x158>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	0019      	movs	r1, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	430a      	orrs	r2, r1
 80054b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	2240      	movs	r2, #64	; 0x40
 80054be:	4013      	ands	r3, r2
 80054c0:	d01d      	beq.n	80054fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4a1d      	ldr	r2, [pc, #116]	; (8005540 <UART_AdvFeatureConfig+0x15c>)
 80054ca:	4013      	ands	r3, r2
 80054cc:	0019      	movs	r1, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	035b      	lsls	r3, r3, #13
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d10b      	bne.n	80054fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	4a15      	ldr	r2, [pc, #84]	; (8005544 <UART_AdvFeatureConfig+0x160>)
 80054ee:	4013      	ands	r3, r2
 80054f0:	0019      	movs	r1, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005502:	2280      	movs	r2, #128	; 0x80
 8005504:	4013      	ands	r3, r2
 8005506:	d00b      	beq.n	8005520 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <UART_AdvFeatureConfig+0x164>)
 8005510:	4013      	ands	r3, r2
 8005512:	0019      	movs	r1, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	430a      	orrs	r2, r1
 800551e:	605a      	str	r2, [r3, #4]
  }
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}
 8005528:	fffdffff 	.word	0xfffdffff
 800552c:	fffeffff 	.word	0xfffeffff
 8005530:	fffbffff 	.word	0xfffbffff
 8005534:	ffff7fff 	.word	0xffff7fff
 8005538:	ffffefff 	.word	0xffffefff
 800553c:	ffffdfff 	.word	0xffffdfff
 8005540:	ffefffff 	.word	0xffefffff
 8005544:	ff9fffff 	.word	0xff9fffff
 8005548:	fff7ffff 	.word	0xfff7ffff

0800554c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af02      	add	r7, sp, #8
 8005552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2280      	movs	r2, #128	; 0x80
 8005558:	2100      	movs	r1, #0
 800555a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800555c:	f7fb fdd4 	bl	8001108 <HAL_GetTick>
 8005560:	0003      	movs	r3, r0
 8005562:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2208      	movs	r2, #8
 800556c:	4013      	ands	r3, r2
 800556e:	2b08      	cmp	r3, #8
 8005570:	d10c      	bne.n	800558c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2280      	movs	r2, #128	; 0x80
 8005576:	0391      	lsls	r1, r2, #14
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	4a17      	ldr	r2, [pc, #92]	; (80055d8 <UART_CheckIdleState+0x8c>)
 800557c:	9200      	str	r2, [sp, #0]
 800557e:	2200      	movs	r2, #0
 8005580:	f000 f82c 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d001      	beq.n	800558c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005588:	2303      	movs	r3, #3
 800558a:	e021      	b.n	80055d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2204      	movs	r2, #4
 8005594:	4013      	ands	r3, r2
 8005596:	2b04      	cmp	r3, #4
 8005598:	d10c      	bne.n	80055b4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2280      	movs	r2, #128	; 0x80
 800559e:	03d1      	lsls	r1, r2, #15
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	4a0d      	ldr	r2, [pc, #52]	; (80055d8 <UART_CheckIdleState+0x8c>)
 80055a4:	9200      	str	r2, [sp, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f000 f818 	bl	80055dc <UART_WaitOnFlagUntilTimeout>
 80055ac:	1e03      	subs	r3, r0, #0
 80055ae:	d001      	beq.n	80055b4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e00d      	b.n	80055d0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2220      	movs	r2, #32
 80055be:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2274      	movs	r2, #116	; 0x74
 80055ca:	2100      	movs	r1, #0
 80055cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	0018      	movs	r0, r3
 80055d2:	46bd      	mov	sp, r7
 80055d4:	b004      	add	sp, #16
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	01ffffff 	.word	0x01ffffff

080055dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b094      	sub	sp, #80	; 0x50
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	1dfb      	adds	r3, r7, #7
 80055ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055ec:	e0a3      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80055f0:	3301      	adds	r3, #1
 80055f2:	d100      	bne.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80055f4:	e09f      	b.n	8005736 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f6:	f7fb fd87 	bl	8001108 <HAL_GetTick>
 80055fa:	0002      	movs	r2, r0
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005602:	429a      	cmp	r2, r3
 8005604:	d302      	bcc.n	800560c <UART_WaitOnFlagUntilTimeout+0x30>
 8005606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005608:	2b00      	cmp	r3, #0
 800560a:	d13d      	bne.n	8005688 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800560c:	f3ef 8310 	mrs	r3, PRIMASK
 8005610:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
 8005616:	2301      	movs	r3, #1
 8005618:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	f383 8810 	msr	PRIMASK, r3
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	494c      	ldr	r1, [pc, #304]	; (8005760 <UART_WaitOnFlagUntilTimeout+0x184>)
 800562e:	400a      	ands	r2, r1
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005634:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	f383 8810 	msr	PRIMASK, r3
}
 800563c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563e:	f3ef 8310 	mrs	r3, PRIMASK
 8005642:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005646:	643b      	str	r3, [r7, #64]	; 0x40
 8005648:	2301      	movs	r3, #1
 800564a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			; (mov r8, r8)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2101      	movs	r1, #1
 8005660:	438a      	bics	r2, r1
 8005662:	609a      	str	r2, [r3, #8]
 8005664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	f383 8810 	msr	PRIMASK, r3
}
 800566e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2274      	movs	r2, #116	; 0x74
 8005680:	2100      	movs	r1, #0
 8005682:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e067      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2204      	movs	r2, #4
 8005690:	4013      	ands	r3, r2
 8005692:	d050      	beq.n	8005736 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	69da      	ldr	r2, [r3, #28]
 800569a:	2380      	movs	r3, #128	; 0x80
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	401a      	ands	r2, r3
 80056a0:	2380      	movs	r3, #128	; 0x80
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d146      	bne.n	8005736 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	0112      	lsls	r2, r2, #4
 80056b0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056b2:	f3ef 8310 	mrs	r3, PRIMASK
 80056b6:	613b      	str	r3, [r7, #16]
  return(result);
 80056b8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056bc:	2301      	movs	r3, #1
 80056be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	f383 8810 	msr	PRIMASK, r3
}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4923      	ldr	r1, [pc, #140]	; (8005760 <UART_WaitOnFlagUntilTimeout+0x184>)
 80056d4:	400a      	ands	r2, r1
 80056d6:	601a      	str	r2, [r3, #0]
 80056d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056da:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	f383 8810 	msr	PRIMASK, r3
}
 80056e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e4:	f3ef 8310 	mrs	r3, PRIMASK
 80056e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80056ea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80056ee:	2301      	movs	r3, #1
 80056f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	46c0      	nop			; (mov r8, r8)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	438a      	bics	r2, r1
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2220      	movs	r2, #32
 8005720:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2280      	movs	r2, #128	; 0x80
 8005726:	2120      	movs	r1, #32
 8005728:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2274      	movs	r2, #116	; 0x74
 800572e:	2100      	movs	r1, #0
 8005730:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005732:	2303      	movs	r3, #3
 8005734:	e010      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	425a      	negs	r2, r3
 8005746:	4153      	adcs	r3, r2
 8005748:	b2db      	uxtb	r3, r3
 800574a:	001a      	movs	r2, r3
 800574c:	1dfb      	adds	r3, r7, #7
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d100      	bne.n	8005756 <UART_WaitOnFlagUntilTimeout+0x17a>
 8005754:	e74b      	b.n	80055ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	b014      	add	sp, #80	; 0x50
 800575e:	bd80      	pop	{r7, pc}
 8005760:	fffffe5f 	.word	0xfffffe5f

08005764 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2244      	movs	r2, #68	; 0x44
 8005770:	2100      	movs	r1, #0
 8005772:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <USB_EnableGlobalInt+0x28>)
 8005776:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	b299      	uxth	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2240      	movs	r2, #64	; 0x40
 8005780:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b004      	add	sp, #16
 800578a:	bd80      	pop	{r7, pc}
 800578c:	0000bf80 	.word	0x0000bf80

08005790 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005798:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <USB_DisableGlobalInt+0x30>)
 800579a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2240      	movs	r2, #64	; 0x40
 80057a0:	5a9b      	ldrh	r3, [r3, r2]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	b292      	uxth	r2, r2
 80057a8:	43d2      	mvns	r2, r2
 80057aa:	b292      	uxth	r2, r2
 80057ac:	4013      	ands	r3, r2
 80057ae:	b299      	uxth	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2240      	movs	r2, #64	; 0x40
 80057b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	0018      	movs	r0, r3
 80057ba:	46bd      	mov	sp, r7
 80057bc:	b004      	add	sp, #16
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	0000bf80 	.word	0x0000bf80

080057c4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057c4:	b084      	sub	sp, #16
 80057c6:	b590      	push	{r4, r7, lr}
 80057c8:	46c6      	mov	lr, r8
 80057ca:	b500      	push	{lr}
 80057cc:	b082      	sub	sp, #8
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
 80057d2:	2004      	movs	r0, #4
 80057d4:	2410      	movs	r4, #16
 80057d6:	46a4      	mov	ip, r4
 80057d8:	2408      	movs	r4, #8
 80057da:	46a0      	mov	r8, r4
 80057dc:	44b8      	add	r8, r7
 80057de:	44c4      	add	ip, r8
 80057e0:	4460      	add	r0, ip
 80057e2:	6001      	str	r1, [r0, #0]
 80057e4:	6042      	str	r2, [r0, #4]
 80057e6:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2240      	movs	r2, #64	; 0x40
 80057ec:	2101      	movs	r1, #1
 80057ee:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2240      	movs	r2, #64	; 0x40
 80057f4:	2100      	movs	r1, #0
 80057f6:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2244      	movs	r2, #68	; 0x44
 80057fc:	2100      	movs	r1, #0
 80057fe:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2250      	movs	r2, #80	; 0x50
 8005804:	2100      	movs	r1, #0
 8005806:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b002      	add	sp, #8
 8005810:	bc80      	pop	{r7}
 8005812:	46b8      	mov	r8, r7
 8005814:	bc90      	pop	{r4, r7}
 8005816:	bc08      	pop	{r3}
 8005818:	b004      	add	sp, #16
 800581a:	4718      	bx	r3

0800581c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b09c      	sub	sp, #112	; 0x70
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005826:	236f      	movs	r3, #111	; 0x6f
 8005828:	18fb      	adds	r3, r7, r3
 800582a:	2200      	movs	r2, #0
 800582c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	18d3      	adds	r3, r2, r3
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29a      	uxth	r2, r3
 800583c:	236c      	movs	r3, #108	; 0x6c
 800583e:	18fb      	adds	r3, r7, r3
 8005840:	49cf      	ldr	r1, [pc, #828]	; (8005b80 <USB_ActivateEndpoint+0x364>)
 8005842:	400a      	ands	r2, r1
 8005844:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	78db      	ldrb	r3, [r3, #3]
 800584a:	2b03      	cmp	r3, #3
 800584c:	d017      	beq.n	800587e <USB_ActivateEndpoint+0x62>
 800584e:	dc28      	bgt.n	80058a2 <USB_ActivateEndpoint+0x86>
 8005850:	2b02      	cmp	r3, #2
 8005852:	d00e      	beq.n	8005872 <USB_ActivateEndpoint+0x56>
 8005854:	dc25      	bgt.n	80058a2 <USB_ActivateEndpoint+0x86>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <USB_ActivateEndpoint+0x44>
 800585a:	2b01      	cmp	r3, #1
 800585c:	d018      	beq.n	8005890 <USB_ActivateEndpoint+0x74>
 800585e:	e020      	b.n	80058a2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005860:	226c      	movs	r2, #108	; 0x6c
 8005862:	18bb      	adds	r3, r7, r2
 8005864:	18ba      	adds	r2, r7, r2
 8005866:	8812      	ldrh	r2, [r2, #0]
 8005868:	2180      	movs	r1, #128	; 0x80
 800586a:	0089      	lsls	r1, r1, #2
 800586c:	430a      	orrs	r2, r1
 800586e:	801a      	strh	r2, [r3, #0]
      break;
 8005870:	e01c      	b.n	80058ac <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8005872:	226c      	movs	r2, #108	; 0x6c
 8005874:	18bb      	adds	r3, r7, r2
 8005876:	18ba      	adds	r2, r7, r2
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	801a      	strh	r2, [r3, #0]
      break;
 800587c:	e016      	b.n	80058ac <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800587e:	226c      	movs	r2, #108	; 0x6c
 8005880:	18bb      	adds	r3, r7, r2
 8005882:	18ba      	adds	r2, r7, r2
 8005884:	8812      	ldrh	r2, [r2, #0]
 8005886:	21c0      	movs	r1, #192	; 0xc0
 8005888:	00c9      	lsls	r1, r1, #3
 800588a:	430a      	orrs	r2, r1
 800588c:	801a      	strh	r2, [r3, #0]
      break;
 800588e:	e00d      	b.n	80058ac <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005890:	226c      	movs	r2, #108	; 0x6c
 8005892:	18bb      	adds	r3, r7, r2
 8005894:	18ba      	adds	r2, r7, r2
 8005896:	8812      	ldrh	r2, [r2, #0]
 8005898:	2180      	movs	r1, #128	; 0x80
 800589a:	00c9      	lsls	r1, r1, #3
 800589c:	430a      	orrs	r2, r1
 800589e:	801a      	strh	r2, [r3, #0]
      break;
 80058a0:	e004      	b.n	80058ac <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80058a2:	236f      	movs	r3, #111	; 0x6f
 80058a4:	18fb      	adds	r3, r7, r3
 80058a6:	2201      	movs	r2, #1
 80058a8:	701a      	strb	r2, [r3, #0]
      break;
 80058aa:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058ac:	687a      	ldr	r2, [r7, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	18d3      	adds	r3, r2, r3
 80058b6:	226c      	movs	r2, #108	; 0x6c
 80058b8:	18ba      	adds	r2, r7, r2
 80058ba:	8812      	ldrh	r2, [r2, #0]
 80058bc:	49b1      	ldr	r1, [pc, #708]	; (8005b84 <USB_ActivateEndpoint+0x368>)
 80058be:	430a      	orrs	r2, r1
 80058c0:	b292      	uxth	r2, r2
 80058c2:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	18d3      	adds	r3, r2, r3
 80058ce:	881b      	ldrh	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	b21b      	sxth	r3, r3
 80058d4:	4aac      	ldr	r2, [pc, #688]	; (8005b88 <USB_ActivateEndpoint+0x36c>)
 80058d6:	4013      	ands	r3, r2
 80058d8:	b21a      	sxth	r2, r3
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b21b      	sxth	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b21a      	sxth	r2, r3
 80058e4:	2166      	movs	r1, #102	; 0x66
 80058e6:	187b      	adds	r3, r7, r1
 80058e8:	801a      	strh	r2, [r3, #0]
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	18d3      	adds	r3, r2, r3
 80058f4:	187a      	adds	r2, r7, r1
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	49a2      	ldr	r1, [pc, #648]	; (8005b84 <USB_ActivateEndpoint+0x368>)
 80058fa:	430a      	orrs	r2, r1
 80058fc:	b292      	uxth	r2, r2
 80058fe:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	7b1b      	ldrb	r3, [r3, #12]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d000      	beq.n	800590a <USB_ActivateEndpoint+0xee>
 8005908:	e150      	b.n	8005bac <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	785b      	ldrb	r3, [r3, #1]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d100      	bne.n	8005914 <USB_ActivateEndpoint+0xf8>
 8005912:	e07a      	b.n	8005a0a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2250      	movs	r2, #80	; 0x50
 800591c:	5a9b      	ldrh	r3, [r3, r2]
 800591e:	b29b      	uxth	r3, r3
 8005920:	001a      	movs	r2, r3
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	189b      	adds	r3, r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	00da      	lsls	r2, r3, #3
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	18d3      	adds	r3, r2, r3
 8005932:	2280      	movs	r2, #128	; 0x80
 8005934:	00d2      	lsls	r2, r2, #3
 8005936:	4694      	mov	ip, r2
 8005938:	4463      	add	r3, ip
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	88db      	ldrh	r3, [r3, #6]
 8005940:	085b      	lsrs	r3, r3, #1
 8005942:	b29b      	uxth	r3, r3
 8005944:	18db      	adds	r3, r3, r3
 8005946:	b29a      	uxth	r2, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	18d2      	adds	r2, r2, r3
 8005956:	2112      	movs	r1, #18
 8005958:	187b      	adds	r3, r7, r1
 800595a:	8812      	ldrh	r2, [r2, #0]
 800595c:	801a      	strh	r2, [r3, #0]
 800595e:	187b      	adds	r3, r7, r1
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	2240      	movs	r2, #64	; 0x40
 8005964:	4013      	ands	r3, r2
 8005966:	d016      	beq.n	8005996 <USB_ActivateEndpoint+0x17a>
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	18d3      	adds	r3, r2, r3
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29a      	uxth	r2, r3
 8005976:	2010      	movs	r0, #16
 8005978:	183b      	adds	r3, r7, r0
 800597a:	4983      	ldr	r1, [pc, #524]	; (8005b88 <USB_ActivateEndpoint+0x36c>)
 800597c:	400a      	ands	r2, r1
 800597e:	801a      	strh	r2, [r3, #0]
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	18d3      	adds	r3, r2, r3
 800598a:	183a      	adds	r2, r7, r0
 800598c:	8812      	ldrh	r2, [r2, #0]
 800598e:	497f      	ldr	r1, [pc, #508]	; (8005b8c <USB_ActivateEndpoint+0x370>)
 8005990:	430a      	orrs	r2, r1
 8005992:	b292      	uxth	r2, r2
 8005994:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	78db      	ldrb	r3, [r3, #3]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d01d      	beq.n	80059da <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	18d3      	adds	r3, r2, r3
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	200c      	movs	r0, #12
 80059ae:	183b      	adds	r3, r7, r0
 80059b0:	4977      	ldr	r1, [pc, #476]	; (8005b90 <USB_ActivateEndpoint+0x374>)
 80059b2:	400a      	ands	r2, r1
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	183b      	adds	r3, r7, r0
 80059b8:	183a      	adds	r2, r7, r0
 80059ba:	8812      	ldrh	r2, [r2, #0]
 80059bc:	2120      	movs	r1, #32
 80059be:	404a      	eors	r2, r1
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	687a      	ldr	r2, [r7, #4]
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	18d3      	adds	r3, r2, r3
 80059cc:	183a      	adds	r2, r7, r0
 80059ce:	8812      	ldrh	r2, [r2, #0]
 80059d0:	496c      	ldr	r1, [pc, #432]	; (8005b84 <USB_ActivateEndpoint+0x368>)
 80059d2:	430a      	orrs	r2, r1
 80059d4:	b292      	uxth	r2, r2
 80059d6:	801a      	strh	r2, [r3, #0]
 80059d8:	e27a      	b.n	8005ed0 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	18d3      	adds	r3, r2, r3
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	200e      	movs	r0, #14
 80059ea:	183b      	adds	r3, r7, r0
 80059ec:	4968      	ldr	r1, [pc, #416]	; (8005b90 <USB_ActivateEndpoint+0x374>)
 80059ee:	400a      	ands	r2, r1
 80059f0:	801a      	strh	r2, [r3, #0]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	18d3      	adds	r3, r2, r3
 80059fc:	183a      	adds	r2, r7, r0
 80059fe:	8812      	ldrh	r2, [r2, #0]
 8005a00:	4960      	ldr	r1, [pc, #384]	; (8005b84 <USB_ActivateEndpoint+0x368>)
 8005a02:	430a      	orrs	r2, r1
 8005a04:	b292      	uxth	r2, r2
 8005a06:	801a      	strh	r2, [r3, #0]
 8005a08:	e262      	b.n	8005ed0 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2250      	movs	r2, #80	; 0x50
 8005a12:	5a9b      	ldrh	r3, [r3, r2]
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	001a      	movs	r2, r3
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	00da      	lsls	r2, r3, #3
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	18d3      	adds	r3, r2, r3
 8005a28:	4a5a      	ldr	r2, [pc, #360]	; (8005b94 <USB_ActivateEndpoint+0x378>)
 8005a2a:	4694      	mov	ip, r2
 8005a2c:	4463      	add	r3, ip
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	88db      	ldrh	r3, [r3, #6]
 8005a34:	085b      	lsrs	r3, r3, #1
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	18db      	adds	r3, r3, r3
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2250      	movs	r2, #80	; 0x50
 8005a48:	5a9b      	ldrh	r3, [r3, r2]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	001a      	movs	r2, r3
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	189b      	adds	r3, r3, r2
 8005a52:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	00da      	lsls	r2, r3, #3
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	18d3      	adds	r3, r2, r3
 8005a5e:	4a4e      	ldr	r2, [pc, #312]	; (8005b98 <USB_ActivateEndpoint+0x37c>)
 8005a60:	4694      	mov	ip, r2
 8005a62:	4463      	add	r3, ip
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d110      	bne.n	8005a90 <USB_ActivateEndpoint+0x274>
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	881b      	ldrh	r3, [r3, #0]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	4a49      	ldr	r2, [pc, #292]	; (8005b9c <USB_ActivateEndpoint+0x380>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	801a      	strh	r2, [r3, #0]
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	4a46      	ldr	r2, [pc, #280]	; (8005ba0 <USB_ActivateEndpoint+0x384>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	e02b      	b.n	8005ae8 <USB_ActivateEndpoint+0x2cc>
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	2b3e      	cmp	r3, #62	; 0x3e
 8005a96:	d812      	bhi.n	8005abe <USB_ActivateEndpoint+0x2a2>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	085b      	lsrs	r3, r3, #1
 8005a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	d002      	beq.n	8005ab0 <USB_ActivateEndpoint+0x294>
 8005aaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005aac:	3301      	adds	r3, #1
 8005aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ab0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	029b      	lsls	r3, r3, #10
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e014      	b.n	8005ae8 <USB_ActivateEndpoint+0x2cc>
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	221f      	movs	r2, #31
 8005acc:	4013      	ands	r3, r2
 8005ace:	d102      	bne.n	8005ad6 <USB_ActivateEndpoint+0x2ba>
 8005ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ad6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <USB_ActivateEndpoint+0x384>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	b29a      	uxth	r2, r3
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	18d2      	adds	r2, r2, r3
 8005af2:	2122      	movs	r1, #34	; 0x22
 8005af4:	187b      	adds	r3, r7, r1
 8005af6:	8812      	ldrh	r2, [r2, #0]
 8005af8:	801a      	strh	r2, [r3, #0]
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	01db      	lsls	r3, r3, #7
 8005b02:	4013      	ands	r3, r2
 8005b04:	d016      	beq.n	8005b34 <USB_ActivateEndpoint+0x318>
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	18d3      	adds	r3, r2, r3
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	2020      	movs	r0, #32
 8005b16:	183b      	adds	r3, r7, r0
 8005b18:	491b      	ldr	r1, [pc, #108]	; (8005b88 <USB_ActivateEndpoint+0x36c>)
 8005b1a:	400a      	ands	r2, r1
 8005b1c:	801a      	strh	r2, [r3, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	183a      	adds	r2, r7, r0
 8005b2a:	8812      	ldrh	r2, [r2, #0]
 8005b2c:	491d      	ldr	r1, [pc, #116]	; (8005ba4 <USB_ActivateEndpoint+0x388>)
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	b292      	uxth	r2, r2
 8005b32:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	18d3      	adds	r3, r2, r3
 8005b3e:	881b      	ldrh	r3, [r3, #0]
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	201e      	movs	r0, #30
 8005b44:	183b      	adds	r3, r7, r0
 8005b46:	4918      	ldr	r1, [pc, #96]	; (8005ba8 <USB_ActivateEndpoint+0x38c>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	801a      	strh	r2, [r3, #0]
 8005b4c:	183b      	adds	r3, r7, r0
 8005b4e:	183a      	adds	r2, r7, r0
 8005b50:	8812      	ldrh	r2, [r2, #0]
 8005b52:	2180      	movs	r1, #128	; 0x80
 8005b54:	0149      	lsls	r1, r1, #5
 8005b56:	404a      	eors	r2, r1
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	183b      	adds	r3, r7, r0
 8005b5c:	183a      	adds	r2, r7, r0
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	2180      	movs	r1, #128	; 0x80
 8005b62:	0189      	lsls	r1, r1, #6
 8005b64:	404a      	eors	r2, r1
 8005b66:	801a      	strh	r2, [r3, #0]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	183a      	adds	r2, r7, r0
 8005b74:	8812      	ldrh	r2, [r2, #0]
 8005b76:	4903      	ldr	r1, [pc, #12]	; (8005b84 <USB_ActivateEndpoint+0x368>)
 8005b78:	430a      	orrs	r2, r1
 8005b7a:	b292      	uxth	r2, r2
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e1a7      	b.n	8005ed0 <USB_ActivateEndpoint+0x6b4>
 8005b80:	ffff898f 	.word	0xffff898f
 8005b84:	ffff8080 	.word	0xffff8080
 8005b88:	ffff8f8f 	.word	0xffff8f8f
 8005b8c:	ffff80c0 	.word	0xffff80c0
 8005b90:	ffff8fbf 	.word	0xffff8fbf
 8005b94:	00000404 	.word	0x00000404
 8005b98:	00000406 	.word	0x00000406
 8005b9c:	ffff83ff 	.word	0xffff83ff
 8005ba0:	ffff8000 	.word	0xffff8000
 8005ba4:	ffffc080 	.word	0xffffc080
 8005ba8:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	78db      	ldrb	r3, [r3, #3]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d117      	bne.n	8005be4 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	18d3      	adds	r3, r2, r3
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	2062      	movs	r0, #98	; 0x62
 8005bc4:	183b      	adds	r3, r7, r0
 8005bc6:	49c6      	ldr	r1, [pc, #792]	; (8005ee0 <USB_ActivateEndpoint+0x6c4>)
 8005bc8:	400a      	ands	r2, r1
 8005bca:	801a      	strh	r2, [r3, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	18d3      	adds	r3, r2, r3
 8005bd6:	183a      	adds	r2, r7, r0
 8005bd8:	8812      	ldrh	r2, [r2, #0]
 8005bda:	49c2      	ldr	r1, [pc, #776]	; (8005ee4 <USB_ActivateEndpoint+0x6c8>)
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	b292      	uxth	r2, r2
 8005be0:	801a      	strh	r2, [r3, #0]
 8005be2:	e016      	b.n	8005c12 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	18d3      	adds	r3, r2, r3
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	2064      	movs	r0, #100	; 0x64
 8005bf4:	183b      	adds	r3, r7, r0
 8005bf6:	49bc      	ldr	r1, [pc, #752]	; (8005ee8 <USB_ActivateEndpoint+0x6cc>)
 8005bf8:	400a      	ands	r2, r1
 8005bfa:	801a      	strh	r2, [r3, #0]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	18d3      	adds	r3, r2, r3
 8005c06:	183a      	adds	r2, r7, r0
 8005c08:	8812      	ldrh	r2, [r2, #0]
 8005c0a:	49b8      	ldr	r1, [pc, #736]	; (8005eec <USB_ActivateEndpoint+0x6d0>)
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	b292      	uxth	r2, r2
 8005c10:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2250      	movs	r2, #80	; 0x50
 8005c1a:	5a9b      	ldrh	r3, [r3, r2]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	001a      	movs	r2, r3
 8005c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	00da      	lsls	r2, r3, #3
 8005c2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2e:	18d3      	adds	r3, r2, r3
 8005c30:	2280      	movs	r2, #128	; 0x80
 8005c32:	00d2      	lsls	r2, r2, #3
 8005c34:	4694      	mov	ip, r2
 8005c36:	4463      	add	r3, ip
 8005c38:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	891b      	ldrh	r3, [r3, #8]
 8005c3e:	085b      	lsrs	r3, r3, #1
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	18db      	adds	r3, r3, r3
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c48:	801a      	strh	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2250      	movs	r2, #80	; 0x50
 8005c52:	5a9b      	ldrh	r3, [r3, r2]
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	001a      	movs	r2, r3
 8005c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c5a:	189b      	adds	r3, r3, r2
 8005c5c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	00da      	lsls	r2, r3, #3
 8005c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c66:	18d3      	adds	r3, r2, r3
 8005c68:	4aa1      	ldr	r2, [pc, #644]	; (8005ef0 <USB_ActivateEndpoint+0x6d4>)
 8005c6a:	4694      	mov	ip, r2
 8005c6c:	4463      	add	r3, ip
 8005c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	895b      	ldrh	r3, [r3, #10]
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	18db      	adds	r3, r3, r3
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c7e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d000      	beq.n	8005c8a <USB_ActivateEndpoint+0x46e>
 8005c88:	e087      	b.n	8005d9a <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	18d2      	adds	r2, r2, r3
 8005c94:	2140      	movs	r1, #64	; 0x40
 8005c96:	187b      	adds	r3, r7, r1
 8005c98:	8812      	ldrh	r2, [r2, #0]
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	187b      	adds	r3, r7, r1
 8005c9e:	881a      	ldrh	r2, [r3, #0]
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	01db      	lsls	r3, r3, #7
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d016      	beq.n	8005cd6 <USB_ActivateEndpoint+0x4ba>
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	18d3      	adds	r3, r2, r3
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	203e      	movs	r0, #62	; 0x3e
 8005cb8:	183b      	adds	r3, r7, r0
 8005cba:	4989      	ldr	r1, [pc, #548]	; (8005ee0 <USB_ActivateEndpoint+0x6c4>)
 8005cbc:	400a      	ands	r2, r1
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	18d3      	adds	r3, r2, r3
 8005cca:	183a      	adds	r2, r7, r0
 8005ccc:	8812      	ldrh	r2, [r2, #0]
 8005cce:	4989      	ldr	r1, [pc, #548]	; (8005ef4 <USB_ActivateEndpoint+0x6d8>)
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	b292      	uxth	r2, r2
 8005cd4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	18d2      	adds	r2, r2, r3
 8005ce0:	213c      	movs	r1, #60	; 0x3c
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	187b      	adds	r3, r7, r1
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	2240      	movs	r2, #64	; 0x40
 8005cee:	4013      	ands	r3, r2
 8005cf0:	d016      	beq.n	8005d20 <USB_ActivateEndpoint+0x504>
 8005cf2:	687a      	ldr	r2, [r7, #4]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	203a      	movs	r0, #58	; 0x3a
 8005d02:	183b      	adds	r3, r7, r0
 8005d04:	4976      	ldr	r1, [pc, #472]	; (8005ee0 <USB_ActivateEndpoint+0x6c4>)
 8005d06:	400a      	ands	r2, r1
 8005d08:	801a      	strh	r2, [r3, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	18d3      	adds	r3, r2, r3
 8005d14:	183a      	adds	r2, r7, r0
 8005d16:	8812      	ldrh	r2, [r2, #0]
 8005d18:	4977      	ldr	r1, [pc, #476]	; (8005ef8 <USB_ActivateEndpoint+0x6dc>)
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	18d3      	adds	r3, r2, r3
 8005d2a:	881b      	ldrh	r3, [r3, #0]
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	2038      	movs	r0, #56	; 0x38
 8005d30:	183b      	adds	r3, r7, r0
 8005d32:	4972      	ldr	r1, [pc, #456]	; (8005efc <USB_ActivateEndpoint+0x6e0>)
 8005d34:	400a      	ands	r2, r1
 8005d36:	801a      	strh	r2, [r3, #0]
 8005d38:	183b      	adds	r3, r7, r0
 8005d3a:	183a      	adds	r2, r7, r0
 8005d3c:	8812      	ldrh	r2, [r2, #0]
 8005d3e:	2180      	movs	r1, #128	; 0x80
 8005d40:	0149      	lsls	r1, r1, #5
 8005d42:	404a      	eors	r2, r1
 8005d44:	801a      	strh	r2, [r3, #0]
 8005d46:	183b      	adds	r3, r7, r0
 8005d48:	183a      	adds	r2, r7, r0
 8005d4a:	8812      	ldrh	r2, [r2, #0]
 8005d4c:	2180      	movs	r1, #128	; 0x80
 8005d4e:	0189      	lsls	r1, r1, #6
 8005d50:	404a      	eors	r2, r1
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	18d3      	adds	r3, r2, r3
 8005d5e:	183a      	adds	r2, r7, r0
 8005d60:	8812      	ldrh	r2, [r2, #0]
 8005d62:	4962      	ldr	r1, [pc, #392]	; (8005eec <USB_ActivateEndpoint+0x6d0>)
 8005d64:	430a      	orrs	r2, r1
 8005d66:	b292      	uxth	r2, r2
 8005d68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	18d3      	adds	r3, r2, r3
 8005d74:	881b      	ldrh	r3, [r3, #0]
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	2036      	movs	r0, #54	; 0x36
 8005d7a:	183b      	adds	r3, r7, r0
 8005d7c:	4960      	ldr	r1, [pc, #384]	; (8005f00 <USB_ActivateEndpoint+0x6e4>)
 8005d7e:	400a      	ands	r2, r1
 8005d80:	801a      	strh	r2, [r3, #0]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	18d3      	adds	r3, r2, r3
 8005d8c:	183a      	adds	r2, r7, r0
 8005d8e:	8812      	ldrh	r2, [r2, #0]
 8005d90:	4956      	ldr	r1, [pc, #344]	; (8005eec <USB_ActivateEndpoint+0x6d0>)
 8005d92:	430a      	orrs	r2, r1
 8005d94:	b292      	uxth	r2, r2
 8005d96:	801a      	strh	r2, [r3, #0]
 8005d98:	e09a      	b.n	8005ed0 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	18d2      	adds	r2, r2, r3
 8005da4:	214e      	movs	r1, #78	; 0x4e
 8005da6:	187b      	adds	r3, r7, r1
 8005da8:	8812      	ldrh	r2, [r2, #0]
 8005daa:	801a      	strh	r2, [r3, #0]
 8005dac:	187b      	adds	r3, r7, r1
 8005dae:	881a      	ldrh	r2, [r3, #0]
 8005db0:	2380      	movs	r3, #128	; 0x80
 8005db2:	01db      	lsls	r3, r3, #7
 8005db4:	4013      	ands	r3, r2
 8005db6:	d016      	beq.n	8005de6 <USB_ActivateEndpoint+0x5ca>
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	18d3      	adds	r3, r2, r3
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	204c      	movs	r0, #76	; 0x4c
 8005dc8:	183b      	adds	r3, r7, r0
 8005dca:	4945      	ldr	r1, [pc, #276]	; (8005ee0 <USB_ActivateEndpoint+0x6c4>)
 8005dcc:	400a      	ands	r2, r1
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	18d3      	adds	r3, r2, r3
 8005dda:	183a      	adds	r2, r7, r0
 8005ddc:	8812      	ldrh	r2, [r2, #0]
 8005dde:	4945      	ldr	r1, [pc, #276]	; (8005ef4 <USB_ActivateEndpoint+0x6d8>)
 8005de0:	430a      	orrs	r2, r1
 8005de2:	b292      	uxth	r2, r2
 8005de4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	18d2      	adds	r2, r2, r3
 8005df0:	214a      	movs	r1, #74	; 0x4a
 8005df2:	187b      	adds	r3, r7, r1
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	801a      	strh	r2, [r3, #0]
 8005df8:	187b      	adds	r3, r7, r1
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	4013      	ands	r3, r2
 8005e00:	d016      	beq.n	8005e30 <USB_ActivateEndpoint+0x614>
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29a      	uxth	r2, r3
 8005e10:	2048      	movs	r0, #72	; 0x48
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	4932      	ldr	r1, [pc, #200]	; (8005ee0 <USB_ActivateEndpoint+0x6c4>)
 8005e16:	400a      	ands	r2, r1
 8005e18:	801a      	strh	r2, [r3, #0]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	183a      	adds	r2, r7, r0
 8005e26:	8812      	ldrh	r2, [r2, #0]
 8005e28:	4933      	ldr	r1, [pc, #204]	; (8005ef8 <USB_ActivateEndpoint+0x6dc>)
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	b292      	uxth	r2, r2
 8005e2e:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	78db      	ldrb	r3, [r3, #3]
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d01d      	beq.n	8005e74 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	18d3      	adds	r3, r2, r3
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	2044      	movs	r0, #68	; 0x44
 8005e48:	183b      	adds	r3, r7, r0
 8005e4a:	492d      	ldr	r1, [pc, #180]	; (8005f00 <USB_ActivateEndpoint+0x6e4>)
 8005e4c:	400a      	ands	r2, r1
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	183b      	adds	r3, r7, r0
 8005e52:	183a      	adds	r2, r7, r0
 8005e54:	8812      	ldrh	r2, [r2, #0]
 8005e56:	2120      	movs	r1, #32
 8005e58:	404a      	eors	r2, r1
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	18d3      	adds	r3, r2, r3
 8005e66:	183a      	adds	r2, r7, r0
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	4920      	ldr	r1, [pc, #128]	; (8005eec <USB_ActivateEndpoint+0x6d0>)
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	e016      	b.n	8005ea2 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	18d3      	adds	r3, r2, r3
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	2046      	movs	r0, #70	; 0x46
 8005e84:	183b      	adds	r3, r7, r0
 8005e86:	491e      	ldr	r1, [pc, #120]	; (8005f00 <USB_ActivateEndpoint+0x6e4>)
 8005e88:	400a      	ands	r2, r1
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	18d3      	adds	r3, r2, r3
 8005e96:	183a      	adds	r2, r7, r0
 8005e98:	8812      	ldrh	r2, [r2, #0]
 8005e9a:	4914      	ldr	r1, [pc, #80]	; (8005eec <USB_ActivateEndpoint+0x6d0>)
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	b292      	uxth	r2, r2
 8005ea0:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	18d3      	adds	r3, r2, r3
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	2042      	movs	r0, #66	; 0x42
 8005eb2:	183b      	adds	r3, r7, r0
 8005eb4:	4911      	ldr	r1, [pc, #68]	; (8005efc <USB_ActivateEndpoint+0x6e0>)
 8005eb6:	400a      	ands	r2, r1
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	18d3      	adds	r3, r2, r3
 8005ec4:	183a      	adds	r2, r7, r0
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	4908      	ldr	r1, [pc, #32]	; (8005eec <USB_ActivateEndpoint+0x6d0>)
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005ed0:	236f      	movs	r3, #111	; 0x6f
 8005ed2:	18fb      	adds	r3, r7, r3
 8005ed4:	781b      	ldrb	r3, [r3, #0]
}
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	b01c      	add	sp, #112	; 0x70
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	46c0      	nop			; (mov r8, r8)
 8005ee0:	ffff8f8f 	.word	0xffff8f8f
 8005ee4:	ffff8180 	.word	0xffff8180
 8005ee8:	ffff8e8f 	.word	0xffff8e8f
 8005eec:	ffff8080 	.word	0xffff8080
 8005ef0:	00000404 	.word	0x00000404
 8005ef4:	ffffc080 	.word	0xffffc080
 8005ef8:	ffff80c0 	.word	0xffff80c0
 8005efc:	ffffbf8f 	.word	0xffffbf8f
 8005f00:	ffff8fbf 	.word	0xffff8fbf

08005f04 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08c      	sub	sp, #48	; 0x30
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	7b1b      	ldrb	r3, [r3, #12]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d000      	beq.n	8005f18 <USB_DeactivateEndpoint+0x14>
 8005f16:	e07e      	b.n	8006016 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	785b      	ldrb	r3, [r3, #1]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d03c      	beq.n	8005f9a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	18d2      	adds	r2, r2, r3
 8005f2a:	210c      	movs	r1, #12
 8005f2c:	187b      	adds	r3, r7, r1
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	801a      	strh	r2, [r3, #0]
 8005f32:	187b      	adds	r3, r7, r1
 8005f34:	881b      	ldrh	r3, [r3, #0]
 8005f36:	2240      	movs	r2, #64	; 0x40
 8005f38:	4013      	ands	r3, r2
 8005f3a:	d016      	beq.n	8005f6a <USB_DeactivateEndpoint+0x66>
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	18d3      	adds	r3, r2, r3
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	200a      	movs	r0, #10
 8005f4c:	183b      	adds	r3, r7, r0
 8005f4e:	49c7      	ldr	r1, [pc, #796]	; (800626c <USB_DeactivateEndpoint+0x368>)
 8005f50:	400a      	ands	r2, r1
 8005f52:	801a      	strh	r2, [r3, #0]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	18d3      	adds	r3, r2, r3
 8005f5e:	183a      	adds	r2, r7, r0
 8005f60:	8812      	ldrh	r2, [r2, #0]
 8005f62:	49c3      	ldr	r1, [pc, #780]	; (8006270 <USB_DeactivateEndpoint+0x36c>)
 8005f64:	430a      	orrs	r2, r1
 8005f66:	b292      	uxth	r2, r2
 8005f68:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	18d3      	adds	r3, r2, r3
 8005f74:	881b      	ldrh	r3, [r3, #0]
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	2008      	movs	r0, #8
 8005f7a:	183b      	adds	r3, r7, r0
 8005f7c:	49bd      	ldr	r1, [pc, #756]	; (8006274 <USB_DeactivateEndpoint+0x370>)
 8005f7e:	400a      	ands	r2, r1
 8005f80:	801a      	strh	r2, [r3, #0]
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	18d3      	adds	r3, r2, r3
 8005f8c:	183a      	adds	r2, r7, r0
 8005f8e:	8812      	ldrh	r2, [r2, #0]
 8005f90:	49b9      	ldr	r1, [pc, #740]	; (8006278 <USB_DeactivateEndpoint+0x374>)
 8005f92:	430a      	orrs	r2, r1
 8005f94:	b292      	uxth	r2, r2
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	e163      	b.n	8006262 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	18d2      	adds	r2, r2, r3
 8005fa4:	2112      	movs	r1, #18
 8005fa6:	187b      	adds	r3, r7, r1
 8005fa8:	8812      	ldrh	r2, [r2, #0]
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	187b      	adds	r3, r7, r1
 8005fae:	881a      	ldrh	r2, [r3, #0]
 8005fb0:	2380      	movs	r3, #128	; 0x80
 8005fb2:	01db      	lsls	r3, r3, #7
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d016      	beq.n	8005fe6 <USB_DeactivateEndpoint+0xe2>
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	18d3      	adds	r3, r2, r3
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	2010      	movs	r0, #16
 8005fc8:	183b      	adds	r3, r7, r0
 8005fca:	49a8      	ldr	r1, [pc, #672]	; (800626c <USB_DeactivateEndpoint+0x368>)
 8005fcc:	400a      	ands	r2, r1
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	18d3      	adds	r3, r2, r3
 8005fda:	183a      	adds	r2, r7, r0
 8005fdc:	8812      	ldrh	r2, [r2, #0]
 8005fde:	49a7      	ldr	r1, [pc, #668]	; (800627c <USB_DeactivateEndpoint+0x378>)
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	b292      	uxth	r2, r2
 8005fe4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	18d3      	adds	r3, r2, r3
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	200e      	movs	r0, #14
 8005ff6:	183b      	adds	r3, r7, r0
 8005ff8:	49a1      	ldr	r1, [pc, #644]	; (8006280 <USB_DeactivateEndpoint+0x37c>)
 8005ffa:	400a      	ands	r2, r1
 8005ffc:	801a      	strh	r2, [r3, #0]
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	18d3      	adds	r3, r2, r3
 8006008:	183a      	adds	r2, r7, r0
 800600a:	8812      	ldrh	r2, [r2, #0]
 800600c:	499a      	ldr	r1, [pc, #616]	; (8006278 <USB_DeactivateEndpoint+0x374>)
 800600e:	430a      	orrs	r2, r1
 8006010:	b292      	uxth	r2, r2
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	e125      	b.n	8006262 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	785b      	ldrb	r3, [r3, #1]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d000      	beq.n	8006020 <USB_DeactivateEndpoint+0x11c>
 800601e:	e090      	b.n	8006142 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	18d2      	adds	r2, r2, r3
 800602a:	2120      	movs	r1, #32
 800602c:	187b      	adds	r3, r7, r1
 800602e:	8812      	ldrh	r2, [r2, #0]
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	187b      	adds	r3, r7, r1
 8006034:	881a      	ldrh	r2, [r3, #0]
 8006036:	2380      	movs	r3, #128	; 0x80
 8006038:	01db      	lsls	r3, r3, #7
 800603a:	4013      	ands	r3, r2
 800603c:	d016      	beq.n	800606c <USB_DeactivateEndpoint+0x168>
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	18d3      	adds	r3, r2, r3
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29a      	uxth	r2, r3
 800604c:	201e      	movs	r0, #30
 800604e:	183b      	adds	r3, r7, r0
 8006050:	4986      	ldr	r1, [pc, #536]	; (800626c <USB_DeactivateEndpoint+0x368>)
 8006052:	400a      	ands	r2, r1
 8006054:	801a      	strh	r2, [r3, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	18d3      	adds	r3, r2, r3
 8006060:	183a      	adds	r2, r7, r0
 8006062:	8812      	ldrh	r2, [r2, #0]
 8006064:	4985      	ldr	r1, [pc, #532]	; (800627c <USB_DeactivateEndpoint+0x378>)
 8006066:	430a      	orrs	r2, r1
 8006068:	b292      	uxth	r2, r2
 800606a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	18d2      	adds	r2, r2, r3
 8006076:	211c      	movs	r1, #28
 8006078:	187b      	adds	r3, r7, r1
 800607a:	8812      	ldrh	r2, [r2, #0]
 800607c:	801a      	strh	r2, [r3, #0]
 800607e:	187b      	adds	r3, r7, r1
 8006080:	881b      	ldrh	r3, [r3, #0]
 8006082:	2240      	movs	r2, #64	; 0x40
 8006084:	4013      	ands	r3, r2
 8006086:	d016      	beq.n	80060b6 <USB_DeactivateEndpoint+0x1b2>
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	18d3      	adds	r3, r2, r3
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	b29a      	uxth	r2, r3
 8006096:	201a      	movs	r0, #26
 8006098:	183b      	adds	r3, r7, r0
 800609a:	4974      	ldr	r1, [pc, #464]	; (800626c <USB_DeactivateEndpoint+0x368>)
 800609c:	400a      	ands	r2, r1
 800609e:	801a      	strh	r2, [r3, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	183a      	adds	r2, r7, r0
 80060ac:	8812      	ldrh	r2, [r2, #0]
 80060ae:	4970      	ldr	r1, [pc, #448]	; (8006270 <USB_DeactivateEndpoint+0x36c>)
 80060b0:	430a      	orrs	r2, r1
 80060b2:	b292      	uxth	r2, r2
 80060b4:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	18d3      	adds	r3, r2, r3
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	2018      	movs	r0, #24
 80060c6:	183b      	adds	r3, r7, r0
 80060c8:	4968      	ldr	r1, [pc, #416]	; (800626c <USB_DeactivateEndpoint+0x368>)
 80060ca:	400a      	ands	r2, r1
 80060cc:	801a      	strh	r2, [r3, #0]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	18d3      	adds	r3, r2, r3
 80060d8:	183a      	adds	r2, r7, r0
 80060da:	8812      	ldrh	r2, [r2, #0]
 80060dc:	4964      	ldr	r1, [pc, #400]	; (8006270 <USB_DeactivateEndpoint+0x36c>)
 80060de:	430a      	orrs	r2, r1
 80060e0:	b292      	uxth	r2, r2
 80060e2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	18d3      	adds	r3, r2, r3
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	b29a      	uxth	r2, r3
 80060f2:	2016      	movs	r0, #22
 80060f4:	183b      	adds	r3, r7, r0
 80060f6:	4962      	ldr	r1, [pc, #392]	; (8006280 <USB_DeactivateEndpoint+0x37c>)
 80060f8:	400a      	ands	r2, r1
 80060fa:	801a      	strh	r2, [r3, #0]
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	18d3      	adds	r3, r2, r3
 8006106:	183a      	adds	r2, r7, r0
 8006108:	8812      	ldrh	r2, [r2, #0]
 800610a:	495b      	ldr	r1, [pc, #364]	; (8006278 <USB_DeactivateEndpoint+0x374>)
 800610c:	430a      	orrs	r2, r1
 800610e:	b292      	uxth	r2, r2
 8006110:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	18d3      	adds	r3, r2, r3
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29a      	uxth	r2, r3
 8006120:	2014      	movs	r0, #20
 8006122:	183b      	adds	r3, r7, r0
 8006124:	4953      	ldr	r1, [pc, #332]	; (8006274 <USB_DeactivateEndpoint+0x370>)
 8006126:	400a      	ands	r2, r1
 8006128:	801a      	strh	r2, [r3, #0]
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	18d3      	adds	r3, r2, r3
 8006134:	183a      	adds	r2, r7, r0
 8006136:	8812      	ldrh	r2, [r2, #0]
 8006138:	494f      	ldr	r1, [pc, #316]	; (8006278 <USB_DeactivateEndpoint+0x374>)
 800613a:	430a      	orrs	r2, r1
 800613c:	b292      	uxth	r2, r2
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	e08f      	b.n	8006262 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	18d2      	adds	r2, r2, r3
 800614c:	212e      	movs	r1, #46	; 0x2e
 800614e:	187b      	adds	r3, r7, r1
 8006150:	8812      	ldrh	r2, [r2, #0]
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	187b      	adds	r3, r7, r1
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	01db      	lsls	r3, r3, #7
 800615c:	4013      	ands	r3, r2
 800615e:	d016      	beq.n	800618e <USB_DeactivateEndpoint+0x28a>
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	18d3      	adds	r3, r2, r3
 800616a:	881b      	ldrh	r3, [r3, #0]
 800616c:	b29a      	uxth	r2, r3
 800616e:	202c      	movs	r0, #44	; 0x2c
 8006170:	183b      	adds	r3, r7, r0
 8006172:	493e      	ldr	r1, [pc, #248]	; (800626c <USB_DeactivateEndpoint+0x368>)
 8006174:	400a      	ands	r2, r1
 8006176:	801a      	strh	r2, [r3, #0]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	18d3      	adds	r3, r2, r3
 8006182:	183a      	adds	r2, r7, r0
 8006184:	8812      	ldrh	r2, [r2, #0]
 8006186:	493d      	ldr	r1, [pc, #244]	; (800627c <USB_DeactivateEndpoint+0x378>)
 8006188:	430a      	orrs	r2, r1
 800618a:	b292      	uxth	r2, r2
 800618c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	18d2      	adds	r2, r2, r3
 8006198:	212a      	movs	r1, #42	; 0x2a
 800619a:	187b      	adds	r3, r7, r1
 800619c:	8812      	ldrh	r2, [r2, #0]
 800619e:	801a      	strh	r2, [r3, #0]
 80061a0:	187b      	adds	r3, r7, r1
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	2240      	movs	r2, #64	; 0x40
 80061a6:	4013      	ands	r3, r2
 80061a8:	d016      	beq.n	80061d8 <USB_DeactivateEndpoint+0x2d4>
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	18d3      	adds	r3, r2, r3
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	2028      	movs	r0, #40	; 0x28
 80061ba:	183b      	adds	r3, r7, r0
 80061bc:	492b      	ldr	r1, [pc, #172]	; (800626c <USB_DeactivateEndpoint+0x368>)
 80061be:	400a      	ands	r2, r1
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	18d3      	adds	r3, r2, r3
 80061cc:	183a      	adds	r2, r7, r0
 80061ce:	8812      	ldrh	r2, [r2, #0]
 80061d0:	4927      	ldr	r1, [pc, #156]	; (8006270 <USB_DeactivateEndpoint+0x36c>)
 80061d2:	430a      	orrs	r2, r1
 80061d4:	b292      	uxth	r2, r2
 80061d6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	18d3      	adds	r3, r2, r3
 80061e2:	881b      	ldrh	r3, [r3, #0]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	2026      	movs	r0, #38	; 0x26
 80061e8:	183b      	adds	r3, r7, r0
 80061ea:	4920      	ldr	r1, [pc, #128]	; (800626c <USB_DeactivateEndpoint+0x368>)
 80061ec:	400a      	ands	r2, r1
 80061ee:	801a      	strh	r2, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	18d3      	adds	r3, r2, r3
 80061fa:	183a      	adds	r2, r7, r0
 80061fc:	8812      	ldrh	r2, [r2, #0]
 80061fe:	491f      	ldr	r1, [pc, #124]	; (800627c <USB_DeactivateEndpoint+0x378>)
 8006200:	430a      	orrs	r2, r1
 8006202:	b292      	uxth	r2, r2
 8006204:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	18d3      	adds	r3, r2, r3
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	b29a      	uxth	r2, r3
 8006214:	2024      	movs	r0, #36	; 0x24
 8006216:	183b      	adds	r3, r7, r0
 8006218:	4916      	ldr	r1, [pc, #88]	; (8006274 <USB_DeactivateEndpoint+0x370>)
 800621a:	400a      	ands	r2, r1
 800621c:	801a      	strh	r2, [r3, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	18d3      	adds	r3, r2, r3
 8006228:	183a      	adds	r2, r7, r0
 800622a:	8812      	ldrh	r2, [r2, #0]
 800622c:	4912      	ldr	r1, [pc, #72]	; (8006278 <USB_DeactivateEndpoint+0x374>)
 800622e:	430a      	orrs	r2, r1
 8006230:	b292      	uxth	r2, r2
 8006232:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	18d3      	adds	r3, r2, r3
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29a      	uxth	r2, r3
 8006242:	2022      	movs	r0, #34	; 0x22
 8006244:	183b      	adds	r3, r7, r0
 8006246:	490e      	ldr	r1, [pc, #56]	; (8006280 <USB_DeactivateEndpoint+0x37c>)
 8006248:	400a      	ands	r2, r1
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	18d3      	adds	r3, r2, r3
 8006256:	183a      	adds	r2, r7, r0
 8006258:	8812      	ldrh	r2, [r2, #0]
 800625a:	4907      	ldr	r1, [pc, #28]	; (8006278 <USB_DeactivateEndpoint+0x374>)
 800625c:	430a      	orrs	r2, r1
 800625e:	b292      	uxth	r2, r2
 8006260:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	0018      	movs	r0, r3
 8006266:	46bd      	mov	sp, r7
 8006268:	b00c      	add	sp, #48	; 0x30
 800626a:	bd80      	pop	{r7, pc}
 800626c:	ffff8f8f 	.word	0xffff8f8f
 8006270:	ffff80c0 	.word	0xffff80c0
 8006274:	ffff8fbf 	.word	0xffff8fbf
 8006278:	ffff8080 	.word	0xffff8080
 800627c:	ffffc080 	.word	0xffffc080
 8006280:	ffffbf8f 	.word	0xffffbf8f

08006284 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006284:	b590      	push	{r4, r7, lr}
 8006286:	b0c3      	sub	sp, #268	; 0x10c
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	785b      	ldrb	r3, [r3, #1]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d001      	beq.n	800629a <USB_EPStartXfer+0x16>
 8006296:	f000 fcef 	bl	8006c78 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d905      	bls.n	80062b2 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	1d7a      	adds	r2, r7, #5
 80062ac:	32ff      	adds	r2, #255	; 0xff
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e004      	b.n	80062bc <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	1d7a      	adds	r2, r7, #5
 80062b8:	32ff      	adds	r2, #255	; 0xff
 80062ba:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	7b1b      	ldrb	r3, [r3, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d125      	bne.n	8006310 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6959      	ldr	r1, [r3, #20]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	88da      	ldrh	r2, [r3, #6]
 80062cc:	1d7b      	adds	r3, r7, #5
 80062ce:	33ff      	adds	r3, #255	; 0xff
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f001 f9c9 	bl	800766c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2250      	movs	r2, #80	; 0x50
 80062e2:	5a9b      	ldrh	r3, [r3, r2]
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	001a      	movs	r2, r3
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	189b      	adds	r3, r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	00da      	lsls	r2, r3, #3
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	18d3      	adds	r3, r2, r3
 80062f8:	4acc      	ldr	r2, [pc, #816]	; (800662c <USB_EPStartXfer+0x3a8>)
 80062fa:	4694      	mov	ip, r2
 80062fc:	4463      	add	r3, ip
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	1d7b      	adds	r3, r7, #5
 8006302:	33ff      	adds	r3, #255	; 0xff
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	b29a      	uxth	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	f000 fc8f 	bl	8006c2e <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	78db      	ldrb	r3, [r3, #3]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d000      	beq.n	800631a <USB_EPStartXfer+0x96>
 8006318:	e33a      	b.n	8006990 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6a1a      	ldr	r2, [r3, #32]
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	429a      	cmp	r2, r3
 8006324:	d800      	bhi.n	8006328 <USB_EPStartXfer+0xa4>
 8006326:	e2df      	b.n	80068e8 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	18d3      	adds	r3, r2, r3
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	b29a      	uxth	r2, r3
 8006336:	2056      	movs	r0, #86	; 0x56
 8006338:	183b      	adds	r3, r7, r0
 800633a:	49bd      	ldr	r1, [pc, #756]	; (8006630 <USB_EPStartXfer+0x3ac>)
 800633c:	400a      	ands	r2, r1
 800633e:	801a      	strh	r2, [r3, #0]
 8006340:	687a      	ldr	r2, [r7, #4]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	18d3      	adds	r3, r2, r3
 800634a:	183a      	adds	r2, r7, r0
 800634c:	8812      	ldrh	r2, [r2, #0]
 800634e:	49b9      	ldr	r1, [pc, #740]	; (8006634 <USB_EPStartXfer+0x3b0>)
 8006350:	430a      	orrs	r2, r1
 8006352:	b292      	uxth	r2, r2
 8006354:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	6a1a      	ldr	r2, [r3, #32]
 800635a:	1d7b      	adds	r3, r7, #5
 800635c:	33ff      	adds	r3, #255	; 0xff
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	1ad2      	subs	r2, r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	18d3      	adds	r3, r2, r3
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	b29b      	uxth	r3, r3
 8006374:	001a      	movs	r2, r3
 8006376:	2340      	movs	r3, #64	; 0x40
 8006378:	4013      	ands	r3, r2
 800637a:	d100      	bne.n	800637e <USB_EPStartXfer+0xfa>
 800637c:	e162      	b.n	8006644 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	633b      	str	r3, [r7, #48]	; 0x30
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d16a      	bne.n	8006460 <USB_EPStartXfer+0x1dc>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	62bb      	str	r3, [r7, #40]	; 0x28
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2250      	movs	r2, #80	; 0x50
 8006392:	5a9b      	ldrh	r3, [r3, r2]
 8006394:	b29b      	uxth	r3, r3
 8006396:	001a      	movs	r2, r3
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	189b      	adds	r3, r3, r2
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	00da      	lsls	r2, r3, #3
 80063a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a6:	18d3      	adds	r3, r2, r3
 80063a8:	4aa3      	ldr	r2, [pc, #652]	; (8006638 <USB_EPStartXfer+0x3b4>)
 80063aa:	4694      	mov	ip, r2
 80063ac:	4463      	add	r3, ip
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
 80063b0:	1d7b      	adds	r3, r7, #5
 80063b2:	33ff      	adds	r3, #255	; 0xff
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d110      	bne.n	80063dc <USB_EPStartXfer+0x158>
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	b29b      	uxth	r3, r3
 80063c0:	4a9e      	ldr	r2, [pc, #632]	; (800663c <USB_EPStartXfer+0x3b8>)
 80063c2:	4013      	ands	r3, r2
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	4a9b      	ldr	r2, [pc, #620]	; (8006640 <USB_EPStartXfer+0x3bc>)
 80063d2:	4313      	orrs	r3, r2
 80063d4:	b29a      	uxth	r2, r3
 80063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e05c      	b.n	8006496 <USB_EPStartXfer+0x212>
 80063dc:	1d7b      	adds	r3, r7, #5
 80063de:	33ff      	adds	r3, #255	; 0xff
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2b3e      	cmp	r3, #62	; 0x3e
 80063e4:	d81c      	bhi.n	8006420 <USB_EPStartXfer+0x19c>
 80063e6:	1d7b      	adds	r3, r7, #5
 80063e8:	33ff      	adds	r3, #255	; 0xff
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	085b      	lsrs	r3, r3, #1
 80063ee:	1c7a      	adds	r2, r7, #1
 80063f0:	32ff      	adds	r2, #255	; 0xff
 80063f2:	6013      	str	r3, [r2, #0]
 80063f4:	1d7b      	adds	r3, r7, #5
 80063f6:	33ff      	adds	r3, #255	; 0xff
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2201      	movs	r2, #1
 80063fc:	4013      	ands	r3, r2
 80063fe:	d006      	beq.n	800640e <USB_EPStartXfer+0x18a>
 8006400:	1c7b      	adds	r3, r7, #1
 8006402:	33ff      	adds	r3, #255	; 0xff
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	1c7a      	adds	r2, r7, #1
 800640a:	32ff      	adds	r2, #255	; 0xff
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	1c7b      	adds	r3, r7, #1
 8006410:	33ff      	adds	r3, #255	; 0xff
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	029b      	lsls	r3, r3, #10
 8006418:	b29a      	uxth	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	801a      	strh	r2, [r3, #0]
 800641e:	e03a      	b.n	8006496 <USB_EPStartXfer+0x212>
 8006420:	1d7b      	adds	r3, r7, #5
 8006422:	33ff      	adds	r3, #255	; 0xff
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	1c7a      	adds	r2, r7, #1
 800642a:	32ff      	adds	r2, #255	; 0xff
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	1d7b      	adds	r3, r7, #5
 8006430:	33ff      	adds	r3, #255	; 0xff
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	221f      	movs	r2, #31
 8006436:	4013      	ands	r3, r2
 8006438:	d106      	bne.n	8006448 <USB_EPStartXfer+0x1c4>
 800643a:	1c7b      	adds	r3, r7, #1
 800643c:	33ff      	adds	r3, #255	; 0xff
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3b01      	subs	r3, #1
 8006442:	1c7a      	adds	r2, r7, #1
 8006444:	32ff      	adds	r2, #255	; 0xff
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	1c7b      	adds	r3, r7, #1
 800644a:	33ff      	adds	r3, #255	; 0xff
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	b29b      	uxth	r3, r3
 8006454:	4a7a      	ldr	r2, [pc, #488]	; (8006640 <USB_EPStartXfer+0x3bc>)
 8006456:	4313      	orrs	r3, r2
 8006458:	b29a      	uxth	r2, r3
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	801a      	strh	r2, [r3, #0]
 800645e:	e01a      	b.n	8006496 <USB_EPStartXfer+0x212>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	785b      	ldrb	r3, [r3, #1]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d116      	bne.n	8006496 <USB_EPStartXfer+0x212>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2250      	movs	r2, #80	; 0x50
 800646c:	5a9b      	ldrh	r3, [r3, r2]
 800646e:	b29b      	uxth	r3, r3
 8006470:	001a      	movs	r2, r3
 8006472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006474:	189b      	adds	r3, r3, r2
 8006476:	633b      	str	r3, [r7, #48]	; 0x30
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	00da      	lsls	r2, r3, #3
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	18d3      	adds	r3, r2, r3
 8006482:	4a6d      	ldr	r2, [pc, #436]	; (8006638 <USB_EPStartXfer+0x3b4>)
 8006484:	4694      	mov	ip, r2
 8006486:	4463      	add	r3, ip
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800648a:	1d7b      	adds	r3, r7, #5
 800648c:	33ff      	adds	r3, #255	; 0xff
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	b29a      	uxth	r2, r3
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006496:	2076      	movs	r0, #118	; 0x76
 8006498:	183b      	adds	r3, r7, r0
 800649a:	683a      	ldr	r2, [r7, #0]
 800649c:	8952      	ldrh	r2, [r2, #10]
 800649e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	6959      	ldr	r1, [r3, #20]
 80064a4:	1d7b      	adds	r3, r7, #5
 80064a6:	33ff      	adds	r3, #255	; 0xff
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	b29c      	uxth	r4, r3
 80064ac:	183b      	adds	r3, r7, r0
 80064ae:	881a      	ldrh	r2, [r3, #0]
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	0023      	movs	r3, r4
 80064b4:	f001 f8da 	bl	800766c <USB_WritePMA>
            ep->xfer_buff += len;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	1d7b      	adds	r3, r7, #5
 80064be:	33ff      	adds	r3, #255	; 0xff
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	18d2      	adds	r2, r2, r3
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	6a1a      	ldr	r2, [r3, #32]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d908      	bls.n	80064e6 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6a1a      	ldr	r2, [r3, #32]
 80064d8:	1d7b      	adds	r3, r7, #5
 80064da:	33ff      	adds	r3, #255	; 0xff
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	1ad2      	subs	r2, r2, r3
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	621a      	str	r2, [r3, #32]
 80064e4:	e007      	b.n	80064f6 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	1d7a      	adds	r2, r7, #5
 80064ec:	32ff      	adds	r2, #255	; 0xff
 80064ee:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2200      	movs	r2, #0
 80064f4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d166      	bne.n	80065cc <USB_EPStartXfer+0x348>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	61bb      	str	r3, [r7, #24]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2250      	movs	r2, #80	; 0x50
 8006506:	5a9b      	ldrh	r3, [r3, r2]
 8006508:	b29b      	uxth	r3, r3
 800650a:	001a      	movs	r2, r3
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	189b      	adds	r3, r3, r2
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	00da      	lsls	r2, r3, #3
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	18d3      	adds	r3, r2, r3
 800651c:	4a43      	ldr	r2, [pc, #268]	; (800662c <USB_EPStartXfer+0x3a8>)
 800651e:	4694      	mov	ip, r2
 8006520:	4463      	add	r3, ip
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	1d7b      	adds	r3, r7, #5
 8006526:	33ff      	adds	r3, #255	; 0xff
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d110      	bne.n	8006550 <USB_EPStartXfer+0x2cc>
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	b29b      	uxth	r3, r3
 8006534:	4a41      	ldr	r2, [pc, #260]	; (800663c <USB_EPStartXfer+0x3b8>)
 8006536:	4013      	ands	r3, r2
 8006538:	b29a      	uxth	r2, r3
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	881b      	ldrh	r3, [r3, #0]
 8006542:	b29b      	uxth	r3, r3
 8006544:	4a3e      	ldr	r2, [pc, #248]	; (8006640 <USB_EPStartXfer+0x3bc>)
 8006546:	4313      	orrs	r3, r2
 8006548:	b29a      	uxth	r2, r3
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	801a      	strh	r2, [r3, #0]
 800654e:	e05a      	b.n	8006606 <USB_EPStartXfer+0x382>
 8006550:	1d7b      	adds	r3, r7, #5
 8006552:	33ff      	adds	r3, #255	; 0xff
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b3e      	cmp	r3, #62	; 0x3e
 8006558:	d81a      	bhi.n	8006590 <USB_EPStartXfer+0x30c>
 800655a:	1d7b      	adds	r3, r7, #5
 800655c:	33ff      	adds	r3, #255	; 0xff
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	085b      	lsrs	r3, r3, #1
 8006562:	21fc      	movs	r1, #252	; 0xfc
 8006564:	187a      	adds	r2, r7, r1
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	1d7b      	adds	r3, r7, #5
 800656a:	33ff      	adds	r3, #255	; 0xff
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2201      	movs	r2, #1
 8006570:	4013      	ands	r3, r2
 8006572:	d004      	beq.n	800657e <USB_EPStartXfer+0x2fa>
 8006574:	187b      	adds	r3, r7, r1
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	3301      	adds	r3, #1
 800657a:	187a      	adds	r2, r7, r1
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	23fc      	movs	r3, #252	; 0xfc
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	029b      	lsls	r3, r3, #10
 8006588:	b29a      	uxth	r2, r3
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	801a      	strh	r2, [r3, #0]
 800658e:	e03a      	b.n	8006606 <USB_EPStartXfer+0x382>
 8006590:	1d7b      	adds	r3, r7, #5
 8006592:	33ff      	adds	r3, #255	; 0xff
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	095b      	lsrs	r3, r3, #5
 8006598:	21fc      	movs	r1, #252	; 0xfc
 800659a:	187a      	adds	r2, r7, r1
 800659c:	6013      	str	r3, [r2, #0]
 800659e:	1d7b      	adds	r3, r7, #5
 80065a0:	33ff      	adds	r3, #255	; 0xff
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	221f      	movs	r2, #31
 80065a6:	4013      	ands	r3, r2
 80065a8:	d104      	bne.n	80065b4 <USB_EPStartXfer+0x330>
 80065aa:	187b      	adds	r3, r7, r1
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	187a      	adds	r2, r7, r1
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	23fc      	movs	r3, #252	; 0xfc
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	029b      	lsls	r3, r3, #10
 80065be:	b29b      	uxth	r3, r3
 80065c0:	4a1f      	ldr	r2, [pc, #124]	; (8006640 <USB_EPStartXfer+0x3bc>)
 80065c2:	4313      	orrs	r3, r2
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	801a      	strh	r2, [r3, #0]
 80065ca:	e01c      	b.n	8006606 <USB_EPStartXfer+0x382>
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	785b      	ldrb	r3, [r3, #1]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d118      	bne.n	8006606 <USB_EPStartXfer+0x382>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	623b      	str	r3, [r7, #32]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2250      	movs	r2, #80	; 0x50
 80065dc:	5a9b      	ldrh	r3, [r3, r2]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	001a      	movs	r2, r3
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	189b      	adds	r3, r3, r2
 80065e6:	623b      	str	r3, [r7, #32]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	00da      	lsls	r2, r3, #3
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	18d3      	adds	r3, r2, r3
 80065f2:	4a0e      	ldr	r2, [pc, #56]	; (800662c <USB_EPStartXfer+0x3a8>)
 80065f4:	4694      	mov	ip, r2
 80065f6:	4463      	add	r3, ip
 80065f8:	61fb      	str	r3, [r7, #28]
 80065fa:	1d7b      	adds	r3, r7, #5
 80065fc:	33ff      	adds	r3, #255	; 0xff
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	b29a      	uxth	r2, r3
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006606:	2076      	movs	r0, #118	; 0x76
 8006608:	183b      	adds	r3, r7, r0
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	8912      	ldrh	r2, [r2, #8]
 800660e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	6959      	ldr	r1, [r3, #20]
 8006614:	1d7b      	adds	r3, r7, #5
 8006616:	33ff      	adds	r3, #255	; 0xff
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	b29c      	uxth	r4, r3
 800661c:	183b      	adds	r3, r7, r0
 800661e:	881a      	ldrh	r2, [r3, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	0023      	movs	r3, r4
 8006624:	f001 f822 	bl	800766c <USB_WritePMA>
 8006628:	e301      	b.n	8006c2e <USB_EPStartXfer+0x9aa>
 800662a:	46c0      	nop			; (mov r8, r8)
 800662c:	00000402 	.word	0x00000402
 8006630:	ffff8f8f 	.word	0xffff8f8f
 8006634:	ffff8180 	.word	0xffff8180
 8006638:	00000406 	.word	0x00000406
 800663c:	ffff83ff 	.word	0xffff83ff
 8006640:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	785b      	ldrb	r3, [r3, #1]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d166      	bne.n	800671a <USB_EPStartXfer+0x496>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2250      	movs	r2, #80	; 0x50
 8006654:	5a9b      	ldrh	r3, [r3, r2]
 8006656:	b29b      	uxth	r3, r3
 8006658:	001a      	movs	r2, r3
 800665a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665c:	189b      	adds	r3, r3, r2
 800665e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	00da      	lsls	r2, r3, #3
 8006666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006668:	18d3      	adds	r3, r2, r3
 800666a:	4ac3      	ldr	r2, [pc, #780]	; (8006978 <USB_EPStartXfer+0x6f4>)
 800666c:	4694      	mov	ip, r2
 800666e:	4463      	add	r3, ip
 8006670:	647b      	str	r3, [r7, #68]	; 0x44
 8006672:	1d7b      	adds	r3, r7, #5
 8006674:	33ff      	adds	r3, #255	; 0xff
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <USB_EPStartXfer+0x41a>
 800667c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667e:	881b      	ldrh	r3, [r3, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	4abe      	ldr	r2, [pc, #760]	; (800697c <USB_EPStartXfer+0x6f8>)
 8006684:	4013      	ands	r3, r2
 8006686:	b29a      	uxth	r2, r3
 8006688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668a:	801a      	strh	r2, [r3, #0]
 800668c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800668e:	881b      	ldrh	r3, [r3, #0]
 8006690:	b29b      	uxth	r3, r3
 8006692:	4abb      	ldr	r2, [pc, #748]	; (8006980 <USB_EPStartXfer+0x6fc>)
 8006694:	4313      	orrs	r3, r2
 8006696:	b29a      	uxth	r2, r3
 8006698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800669a:	801a      	strh	r2, [r3, #0]
 800669c:	e05a      	b.n	8006754 <USB_EPStartXfer+0x4d0>
 800669e:	1d7b      	adds	r3, r7, #5
 80066a0:	33ff      	adds	r3, #255	; 0xff
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b3e      	cmp	r3, #62	; 0x3e
 80066a6:	d81a      	bhi.n	80066de <USB_EPStartXfer+0x45a>
 80066a8:	1d7b      	adds	r3, r7, #5
 80066aa:	33ff      	adds	r3, #255	; 0xff
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	085b      	lsrs	r3, r3, #1
 80066b0:	21f8      	movs	r1, #248	; 0xf8
 80066b2:	187a      	adds	r2, r7, r1
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	1d7b      	adds	r3, r7, #5
 80066b8:	33ff      	adds	r3, #255	; 0xff
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	4013      	ands	r3, r2
 80066c0:	d004      	beq.n	80066cc <USB_EPStartXfer+0x448>
 80066c2:	187b      	adds	r3, r7, r1
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	187a      	adds	r2, r7, r1
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	23f8      	movs	r3, #248	; 0xf8
 80066ce:	18fb      	adds	r3, r7, r3
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	029b      	lsls	r3, r3, #10
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066da:	801a      	strh	r2, [r3, #0]
 80066dc:	e03a      	b.n	8006754 <USB_EPStartXfer+0x4d0>
 80066de:	1d7b      	adds	r3, r7, #5
 80066e0:	33ff      	adds	r3, #255	; 0xff
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	21f8      	movs	r1, #248	; 0xf8
 80066e8:	187a      	adds	r2, r7, r1
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	1d7b      	adds	r3, r7, #5
 80066ee:	33ff      	adds	r3, #255	; 0xff
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	221f      	movs	r2, #31
 80066f4:	4013      	ands	r3, r2
 80066f6:	d104      	bne.n	8006702 <USB_EPStartXfer+0x47e>
 80066f8:	187b      	adds	r3, r7, r1
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3b01      	subs	r3, #1
 80066fe:	187a      	adds	r2, r7, r1
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	23f8      	movs	r3, #248	; 0xf8
 8006704:	18fb      	adds	r3, r7, r3
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	b29b      	uxth	r3, r3
 800670e:	4a9c      	ldr	r2, [pc, #624]	; (8006980 <USB_EPStartXfer+0x6fc>)
 8006710:	4313      	orrs	r3, r2
 8006712:	b29a      	uxth	r2, r3
 8006714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e01c      	b.n	8006754 <USB_EPStartXfer+0x4d0>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d118      	bne.n	8006754 <USB_EPStartXfer+0x4d0>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	653b      	str	r3, [r7, #80]	; 0x50
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2250      	movs	r2, #80	; 0x50
 800672a:	5a9b      	ldrh	r3, [r3, r2]
 800672c:	b29b      	uxth	r3, r3
 800672e:	001a      	movs	r2, r3
 8006730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006732:	189b      	adds	r3, r3, r2
 8006734:	653b      	str	r3, [r7, #80]	; 0x50
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	00da      	lsls	r2, r3, #3
 800673c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800673e:	18d3      	adds	r3, r2, r3
 8006740:	4a8d      	ldr	r2, [pc, #564]	; (8006978 <USB_EPStartXfer+0x6f4>)
 8006742:	4694      	mov	ip, r2
 8006744:	4463      	add	r3, ip
 8006746:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006748:	1d7b      	adds	r3, r7, #5
 800674a:	33ff      	adds	r3, #255	; 0xff
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	b29a      	uxth	r2, r3
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006754:	2076      	movs	r0, #118	; 0x76
 8006756:	183b      	adds	r3, r7, r0
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	8912      	ldrh	r2, [r2, #8]
 800675c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6959      	ldr	r1, [r3, #20]
 8006762:	1d7b      	adds	r3, r7, #5
 8006764:	33ff      	adds	r3, #255	; 0xff
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b29c      	uxth	r4, r3
 800676a:	183b      	adds	r3, r7, r0
 800676c:	881a      	ldrh	r2, [r3, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	0023      	movs	r3, r4
 8006772:	f000 ff7b 	bl	800766c <USB_WritePMA>
            ep->xfer_buff += len;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	1d7b      	adds	r3, r7, #5
 800677c:	33ff      	adds	r3, #255	; 0xff
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	18d2      	adds	r2, r2, r3
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6a1a      	ldr	r2, [r3, #32]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	429a      	cmp	r2, r3
 8006790:	d908      	bls.n	80067a4 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	1d7b      	adds	r3, r7, #5
 8006798:	33ff      	adds	r3, #255	; 0xff
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	1ad2      	subs	r2, r2, r3
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	621a      	str	r2, [r3, #32]
 80067a2:	e007      	b.n	80067b4 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	1d7a      	adds	r2, r7, #5
 80067aa:	32ff      	adds	r2, #255	; 0xff
 80067ac:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2200      	movs	r2, #0
 80067b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d166      	bne.n	800688e <USB_EPStartXfer+0x60a>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2250      	movs	r2, #80	; 0x50
 80067c8:	5a9b      	ldrh	r3, [r3, r2]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	001a      	movs	r2, r3
 80067ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d0:	189b      	adds	r3, r3, r2
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	00da      	lsls	r2, r3, #3
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	18d3      	adds	r3, r2, r3
 80067de:	4a69      	ldr	r2, [pc, #420]	; (8006984 <USB_EPStartXfer+0x700>)
 80067e0:	4694      	mov	ip, r2
 80067e2:	4463      	add	r3, ip
 80067e4:	637b      	str	r3, [r7, #52]	; 0x34
 80067e6:	1d7b      	adds	r3, r7, #5
 80067e8:	33ff      	adds	r3, #255	; 0xff
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d110      	bne.n	8006812 <USB_EPStartXfer+0x58e>
 80067f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4a61      	ldr	r2, [pc, #388]	; (800697c <USB_EPStartXfer+0x6f8>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	b29b      	uxth	r3, r3
 8006806:	4a5e      	ldr	r2, [pc, #376]	; (8006980 <USB_EPStartXfer+0x6fc>)
 8006808:	4313      	orrs	r3, r2
 800680a:	b29a      	uxth	r2, r3
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	801a      	strh	r2, [r3, #0]
 8006810:	e058      	b.n	80068c4 <USB_EPStartXfer+0x640>
 8006812:	1d7b      	adds	r3, r7, #5
 8006814:	33ff      	adds	r3, #255	; 0xff
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b3e      	cmp	r3, #62	; 0x3e
 800681a:	d81a      	bhi.n	8006852 <USB_EPStartXfer+0x5ce>
 800681c:	1d7b      	adds	r3, r7, #5
 800681e:	33ff      	adds	r3, #255	; 0xff
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	21f4      	movs	r1, #244	; 0xf4
 8006826:	187a      	adds	r2, r7, r1
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	1d7b      	adds	r3, r7, #5
 800682c:	33ff      	adds	r3, #255	; 0xff
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2201      	movs	r2, #1
 8006832:	4013      	ands	r3, r2
 8006834:	d004      	beq.n	8006840 <USB_EPStartXfer+0x5bc>
 8006836:	187b      	adds	r3, r7, r1
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	187a      	adds	r2, r7, r1
 800683e:	6013      	str	r3, [r2, #0]
 8006840:	23f4      	movs	r3, #244	; 0xf4
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	029b      	lsls	r3, r3, #10
 800684a:	b29a      	uxth	r2, r3
 800684c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	e038      	b.n	80068c4 <USB_EPStartXfer+0x640>
 8006852:	1d7b      	adds	r3, r7, #5
 8006854:	33ff      	adds	r3, #255	; 0xff
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	095b      	lsrs	r3, r3, #5
 800685a:	21f4      	movs	r1, #244	; 0xf4
 800685c:	187a      	adds	r2, r7, r1
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	1d7b      	adds	r3, r7, #5
 8006862:	33ff      	adds	r3, #255	; 0xff
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	221f      	movs	r2, #31
 8006868:	4013      	ands	r3, r2
 800686a:	d104      	bne.n	8006876 <USB_EPStartXfer+0x5f2>
 800686c:	187b      	adds	r3, r7, r1
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3b01      	subs	r3, #1
 8006872:	187a      	adds	r2, r7, r1
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	23f4      	movs	r3, #244	; 0xf4
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	b29b      	uxth	r3, r3
 800687e:	029b      	lsls	r3, r3, #10
 8006880:	b29b      	uxth	r3, r3
 8006882:	4a3f      	ldr	r2, [pc, #252]	; (8006980 <USB_EPStartXfer+0x6fc>)
 8006884:	4313      	orrs	r3, r2
 8006886:	b29a      	uxth	r2, r3
 8006888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688a:	801a      	strh	r2, [r3, #0]
 800688c:	e01a      	b.n	80068c4 <USB_EPStartXfer+0x640>
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	785b      	ldrb	r3, [r3, #1]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d116      	bne.n	80068c4 <USB_EPStartXfer+0x640>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2250      	movs	r2, #80	; 0x50
 800689a:	5a9b      	ldrh	r3, [r3, r2]
 800689c:	b29b      	uxth	r3, r3
 800689e:	001a      	movs	r2, r3
 80068a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	643b      	str	r3, [r7, #64]	; 0x40
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	00da      	lsls	r2, r3, #3
 80068ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068ae:	18d3      	adds	r3, r2, r3
 80068b0:	4a34      	ldr	r2, [pc, #208]	; (8006984 <USB_EPStartXfer+0x700>)
 80068b2:	4694      	mov	ip, r2
 80068b4:	4463      	add	r3, ip
 80068b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068b8:	1d7b      	adds	r3, r7, #5
 80068ba:	33ff      	adds	r3, #255	; 0xff
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	b29a      	uxth	r2, r3
 80068c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068c4:	2076      	movs	r0, #118	; 0x76
 80068c6:	183b      	adds	r3, r7, r0
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	8952      	ldrh	r2, [r2, #10]
 80068cc:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	6959      	ldr	r1, [r3, #20]
 80068d2:	1d7b      	adds	r3, r7, #5
 80068d4:	33ff      	adds	r3, #255	; 0xff
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b29c      	uxth	r4, r3
 80068da:	183b      	adds	r3, r7, r0
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	0023      	movs	r3, r4
 80068e2:	f000 fec3 	bl	800766c <USB_WritePMA>
 80068e6:	e1a2      	b.n	8006c2e <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	1d7a      	adds	r2, r7, #5
 80068ee:	32ff      	adds	r2, #255	; 0xff
 80068f0:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	18d3      	adds	r3, r2, r3
 80068fc:	881b      	ldrh	r3, [r3, #0]
 80068fe:	b29a      	uxth	r2, r3
 8006900:	2062      	movs	r0, #98	; 0x62
 8006902:	183b      	adds	r3, r7, r0
 8006904:	4920      	ldr	r1, [pc, #128]	; (8006988 <USB_EPStartXfer+0x704>)
 8006906:	400a      	ands	r2, r1
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	18d3      	adds	r3, r2, r3
 8006914:	183a      	adds	r2, r7, r0
 8006916:	8812      	ldrh	r2, [r2, #0]
 8006918:	491c      	ldr	r1, [pc, #112]	; (800698c <USB_EPStartXfer+0x708>)
 800691a:	430a      	orrs	r2, r1
 800691c:	b292      	uxth	r2, r2
 800691e:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2250      	movs	r2, #80	; 0x50
 8006928:	5a9b      	ldrh	r3, [r3, r2]
 800692a:	b29b      	uxth	r3, r3
 800692c:	001a      	movs	r2, r3
 800692e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006930:	189b      	adds	r3, r3, r2
 8006932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	00da      	lsls	r2, r3, #3
 800693a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800693c:	18d3      	adds	r3, r2, r3
 800693e:	4a0e      	ldr	r2, [pc, #56]	; (8006978 <USB_EPStartXfer+0x6f4>)
 8006940:	4694      	mov	ip, r2
 8006942:	4463      	add	r3, ip
 8006944:	65bb      	str	r3, [r7, #88]	; 0x58
 8006946:	1d7b      	adds	r3, r7, #5
 8006948:	33ff      	adds	r3, #255	; 0xff
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	b29a      	uxth	r2, r3
 800694e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006950:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006952:	2076      	movs	r0, #118	; 0x76
 8006954:	183b      	adds	r3, r7, r0
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	8912      	ldrh	r2, [r2, #8]
 800695a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	6959      	ldr	r1, [r3, #20]
 8006960:	1d7b      	adds	r3, r7, #5
 8006962:	33ff      	adds	r3, #255	; 0xff
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	b29c      	uxth	r4, r3
 8006968:	183b      	adds	r3, r7, r0
 800696a:	881a      	ldrh	r2, [r3, #0]
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	0023      	movs	r3, r4
 8006970:	f000 fe7c 	bl	800766c <USB_WritePMA>
 8006974:	e15b      	b.n	8006c2e <USB_EPStartXfer+0x9aa>
 8006976:	46c0      	nop			; (mov r8, r8)
 8006978:	00000402 	.word	0x00000402
 800697c:	ffff83ff 	.word	0xffff83ff
 8006980:	ffff8000 	.word	0xffff8000
 8006984:	00000406 	.word	0x00000406
 8006988:	ffff8e8f 	.word	0xffff8e8f
 800698c:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	6a1a      	ldr	r2, [r3, #32]
 8006994:	1d7b      	adds	r3, r7, #5
 8006996:	33ff      	adds	r3, #255	; 0xff
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	18d3      	adds	r3, r2, r3
 80069aa:	881b      	ldrh	r3, [r3, #0]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	001a      	movs	r2, r3
 80069b0:	2340      	movs	r3, #64	; 0x40
 80069b2:	4013      	ands	r3, r2
 80069b4:	d100      	bne.n	80069b8 <USB_EPStartXfer+0x734>
 80069b6:	e099      	b.n	8006aec <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	673b      	str	r3, [r7, #112]	; 0x70
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d166      	bne.n	8006a92 <USB_EPStartXfer+0x80e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2250      	movs	r2, #80	; 0x50
 80069cc:	5a9b      	ldrh	r3, [r3, r2]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	001a      	movs	r2, r3
 80069d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069d4:	189b      	adds	r3, r3, r2
 80069d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	00da      	lsls	r2, r3, #3
 80069de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e0:	18d3      	adds	r3, r2, r3
 80069e2:	4ad0      	ldr	r2, [pc, #832]	; (8006d24 <USB_EPStartXfer+0xaa0>)
 80069e4:	4694      	mov	ip, r2
 80069e6:	4463      	add	r3, ip
 80069e8:	667b      	str	r3, [r7, #100]	; 0x64
 80069ea:	1d7b      	adds	r3, r7, #5
 80069ec:	33ff      	adds	r3, #255	; 0xff
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d110      	bne.n	8006a16 <USB_EPStartXfer+0x792>
 80069f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4acb      	ldr	r2, [pc, #812]	; (8006d28 <USB_EPStartXfer+0xaa4>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	b29a      	uxth	r2, r3
 8006a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a02:	801a      	strh	r2, [r3, #0]
 8006a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a06:	881b      	ldrh	r3, [r3, #0]
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	4ac8      	ldr	r2, [pc, #800]	; (8006d2c <USB_EPStartXfer+0xaa8>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a12:	801a      	strh	r2, [r3, #0]
 8006a14:	e058      	b.n	8006ac8 <USB_EPStartXfer+0x844>
 8006a16:	1d7b      	adds	r3, r7, #5
 8006a18:	33ff      	adds	r3, #255	; 0xff
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b3e      	cmp	r3, #62	; 0x3e
 8006a1e:	d81a      	bhi.n	8006a56 <USB_EPStartXfer+0x7d2>
 8006a20:	1d7b      	adds	r3, r7, #5
 8006a22:	33ff      	adds	r3, #255	; 0xff
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	21f0      	movs	r1, #240	; 0xf0
 8006a2a:	187a      	adds	r2, r7, r1
 8006a2c:	6013      	str	r3, [r2, #0]
 8006a2e:	1d7b      	adds	r3, r7, #5
 8006a30:	33ff      	adds	r3, #255	; 0xff
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2201      	movs	r2, #1
 8006a36:	4013      	ands	r3, r2
 8006a38:	d004      	beq.n	8006a44 <USB_EPStartXfer+0x7c0>
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	187a      	adds	r2, r7, r1
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	23f0      	movs	r3, #240	; 0xf0
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	029b      	lsls	r3, r3, #10
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a52:	801a      	strh	r2, [r3, #0]
 8006a54:	e038      	b.n	8006ac8 <USB_EPStartXfer+0x844>
 8006a56:	1d7b      	adds	r3, r7, #5
 8006a58:	33ff      	adds	r3, #255	; 0xff
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	095b      	lsrs	r3, r3, #5
 8006a5e:	21f0      	movs	r1, #240	; 0xf0
 8006a60:	187a      	adds	r2, r7, r1
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	1d7b      	adds	r3, r7, #5
 8006a66:	33ff      	adds	r3, #255	; 0xff
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	221f      	movs	r2, #31
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d104      	bne.n	8006a7a <USB_EPStartXfer+0x7f6>
 8006a70:	187b      	adds	r3, r7, r1
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	187a      	adds	r2, r7, r1
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	23f0      	movs	r3, #240	; 0xf0
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	029b      	lsls	r3, r3, #10
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	4aa9      	ldr	r2, [pc, #676]	; (8006d2c <USB_EPStartXfer+0xaa8>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e01a      	b.n	8006ac8 <USB_EPStartXfer+0x844>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	785b      	ldrb	r3, [r3, #1]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d116      	bne.n	8006ac8 <USB_EPStartXfer+0x844>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2250      	movs	r2, #80	; 0x50
 8006a9e:	5a9b      	ldrh	r3, [r3, r2]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	001a      	movs	r2, r3
 8006aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	673b      	str	r3, [r7, #112]	; 0x70
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	00da      	lsls	r2, r3, #3
 8006ab0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab2:	18d3      	adds	r3, r2, r3
 8006ab4:	4a9b      	ldr	r2, [pc, #620]	; (8006d24 <USB_EPStartXfer+0xaa0>)
 8006ab6:	4694      	mov	ip, r2
 8006ab8:	4463      	add	r3, ip
 8006aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006abc:	1d7b      	adds	r3, r7, #5
 8006abe:	33ff      	adds	r3, #255	; 0xff
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ac8:	2076      	movs	r0, #118	; 0x76
 8006aca:	183b      	adds	r3, r7, r0
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	8952      	ldrh	r2, [r2, #10]
 8006ad0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6959      	ldr	r1, [r3, #20]
 8006ad6:	1d7b      	adds	r3, r7, #5
 8006ad8:	33ff      	adds	r3, #255	; 0xff
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	b29c      	uxth	r4, r3
 8006ade:	183b      	adds	r3, r7, r0
 8006ae0:	881a      	ldrh	r2, [r3, #0]
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	0023      	movs	r3, r4
 8006ae6:	f000 fdc1 	bl	800766c <USB_WritePMA>
 8006aea:	e0a0      	b.n	8006c2e <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d166      	bne.n	8006bc2 <USB_EPStartXfer+0x93e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2250      	movs	r2, #80	; 0x50
 8006afc:	5a9b      	ldrh	r3, [r3, r2]
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	001a      	movs	r2, r3
 8006b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	00da      	lsls	r2, r3, #3
 8006b0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006b10:	18d3      	adds	r3, r2, r3
 8006b12:	4a87      	ldr	r2, [pc, #540]	; (8006d30 <USB_EPStartXfer+0xaac>)
 8006b14:	4694      	mov	ip, r2
 8006b16:	4463      	add	r3, ip
 8006b18:	67bb      	str	r3, [r7, #120]	; 0x78
 8006b1a:	1d7b      	adds	r3, r7, #5
 8006b1c:	33ff      	adds	r3, #255	; 0xff
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d110      	bne.n	8006b46 <USB_EPStartXfer+0x8c2>
 8006b24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	4a7f      	ldr	r2, [pc, #508]	; (8006d28 <USB_EPStartXfer+0xaa4>)
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b32:	801a      	strh	r2, [r3, #0]
 8006b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b36:	881b      	ldrh	r3, [r3, #0]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	4a7c      	ldr	r2, [pc, #496]	; (8006d2c <USB_EPStartXfer+0xaa8>)
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e062      	b.n	8006c0c <USB_EPStartXfer+0x988>
 8006b46:	1d7b      	adds	r3, r7, #5
 8006b48:	33ff      	adds	r3, #255	; 0xff
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006b4e:	d81a      	bhi.n	8006b86 <USB_EPStartXfer+0x902>
 8006b50:	1d7b      	adds	r3, r7, #5
 8006b52:	33ff      	adds	r3, #255	; 0xff
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	085b      	lsrs	r3, r3, #1
 8006b58:	21ec      	movs	r1, #236	; 0xec
 8006b5a:	187a      	adds	r2, r7, r1
 8006b5c:	6013      	str	r3, [r2, #0]
 8006b5e:	1d7b      	adds	r3, r7, #5
 8006b60:	33ff      	adds	r3, #255	; 0xff
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2201      	movs	r2, #1
 8006b66:	4013      	ands	r3, r2
 8006b68:	d004      	beq.n	8006b74 <USB_EPStartXfer+0x8f0>
 8006b6a:	187b      	adds	r3, r7, r1
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	187a      	adds	r2, r7, r1
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	23ec      	movs	r3, #236	; 0xec
 8006b76:	18fb      	adds	r3, r7, r3
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	029b      	lsls	r3, r3, #10
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	e042      	b.n	8006c0c <USB_EPStartXfer+0x988>
 8006b86:	1d7b      	adds	r3, r7, #5
 8006b88:	33ff      	adds	r3, #255	; 0xff
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	21ec      	movs	r1, #236	; 0xec
 8006b90:	187a      	adds	r2, r7, r1
 8006b92:	6013      	str	r3, [r2, #0]
 8006b94:	1d7b      	adds	r3, r7, #5
 8006b96:	33ff      	adds	r3, #255	; 0xff
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	221f      	movs	r2, #31
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d104      	bne.n	8006baa <USB_EPStartXfer+0x926>
 8006ba0:	187b      	adds	r3, r7, r1
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	187a      	adds	r2, r7, r1
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	23ec      	movs	r3, #236	; 0xec
 8006bac:	18fb      	adds	r3, r7, r3
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	029b      	lsls	r3, r3, #10
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	4a5d      	ldr	r2, [pc, #372]	; (8006d2c <USB_EPStartXfer+0xaa8>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	e024      	b.n	8006c0c <USB_EPStartXfer+0x988>
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d120      	bne.n	8006c0c <USB_EPStartXfer+0x988>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2184      	movs	r1, #132	; 0x84
 8006bce:	187a      	adds	r2, r7, r1
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2250      	movs	r2, #80	; 0x50
 8006bd6:	5a9b      	ldrh	r3, [r3, r2]
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	001a      	movs	r2, r3
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	189b      	adds	r3, r3, r2
 8006be2:	187a      	adds	r2, r7, r1
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	00da      	lsls	r2, r3, #3
 8006bec:	187b      	adds	r3, r7, r1
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	18d3      	adds	r3, r2, r3
 8006bf2:	4a4f      	ldr	r2, [pc, #316]	; (8006d30 <USB_EPStartXfer+0xaac>)
 8006bf4:	4694      	mov	ip, r2
 8006bf6:	4463      	add	r3, ip
 8006bf8:	2180      	movs	r1, #128	; 0x80
 8006bfa:	187a      	adds	r2, r7, r1
 8006bfc:	6013      	str	r3, [r2, #0]
 8006bfe:	1d7b      	adds	r3, r7, #5
 8006c00:	33ff      	adds	r3, #255	; 0xff
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	187b      	adds	r3, r7, r1
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006c0c:	2076      	movs	r0, #118	; 0x76
 8006c0e:	183b      	adds	r3, r7, r0
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	8912      	ldrh	r2, [r2, #8]
 8006c14:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6959      	ldr	r1, [r3, #20]
 8006c1a:	1d7b      	adds	r3, r7, #5
 8006c1c:	33ff      	adds	r3, #255	; 0xff
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	b29c      	uxth	r4, r3
 8006c22:	183b      	adds	r3, r7, r0
 8006c24:	881a      	ldrh	r2, [r3, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	0023      	movs	r3, r4
 8006c2a:	f000 fd1f 	bl	800766c <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	18d3      	adds	r3, r2, r3
 8006c38:	881b      	ldrh	r3, [r3, #0]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	200a      	movs	r0, #10
 8006c3e:	183b      	adds	r3, r7, r0
 8006c40:	493c      	ldr	r1, [pc, #240]	; (8006d34 <USB_EPStartXfer+0xab0>)
 8006c42:	400a      	ands	r2, r1
 8006c44:	801a      	strh	r2, [r3, #0]
 8006c46:	183b      	adds	r3, r7, r0
 8006c48:	183a      	adds	r2, r7, r0
 8006c4a:	8812      	ldrh	r2, [r2, #0]
 8006c4c:	2110      	movs	r1, #16
 8006c4e:	404a      	eors	r2, r1
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	183b      	adds	r3, r7, r0
 8006c54:	183a      	adds	r2, r7, r0
 8006c56:	8812      	ldrh	r2, [r2, #0]
 8006c58:	2120      	movs	r1, #32
 8006c5a:	404a      	eors	r2, r1
 8006c5c:	801a      	strh	r2, [r3, #0]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	18d3      	adds	r3, r2, r3
 8006c68:	183a      	adds	r2, r7, r0
 8006c6a:	8812      	ldrh	r2, [r2, #0]
 8006c6c:	4932      	ldr	r1, [pc, #200]	; (8006d38 <USB_EPStartXfer+0xab4>)
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	b292      	uxth	r2, r2
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	f000 fbaf 	bl	80073d6 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	7b1b      	ldrb	r3, [r3, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d000      	beq.n	8006c82 <USB_EPStartXfer+0x9fe>
 8006c80:	e09e      	b.n	8006dc0 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d90d      	bls.n	8006caa <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	1d7a      	adds	r2, r7, #5
 8006c94:	32ff      	adds	r2, #255	; 0xff
 8006c96:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	699a      	ldr	r2, [r3, #24]
 8006c9c:	1d7b      	adds	r3, r7, #5
 8006c9e:	33ff      	adds	r3, #255	; 0xff
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	619a      	str	r2, [r3, #24]
 8006ca8:	e007      	b.n	8006cba <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	1d7a      	adds	r2, r7, #5
 8006cb0:	32ff      	adds	r2, #255	; 0xff
 8006cb2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2190      	movs	r1, #144	; 0x90
 8006cbe:	187a      	adds	r2, r7, r1
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2250      	movs	r2, #80	; 0x50
 8006cc6:	5a9b      	ldrh	r3, [r3, r2]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	001a      	movs	r2, r3
 8006ccc:	187b      	adds	r3, r7, r1
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	189b      	adds	r3, r3, r2
 8006cd2:	187a      	adds	r2, r7, r1
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	00da      	lsls	r2, r3, #3
 8006cdc:	187b      	adds	r3, r7, r1
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	18d3      	adds	r3, r2, r3
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <USB_EPStartXfer+0xaa0>)
 8006ce4:	4694      	mov	ip, r2
 8006ce6:	4463      	add	r3, ip
 8006ce8:	218c      	movs	r1, #140	; 0x8c
 8006cea:	187a      	adds	r2, r7, r1
 8006cec:	6013      	str	r3, [r2, #0]
 8006cee:	1d7b      	adds	r3, r7, #5
 8006cf0:	33ff      	adds	r3, #255	; 0xff
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d121      	bne.n	8006d3c <USB_EPStartXfer+0xab8>
 8006cf8:	187b      	adds	r3, r7, r1
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <USB_EPStartXfer+0xaa4>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	187b      	adds	r3, r7, r1
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	801a      	strh	r2, [r3, #0]
 8006d0c:	187b      	adds	r3, r7, r1
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	881b      	ldrh	r3, [r3, #0]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4a05      	ldr	r2, [pc, #20]	; (8006d2c <USB_EPStartXfer+0xaa8>)
 8006d16:	4313      	orrs	r3, r2
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	187b      	adds	r3, r7, r1
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	e334      	b.n	800738c <USB_EPStartXfer+0x1108>
 8006d22:	46c0      	nop			; (mov r8, r8)
 8006d24:	00000406 	.word	0x00000406
 8006d28:	ffff83ff 	.word	0xffff83ff
 8006d2c:	ffff8000 	.word	0xffff8000
 8006d30:	00000402 	.word	0x00000402
 8006d34:	ffff8fbf 	.word	0xffff8fbf
 8006d38:	ffff8080 	.word	0xffff8080
 8006d3c:	1d7b      	adds	r3, r7, #5
 8006d3e:	33ff      	adds	r3, #255	; 0xff
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b3e      	cmp	r3, #62	; 0x3e
 8006d44:	d81c      	bhi.n	8006d80 <USB_EPStartXfer+0xafc>
 8006d46:	1d7b      	adds	r3, r7, #5
 8006d48:	33ff      	adds	r3, #255	; 0xff
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	085b      	lsrs	r3, r3, #1
 8006d4e:	21e8      	movs	r1, #232	; 0xe8
 8006d50:	187a      	adds	r2, r7, r1
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	1d7b      	adds	r3, r7, #5
 8006d56:	33ff      	adds	r3, #255	; 0xff
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	d004      	beq.n	8006d6a <USB_EPStartXfer+0xae6>
 8006d60:	187b      	adds	r3, r7, r1
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	187a      	adds	r2, r7, r1
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	23e8      	movs	r3, #232	; 0xe8
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	029b      	lsls	r3, r3, #10
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	238c      	movs	r3, #140	; 0x8c
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	801a      	strh	r2, [r3, #0]
 8006d7e:	e305      	b.n	800738c <USB_EPStartXfer+0x1108>
 8006d80:	1d7b      	adds	r3, r7, #5
 8006d82:	33ff      	adds	r3, #255	; 0xff
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	21e8      	movs	r1, #232	; 0xe8
 8006d8a:	187a      	adds	r2, r7, r1
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	1d7b      	adds	r3, r7, #5
 8006d90:	33ff      	adds	r3, #255	; 0xff
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	221f      	movs	r2, #31
 8006d96:	4013      	ands	r3, r2
 8006d98:	d104      	bne.n	8006da4 <USB_EPStartXfer+0xb20>
 8006d9a:	187b      	adds	r3, r7, r1
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	187a      	adds	r2, r7, r1
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	23e8      	movs	r3, #232	; 0xe8
 8006da6:	18fb      	adds	r3, r7, r3
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	029b      	lsls	r3, r3, #10
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	4aca      	ldr	r2, [pc, #808]	; (80070dc <USB_EPStartXfer+0xe58>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	b29a      	uxth	r2, r3
 8006db6:	238c      	movs	r3, #140	; 0x8c
 8006db8:	18fb      	adds	r3, r7, r3
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	801a      	strh	r2, [r3, #0]
 8006dbe:	e2e5      	b.n	800738c <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	78db      	ldrb	r3, [r3, #3]
 8006dc4:	2b02      	cmp	r3, #2
 8006dc6:	d000      	beq.n	8006dca <USB_EPStartXfer+0xb46>
 8006dc8:	e16f      	b.n	80070aa <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	785b      	ldrb	r3, [r3, #1]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d16f      	bne.n	8006eb2 <USB_EPStartXfer+0xc2e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	21ac      	movs	r1, #172	; 0xac
 8006dd6:	187a      	adds	r2, r7, r1
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2250      	movs	r2, #80	; 0x50
 8006dde:	5a9b      	ldrh	r3, [r3, r2]
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	001a      	movs	r2, r3
 8006de4:	187b      	adds	r3, r7, r1
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	189b      	adds	r3, r3, r2
 8006dea:	187a      	adds	r2, r7, r1
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	00da      	lsls	r2, r3, #3
 8006df4:	187b      	adds	r3, r7, r1
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	18d3      	adds	r3, r2, r3
 8006dfa:	4ab9      	ldr	r2, [pc, #740]	; (80070e0 <USB_EPStartXfer+0xe5c>)
 8006dfc:	4694      	mov	ip, r2
 8006dfe:	4463      	add	r3, ip
 8006e00:	21a8      	movs	r1, #168	; 0xa8
 8006e02:	187a      	adds	r2, r7, r1
 8006e04:	6013      	str	r3, [r2, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d114      	bne.n	8006e38 <USB_EPStartXfer+0xbb4>
 8006e0e:	187b      	adds	r3, r7, r1
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	4ab3      	ldr	r2, [pc, #716]	; (80070e4 <USB_EPStartXfer+0xe60>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	187b      	adds	r3, r7, r1
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	801a      	strh	r2, [r3, #0]
 8006e22:	187b      	adds	r3, r7, r1
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4aac      	ldr	r2, [pc, #688]	; (80070dc <USB_EPStartXfer+0xe58>)
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	187b      	adds	r3, r7, r1
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	801a      	strh	r2, [r3, #0]
 8006e36:	e060      	b.n	8006efa <USB_EPStartXfer+0xc76>
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	2b3e      	cmp	r3, #62	; 0x3e
 8006e3e:	d81a      	bhi.n	8006e76 <USB_EPStartXfer+0xbf2>
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	085b      	lsrs	r3, r3, #1
 8006e46:	21e4      	movs	r1, #228	; 0xe4
 8006e48:	187a      	adds	r2, r7, r1
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	2201      	movs	r2, #1
 8006e52:	4013      	ands	r3, r2
 8006e54:	d004      	beq.n	8006e60 <USB_EPStartXfer+0xbdc>
 8006e56:	187b      	adds	r3, r7, r1
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	187a      	adds	r2, r7, r1
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	23e4      	movs	r3, #228	; 0xe4
 8006e62:	18fb      	adds	r3, r7, r3
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	029b      	lsls	r3, r3, #10
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	23a8      	movs	r3, #168	; 0xa8
 8006e6e:	18fb      	adds	r3, r7, r3
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e041      	b.n	8006efa <USB_EPStartXfer+0xc76>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	095b      	lsrs	r3, r3, #5
 8006e7c:	21e4      	movs	r1, #228	; 0xe4
 8006e7e:	187a      	adds	r2, r7, r1
 8006e80:	6013      	str	r3, [r2, #0]
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	221f      	movs	r2, #31
 8006e88:	4013      	ands	r3, r2
 8006e8a:	d104      	bne.n	8006e96 <USB_EPStartXfer+0xc12>
 8006e8c:	187b      	adds	r3, r7, r1
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	187a      	adds	r2, r7, r1
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	23e4      	movs	r3, #228	; 0xe4
 8006e98:	18fb      	adds	r3, r7, r3
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	029b      	lsls	r3, r3, #10
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	4a8e      	ldr	r2, [pc, #568]	; (80070dc <USB_EPStartXfer+0xe58>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	23a8      	movs	r3, #168	; 0xa8
 8006eaa:	18fb      	adds	r3, r7, r3
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	801a      	strh	r2, [r3, #0]
 8006eb0:	e023      	b.n	8006efa <USB_EPStartXfer+0xc76>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d11f      	bne.n	8006efa <USB_EPStartXfer+0xc76>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	21b4      	movs	r1, #180	; 0xb4
 8006ebe:	187a      	adds	r2, r7, r1
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2250      	movs	r2, #80	; 0x50
 8006ec6:	5a9b      	ldrh	r3, [r3, r2]
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	001a      	movs	r2, r3
 8006ecc:	187b      	adds	r3, r7, r1
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	189b      	adds	r3, r3, r2
 8006ed2:	187a      	adds	r2, r7, r1
 8006ed4:	6013      	str	r3, [r2, #0]
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	00da      	lsls	r2, r3, #3
 8006edc:	187b      	adds	r3, r7, r1
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	18d3      	adds	r3, r2, r3
 8006ee2:	4a7f      	ldr	r2, [pc, #508]	; (80070e0 <USB_EPStartXfer+0xe5c>)
 8006ee4:	4694      	mov	ip, r2
 8006ee6:	4463      	add	r3, ip
 8006ee8:	21b0      	movs	r1, #176	; 0xb0
 8006eea:	187a      	adds	r2, r7, r1
 8006eec:	6013      	str	r3, [r2, #0]
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	187b      	adds	r3, r7, r1
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	801a      	strh	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	22a4      	movs	r2, #164	; 0xa4
 8006efe:	18ba      	adds	r2, r7, r2
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d16f      	bne.n	8006fea <USB_EPStartXfer+0xd66>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	219c      	movs	r1, #156	; 0x9c
 8006f0e:	187a      	adds	r2, r7, r1
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2250      	movs	r2, #80	; 0x50
 8006f16:	5a9b      	ldrh	r3, [r3, r2]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	001a      	movs	r2, r3
 8006f1c:	187b      	adds	r3, r7, r1
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	187a      	adds	r2, r7, r1
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00da      	lsls	r2, r3, #3
 8006f2c:	187b      	adds	r3, r7, r1
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	18d3      	adds	r3, r2, r3
 8006f32:	4a6d      	ldr	r2, [pc, #436]	; (80070e8 <USB_EPStartXfer+0xe64>)
 8006f34:	4694      	mov	ip, r2
 8006f36:	4463      	add	r3, ip
 8006f38:	2198      	movs	r1, #152	; 0x98
 8006f3a:	187a      	adds	r2, r7, r1
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d114      	bne.n	8006f70 <USB_EPStartXfer+0xcec>
 8006f46:	187b      	adds	r3, r7, r1
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4a65      	ldr	r2, [pc, #404]	; (80070e4 <USB_EPStartXfer+0xe60>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	187b      	adds	r3, r7, r1
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	187b      	adds	r3, r7, r1
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	4a5e      	ldr	r2, [pc, #376]	; (80070dc <USB_EPStartXfer+0xe58>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	187b      	adds	r3, r7, r1
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e05d      	b.n	800702c <USB_EPStartXfer+0xda8>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	691b      	ldr	r3, [r3, #16]
 8006f74:	2b3e      	cmp	r3, #62	; 0x3e
 8006f76:	d81a      	bhi.n	8006fae <USB_EPStartXfer+0xd2a>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	21e0      	movs	r1, #224	; 0xe0
 8006f80:	187a      	adds	r2, r7, r1
 8006f82:	6013      	str	r3, [r2, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <USB_EPStartXfer+0xd14>
 8006f8e:	187b      	adds	r3, r7, r1
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	187a      	adds	r2, r7, r1
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	23e0      	movs	r3, #224	; 0xe0
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	b29b      	uxth	r3, r3
 8006fa0:	029b      	lsls	r3, r3, #10
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	2398      	movs	r3, #152	; 0x98
 8006fa6:	18fb      	adds	r3, r7, r3
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	801a      	strh	r2, [r3, #0]
 8006fac:	e03e      	b.n	800702c <USB_EPStartXfer+0xda8>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	21e0      	movs	r1, #224	; 0xe0
 8006fb6:	187a      	adds	r2, r7, r1
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	221f      	movs	r2, #31
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	d104      	bne.n	8006fce <USB_EPStartXfer+0xd4a>
 8006fc4:	187b      	adds	r3, r7, r1
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	187a      	adds	r2, r7, r1
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	23e0      	movs	r3, #224	; 0xe0
 8006fd0:	18fb      	adds	r3, r7, r3
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	029b      	lsls	r3, r3, #10
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	4a40      	ldr	r2, [pc, #256]	; (80070dc <USB_EPStartXfer+0xe58>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	2398      	movs	r3, #152	; 0x98
 8006fe2:	18fb      	adds	r3, r7, r3
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	801a      	strh	r2, [r3, #0]
 8006fe8:	e020      	b.n	800702c <USB_EPStartXfer+0xda8>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	785b      	ldrb	r3, [r3, #1]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d11c      	bne.n	800702c <USB_EPStartXfer+0xda8>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2250      	movs	r2, #80	; 0x50
 8006ff6:	5a9b      	ldrh	r3, [r3, r2]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	001a      	movs	r2, r3
 8006ffc:	21a4      	movs	r1, #164	; 0xa4
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	189b      	adds	r3, r3, r2
 8007004:	187a      	adds	r2, r7, r1
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	00da      	lsls	r2, r3, #3
 800700e:	187b      	adds	r3, r7, r1
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	18d3      	adds	r3, r2, r3
 8007014:	4a34      	ldr	r2, [pc, #208]	; (80070e8 <USB_EPStartXfer+0xe64>)
 8007016:	4694      	mov	ip, r2
 8007018:	4463      	add	r3, ip
 800701a:	21a0      	movs	r1, #160	; 0xa0
 800701c:	187a      	adds	r2, r7, r1
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	b29a      	uxth	r2, r3
 8007026:	187b      	adds	r3, r7, r1
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d100      	bne.n	8007036 <USB_EPStartXfer+0xdb2>
 8007034:	e1aa      	b.n	800738c <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	18d2      	adds	r2, r2, r3
 8007040:	2196      	movs	r1, #150	; 0x96
 8007042:	187b      	adds	r3, r7, r1
 8007044:	8812      	ldrh	r2, [r2, #0]
 8007046:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007048:	187b      	adds	r3, r7, r1
 800704a:	881a      	ldrh	r2, [r3, #0]
 800704c:	2380      	movs	r3, #128	; 0x80
 800704e:	01db      	lsls	r3, r3, #7
 8007050:	4013      	ands	r3, r2
 8007052:	d004      	beq.n	800705e <USB_EPStartXfer+0xdda>
 8007054:	187b      	adds	r3, r7, r1
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	2240      	movs	r2, #64	; 0x40
 800705a:	4013      	ands	r3, r2
 800705c:	d10d      	bne.n	800707a <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800705e:	2196      	movs	r1, #150	; 0x96
 8007060:	187b      	adds	r3, r7, r1
 8007062:	881a      	ldrh	r2, [r3, #0]
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	01db      	lsls	r3, r3, #7
 8007068:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800706a:	d000      	beq.n	800706e <USB_EPStartXfer+0xdea>
 800706c:	e18e      	b.n	800738c <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800706e:	187b      	adds	r3, r7, r1
 8007070:	881b      	ldrh	r3, [r3, #0]
 8007072:	2240      	movs	r2, #64	; 0x40
 8007074:	4013      	ands	r3, r2
 8007076:	d000      	beq.n	800707a <USB_EPStartXfer+0xdf6>
 8007078:	e188      	b.n	800738c <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	18d3      	adds	r3, r2, r3
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	b29a      	uxth	r2, r3
 8007088:	2094      	movs	r0, #148	; 0x94
 800708a:	183b      	adds	r3, r7, r0
 800708c:	4917      	ldr	r1, [pc, #92]	; (80070ec <USB_EPStartXfer+0xe68>)
 800708e:	400a      	ands	r2, r1
 8007090:	801a      	strh	r2, [r3, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	18d3      	adds	r3, r2, r3
 800709c:	183a      	adds	r2, r7, r0
 800709e:	8812      	ldrh	r2, [r2, #0]
 80070a0:	4913      	ldr	r1, [pc, #76]	; (80070f0 <USB_EPStartXfer+0xe6c>)
 80070a2:	430a      	orrs	r2, r1
 80070a4:	b292      	uxth	r2, r2
 80070a6:	801a      	strh	r2, [r3, #0]
 80070a8:	e170      	b.n	800738c <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	78db      	ldrb	r3, [r3, #3]
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d000      	beq.n	80070b4 <USB_EPStartXfer+0xe30>
 80070b2:	e169      	b.n	8007388 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	699a      	ldr	r2, [r3, #24]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d919      	bls.n	80070f4 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	1d7a      	adds	r2, r7, #5
 80070c6:	32ff      	adds	r2, #255	; 0xff
 80070c8:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	699a      	ldr	r2, [r3, #24]
 80070ce:	1d7b      	adds	r3, r7, #5
 80070d0:	33ff      	adds	r3, #255	; 0xff
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	1ad2      	subs	r2, r2, r3
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	619a      	str	r2, [r3, #24]
 80070da:	e013      	b.n	8007104 <USB_EPStartXfer+0xe80>
 80070dc:	ffff8000 	.word	0xffff8000
 80070e0:	00000402 	.word	0x00000402
 80070e4:	ffff83ff 	.word	0xffff83ff
 80070e8:	00000406 	.word	0x00000406
 80070ec:	ffff8f8f 	.word	0xffff8f8f
 80070f0:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	1d7a      	adds	r2, r7, #5
 80070fa:	32ff      	adds	r2, #255	; 0xff
 80070fc:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2200      	movs	r2, #0
 8007102:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	785b      	ldrb	r3, [r3, #1]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d000      	beq.n	800710e <USB_EPStartXfer+0xe8a>
 800710c:	e075      	b.n	80071fa <USB_EPStartXfer+0xf76>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	21cc      	movs	r1, #204	; 0xcc
 8007112:	187a      	adds	r2, r7, r1
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2250      	movs	r2, #80	; 0x50
 800711a:	5a9b      	ldrh	r3, [r3, r2]
 800711c:	b29b      	uxth	r3, r3
 800711e:	001a      	movs	r2, r3
 8007120:	187b      	adds	r3, r7, r1
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	189b      	adds	r3, r3, r2
 8007126:	187a      	adds	r2, r7, r1
 8007128:	6013      	str	r3, [r2, #0]
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	00da      	lsls	r2, r3, #3
 8007130:	187b      	adds	r3, r7, r1
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	18d3      	adds	r3, r2, r3
 8007136:	4aaa      	ldr	r2, [pc, #680]	; (80073e0 <USB_EPStartXfer+0x115c>)
 8007138:	4694      	mov	ip, r2
 800713a:	4463      	add	r3, ip
 800713c:	21c8      	movs	r1, #200	; 0xc8
 800713e:	187a      	adds	r2, r7, r1
 8007140:	6013      	str	r3, [r2, #0]
 8007142:	1d7b      	adds	r3, r7, #5
 8007144:	33ff      	adds	r3, #255	; 0xff
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d114      	bne.n	8007176 <USB_EPStartXfer+0xef2>
 800714c:	187b      	adds	r3, r7, r1
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	b29b      	uxth	r3, r3
 8007154:	4aa3      	ldr	r2, [pc, #652]	; (80073e4 <USB_EPStartXfer+0x1160>)
 8007156:	4013      	ands	r3, r2
 8007158:	b29a      	uxth	r2, r3
 800715a:	187b      	adds	r3, r7, r1
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	801a      	strh	r2, [r3, #0]
 8007160:	187b      	adds	r3, r7, r1
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	881b      	ldrh	r3, [r3, #0]
 8007166:	b29b      	uxth	r3, r3
 8007168:	4a9f      	ldr	r2, [pc, #636]	; (80073e8 <USB_EPStartXfer+0x1164>)
 800716a:	4313      	orrs	r3, r2
 800716c:	b29a      	uxth	r2, r3
 800716e:	187b      	adds	r3, r7, r1
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	801a      	strh	r2, [r3, #0]
 8007174:	e066      	b.n	8007244 <USB_EPStartXfer+0xfc0>
 8007176:	1d7b      	adds	r3, r7, #5
 8007178:	33ff      	adds	r3, #255	; 0xff
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b3e      	cmp	r3, #62	; 0x3e
 800717e:	d81c      	bhi.n	80071ba <USB_EPStartXfer+0xf36>
 8007180:	1d7b      	adds	r3, r7, #5
 8007182:	33ff      	adds	r3, #255	; 0xff
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	085b      	lsrs	r3, r3, #1
 8007188:	21dc      	movs	r1, #220	; 0xdc
 800718a:	187a      	adds	r2, r7, r1
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	1d7b      	adds	r3, r7, #5
 8007190:	33ff      	adds	r3, #255	; 0xff
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	4013      	ands	r3, r2
 8007198:	d004      	beq.n	80071a4 <USB_EPStartXfer+0xf20>
 800719a:	187b      	adds	r3, r7, r1
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3301      	adds	r3, #1
 80071a0:	187a      	adds	r2, r7, r1
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	23dc      	movs	r3, #220	; 0xdc
 80071a6:	18fb      	adds	r3, r7, r3
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	029b      	lsls	r3, r3, #10
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	23c8      	movs	r3, #200	; 0xc8
 80071b2:	18fb      	adds	r3, r7, r3
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e044      	b.n	8007244 <USB_EPStartXfer+0xfc0>
 80071ba:	1d7b      	adds	r3, r7, #5
 80071bc:	33ff      	adds	r3, #255	; 0xff
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	095b      	lsrs	r3, r3, #5
 80071c2:	21dc      	movs	r1, #220	; 0xdc
 80071c4:	187a      	adds	r2, r7, r1
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	1d7b      	adds	r3, r7, #5
 80071ca:	33ff      	adds	r3, #255	; 0xff
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	221f      	movs	r2, #31
 80071d0:	4013      	ands	r3, r2
 80071d2:	d104      	bne.n	80071de <USB_EPStartXfer+0xf5a>
 80071d4:	187b      	adds	r3, r7, r1
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3b01      	subs	r3, #1
 80071da:	187a      	adds	r2, r7, r1
 80071dc:	6013      	str	r3, [r2, #0]
 80071de:	23dc      	movs	r3, #220	; 0xdc
 80071e0:	18fb      	adds	r3, r7, r3
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	029b      	lsls	r3, r3, #10
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4a7f      	ldr	r2, [pc, #508]	; (80073e8 <USB_EPStartXfer+0x1164>)
 80071ec:	4313      	orrs	r3, r2
 80071ee:	b29a      	uxth	r2, r3
 80071f0:	23c8      	movs	r3, #200	; 0xc8
 80071f2:	18fb      	adds	r3, r7, r3
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	801a      	strh	r2, [r3, #0]
 80071f8:	e024      	b.n	8007244 <USB_EPStartXfer+0xfc0>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d120      	bne.n	8007244 <USB_EPStartXfer+0xfc0>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	21d4      	movs	r1, #212	; 0xd4
 8007206:	187a      	adds	r2, r7, r1
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2250      	movs	r2, #80	; 0x50
 800720e:	5a9b      	ldrh	r3, [r3, r2]
 8007210:	b29b      	uxth	r3, r3
 8007212:	001a      	movs	r2, r3
 8007214:	187b      	adds	r3, r7, r1
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	189b      	adds	r3, r3, r2
 800721a:	187a      	adds	r2, r7, r1
 800721c:	6013      	str	r3, [r2, #0]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	00da      	lsls	r2, r3, #3
 8007224:	187b      	adds	r3, r7, r1
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	18d3      	adds	r3, r2, r3
 800722a:	4a6d      	ldr	r2, [pc, #436]	; (80073e0 <USB_EPStartXfer+0x115c>)
 800722c:	4694      	mov	ip, r2
 800722e:	4463      	add	r3, ip
 8007230:	21d0      	movs	r1, #208	; 0xd0
 8007232:	187a      	adds	r2, r7, r1
 8007234:	6013      	str	r3, [r2, #0]
 8007236:	1d7b      	adds	r3, r7, #5
 8007238:	33ff      	adds	r3, #255	; 0xff
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	b29a      	uxth	r2, r3
 800723e:	187b      	adds	r3, r7, r1
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	801a      	strh	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	22c4      	movs	r2, #196	; 0xc4
 8007248:	18ba      	adds	r2, r7, r2
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d000      	beq.n	8007256 <USB_EPStartXfer+0xfd2>
 8007254:	e075      	b.n	8007342 <USB_EPStartXfer+0x10be>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	21bc      	movs	r1, #188	; 0xbc
 800725a:	187a      	adds	r2, r7, r1
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2250      	movs	r2, #80	; 0x50
 8007262:	5a9b      	ldrh	r3, [r3, r2]
 8007264:	b29b      	uxth	r3, r3
 8007266:	001a      	movs	r2, r3
 8007268:	187b      	adds	r3, r7, r1
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	189b      	adds	r3, r3, r2
 800726e:	187a      	adds	r2, r7, r1
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	00da      	lsls	r2, r3, #3
 8007278:	187b      	adds	r3, r7, r1
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	18d3      	adds	r3, r2, r3
 800727e:	4a5b      	ldr	r2, [pc, #364]	; (80073ec <USB_EPStartXfer+0x1168>)
 8007280:	4694      	mov	ip, r2
 8007282:	4463      	add	r3, ip
 8007284:	21b8      	movs	r1, #184	; 0xb8
 8007286:	187a      	adds	r2, r7, r1
 8007288:	6013      	str	r3, [r2, #0]
 800728a:	1d7b      	adds	r3, r7, #5
 800728c:	33ff      	adds	r3, #255	; 0xff
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d114      	bne.n	80072be <USB_EPStartXfer+0x103a>
 8007294:	187b      	adds	r3, r7, r1
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	b29b      	uxth	r3, r3
 800729c:	4a51      	ldr	r2, [pc, #324]	; (80073e4 <USB_EPStartXfer+0x1160>)
 800729e:	4013      	ands	r3, r2
 80072a0:	b29a      	uxth	r2, r3
 80072a2:	187b      	adds	r3, r7, r1
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	187b      	adds	r3, r7, r1
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	4a4d      	ldr	r2, [pc, #308]	; (80073e8 <USB_EPStartXfer+0x1164>)
 80072b2:	4313      	orrs	r3, r2
 80072b4:	b29a      	uxth	r2, r3
 80072b6:	187b      	adds	r3, r7, r1
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	801a      	strh	r2, [r3, #0]
 80072bc:	e066      	b.n	800738c <USB_EPStartXfer+0x1108>
 80072be:	1d7b      	adds	r3, r7, #5
 80072c0:	33ff      	adds	r3, #255	; 0xff
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2b3e      	cmp	r3, #62	; 0x3e
 80072c6:	d81c      	bhi.n	8007302 <USB_EPStartXfer+0x107e>
 80072c8:	1d7b      	adds	r3, r7, #5
 80072ca:	33ff      	adds	r3, #255	; 0xff
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	085b      	lsrs	r3, r3, #1
 80072d0:	21d8      	movs	r1, #216	; 0xd8
 80072d2:	187a      	adds	r2, r7, r1
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	1d7b      	adds	r3, r7, #5
 80072d8:	33ff      	adds	r3, #255	; 0xff
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2201      	movs	r2, #1
 80072de:	4013      	ands	r3, r2
 80072e0:	d004      	beq.n	80072ec <USB_EPStartXfer+0x1068>
 80072e2:	187b      	adds	r3, r7, r1
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3301      	adds	r3, #1
 80072e8:	187a      	adds	r2, r7, r1
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	23d8      	movs	r3, #216	; 0xd8
 80072ee:	18fb      	adds	r3, r7, r3
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	029b      	lsls	r3, r3, #10
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	23b8      	movs	r3, #184	; 0xb8
 80072fa:	18fb      	adds	r3, r7, r3
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	801a      	strh	r2, [r3, #0]
 8007300:	e044      	b.n	800738c <USB_EPStartXfer+0x1108>
 8007302:	1d7b      	adds	r3, r7, #5
 8007304:	33ff      	adds	r3, #255	; 0xff
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	095b      	lsrs	r3, r3, #5
 800730a:	21d8      	movs	r1, #216	; 0xd8
 800730c:	187a      	adds	r2, r7, r1
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	1d7b      	adds	r3, r7, #5
 8007312:	33ff      	adds	r3, #255	; 0xff
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	221f      	movs	r2, #31
 8007318:	4013      	ands	r3, r2
 800731a:	d104      	bne.n	8007326 <USB_EPStartXfer+0x10a2>
 800731c:	187b      	adds	r3, r7, r1
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3b01      	subs	r3, #1
 8007322:	187a      	adds	r2, r7, r1
 8007324:	6013      	str	r3, [r2, #0]
 8007326:	23d8      	movs	r3, #216	; 0xd8
 8007328:	18fb      	adds	r3, r7, r3
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	029b      	lsls	r3, r3, #10
 8007330:	b29b      	uxth	r3, r3
 8007332:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <USB_EPStartXfer+0x1164>)
 8007334:	4313      	orrs	r3, r2
 8007336:	b29a      	uxth	r2, r3
 8007338:	23b8      	movs	r3, #184	; 0xb8
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	801a      	strh	r2, [r3, #0]
 8007340:	e024      	b.n	800738c <USB_EPStartXfer+0x1108>
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	785b      	ldrb	r3, [r3, #1]
 8007346:	2b01      	cmp	r3, #1
 8007348:	d120      	bne.n	800738c <USB_EPStartXfer+0x1108>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2250      	movs	r2, #80	; 0x50
 800734e:	5a9b      	ldrh	r3, [r3, r2]
 8007350:	b29b      	uxth	r3, r3
 8007352:	001a      	movs	r2, r3
 8007354:	21c4      	movs	r1, #196	; 0xc4
 8007356:	187b      	adds	r3, r7, r1
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	189b      	adds	r3, r3, r2
 800735c:	187a      	adds	r2, r7, r1
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	00da      	lsls	r2, r3, #3
 8007366:	187b      	adds	r3, r7, r1
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	18d3      	adds	r3, r2, r3
 800736c:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <USB_EPStartXfer+0x1168>)
 800736e:	4694      	mov	ip, r2
 8007370:	4463      	add	r3, ip
 8007372:	21c0      	movs	r1, #192	; 0xc0
 8007374:	187a      	adds	r2, r7, r1
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	1d7b      	adds	r3, r7, #5
 800737a:	33ff      	adds	r3, #255	; 0xff
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	b29a      	uxth	r2, r3
 8007380:	187b      	adds	r3, r7, r1
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	e001      	b.n	800738c <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	e025      	b.n	80073d8 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	18d3      	adds	r3, r2, r3
 8007396:	881b      	ldrh	r3, [r3, #0]
 8007398:	b29a      	uxth	r2, r3
 800739a:	208a      	movs	r0, #138	; 0x8a
 800739c:	183b      	adds	r3, r7, r0
 800739e:	4914      	ldr	r1, [pc, #80]	; (80073f0 <USB_EPStartXfer+0x116c>)
 80073a0:	400a      	ands	r2, r1
 80073a2:	801a      	strh	r2, [r3, #0]
 80073a4:	183b      	adds	r3, r7, r0
 80073a6:	183a      	adds	r2, r7, r0
 80073a8:	8812      	ldrh	r2, [r2, #0]
 80073aa:	2180      	movs	r1, #128	; 0x80
 80073ac:	0149      	lsls	r1, r1, #5
 80073ae:	404a      	eors	r2, r1
 80073b0:	801a      	strh	r2, [r3, #0]
 80073b2:	183b      	adds	r3, r7, r0
 80073b4:	183a      	adds	r2, r7, r0
 80073b6:	8812      	ldrh	r2, [r2, #0]
 80073b8:	2180      	movs	r1, #128	; 0x80
 80073ba:	0189      	lsls	r1, r1, #6
 80073bc:	404a      	eors	r2, r1
 80073be:	801a      	strh	r2, [r3, #0]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	18d3      	adds	r3, r2, r3
 80073ca:	183a      	adds	r2, r7, r0
 80073cc:	8812      	ldrh	r2, [r2, #0]
 80073ce:	4909      	ldr	r1, [pc, #36]	; (80073f4 <USB_EPStartXfer+0x1170>)
 80073d0:	430a      	orrs	r2, r1
 80073d2:	b292      	uxth	r2, r2
 80073d4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80073d6:	2300      	movs	r3, #0
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b043      	add	sp, #268	; 0x10c
 80073de:	bd90      	pop	{r4, r7, pc}
 80073e0:	00000402 	.word	0x00000402
 80073e4:	ffff83ff 	.word	0xffff83ff
 80073e8:	ffff8000 	.word	0xffff8000
 80073ec:	00000406 	.word	0x00000406
 80073f0:	ffffbf8f 	.word	0xffffbf8f
 80073f4:	ffff8080 	.word	0xffff8080

080073f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	785b      	ldrb	r3, [r3, #1]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d01d      	beq.n	8007446 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	18d3      	adds	r3, r2, r3
 8007414:	881b      	ldrh	r3, [r3, #0]
 8007416:	b29a      	uxth	r2, r3
 8007418:	200c      	movs	r0, #12
 800741a:	183b      	adds	r3, r7, r0
 800741c:	491b      	ldr	r1, [pc, #108]	; (800748c <USB_EPSetStall+0x94>)
 800741e:	400a      	ands	r2, r1
 8007420:	801a      	strh	r2, [r3, #0]
 8007422:	183b      	adds	r3, r7, r0
 8007424:	183a      	adds	r2, r7, r0
 8007426:	8812      	ldrh	r2, [r2, #0]
 8007428:	2110      	movs	r1, #16
 800742a:	404a      	eors	r2, r1
 800742c:	801a      	strh	r2, [r3, #0]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	18d3      	adds	r3, r2, r3
 8007438:	183a      	adds	r2, r7, r0
 800743a:	8812      	ldrh	r2, [r2, #0]
 800743c:	4914      	ldr	r1, [pc, #80]	; (8007490 <USB_EPSetStall+0x98>)
 800743e:	430a      	orrs	r2, r1
 8007440:	b292      	uxth	r2, r2
 8007442:	801a      	strh	r2, [r3, #0]
 8007444:	e01d      	b.n	8007482 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	18d3      	adds	r3, r2, r3
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29a      	uxth	r2, r3
 8007454:	200e      	movs	r0, #14
 8007456:	183b      	adds	r3, r7, r0
 8007458:	490e      	ldr	r1, [pc, #56]	; (8007494 <USB_EPSetStall+0x9c>)
 800745a:	400a      	ands	r2, r1
 800745c:	801a      	strh	r2, [r3, #0]
 800745e:	183b      	adds	r3, r7, r0
 8007460:	183a      	adds	r2, r7, r0
 8007462:	8812      	ldrh	r2, [r2, #0]
 8007464:	2180      	movs	r1, #128	; 0x80
 8007466:	0149      	lsls	r1, r1, #5
 8007468:	404a      	eors	r2, r1
 800746a:	801a      	strh	r2, [r3, #0]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	18d3      	adds	r3, r2, r3
 8007476:	183a      	adds	r2, r7, r0
 8007478:	8812      	ldrh	r2, [r2, #0]
 800747a:	4905      	ldr	r1, [pc, #20]	; (8007490 <USB_EPSetStall+0x98>)
 800747c:	430a      	orrs	r2, r1
 800747e:	b292      	uxth	r2, r2
 8007480:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b004      	add	sp, #16
 800748a:	bd80      	pop	{r7, pc}
 800748c:	ffff8fbf 	.word	0xffff8fbf
 8007490:	ffff8080 	.word	0xffff8080
 8007494:	ffffbf8f 	.word	0xffffbf8f

08007498 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b086      	sub	sp, #24
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	7b1b      	ldrb	r3, [r3, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d000      	beq.n	80074ac <USB_EPClearStall+0x14>
 80074aa:	e095      	b.n	80075d8 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d046      	beq.n	8007542 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	781b      	ldrb	r3, [r3, #0]
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	18d2      	adds	r2, r2, r3
 80074be:	2110      	movs	r1, #16
 80074c0:	187b      	adds	r3, r7, r1
 80074c2:	8812      	ldrh	r2, [r2, #0]
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	187b      	adds	r3, r7, r1
 80074c8:	881b      	ldrh	r3, [r3, #0]
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	4013      	ands	r3, r2
 80074ce:	d016      	beq.n	80074fe <USB_EPClearStall+0x66>
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	18d3      	adds	r3, r2, r3
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29a      	uxth	r2, r3
 80074de:	200e      	movs	r0, #14
 80074e0:	183b      	adds	r3, r7, r0
 80074e2:	4940      	ldr	r1, [pc, #256]	; (80075e4 <USB_EPClearStall+0x14c>)
 80074e4:	400a      	ands	r2, r1
 80074e6:	801a      	strh	r2, [r3, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	18d3      	adds	r3, r2, r3
 80074f2:	183a      	adds	r2, r7, r0
 80074f4:	8812      	ldrh	r2, [r2, #0]
 80074f6:	493c      	ldr	r1, [pc, #240]	; (80075e8 <USB_EPClearStall+0x150>)
 80074f8:	430a      	orrs	r2, r1
 80074fa:	b292      	uxth	r2, r2
 80074fc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	78db      	ldrb	r3, [r3, #3]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d068      	beq.n	80075d8 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	18d3      	adds	r3, r2, r3
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	b29a      	uxth	r2, r3
 8007514:	200c      	movs	r0, #12
 8007516:	183b      	adds	r3, r7, r0
 8007518:	4934      	ldr	r1, [pc, #208]	; (80075ec <USB_EPClearStall+0x154>)
 800751a:	400a      	ands	r2, r1
 800751c:	801a      	strh	r2, [r3, #0]
 800751e:	183b      	adds	r3, r7, r0
 8007520:	183a      	adds	r2, r7, r0
 8007522:	8812      	ldrh	r2, [r2, #0]
 8007524:	2120      	movs	r1, #32
 8007526:	404a      	eors	r2, r1
 8007528:	801a      	strh	r2, [r3, #0]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	18d3      	adds	r3, r2, r3
 8007534:	183a      	adds	r2, r7, r0
 8007536:	8812      	ldrh	r2, [r2, #0]
 8007538:	492d      	ldr	r1, [pc, #180]	; (80075f0 <USB_EPClearStall+0x158>)
 800753a:	430a      	orrs	r2, r1
 800753c:	b292      	uxth	r2, r2
 800753e:	801a      	strh	r2, [r3, #0]
 8007540:	e04a      	b.n	80075d8 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	18d2      	adds	r2, r2, r3
 800754c:	2116      	movs	r1, #22
 800754e:	187b      	adds	r3, r7, r1
 8007550:	8812      	ldrh	r2, [r2, #0]
 8007552:	801a      	strh	r2, [r3, #0]
 8007554:	187b      	adds	r3, r7, r1
 8007556:	881a      	ldrh	r2, [r3, #0]
 8007558:	2380      	movs	r3, #128	; 0x80
 800755a:	01db      	lsls	r3, r3, #7
 800755c:	4013      	ands	r3, r2
 800755e:	d016      	beq.n	800758e <USB_EPClearStall+0xf6>
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	18d3      	adds	r3, r2, r3
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29a      	uxth	r2, r3
 800756e:	2014      	movs	r0, #20
 8007570:	183b      	adds	r3, r7, r0
 8007572:	491c      	ldr	r1, [pc, #112]	; (80075e4 <USB_EPClearStall+0x14c>)
 8007574:	400a      	ands	r2, r1
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	18d3      	adds	r3, r2, r3
 8007582:	183a      	adds	r2, r7, r0
 8007584:	8812      	ldrh	r2, [r2, #0]
 8007586:	491b      	ldr	r1, [pc, #108]	; (80075f4 <USB_EPClearStall+0x15c>)
 8007588:	430a      	orrs	r2, r1
 800758a:	b292      	uxth	r2, r2
 800758c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	18d3      	adds	r3, r2, r3
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29a      	uxth	r2, r3
 800759c:	2012      	movs	r0, #18
 800759e:	183b      	adds	r3, r7, r0
 80075a0:	4915      	ldr	r1, [pc, #84]	; (80075f8 <USB_EPClearStall+0x160>)
 80075a2:	400a      	ands	r2, r1
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	183b      	adds	r3, r7, r0
 80075a8:	183a      	adds	r2, r7, r0
 80075aa:	8812      	ldrh	r2, [r2, #0]
 80075ac:	2180      	movs	r1, #128	; 0x80
 80075ae:	0149      	lsls	r1, r1, #5
 80075b0:	404a      	eors	r2, r1
 80075b2:	801a      	strh	r2, [r3, #0]
 80075b4:	183b      	adds	r3, r7, r0
 80075b6:	183a      	adds	r2, r7, r0
 80075b8:	8812      	ldrh	r2, [r2, #0]
 80075ba:	2180      	movs	r1, #128	; 0x80
 80075bc:	0189      	lsls	r1, r1, #6
 80075be:	404a      	eors	r2, r1
 80075c0:	801a      	strh	r2, [r3, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	18d3      	adds	r3, r2, r3
 80075cc:	183a      	adds	r2, r7, r0
 80075ce:	8812      	ldrh	r2, [r2, #0]
 80075d0:	4907      	ldr	r1, [pc, #28]	; (80075f0 <USB_EPClearStall+0x158>)
 80075d2:	430a      	orrs	r2, r1
 80075d4:	b292      	uxth	r2, r2
 80075d6:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	0018      	movs	r0, r3
 80075dc:	46bd      	mov	sp, r7
 80075de:	b006      	add	sp, #24
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	ffff8f8f 	.word	0xffff8f8f
 80075e8:	ffff80c0 	.word	0xffff80c0
 80075ec:	ffff8fbf 	.word	0xffff8fbf
 80075f0:	ffff8080 	.word	0xffff8080
 80075f4:	ffffc080 	.word	0xffffc080
 80075f8:	ffffbf8f 	.word	0xffffbf8f

080075fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b082      	sub	sp, #8
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	000a      	movs	r2, r1
 8007606:	1cfb      	adds	r3, r7, #3
 8007608:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800760a:	1cfb      	adds	r3, r7, #3
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	224c      	movs	r2, #76	; 0x4c
 8007616:	2180      	movs	r1, #128	; 0x80
 8007618:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	0018      	movs	r0, r3
 800761e:	46bd      	mov	sp, r7
 8007620:	b002      	add	sp, #8
 8007622:	bd80      	pop	{r7, pc}

08007624 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2258      	movs	r2, #88	; 0x58
 8007630:	5a9b      	ldrh	r3, [r3, r2]
 8007632:	b29b      	uxth	r3, r3
 8007634:	4a05      	ldr	r2, [pc, #20]	; (800764c <USB_DevConnect+0x28>)
 8007636:	4313      	orrs	r3, r2
 8007638:	b299      	uxth	r1, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2258      	movs	r2, #88	; 0x58
 800763e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b002      	add	sp, #8
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	ffff8000 	.word	0xffff8000

08007650 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2244      	movs	r2, #68	; 0x44
 800765c:	5a9b      	ldrh	r3, [r3, r2]
 800765e:	b29b      	uxth	r3, r3
 8007660:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007662:	68fb      	ldr	r3, [r7, #12]
}
 8007664:	0018      	movs	r0, r3
 8007666:	46bd      	mov	sp, r7
 8007668:	b004      	add	sp, #16
 800766a:	bd80      	pop	{r7, pc}

0800766c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08c      	sub	sp, #48	; 0x30
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	0019      	movs	r1, r3
 8007678:	1dbb      	adds	r3, r7, #6
 800767a:	801a      	strh	r2, [r3, #0]
 800767c:	1d3b      	adds	r3, r7, #4
 800767e:	1c0a      	adds	r2, r1, #0
 8007680:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007682:	1d3b      	adds	r3, r7, #4
 8007684:	881b      	ldrh	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	085b      	lsrs	r3, r3, #1
 800768a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007694:	1dbb      	adds	r3, r7, #6
 8007696:	881a      	ldrh	r2, [r3, #0]
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	18d3      	adds	r3, r2, r3
 800769c:	2280      	movs	r2, #128	; 0x80
 800769e:	00d2      	lsls	r2, r2, #3
 80076a0:	4694      	mov	ip, r2
 80076a2:	4463      	add	r3, ip
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80076a6:	6a3b      	ldr	r3, [r7, #32]
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076aa:	e01b      	b.n	80076e4 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	3301      	adds	r3, #1
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	021b      	lsls	r3, r3, #8
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	001a      	movs	r2, r3
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	3302      	adds	r3, #2
 80076d6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	3301      	adds	r3, #1
 80076dc:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80076de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e0:	3b01      	subs	r3, #1
 80076e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e0      	bne.n	80076ac <USB_WritePMA+0x40>
  }
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	46c0      	nop			; (mov r8, r8)
 80076ee:	46bd      	mov	sp, r7
 80076f0:	b00c      	add	sp, #48	; 0x30
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b08a      	sub	sp, #40	; 0x28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	0019      	movs	r1, r3
 8007700:	1dbb      	adds	r3, r7, #6
 8007702:	801a      	strh	r2, [r3, #0]
 8007704:	1d3b      	adds	r3, r7, #4
 8007706:	1c0a      	adds	r2, r1, #0
 8007708:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800770a:	1d3b      	adds	r3, r7, #4
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	b29b      	uxth	r3, r3
 8007712:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800771c:	1dbb      	adds	r3, r7, #6
 800771e:	881a      	ldrh	r2, [r3, #0]
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	18d3      	adds	r3, r2, r3
 8007724:	2280      	movs	r2, #128	; 0x80
 8007726:	00d2      	lsls	r2, r2, #3
 8007728:	4694      	mov	ip, r2
 800772a:	4463      	add	r3, ip
 800772c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	627b      	str	r3, [r7, #36]	; 0x24
 8007732:	e018      	b.n	8007766 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007734:	6a3b      	ldr	r3, [r7, #32]
 8007736:	881b      	ldrh	r3, [r3, #0]
 8007738:	b29b      	uxth	r3, r3
 800773a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	3302      	adds	r3, #2
 8007740:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	b2da      	uxtb	r2, r3
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	3301      	adds	r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	0a1b      	lsrs	r3, r3, #8
 8007754:	b2da      	uxtb	r2, r3
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	3301      	adds	r3, #1
 800775e:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	3b01      	subs	r3, #1
 8007764:	627b      	str	r3, [r7, #36]	; 0x24
 8007766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1e3      	bne.n	8007734 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	2201      	movs	r2, #1
 8007772:	4013      	ands	r3, r2
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d007      	beq.n	800778a <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	b2da      	uxtb	r2, r3
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	701a      	strb	r2, [r3, #0]
  }
}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	46bd      	mov	sp, r7
 800778e:	b00a      	add	sp, #40	; 0x28
 8007790:	bd80      	pop	{r7, pc}

08007792 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8007792:	b590      	push	{r4, r7, lr}
 8007794:	b085      	sub	sp, #20
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	000a      	movs	r2, r1
 800779c:	1cfb      	adds	r3, r7, #3
 800779e:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80077a0:	240f      	movs	r4, #15
 80077a2:	193b      	adds	r3, r7, r4
 80077a4:	2200      	movs	r2, #0
 80077a6:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	2355      	movs	r3, #85	; 0x55
 80077ac:	2203      	movs	r2, #3
 80077ae:	2181      	movs	r1, #129	; 0x81
 80077b0:	f001 ff35 	bl	800961e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	2355      	movs	r3, #85	; 0x55
 80077be:	2203      	movs	r2, #3
 80077c0:	2101      	movs	r1, #1
 80077c2:	f001 ff2c 	bl	800961e <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	23b6      	movs	r3, #182	; 0xb6
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	2101      	movs	r1, #1
 80077ce:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80077d0:	2018      	movs	r0, #24
 80077d2:	f002 f90f 	bl	80099f4 <malloc>
 80077d6:	0003      	movs	r3, r0
 80077d8:	0019      	movs	r1, r3
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	23ae      	movs	r3, #174	; 0xae
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80077e2:	687a      	ldr	r2, [r7, #4]
 80077e4:	23ae      	movs	r3, #174	; 0xae
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	58d3      	ldr	r3, [r2, r3]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 80077ee:	193b      	adds	r3, r7, r4
 80077f0:	2201      	movs	r2, #1
 80077f2:	701a      	strb	r2, [r3, #0]
 80077f4:	e013      	b.n	800781e <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	23ae      	movs	r3, #174	; 0xae
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	58d3      	ldr	r3, [r2, r3]
 80077fe:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2200      	movs	r2, #0
 8007804:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	23af      	movs	r3, #175	; 0xaf
 800780a:	009b      	lsls	r3, r3, #2
 800780c:	58d3      	ldr	r3, [r2, r3]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	2302      	movs	r3, #2
 8007818:	2101      	movs	r1, #1
 800781a:	f002 f84b 	bl	80098b4 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 800781e:	230f      	movs	r3, #15
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	781b      	ldrb	r3, [r3, #0]
}
 8007824:	0018      	movs	r0, r3
 8007826:	46bd      	mov	sp, r7
 8007828:	b005      	add	sp, #20
 800782a:	bd90      	pop	{r4, r7, pc}

0800782c <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	000a      	movs	r2, r1
 8007836:	1cfb      	adds	r3, r7, #3
 8007838:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2181      	movs	r1, #129	; 0x81
 800783e:	0018      	movs	r0, r3
 8007840:	f001 ff24 	bl	800968c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2101      	movs	r1, #1
 800784e:	0018      	movs	r0, r3
 8007850:	f001 ff1c 	bl	800968c <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	23b6      	movs	r3, #182	; 0xb6
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	2100      	movs	r1, #0
 800785c:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	23ae      	movs	r3, #174	; 0xae
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	58d3      	ldr	r3, [r2, r3]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d011      	beq.n	800788e <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	23af      	movs	r3, #175	; 0xaf
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	58d3      	ldr	r3, [r2, r3]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	23ae      	movs	r3, #174	; 0xae
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	58d3      	ldr	r3, [r2, r3]
 800787e:	0018      	movs	r0, r3
 8007880:	f002 f8c2 	bl	8009a08 <free>
    pdev->pClassData = NULL;
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	23ae      	movs	r3, #174	; 0xae
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	2100      	movs	r1, #0
 800788c:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	0018      	movs	r0, r3
 8007892:	46bd      	mov	sp, r7
 8007894:	b002      	add	sp, #8
 8007896:	bd80      	pop	{r7, pc}

08007898 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	23ae      	movs	r3, #174	; 0xae
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	58d3      	ldr	r3, [r2, r3]
 80078aa:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80078ac:	231e      	movs	r3, #30
 80078ae:	18fb      	adds	r3, r7, r3
 80078b0:	2200      	movs	r2, #0
 80078b2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80078b4:	2300      	movs	r3, #0
 80078b6:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80078b8:	230e      	movs	r3, #14
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	2200      	movs	r2, #0
 80078be:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80078c0:	2317      	movs	r3, #23
 80078c2:	18fb      	adds	r3, r7, r3
 80078c4:	2200      	movs	r2, #0
 80078c6:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	001a      	movs	r2, r3
 80078ce:	2360      	movs	r3, #96	; 0x60
 80078d0:	4013      	ands	r3, r2
 80078d2:	d043      	beq.n	800795c <USBD_CUSTOM_HID_Setup+0xc4>
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d000      	beq.n	80078da <USBD_CUSTOM_HID_Setup+0x42>
 80078d8:	e0d7      	b.n	8007a8a <USBD_CUSTOM_HID_Setup+0x1f2>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	785b      	ldrb	r3, [r3, #1]
 80078de:	2b0b      	cmp	r3, #11
 80078e0:	d830      	bhi.n	8007944 <USBD_CUSTOM_HID_Setup+0xac>
 80078e2:	009a      	lsls	r2, r3, #2
 80078e4:	4b72      	ldr	r3, [pc, #456]	; (8007ab0 <USBD_CUSTOM_HID_Setup+0x218>)
 80078e6:	18d3      	adds	r3, r2, r3
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	885b      	ldrh	r3, [r3, #2]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	001a      	movs	r2, r3
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	605a      	str	r2, [r3, #4]
          break;
 80078f8:	e02f      	b.n	800795a <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	1d19      	adds	r1, r3, #4
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	0018      	movs	r0, r3
 8007904:	f001 fb1e 	bl	8008f44 <USBD_CtlSendData>
          break;
 8007908:	e027      	b.n	800795a <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	885b      	ldrh	r3, [r3, #2]
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	b29b      	uxth	r3, r3
 8007912:	b2db      	uxtb	r3, r3
 8007914:	001a      	movs	r2, r3
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	609a      	str	r2, [r3, #8]
          break;
 800791a:	e01e      	b.n	800795a <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	3308      	adds	r3, #8
 8007920:	0019      	movs	r1, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	0018      	movs	r0, r3
 8007928:	f001 fb0c 	bl	8008f44 <USBD_CtlSendData>
          break;
 800792c:	e015      	b.n	800795a <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2201      	movs	r2, #1
 8007932:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007934:	6939      	ldr	r1, [r7, #16]
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	88da      	ldrh	r2, [r3, #6]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	0018      	movs	r0, r3
 800793e:	f001 fb34 	bl	8008faa <USBD_CtlPrepareRx>
          break;
 8007942:	e00a      	b.n	800795a <USBD_CUSTOM_HID_Setup+0xc2>

        default:
          USBD_CtlError(pdev, req);
 8007944:	683a      	ldr	r2, [r7, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	0011      	movs	r1, r2
 800794a:	0018      	movs	r0, r3
 800794c:	f001 fa7c 	bl	8008e48 <USBD_CtlError>
          ret = USBD_FAIL;
 8007950:	2317      	movs	r3, #23
 8007952:	18fb      	adds	r3, r7, r3
 8007954:	2202      	movs	r2, #2
 8007956:	701a      	strb	r2, [r3, #0]
          break;
 8007958:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800795a:	e0a1      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x208>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	785b      	ldrb	r3, [r3, #1]
 8007960:	2b0b      	cmp	r3, #11
 8007962:	d100      	bne.n	8007966 <USBD_CUSTOM_HID_Setup+0xce>
 8007964:	e06d      	b.n	8007a42 <USBD_CUSTOM_HID_Setup+0x1aa>
 8007966:	dd00      	ble.n	800796a <USBD_CUSTOM_HID_Setup+0xd2>
 8007968:	e083      	b.n	8007a72 <USBD_CUSTOM_HID_Setup+0x1da>
 800796a:	2b0a      	cmp	r3, #10
 800796c:	d04f      	beq.n	8007a0e <USBD_CUSTOM_HID_Setup+0x176>
 800796e:	dd00      	ble.n	8007972 <USBD_CUSTOM_HID_Setup+0xda>
 8007970:	e07f      	b.n	8007a72 <USBD_CUSTOM_HID_Setup+0x1da>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <USBD_CUSTOM_HID_Setup+0xe4>
 8007976:	2b06      	cmp	r3, #6
 8007978:	d019      	beq.n	80079ae <USBD_CUSTOM_HID_Setup+0x116>
 800797a:	e07a      	b.n	8007a72 <USBD_CUSTOM_HID_Setup+0x1da>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	23a7      	movs	r3, #167	; 0xa7
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	5cd3      	ldrb	r3, [r2, r3]
 8007984:	2b03      	cmp	r3, #3
 8007986:	d107      	bne.n	8007998 <USBD_CUSTOM_HID_Setup+0x100>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007988:	230e      	movs	r3, #14
 800798a:	18f9      	adds	r1, r7, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	0018      	movs	r0, r3
 8007992:	f001 fad7 	bl	8008f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007996:	e077      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	0011      	movs	r1, r2
 800799e:	0018      	movs	r0, r3
 80079a0:	f001 fa52 	bl	8008e48 <USBD_CtlError>
            ret = USBD_FAIL;
 80079a4:	2317      	movs	r3, #23
 80079a6:	18fb      	adds	r3, r7, r3
 80079a8:	2202      	movs	r2, #2
 80079aa:	701a      	strb	r2, [r3, #0]
          break;
 80079ac:	e06c      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	885b      	ldrh	r3, [r3, #2]
 80079b2:	0a1b      	lsrs	r3, r3, #8
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	2b22      	cmp	r3, #34	; 0x22
 80079b8:	d10f      	bne.n	80079da <USBD_CUSTOM_HID_Setup+0x142>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	88db      	ldrh	r3, [r3, #6]
 80079be:	221e      	movs	r2, #30
 80079c0:	18ba      	adds	r2, r7, r2
 80079c2:	b299      	uxth	r1, r3
 80079c4:	2955      	cmp	r1, #85	; 0x55
 80079c6:	d900      	bls.n	80079ca <USBD_CUSTOM_HID_Setup+0x132>
 80079c8:	2355      	movs	r3, #85	; 0x55
 80079ca:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	23af      	movs	r3, #175	; 0xaf
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	58d3      	ldr	r3, [r2, r3]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e010      	b.n	80079fc <USBD_CUSTOM_HID_Setup+0x164>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	0a1b      	lsrs	r3, r3, #8
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	2b21      	cmp	r3, #33	; 0x21
 80079e4:	d10a      	bne.n	80079fc <USBD_CUSTOM_HID_Setup+0x164>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80079e6:	4b33      	ldr	r3, [pc, #204]	; (8007ab4 <USBD_CUSTOM_HID_Setup+0x21c>)
 80079e8:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	88db      	ldrh	r3, [r3, #6]
 80079ee:	221e      	movs	r2, #30
 80079f0:	18ba      	adds	r2, r7, r2
 80079f2:	b299      	uxth	r1, r3
 80079f4:	2909      	cmp	r1, #9
 80079f6:	d900      	bls.n	80079fa <USBD_CUSTOM_HID_Setup+0x162>
 80079f8:	2309      	movs	r3, #9
 80079fa:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80079fc:	231e      	movs	r3, #30
 80079fe:	18fb      	adds	r3, r7, r3
 8007a00:	881a      	ldrh	r2, [r3, #0]
 8007a02:	69b9      	ldr	r1, [r7, #24]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	0018      	movs	r0, r3
 8007a08:	f001 fa9c 	bl	8008f44 <USBD_CtlSendData>
          break;
 8007a0c:	e03c      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	23a7      	movs	r3, #167	; 0xa7
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	5cd3      	ldrb	r3, [r2, r3]
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d108      	bne.n	8007a2c <USBD_CUSTOM_HID_Setup+0x194>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	0019      	movs	r1, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	0018      	movs	r0, r3
 8007a26:	f001 fa8d 	bl	8008f44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a2a:	e02d      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	0011      	movs	r1, r2
 8007a32:	0018      	movs	r0, r3
 8007a34:	f001 fa08 	bl	8008e48 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a38:	2317      	movs	r3, #23
 8007a3a:	18fb      	adds	r3, r7, r3
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	701a      	strb	r2, [r3, #0]
          break;
 8007a40:	e022      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	23a7      	movs	r3, #167	; 0xa7
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	5cd3      	ldrb	r3, [r2, r3]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d106      	bne.n	8007a5c <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	885b      	ldrh	r3, [r3, #2]
 8007a52:	b2db      	uxtb	r3, r3
 8007a54:	001a      	movs	r2, r3
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007a5a:	e015      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	0011      	movs	r1, r2
 8007a62:	0018      	movs	r0, r3
 8007a64:	f001 f9f0 	bl	8008e48 <USBD_CtlError>
            ret = USBD_FAIL;
 8007a68:	2317      	movs	r3, #23
 8007a6a:	18fb      	adds	r3, r7, r3
 8007a6c:	2202      	movs	r2, #2
 8007a6e:	701a      	strb	r2, [r3, #0]
          break;
 8007a70:	e00a      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0x1f0>

        default:
          USBD_CtlError(pdev, req);
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	0011      	movs	r1, r2
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f001 f9e5 	bl	8008e48 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a7e:	2317      	movs	r3, #23
 8007a80:	18fb      	adds	r3, r7, r3
 8007a82:	2202      	movs	r2, #2
 8007a84:	701a      	strb	r2, [r3, #0]
          break;
 8007a86:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007a88:	e00a      	b.n	8007aa0 <USBD_CUSTOM_HID_Setup+0x208>

    default:
      USBD_CtlError(pdev, req);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f001 f9d9 	bl	8008e48 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a96:	2317      	movs	r3, #23
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
      break;
 8007a9e:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 8007aa0:	2317      	movs	r3, #23
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	781b      	ldrb	r3, [r3, #0]
}
 8007aa6:	0018      	movs	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	b008      	add	sp, #32
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	46c0      	nop			; (mov r8, r8)
 8007ab0:	0800a378 	.word	0x0800a378
 8007ab4:	200000c8 	.word	0x200000c8

08007ab8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	1dbb      	adds	r3, r7, #6
 8007ac4:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	23ae      	movs	r3, #174	; 0xae
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	58d3      	ldr	r3, [r2, r3]
 8007ace:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ad0:	68fa      	ldr	r2, [r7, #12]
 8007ad2:	23a7      	movs	r3, #167	; 0xa7
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	5cd3      	ldrb	r3, [r2, r3]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d110      	bne.n	8007afe <USBD_CUSTOM_HID_SendReport+0x46>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	7d1b      	ldrb	r3, [r3, #20]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10a      	bne.n	8007afa <USBD_CUSTOM_HID_SendReport+0x42>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007aea:	1dbb      	adds	r3, r7, #6
 8007aec:	881b      	ldrh	r3, [r3, #0]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	2181      	movs	r1, #129	; 0x81
 8007af4:	f001 fea7 	bl	8009846 <USBD_LL_Transmit>
 8007af8:	e001      	b.n	8007afe <USBD_CUSTOM_HID_SendReport+0x46>
    }
    else
    {
      return USBD_BUSY;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <USBD_CUSTOM_HID_SendReport+0x48>
    }
  }
  return USBD_OK;
 8007afe:	2300      	movs	r3, #0
}
 8007b00:	0018      	movs	r0, r3
 8007b02:	46bd      	mov	sp, r7
 8007b04:	b006      	add	sp, #24
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2229      	movs	r2, #41	; 0x29
 8007b14:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007b16:	4b02      	ldr	r3, [pc, #8]	; (8007b20 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8007b18:	0018      	movs	r0, r3
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	b002      	add	sp, #8
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20000044 	.word	0x20000044

08007b24 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2229      	movs	r2, #41	; 0x29
 8007b30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007b32:	4b02      	ldr	r3, [pc, #8]	; (8007b3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8007b34:	0018      	movs	r0, r3
 8007b36:	46bd      	mov	sp, r7
 8007b38:	b002      	add	sp, #8
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	20000070 	.word	0x20000070

08007b40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2229      	movs	r2, #41	; 0x29
 8007b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007b4e:	4b02      	ldr	r3, [pc, #8]	; (8007b58 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007b50:	0018      	movs	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b002      	add	sp, #8
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	2000009c 	.word	0x2000009c

08007b5c <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	000a      	movs	r2, r1
 8007b66:	1cfb      	adds	r3, r7, #3
 8007b68:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	23ae      	movs	r3, #174	; 0xae
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	58d3      	ldr	r3, [r2, r3]
 8007b72:	2200      	movs	r2, #0
 8007b74:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	0018      	movs	r0, r3
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	b002      	add	sp, #8
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	000a      	movs	r2, r1
 8007b8a:	1cfb      	adds	r3, r7, #3
 8007b8c:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	23ae      	movs	r3, #174	; 0xae
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	58d3      	ldr	r3, [r2, r3]
 8007b96:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	23af      	movs	r3, #175	; 0xaf
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	58d3      	ldr	r3, [r2, r3]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	0010      	movs	r0, r2
 8007ba6:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	2302      	movs	r3, #2
 8007bae:	2101      	movs	r1, #1
 8007bb0:	f001 fe80 	bl	80098b4 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	0018      	movs	r0, r3
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	b004      	add	sp, #16
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b084      	sub	sp, #16
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	23ae      	movs	r3, #174	; 0xae
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	58d3      	ldr	r3, [r2, r3]
 8007bce:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10a      	bne.n	8007bee <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	23af      	movs	r3, #175	; 0xaf
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	58d3      	ldr	r3, [r2, r3]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	0010      	movs	r0, r2
 8007be6:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2200      	movs	r2, #0
 8007bec:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	0018      	movs	r0, r3
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	b004      	add	sp, #16
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	220a      	movs	r2, #10
 8007c04:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007c06:	4b02      	ldr	r3, [pc, #8]	; (8007c10 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8007c08:	0018      	movs	r0, r3
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	b002      	add	sp, #8
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	200000d4 	.word	0x200000d4

08007c14 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007c1e:	200f      	movs	r0, #15
 8007c20:	183b      	adds	r3, r7, r0
 8007c22:	2202      	movs	r2, #2
 8007c24:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d007      	beq.n	8007c3c <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	23af      	movs	r3, #175	; 0xaf
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	6839      	ldr	r1, [r7, #0]
 8007c34:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007c36:	183b      	adds	r3, r7, r0
 8007c38:	2200      	movs	r2, #0
 8007c3a:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007c3c:	230f      	movs	r3, #15
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	781b      	ldrb	r3, [r3, #0]
}
 8007c42:	0018      	movs	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b004      	add	sp, #16
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b084      	sub	sp, #16
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	1dfb      	adds	r3, r7, #7
 8007c56:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d101      	bne.n	8007c62 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007c5e:	2302      	movs	r3, #2
 8007c60:	e020      	b.n	8007ca4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	23ad      	movs	r3, #173	; 0xad
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	58d3      	ldr	r3, [r2, r3]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	23ad      	movs	r3, #173	; 0xad
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	2100      	movs	r1, #0
 8007c76:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d004      	beq.n	8007c88 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	23ac      	movs	r3, #172	; 0xac
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	68b9      	ldr	r1, [r7, #8]
 8007c86:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	23a7      	movs	r3, #167	; 0xa7
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	2101      	movs	r1, #1
 8007c90:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	1dfa      	adds	r2, r7, #7
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	f001 fc41 	bl	8009524 <USBD_LL_Init>

  return USBD_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	0018      	movs	r0, r3
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	b004      	add	sp, #16
 8007caa:	bd80      	pop	{r7, pc}

08007cac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007cb6:	200f      	movs	r0, #15
 8007cb8:	183b      	adds	r3, r7, r0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	23ad      	movs	r3, #173	; 0xad
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	6839      	ldr	r1, [r7, #0]
 8007ccc:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007cce:	183b      	adds	r3, r7, r0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
 8007cd4:	e003      	b.n	8007cde <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007cd6:	230f      	movs	r3, #15
 8007cd8:	18fb      	adds	r3, r7, r3
 8007cda:	2202      	movs	r2, #2
 8007cdc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007cde:	230f      	movs	r3, #15
 8007ce0:	18fb      	adds	r3, r7, r3
 8007ce2:	781b      	ldrb	r3, [r3, #0]
}
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b004      	add	sp, #16
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	0018      	movs	r0, r3
 8007cf8:	f001 fc6c 	bl	80095d4 <USBD_LL_Start>

  return USBD_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	0018      	movs	r0, r3
 8007d00:	46bd      	mov	sp, r7
 8007d02:	b002      	add	sp, #8
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b082      	sub	sp, #8
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	0018      	movs	r0, r3
 8007d12:	46bd      	mov	sp, r7
 8007d14:	b002      	add	sp, #8
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d18:	b590      	push	{r4, r7, lr}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	000a      	movs	r2, r1
 8007d22:	1cfb      	adds	r3, r7, #3
 8007d24:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007d26:	240f      	movs	r4, #15
 8007d28:	193b      	adds	r3, r7, r4
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	23ad      	movs	r3, #173	; 0xad
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	58d3      	ldr	r3, [r2, r3]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d00e      	beq.n	8007d58 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	23ad      	movs	r3, #173	; 0xad
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	58d3      	ldr	r3, [r2, r3]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	1cfa      	adds	r2, r7, #3
 8007d46:	7811      	ldrb	r1, [r2, #0]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	0010      	movs	r0, r2
 8007d4c:	4798      	blx	r3
 8007d4e:	1e03      	subs	r3, r0, #0
 8007d50:	d102      	bne.n	8007d58 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007d52:	193b      	adds	r3, r7, r4
 8007d54:	2200      	movs	r2, #0
 8007d56:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007d58:	230f      	movs	r3, #15
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	781b      	ldrb	r3, [r3, #0]
}
 8007d5e:	0018      	movs	r0, r3
 8007d60:	46bd      	mov	sp, r7
 8007d62:	b005      	add	sp, #20
 8007d64:	bd90      	pop	{r4, r7, pc}

08007d66 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b082      	sub	sp, #8
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
 8007d6e:	000a      	movs	r2, r1
 8007d70:	1cfb      	adds	r3, r7, #3
 8007d72:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	23ad      	movs	r3, #173	; 0xad
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	58d3      	ldr	r3, [r2, r3]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	1cfa      	adds	r2, r7, #3
 8007d80:	7811      	ldrb	r1, [r2, #0]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	0010      	movs	r0, r2
 8007d86:	4798      	blx	r3

  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	b002      	add	sp, #8
 8007d90:	bd80      	pop	{r7, pc}
	...

08007d94 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	22aa      	movs	r2, #170	; 0xaa
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	4694      	mov	ip, r2
 8007da6:	4463      	add	r3, ip
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	0011      	movs	r1, r2
 8007dac:	0018      	movs	r0, r3
 8007dae:	f001 f810 	bl	8008dd2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	23a5      	movs	r3, #165	; 0xa5
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	2101      	movs	r1, #1
 8007dba:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <USBD_LL_SetupStage+0xb8>)
 8007dc0:	5a9b      	ldrh	r3, [r3, r2]
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	23a6      	movs	r3, #166	; 0xa6
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	23aa      	movs	r3, #170	; 0xaa
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	5cd3      	ldrb	r3, [r2, r3]
 8007dd4:	001a      	movs	r2, r3
 8007dd6:	231f      	movs	r3, #31
 8007dd8:	4013      	ands	r3, r2
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d019      	beq.n	8007e12 <USBD_LL_SetupStage+0x7e>
 8007dde:	d822      	bhi.n	8007e26 <USBD_LL_SetupStage+0x92>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <USBD_LL_SetupStage+0x56>
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d00a      	beq.n	8007dfe <USBD_LL_SetupStage+0x6a>
 8007de8:	e01d      	b.n	8007e26 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	22aa      	movs	r2, #170	; 0xaa
 8007dee:	0092      	lsls	r2, r2, #2
 8007df0:	189a      	adds	r2, r3, r2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	0011      	movs	r1, r2
 8007df6:	0018      	movs	r0, r3
 8007df8:	f000 fa10 	bl	800821c <USBD_StdDevReq>
      break;
 8007dfc:	e020      	b.n	8007e40 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	22aa      	movs	r2, #170	; 0xaa
 8007e02:	0092      	lsls	r2, r2, #2
 8007e04:	189a      	adds	r2, r3, r2
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	0011      	movs	r1, r2
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	f000 fa78 	bl	8008300 <USBD_StdItfReq>
      break;
 8007e10:	e016      	b.n	8007e40 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	22aa      	movs	r2, #170	; 0xaa
 8007e16:	0092      	lsls	r2, r2, #2
 8007e18:	189a      	adds	r2, r3, r2
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	0011      	movs	r1, r2
 8007e1e:	0018      	movs	r0, r3
 8007e20:	f000 fac5 	bl	80083ae <USBD_StdEPReq>
      break;
 8007e24:	e00c      	b.n	8007e40 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	23aa      	movs	r3, #170	; 0xaa
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	5cd3      	ldrb	r3, [r2, r3]
 8007e2e:	227f      	movs	r2, #127	; 0x7f
 8007e30:	4393      	bics	r3, r2
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	0011      	movs	r1, r2
 8007e38:	0018      	movs	r0, r3
 8007e3a:	f001 fc52 	bl	80096e2 <USBD_LL_StallEP>
      break;
 8007e3e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007e40:	2300      	movs	r3, #0
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b002      	add	sp, #8
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	000002ae 	.word	0x000002ae

08007e50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	607a      	str	r2, [r7, #4]
 8007e5a:	200b      	movs	r0, #11
 8007e5c:	183b      	adds	r3, r7, r0
 8007e5e:	1c0a      	adds	r2, r1, #0
 8007e60:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007e62:	183b      	adds	r3, r7, r0
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d154      	bne.n	8007f14 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3355      	adds	r3, #85	; 0x55
 8007e6e:	33ff      	adds	r3, #255	; 0xff
 8007e70:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	23a5      	movs	r3, #165	; 0xa5
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	58d3      	ldr	r3, [r2, r3]
 8007e7a:	2b03      	cmp	r3, #3
 8007e7c:	d139      	bne.n	8007ef2 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	68da      	ldr	r2, [r3, #12]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d919      	bls.n	8007ebe <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	1ad2      	subs	r2, r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	68da      	ldr	r2, [r3, #12]
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	e002      	b.n	8007eb2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	6879      	ldr	r1, [r7, #4]
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	001a      	movs	r2, r3
 8007eb8:	f001 f89b 	bl	8008ff2 <USBD_CtlContinueRx>
 8007ebc:	e045      	b.n	8007f4a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	23ad      	movs	r3, #173	; 0xad
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	58d3      	ldr	r3, [r2, r3]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00d      	beq.n	8007ee8 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	23a7      	movs	r3, #167	; 0xa7
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007ed4:	2b03      	cmp	r3, #3
 8007ed6:	d107      	bne.n	8007ee8 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	23ad      	movs	r3, #173	; 0xad
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	58d3      	ldr	r3, [r2, r3]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	0010      	movs	r0, r2
 8007ee6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	0018      	movs	r0, r3
 8007eec:	f001 f894 	bl	8009018 <USBD_CtlSendStatus>
 8007ef0:	e02b      	b.n	8007f4a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	23a5      	movs	r3, #165	; 0xa5
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	58d3      	ldr	r3, [r2, r3]
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	d125      	bne.n	8007f4a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	23a5      	movs	r3, #165	; 0xa5
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	2100      	movs	r1, #0
 8007f06:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f001 fbe8 	bl	80096e2 <USBD_LL_StallEP>
 8007f12:	e01a      	b.n	8007f4a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	23ad      	movs	r3, #173	; 0xad
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	58d3      	ldr	r3, [r2, r3]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d011      	beq.n	8007f46 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	23a7      	movs	r3, #167	; 0xa7
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007f2a:	2b03      	cmp	r3, #3
 8007f2c:	d10b      	bne.n	8007f46 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	23ad      	movs	r3, #173	; 0xad
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	58d3      	ldr	r3, [r2, r3]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	220b      	movs	r2, #11
 8007f3a:	18ba      	adds	r2, r7, r2
 8007f3c:	7811      	ldrb	r1, [r2, #0]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	0010      	movs	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	e001      	b.n	8007f4a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007f46:	2302      	movs	r3, #2
 8007f48:	e000      	b.n	8007f4c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	b006      	add	sp, #24
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	200b      	movs	r0, #11
 8007f60:	183b      	adds	r3, r7, r0
 8007f62:	1c0a      	adds	r2, r1, #0
 8007f64:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007f66:	183b      	adds	r3, r7, r0
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d000      	beq.n	8007f70 <USBD_LL_DataInStage+0x1c>
 8007f6e:	e08e      	b.n	800808e <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	3314      	adds	r3, #20
 8007f74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	23a5      	movs	r3, #165	; 0xa5
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	58d3      	ldr	r3, [r2, r3]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d164      	bne.n	800804c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d915      	bls.n	8007fba <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	68da      	ldr	r2, [r3, #12]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	1ad2      	subs	r2, r2, r3
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	b29a      	uxth	r2, r3
 8007fa2:	6879      	ldr	r1, [r7, #4]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f000 ffec 	bl	8008f84 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	f001 fc7e 	bl	80098b4 <USBD_LL_PrepareReceive>
 8007fb8:	e059      	b.n	800806e <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	689a      	ldr	r2, [r3, #8]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	0019      	movs	r1, r3
 8007fc4:	0010      	movs	r0, r2
 8007fc6:	f7f8 f937 	bl	8000238 <__aeabi_uidivmod>
 8007fca:	1e0b      	subs	r3, r1, #0
 8007fcc:	d11f      	bne.n	800800e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	689a      	ldr	r2, [r3, #8]
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d319      	bcc.n	800800e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	68f9      	ldr	r1, [r7, #12]
 8007fe0:	23a6      	movs	r3, #166	; 0xa6
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d211      	bcs.n	800800e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	2100      	movs	r1, #0
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f000 ffc7 	bl	8008f84 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	23a6      	movs	r3, #166	; 0xa6
 8007ffa:	009b      	lsls	r3, r3, #2
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	2300      	movs	r3, #0
 8008004:	2200      	movs	r2, #0
 8008006:	2100      	movs	r1, #0
 8008008:	f001 fc54 	bl	80098b4 <USBD_LL_PrepareReceive>
 800800c:	e02f      	b.n	800806e <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	23ad      	movs	r3, #173	; 0xad
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	58d3      	ldr	r3, [r2, r3]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00d      	beq.n	8008038 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	23a7      	movs	r3, #167	; 0xa7
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008024:	2b03      	cmp	r3, #3
 8008026:	d107      	bne.n	8008038 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	23ad      	movs	r3, #173	; 0xad
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	58d3      	ldr	r3, [r2, r3]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	0010      	movs	r0, r2
 8008036:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2180      	movs	r1, #128	; 0x80
 800803c:	0018      	movs	r0, r3
 800803e:	f001 fb50 	bl	80096e2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	0018      	movs	r0, r3
 8008046:	f000 fffb 	bl	8009040 <USBD_CtlReceiveStatus>
 800804a:	e010      	b.n	800806e <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	23a5      	movs	r3, #165	; 0xa5
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	58d3      	ldr	r3, [r2, r3]
 8008054:	2b04      	cmp	r3, #4
 8008056:	d005      	beq.n	8008064 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	23a5      	movs	r3, #165	; 0xa5
 800805c:	009b      	lsls	r3, r3, #2
 800805e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2180      	movs	r1, #128	; 0x80
 8008068:	0018      	movs	r0, r3
 800806a:	f001 fb3a 	bl	80096e2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	23a8      	movs	r3, #168	; 0xa8
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	5cd3      	ldrb	r3, [r2, r3]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d124      	bne.n	80080c4 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	0018      	movs	r0, r3
 800807e:	f7ff fe42 	bl	8007d06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	23a8      	movs	r3, #168	; 0xa8
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	2100      	movs	r1, #0
 800808a:	54d1      	strb	r1, [r2, r3]
 800808c:	e01a      	b.n	80080c4 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	23ad      	movs	r3, #173	; 0xad
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	58d3      	ldr	r3, [r2, r3]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d011      	beq.n	80080c0 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	23a7      	movs	r3, #167	; 0xa7
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80080a4:	2b03      	cmp	r3, #3
 80080a6:	d10b      	bne.n	80080c0 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	23ad      	movs	r3, #173	; 0xad
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	58d3      	ldr	r3, [r2, r3]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	220b      	movs	r2, #11
 80080b4:	18ba      	adds	r2, r7, r2
 80080b6:	7811      	ldrb	r1, [r2, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	0010      	movs	r0, r2
 80080bc:	4798      	blx	r3
 80080be:	e001      	b.n	80080c4 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080c0:	2302      	movs	r3, #2
 80080c2:	e000      	b.n	80080c6 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	0018      	movs	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	b006      	add	sp, #24
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b082      	sub	sp, #8
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	2200      	movs	r2, #0
 80080dc:	2100      	movs	r1, #0
 80080de:	f001 fa9e 	bl	800961e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	23ac      	movs	r3, #172	; 0xac
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	2101      	movs	r1, #1
 80080ea:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	23b2      	movs	r3, #178	; 0xb2
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	2140      	movs	r1, #64	; 0x40
 80080f4:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	2340      	movs	r3, #64	; 0x40
 80080fa:	2200      	movs	r2, #0
 80080fc:	2180      	movs	r1, #128	; 0x80
 80080fe:	f001 fa8e 	bl	800961e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2240      	movs	r2, #64	; 0x40
 800810c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23a7      	movs	r3, #167	; 0xa7
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	2101      	movs	r1, #1
 8008116:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	23a5      	movs	r3, #165	; 0xa5
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	2100      	movs	r1, #0
 8008120:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	23a9      	movs	r3, #169	; 0xa9
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	2100      	movs	r1, #0
 8008130:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	23ae      	movs	r3, #174	; 0xae
 8008136:	009b      	lsls	r3, r3, #2
 8008138:	58d3      	ldr	r3, [r2, r3]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	23ad      	movs	r3, #173	; 0xad
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	58d3      	ldr	r3, [r2, r3]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	b2d9      	uxtb	r1, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	0018      	movs	r0, r3
 8008152:	4790      	blx	r2
  }

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	0018      	movs	r0, r3
 8008158:	46bd      	mov	sp, r7
 800815a:	b002      	add	sp, #8
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b082      	sub	sp, #8
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
 8008166:	000a      	movs	r2, r1
 8008168:	1cfb      	adds	r3, r7, #3
 800816a:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	1cfa      	adds	r2, r7, #3
 8008170:	7812      	ldrb	r2, [r2, #0]
 8008172:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	0018      	movs	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	b002      	add	sp, #8
 800817c:	bd80      	pop	{r7, pc}
	...

08008180 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	23a7      	movs	r3, #167	; 0xa7
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	5cd1      	ldrb	r1, [r2, r3]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a06      	ldr	r2, [pc, #24]	; (80081ac <USBD_LL_Suspend+0x2c>)
 8008194:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	23a7      	movs	r3, #167	; 0xa7
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	2104      	movs	r1, #4
 800819e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	0018      	movs	r0, r3
 80081a4:	46bd      	mov	sp, r7
 80081a6:	b002      	add	sp, #8
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	0000029d 	.word	0x0000029d

080081b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	23a7      	movs	r3, #167	; 0xa7
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	5cd3      	ldrb	r3, [r2, r3]
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d106      	bne.n	80081d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a05      	ldr	r2, [pc, #20]	; (80081dc <USBD_LL_Resume+0x2c>)
 80081c8:	5c99      	ldrb	r1, [r3, r2]
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	23a7      	movs	r3, #167	; 0xa7
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	0018      	movs	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	b002      	add	sp, #8
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	0000029d 	.word	0x0000029d

080081e0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	23a7      	movs	r3, #167	; 0xa7
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	5cd3      	ldrb	r3, [r2, r3]
 80081f0:	2b03      	cmp	r3, #3
 80081f2:	d10e      	bne.n	8008212 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	23ad      	movs	r3, #173	; 0xad
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	58d3      	ldr	r3, [r2, r3]
 80081fc:	69db      	ldr	r3, [r3, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d007      	beq.n	8008212 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	23ad      	movs	r3, #173	; 0xad
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	58d3      	ldr	r3, [r2, r3]
 800820a:	69db      	ldr	r3, [r3, #28]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	0010      	movs	r0, r2
 8008210:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	0018      	movs	r0, r3
 8008216:	46bd      	mov	sp, r7
 8008218:	b002      	add	sp, #8
 800821a:	bd80      	pop	{r7, pc}

0800821c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008226:	230f      	movs	r3, #15
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	001a      	movs	r2, r3
 8008234:	2360      	movs	r3, #96	; 0x60
 8008236:	4013      	ands	r3, r2
 8008238:	2b40      	cmp	r3, #64	; 0x40
 800823a:	d004      	beq.n	8008246 <USBD_StdDevReq+0x2a>
 800823c:	d84f      	bhi.n	80082de <USBD_StdDevReq+0xc2>
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <USBD_StdDevReq+0x3e>
 8008242:	2b20      	cmp	r3, #32
 8008244:	d14b      	bne.n	80082de <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	23ad      	movs	r3, #173	; 0xad
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	58d3      	ldr	r3, [r2, r3]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	0010      	movs	r0, r2
 8008256:	4798      	blx	r3
      break;
 8008258:	e048      	b.n	80082ec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b09      	cmp	r3, #9
 8008260:	d835      	bhi.n	80082ce <USBD_StdDevReq+0xb2>
 8008262:	009a      	lsls	r2, r3, #2
 8008264:	4b25      	ldr	r3, [pc, #148]	; (80082fc <USBD_StdDevReq+0xe0>)
 8008266:	18d3      	adds	r3, r2, r3
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	0011      	movs	r1, r2
 8008272:	0018      	movs	r0, r3
 8008274:	f000 fa52 	bl	800871c <USBD_GetDescriptor>
          break;
 8008278:	e030      	b.n	80082dc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f000 fbfd 	bl	8008a80 <USBD_SetAddress>
          break;
 8008286:	e029      	b.n	80082dc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	0011      	movs	r1, r2
 800828e:	0018      	movs	r0, r3
 8008290:	f000 fc4a 	bl	8008b28 <USBD_SetConfig>
          break;
 8008294:	e022      	b.n	80082dc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008296:	683a      	ldr	r2, [r7, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	0011      	movs	r1, r2
 800829c:	0018      	movs	r0, r3
 800829e:	f000 fce7 	bl	8008c70 <USBD_GetConfig>
          break;
 80082a2:	e01b      	b.n	80082dc <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0011      	movs	r1, r2
 80082aa:	0018      	movs	r0, r3
 80082ac:	f000 fd1b 	bl	8008ce6 <USBD_GetStatus>
          break;
 80082b0:	e014      	b.n	80082dc <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	0011      	movs	r1, r2
 80082b8:	0018      	movs	r0, r3
 80082ba:	f000 fd4e 	bl	8008d5a <USBD_SetFeature>
          break;
 80082be:	e00d      	b.n	80082dc <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	0011      	movs	r1, r2
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 fd5d 	bl	8008d86 <USBD_ClrFeature>
          break;
 80082cc:	e006      	b.n	80082dc <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082ce:	683a      	ldr	r2, [r7, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	0011      	movs	r1, r2
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fdb7 	bl	8008e48 <USBD_CtlError>
          break;
 80082da:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80082dc:	e006      	b.n	80082ec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	0011      	movs	r1, r2
 80082e4:	0018      	movs	r0, r3
 80082e6:	f000 fdaf 	bl	8008e48 <USBD_CtlError>
      break;
 80082ea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80082ec:	230f      	movs	r3, #15
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	781b      	ldrb	r3, [r3, #0]
}
 80082f2:	0018      	movs	r0, r3
 80082f4:	46bd      	mov	sp, r7
 80082f6:	b004      	add	sp, #16
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	46c0      	nop			; (mov r8, r8)
 80082fc:	0800a3a8 	.word	0x0800a3a8

08008300 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008300:	b5b0      	push	{r4, r5, r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800830a:	230f      	movs	r3, #15
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	2200      	movs	r2, #0
 8008310:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	001a      	movs	r2, r3
 8008318:	2360      	movs	r3, #96	; 0x60
 800831a:	4013      	ands	r3, r2
 800831c:	2b40      	cmp	r3, #64	; 0x40
 800831e:	d004      	beq.n	800832a <USBD_StdItfReq+0x2a>
 8008320:	d839      	bhi.n	8008396 <USBD_StdItfReq+0x96>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <USBD_StdItfReq+0x2a>
 8008326:	2b20      	cmp	r3, #32
 8008328:	d135      	bne.n	8008396 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	23a7      	movs	r3, #167	; 0xa7
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	5cd3      	ldrb	r3, [r2, r3]
 8008332:	3b01      	subs	r3, #1
 8008334:	2b02      	cmp	r3, #2
 8008336:	d825      	bhi.n	8008384 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	889b      	ldrh	r3, [r3, #4]
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b01      	cmp	r3, #1
 8008340:	d819      	bhi.n	8008376 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	23ad      	movs	r3, #173	; 0xad
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	58d3      	ldr	r3, [r2, r3]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	250f      	movs	r5, #15
 800834e:	197c      	adds	r4, r7, r5
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	0010      	movs	r0, r2
 8008356:	4798      	blx	r3
 8008358:	0003      	movs	r3, r0
 800835a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	88db      	ldrh	r3, [r3, #6]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d116      	bne.n	8008392 <USBD_StdItfReq+0x92>
 8008364:	197b      	adds	r3, r7, r5
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d112      	bne.n	8008392 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	0018      	movs	r0, r3
 8008370:	f000 fe52 	bl	8009018 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008374:	e00d      	b.n	8008392 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8008376:	683a      	ldr	r2, [r7, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	0011      	movs	r1, r2
 800837c:	0018      	movs	r0, r3
 800837e:	f000 fd63 	bl	8008e48 <USBD_CtlError>
          break;
 8008382:	e006      	b.n	8008392 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8008384:	683a      	ldr	r2, [r7, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	0011      	movs	r1, r2
 800838a:	0018      	movs	r0, r3
 800838c:	f000 fd5c 	bl	8008e48 <USBD_CtlError>
          break;
 8008390:	e000      	b.n	8008394 <USBD_StdItfReq+0x94>
          break;
 8008392:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008394:	e006      	b.n	80083a4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	0011      	movs	r1, r2
 800839c:	0018      	movs	r0, r3
 800839e:	f000 fd53 	bl	8008e48 <USBD_CtlError>
      break;
 80083a2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	0018      	movs	r0, r3
 80083a8:	46bd      	mov	sp, r7
 80083aa:	b004      	add	sp, #16
 80083ac:	bdb0      	pop	{r4, r5, r7, pc}

080083ae <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80083ae:	b5b0      	push	{r4, r5, r7, lr}
 80083b0:	b084      	sub	sp, #16
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
 80083b6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80083b8:	230f      	movs	r3, #15
 80083ba:	18fb      	adds	r3, r7, r3
 80083bc:	2200      	movs	r2, #0
 80083be:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	889a      	ldrh	r2, [r3, #4]
 80083c4:	230e      	movs	r3, #14
 80083c6:	18fb      	adds	r3, r7, r3
 80083c8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	001a      	movs	r2, r3
 80083d0:	2360      	movs	r3, #96	; 0x60
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b40      	cmp	r3, #64	; 0x40
 80083d6:	d006      	beq.n	80083e6 <USBD_StdEPReq+0x38>
 80083d8:	d900      	bls.n	80083dc <USBD_StdEPReq+0x2e>
 80083da:	e190      	b.n	80086fe <USBD_StdEPReq+0x350>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00c      	beq.n	80083fa <USBD_StdEPReq+0x4c>
 80083e0:	2b20      	cmp	r3, #32
 80083e2:	d000      	beq.n	80083e6 <USBD_StdEPReq+0x38>
 80083e4:	e18b      	b.n	80086fe <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	23ad      	movs	r3, #173	; 0xad
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	58d3      	ldr	r3, [r2, r3]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	0010      	movs	r0, r2
 80083f6:	4798      	blx	r3
      break;
 80083f8:	e188      	b.n	800870c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	001a      	movs	r2, r3
 8008400:	2360      	movs	r3, #96	; 0x60
 8008402:	4013      	ands	r3, r2
 8008404:	2b20      	cmp	r3, #32
 8008406:	d10f      	bne.n	8008428 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	23ad      	movs	r3, #173	; 0xad
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	58d3      	ldr	r3, [r2, r3]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	250f      	movs	r5, #15
 8008414:	197c      	adds	r4, r7, r5
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	0010      	movs	r0, r2
 800841c:	4798      	blx	r3
 800841e:	0003      	movs	r3, r0
 8008420:	7023      	strb	r3, [r4, #0]

        return ret;
 8008422:	197b      	adds	r3, r7, r5
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	e174      	b.n	8008712 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	785b      	ldrb	r3, [r3, #1]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d007      	beq.n	8008440 <USBD_StdEPReq+0x92>
 8008430:	dd00      	ble.n	8008434 <USBD_StdEPReq+0x86>
 8008432:	e15c      	b.n	80086ee <USBD_StdEPReq+0x340>
 8008434:	2b00      	cmp	r3, #0
 8008436:	d100      	bne.n	800843a <USBD_StdEPReq+0x8c>
 8008438:	e092      	b.n	8008560 <USBD_StdEPReq+0x1b2>
 800843a:	2b01      	cmp	r3, #1
 800843c:	d04b      	beq.n	80084d6 <USBD_StdEPReq+0x128>
 800843e:	e156      	b.n	80086ee <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	23a7      	movs	r3, #167	; 0xa7
 8008444:	009b      	lsls	r3, r3, #2
 8008446:	5cd3      	ldrb	r3, [r2, r3]
 8008448:	2b02      	cmp	r3, #2
 800844a:	d002      	beq.n	8008452 <USBD_StdEPReq+0xa4>
 800844c:	2b03      	cmp	r3, #3
 800844e:	d01d      	beq.n	800848c <USBD_StdEPReq+0xde>
 8008450:	e039      	b.n	80084c6 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008452:	220e      	movs	r2, #14
 8008454:	18bb      	adds	r3, r7, r2
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <USBD_StdEPReq+0xd0>
 800845c:	18bb      	adds	r3, r7, r2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b80      	cmp	r3, #128	; 0x80
 8008462:	d00c      	beq.n	800847e <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008464:	18bb      	adds	r3, r7, r2
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	0011      	movs	r1, r2
 800846c:	0018      	movs	r0, r3
 800846e:	f001 f938 	bl	80096e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2180      	movs	r1, #128	; 0x80
 8008476:	0018      	movs	r0, r3
 8008478:	f001 f933 	bl	80096e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800847c:	e02a      	b.n	80084d4 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800847e:	683a      	ldr	r2, [r7, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	0011      	movs	r1, r2
 8008484:	0018      	movs	r0, r3
 8008486:	f000 fcdf 	bl	8008e48 <USBD_CtlError>
              break;
 800848a:	e023      	b.n	80084d4 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	885b      	ldrh	r3, [r3, #2]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d113      	bne.n	80084bc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8008494:	220e      	movs	r2, #14
 8008496:	18bb      	adds	r3, r7, r2
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00e      	beq.n	80084bc <USBD_StdEPReq+0x10e>
 800849e:	18bb      	adds	r3, r7, r2
 80084a0:	781b      	ldrb	r3, [r3, #0]
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d00a      	beq.n	80084bc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	88db      	ldrh	r3, [r3, #6]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80084ae:	18bb      	adds	r3, r7, r2
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	0011      	movs	r1, r2
 80084b6:	0018      	movs	r0, r3
 80084b8:	f001 f913 	bl	80096e2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	0018      	movs	r0, r3
 80084c0:	f000 fdaa 	bl	8009018 <USBD_CtlSendStatus>

              break;
 80084c4:	e006      	b.n	80084d4 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 80084c6:	683a      	ldr	r2, [r7, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	0011      	movs	r1, r2
 80084cc:	0018      	movs	r0, r3
 80084ce:	f000 fcbb 	bl	8008e48 <USBD_CtlError>
              break;
 80084d2:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80084d4:	e112      	b.n	80086fc <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	23a7      	movs	r3, #167	; 0xa7
 80084da:	009b      	lsls	r3, r3, #2
 80084dc:	5cd3      	ldrb	r3, [r2, r3]
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d002      	beq.n	80084e8 <USBD_StdEPReq+0x13a>
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d01d      	beq.n	8008522 <USBD_StdEPReq+0x174>
 80084e6:	e032      	b.n	800854e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e8:	220e      	movs	r2, #14
 80084ea:	18bb      	adds	r3, r7, r2
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d010      	beq.n	8008514 <USBD_StdEPReq+0x166>
 80084f2:	18bb      	adds	r3, r7, r2
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b80      	cmp	r3, #128	; 0x80
 80084f8:	d00c      	beq.n	8008514 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80084fa:	18bb      	adds	r3, r7, r2
 80084fc:	781a      	ldrb	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	0011      	movs	r1, r2
 8008502:	0018      	movs	r0, r3
 8008504:	f001 f8ed 	bl	80096e2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	0018      	movs	r0, r3
 800850e:	f001 f8e8 	bl	80096e2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008512:	e024      	b.n	800855e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0011      	movs	r1, r2
 800851a:	0018      	movs	r0, r3
 800851c:	f000 fc94 	bl	8008e48 <USBD_CtlError>
              break;
 8008520:	e01d      	b.n	800855e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	885b      	ldrh	r3, [r3, #2]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d118      	bne.n	800855c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800852a:	210e      	movs	r1, #14
 800852c:	187b      	adds	r3, r7, r1
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	227f      	movs	r2, #127	; 0x7f
 8008532:	4013      	ands	r3, r2
 8008534:	d006      	beq.n	8008544 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008536:	187b      	adds	r3, r7, r1
 8008538:	781a      	ldrb	r2, [r3, #0]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	0011      	movs	r1, r2
 800853e:	0018      	movs	r0, r3
 8008540:	f001 f8fa 	bl	8009738 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	0018      	movs	r0, r3
 8008548:	f000 fd66 	bl	8009018 <USBD_CtlSendStatus>
              }
              break;
 800854c:	e006      	b.n	800855c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	0011      	movs	r1, r2
 8008554:	0018      	movs	r0, r3
 8008556:	f000 fc77 	bl	8008e48 <USBD_CtlError>
              break;
 800855a:	e000      	b.n	800855e <USBD_StdEPReq+0x1b0>
              break;
 800855c:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800855e:	e0cd      	b.n	80086fc <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	23a7      	movs	r3, #167	; 0xa7
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	5cd3      	ldrb	r3, [r2, r3]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d002      	beq.n	8008572 <USBD_StdEPReq+0x1c4>
 800856c:	2b03      	cmp	r3, #3
 800856e:	d03c      	beq.n	80085ea <USBD_StdEPReq+0x23c>
 8008570:	e0b5      	b.n	80086de <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008572:	220e      	movs	r2, #14
 8008574:	18bb      	adds	r3, r7, r2
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d00a      	beq.n	8008592 <USBD_StdEPReq+0x1e4>
 800857c:	18bb      	adds	r3, r7, r2
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b80      	cmp	r3, #128	; 0x80
 8008582:	d006      	beq.n	8008592 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8008584:	683a      	ldr	r2, [r7, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	0011      	movs	r1, r2
 800858a:	0018      	movs	r0, r3
 800858c:	f000 fc5c 	bl	8008e48 <USBD_CtlError>
                break;
 8008590:	e0ac      	b.n	80086ec <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008592:	220e      	movs	r2, #14
 8008594:	18bb      	adds	r3, r7, r2
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	b25b      	sxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	da0c      	bge.n	80085b8 <USBD_StdEPReq+0x20a>
 800859e:	18bb      	adds	r3, r7, r2
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	227f      	movs	r2, #127	; 0x7f
 80085a4:	401a      	ands	r2, r3
 80085a6:	0013      	movs	r3, r2
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	189b      	adds	r3, r3, r2
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	3310      	adds	r3, #16
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	18d3      	adds	r3, r2, r3
 80085b4:	3304      	adds	r3, #4
 80085b6:	e00d      	b.n	80085d4 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80085b8:	230e      	movs	r3, #14
 80085ba:	18fb      	adds	r3, r7, r3
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	227f      	movs	r2, #127	; 0x7f
 80085c0:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80085c2:	0013      	movs	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	189b      	adds	r3, r3, r2
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	3351      	adds	r3, #81	; 0x51
 80085cc:	33ff      	adds	r3, #255	; 0xff
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	18d3      	adds	r3, r2, r3
 80085d2:	3304      	adds	r3, #4
 80085d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	2200      	movs	r2, #0
 80085da:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085dc:	68b9      	ldr	r1, [r7, #8]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2202      	movs	r2, #2
 80085e2:	0018      	movs	r0, r3
 80085e4:	f000 fcae 	bl	8008f44 <USBD_CtlSendData>
              break;
 80085e8:	e080      	b.n	80086ec <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80085ea:	220e      	movs	r2, #14
 80085ec:	18bb      	adds	r3, r7, r2
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	b25b      	sxtb	r3, r3
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	da14      	bge.n	8008620 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80085f6:	18bb      	adds	r3, r7, r2
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	220f      	movs	r2, #15
 80085fc:	401a      	ands	r2, r3
 80085fe:	6879      	ldr	r1, [r7, #4]
 8008600:	0013      	movs	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	189b      	adds	r3, r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	18cb      	adds	r3, r1, r3
 800860a:	3318      	adds	r3, #24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d11e      	bne.n	8008650 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	0011      	movs	r1, r2
 8008618:	0018      	movs	r0, r3
 800861a:	f000 fc15 	bl	8008e48 <USBD_CtlError>
                  break;
 800861e:	e065      	b.n	80086ec <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008620:	230e      	movs	r3, #14
 8008622:	18fb      	adds	r3, r7, r3
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	220f      	movs	r2, #15
 8008628:	401a      	ands	r2, r3
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	23ac      	movs	r3, #172	; 0xac
 800862e:	0059      	lsls	r1, r3, #1
 8008630:	0013      	movs	r3, r2
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	189b      	adds	r3, r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	18c3      	adds	r3, r0, r3
 800863a:	185b      	adds	r3, r3, r1
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d106      	bne.n	8008650 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	0011      	movs	r1, r2
 8008648:	0018      	movs	r0, r3
 800864a:	f000 fbfd 	bl	8008e48 <USBD_CtlError>
                  break;
 800864e:	e04d      	b.n	80086ec <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008650:	220e      	movs	r2, #14
 8008652:	18bb      	adds	r3, r7, r2
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	b25b      	sxtb	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	da0c      	bge.n	8008676 <USBD_StdEPReq+0x2c8>
 800865c:	18bb      	adds	r3, r7, r2
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	227f      	movs	r2, #127	; 0x7f
 8008662:	401a      	ands	r2, r3
 8008664:	0013      	movs	r3, r2
 8008666:	009b      	lsls	r3, r3, #2
 8008668:	189b      	adds	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	3310      	adds	r3, #16
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	18d3      	adds	r3, r2, r3
 8008672:	3304      	adds	r3, #4
 8008674:	e00d      	b.n	8008692 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008676:	230e      	movs	r3, #14
 8008678:	18fb      	adds	r3, r7, r3
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	227f      	movs	r2, #127	; 0x7f
 800867e:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008680:	0013      	movs	r3, r2
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	189b      	adds	r3, r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	3351      	adds	r3, #81	; 0x51
 800868a:	33ff      	adds	r3, #255	; 0xff
 800868c:	687a      	ldr	r2, [r7, #4]
 800868e:	18d3      	adds	r3, r2, r3
 8008690:	3304      	adds	r3, #4
 8008692:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008694:	220e      	movs	r2, #14
 8008696:	18bb      	adds	r3, r7, r2
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d003      	beq.n	80086a6 <USBD_StdEPReq+0x2f8>
 800869e:	18bb      	adds	r3, r7, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b80      	cmp	r3, #128	; 0x80
 80086a4:	d103      	bne.n	80086ae <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	e010      	b.n	80086d0 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80086ae:	230e      	movs	r3, #14
 80086b0:	18fb      	adds	r3, r7, r3
 80086b2:	781a      	ldrb	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	0011      	movs	r1, r2
 80086b8:	0018      	movs	r0, r3
 80086ba:	f001 f868 	bl	800978e <USBD_LL_IsStallEP>
 80086be:	1e03      	subs	r3, r0, #0
 80086c0:	d003      	beq.n	80086ca <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	2201      	movs	r2, #1
 80086c6:	601a      	str	r2, [r3, #0]
 80086c8:	e002      	b.n	80086d0 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086d0:	68b9      	ldr	r1, [r7, #8]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2202      	movs	r2, #2
 80086d6:	0018      	movs	r0, r3
 80086d8:	f000 fc34 	bl	8008f44 <USBD_CtlSendData>
              break;
 80086dc:	e006      	b.n	80086ec <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	0011      	movs	r1, r2
 80086e4:	0018      	movs	r0, r3
 80086e6:	f000 fbaf 	bl	8008e48 <USBD_CtlError>
              break;
 80086ea:	46c0      	nop			; (mov r8, r8)
          }
          break;
 80086ec:	e006      	b.n	80086fc <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	0011      	movs	r1, r2
 80086f4:	0018      	movs	r0, r3
 80086f6:	f000 fba7 	bl	8008e48 <USBD_CtlError>
          break;
 80086fa:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80086fc:	e006      	b.n	800870c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	0011      	movs	r1, r2
 8008704:	0018      	movs	r0, r3
 8008706:	f000 fb9f 	bl	8008e48 <USBD_CtlError>
      break;
 800870a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800870c:	230f      	movs	r3, #15
 800870e:	18fb      	adds	r3, r7, r3
 8008710:	781b      	ldrb	r3, [r3, #0]
}
 8008712:	0018      	movs	r0, r3
 8008714:	46bd      	mov	sp, r7
 8008716:	b004      	add	sp, #16
 8008718:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800871c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008726:	2308      	movs	r3, #8
 8008728:	18fb      	adds	r3, r7, r3
 800872a:	2200      	movs	r2, #0
 800872c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008732:	230b      	movs	r3, #11
 8008734:	18fb      	adds	r3, r7, r3
 8008736:	2200      	movs	r2, #0
 8008738:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	885b      	ldrh	r3, [r3, #2]
 800873e:	0a1b      	lsrs	r3, r3, #8
 8008740:	b29b      	uxth	r3, r3
 8008742:	2b07      	cmp	r3, #7
 8008744:	d900      	bls.n	8008748 <USBD_GetDescriptor+0x2c>
 8008746:	e159      	b.n	80089fc <USBD_GetDescriptor+0x2e0>
 8008748:	009a      	lsls	r2, r3, #2
 800874a:	4bcb      	ldr	r3, [pc, #812]	; (8008a78 <USBD_GetDescriptor+0x35c>)
 800874c:	18d3      	adds	r3, r2, r3
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008752:	687a      	ldr	r2, [r7, #4]
 8008754:	23ac      	movs	r3, #172	; 0xac
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	58d3      	ldr	r3, [r2, r3]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	7c12      	ldrb	r2, [r2, #16]
 8008760:	2108      	movs	r1, #8
 8008762:	1879      	adds	r1, r7, r1
 8008764:	0010      	movs	r0, r2
 8008766:	4798      	blx	r3
 8008768:	0003      	movs	r3, r0
 800876a:	60fb      	str	r3, [r7, #12]
      break;
 800876c:	e153      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7c1b      	ldrb	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10f      	bne.n	8008796 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	23ad      	movs	r3, #173	; 0xad
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	58d3      	ldr	r3, [r2, r3]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	2208      	movs	r2, #8
 8008782:	18ba      	adds	r2, r7, r2
 8008784:	0010      	movs	r0, r2
 8008786:	4798      	blx	r3
 8008788:	0003      	movs	r3, r0
 800878a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3301      	adds	r3, #1
 8008790:	2202      	movs	r2, #2
 8008792:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008794:	e13f      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	23ad      	movs	r3, #173	; 0xad
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	58d3      	ldr	r3, [r2, r3]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	2208      	movs	r2, #8
 80087a2:	18ba      	adds	r2, r7, r2
 80087a4:	0010      	movs	r0, r2
 80087a6:	4798      	blx	r3
 80087a8:	0003      	movs	r3, r0
 80087aa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	3301      	adds	r3, #1
 80087b0:	2202      	movs	r2, #2
 80087b2:	701a      	strb	r2, [r3, #0]
      break;
 80087b4:	e12f      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	885b      	ldrh	r3, [r3, #2]
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b05      	cmp	r3, #5
 80087be:	d900      	bls.n	80087c2 <USBD_GetDescriptor+0xa6>
 80087c0:	e0d0      	b.n	8008964 <USBD_GetDescriptor+0x248>
 80087c2:	009a      	lsls	r2, r3, #2
 80087c4:	4bad      	ldr	r3, [pc, #692]	; (8008a7c <USBD_GetDescriptor+0x360>)
 80087c6:	18d3      	adds	r3, r2, r3
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	23ac      	movs	r3, #172	; 0xac
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	58d3      	ldr	r3, [r2, r3]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00d      	beq.n	80087f6 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	23ac      	movs	r3, #172	; 0xac
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	58d3      	ldr	r3, [r2, r3]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	7c12      	ldrb	r2, [r2, #16]
 80087e8:	2108      	movs	r1, #8
 80087ea:	1879      	adds	r1, r7, r1
 80087ec:	0010      	movs	r0, r2
 80087ee:	4798      	blx	r3
 80087f0:	0003      	movs	r3, r0
 80087f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087f4:	e0c3      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80087f6:	683a      	ldr	r2, [r7, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	0011      	movs	r1, r2
 80087fc:	0018      	movs	r0, r3
 80087fe:	f000 fb23 	bl	8008e48 <USBD_CtlError>
            err++;
 8008802:	210b      	movs	r1, #11
 8008804:	187b      	adds	r3, r7, r1
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	187b      	adds	r3, r7, r1
 800880a:	3201      	adds	r2, #1
 800880c:	701a      	strb	r2, [r3, #0]
          break;
 800880e:	e0b6      	b.n	800897e <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	23ac      	movs	r3, #172	; 0xac
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	58d3      	ldr	r3, [r2, r3]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00d      	beq.n	800883a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	23ac      	movs	r3, #172	; 0xac
 8008822:	009b      	lsls	r3, r3, #2
 8008824:	58d3      	ldr	r3, [r2, r3]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	7c12      	ldrb	r2, [r2, #16]
 800882c:	2108      	movs	r1, #8
 800882e:	1879      	adds	r1, r7, r1
 8008830:	0010      	movs	r0, r2
 8008832:	4798      	blx	r3
 8008834:	0003      	movs	r3, r0
 8008836:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008838:	e0a1      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800883a:	683a      	ldr	r2, [r7, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f000 fb01 	bl	8008e48 <USBD_CtlError>
            err++;
 8008846:	210b      	movs	r1, #11
 8008848:	187b      	adds	r3, r7, r1
 800884a:	781a      	ldrb	r2, [r3, #0]
 800884c:	187b      	adds	r3, r7, r1
 800884e:	3201      	adds	r2, #1
 8008850:	701a      	strb	r2, [r3, #0]
          break;
 8008852:	e094      	b.n	800897e <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	23ac      	movs	r3, #172	; 0xac
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	58d3      	ldr	r3, [r2, r3]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00d      	beq.n	800887e <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	23ac      	movs	r3, #172	; 0xac
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	58d3      	ldr	r3, [r2, r3]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	7c12      	ldrb	r2, [r2, #16]
 8008870:	2108      	movs	r1, #8
 8008872:	1879      	adds	r1, r7, r1
 8008874:	0010      	movs	r0, r2
 8008876:	4798      	blx	r3
 8008878:	0003      	movs	r3, r0
 800887a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800887c:	e07f      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	0011      	movs	r1, r2
 8008884:	0018      	movs	r0, r3
 8008886:	f000 fadf 	bl	8008e48 <USBD_CtlError>
            err++;
 800888a:	210b      	movs	r1, #11
 800888c:	187b      	adds	r3, r7, r1
 800888e:	781a      	ldrb	r2, [r3, #0]
 8008890:	187b      	adds	r3, r7, r1
 8008892:	3201      	adds	r2, #1
 8008894:	701a      	strb	r2, [r3, #0]
          break;
 8008896:	e072      	b.n	800897e <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	23ac      	movs	r3, #172	; 0xac
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	58d3      	ldr	r3, [r2, r3]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d00d      	beq.n	80088c2 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	23ac      	movs	r3, #172	; 0xac
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	58d3      	ldr	r3, [r2, r3]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	7c12      	ldrb	r2, [r2, #16]
 80088b4:	2108      	movs	r1, #8
 80088b6:	1879      	adds	r1, r7, r1
 80088b8:	0010      	movs	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	0003      	movs	r3, r0
 80088be:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088c0:	e05d      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	0011      	movs	r1, r2
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 fabd 	bl	8008e48 <USBD_CtlError>
            err++;
 80088ce:	210b      	movs	r1, #11
 80088d0:	187b      	adds	r3, r7, r1
 80088d2:	781a      	ldrb	r2, [r3, #0]
 80088d4:	187b      	adds	r3, r7, r1
 80088d6:	3201      	adds	r2, #1
 80088d8:	701a      	strb	r2, [r3, #0]
          break;
 80088da:	e050      	b.n	800897e <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	23ac      	movs	r3, #172	; 0xac
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	58d3      	ldr	r3, [r2, r3]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d00d      	beq.n	8008906 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	23ac      	movs	r3, #172	; 0xac
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	58d3      	ldr	r3, [r2, r3]
 80088f2:	695b      	ldr	r3, [r3, #20]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7c12      	ldrb	r2, [r2, #16]
 80088f8:	2108      	movs	r1, #8
 80088fa:	1879      	adds	r1, r7, r1
 80088fc:	0010      	movs	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	0003      	movs	r3, r0
 8008902:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008904:	e03b      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8008906:	683a      	ldr	r2, [r7, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	0011      	movs	r1, r2
 800890c:	0018      	movs	r0, r3
 800890e:	f000 fa9b 	bl	8008e48 <USBD_CtlError>
            err++;
 8008912:	210b      	movs	r1, #11
 8008914:	187b      	adds	r3, r7, r1
 8008916:	781a      	ldrb	r2, [r3, #0]
 8008918:	187b      	adds	r3, r7, r1
 800891a:	3201      	adds	r2, #1
 800891c:	701a      	strb	r2, [r3, #0]
          break;
 800891e:	e02e      	b.n	800897e <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	23ac      	movs	r3, #172	; 0xac
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	58d3      	ldr	r3, [r2, r3]
 8008928:	699b      	ldr	r3, [r3, #24]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d00d      	beq.n	800894a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	23ac      	movs	r3, #172	; 0xac
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	58d3      	ldr	r3, [r2, r3]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	2108      	movs	r1, #8
 800893e:	1879      	adds	r1, r7, r1
 8008940:	0010      	movs	r0, r2
 8008942:	4798      	blx	r3
 8008944:	0003      	movs	r3, r0
 8008946:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008948:	e019      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	0011      	movs	r1, r2
 8008950:	0018      	movs	r0, r3
 8008952:	f000 fa79 	bl	8008e48 <USBD_CtlError>
            err++;
 8008956:	210b      	movs	r1, #11
 8008958:	187b      	adds	r3, r7, r1
 800895a:	781a      	ldrb	r2, [r3, #0]
 800895c:	187b      	adds	r3, r7, r1
 800895e:	3201      	adds	r2, #1
 8008960:	701a      	strb	r2, [r3, #0]
          break;
 8008962:	e00c      	b.n	800897e <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008964:	683a      	ldr	r2, [r7, #0]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	0011      	movs	r1, r2
 800896a:	0018      	movs	r0, r3
 800896c:	f000 fa6c 	bl	8008e48 <USBD_CtlError>
          err++;
 8008970:	210b      	movs	r1, #11
 8008972:	187b      	adds	r3, r7, r1
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	187b      	adds	r3, r7, r1
 8008978:	3201      	adds	r2, #1
 800897a:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800897c:	e04b      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>
 800897e:	e04a      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	7c1b      	ldrb	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10b      	bne.n	80089a0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	23ad      	movs	r3, #173	; 0xad
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	58d3      	ldr	r3, [r2, r3]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008992:	2208      	movs	r2, #8
 8008994:	18ba      	adds	r2, r7, r2
 8008996:	0010      	movs	r0, r2
 8008998:	4798      	blx	r3
 800899a:	0003      	movs	r3, r0
 800899c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800899e:	e03a      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	0011      	movs	r1, r2
 80089a6:	0018      	movs	r0, r3
 80089a8:	f000 fa4e 	bl	8008e48 <USBD_CtlError>
        err++;
 80089ac:	210b      	movs	r1, #11
 80089ae:	187b      	adds	r3, r7, r1
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	187b      	adds	r3, r7, r1
 80089b4:	3201      	adds	r2, #1
 80089b6:	701a      	strb	r2, [r3, #0]
      break;
 80089b8:	e02d      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7c1b      	ldrb	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10f      	bne.n	80089e2 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	23ad      	movs	r3, #173	; 0xad
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	58d3      	ldr	r3, [r2, r3]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	2208      	movs	r2, #8
 80089ce:	18ba      	adds	r2, r7, r2
 80089d0:	0010      	movs	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	0003      	movs	r3, r0
 80089d6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3301      	adds	r3, #1
 80089dc:	2207      	movs	r2, #7
 80089de:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089e0:	e019      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80089e2:	683a      	ldr	r2, [r7, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	0011      	movs	r1, r2
 80089e8:	0018      	movs	r0, r3
 80089ea:	f000 fa2d 	bl	8008e48 <USBD_CtlError>
        err++;
 80089ee:	210b      	movs	r1, #11
 80089f0:	187b      	adds	r3, r7, r1
 80089f2:	781a      	ldrb	r2, [r3, #0]
 80089f4:	187b      	adds	r3, r7, r1
 80089f6:	3201      	adds	r2, #1
 80089f8:	701a      	strb	r2, [r3, #0]
      break;
 80089fa:	e00c      	b.n	8008a16 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	0011      	movs	r1, r2
 8008a02:	0018      	movs	r0, r3
 8008a04:	f000 fa20 	bl	8008e48 <USBD_CtlError>
      err++;
 8008a08:	210b      	movs	r1, #11
 8008a0a:	187b      	adds	r3, r7, r1
 8008a0c:	781a      	ldrb	r2, [r3, #0]
 8008a0e:	187b      	adds	r3, r7, r1
 8008a10:	3201      	adds	r2, #1
 8008a12:	701a      	strb	r2, [r3, #0]
      break;
 8008a14:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008a16:	230b      	movs	r3, #11
 8008a18:	18fb      	adds	r3, r7, r3
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d127      	bne.n	8008a70 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008a20:	2108      	movs	r1, #8
 8008a22:	187b      	adds	r3, r7, r1
 8008a24:	881b      	ldrh	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d019      	beq.n	8008a5e <USBD_GetDescriptor+0x342>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	88db      	ldrh	r3, [r3, #6]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d015      	beq.n	8008a5e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	88da      	ldrh	r2, [r3, #6]
 8008a36:	187b      	adds	r3, r7, r1
 8008a38:	881b      	ldrh	r3, [r3, #0]
 8008a3a:	1c18      	adds	r0, r3, #0
 8008a3c:	1c11      	adds	r1, r2, #0
 8008a3e:	b28a      	uxth	r2, r1
 8008a40:	b283      	uxth	r3, r0
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d900      	bls.n	8008a48 <USBD_GetDescriptor+0x32c>
 8008a46:	1c01      	adds	r1, r0, #0
 8008a48:	b28a      	uxth	r2, r1
 8008a4a:	2108      	movs	r1, #8
 8008a4c:	187b      	adds	r3, r7, r1
 8008a4e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a50:	187b      	adds	r3, r7, r1
 8008a52:	881a      	ldrh	r2, [r3, #0]
 8008a54:	68f9      	ldr	r1, [r7, #12]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f000 fa73 	bl	8008f44 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d105      	bne.n	8008a72 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	0018      	movs	r0, r3
 8008a6a:	f000 fad5 	bl	8009018 <USBD_CtlSendStatus>
 8008a6e:	e000      	b.n	8008a72 <USBD_GetDescriptor+0x356>
    return;
 8008a70:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008a72:	46bd      	mov	sp, r7
 8008a74:	b004      	add	sp, #16
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	0800a3d0 	.word	0x0800a3d0
 8008a7c:	0800a3f0 	.word	0x0800a3f0

08008a80 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008a80:	b590      	push	{r4, r7, lr}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	889b      	ldrh	r3, [r3, #4]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d13d      	bne.n	8008b0e <USBD_SetAddress+0x8e>
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	88db      	ldrh	r3, [r3, #6]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d139      	bne.n	8008b0e <USBD_SetAddress+0x8e>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8008aa0:	d835      	bhi.n	8008b0e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	885b      	ldrh	r3, [r3, #2]
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	230f      	movs	r3, #15
 8008aaa:	18fb      	adds	r3, r7, r3
 8008aac:	217f      	movs	r1, #127	; 0x7f
 8008aae:	400a      	ands	r2, r1
 8008ab0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	23a7      	movs	r3, #167	; 0xa7
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	5cd3      	ldrb	r3, [r2, r3]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d106      	bne.n	8008acc <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8008abe:	683a      	ldr	r2, [r7, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	0011      	movs	r1, r2
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f000 f9bf 	bl	8008e48 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aca:	e027      	b.n	8008b1c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	240f      	movs	r4, #15
 8008ad0:	193a      	adds	r2, r7, r4
 8008ad2:	4914      	ldr	r1, [pc, #80]	; (8008b24 <USBD_SetAddress+0xa4>)
 8008ad4:	7812      	ldrb	r2, [r2, #0]
 8008ad6:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008ad8:	193b      	adds	r3, r7, r4
 8008ada:	781a      	ldrb	r2, [r3, #0]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	0011      	movs	r1, r2
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	f000 fe85 	bl	80097f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	0018      	movs	r0, r3
 8008aea:	f000 fa95 	bl	8009018 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aee:	193b      	adds	r3, r7, r4
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	23a7      	movs	r3, #167	; 0xa7
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	2102      	movs	r1, #2
 8008afe:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b00:	e00c      	b.n	8008b1c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	23a7      	movs	r3, #167	; 0xa7
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	2101      	movs	r1, #1
 8008b0a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b0c:	e006      	b.n	8008b1c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	0011      	movs	r1, r2
 8008b14:	0018      	movs	r0, r3
 8008b16:	f000 f997 	bl	8008e48 <USBD_CtlError>
  }
}
 8008b1a:	46c0      	nop			; (mov r8, r8)
 8008b1c:	46c0      	nop			; (mov r8, r8)
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	b005      	add	sp, #20
 8008b22:	bd90      	pop	{r4, r7, pc}
 8008b24:	0000029e 	.word	0x0000029e

08008b28 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	885b      	ldrh	r3, [r3, #2]
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	4b4c      	ldr	r3, [pc, #304]	; (8008c6c <USBD_SetConfig+0x144>)
 8008b3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b3c:	4b4b      	ldr	r3, [pc, #300]	; (8008c6c <USBD_SetConfig+0x144>)
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d906      	bls.n	8008b52 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008b44:	683a      	ldr	r2, [r7, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	0011      	movs	r1, r2
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f000 f97c 	bl	8008e48 <USBD_CtlError>
 8008b50:	e088      	b.n	8008c64 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	23a7      	movs	r3, #167	; 0xa7
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	5cd3      	ldrb	r3, [r2, r3]
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d002      	beq.n	8008b64 <USBD_SetConfig+0x3c>
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d029      	beq.n	8008bb6 <USBD_SetConfig+0x8e>
 8008b62:	e071      	b.n	8008c48 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008b64:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <USBD_SetConfig+0x144>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d01f      	beq.n	8008bac <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008b6c:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <USBD_SetConfig+0x144>)
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	001a      	movs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	23a7      	movs	r3, #167	; 0xa7
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	2103      	movs	r1, #3
 8008b7e:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b80:	4b3a      	ldr	r3, [pc, #232]	; (8008c6c <USBD_SetConfig+0x144>)
 8008b82:	781a      	ldrb	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	0011      	movs	r1, r2
 8008b88:	0018      	movs	r0, r3
 8008b8a:	f7ff f8c5 	bl	8007d18 <USBD_SetClassConfig>
 8008b8e:	0003      	movs	r3, r0
 8008b90:	2b02      	cmp	r3, #2
 8008b92:	d106      	bne.n	8008ba2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	0011      	movs	r1, r2
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f000 f954 	bl	8008e48 <USBD_CtlError>
            return;
 8008ba0:	e060      	b.n	8008c64 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f000 fa37 	bl	8009018 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008baa:	e05b      	b.n	8008c64 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f000 fa32 	bl	8009018 <USBD_CtlSendStatus>
        break;
 8008bb4:	e056      	b.n	8008c64 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008bb6:	4b2d      	ldr	r3, [pc, #180]	; (8008c6c <USBD_SetConfig+0x144>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d115      	bne.n	8008bea <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	23a7      	movs	r3, #167	; 0xa7
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	2102      	movs	r1, #2
 8008bc6:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8008bc8:	4b28      	ldr	r3, [pc, #160]	; (8008c6c <USBD_SetConfig+0x144>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	001a      	movs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008bd2:	4b26      	ldr	r3, [pc, #152]	; (8008c6c <USBD_SetConfig+0x144>)
 8008bd4:	781a      	ldrb	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	0011      	movs	r1, r2
 8008bda:	0018      	movs	r0, r3
 8008bdc:	f7ff f8c3 	bl	8007d66 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	0018      	movs	r0, r3
 8008be4:	f000 fa18 	bl	8009018 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008be8:	e03c      	b.n	8008c64 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8008bea:	4b20      	ldr	r3, [pc, #128]	; (8008c6c <USBD_SetConfig+0x144>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	001a      	movs	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d022      	beq.n	8008c3e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	0011      	movs	r1, r2
 8008c02:	0018      	movs	r0, r3
 8008c04:	f7ff f8af 	bl	8007d66 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008c08:	4b18      	ldr	r3, [pc, #96]	; (8008c6c <USBD_SetConfig+0x144>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	001a      	movs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c12:	4b16      	ldr	r3, [pc, #88]	; (8008c6c <USBD_SetConfig+0x144>)
 8008c14:	781a      	ldrb	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	0011      	movs	r1, r2
 8008c1a:	0018      	movs	r0, r3
 8008c1c:	f7ff f87c 	bl	8007d18 <USBD_SetClassConfig>
 8008c20:	0003      	movs	r3, r0
 8008c22:	2b02      	cmp	r3, #2
 8008c24:	d106      	bne.n	8008c34 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	0011      	movs	r1, r2
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	f000 f90b 	bl	8008e48 <USBD_CtlError>
            return;
 8008c32:	e017      	b.n	8008c64 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	0018      	movs	r0, r3
 8008c38:	f000 f9ee 	bl	8009018 <USBD_CtlSendStatus>
        break;
 8008c3c:	e012      	b.n	8008c64 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	0018      	movs	r0, r3
 8008c42:	f000 f9e9 	bl	8009018 <USBD_CtlSendStatus>
        break;
 8008c46:	e00d      	b.n	8008c64 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	0011      	movs	r1, r2
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f000 f8fa 	bl	8008e48 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008c54:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <USBD_SetConfig+0x144>)
 8008c56:	781a      	ldrb	r2, [r3, #0]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	0011      	movs	r1, r2
 8008c5c:	0018      	movs	r0, r3
 8008c5e:	f7ff f882 	bl	8007d66 <USBD_ClrClassConfig>
        break;
 8008c62:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008c64:	46bd      	mov	sp, r7
 8008c66:	b002      	add	sp, #8
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	46c0      	nop			; (mov r8, r8)
 8008c6c:	2000021c 	.word	0x2000021c

08008c70 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
 8008c78:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	88db      	ldrh	r3, [r3, #6]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d006      	beq.n	8008c90 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	0011      	movs	r1, r2
 8008c88:	0018      	movs	r0, r3
 8008c8a:	f000 f8dd 	bl	8008e48 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c8e:	e026      	b.n	8008cde <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	23a7      	movs	r3, #167	; 0xa7
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	5cd3      	ldrb	r3, [r2, r3]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	dc02      	bgt.n	8008ca2 <USBD_GetConfig+0x32>
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	dc03      	bgt.n	8008ca8 <USBD_GetConfig+0x38>
 8008ca0:	e016      	b.n	8008cd0 <USBD_GetConfig+0x60>
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d00c      	beq.n	8008cc0 <USBD_GetConfig+0x50>
 8008ca6:	e013      	b.n	8008cd0 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	0019      	movs	r1, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	0018      	movs	r0, r3
 8008cba:	f000 f943 	bl	8008f44 <USBD_CtlSendData>
        break;
 8008cbe:	e00e      	b.n	8008cde <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	1d19      	adds	r1, r3, #4
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2201      	movs	r2, #1
 8008cc8:	0018      	movs	r0, r3
 8008cca:	f000 f93b 	bl	8008f44 <USBD_CtlSendData>
        break;
 8008cce:	e006      	b.n	8008cde <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	0011      	movs	r1, r2
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f000 f8b6 	bl	8008e48 <USBD_CtlError>
        break;
 8008cdc:	46c0      	nop			; (mov r8, r8)
}
 8008cde:	46c0      	nop			; (mov r8, r8)
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	b002      	add	sp, #8
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b082      	sub	sp, #8
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
 8008cee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	23a7      	movs	r3, #167	; 0xa7
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	5cd3      	ldrb	r3, [r2, r3]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d822      	bhi.n	8008d44 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	88db      	ldrh	r3, [r3, #6]
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d006      	beq.n	8008d14 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008d06:	683a      	ldr	r2, [r7, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	0011      	movs	r1, r2
 8008d0c:	0018      	movs	r0, r3
 8008d0e:	f000 f89b 	bl	8008e48 <USBD_CtlError>
        break;
 8008d12:	e01e      	b.n	8008d52 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	23a9      	movs	r3, #169	; 0xa9
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	58d3      	ldr	r3, [r2, r3]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d005      	beq.n	8008d32 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	330c      	adds	r3, #12
 8008d36:	0019      	movs	r1, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f000 f901 	bl	8008f44 <USBD_CtlSendData>
      break;
 8008d42:	e006      	b.n	8008d52 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	0011      	movs	r1, r2
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f000 f87c 	bl	8008e48 <USBD_CtlError>
      break;
 8008d50:	46c0      	nop			; (mov r8, r8)
  }
}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b002      	add	sp, #8
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b082      	sub	sp, #8
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
 8008d62:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	885b      	ldrh	r3, [r3, #2]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d108      	bne.n	8008d7e <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	23a9      	movs	r3, #169	; 0xa9
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	2101      	movs	r1, #1
 8008d74:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	0018      	movs	r0, r3
 8008d7a:	f000 f94d 	bl	8009018 <USBD_CtlSendStatus>
  }
}
 8008d7e:	46c0      	nop			; (mov r8, r8)
 8008d80:	46bd      	mov	sp, r7
 8008d82:	b002      	add	sp, #8
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
 8008d8e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	23a7      	movs	r3, #167	; 0xa7
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	5cd3      	ldrb	r3, [r2, r3]
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d80d      	bhi.n	8008dba <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	885b      	ldrh	r3, [r3, #2]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d110      	bne.n	8008dc8 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	23a9      	movs	r3, #169	; 0xa9
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	2100      	movs	r1, #0
 8008dae:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	0018      	movs	r0, r3
 8008db4:	f000 f930 	bl	8009018 <USBD_CtlSendStatus>
      }
      break;
 8008db8:	e006      	b.n	8008dc8 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8008dba:	683a      	ldr	r2, [r7, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	0011      	movs	r1, r2
 8008dc0:	0018      	movs	r0, r3
 8008dc2:	f000 f841 	bl	8008e48 <USBD_CtlError>
      break;
 8008dc6:	e000      	b.n	8008dca <USBD_ClrFeature+0x44>
      break;
 8008dc8:	46c0      	nop			; (mov r8, r8)
  }
}
 8008dca:	46c0      	nop			; (mov r8, r8)
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	b002      	add	sp, #8
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	781a      	ldrb	r2, [r3, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	785a      	ldrb	r2, [r3, #1]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	3302      	adds	r3, #2
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	3303      	adds	r3, #3
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	18d3      	adds	r3, r2, r3
 8008e02:	b29a      	uxth	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	3305      	adds	r3, #5
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	021b      	lsls	r3, r3, #8
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	18d3      	adds	r3, r2, r3
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	3306      	adds	r3, #6
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	3307      	adds	r3, #7
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	18d3      	adds	r3, r2, r3
 8008e3a:	b29a      	uxth	r2, r3
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	80da      	strh	r2, [r3, #6]

}
 8008e40:	46c0      	nop			; (mov r8, r8)
 8008e42:	46bd      	mov	sp, r7
 8008e44:	b002      	add	sp, #8
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2180      	movs	r1, #128	; 0x80
 8008e56:	0018      	movs	r0, r3
 8008e58:	f000 fc43 	bl	80096e2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2100      	movs	r1, #0
 8008e60:	0018      	movs	r0, r3
 8008e62:	f000 fc3e 	bl	80096e2 <USBD_LL_StallEP>
}
 8008e66:	46c0      	nop			; (mov r8, r8)
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	b002      	add	sp, #8
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b087      	sub	sp, #28
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e7a:	2417      	movs	r4, #23
 8008e7c:	193b      	adds	r3, r7, r4
 8008e7e:	2200      	movs	r2, #0
 8008e80:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d03c      	beq.n	8008f02 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f000 f83d 	bl	8008f0a <USBD_GetLen>
 8008e90:	0003      	movs	r3, r0
 8008e92:	3301      	adds	r3, #1
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	18db      	adds	r3, r3, r3
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e9e:	193b      	adds	r3, r7, r4
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	193a      	adds	r2, r7, r4
 8008ea4:	1c59      	adds	r1, r3, #1
 8008ea6:	7011      	strb	r1, [r2, #0]
 8008ea8:	001a      	movs	r2, r3
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	189b      	adds	r3, r3, r2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	7812      	ldrb	r2, [r2, #0]
 8008eb2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008eb4:	193b      	adds	r3, r7, r4
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	193a      	adds	r2, r7, r4
 8008eba:	1c59      	adds	r1, r3, #1
 8008ebc:	7011      	strb	r1, [r2, #0]
 8008ebe:	001a      	movs	r2, r3
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	189b      	adds	r3, r3, r2
 8008ec4:	2203      	movs	r2, #3
 8008ec6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008ec8:	e017      	b.n	8008efa <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	1c5a      	adds	r2, r3, #1
 8008ece:	60fa      	str	r2, [r7, #12]
 8008ed0:	2417      	movs	r4, #23
 8008ed2:	193a      	adds	r2, r7, r4
 8008ed4:	7812      	ldrb	r2, [r2, #0]
 8008ed6:	1939      	adds	r1, r7, r4
 8008ed8:	1c50      	adds	r0, r2, #1
 8008eda:	7008      	strb	r0, [r1, #0]
 8008edc:	0011      	movs	r1, r2
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	1852      	adds	r2, r2, r1
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ee6:	193b      	adds	r3, r7, r4
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	193a      	adds	r2, r7, r4
 8008eec:	1c59      	adds	r1, r3, #1
 8008eee:	7011      	strb	r1, [r2, #0]
 8008ef0:	001a      	movs	r2, r3
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	189b      	adds	r3, r3, r2
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e3      	bne.n	8008eca <USBD_GetString+0x5c>
    }
  }
}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	46bd      	mov	sp, r7
 8008f06:	b007      	add	sp, #28
 8008f08:	bd90      	pop	{r4, r7, pc}

08008f0a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	b084      	sub	sp, #16
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f12:	230f      	movs	r3, #15
 8008f14:	18fb      	adds	r3, r7, r3
 8008f16:	2200      	movs	r2, #0
 8008f18:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008f1a:	e008      	b.n	8008f2e <USBD_GetLen+0x24>
  {
    len++;
 8008f1c:	210f      	movs	r1, #15
 8008f1e:	187b      	adds	r3, r7, r1
 8008f20:	781a      	ldrb	r2, [r3, #0]
 8008f22:	187b      	adds	r3, r7, r1
 8008f24:	3201      	adds	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
    buf++;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f2      	bne.n	8008f1c <USBD_GetLen+0x12>
  }

  return len;
 8008f36:	230f      	movs	r3, #15
 8008f38:	18fb      	adds	r3, r7, r3
 8008f3a:	781b      	ldrb	r3, [r3, #0]
}
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	b004      	add	sp, #16
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	1dbb      	adds	r3, r7, #6
 8008f50:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	23a5      	movs	r3, #165	; 0xa5
 8008f56:	009b      	lsls	r3, r3, #2
 8008f58:	2102      	movs	r1, #2
 8008f5a:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008f5c:	1dbb      	adds	r3, r7, #6
 8008f5e:	881a      	ldrh	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f64:	1dbb      	adds	r3, r7, #6
 8008f66:	881a      	ldrh	r2, [r3, #0]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f6c:	1dbb      	adds	r3, r7, #6
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	2100      	movs	r1, #0
 8008f76:	f000 fc66 	bl	8009846 <USBD_LL_Transmit>

  return USBD_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	0018      	movs	r0, r3
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	b004      	add	sp, #16
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	1dbb      	adds	r3, r7, #6
 8008f90:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f92:	1dbb      	adds	r3, r7, #6
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	68ba      	ldr	r2, [r7, #8]
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	f000 fc53 	bl	8009846 <USBD_LL_Transmit>

  return USBD_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	b004      	add	sp, #16
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	1dbb      	adds	r3, r7, #6
 8008fb6:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	23a5      	movs	r3, #165	; 0xa5
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	2103      	movs	r1, #3
 8008fc0:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8008fc2:	1dbb      	adds	r3, r7, #6
 8008fc4:	8819      	ldrh	r1, [r3, #0]
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	23ae      	movs	r3, #174	; 0xae
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008fce:	1dbb      	adds	r3, r7, #6
 8008fd0:	8819      	ldrh	r1, [r3, #0]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	23b0      	movs	r3, #176	; 0xb0
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008fda:	1dbb      	adds	r3, r7, #6
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	68ba      	ldr	r2, [r7, #8]
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	2100      	movs	r1, #0
 8008fe4:	f000 fc66 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fe8:	2300      	movs	r3, #0
}
 8008fea:	0018      	movs	r0, r3
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b004      	add	sp, #16
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b084      	sub	sp, #16
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	60f8      	str	r0, [r7, #12]
 8008ffa:	60b9      	str	r1, [r7, #8]
 8008ffc:	1dbb      	adds	r3, r7, #6
 8008ffe:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009000:	1dbb      	adds	r3, r7, #6
 8009002:	881b      	ldrh	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	2100      	movs	r1, #0
 800900a:	f000 fc53 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	0018      	movs	r0, r3
 8009012:	46bd      	mov	sp, r7
 8009014:	b004      	add	sp, #16
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b082      	sub	sp, #8
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	23a5      	movs	r3, #165	; 0xa5
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	2104      	movs	r1, #4
 8009028:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	2300      	movs	r3, #0
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	f000 fc08 	bl	8009846 <USBD_LL_Transmit>

  return USBD_OK;
 8009036:	2300      	movs	r3, #0
}
 8009038:	0018      	movs	r0, r3
 800903a:	46bd      	mov	sp, r7
 800903c:	b002      	add	sp, #8
 800903e:	bd80      	pop	{r7, pc}

08009040 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	23a5      	movs	r3, #165	; 0xa5
 800904c:	009b      	lsls	r3, r3, #2
 800904e:	2105      	movs	r1, #5
 8009050:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	2300      	movs	r3, #0
 8009056:	2200      	movs	r2, #0
 8009058:	2100      	movs	r1, #0
 800905a:	f000 fc2b 	bl	80098b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800905e:	2300      	movs	r3, #0
}
 8009060:	0018      	movs	r0, r3
 8009062:	46bd      	mov	sp, r7
 8009064:	b002      	add	sp, #8
 8009066:	bd80      	pop	{r7, pc}

08009068 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800906c:	4914      	ldr	r1, [pc, #80]	; (80090c0 <MX_USB_DEVICE_Init+0x58>)
 800906e:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <MX_USB_DEVICE_Init+0x5c>)
 8009070:	2200      	movs	r2, #0
 8009072:	0018      	movs	r0, r3
 8009074:	f7fe fde9 	bl	8007c4a <USBD_Init>
 8009078:	1e03      	subs	r3, r0, #0
 800907a:	d001      	beq.n	8009080 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800907c:	f7f7 feba 	bl	8000df4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009080:	4a11      	ldr	r2, [pc, #68]	; (80090c8 <MX_USB_DEVICE_Init+0x60>)
 8009082:	4b10      	ldr	r3, [pc, #64]	; (80090c4 <MX_USB_DEVICE_Init+0x5c>)
 8009084:	0011      	movs	r1, r2
 8009086:	0018      	movs	r0, r3
 8009088:	f7fe fe10 	bl	8007cac <USBD_RegisterClass>
 800908c:	1e03      	subs	r3, r0, #0
 800908e:	d001      	beq.n	8009094 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8009090:	f7f7 feb0 	bl	8000df4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009094:	4a0d      	ldr	r2, [pc, #52]	; (80090cc <MX_USB_DEVICE_Init+0x64>)
 8009096:	4b0b      	ldr	r3, [pc, #44]	; (80090c4 <MX_USB_DEVICE_Init+0x5c>)
 8009098:	0011      	movs	r1, r2
 800909a:	0018      	movs	r0, r3
 800909c:	f7fe fdba 	bl	8007c14 <USBD_CUSTOM_HID_RegisterInterface>
 80090a0:	1e03      	subs	r3, r0, #0
 80090a2:	d001      	beq.n	80090a8 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80090a4:	f7f7 fea6 	bl	8000df4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090a8:	4b06      	ldr	r3, [pc, #24]	; (80090c4 <MX_USB_DEVICE_Init+0x5c>)
 80090aa:	0018      	movs	r0, r3
 80090ac:	f7fe fe1e 	bl	8007cec <USBD_Start>
 80090b0:	1e03      	subs	r3, r0, #0
 80090b2:	d001      	beq.n	80090b8 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80090b4:	f7f7 fe9e 	bl	8000df4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090b8:	46c0      	nop			; (mov r8, r8)
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	20000148 	.word	0x20000148
 80090c4:	20000338 	.word	0x20000338
 80090c8:	2000000c 	.word	0x2000000c
 80090cc:	20000138 	.word	0x20000138

080090d0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090d6:	0018      	movs	r0, r3
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80090e0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090e2:	0018      	movs	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	0002      	movs	r2, r0
 80090f0:	1dfb      	adds	r3, r7, #7
 80090f2:	701a      	strb	r2, [r3, #0]
 80090f4:	1dbb      	adds	r3, r7, #6
 80090f6:	1c0a      	adds	r2, r1, #0
 80090f8:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80090fa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80090fc:	0018      	movs	r0, r3
 80090fe:	46bd      	mov	sp, r7
 8009100:	b002      	add	sp, #8
 8009102:	bd80      	pop	{r7, pc}

08009104 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b082      	sub	sp, #8
 8009108:	af00      	add	r7, sp, #0
 800910a:	0002      	movs	r2, r0
 800910c:	6039      	str	r1, [r7, #0]
 800910e:	1dfb      	adds	r3, r7, #7
 8009110:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	2212      	movs	r2, #18
 8009116:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009118:	4b02      	ldr	r3, [pc, #8]	; (8009124 <USBD_FS_DeviceDescriptor+0x20>)
}
 800911a:	0018      	movs	r0, r3
 800911c:	46bd      	mov	sp, r7
 800911e:	b002      	add	sp, #8
 8009120:	bd80      	pop	{r7, pc}
 8009122:	46c0      	nop			; (mov r8, r8)
 8009124:	20000164 	.word	0x20000164

08009128 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	0002      	movs	r2, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	1dfb      	adds	r3, r7, #7
 8009134:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	2204      	movs	r2, #4
 800913a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800913e:	0018      	movs	r0, r3
 8009140:	46bd      	mov	sp, r7
 8009142:	b002      	add	sp, #8
 8009144:	bd80      	pop	{r7, pc}
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	20000178 	.word	0x20000178

0800914c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	0002      	movs	r2, r0
 8009154:	6039      	str	r1, [r7, #0]
 8009156:	1dfb      	adds	r3, r7, #7
 8009158:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800915a:	1dfb      	adds	r3, r7, #7
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d106      	bne.n	8009170 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4908      	ldr	r1, [pc, #32]	; (8009188 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009166:	4b09      	ldr	r3, [pc, #36]	; (800918c <USBD_FS_ProductStrDescriptor+0x40>)
 8009168:	0018      	movs	r0, r3
 800916a:	f7ff fe80 	bl	8008e6e <USBD_GetString>
 800916e:	e005      	b.n	800917c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009170:	683a      	ldr	r2, [r7, #0]
 8009172:	4905      	ldr	r1, [pc, #20]	; (8009188 <USBD_FS_ProductStrDescriptor+0x3c>)
 8009174:	4b05      	ldr	r3, [pc, #20]	; (800918c <USBD_FS_ProductStrDescriptor+0x40>)
 8009176:	0018      	movs	r0, r3
 8009178:	f7ff fe79 	bl	8008e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800917e:	0018      	movs	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	b002      	add	sp, #8
 8009184:	bd80      	pop	{r7, pc}
 8009186:	46c0      	nop			; (mov r8, r8)
 8009188:	200005fc 	.word	0x200005fc
 800918c:	0800a2b4 	.word	0x0800a2b4

08009190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	0002      	movs	r2, r0
 8009198:	6039      	str	r1, [r7, #0]
 800919a:	1dfb      	adds	r3, r7, #7
 800919c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	4904      	ldr	r1, [pc, #16]	; (80091b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091a2:	4b05      	ldr	r3, [pc, #20]	; (80091b8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80091a4:	0018      	movs	r0, r3
 80091a6:	f7ff fe62 	bl	8008e6e <USBD_GetString>
  return USBD_StrDesc;
 80091aa:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80091ac:	0018      	movs	r0, r3
 80091ae:	46bd      	mov	sp, r7
 80091b0:	b002      	add	sp, #8
 80091b2:	bd80      	pop	{r7, pc}
 80091b4:	200005fc 	.word	0x200005fc
 80091b8:	0800a2cc 	.word	0x0800a2cc

080091bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	0002      	movs	r2, r0
 80091c4:	6039      	str	r1, [r7, #0]
 80091c6:	1dfb      	adds	r3, r7, #7
 80091c8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	221a      	movs	r2, #26
 80091ce:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091d0:	f000 f84c 	bl	800926c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091d4:	4b02      	ldr	r3, [pc, #8]	; (80091e0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80091d6:	0018      	movs	r0, r3
 80091d8:	46bd      	mov	sp, r7
 80091da:	b002      	add	sp, #8
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	2000017c 	.word	0x2000017c

080091e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	0002      	movs	r2, r0
 80091ec:	6039      	str	r1, [r7, #0]
 80091ee:	1dfb      	adds	r3, r7, #7
 80091f0:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80091f2:	1dfb      	adds	r3, r7, #7
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d106      	bne.n	8009208 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	4908      	ldr	r1, [pc, #32]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x3c>)
 80091fe:	4b09      	ldr	r3, [pc, #36]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x40>)
 8009200:	0018      	movs	r0, r3
 8009202:	f7ff fe34 	bl	8008e6e <USBD_GetString>
 8009206:	e005      	b.n	8009214 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009208:	683a      	ldr	r2, [r7, #0]
 800920a:	4905      	ldr	r1, [pc, #20]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x40>)
 800920e:	0018      	movs	r0, r3
 8009210:	f7ff fe2d 	bl	8008e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	; (8009220 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8009216:	0018      	movs	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	b002      	add	sp, #8
 800921c:	bd80      	pop	{r7, pc}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	200005fc 	.word	0x200005fc
 8009224:	0800a2e0 	.word	0x0800a2e0

08009228 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	0002      	movs	r2, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	1dfb      	adds	r3, r7, #7
 8009234:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8009236:	1dfb      	adds	r3, r7, #7
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d106      	bne.n	800924c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4908      	ldr	r1, [pc, #32]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009242:	4b09      	ldr	r3, [pc, #36]	; (8009268 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009244:	0018      	movs	r0, r3
 8009246:	f7ff fe12 	bl	8008e6e <USBD_GetString>
 800924a:	e005      	b.n	8009258 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	4905      	ldr	r1, [pc, #20]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8009250:	4b05      	ldr	r3, [pc, #20]	; (8009268 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8009252:	0018      	movs	r0, r3
 8009254:	f7ff fe0b 	bl	8008e6e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009258:	4b02      	ldr	r3, [pc, #8]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800925a:	0018      	movs	r0, r3
 800925c:	46bd      	mov	sp, r7
 800925e:	b002      	add	sp, #8
 8009260:	bd80      	pop	{r7, pc}
 8009262:	46c0      	nop			; (mov r8, r8)
 8009264:	200005fc 	.word	0x200005fc
 8009268:	0800a2f4 	.word	0x0800a2f4

0800926c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009272:	4b10      	ldr	r3, [pc, #64]	; (80092b4 <Get_SerialNum+0x48>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009278:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <Get_SerialNum+0x4c>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800927e:	4b0f      	ldr	r3, [pc, #60]	; (80092bc <Get_SerialNum+0x50>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	18d3      	adds	r3, r2, r3
 800928a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00b      	beq.n	80092aa <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009292:	490b      	ldr	r1, [pc, #44]	; (80092c0 <Get_SerialNum+0x54>)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2208      	movs	r2, #8
 8009298:	0018      	movs	r0, r3
 800929a:	f000 f815 	bl	80092c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800929e:	4909      	ldr	r1, [pc, #36]	; (80092c4 <Get_SerialNum+0x58>)
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2204      	movs	r2, #4
 80092a4:	0018      	movs	r0, r3
 80092a6:	f000 f80f 	bl	80092c8 <IntToUnicode>
  }
}
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	46bd      	mov	sp, r7
 80092ae:	b004      	add	sp, #16
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	46c0      	nop			; (mov r8, r8)
 80092b4:	1ff80050 	.word	0x1ff80050
 80092b8:	1ff80054 	.word	0x1ff80054
 80092bc:	1ff80058 	.word	0x1ff80058
 80092c0:	2000017e 	.word	0x2000017e
 80092c4:	2000018e 	.word	0x2000018e

080092c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b086      	sub	sp, #24
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	1dfb      	adds	r3, r7, #7
 80092d4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80092d6:	2117      	movs	r1, #23
 80092d8:	187b      	adds	r3, r7, r1
 80092da:	2200      	movs	r2, #0
 80092dc:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80092de:	187b      	adds	r3, r7, r1
 80092e0:	2200      	movs	r2, #0
 80092e2:	701a      	strb	r2, [r3, #0]
 80092e4:	e02f      	b.n	8009346 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	0f1b      	lsrs	r3, r3, #28
 80092ea:	2b09      	cmp	r3, #9
 80092ec:	d80d      	bhi.n	800930a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	0f1b      	lsrs	r3, r3, #28
 80092f2:	b2da      	uxtb	r2, r3
 80092f4:	2317      	movs	r3, #23
 80092f6:	18fb      	adds	r3, r7, r3
 80092f8:	781b      	ldrb	r3, [r3, #0]
 80092fa:	005b      	lsls	r3, r3, #1
 80092fc:	0019      	movs	r1, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	185b      	adds	r3, r3, r1
 8009302:	3230      	adds	r2, #48	; 0x30
 8009304:	b2d2      	uxtb	r2, r2
 8009306:	701a      	strb	r2, [r3, #0]
 8009308:	e00c      	b.n	8009324 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	0f1b      	lsrs	r3, r3, #28
 800930e:	b2da      	uxtb	r2, r3
 8009310:	2317      	movs	r3, #23
 8009312:	18fb      	adds	r3, r7, r3
 8009314:	781b      	ldrb	r3, [r3, #0]
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	0019      	movs	r1, r3
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	185b      	adds	r3, r3, r1
 800931e:	3237      	adds	r2, #55	; 0x37
 8009320:	b2d2      	uxtb	r2, r2
 8009322:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	011b      	lsls	r3, r3, #4
 8009328:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800932a:	2117      	movs	r1, #23
 800932c:	187b      	adds	r3, r7, r1
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	005b      	lsls	r3, r3, #1
 8009332:	3301      	adds	r3, #1
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	18d3      	adds	r3, r2, r3
 8009338:	2200      	movs	r2, #0
 800933a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800933c:	187b      	adds	r3, r7, r1
 800933e:	781a      	ldrb	r2, [r3, #0]
 8009340:	187b      	adds	r3, r7, r1
 8009342:	3201      	adds	r2, #1
 8009344:	701a      	strb	r2, [r3, #0]
 8009346:	2317      	movs	r3, #23
 8009348:	18fa      	adds	r2, r7, r3
 800934a:	1dfb      	adds	r3, r7, #7
 800934c:	7812      	ldrb	r2, [r2, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d3c8      	bcc.n	80092e6 <IntToUnicode+0x1e>
  }
}
 8009354:	46c0      	nop			; (mov r8, r8)
 8009356:	46c0      	nop			; (mov r8, r8)
 8009358:	46bd      	mov	sp, r7
 800935a:	b006      	add	sp, #24
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a0a      	ldr	r2, [pc, #40]	; (8009398 <HAL_PCD_MspInit+0x38>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d10e      	bne.n	8009390 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009372:	4b0a      	ldr	r3, [pc, #40]	; (800939c <HAL_PCD_MspInit+0x3c>)
 8009374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009376:	4b09      	ldr	r3, [pc, #36]	; (800939c <HAL_PCD_MspInit+0x3c>)
 8009378:	2180      	movs	r1, #128	; 0x80
 800937a:	0409      	lsls	r1, r1, #16
 800937c:	430a      	orrs	r2, r1
 800937e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8009380:	2200      	movs	r2, #0
 8009382:	2100      	movs	r1, #0
 8009384:	201f      	movs	r0, #31
 8009386:	f7f8 fcc3 	bl	8001d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800938a:	201f      	movs	r0, #31
 800938c:	f7f8 fcd5 	bl	8001d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009390:	46c0      	nop			; (mov r8, r8)
 8009392:	46bd      	mov	sp, r7
 8009394:	b002      	add	sp, #8
 8009396:	bd80      	pop	{r7, pc}
 8009398:	40005c00 	.word	0x40005c00
 800939c:	40021000 	.word	0x40021000

080093a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	23bc      	movs	r3, #188	; 0xbc
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	58d2      	ldr	r2, [r2, r3]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	21ac      	movs	r1, #172	; 0xac
 80093b4:	0089      	lsls	r1, r1, #2
 80093b6:	468c      	mov	ip, r1
 80093b8:	4463      	add	r3, ip
 80093ba:	0019      	movs	r1, r3
 80093bc:	0010      	movs	r0, r2
 80093be:	f7fe fce9 	bl	8007d94 <USBD_LL_SetupStage>
}
 80093c2:	46c0      	nop			; (mov r8, r8)
 80093c4:	46bd      	mov	sp, r7
 80093c6:	b002      	add	sp, #8
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ca:	b590      	push	{r4, r7, lr}
 80093cc:	b083      	sub	sp, #12
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
 80093d2:	000a      	movs	r2, r1
 80093d4:	1cfb      	adds	r3, r7, #3
 80093d6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	23bc      	movs	r3, #188	; 0xbc
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	58d4      	ldr	r4, [r2, r3]
 80093e0:	1cfb      	adds	r3, r7, #3
 80093e2:	781a      	ldrb	r2, [r3, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	23be      	movs	r3, #190	; 0xbe
 80093e8:	0059      	lsls	r1, r3, #1
 80093ea:	0013      	movs	r3, r2
 80093ec:	009b      	lsls	r3, r3, #2
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	00db      	lsls	r3, r3, #3
 80093f2:	18c3      	adds	r3, r0, r3
 80093f4:	185b      	adds	r3, r3, r1
 80093f6:	681a      	ldr	r2, [r3, #0]
 80093f8:	1cfb      	adds	r3, r7, #3
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	0019      	movs	r1, r3
 80093fe:	0020      	movs	r0, r4
 8009400:	f7fe fd26 	bl	8007e50 <USBD_LL_DataOutStage>
}
 8009404:	46c0      	nop			; (mov r8, r8)
 8009406:	46bd      	mov	sp, r7
 8009408:	b003      	add	sp, #12
 800940a:	bd90      	pop	{r4, r7, pc}

0800940c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	000a      	movs	r2, r1
 8009416:	1cfb      	adds	r3, r7, #3
 8009418:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	23bc      	movs	r3, #188	; 0xbc
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	58d0      	ldr	r0, [r2, r3]
 8009422:	1cfb      	adds	r3, r7, #3
 8009424:	781a      	ldrb	r2, [r3, #0]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	0013      	movs	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	189b      	adds	r3, r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	18cb      	adds	r3, r1, r3
 8009432:	333c      	adds	r3, #60	; 0x3c
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	1cfb      	adds	r3, r7, #3
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	0019      	movs	r1, r3
 800943c:	f7fe fd8a 	bl	8007f54 <USBD_LL_DataInStage>
}
 8009440:	46c0      	nop			; (mov r8, r8)
 8009442:	46bd      	mov	sp, r7
 8009444:	b002      	add	sp, #8
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009450:	687a      	ldr	r2, [r7, #4]
 8009452:	23bc      	movs	r3, #188	; 0xbc
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	58d3      	ldr	r3, [r2, r3]
 8009458:	0018      	movs	r0, r3
 800945a:	f7fe fec1 	bl	80081e0 <USBD_LL_SOF>
}
 800945e:	46c0      	nop			; (mov r8, r8)
 8009460:	46bd      	mov	sp, r7
 8009462:	b002      	add	sp, #8
 8009464:	bd80      	pop	{r7, pc}

08009466 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800946e:	230f      	movs	r3, #15
 8009470:	18fb      	adds	r3, r7, r3
 8009472:	2201      	movs	r2, #1
 8009474:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b02      	cmp	r3, #2
 800947c:	d001      	beq.n	8009482 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800947e:	f7f7 fcb9 	bl	8000df4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	23bc      	movs	r3, #188	; 0xbc
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	58d2      	ldr	r2, [r2, r3]
 800948a:	230f      	movs	r3, #15
 800948c:	18fb      	adds	r3, r7, r3
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	0019      	movs	r1, r3
 8009492:	0010      	movs	r0, r2
 8009494:	f7fe fe63 	bl	800815e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	23bc      	movs	r3, #188	; 0xbc
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	58d3      	ldr	r3, [r2, r3]
 80094a0:	0018      	movs	r0, r3
 80094a2:	f7fe fe14 	bl	80080ce <USBD_LL_Reset>
}
 80094a6:	46c0      	nop			; (mov r8, r8)
 80094a8:	46bd      	mov	sp, r7
 80094aa:	b004      	add	sp, #16
 80094ac:	bd80      	pop	{r7, pc}
	...

080094b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b082      	sub	sp, #8
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	23bc      	movs	r3, #188	; 0xbc
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	58d3      	ldr	r3, [r2, r3]
 80094c0:	0018      	movs	r0, r3
 80094c2:	f7fe fe5d 	bl	8008180 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d005      	beq.n	80094da <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094ce:	4b05      	ldr	r3, [pc, #20]	; (80094e4 <HAL_PCD_SuspendCallback+0x34>)
 80094d0:	691a      	ldr	r2, [r3, #16]
 80094d2:	4b04      	ldr	r3, [pc, #16]	; (80094e4 <HAL_PCD_SuspendCallback+0x34>)
 80094d4:	2106      	movs	r1, #6
 80094d6:	430a      	orrs	r2, r1
 80094d8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	46bd      	mov	sp, r7
 80094de:	b002      	add	sp, #8
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	46c0      	nop			; (mov r8, r8)
 80094e4:	e000ed00 	.word	0xe000ed00

080094e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d007      	beq.n	8009508 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094f8:	4b09      	ldr	r3, [pc, #36]	; (8009520 <HAL_PCD_ResumeCallback+0x38>)
 80094fa:	691a      	ldr	r2, [r3, #16]
 80094fc:	4b08      	ldr	r3, [pc, #32]	; (8009520 <HAL_PCD_ResumeCallback+0x38>)
 80094fe:	2106      	movs	r1, #6
 8009500:	438a      	bics	r2, r1
 8009502:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8009504:	f000 fa0d 	bl	8009922 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	23bc      	movs	r3, #188	; 0xbc
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	58d3      	ldr	r3, [r2, r3]
 8009510:	0018      	movs	r0, r3
 8009512:	f7fe fe4d 	bl	80081b0 <USBD_LL_Resume>
}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	46bd      	mov	sp, r7
 800951a:	b002      	add	sp, #8
 800951c:	bd80      	pop	{r7, pc}
 800951e:	46c0      	nop			; (mov r8, r8)
 8009520:	e000ed00 	.word	0xe000ed00

08009524 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800952c:	4a27      	ldr	r2, [pc, #156]	; (80095cc <USBD_LL_Init+0xa8>)
 800952e:	23bc      	movs	r3, #188	; 0xbc
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	6879      	ldr	r1, [r7, #4]
 8009534:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	23b0      	movs	r3, #176	; 0xb0
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	4923      	ldr	r1, [pc, #140]	; (80095cc <USBD_LL_Init+0xa8>)
 800953e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8009540:	4b22      	ldr	r3, [pc, #136]	; (80095cc <USBD_LL_Init+0xa8>)
 8009542:	4a23      	ldr	r2, [pc, #140]	; (80095d0 <USBD_LL_Init+0xac>)
 8009544:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009546:	4b21      	ldr	r3, [pc, #132]	; (80095cc <USBD_LL_Init+0xa8>)
 8009548:	2208      	movs	r2, #8
 800954a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800954c:	4b1f      	ldr	r3, [pc, #124]	; (80095cc <USBD_LL_Init+0xa8>)
 800954e:	2202      	movs	r2, #2
 8009550:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009552:	4b1e      	ldr	r3, [pc, #120]	; (80095cc <USBD_LL_Init+0xa8>)
 8009554:	2202      	movs	r2, #2
 8009556:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009558:	4b1c      	ldr	r3, [pc, #112]	; (80095cc <USBD_LL_Init+0xa8>)
 800955a:	2200      	movs	r2, #0
 800955c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800955e:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <USBD_LL_Init+0xa8>)
 8009560:	2200      	movs	r2, #0
 8009562:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009564:	4b19      	ldr	r3, [pc, #100]	; (80095cc <USBD_LL_Init+0xa8>)
 8009566:	2200      	movs	r2, #0
 8009568:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800956a:	4b18      	ldr	r3, [pc, #96]	; (80095cc <USBD_LL_Init+0xa8>)
 800956c:	0018      	movs	r0, r3
 800956e:	f7f8 fdb9 	bl	80020e4 <HAL_PCD_Init>
 8009572:	1e03      	subs	r3, r0, #0
 8009574:	d001      	beq.n	800957a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8009576:	f7f7 fc3d 	bl	8000df4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	23b0      	movs	r3, #176	; 0xb0
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	58d0      	ldr	r0, [r2, r3]
 8009582:	2318      	movs	r3, #24
 8009584:	2200      	movs	r2, #0
 8009586:	2100      	movs	r1, #0
 8009588:	f7fa fb82 	bl	8003c90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	23b0      	movs	r3, #176	; 0xb0
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	58d0      	ldr	r0, [r2, r3]
 8009594:	2358      	movs	r3, #88	; 0x58
 8009596:	2200      	movs	r2, #0
 8009598:	2180      	movs	r1, #128	; 0x80
 800959a:	f7fa fb79 	bl	8003c90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	23b0      	movs	r3, #176	; 0xb0
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	58d0      	ldr	r0, [r2, r3]
 80095a6:	2398      	movs	r3, #152	; 0x98
 80095a8:	2200      	movs	r2, #0
 80095aa:	2181      	movs	r1, #129	; 0x81
 80095ac:	f7fa fb70 	bl	8003c90 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	23b0      	movs	r3, #176	; 0xb0
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	58d0      	ldr	r0, [r2, r3]
 80095b8:	23d8      	movs	r3, #216	; 0xd8
 80095ba:	2200      	movs	r2, #0
 80095bc:	2101      	movs	r1, #1
 80095be:	f7fa fb67 	bl	8003c90 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	0018      	movs	r0, r3
 80095c6:	46bd      	mov	sp, r7
 80095c8:	b002      	add	sp, #8
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	200007fc 	.word	0x200007fc
 80095d0:	40005c00 	.word	0x40005c00

080095d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095dc:	210f      	movs	r1, #15
 80095de:	187b      	adds	r3, r7, r1
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e4:	260e      	movs	r6, #14
 80095e6:	19bb      	adds	r3, r7, r6
 80095e8:	2200      	movs	r2, #0
 80095ea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	23b0      	movs	r3, #176	; 0xb0
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	58d3      	ldr	r3, [r2, r3]
 80095f4:	000d      	movs	r5, r1
 80095f6:	187c      	adds	r4, r7, r1
 80095f8:	0018      	movs	r0, r3
 80095fa:	f7f8 fe83 	bl	8002304 <HAL_PCD_Start>
 80095fe:	0003      	movs	r3, r0
 8009600:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009602:	19bc      	adds	r4, r7, r6
 8009604:	197b      	adds	r3, r7, r5
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	0018      	movs	r0, r3
 800960a:	f000 f991 	bl	8009930 <USBD_Get_USB_Status>
 800960e:	0003      	movs	r3, r0
 8009610:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009612:	19bb      	adds	r3, r7, r6
 8009614:	781b      	ldrb	r3, [r3, #0]
}
 8009616:	0018      	movs	r0, r3
 8009618:	46bd      	mov	sp, r7
 800961a:	b005      	add	sp, #20
 800961c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800961e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800961e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	000c      	movs	r4, r1
 8009628:	0010      	movs	r0, r2
 800962a:	0019      	movs	r1, r3
 800962c:	1cfb      	adds	r3, r7, #3
 800962e:	1c22      	adds	r2, r4, #0
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	1cbb      	adds	r3, r7, #2
 8009634:	1c02      	adds	r2, r0, #0
 8009636:	701a      	strb	r2, [r3, #0]
 8009638:	003b      	movs	r3, r7
 800963a:	1c0a      	adds	r2, r1, #0
 800963c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800963e:	260f      	movs	r6, #15
 8009640:	19bb      	adds	r3, r7, r6
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009646:	250e      	movs	r5, #14
 8009648:	197b      	adds	r3, r7, r5
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	23b0      	movs	r3, #176	; 0xb0
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	58d0      	ldr	r0, [r2, r3]
 8009656:	19bc      	adds	r4, r7, r6
 8009658:	1cbb      	adds	r3, r7, #2
 800965a:	781d      	ldrb	r5, [r3, #0]
 800965c:	003b      	movs	r3, r7
 800965e:	881a      	ldrh	r2, [r3, #0]
 8009660:	1cfb      	adds	r3, r7, #3
 8009662:	7819      	ldrb	r1, [r3, #0]
 8009664:	002b      	movs	r3, r5
 8009666:	f7f9 f81a 	bl	800269e <HAL_PCD_EP_Open>
 800966a:	0003      	movs	r3, r0
 800966c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800966e:	250e      	movs	r5, #14
 8009670:	197c      	adds	r4, r7, r5
 8009672:	19bb      	adds	r3, r7, r6
 8009674:	781b      	ldrb	r3, [r3, #0]
 8009676:	0018      	movs	r0, r3
 8009678:	f000 f95a 	bl	8009930 <USBD_Get_USB_Status>
 800967c:	0003      	movs	r3, r0
 800967e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009680:	197b      	adds	r3, r7, r5
 8009682:	781b      	ldrb	r3, [r3, #0]
}
 8009684:	0018      	movs	r0, r3
 8009686:	46bd      	mov	sp, r7
 8009688:	b005      	add	sp, #20
 800968a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800968c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800968c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	000a      	movs	r2, r1
 8009696:	1cfb      	adds	r3, r7, #3
 8009698:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800969a:	210f      	movs	r1, #15
 800969c:	187b      	adds	r3, r7, r1
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a2:	260e      	movs	r6, #14
 80096a4:	19bb      	adds	r3, r7, r6
 80096a6:	2200      	movs	r2, #0
 80096a8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	23b0      	movs	r3, #176	; 0xb0
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	58d2      	ldr	r2, [r2, r3]
 80096b2:	000d      	movs	r5, r1
 80096b4:	187c      	adds	r4, r7, r1
 80096b6:	1cfb      	adds	r3, r7, #3
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	0019      	movs	r1, r3
 80096bc:	0010      	movs	r0, r2
 80096be:	f7f9 f866 	bl	800278e <HAL_PCD_EP_Close>
 80096c2:	0003      	movs	r3, r0
 80096c4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096c6:	19bc      	adds	r4, r7, r6
 80096c8:	197b      	adds	r3, r7, r5
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	0018      	movs	r0, r3
 80096ce:	f000 f92f 	bl	8009930 <USBD_Get_USB_Status>
 80096d2:	0003      	movs	r3, r0
 80096d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80096d6:	19bb      	adds	r3, r7, r6
 80096d8:	781b      	ldrb	r3, [r3, #0]
}
 80096da:	0018      	movs	r0, r3
 80096dc:	46bd      	mov	sp, r7
 80096de:	b005      	add	sp, #20
 80096e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080096e2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096e4:	b085      	sub	sp, #20
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
 80096ea:	000a      	movs	r2, r1
 80096ec:	1cfb      	adds	r3, r7, #3
 80096ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096f0:	210f      	movs	r1, #15
 80096f2:	187b      	adds	r3, r7, r1
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096f8:	260e      	movs	r6, #14
 80096fa:	19bb      	adds	r3, r7, r6
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	23b0      	movs	r3, #176	; 0xb0
 8009704:	009b      	lsls	r3, r3, #2
 8009706:	58d2      	ldr	r2, [r2, r3]
 8009708:	000d      	movs	r5, r1
 800970a:	187c      	adds	r4, r7, r1
 800970c:	1cfb      	adds	r3, r7, #3
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	0019      	movs	r1, r3
 8009712:	0010      	movs	r0, r2
 8009714:	f7f9 f919 	bl	800294a <HAL_PCD_EP_SetStall>
 8009718:	0003      	movs	r3, r0
 800971a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800971c:	19bc      	adds	r4, r7, r6
 800971e:	197b      	adds	r3, r7, r5
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	0018      	movs	r0, r3
 8009724:	f000 f904 	bl	8009930 <USBD_Get_USB_Status>
 8009728:	0003      	movs	r3, r0
 800972a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800972c:	19bb      	adds	r3, r7, r6
 800972e:	781b      	ldrb	r3, [r3, #0]
}
 8009730:	0018      	movs	r0, r3
 8009732:	46bd      	mov	sp, r7
 8009734:	b005      	add	sp, #20
 8009736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009738 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	b085      	sub	sp, #20
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	000a      	movs	r2, r1
 8009742:	1cfb      	adds	r3, r7, #3
 8009744:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009746:	210f      	movs	r1, #15
 8009748:	187b      	adds	r3, r7, r1
 800974a:	2200      	movs	r2, #0
 800974c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800974e:	260e      	movs	r6, #14
 8009750:	19bb      	adds	r3, r7, r6
 8009752:	2200      	movs	r2, #0
 8009754:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	23b0      	movs	r3, #176	; 0xb0
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	58d2      	ldr	r2, [r2, r3]
 800975e:	000d      	movs	r5, r1
 8009760:	187c      	adds	r4, r7, r1
 8009762:	1cfb      	adds	r3, r7, #3
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	0019      	movs	r1, r3
 8009768:	0010      	movs	r0, r2
 800976a:	f7f9 f94a 	bl	8002a02 <HAL_PCD_EP_ClrStall>
 800976e:	0003      	movs	r3, r0
 8009770:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009772:	19bc      	adds	r4, r7, r6
 8009774:	197b      	adds	r3, r7, r5
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	0018      	movs	r0, r3
 800977a:	f000 f8d9 	bl	8009930 <USBD_Get_USB_Status>
 800977e:	0003      	movs	r3, r0
 8009780:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009782:	19bb      	adds	r3, r7, r6
 8009784:	781b      	ldrb	r3, [r3, #0]
}
 8009786:	0018      	movs	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	b005      	add	sp, #20
 800978c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800978e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	000a      	movs	r2, r1
 8009798:	1cfb      	adds	r3, r7, #3
 800979a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	23b0      	movs	r3, #176	; 0xb0
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	58d3      	ldr	r3, [r2, r3]
 80097a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a6:	1cfb      	adds	r3, r7, #3
 80097a8:	781b      	ldrb	r3, [r3, #0]
 80097aa:	b25b      	sxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	da0d      	bge.n	80097cc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097b0:	1cfb      	adds	r3, r7, #3
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	227f      	movs	r2, #127	; 0x7f
 80097b6:	4013      	ands	r3, r2
 80097b8:	68f9      	ldr	r1, [r7, #12]
 80097ba:	1c5a      	adds	r2, r3, #1
 80097bc:	0013      	movs	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	189b      	adds	r3, r3, r2
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	18cb      	adds	r3, r1, r3
 80097c6:	3302      	adds	r3, #2
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	e00d      	b.n	80097e8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097cc:	1cfb      	adds	r3, r7, #3
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	227f      	movs	r2, #127	; 0x7f
 80097d2:	401a      	ands	r2, r3
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	23b5      	movs	r3, #181	; 0xb5
 80097d8:	0059      	lsls	r1, r3, #1
 80097da:	0013      	movs	r3, r2
 80097dc:	009b      	lsls	r3, r3, #2
 80097de:	189b      	adds	r3, r3, r2
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	18c3      	adds	r3, r0, r3
 80097e4:	185b      	adds	r3, r3, r1
 80097e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097e8:	0018      	movs	r0, r3
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b004      	add	sp, #16
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	000a      	movs	r2, r1
 80097fa:	1cfb      	adds	r3, r7, #3
 80097fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	210f      	movs	r1, #15
 8009800:	187b      	adds	r3, r7, r1
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009806:	260e      	movs	r6, #14
 8009808:	19bb      	adds	r3, r7, r6
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	23b0      	movs	r3, #176	; 0xb0
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	58d2      	ldr	r2, [r2, r3]
 8009816:	000d      	movs	r5, r1
 8009818:	187c      	adds	r4, r7, r1
 800981a:	1cfb      	adds	r3, r7, #3
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	0019      	movs	r1, r3
 8009820:	0010      	movs	r0, r2
 8009822:	f7f8 ff11 	bl	8002648 <HAL_PCD_SetAddress>
 8009826:	0003      	movs	r3, r0
 8009828:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800982a:	19bc      	adds	r4, r7, r6
 800982c:	197b      	adds	r3, r7, r5
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	0018      	movs	r0, r3
 8009832:	f000 f87d 	bl	8009930 <USBD_Get_USB_Status>
 8009836:	0003      	movs	r3, r0
 8009838:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800983a:	19bb      	adds	r3, r7, r6
 800983c:	781b      	ldrb	r3, [r3, #0]
}
 800983e:	0018      	movs	r0, r3
 8009840:	46bd      	mov	sp, r7
 8009842:	b005      	add	sp, #20
 8009844:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009846 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009848:	b087      	sub	sp, #28
 800984a:	af00      	add	r7, sp, #0
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	0008      	movs	r0, r1
 8009850:	607a      	str	r2, [r7, #4]
 8009852:	0019      	movs	r1, r3
 8009854:	230b      	movs	r3, #11
 8009856:	18fb      	adds	r3, r7, r3
 8009858:	1c02      	adds	r2, r0, #0
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	2408      	movs	r4, #8
 800985e:	193b      	adds	r3, r7, r4
 8009860:	1c0a      	adds	r2, r1, #0
 8009862:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009864:	2117      	movs	r1, #23
 8009866:	187b      	adds	r3, r7, r1
 8009868:	2200      	movs	r2, #0
 800986a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	2516      	movs	r5, #22
 800986e:	197b      	adds	r3, r7, r5
 8009870:	2200      	movs	r2, #0
 8009872:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	23b0      	movs	r3, #176	; 0xb0
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	58d0      	ldr	r0, [r2, r3]
 800987c:	193b      	adds	r3, r7, r4
 800987e:	881d      	ldrh	r5, [r3, #0]
 8009880:	000e      	movs	r6, r1
 8009882:	187c      	adds	r4, r7, r1
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	230b      	movs	r3, #11
 8009888:	18fb      	adds	r3, r7, r3
 800988a:	7819      	ldrb	r1, [r3, #0]
 800988c:	002b      	movs	r3, r5
 800988e:	f7f9 f813 	bl	80028b8 <HAL_PCD_EP_Transmit>
 8009892:	0003      	movs	r3, r0
 8009894:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009896:	2516      	movs	r5, #22
 8009898:	197c      	adds	r4, r7, r5
 800989a:	19bb      	adds	r3, r7, r6
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	0018      	movs	r0, r3
 80098a0:	f000 f846 	bl	8009930 <USBD_Get_USB_Status>
 80098a4:	0003      	movs	r3, r0
 80098a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80098a8:	197b      	adds	r3, r7, r5
 80098aa:	781b      	ldrb	r3, [r3, #0]
}
 80098ac:	0018      	movs	r0, r3
 80098ae:	46bd      	mov	sp, r7
 80098b0:	b007      	add	sp, #28
 80098b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080098b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80098b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b6:	b087      	sub	sp, #28
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	0008      	movs	r0, r1
 80098be:	607a      	str	r2, [r7, #4]
 80098c0:	0019      	movs	r1, r3
 80098c2:	230b      	movs	r3, #11
 80098c4:	18fb      	adds	r3, r7, r3
 80098c6:	1c02      	adds	r2, r0, #0
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	2408      	movs	r4, #8
 80098cc:	193b      	adds	r3, r7, r4
 80098ce:	1c0a      	adds	r2, r1, #0
 80098d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098d2:	2117      	movs	r1, #23
 80098d4:	187b      	adds	r3, r7, r1
 80098d6:	2200      	movs	r2, #0
 80098d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098da:	2516      	movs	r5, #22
 80098dc:	197b      	adds	r3, r7, r5
 80098de:	2200      	movs	r2, #0
 80098e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	23b0      	movs	r3, #176	; 0xb0
 80098e6:	009b      	lsls	r3, r3, #2
 80098e8:	58d0      	ldr	r0, [r2, r3]
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	881d      	ldrh	r5, [r3, #0]
 80098ee:	000e      	movs	r6, r1
 80098f0:	187c      	adds	r4, r7, r1
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	230b      	movs	r3, #11
 80098f6:	18fb      	adds	r3, r7, r3
 80098f8:	7819      	ldrb	r1, [r3, #0]
 80098fa:	002b      	movs	r3, r5
 80098fc:	f7f8 ff98 	bl	8002830 <HAL_PCD_EP_Receive>
 8009900:	0003      	movs	r3, r0
 8009902:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009904:	2516      	movs	r5, #22
 8009906:	197c      	adds	r4, r7, r5
 8009908:	19bb      	adds	r3, r7, r6
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	0018      	movs	r0, r3
 800990e:	f000 f80f 	bl	8009930 <USBD_Get_USB_Status>
 8009912:	0003      	movs	r3, r0
 8009914:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009916:	197b      	adds	r3, r7, r5
 8009918:	781b      	ldrb	r3, [r3, #0]
}
 800991a:	0018      	movs	r0, r3
 800991c:	46bd      	mov	sp, r7
 800991e:	b007      	add	sp, #28
 8009920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009922 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009926:	f7f7 f873 	bl	8000a10 <SystemClock_Config>
}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	0002      	movs	r2, r0
 8009938:	1dfb      	adds	r3, r7, #7
 800993a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800993c:	230f      	movs	r3, #15
 800993e:	18fb      	adds	r3, r7, r3
 8009940:	2200      	movs	r2, #0
 8009942:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009944:	1dfb      	adds	r3, r7, #7
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d017      	beq.n	800997c <USBD_Get_USB_Status+0x4c>
 800994c:	dc1b      	bgt.n	8009986 <USBD_Get_USB_Status+0x56>
 800994e:	2b02      	cmp	r3, #2
 8009950:	d00f      	beq.n	8009972 <USBD_Get_USB_Status+0x42>
 8009952:	dc18      	bgt.n	8009986 <USBD_Get_USB_Status+0x56>
 8009954:	2b00      	cmp	r3, #0
 8009956:	d002      	beq.n	800995e <USBD_Get_USB_Status+0x2e>
 8009958:	2b01      	cmp	r3, #1
 800995a:	d005      	beq.n	8009968 <USBD_Get_USB_Status+0x38>
 800995c:	e013      	b.n	8009986 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800995e:	230f      	movs	r3, #15
 8009960:	18fb      	adds	r3, r7, r3
 8009962:	2200      	movs	r2, #0
 8009964:	701a      	strb	r2, [r3, #0]
    break;
 8009966:	e013      	b.n	8009990 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009968:	230f      	movs	r3, #15
 800996a:	18fb      	adds	r3, r7, r3
 800996c:	2202      	movs	r2, #2
 800996e:	701a      	strb	r2, [r3, #0]
    break;
 8009970:	e00e      	b.n	8009990 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009972:	230f      	movs	r3, #15
 8009974:	18fb      	adds	r3, r7, r3
 8009976:	2201      	movs	r2, #1
 8009978:	701a      	strb	r2, [r3, #0]
    break;
 800997a:	e009      	b.n	8009990 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800997c:	230f      	movs	r3, #15
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	2202      	movs	r2, #2
 8009982:	701a      	strb	r2, [r3, #0]
    break;
 8009984:	e004      	b.n	8009990 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8009986:	230f      	movs	r3, #15
 8009988:	18fb      	adds	r3, r7, r3
 800998a:	2202      	movs	r2, #2
 800998c:	701a      	strb	r2, [r3, #0]
    break;
 800998e:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8009990:	230f      	movs	r3, #15
 8009992:	18fb      	adds	r3, r7, r3
 8009994:	781b      	ldrb	r3, [r3, #0]
}
 8009996:	0018      	movs	r0, r3
 8009998:	46bd      	mov	sp, r7
 800999a:	b004      	add	sp, #16
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <__errno>:
 80099a0:	4b01      	ldr	r3, [pc, #4]	; (80099a8 <__errno+0x8>)
 80099a2:	6818      	ldr	r0, [r3, #0]
 80099a4:	4770      	bx	lr
 80099a6:	46c0      	nop			; (mov r8, r8)
 80099a8:	20000198 	.word	0x20000198

080099ac <__libc_init_array>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	2600      	movs	r6, #0
 80099b0:	4d0c      	ldr	r5, [pc, #48]	; (80099e4 <__libc_init_array+0x38>)
 80099b2:	4c0d      	ldr	r4, [pc, #52]	; (80099e8 <__libc_init_array+0x3c>)
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	42a6      	cmp	r6, r4
 80099ba:	d109      	bne.n	80099d0 <__libc_init_array+0x24>
 80099bc:	2600      	movs	r6, #0
 80099be:	f000 fc5b 	bl	800a278 <_init>
 80099c2:	4d0a      	ldr	r5, [pc, #40]	; (80099ec <__libc_init_array+0x40>)
 80099c4:	4c0a      	ldr	r4, [pc, #40]	; (80099f0 <__libc_init_array+0x44>)
 80099c6:	1b64      	subs	r4, r4, r5
 80099c8:	10a4      	asrs	r4, r4, #2
 80099ca:	42a6      	cmp	r6, r4
 80099cc:	d105      	bne.n	80099da <__libc_init_array+0x2e>
 80099ce:	bd70      	pop	{r4, r5, r6, pc}
 80099d0:	00b3      	lsls	r3, r6, #2
 80099d2:	58eb      	ldr	r3, [r5, r3]
 80099d4:	4798      	blx	r3
 80099d6:	3601      	adds	r6, #1
 80099d8:	e7ee      	b.n	80099b8 <__libc_init_array+0xc>
 80099da:	00b3      	lsls	r3, r6, #2
 80099dc:	58eb      	ldr	r3, [r5, r3]
 80099de:	4798      	blx	r3
 80099e0:	3601      	adds	r6, #1
 80099e2:	e7f2      	b.n	80099ca <__libc_init_array+0x1e>
 80099e4:	0800a444 	.word	0x0800a444
 80099e8:	0800a444 	.word	0x0800a444
 80099ec:	0800a444 	.word	0x0800a444
 80099f0:	0800a448 	.word	0x0800a448

080099f4 <malloc>:
 80099f4:	b510      	push	{r4, lr}
 80099f6:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <malloc+0x10>)
 80099f8:	0001      	movs	r1, r0
 80099fa:	6818      	ldr	r0, [r3, #0]
 80099fc:	f000 f860 	bl	8009ac0 <_malloc_r>
 8009a00:	bd10      	pop	{r4, pc}
 8009a02:	46c0      	nop			; (mov r8, r8)
 8009a04:	20000198 	.word	0x20000198

08009a08 <free>:
 8009a08:	b510      	push	{r4, lr}
 8009a0a:	4b03      	ldr	r3, [pc, #12]	; (8009a18 <free+0x10>)
 8009a0c:	0001      	movs	r1, r0
 8009a0e:	6818      	ldr	r0, [r3, #0]
 8009a10:	f000 f80c 	bl	8009a2c <_free_r>
 8009a14:	bd10      	pop	{r4, pc}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	20000198 	.word	0x20000198

08009a1c <memset>:
 8009a1c:	0003      	movs	r3, r0
 8009a1e:	1882      	adds	r2, r0, r2
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d100      	bne.n	8009a26 <memset+0xa>
 8009a24:	4770      	bx	lr
 8009a26:	7019      	strb	r1, [r3, #0]
 8009a28:	3301      	adds	r3, #1
 8009a2a:	e7f9      	b.n	8009a20 <memset+0x4>

08009a2c <_free_r>:
 8009a2c:	b570      	push	{r4, r5, r6, lr}
 8009a2e:	0005      	movs	r5, r0
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d010      	beq.n	8009a56 <_free_r+0x2a>
 8009a34:	1f0c      	subs	r4, r1, #4
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	da00      	bge.n	8009a3e <_free_r+0x12>
 8009a3c:	18e4      	adds	r4, r4, r3
 8009a3e:	0028      	movs	r0, r5
 8009a40:	f000 f8ce 	bl	8009be0 <__malloc_lock>
 8009a44:	4a1d      	ldr	r2, [pc, #116]	; (8009abc <_free_r+0x90>)
 8009a46:	6813      	ldr	r3, [r2, #0]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d105      	bne.n	8009a58 <_free_r+0x2c>
 8009a4c:	6063      	str	r3, [r4, #4]
 8009a4e:	6014      	str	r4, [r2, #0]
 8009a50:	0028      	movs	r0, r5
 8009a52:	f000 f8cd 	bl	8009bf0 <__malloc_unlock>
 8009a56:	bd70      	pop	{r4, r5, r6, pc}
 8009a58:	42a3      	cmp	r3, r4
 8009a5a:	d908      	bls.n	8009a6e <_free_r+0x42>
 8009a5c:	6821      	ldr	r1, [r4, #0]
 8009a5e:	1860      	adds	r0, r4, r1
 8009a60:	4283      	cmp	r3, r0
 8009a62:	d1f3      	bne.n	8009a4c <_free_r+0x20>
 8009a64:	6818      	ldr	r0, [r3, #0]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	1841      	adds	r1, r0, r1
 8009a6a:	6021      	str	r1, [r4, #0]
 8009a6c:	e7ee      	b.n	8009a4c <_free_r+0x20>
 8009a6e:	001a      	movs	r2, r3
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d001      	beq.n	8009a7a <_free_r+0x4e>
 8009a76:	42a3      	cmp	r3, r4
 8009a78:	d9f9      	bls.n	8009a6e <_free_r+0x42>
 8009a7a:	6811      	ldr	r1, [r2, #0]
 8009a7c:	1850      	adds	r0, r2, r1
 8009a7e:	42a0      	cmp	r0, r4
 8009a80:	d10b      	bne.n	8009a9a <_free_r+0x6e>
 8009a82:	6820      	ldr	r0, [r4, #0]
 8009a84:	1809      	adds	r1, r1, r0
 8009a86:	1850      	adds	r0, r2, r1
 8009a88:	6011      	str	r1, [r2, #0]
 8009a8a:	4283      	cmp	r3, r0
 8009a8c:	d1e0      	bne.n	8009a50 <_free_r+0x24>
 8009a8e:	6818      	ldr	r0, [r3, #0]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	1841      	adds	r1, r0, r1
 8009a94:	6011      	str	r1, [r2, #0]
 8009a96:	6053      	str	r3, [r2, #4]
 8009a98:	e7da      	b.n	8009a50 <_free_r+0x24>
 8009a9a:	42a0      	cmp	r0, r4
 8009a9c:	d902      	bls.n	8009aa4 <_free_r+0x78>
 8009a9e:	230c      	movs	r3, #12
 8009aa0:	602b      	str	r3, [r5, #0]
 8009aa2:	e7d5      	b.n	8009a50 <_free_r+0x24>
 8009aa4:	6821      	ldr	r1, [r4, #0]
 8009aa6:	1860      	adds	r0, r4, r1
 8009aa8:	4283      	cmp	r3, r0
 8009aaa:	d103      	bne.n	8009ab4 <_free_r+0x88>
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	1841      	adds	r1, r0, r1
 8009ab2:	6021      	str	r1, [r4, #0]
 8009ab4:	6063      	str	r3, [r4, #4]
 8009ab6:	6054      	str	r4, [r2, #4]
 8009ab8:	e7ca      	b.n	8009a50 <_free_r+0x24>
 8009aba:	46c0      	nop			; (mov r8, r8)
 8009abc:	20000220 	.word	0x20000220

08009ac0 <_malloc_r>:
 8009ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	1ccd      	adds	r5, r1, #3
 8009ac6:	439d      	bics	r5, r3
 8009ac8:	3508      	adds	r5, #8
 8009aca:	0006      	movs	r6, r0
 8009acc:	2d0c      	cmp	r5, #12
 8009ace:	d21f      	bcs.n	8009b10 <_malloc_r+0x50>
 8009ad0:	250c      	movs	r5, #12
 8009ad2:	42a9      	cmp	r1, r5
 8009ad4:	d81e      	bhi.n	8009b14 <_malloc_r+0x54>
 8009ad6:	0030      	movs	r0, r6
 8009ad8:	f000 f882 	bl	8009be0 <__malloc_lock>
 8009adc:	4925      	ldr	r1, [pc, #148]	; (8009b74 <_malloc_r+0xb4>)
 8009ade:	680a      	ldr	r2, [r1, #0]
 8009ae0:	0014      	movs	r4, r2
 8009ae2:	2c00      	cmp	r4, #0
 8009ae4:	d11a      	bne.n	8009b1c <_malloc_r+0x5c>
 8009ae6:	4f24      	ldr	r7, [pc, #144]	; (8009b78 <_malloc_r+0xb8>)
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <_malloc_r+0x38>
 8009aee:	0021      	movs	r1, r4
 8009af0:	0030      	movs	r0, r6
 8009af2:	f000 f843 	bl	8009b7c <_sbrk_r>
 8009af6:	6038      	str	r0, [r7, #0]
 8009af8:	0029      	movs	r1, r5
 8009afa:	0030      	movs	r0, r6
 8009afc:	f000 f83e 	bl	8009b7c <_sbrk_r>
 8009b00:	1c43      	adds	r3, r0, #1
 8009b02:	d12b      	bne.n	8009b5c <_malloc_r+0x9c>
 8009b04:	230c      	movs	r3, #12
 8009b06:	0030      	movs	r0, r6
 8009b08:	6033      	str	r3, [r6, #0]
 8009b0a:	f000 f871 	bl	8009bf0 <__malloc_unlock>
 8009b0e:	e003      	b.n	8009b18 <_malloc_r+0x58>
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	dade      	bge.n	8009ad2 <_malloc_r+0x12>
 8009b14:	230c      	movs	r3, #12
 8009b16:	6033      	str	r3, [r6, #0]
 8009b18:	2000      	movs	r0, #0
 8009b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	1b5b      	subs	r3, r3, r5
 8009b20:	d419      	bmi.n	8009b56 <_malloc_r+0x96>
 8009b22:	2b0b      	cmp	r3, #11
 8009b24:	d903      	bls.n	8009b2e <_malloc_r+0x6e>
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	18e4      	adds	r4, r4, r3
 8009b2a:	6025      	str	r5, [r4, #0]
 8009b2c:	e003      	b.n	8009b36 <_malloc_r+0x76>
 8009b2e:	6863      	ldr	r3, [r4, #4]
 8009b30:	42a2      	cmp	r2, r4
 8009b32:	d10e      	bne.n	8009b52 <_malloc_r+0x92>
 8009b34:	600b      	str	r3, [r1, #0]
 8009b36:	0030      	movs	r0, r6
 8009b38:	f000 f85a 	bl	8009bf0 <__malloc_unlock>
 8009b3c:	0020      	movs	r0, r4
 8009b3e:	2207      	movs	r2, #7
 8009b40:	300b      	adds	r0, #11
 8009b42:	1d23      	adds	r3, r4, #4
 8009b44:	4390      	bics	r0, r2
 8009b46:	1ac2      	subs	r2, r0, r3
 8009b48:	4298      	cmp	r0, r3
 8009b4a:	d0e6      	beq.n	8009b1a <_malloc_r+0x5a>
 8009b4c:	1a1b      	subs	r3, r3, r0
 8009b4e:	50a3      	str	r3, [r4, r2]
 8009b50:	e7e3      	b.n	8009b1a <_malloc_r+0x5a>
 8009b52:	6053      	str	r3, [r2, #4]
 8009b54:	e7ef      	b.n	8009b36 <_malloc_r+0x76>
 8009b56:	0022      	movs	r2, r4
 8009b58:	6864      	ldr	r4, [r4, #4]
 8009b5a:	e7c2      	b.n	8009ae2 <_malloc_r+0x22>
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	1cc4      	adds	r4, r0, #3
 8009b60:	439c      	bics	r4, r3
 8009b62:	42a0      	cmp	r0, r4
 8009b64:	d0e1      	beq.n	8009b2a <_malloc_r+0x6a>
 8009b66:	1a21      	subs	r1, r4, r0
 8009b68:	0030      	movs	r0, r6
 8009b6a:	f000 f807 	bl	8009b7c <_sbrk_r>
 8009b6e:	1c43      	adds	r3, r0, #1
 8009b70:	d1db      	bne.n	8009b2a <_malloc_r+0x6a>
 8009b72:	e7c7      	b.n	8009b04 <_malloc_r+0x44>
 8009b74:	20000220 	.word	0x20000220
 8009b78:	20000224 	.word	0x20000224

08009b7c <_sbrk_r>:
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	b570      	push	{r4, r5, r6, lr}
 8009b80:	4d06      	ldr	r5, [pc, #24]	; (8009b9c <_sbrk_r+0x20>)
 8009b82:	0004      	movs	r4, r0
 8009b84:	0008      	movs	r0, r1
 8009b86:	602b      	str	r3, [r5, #0]
 8009b88:	f7f7 f9f2 	bl	8000f70 <_sbrk>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d103      	bne.n	8009b98 <_sbrk_r+0x1c>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d000      	beq.n	8009b98 <_sbrk_r+0x1c>
 8009b96:	6023      	str	r3, [r4, #0]
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	46c0      	nop			; (mov r8, r8)
 8009b9c:	20000af0 	.word	0x20000af0

08009ba0 <siprintf>:
 8009ba0:	b40e      	push	{r1, r2, r3}
 8009ba2:	b500      	push	{lr}
 8009ba4:	490b      	ldr	r1, [pc, #44]	; (8009bd4 <siprintf+0x34>)
 8009ba6:	b09c      	sub	sp, #112	; 0x70
 8009ba8:	ab1d      	add	r3, sp, #116	; 0x74
 8009baa:	9002      	str	r0, [sp, #8]
 8009bac:	9006      	str	r0, [sp, #24]
 8009bae:	9107      	str	r1, [sp, #28]
 8009bb0:	9104      	str	r1, [sp, #16]
 8009bb2:	4809      	ldr	r0, [pc, #36]	; (8009bd8 <siprintf+0x38>)
 8009bb4:	4909      	ldr	r1, [pc, #36]	; (8009bdc <siprintf+0x3c>)
 8009bb6:	cb04      	ldmia	r3!, {r2}
 8009bb8:	9105      	str	r1, [sp, #20]
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	a902      	add	r1, sp, #8
 8009bbe:	9301      	str	r3, [sp, #4]
 8009bc0:	f000 f880 	bl	8009cc4 <_svfiprintf_r>
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9a02      	ldr	r2, [sp, #8]
 8009bc8:	7013      	strb	r3, [r2, #0]
 8009bca:	b01c      	add	sp, #112	; 0x70
 8009bcc:	bc08      	pop	{r3}
 8009bce:	b003      	add	sp, #12
 8009bd0:	4718      	bx	r3
 8009bd2:	46c0      	nop			; (mov r8, r8)
 8009bd4:	7fffffff 	.word	0x7fffffff
 8009bd8:	20000198 	.word	0x20000198
 8009bdc:	ffff0208 	.word	0xffff0208

08009be0 <__malloc_lock>:
 8009be0:	b510      	push	{r4, lr}
 8009be2:	4802      	ldr	r0, [pc, #8]	; (8009bec <__malloc_lock+0xc>)
 8009be4:	f000 faf0 	bl	800a1c8 <__retarget_lock_acquire_recursive>
 8009be8:	bd10      	pop	{r4, pc}
 8009bea:	46c0      	nop			; (mov r8, r8)
 8009bec:	20000af8 	.word	0x20000af8

08009bf0 <__malloc_unlock>:
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	4802      	ldr	r0, [pc, #8]	; (8009bfc <__malloc_unlock+0xc>)
 8009bf4:	f000 fae9 	bl	800a1ca <__retarget_lock_release_recursive>
 8009bf8:	bd10      	pop	{r4, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	20000af8 	.word	0x20000af8

08009c00 <__ssputs_r>:
 8009c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c02:	688e      	ldr	r6, [r1, #8]
 8009c04:	b085      	sub	sp, #20
 8009c06:	0007      	movs	r7, r0
 8009c08:	000c      	movs	r4, r1
 8009c0a:	9203      	str	r2, [sp, #12]
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	429e      	cmp	r6, r3
 8009c10:	d83c      	bhi.n	8009c8c <__ssputs_r+0x8c>
 8009c12:	2390      	movs	r3, #144	; 0x90
 8009c14:	898a      	ldrh	r2, [r1, #12]
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	421a      	tst	r2, r3
 8009c1a:	d034      	beq.n	8009c86 <__ssputs_r+0x86>
 8009c1c:	2503      	movs	r5, #3
 8009c1e:	6909      	ldr	r1, [r1, #16]
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	1a5b      	subs	r3, r3, r1
 8009c24:	9302      	str	r3, [sp, #8]
 8009c26:	6963      	ldr	r3, [r4, #20]
 8009c28:	9802      	ldr	r0, [sp, #8]
 8009c2a:	435d      	muls	r5, r3
 8009c2c:	0feb      	lsrs	r3, r5, #31
 8009c2e:	195d      	adds	r5, r3, r5
 8009c30:	9b01      	ldr	r3, [sp, #4]
 8009c32:	106d      	asrs	r5, r5, #1
 8009c34:	3301      	adds	r3, #1
 8009c36:	181b      	adds	r3, r3, r0
 8009c38:	42ab      	cmp	r3, r5
 8009c3a:	d900      	bls.n	8009c3e <__ssputs_r+0x3e>
 8009c3c:	001d      	movs	r5, r3
 8009c3e:	0553      	lsls	r3, r2, #21
 8009c40:	d532      	bpl.n	8009ca8 <__ssputs_r+0xa8>
 8009c42:	0029      	movs	r1, r5
 8009c44:	0038      	movs	r0, r7
 8009c46:	f7ff ff3b 	bl	8009ac0 <_malloc_r>
 8009c4a:	1e06      	subs	r6, r0, #0
 8009c4c:	d109      	bne.n	8009c62 <__ssputs_r+0x62>
 8009c4e:	230c      	movs	r3, #12
 8009c50:	603b      	str	r3, [r7, #0]
 8009c52:	2340      	movs	r3, #64	; 0x40
 8009c54:	2001      	movs	r0, #1
 8009c56:	89a2      	ldrh	r2, [r4, #12]
 8009c58:	4240      	negs	r0, r0
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	b005      	add	sp, #20
 8009c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c62:	9a02      	ldr	r2, [sp, #8]
 8009c64:	6921      	ldr	r1, [r4, #16]
 8009c66:	f000 fabc 	bl	800a1e2 <memcpy>
 8009c6a:	89a3      	ldrh	r3, [r4, #12]
 8009c6c:	4a14      	ldr	r2, [pc, #80]	; (8009cc0 <__ssputs_r+0xc0>)
 8009c6e:	401a      	ands	r2, r3
 8009c70:	2380      	movs	r3, #128	; 0x80
 8009c72:	4313      	orrs	r3, r2
 8009c74:	81a3      	strh	r3, [r4, #12]
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	6126      	str	r6, [r4, #16]
 8009c7a:	18f6      	adds	r6, r6, r3
 8009c7c:	6026      	str	r6, [r4, #0]
 8009c7e:	6165      	str	r5, [r4, #20]
 8009c80:	9e01      	ldr	r6, [sp, #4]
 8009c82:	1aed      	subs	r5, r5, r3
 8009c84:	60a5      	str	r5, [r4, #8]
 8009c86:	9b01      	ldr	r3, [sp, #4]
 8009c88:	429e      	cmp	r6, r3
 8009c8a:	d900      	bls.n	8009c8e <__ssputs_r+0x8e>
 8009c8c:	9e01      	ldr	r6, [sp, #4]
 8009c8e:	0032      	movs	r2, r6
 8009c90:	9903      	ldr	r1, [sp, #12]
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	f000 faae 	bl	800a1f4 <memmove>
 8009c98:	68a3      	ldr	r3, [r4, #8]
 8009c9a:	2000      	movs	r0, #0
 8009c9c:	1b9b      	subs	r3, r3, r6
 8009c9e:	60a3      	str	r3, [r4, #8]
 8009ca0:	6823      	ldr	r3, [r4, #0]
 8009ca2:	199e      	adds	r6, r3, r6
 8009ca4:	6026      	str	r6, [r4, #0]
 8009ca6:	e7da      	b.n	8009c5e <__ssputs_r+0x5e>
 8009ca8:	002a      	movs	r2, r5
 8009caa:	0038      	movs	r0, r7
 8009cac:	f000 fab5 	bl	800a21a <_realloc_r>
 8009cb0:	1e06      	subs	r6, r0, #0
 8009cb2:	d1e0      	bne.n	8009c76 <__ssputs_r+0x76>
 8009cb4:	0038      	movs	r0, r7
 8009cb6:	6921      	ldr	r1, [r4, #16]
 8009cb8:	f7ff feb8 	bl	8009a2c <_free_r>
 8009cbc:	e7c7      	b.n	8009c4e <__ssputs_r+0x4e>
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	fffffb7f 	.word	0xfffffb7f

08009cc4 <_svfiprintf_r>:
 8009cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cc6:	b0a1      	sub	sp, #132	; 0x84
 8009cc8:	9003      	str	r0, [sp, #12]
 8009cca:	001d      	movs	r5, r3
 8009ccc:	898b      	ldrh	r3, [r1, #12]
 8009cce:	000f      	movs	r7, r1
 8009cd0:	0016      	movs	r6, r2
 8009cd2:	061b      	lsls	r3, r3, #24
 8009cd4:	d511      	bpl.n	8009cfa <_svfiprintf_r+0x36>
 8009cd6:	690b      	ldr	r3, [r1, #16]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d10e      	bne.n	8009cfa <_svfiprintf_r+0x36>
 8009cdc:	2140      	movs	r1, #64	; 0x40
 8009cde:	f7ff feef 	bl	8009ac0 <_malloc_r>
 8009ce2:	6038      	str	r0, [r7, #0]
 8009ce4:	6138      	str	r0, [r7, #16]
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	d105      	bne.n	8009cf6 <_svfiprintf_r+0x32>
 8009cea:	230c      	movs	r3, #12
 8009cec:	9a03      	ldr	r2, [sp, #12]
 8009cee:	3801      	subs	r0, #1
 8009cf0:	6013      	str	r3, [r2, #0]
 8009cf2:	b021      	add	sp, #132	; 0x84
 8009cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cf6:	2340      	movs	r3, #64	; 0x40
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	ac08      	add	r4, sp, #32
 8009cfe:	6163      	str	r3, [r4, #20]
 8009d00:	3320      	adds	r3, #32
 8009d02:	7663      	strb	r3, [r4, #25]
 8009d04:	3310      	adds	r3, #16
 8009d06:	76a3      	strb	r3, [r4, #26]
 8009d08:	9507      	str	r5, [sp, #28]
 8009d0a:	0035      	movs	r5, r6
 8009d0c:	782b      	ldrb	r3, [r5, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <_svfiprintf_r+0x52>
 8009d12:	2b25      	cmp	r3, #37	; 0x25
 8009d14:	d147      	bne.n	8009da6 <_svfiprintf_r+0xe2>
 8009d16:	1bab      	subs	r3, r5, r6
 8009d18:	9305      	str	r3, [sp, #20]
 8009d1a:	42b5      	cmp	r5, r6
 8009d1c:	d00c      	beq.n	8009d38 <_svfiprintf_r+0x74>
 8009d1e:	0032      	movs	r2, r6
 8009d20:	0039      	movs	r1, r7
 8009d22:	9803      	ldr	r0, [sp, #12]
 8009d24:	f7ff ff6c 	bl	8009c00 <__ssputs_r>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d100      	bne.n	8009d2e <_svfiprintf_r+0x6a>
 8009d2c:	e0ae      	b.n	8009e8c <_svfiprintf_r+0x1c8>
 8009d2e:	6962      	ldr	r2, [r4, #20]
 8009d30:	9b05      	ldr	r3, [sp, #20]
 8009d32:	4694      	mov	ip, r2
 8009d34:	4463      	add	r3, ip
 8009d36:	6163      	str	r3, [r4, #20]
 8009d38:	782b      	ldrb	r3, [r5, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d100      	bne.n	8009d40 <_svfiprintf_r+0x7c>
 8009d3e:	e0a5      	b.n	8009e8c <_svfiprintf_r+0x1c8>
 8009d40:	2201      	movs	r2, #1
 8009d42:	2300      	movs	r3, #0
 8009d44:	4252      	negs	r2, r2
 8009d46:	6062      	str	r2, [r4, #4]
 8009d48:	a904      	add	r1, sp, #16
 8009d4a:	3254      	adds	r2, #84	; 0x54
 8009d4c:	1852      	adds	r2, r2, r1
 8009d4e:	1c6e      	adds	r6, r5, #1
 8009d50:	6023      	str	r3, [r4, #0]
 8009d52:	60e3      	str	r3, [r4, #12]
 8009d54:	60a3      	str	r3, [r4, #8]
 8009d56:	7013      	strb	r3, [r2, #0]
 8009d58:	65a3      	str	r3, [r4, #88]	; 0x58
 8009d5a:	2205      	movs	r2, #5
 8009d5c:	7831      	ldrb	r1, [r6, #0]
 8009d5e:	4854      	ldr	r0, [pc, #336]	; (8009eb0 <_svfiprintf_r+0x1ec>)
 8009d60:	f000 fa34 	bl	800a1cc <memchr>
 8009d64:	1c75      	adds	r5, r6, #1
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d11f      	bne.n	8009daa <_svfiprintf_r+0xe6>
 8009d6a:	6822      	ldr	r2, [r4, #0]
 8009d6c:	06d3      	lsls	r3, r2, #27
 8009d6e:	d504      	bpl.n	8009d7a <_svfiprintf_r+0xb6>
 8009d70:	2353      	movs	r3, #83	; 0x53
 8009d72:	a904      	add	r1, sp, #16
 8009d74:	185b      	adds	r3, r3, r1
 8009d76:	2120      	movs	r1, #32
 8009d78:	7019      	strb	r1, [r3, #0]
 8009d7a:	0713      	lsls	r3, r2, #28
 8009d7c:	d504      	bpl.n	8009d88 <_svfiprintf_r+0xc4>
 8009d7e:	2353      	movs	r3, #83	; 0x53
 8009d80:	a904      	add	r1, sp, #16
 8009d82:	185b      	adds	r3, r3, r1
 8009d84:	212b      	movs	r1, #43	; 0x2b
 8009d86:	7019      	strb	r1, [r3, #0]
 8009d88:	7833      	ldrb	r3, [r6, #0]
 8009d8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d8c:	d016      	beq.n	8009dbc <_svfiprintf_r+0xf8>
 8009d8e:	0035      	movs	r5, r6
 8009d90:	2100      	movs	r1, #0
 8009d92:	200a      	movs	r0, #10
 8009d94:	68e3      	ldr	r3, [r4, #12]
 8009d96:	782a      	ldrb	r2, [r5, #0]
 8009d98:	1c6e      	adds	r6, r5, #1
 8009d9a:	3a30      	subs	r2, #48	; 0x30
 8009d9c:	2a09      	cmp	r2, #9
 8009d9e:	d94e      	bls.n	8009e3e <_svfiprintf_r+0x17a>
 8009da0:	2900      	cmp	r1, #0
 8009da2:	d111      	bne.n	8009dc8 <_svfiprintf_r+0x104>
 8009da4:	e017      	b.n	8009dd6 <_svfiprintf_r+0x112>
 8009da6:	3501      	adds	r5, #1
 8009da8:	e7b0      	b.n	8009d0c <_svfiprintf_r+0x48>
 8009daa:	4b41      	ldr	r3, [pc, #260]	; (8009eb0 <_svfiprintf_r+0x1ec>)
 8009dac:	6822      	ldr	r2, [r4, #0]
 8009dae:	1ac0      	subs	r0, r0, r3
 8009db0:	2301      	movs	r3, #1
 8009db2:	4083      	lsls	r3, r0
 8009db4:	4313      	orrs	r3, r2
 8009db6:	002e      	movs	r6, r5
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	e7ce      	b.n	8009d5a <_svfiprintf_r+0x96>
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	1d19      	adds	r1, r3, #4
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	9107      	str	r1, [sp, #28]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	db01      	blt.n	8009dcc <_svfiprintf_r+0x108>
 8009dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dca:	e004      	b.n	8009dd6 <_svfiprintf_r+0x112>
 8009dcc:	425b      	negs	r3, r3
 8009dce:	60e3      	str	r3, [r4, #12]
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	6023      	str	r3, [r4, #0]
 8009dd6:	782b      	ldrb	r3, [r5, #0]
 8009dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8009dda:	d10a      	bne.n	8009df2 <_svfiprintf_r+0x12e>
 8009ddc:	786b      	ldrb	r3, [r5, #1]
 8009dde:	2b2a      	cmp	r3, #42	; 0x2a
 8009de0:	d135      	bne.n	8009e4e <_svfiprintf_r+0x18a>
 8009de2:	9b07      	ldr	r3, [sp, #28]
 8009de4:	3502      	adds	r5, #2
 8009de6:	1d1a      	adds	r2, r3, #4
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	9207      	str	r2, [sp, #28]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	db2b      	blt.n	8009e48 <_svfiprintf_r+0x184>
 8009df0:	9309      	str	r3, [sp, #36]	; 0x24
 8009df2:	4e30      	ldr	r6, [pc, #192]	; (8009eb4 <_svfiprintf_r+0x1f0>)
 8009df4:	2203      	movs	r2, #3
 8009df6:	0030      	movs	r0, r6
 8009df8:	7829      	ldrb	r1, [r5, #0]
 8009dfa:	f000 f9e7 	bl	800a1cc <memchr>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d006      	beq.n	8009e10 <_svfiprintf_r+0x14c>
 8009e02:	2340      	movs	r3, #64	; 0x40
 8009e04:	1b80      	subs	r0, r0, r6
 8009e06:	4083      	lsls	r3, r0
 8009e08:	6822      	ldr	r2, [r4, #0]
 8009e0a:	3501      	adds	r5, #1
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	6023      	str	r3, [r4, #0]
 8009e10:	7829      	ldrb	r1, [r5, #0]
 8009e12:	2206      	movs	r2, #6
 8009e14:	4828      	ldr	r0, [pc, #160]	; (8009eb8 <_svfiprintf_r+0x1f4>)
 8009e16:	1c6e      	adds	r6, r5, #1
 8009e18:	7621      	strb	r1, [r4, #24]
 8009e1a:	f000 f9d7 	bl	800a1cc <memchr>
 8009e1e:	2800      	cmp	r0, #0
 8009e20:	d03c      	beq.n	8009e9c <_svfiprintf_r+0x1d8>
 8009e22:	4b26      	ldr	r3, [pc, #152]	; (8009ebc <_svfiprintf_r+0x1f8>)
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d125      	bne.n	8009e74 <_svfiprintf_r+0x1b0>
 8009e28:	2207      	movs	r2, #7
 8009e2a:	9b07      	ldr	r3, [sp, #28]
 8009e2c:	3307      	adds	r3, #7
 8009e2e:	4393      	bics	r3, r2
 8009e30:	3308      	adds	r3, #8
 8009e32:	9307      	str	r3, [sp, #28]
 8009e34:	6963      	ldr	r3, [r4, #20]
 8009e36:	9a04      	ldr	r2, [sp, #16]
 8009e38:	189b      	adds	r3, r3, r2
 8009e3a:	6163      	str	r3, [r4, #20]
 8009e3c:	e765      	b.n	8009d0a <_svfiprintf_r+0x46>
 8009e3e:	4343      	muls	r3, r0
 8009e40:	0035      	movs	r5, r6
 8009e42:	2101      	movs	r1, #1
 8009e44:	189b      	adds	r3, r3, r2
 8009e46:	e7a6      	b.n	8009d96 <_svfiprintf_r+0xd2>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	425b      	negs	r3, r3
 8009e4c:	e7d0      	b.n	8009df0 <_svfiprintf_r+0x12c>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	200a      	movs	r0, #10
 8009e52:	001a      	movs	r2, r3
 8009e54:	3501      	adds	r5, #1
 8009e56:	6063      	str	r3, [r4, #4]
 8009e58:	7829      	ldrb	r1, [r5, #0]
 8009e5a:	1c6e      	adds	r6, r5, #1
 8009e5c:	3930      	subs	r1, #48	; 0x30
 8009e5e:	2909      	cmp	r1, #9
 8009e60:	d903      	bls.n	8009e6a <_svfiprintf_r+0x1a6>
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0c5      	beq.n	8009df2 <_svfiprintf_r+0x12e>
 8009e66:	9209      	str	r2, [sp, #36]	; 0x24
 8009e68:	e7c3      	b.n	8009df2 <_svfiprintf_r+0x12e>
 8009e6a:	4342      	muls	r2, r0
 8009e6c:	0035      	movs	r5, r6
 8009e6e:	2301      	movs	r3, #1
 8009e70:	1852      	adds	r2, r2, r1
 8009e72:	e7f1      	b.n	8009e58 <_svfiprintf_r+0x194>
 8009e74:	ab07      	add	r3, sp, #28
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	003a      	movs	r2, r7
 8009e7a:	0021      	movs	r1, r4
 8009e7c:	4b10      	ldr	r3, [pc, #64]	; (8009ec0 <_svfiprintf_r+0x1fc>)
 8009e7e:	9803      	ldr	r0, [sp, #12]
 8009e80:	e000      	b.n	8009e84 <_svfiprintf_r+0x1c0>
 8009e82:	bf00      	nop
 8009e84:	9004      	str	r0, [sp, #16]
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	d1d3      	bne.n	8009e34 <_svfiprintf_r+0x170>
 8009e8c:	89bb      	ldrh	r3, [r7, #12]
 8009e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009e90:	065b      	lsls	r3, r3, #25
 8009e92:	d400      	bmi.n	8009e96 <_svfiprintf_r+0x1d2>
 8009e94:	e72d      	b.n	8009cf2 <_svfiprintf_r+0x2e>
 8009e96:	2001      	movs	r0, #1
 8009e98:	4240      	negs	r0, r0
 8009e9a:	e72a      	b.n	8009cf2 <_svfiprintf_r+0x2e>
 8009e9c:	ab07      	add	r3, sp, #28
 8009e9e:	9300      	str	r3, [sp, #0]
 8009ea0:	003a      	movs	r2, r7
 8009ea2:	0021      	movs	r1, r4
 8009ea4:	4b06      	ldr	r3, [pc, #24]	; (8009ec0 <_svfiprintf_r+0x1fc>)
 8009ea6:	9803      	ldr	r0, [sp, #12]
 8009ea8:	f000 f87c 	bl	8009fa4 <_printf_i>
 8009eac:	e7ea      	b.n	8009e84 <_svfiprintf_r+0x1c0>
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	0800a408 	.word	0x0800a408
 8009eb4:	0800a40e 	.word	0x0800a40e
 8009eb8:	0800a412 	.word	0x0800a412
 8009ebc:	00000000 	.word	0x00000000
 8009ec0:	08009c01 	.word	0x08009c01

08009ec4 <_printf_common>:
 8009ec4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ec6:	0015      	movs	r5, r2
 8009ec8:	9301      	str	r3, [sp, #4]
 8009eca:	688a      	ldr	r2, [r1, #8]
 8009ecc:	690b      	ldr	r3, [r1, #16]
 8009ece:	000c      	movs	r4, r1
 8009ed0:	9000      	str	r0, [sp, #0]
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	da00      	bge.n	8009ed8 <_printf_common+0x14>
 8009ed6:	0013      	movs	r3, r2
 8009ed8:	0022      	movs	r2, r4
 8009eda:	602b      	str	r3, [r5, #0]
 8009edc:	3243      	adds	r2, #67	; 0x43
 8009ede:	7812      	ldrb	r2, [r2, #0]
 8009ee0:	2a00      	cmp	r2, #0
 8009ee2:	d001      	beq.n	8009ee8 <_printf_common+0x24>
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	6823      	ldr	r3, [r4, #0]
 8009eea:	069b      	lsls	r3, r3, #26
 8009eec:	d502      	bpl.n	8009ef4 <_printf_common+0x30>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	3302      	adds	r3, #2
 8009ef2:	602b      	str	r3, [r5, #0]
 8009ef4:	6822      	ldr	r2, [r4, #0]
 8009ef6:	2306      	movs	r3, #6
 8009ef8:	0017      	movs	r7, r2
 8009efa:	401f      	ands	r7, r3
 8009efc:	421a      	tst	r2, r3
 8009efe:	d027      	beq.n	8009f50 <_printf_common+0x8c>
 8009f00:	0023      	movs	r3, r4
 8009f02:	3343      	adds	r3, #67	; 0x43
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	1e5a      	subs	r2, r3, #1
 8009f08:	4193      	sbcs	r3, r2
 8009f0a:	6822      	ldr	r2, [r4, #0]
 8009f0c:	0692      	lsls	r2, r2, #26
 8009f0e:	d430      	bmi.n	8009f72 <_printf_common+0xae>
 8009f10:	0022      	movs	r2, r4
 8009f12:	9901      	ldr	r1, [sp, #4]
 8009f14:	9800      	ldr	r0, [sp, #0]
 8009f16:	9e08      	ldr	r6, [sp, #32]
 8009f18:	3243      	adds	r2, #67	; 0x43
 8009f1a:	47b0      	blx	r6
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d025      	beq.n	8009f6c <_printf_common+0xa8>
 8009f20:	2306      	movs	r3, #6
 8009f22:	6820      	ldr	r0, [r4, #0]
 8009f24:	682a      	ldr	r2, [r5, #0]
 8009f26:	68e1      	ldr	r1, [r4, #12]
 8009f28:	2500      	movs	r5, #0
 8009f2a:	4003      	ands	r3, r0
 8009f2c:	2b04      	cmp	r3, #4
 8009f2e:	d103      	bne.n	8009f38 <_printf_common+0x74>
 8009f30:	1a8d      	subs	r5, r1, r2
 8009f32:	43eb      	mvns	r3, r5
 8009f34:	17db      	asrs	r3, r3, #31
 8009f36:	401d      	ands	r5, r3
 8009f38:	68a3      	ldr	r3, [r4, #8]
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	dd01      	ble.n	8009f44 <_printf_common+0x80>
 8009f40:	1a9b      	subs	r3, r3, r2
 8009f42:	18ed      	adds	r5, r5, r3
 8009f44:	2700      	movs	r7, #0
 8009f46:	42bd      	cmp	r5, r7
 8009f48:	d120      	bne.n	8009f8c <_printf_common+0xc8>
 8009f4a:	2000      	movs	r0, #0
 8009f4c:	e010      	b.n	8009f70 <_printf_common+0xac>
 8009f4e:	3701      	adds	r7, #1
 8009f50:	68e3      	ldr	r3, [r4, #12]
 8009f52:	682a      	ldr	r2, [r5, #0]
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	42bb      	cmp	r3, r7
 8009f58:	ddd2      	ble.n	8009f00 <_printf_common+0x3c>
 8009f5a:	0022      	movs	r2, r4
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	9901      	ldr	r1, [sp, #4]
 8009f60:	9800      	ldr	r0, [sp, #0]
 8009f62:	9e08      	ldr	r6, [sp, #32]
 8009f64:	3219      	adds	r2, #25
 8009f66:	47b0      	blx	r6
 8009f68:	1c43      	adds	r3, r0, #1
 8009f6a:	d1f0      	bne.n	8009f4e <_printf_common+0x8a>
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	4240      	negs	r0, r0
 8009f70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f72:	2030      	movs	r0, #48	; 0x30
 8009f74:	18e1      	adds	r1, r4, r3
 8009f76:	3143      	adds	r1, #67	; 0x43
 8009f78:	7008      	strb	r0, [r1, #0]
 8009f7a:	0021      	movs	r1, r4
 8009f7c:	1c5a      	adds	r2, r3, #1
 8009f7e:	3145      	adds	r1, #69	; 0x45
 8009f80:	7809      	ldrb	r1, [r1, #0]
 8009f82:	18a2      	adds	r2, r4, r2
 8009f84:	3243      	adds	r2, #67	; 0x43
 8009f86:	3302      	adds	r3, #2
 8009f88:	7011      	strb	r1, [r2, #0]
 8009f8a:	e7c1      	b.n	8009f10 <_printf_common+0x4c>
 8009f8c:	0022      	movs	r2, r4
 8009f8e:	2301      	movs	r3, #1
 8009f90:	9901      	ldr	r1, [sp, #4]
 8009f92:	9800      	ldr	r0, [sp, #0]
 8009f94:	9e08      	ldr	r6, [sp, #32]
 8009f96:	321a      	adds	r2, #26
 8009f98:	47b0      	blx	r6
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d0e6      	beq.n	8009f6c <_printf_common+0xa8>
 8009f9e:	3701      	adds	r7, #1
 8009fa0:	e7d1      	b.n	8009f46 <_printf_common+0x82>
	...

08009fa4 <_printf_i>:
 8009fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fa6:	b08b      	sub	sp, #44	; 0x2c
 8009fa8:	9206      	str	r2, [sp, #24]
 8009faa:	000a      	movs	r2, r1
 8009fac:	3243      	adds	r2, #67	; 0x43
 8009fae:	9307      	str	r3, [sp, #28]
 8009fb0:	9005      	str	r0, [sp, #20]
 8009fb2:	9204      	str	r2, [sp, #16]
 8009fb4:	7e0a      	ldrb	r2, [r1, #24]
 8009fb6:	000c      	movs	r4, r1
 8009fb8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009fba:	2a78      	cmp	r2, #120	; 0x78
 8009fbc:	d806      	bhi.n	8009fcc <_printf_i+0x28>
 8009fbe:	2a62      	cmp	r2, #98	; 0x62
 8009fc0:	d808      	bhi.n	8009fd4 <_printf_i+0x30>
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	d100      	bne.n	8009fc8 <_printf_i+0x24>
 8009fc6:	e0c0      	b.n	800a14a <_printf_i+0x1a6>
 8009fc8:	2a58      	cmp	r2, #88	; 0x58
 8009fca:	d052      	beq.n	800a072 <_printf_i+0xce>
 8009fcc:	0026      	movs	r6, r4
 8009fce:	3642      	adds	r6, #66	; 0x42
 8009fd0:	7032      	strb	r2, [r6, #0]
 8009fd2:	e022      	b.n	800a01a <_printf_i+0x76>
 8009fd4:	0010      	movs	r0, r2
 8009fd6:	3863      	subs	r0, #99	; 0x63
 8009fd8:	2815      	cmp	r0, #21
 8009fda:	d8f7      	bhi.n	8009fcc <_printf_i+0x28>
 8009fdc:	f7f6 f89c 	bl	8000118 <__gnu_thumb1_case_shi>
 8009fe0:	001f0016 	.word	0x001f0016
 8009fe4:	fff6fff6 	.word	0xfff6fff6
 8009fe8:	fff6fff6 	.word	0xfff6fff6
 8009fec:	fff6001f 	.word	0xfff6001f
 8009ff0:	fff6fff6 	.word	0xfff6fff6
 8009ff4:	00a8fff6 	.word	0x00a8fff6
 8009ff8:	009a0036 	.word	0x009a0036
 8009ffc:	fff6fff6 	.word	0xfff6fff6
 800a000:	fff600b9 	.word	0xfff600b9
 800a004:	fff60036 	.word	0xfff60036
 800a008:	009efff6 	.word	0x009efff6
 800a00c:	0026      	movs	r6, r4
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	3642      	adds	r6, #66	; 0x42
 800a012:	1d11      	adds	r1, r2, #4
 800a014:	6019      	str	r1, [r3, #0]
 800a016:	6813      	ldr	r3, [r2, #0]
 800a018:	7033      	strb	r3, [r6, #0]
 800a01a:	2301      	movs	r3, #1
 800a01c:	e0a7      	b.n	800a16e <_printf_i+0x1ca>
 800a01e:	6808      	ldr	r0, [r1, #0]
 800a020:	6819      	ldr	r1, [r3, #0]
 800a022:	1d0a      	adds	r2, r1, #4
 800a024:	0605      	lsls	r5, r0, #24
 800a026:	d50b      	bpl.n	800a040 <_printf_i+0x9c>
 800a028:	680d      	ldr	r5, [r1, #0]
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	2d00      	cmp	r5, #0
 800a02e:	da03      	bge.n	800a038 <_printf_i+0x94>
 800a030:	232d      	movs	r3, #45	; 0x2d
 800a032:	9a04      	ldr	r2, [sp, #16]
 800a034:	426d      	negs	r5, r5
 800a036:	7013      	strb	r3, [r2, #0]
 800a038:	4b61      	ldr	r3, [pc, #388]	; (800a1c0 <_printf_i+0x21c>)
 800a03a:	270a      	movs	r7, #10
 800a03c:	9303      	str	r3, [sp, #12]
 800a03e:	e032      	b.n	800a0a6 <_printf_i+0x102>
 800a040:	680d      	ldr	r5, [r1, #0]
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	0641      	lsls	r1, r0, #25
 800a046:	d5f1      	bpl.n	800a02c <_printf_i+0x88>
 800a048:	b22d      	sxth	r5, r5
 800a04a:	e7ef      	b.n	800a02c <_printf_i+0x88>
 800a04c:	680d      	ldr	r5, [r1, #0]
 800a04e:	6819      	ldr	r1, [r3, #0]
 800a050:	1d08      	adds	r0, r1, #4
 800a052:	6018      	str	r0, [r3, #0]
 800a054:	062e      	lsls	r6, r5, #24
 800a056:	d501      	bpl.n	800a05c <_printf_i+0xb8>
 800a058:	680d      	ldr	r5, [r1, #0]
 800a05a:	e003      	b.n	800a064 <_printf_i+0xc0>
 800a05c:	066d      	lsls	r5, r5, #25
 800a05e:	d5fb      	bpl.n	800a058 <_printf_i+0xb4>
 800a060:	680d      	ldr	r5, [r1, #0]
 800a062:	b2ad      	uxth	r5, r5
 800a064:	4b56      	ldr	r3, [pc, #344]	; (800a1c0 <_printf_i+0x21c>)
 800a066:	270a      	movs	r7, #10
 800a068:	9303      	str	r3, [sp, #12]
 800a06a:	2a6f      	cmp	r2, #111	; 0x6f
 800a06c:	d117      	bne.n	800a09e <_printf_i+0xfa>
 800a06e:	2708      	movs	r7, #8
 800a070:	e015      	b.n	800a09e <_printf_i+0xfa>
 800a072:	3145      	adds	r1, #69	; 0x45
 800a074:	700a      	strb	r2, [r1, #0]
 800a076:	4a52      	ldr	r2, [pc, #328]	; (800a1c0 <_printf_i+0x21c>)
 800a078:	9203      	str	r2, [sp, #12]
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	6821      	ldr	r1, [r4, #0]
 800a07e:	ca20      	ldmia	r2!, {r5}
 800a080:	601a      	str	r2, [r3, #0]
 800a082:	0608      	lsls	r0, r1, #24
 800a084:	d550      	bpl.n	800a128 <_printf_i+0x184>
 800a086:	07cb      	lsls	r3, r1, #31
 800a088:	d502      	bpl.n	800a090 <_printf_i+0xec>
 800a08a:	2320      	movs	r3, #32
 800a08c:	4319      	orrs	r1, r3
 800a08e:	6021      	str	r1, [r4, #0]
 800a090:	2710      	movs	r7, #16
 800a092:	2d00      	cmp	r5, #0
 800a094:	d103      	bne.n	800a09e <_printf_i+0xfa>
 800a096:	2320      	movs	r3, #32
 800a098:	6822      	ldr	r2, [r4, #0]
 800a09a:	439a      	bics	r2, r3
 800a09c:	6022      	str	r2, [r4, #0]
 800a09e:	0023      	movs	r3, r4
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	3343      	adds	r3, #67	; 0x43
 800a0a4:	701a      	strb	r2, [r3, #0]
 800a0a6:	6863      	ldr	r3, [r4, #4]
 800a0a8:	60a3      	str	r3, [r4, #8]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	db03      	blt.n	800a0b6 <_printf_i+0x112>
 800a0ae:	2204      	movs	r2, #4
 800a0b0:	6821      	ldr	r1, [r4, #0]
 800a0b2:	4391      	bics	r1, r2
 800a0b4:	6021      	str	r1, [r4, #0]
 800a0b6:	2d00      	cmp	r5, #0
 800a0b8:	d102      	bne.n	800a0c0 <_printf_i+0x11c>
 800a0ba:	9e04      	ldr	r6, [sp, #16]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00c      	beq.n	800a0da <_printf_i+0x136>
 800a0c0:	9e04      	ldr	r6, [sp, #16]
 800a0c2:	0028      	movs	r0, r5
 800a0c4:	0039      	movs	r1, r7
 800a0c6:	f7f6 f8b7 	bl	8000238 <__aeabi_uidivmod>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	3e01      	subs	r6, #1
 800a0ce:	5c5b      	ldrb	r3, [r3, r1]
 800a0d0:	7033      	strb	r3, [r6, #0]
 800a0d2:	002b      	movs	r3, r5
 800a0d4:	0005      	movs	r5, r0
 800a0d6:	429f      	cmp	r7, r3
 800a0d8:	d9f3      	bls.n	800a0c2 <_printf_i+0x11e>
 800a0da:	2f08      	cmp	r7, #8
 800a0dc:	d109      	bne.n	800a0f2 <_printf_i+0x14e>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	07db      	lsls	r3, r3, #31
 800a0e2:	d506      	bpl.n	800a0f2 <_printf_i+0x14e>
 800a0e4:	6863      	ldr	r3, [r4, #4]
 800a0e6:	6922      	ldr	r2, [r4, #16]
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	dc02      	bgt.n	800a0f2 <_printf_i+0x14e>
 800a0ec:	2330      	movs	r3, #48	; 0x30
 800a0ee:	3e01      	subs	r6, #1
 800a0f0:	7033      	strb	r3, [r6, #0]
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	1b9b      	subs	r3, r3, r6
 800a0f6:	6123      	str	r3, [r4, #16]
 800a0f8:	9b07      	ldr	r3, [sp, #28]
 800a0fa:	0021      	movs	r1, r4
 800a0fc:	9300      	str	r3, [sp, #0]
 800a0fe:	9805      	ldr	r0, [sp, #20]
 800a100:	9b06      	ldr	r3, [sp, #24]
 800a102:	aa09      	add	r2, sp, #36	; 0x24
 800a104:	f7ff fede 	bl	8009ec4 <_printf_common>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d135      	bne.n	800a178 <_printf_i+0x1d4>
 800a10c:	2001      	movs	r0, #1
 800a10e:	4240      	negs	r0, r0
 800a110:	b00b      	add	sp, #44	; 0x2c
 800a112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a114:	2220      	movs	r2, #32
 800a116:	6809      	ldr	r1, [r1, #0]
 800a118:	430a      	orrs	r2, r1
 800a11a:	6022      	str	r2, [r4, #0]
 800a11c:	0022      	movs	r2, r4
 800a11e:	2178      	movs	r1, #120	; 0x78
 800a120:	3245      	adds	r2, #69	; 0x45
 800a122:	7011      	strb	r1, [r2, #0]
 800a124:	4a27      	ldr	r2, [pc, #156]	; (800a1c4 <_printf_i+0x220>)
 800a126:	e7a7      	b.n	800a078 <_printf_i+0xd4>
 800a128:	0648      	lsls	r0, r1, #25
 800a12a:	d5ac      	bpl.n	800a086 <_printf_i+0xe2>
 800a12c:	b2ad      	uxth	r5, r5
 800a12e:	e7aa      	b.n	800a086 <_printf_i+0xe2>
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	680d      	ldr	r5, [r1, #0]
 800a134:	1d10      	adds	r0, r2, #4
 800a136:	6949      	ldr	r1, [r1, #20]
 800a138:	6018      	str	r0, [r3, #0]
 800a13a:	6813      	ldr	r3, [r2, #0]
 800a13c:	062e      	lsls	r6, r5, #24
 800a13e:	d501      	bpl.n	800a144 <_printf_i+0x1a0>
 800a140:	6019      	str	r1, [r3, #0]
 800a142:	e002      	b.n	800a14a <_printf_i+0x1a6>
 800a144:	066d      	lsls	r5, r5, #25
 800a146:	d5fb      	bpl.n	800a140 <_printf_i+0x19c>
 800a148:	8019      	strh	r1, [r3, #0]
 800a14a:	2300      	movs	r3, #0
 800a14c:	9e04      	ldr	r6, [sp, #16]
 800a14e:	6123      	str	r3, [r4, #16]
 800a150:	e7d2      	b.n	800a0f8 <_printf_i+0x154>
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	1d11      	adds	r1, r2, #4
 800a156:	6019      	str	r1, [r3, #0]
 800a158:	6816      	ldr	r6, [r2, #0]
 800a15a:	2100      	movs	r1, #0
 800a15c:	0030      	movs	r0, r6
 800a15e:	6862      	ldr	r2, [r4, #4]
 800a160:	f000 f834 	bl	800a1cc <memchr>
 800a164:	2800      	cmp	r0, #0
 800a166:	d001      	beq.n	800a16c <_printf_i+0x1c8>
 800a168:	1b80      	subs	r0, r0, r6
 800a16a:	6060      	str	r0, [r4, #4]
 800a16c:	6863      	ldr	r3, [r4, #4]
 800a16e:	6123      	str	r3, [r4, #16]
 800a170:	2300      	movs	r3, #0
 800a172:	9a04      	ldr	r2, [sp, #16]
 800a174:	7013      	strb	r3, [r2, #0]
 800a176:	e7bf      	b.n	800a0f8 <_printf_i+0x154>
 800a178:	6923      	ldr	r3, [r4, #16]
 800a17a:	0032      	movs	r2, r6
 800a17c:	9906      	ldr	r1, [sp, #24]
 800a17e:	9805      	ldr	r0, [sp, #20]
 800a180:	9d07      	ldr	r5, [sp, #28]
 800a182:	47a8      	blx	r5
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d0c1      	beq.n	800a10c <_printf_i+0x168>
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	079b      	lsls	r3, r3, #30
 800a18c:	d415      	bmi.n	800a1ba <_printf_i+0x216>
 800a18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a190:	68e0      	ldr	r0, [r4, #12]
 800a192:	4298      	cmp	r0, r3
 800a194:	dabc      	bge.n	800a110 <_printf_i+0x16c>
 800a196:	0018      	movs	r0, r3
 800a198:	e7ba      	b.n	800a110 <_printf_i+0x16c>
 800a19a:	0022      	movs	r2, r4
 800a19c:	2301      	movs	r3, #1
 800a19e:	9906      	ldr	r1, [sp, #24]
 800a1a0:	9805      	ldr	r0, [sp, #20]
 800a1a2:	9e07      	ldr	r6, [sp, #28]
 800a1a4:	3219      	adds	r2, #25
 800a1a6:	47b0      	blx	r6
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d0af      	beq.n	800a10c <_printf_i+0x168>
 800a1ac:	3501      	adds	r5, #1
 800a1ae:	68e3      	ldr	r3, [r4, #12]
 800a1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1b2:	1a9b      	subs	r3, r3, r2
 800a1b4:	42ab      	cmp	r3, r5
 800a1b6:	dcf0      	bgt.n	800a19a <_printf_i+0x1f6>
 800a1b8:	e7e9      	b.n	800a18e <_printf_i+0x1ea>
 800a1ba:	2500      	movs	r5, #0
 800a1bc:	e7f7      	b.n	800a1ae <_printf_i+0x20a>
 800a1be:	46c0      	nop			; (mov r8, r8)
 800a1c0:	0800a419 	.word	0x0800a419
 800a1c4:	0800a42a 	.word	0x0800a42a

0800a1c8 <__retarget_lock_acquire_recursive>:
 800a1c8:	4770      	bx	lr

0800a1ca <__retarget_lock_release_recursive>:
 800a1ca:	4770      	bx	lr

0800a1cc <memchr>:
 800a1cc:	b2c9      	uxtb	r1, r1
 800a1ce:	1882      	adds	r2, r0, r2
 800a1d0:	4290      	cmp	r0, r2
 800a1d2:	d101      	bne.n	800a1d8 <memchr+0xc>
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	4770      	bx	lr
 800a1d8:	7803      	ldrb	r3, [r0, #0]
 800a1da:	428b      	cmp	r3, r1
 800a1dc:	d0fb      	beq.n	800a1d6 <memchr+0xa>
 800a1de:	3001      	adds	r0, #1
 800a1e0:	e7f6      	b.n	800a1d0 <memchr+0x4>

0800a1e2 <memcpy>:
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	b510      	push	{r4, lr}
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d100      	bne.n	800a1ec <memcpy+0xa>
 800a1ea:	bd10      	pop	{r4, pc}
 800a1ec:	5ccc      	ldrb	r4, [r1, r3]
 800a1ee:	54c4      	strb	r4, [r0, r3]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	e7f8      	b.n	800a1e6 <memcpy+0x4>

0800a1f4 <memmove>:
 800a1f4:	b510      	push	{r4, lr}
 800a1f6:	4288      	cmp	r0, r1
 800a1f8:	d902      	bls.n	800a200 <memmove+0xc>
 800a1fa:	188b      	adds	r3, r1, r2
 800a1fc:	4298      	cmp	r0, r3
 800a1fe:	d303      	bcc.n	800a208 <memmove+0x14>
 800a200:	2300      	movs	r3, #0
 800a202:	e007      	b.n	800a214 <memmove+0x20>
 800a204:	5c8b      	ldrb	r3, [r1, r2]
 800a206:	5483      	strb	r3, [r0, r2]
 800a208:	3a01      	subs	r2, #1
 800a20a:	d2fb      	bcs.n	800a204 <memmove+0x10>
 800a20c:	bd10      	pop	{r4, pc}
 800a20e:	5ccc      	ldrb	r4, [r1, r3]
 800a210:	54c4      	strb	r4, [r0, r3]
 800a212:	3301      	adds	r3, #1
 800a214:	429a      	cmp	r2, r3
 800a216:	d1fa      	bne.n	800a20e <memmove+0x1a>
 800a218:	e7f8      	b.n	800a20c <memmove+0x18>

0800a21a <_realloc_r>:
 800a21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a21c:	0007      	movs	r7, r0
 800a21e:	000d      	movs	r5, r1
 800a220:	0016      	movs	r6, r2
 800a222:	2900      	cmp	r1, #0
 800a224:	d105      	bne.n	800a232 <_realloc_r+0x18>
 800a226:	0011      	movs	r1, r2
 800a228:	f7ff fc4a 	bl	8009ac0 <_malloc_r>
 800a22c:	0004      	movs	r4, r0
 800a22e:	0020      	movs	r0, r4
 800a230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a232:	2a00      	cmp	r2, #0
 800a234:	d103      	bne.n	800a23e <_realloc_r+0x24>
 800a236:	f7ff fbf9 	bl	8009a2c <_free_r>
 800a23a:	0034      	movs	r4, r6
 800a23c:	e7f7      	b.n	800a22e <_realloc_r+0x14>
 800a23e:	f000 f812 	bl	800a266 <_malloc_usable_size_r>
 800a242:	002c      	movs	r4, r5
 800a244:	42b0      	cmp	r0, r6
 800a246:	d2f2      	bcs.n	800a22e <_realloc_r+0x14>
 800a248:	0031      	movs	r1, r6
 800a24a:	0038      	movs	r0, r7
 800a24c:	f7ff fc38 	bl	8009ac0 <_malloc_r>
 800a250:	1e04      	subs	r4, r0, #0
 800a252:	d0ec      	beq.n	800a22e <_realloc_r+0x14>
 800a254:	0029      	movs	r1, r5
 800a256:	0032      	movs	r2, r6
 800a258:	f7ff ffc3 	bl	800a1e2 <memcpy>
 800a25c:	0029      	movs	r1, r5
 800a25e:	0038      	movs	r0, r7
 800a260:	f7ff fbe4 	bl	8009a2c <_free_r>
 800a264:	e7e3      	b.n	800a22e <_realloc_r+0x14>

0800a266 <_malloc_usable_size_r>:
 800a266:	1f0b      	subs	r3, r1, #4
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	1f18      	subs	r0, r3, #4
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	da01      	bge.n	800a274 <_malloc_usable_size_r+0xe>
 800a270:	580b      	ldr	r3, [r1, r0]
 800a272:	18c0      	adds	r0, r0, r3
 800a274:	4770      	bx	lr
	...

0800a278 <_init>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	46c0      	nop			; (mov r8, r8)
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr

0800a284 <_fini>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	46c0      	nop			; (mov r8, r8)
 800a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28a:	bc08      	pop	{r3}
 800a28c:	469e      	mov	lr, r3
 800a28e:	4770      	bx	lr
