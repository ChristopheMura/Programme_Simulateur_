
Simulator_HID_CUSTOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009128  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009344  08009344  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  08009344  08009344  00019344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800934c  0800934c  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800934c  0800934c  0001934c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009350  08009350  00019350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009354  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000091c  200001fc  08009550  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b18  08009550  00020b18  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184d2  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bf  00000000  00000000  000386f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  0003bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  0003c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001809d  00000000  00000000  0003d650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ee3  00000000  00000000  000556ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867ce  00000000  00000000  000695d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efd9e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000326c  00000000  00000000  000efdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080091d0 	.word	0x080091d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	080091d0 	.word	0x080091d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	pumahid.hat0 = 0x00;
 80004a0:	4b40      	ldr	r3, [pc, #256]	; (80005a4 <main+0x108>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	pumahid.hat1 = 0x00;
 80004a6:	4b3f      	ldr	r3, [pc, #252]	; (80005a4 <main+0x108>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	705a      	strb	r2, [r3, #1]
	pumahid.hat2 = 0x00;
 80004ac:	4b3d      	ldr	r3, [pc, #244]	; (80005a4 <main+0x108>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	709a      	strb	r2, [r3, #2]
	pumahid.key3 = 0x00;
 80004b2:	4b3c      	ldr	r3, [pc, #240]	; (80005a4 <main+0x108>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	70da      	strb	r2, [r3, #3]
	pumahid.but0 = 0x00;
 80004b8:	4b3a      	ldr	r3, [pc, #232]	; (80005a4 <main+0x108>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	711a      	strb	r2, [r3, #4]
	pumahid.but1 = 0x00;
 80004be:	4b39      	ldr	r3, [pc, #228]	; (80005a4 <main+0x108>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	715a      	strb	r2, [r3, #5]
	pumahid.but2 = 0x00;
 80004c4:	4b37      	ldr	r3, [pc, #220]	; (80005a4 <main+0x108>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	719a      	strb	r2, [r3, #6]
	pumahid.but3 = 0x00;
 80004ca:	4b36      	ldr	r3, [pc, #216]	; (80005a4 <main+0x108>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	71da      	strb	r2, [r3, #7]
	pumahid.x = 0x0000;
 80004d0:	4b34      	ldr	r3, [pc, #208]	; (80005a4 <main+0x108>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	811a      	strh	r2, [r3, #8]
	pumahid.y = 0x0000;
 80004d6:	4b33      	ldr	r3, [pc, #204]	; (80005a4 <main+0x108>)
 80004d8:	2200      	movs	r2, #0
 80004da:	815a      	strh	r2, [r3, #10]
	pumahid.z = 0x0000;
 80004dc:	4b31      	ldr	r3, [pc, #196]	; (80005a4 <main+0x108>)
 80004de:	2200      	movs	r2, #0
 80004e0:	819a      	strh	r2, [r3, #12]
	pumahid.rx = 0x0000;
 80004e2:	4b30      	ldr	r3, [pc, #192]	; (80005a4 <main+0x108>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	81da      	strh	r2, [r3, #14]
	pumahid.ry = 0x0000;
 80004e8:	4b2e      	ldr	r3, [pc, #184]	; (80005a4 <main+0x108>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fb6f 	bl	8000bd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f865 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f9ad 	bl	8000854 <MX_GPIO_Init>
  MX_ADC_Init();
 80004fa:	f000 f8db 	bl	80006b4 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f979 	bl	80007f4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000502:	f008 f8b7 	bl	8008674 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4827      	ldr	r0, [pc, #156]	; (80005a8 <main+0x10c>)
 800050c:	2200      	movs	r2, #0
 800050e:	0019      	movs	r1, r3
 8000510:	f001 f979 	bl	8001806 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4a23      	ldr	r2, [pc, #140]	; (80005a8 <main+0x10c>)
 800051a:	0019      	movs	r1, r3
 800051c:	0010      	movs	r0, r2
 800051e:	f001 f955 	bl	80017cc <HAL_GPIO_ReadPin>
 8000522:	0003      	movs	r3, r0
 8000524:	001a      	movs	r2, r3
 8000526:	4b21      	ldr	r3, [pc, #132]	; (80005ac <main+0x110>)
 8000528:	701a      	strb	r2, [r3, #0]
	  BP_5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	019b      	lsls	r3, r3, #6
 800052e:	4a1e      	ldr	r2, [pc, #120]	; (80005a8 <main+0x10c>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f001 f94a 	bl	80017cc <HAL_GPIO_ReadPin>
 8000538:	0003      	movs	r3, r0
 800053a:	001a      	movs	r2, r3
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <main+0x114>)
 800053e:	701a      	strb	r2, [r3, #0]
	  BP_6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4a18      	ldr	r2, [pc, #96]	; (80005a8 <main+0x10c>)
 8000546:	0019      	movs	r1, r3
 8000548:	0010      	movs	r0, r2
 800054a:	f001 f93f 	bl	80017cc <HAL_GPIO_ReadPin>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <main+0x118>)
 8000554:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start_IT(&hadc);
 8000556:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <main+0x11c>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fd41 	bl	8000fe0 <HAL_ADC_Start_IT>
	  /*if (uiAnalogData[0] <= 30)
		  uiAnalogData[0] = 0;

	  uiAnalogData[0] = (uiAnalogData[0]*256)/4096;*/

	  if (BP_5 == 0 /*&& CH == 1*/) pumahid.hat0 = 0x01;
 800055e:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <main+0x114>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d103      	bne.n	800056e <main+0xd2>
 8000566:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <main+0x108>)
 8000568:	2201      	movs	r2, #1
 800056a:	701a      	strb	r2, [r3, #0]
 800056c:	e002      	b.n	8000574 <main+0xd8>
	  else pumahid.hat0 = 0x00;
 800056e:	4b0d      	ldr	r3, [pc, #52]	; (80005a4 <main+0x108>)
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
	  if (BP_6 == 0) pumahid.hat1 = 0x02;
 8000574:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <main+0x118>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d103      	bne.n	8000584 <main+0xe8>
 800057c:	4b09      	ldr	r3, [pc, #36]	; (80005a4 <main+0x108>)
 800057e:	2202      	movs	r2, #2
 8000580:	705a      	strb	r2, [r3, #1]
 8000582:	e002      	b.n	800058a <main+0xee>
	  else pumahid.hat1 = 0x00;
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <main+0x108>)
 8000586:	2200      	movs	r2, #0
 8000588:	705a      	strb	r2, [r3, #1]

	  pumahid.x = 255;
 800058a:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <main+0x108>)
 800058c:	22ff      	movs	r2, #255	; 0xff
 800058e:	811a      	strh	r2, [r3, #8]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <main+0x108>)
 8000592:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <main+0x120>)
 8000594:	2212      	movs	r2, #18
 8000596:	0018      	movs	r0, r3
 8000598:	f006 fd94 	bl	80070c4 <USBD_CUSTOM_HID_SendReport>


	  HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f000 fb87 	bl	8000cb0 <HAL_Delay>
	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80005a2:	e7b7      	b.n	8000514 <main+0x78>
 80005a4:	20000250 	.word	0x20000250
 80005a8:	50000400 	.word	0x50000400
 80005ac:	2000022a 	.word	0x2000022a
 80005b0:	20000248 	.word	0x20000248
 80005b4:	20000228 	.word	0x20000228
 80005b8:	200002ec 	.word	0x200002ec
 80005bc:	20000350 	.word	0x20000350

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b590      	push	{r4, r7, lr}
 80005c2:	b09f      	sub	sp, #124	; 0x7c
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	2440      	movs	r4, #64	; 0x40
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	0018      	movs	r0, r3
 80005cc:	2338      	movs	r3, #56	; 0x38
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f008 fd29 	bl	8009028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d6:	232c      	movs	r3, #44	; 0x2c
 80005d8:	18fb      	adds	r3, r7, r3
 80005da:	0018      	movs	r0, r3
 80005dc:	2314      	movs	r3, #20
 80005de:	001a      	movs	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	f008 fd21 	bl	8009028 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	0018      	movs	r0, r3
 80005ea:	2328      	movs	r3, #40	; 0x28
 80005ec:	001a      	movs	r2, r3
 80005ee:	2100      	movs	r1, #0
 80005f0:	f008 fd1a 	bl	8009028 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f4:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <SystemClock_Config+0xec>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a2d      	ldr	r2, [pc, #180]	; (80006b0 <SystemClock_Config+0xf0>)
 80005fa:	401a      	ands	r2, r3
 80005fc:	4b2b      	ldr	r3, [pc, #172]	; (80006ac <SystemClock_Config+0xec>)
 80005fe:	2180      	movs	r1, #128	; 0x80
 8000600:	0109      	lsls	r1, r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000606:	0021      	movs	r1, r4
 8000608:	187b      	adds	r3, r7, r1
 800060a:	2222      	movs	r2, #34	; 0x22
 800060c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060e:	187b      	adds	r3, r7, r1
 8000610:	2201      	movs	r2, #1
 8000612:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2210      	movs	r2, #16
 8000618:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2201      	movs	r2, #1
 800061e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2202      	movs	r2, #2
 8000624:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2280      	movs	r2, #128	; 0x80
 8000630:	02d2      	lsls	r2, r2, #11
 8000632:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	03d2      	lsls	r2, r2, #15
 800063a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	187b      	adds	r3, r7, r1
 800063e:	0018      	movs	r0, r3
 8000640:	f002 ff58 	bl	80034f4 <HAL_RCC_OscConfig>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000648:	f000 f99e 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	212c      	movs	r1, #44	; 0x2c
 800064e:	187b      	adds	r3, r7, r1
 8000650:	220f      	movs	r2, #15
 8000652:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2203      	movs	r2, #3
 8000658:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066c:	187b      	adds	r3, r7, r1
 800066e:	2101      	movs	r1, #1
 8000670:	0018      	movs	r0, r3
 8000672:	f003 fb13 	bl	8003c9c <HAL_RCC_ClockConfig>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800067a:	f000 f985 	bl	8000988 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	2242      	movs	r2, #66	; 0x42
 8000682:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	04d2      	lsls	r2, r2, #19
 8000690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	0018      	movs	r0, r3
 8000696:	f003 fd25 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 800069a:	1e03      	subs	r3, r0, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800069e:	f000 f973 	bl	8000988 <Error_Handler>
  }
}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b01f      	add	sp, #124	; 0x7c
 80006a8:	bd90      	pop	{r4, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	40007000 	.word	0x40007000
 80006b0:	ffffe7ff 	.word	0xffffe7ff

080006b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ba:	003b      	movs	r3, r7
 80006bc:	0018      	movs	r0, r3
 80006be:	2308      	movs	r3, #8
 80006c0:	001a      	movs	r2, r3
 80006c2:	2100      	movs	r1, #0
 80006c4:	f008 fcb0 	bl	8009028 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006c8:	4b44      	ldr	r3, [pc, #272]	; (80007dc <MX_ADC_Init+0x128>)
 80006ca:	4a45      	ldr	r2, [pc, #276]	; (80007e0 <MX_ADC_Init+0x12c>)
 80006cc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80006ce:	4b43      	ldr	r3, [pc, #268]	; (80007dc <MX_ADC_Init+0x128>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006d4:	4b41      	ldr	r3, [pc, #260]	; (80007dc <MX_ADC_Init+0x128>)
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	05d2      	lsls	r2, r2, #23
 80006da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80006dc:	4b3f      	ldr	r3, [pc, #252]	; (80007dc <MX_ADC_Init+0x128>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006e2:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <MX_ADC_Init+0x128>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80006e8:	4b3c      	ldr	r3, [pc, #240]	; (80007dc <MX_ADC_Init+0x128>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <MX_ADC_Init+0x128>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80006f4:	4b39      	ldr	r3, [pc, #228]	; (80007dc <MX_ADC_Init+0x128>)
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80006fc:	4b37      	ldr	r3, [pc, #220]	; (80007dc <MX_ADC_Init+0x128>)
 80006fe:	2221      	movs	r2, #33	; 0x21
 8000700:	2100      	movs	r1, #0
 8000702:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <MX_ADC_Init+0x128>)
 8000706:	2200      	movs	r2, #0
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <MX_ADC_Init+0x128>)
 800070c:	22c2      	movs	r2, #194	; 0xc2
 800070e:	32ff      	adds	r2, #255	; 0xff
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <MX_ADC_Init+0x128>)
 8000714:	222c      	movs	r2, #44	; 0x2c
 8000716:	2100      	movs	r1, #0
 8000718:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b30      	ldr	r3, [pc, #192]	; (80007dc <MX_ADC_Init+0x128>)
 800071c:	2204      	movs	r2, #4
 800071e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000720:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_ADC_Init+0x128>)
 8000722:	2200      	movs	r2, #0
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_ADC_Init+0x128>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800072c:	4b2b      	ldr	r3, [pc, #172]	; (80007dc <MX_ADC_Init+0x128>)
 800072e:	2200      	movs	r2, #0
 8000730:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_ADC_Init+0x128>)
 8000734:	2200      	movs	r2, #0
 8000736:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_ADC_Init+0x128>)
 800073a:	0018      	movs	r0, r3
 800073c:	f000 fadc 	bl	8000cf8 <HAL_ADC_Init>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000744:	f000 f920 	bl	8000988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000748:	003b      	movs	r3, r7
 800074a:	2201      	movs	r2, #1
 800074c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800074e:	003b      	movs	r3, r7
 8000750:	2280      	movs	r2, #128	; 0x80
 8000752:	0152      	lsls	r2, r2, #5
 8000754:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000756:	003a      	movs	r2, r7
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_ADC_Init+0x128>)
 800075a:	0011      	movs	r1, r2
 800075c:	0018      	movs	r0, r3
 800075e:	f000 fcb1 	bl	80010c4 <HAL_ADC_ConfigChannel>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d001      	beq.n	800076a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000766:	f000 f90f 	bl	8000988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800076a:	003b      	movs	r3, r7
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <MX_ADC_Init+0x130>)
 800076e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000770:	003a      	movs	r2, r7
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_ADC_Init+0x128>)
 8000774:	0011      	movs	r1, r2
 8000776:	0018      	movs	r0, r3
 8000778:	f000 fca4 	bl	80010c4 <HAL_ADC_ConfigChannel>
 800077c:	1e03      	subs	r3, r0, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000780:	f000 f902 	bl	8000988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000784:	003b      	movs	r3, r7
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_ADC_Init+0x134>)
 8000788:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800078a:	003a      	movs	r2, r7
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <MX_ADC_Init+0x128>)
 800078e:	0011      	movs	r1, r2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fc97 	bl	80010c4 <HAL_ADC_ConfigChannel>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800079a:	f000 f8f5 	bl	8000988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800079e:	003b      	movs	r3, r7
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <MX_ADC_Init+0x138>)
 80007a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007a4:	003a      	movs	r2, r7
 80007a6:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <MX_ADC_Init+0x128>)
 80007a8:	0011      	movs	r1, r2
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fc8a 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80007b4:	f000 f8e8 	bl	8000988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007b8:	003b      	movs	r3, r7
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <MX_ADC_Init+0x13c>)
 80007bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007be:	003a      	movs	r2, r7
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <MX_ADC_Init+0x128>)
 80007c2:	0011      	movs	r1, r2
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 fc7d 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80007ce:	f000 f8db 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	200002ec 	.word	0x200002ec
 80007e0:	40012400 	.word	0x40012400
 80007e4:	04000002 	.word	0x04000002
 80007e8:	10000010 	.word	0x10000010
 80007ec:	14000020 	.word	0x14000020
 80007f0:	18000040 	.word	0x18000040

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART2_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART2_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000800:	22e1      	movs	r2, #225	; 0xe1
 8000802:	0252      	lsls	r2, r2, #9
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART2_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <MX_USART2_UART_Init+0x58>)
 8000838:	0018      	movs	r0, r3
 800083a:	f003 fdc7 	bl	80043cc <HAL_UART_Init>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f8a1 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000264 	.word	0x20000264
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	240c      	movs	r4, #12
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	2314      	movs	r3, #20
 8000862:	001a      	movs	r2, r3
 8000864:	2100      	movs	r1, #0
 8000866:	f008 fbdf 	bl	8009028 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b43      	ldr	r3, [pc, #268]	; (8000978 <MX_GPIO_Init+0x124>)
 800086c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800086e:	4b42      	ldr	r3, [pc, #264]	; (8000978 <MX_GPIO_Init+0x124>)
 8000870:	2101      	movs	r1, #1
 8000872:	430a      	orrs	r2, r1
 8000874:	62da      	str	r2, [r3, #44]	; 0x2c
 8000876:	4b40      	ldr	r3, [pc, #256]	; (8000978 <MX_GPIO_Init+0x124>)
 8000878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800087a:	2201      	movs	r2, #1
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_GPIO_Init+0x124>)
 8000884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000886:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <MX_GPIO_Init+0x124>)
 8000888:	2102      	movs	r1, #2
 800088a:	430a      	orrs	r2, r1
 800088c:	62da      	str	r2, [r3, #44]	; 0x2c
 800088e:	4b3a      	ldr	r3, [pc, #232]	; (8000978 <MX_GPIO_Init+0x124>)
 8000890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000892:	2202      	movs	r2, #2
 8000894:	4013      	ands	r3, r2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	00d9      	lsls	r1, r3, #3
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2200      	movs	r2, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 ffae 	bl	8001806 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4833      	ldr	r0, [pc, #204]	; (800097c <MX_GPIO_Init+0x128>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	0019      	movs	r1, r3
 80008b4:	f000 ffa7 	bl	8001806 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	4a31      	ldr	r2, [pc, #196]	; (8000980 <MX_GPIO_Init+0x12c>)
 80008bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	193b      	adds	r3, r7, r4
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	193a      	adds	r2, r7, r4
 80008cc:	23a0      	movs	r3, #160	; 0xa0
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	0011      	movs	r1, r2
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fdfc 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	4a2a      	ldr	r2, [pc, #168]	; (8000984 <MX_GPIO_Init+0x130>)
 80008dc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	4a23      	ldr	r2, [pc, #140]	; (800097c <MX_GPIO_Init+0x128>)
 80008ee:	0019      	movs	r1, r3
 80008f0:	0010      	movs	r0, r2
 80008f2:	f000 fded 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008f6:	0021      	movs	r1, r4
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	00d2      	lsls	r2, r2, #3
 80008fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000900:	000c      	movs	r4, r1
 8000902:	193b      	adds	r3, r7, r4
 8000904:	2201      	movs	r2, #1
 8000906:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	193b      	adds	r3, r7, r4
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	193a      	adds	r2, r7, r4
 8000916:	23a0      	movs	r3, #160	; 0xa0
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	0011      	movs	r1, r2
 800091c:	0018      	movs	r0, r3
 800091e:	f000 fdd7 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_Pin */
  GPIO_InitStruct.Pin = CH_Pin;
 8000922:	0021      	movs	r1, r4
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	0052      	lsls	r2, r2, #1
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	000c      	movs	r4, r1
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2200      	movs	r2, #0
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2202      	movs	r2, #2
 8000938:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH_GPIO_Port, &GPIO_InitStruct);
 800093a:	193b      	adds	r3, r7, r4
 800093c:	4a0f      	ldr	r2, [pc, #60]	; (800097c <MX_GPIO_Init+0x128>)
 800093e:	0019      	movs	r1, r3
 8000940:	0010      	movs	r0, r2
 8000942:	f000 fdc5 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000946:	0021      	movs	r1, r4
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	0092      	lsls	r2, r2, #2
 800094e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2201      	movs	r2, #1
 8000954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2202      	movs	r2, #2
 800095a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000962:	187b      	adds	r3, r7, r1
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <MX_GPIO_Init+0x128>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f000 fdb1 	bl	80014d0 <HAL_GPIO_Init>

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b009      	add	sp, #36	; 0x24
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000
 800097c:	50000400 	.word	0x50000400
 8000980:	00008380 	.word	0x00008380
 8000984:	0000ec7f 	.word	0x0000ec7f

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	e7fe      	b.n	8000990 <Error_Handler+0x8>
	...

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <HAL_MspInit+0x24>)
 800099a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_MspInit+0x24>)
 800099e:	2101      	movs	r1, #1
 80009a0:	430a      	orrs	r2, r1
 80009a2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <HAL_MspInit+0x24>)
 80009a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009a8:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <HAL_MspInit+0x24>)
 80009aa:	2180      	movs	r1, #128	; 0x80
 80009ac:	0549      	lsls	r1, r1, #21
 80009ae:	430a      	orrs	r2, r1
 80009b0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	46c0      	nop			; (mov r8, r8)
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	240c      	movs	r4, #12
 80009c6:	193b      	adds	r3, r7, r4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2314      	movs	r3, #20
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f008 fb2a 	bl	8009028 <memset>
  if(hadc->Instance==ADC1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <HAL_ADC_MspInit+0x70>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d122      	bne.n	8000a24 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_ADC_MspInit+0x74>)
 80009e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_ADC_MspInit+0x74>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0089      	lsls	r1, r1, #2
 80009e8:	430a      	orrs	r2, r1
 80009ea:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_ADC_MspInit+0x74>)
 80009ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_ADC_MspInit+0x74>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	430a      	orrs	r2, r1
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <HAL_ADC_MspInit+0x74>)
 80009fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009fc:	2201      	movs	r2, #1
 80009fe:	4013      	ands	r3, r2
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a04:	193b      	adds	r3, r7, r4
 8000a06:	2273      	movs	r2, #115	; 0x73
 8000a08:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	193b      	adds	r3, r7, r4
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	193a      	adds	r2, r7, r4
 8000a18:	23a0      	movs	r3, #160	; 0xa0
 8000a1a:	05db      	lsls	r3, r3, #23
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f000 fd56 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b009      	add	sp, #36	; 0x24
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40012400 	.word	0x40012400
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b089      	sub	sp, #36	; 0x24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	240c      	movs	r4, #12
 8000a3e:	193b      	adds	r3, r7, r4
 8000a40:	0018      	movs	r0, r3
 8000a42:	2314      	movs	r3, #20
 8000a44:	001a      	movs	r2, r3
 8000a46:	2100      	movs	r1, #0
 8000a48:	f008 faee 	bl	8009028 <memset>
  if(huart->Instance==USART2)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <HAL_UART_MspInit+0x80>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d129      	bne.n	8000aaa <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a5c:	2180      	movs	r1, #128	; 0x80
 8000a5e:	0289      	lsls	r1, r1, #10
 8000a60:	430a      	orrs	r2, r1
 8000a62:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	430a      	orrs	r2, r1
 8000a6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_MspInit+0x84>)
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	2201      	movs	r2, #1
 8000a76:	4013      	ands	r3, r2
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	220c      	movs	r2, #12
 8000a82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2202      	movs	r2, #2
 8000a88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2203      	movs	r2, #3
 8000a94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2204      	movs	r2, #4
 8000a9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	187a      	adds	r2, r7, r1
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f000 fd13 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b009      	add	sp, #36	; 0x24
 8000ab0:	bd90      	pop	{r4, r7, pc}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	40004400 	.word	0x40004400
 8000ab8:	40021000 	.word	0x40021000

08000abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac0:	e7fe      	b.n	8000ac0 <NMI_Handler+0x4>

08000ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac6:	e7fe      	b.n	8000ac6 <HardFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000acc:	46c0      	nop			; (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae0:	f000 f8ca 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <USB_IRQHandler+0x14>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 ffda 	bl	8001aac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000814 	.word	0x20000814

08000b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b0c:	4a14      	ldr	r2, [pc, #80]	; (8000b60 <_sbrk+0x5c>)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <_sbrk+0x60>)
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <_sbrk+0x64>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d102      	bne.n	8000b26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x64>)
 8000b22:	4a12      	ldr	r2, [pc, #72]	; (8000b6c <_sbrk+0x68>)
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b26:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	18d3      	adds	r3, r2, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d207      	bcs.n	8000b44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b34:	f008 fa3a 	bl	8008fac <__errno>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	220c      	movs	r2, #12
 8000b3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	425b      	negs	r3, r3
 8000b42:	e009      	b.n	8000b58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <_sbrk+0x64>)
 8000b4c:	681a      	ldr	r2, [r3, #0]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	18d2      	adds	r2, r2, r3
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <_sbrk+0x64>)
 8000b54:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b006      	add	sp, #24
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20005000 	.word	0x20005000
 8000b64:	00000400 	.word	0x00000400
 8000b68:	20000218 	.word	0x20000218
 8000b6c:	20000b18 	.word	0x20000b18

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopForever+0xe>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopForever+0x16>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ba6:	f7ff ffe3 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f008 fa05 	bl	8008fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fc75 	bl	800049c <main>

08000bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bb2:	e7fe      	b.n	8000bb2 <LoopForever>
   ldr   r0, =_estack
 8000bb4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000bc0:	08009354 	.word	0x08009354
  ldr r2, =_sbss
 8000bc4:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000bc8:	20000b18 	.word	0x20000b18

08000bcc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC1_COMP_IRQHandler>
	...

08000bd0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x3c>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <HAL_Init+0x3c>)
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	430a      	orrs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f811 	bl	8000c10 <HAL_InitTick>
 8000bee:	1e03      	subs	r3, r0, #0
 8000bf0:	d003      	beq.n	8000bfa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e001      	b.n	8000bfe <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bfa:	f7ff fecb 	bl	8000994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40022000 	.word	0x40022000

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c1a:	681c      	ldr	r4, [r3, #0]
 8000c1c:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_InitTick+0x60>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	0019      	movs	r1, r3
 8000c22:	23fa      	movs	r3, #250	; 0xfa
 8000c24:	0098      	lsls	r0, r3, #2
 8000c26:	f7ff fa6f 	bl	8000108 <__udivsi3>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	0019      	movs	r1, r3
 8000c2e:	0020      	movs	r0, r4
 8000c30:	f7ff fa6a 	bl	8000108 <__udivsi3>
 8000c34:	0003      	movs	r3, r0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 fc3d 	bl	80014b6 <HAL_SYSTICK_Config>
 8000c3c:	1e03      	subs	r3, r0, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c40:	2301      	movs	r3, #1
 8000c42:	e00f      	b.n	8000c64 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d80b      	bhi.n	8000c62 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
 8000c50:	2200      	movs	r2, #0
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 fc0a 	bl	800146c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_InitTick+0x64>)
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e000      	b.n	8000c64 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
}
 8000c64:	0018      	movs	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b003      	add	sp, #12
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000008 	.word	0x20000008
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <HAL_IncTick+0x1c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	001a      	movs	r2, r3
 8000c82:	4b05      	ldr	r3, [pc, #20]	; (8000c98 <HAL_IncTick+0x20>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	18d2      	adds	r2, r2, r3
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_IncTick+0x20>)
 8000c8a:	601a      	str	r2, [r3, #0]
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	20000008 	.word	0x20000008
 8000c98:	2000034c 	.word	0x2000034c

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b02      	ldr	r3, [pc, #8]	; (8000cac <HAL_GetTick+0x10>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000034c 	.word	0x2000034c

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff fff0 	bl	8000c9c <HAL_GetTick>
 8000cbc:	0003      	movs	r3, r0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	001a      	movs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	189b      	adds	r3, r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	f7ff ffe0 	bl	8000c9c <HAL_GetTick>
 8000cdc:	0002      	movs	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	46c0      	nop			; (mov r8, r8)
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b004      	add	sp, #16
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000008 	.word	0x20000008

08000cf8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e159      	b.n	8000fbe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d10a      	bne.n	8000d28 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2250      	movs	r2, #80	; 0x50
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fe4a 	bl	80009bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	4013      	ands	r3, r2
 8000d30:	2b10      	cmp	r3, #16
 8000d32:	d005      	beq.n	8000d40 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d3e:	d00b      	beq.n	8000d58 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d44:	2210      	movs	r2, #16
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2250      	movs	r2, #80	; 0x50
 8000d50:	2100      	movs	r1, #0
 8000d52:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e132      	b.n	8000fbe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d5c:	4a9a      	ldr	r2, [pc, #616]	; (8000fc8 <HAL_ADC_Init+0x2d0>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2202      	movs	r2, #2
 8000d62:	431a      	orrs	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	4013      	ands	r3, r2
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d108      	bne.n	8000d88 <HAL_ADC_Init+0x90>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	4013      	ands	r3, r2
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d101      	bne.n	8000d88 <HAL_ADC_Init+0x90>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <HAL_ADC_Init+0x92>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d149      	bne.n	8000e22 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
 8000d92:	23c0      	movs	r3, #192	; 0xc0
 8000d94:	061b      	lsls	r3, r3, #24
 8000d96:	429a      	cmp	r2, r3
 8000d98:	d00b      	beq.n	8000db2 <HAL_ADC_Init+0xba>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d005      	beq.n	8000db2 <HAL_ADC_Init+0xba>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	2380      	movs	r3, #128	; 0x80
 8000dac:	061b      	lsls	r3, r3, #24
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d111      	bne.n	8000dd6 <HAL_ADC_Init+0xde>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	0892      	lsrs	r2, r2, #2
 8000dc0:	611a      	str	r2, [r3, #16]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6919      	ldr	r1, [r3, #16]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	e014      	b.n	8000e00 <HAL_ADC_Init+0x108>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	0892      	lsrs	r2, r2, #2
 8000de4:	611a      	str	r2, [r3, #16]
 8000de6:	4b79      	ldr	r3, [pc, #484]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b78      	ldr	r3, [pc, #480]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000dec:	4978      	ldr	r1, [pc, #480]	; (8000fd0 <HAL_ADC_Init+0x2d8>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000df4:	6819      	ldr	r1, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4b74      	ldr	r3, [pc, #464]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2118      	movs	r1, #24
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68d9      	ldr	r1, [r3, #12]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e22:	4b6a      	ldr	r3, [pc, #424]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	4b69      	ldr	r3, [pc, #420]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000e28:	496a      	ldr	r1, [pc, #424]	; (8000fd4 <HAL_ADC_Init+0x2dc>)
 8000e2a:	400a      	ands	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000e2e:	4b67      	ldr	r3, [pc, #412]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	065a      	lsls	r2, r3, #25
 8000e38:	4b64      	ldr	r3, [pc, #400]	; (8000fcc <HAL_ADC_Init+0x2d4>)
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	2380      	movs	r3, #128	; 0x80
 8000e46:	055b      	lsls	r3, r3, #21
 8000e48:	4013      	ands	r3, r2
 8000e4a:	d108      	bne.n	8000e5e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	689a      	ldr	r2, [r3, #8]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	0549      	lsls	r1, r1, #21
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	68da      	ldr	r2, [r3, #12]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	495b      	ldr	r1, [pc, #364]	; (8000fd8 <HAL_ADC_Init+0x2e0>)
 8000e6a:	400a      	ands	r2, r1
 8000e6c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68d9      	ldr	r1, [r3, #12]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	691b      	ldr	r3, [r3, #16]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d101      	bne.n	8000e84 <HAL_ADC_Init+0x18c>
 8000e80:	2304      	movs	r3, #4
 8000e82:	e000      	b.n	8000e86 <HAL_ADC_Init+0x18e>
 8000e84:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e86:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2020      	movs	r0, #32
 8000e8c:	5c1b      	ldrb	r3, [r3, r0]
 8000e8e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000e90:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	202c      	movs	r0, #44	; 0x2c
 8000e96:	5c1b      	ldrb	r3, [r3, r0]
 8000e98:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000e9a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ea0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000ea8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	69db      	ldr	r3, [r3, #28]
 8000eae:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000eb0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ebe:	23c2      	movs	r3, #194	; 0xc2
 8000ec0:	33ff      	adds	r3, #255	; 0xff
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d00b      	beq.n	8000ede <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68d9      	ldr	r1, [r3, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	2221      	movs	r2, #33	; 0x21
 8000ee2:	5c9b      	ldrb	r3, [r3, r2]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d11a      	bne.n	8000f1e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2220      	movs	r2, #32
 8000eec:	5c9b      	ldrb	r3, [r3, r2]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d109      	bne.n	8000f06 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68da      	ldr	r2, [r3, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	0249      	lsls	r1, r1, #9
 8000f00:	430a      	orrs	r2, r1
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	e00b      	b.n	8000f1e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	2201      	movs	r2, #1
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d11f      	bne.n	8000f66 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	691a      	ldr	r2, [r3, #16]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	492a      	ldr	r1, [pc, #168]	; (8000fdc <HAL_ADC_Init+0x2e4>)
 8000f32:	400a      	ands	r2, r1
 8000f34:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	6919      	ldr	r1, [r3, #16]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f44:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000f4a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	430a      	orrs	r2, r1
 8000f62:	611a      	str	r2, [r3, #16]
 8000f64:	e00e      	b.n	8000f84 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d107      	bne.n	8000f84 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691a      	ldr	r2, [r3, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	438a      	bics	r2, r1
 8000f82:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	695a      	ldr	r2, [r3, #20]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	2107      	movs	r1, #7
 8000f90:	438a      	bics	r2, r1
 8000f92:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6959      	ldr	r1, [r3, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	4393      	bics	r3, r2
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	fffffefd 	.word	0xfffffefd
 8000fcc:	40012708 	.word	0x40012708
 8000fd0:	ffc3ffff 	.word	0xffc3ffff
 8000fd4:	fdffffff 	.word	0xfdffffff
 8000fd8:	fffe0219 	.word	0xfffe0219
 8000fdc:	fffffc03 	.word	0xfffffc03

08000fe0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe8:	230f      	movs	r3, #15
 8000fea:	18fb      	adds	r3, r7, r3
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d156      	bne.n	80010aa <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2250      	movs	r2, #80	; 0x50
 8001000:	5c9b      	ldrb	r3, [r3, r2]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d101      	bne.n	800100a <HAL_ADC_Start_IT+0x2a>
 8001006:	2302      	movs	r3, #2
 8001008:	e056      	b.n	80010b8 <HAL_ADC_Start_IT+0xd8>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2250      	movs	r2, #80	; 0x50
 800100e:	2101      	movs	r1, #1
 8001010:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d007      	beq.n	800102a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800101a:	230f      	movs	r3, #15
 800101c:	18fc      	adds	r4, r7, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	0018      	movs	r0, r3
 8001022:	f000 f8ef 	bl	8001204 <ADC_Enable>
 8001026:	0003      	movs	r3, r0
 8001028:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800102a:	230f      	movs	r3, #15
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d13e      	bne.n	80010b2 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001038:	4a21      	ldr	r2, [pc, #132]	; (80010c0 <HAL_ADC_Start_IT+0xe0>)
 800103a:	4013      	ands	r3, r2
 800103c:	2280      	movs	r2, #128	; 0x80
 800103e:	0052      	lsls	r2, r2, #1
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2250      	movs	r2, #80	; 0x50
 8001050:	2100      	movs	r1, #0
 8001052:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	221c      	movs	r2, #28
 800105a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	2b08      	cmp	r3, #8
 8001062:	d110      	bne.n	8001086 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2104      	movs	r1, #4
 8001070:	438a      	bics	r2, r1
 8001072:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2118      	movs	r1, #24
 8001080:	430a      	orrs	r2, r1
 8001082:	605a      	str	r2, [r3, #4]
          break;
 8001084:	e008      	b.n	8001098 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	211c      	movs	r1, #28
 8001092:	430a      	orrs	r2, r1
 8001094:	605a      	str	r2, [r3, #4]
          break;
 8001096:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	689a      	ldr	r2, [r3, #8]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2104      	movs	r1, #4
 80010a4:	430a      	orrs	r2, r1
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	e003      	b.n	80010b2 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010aa:	230f      	movs	r3, #15
 80010ac:	18fb      	adds	r3, r7, r3
 80010ae:	2202      	movs	r2, #2
 80010b0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010b2:	230f      	movs	r3, #15
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	781b      	ldrb	r3, [r3, #0]
}
 80010b8:	0018      	movs	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b005      	add	sp, #20
 80010be:	bd90      	pop	{r4, r7, pc}
 80010c0:	fffff0fe 	.word	0xfffff0fe

080010c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2250      	movs	r2, #80	; 0x50
 80010d2:	5c9b      	ldrb	r3, [r3, r2]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_ADC_ConfigChannel+0x18>
 80010d8:	2302      	movs	r3, #2
 80010da:	e085      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x124>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2250      	movs	r2, #80	; 0x50
 80010e0:	2101      	movs	r1, #1
 80010e2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2204      	movs	r2, #4
 80010ec:	4013      	ands	r3, r2
 80010ee:	d00b      	beq.n	8001108 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f4:	2220      	movs	r2, #32
 80010f6:	431a      	orrs	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2250      	movs	r2, #80	; 0x50
 8001100:	2100      	movs	r1, #0
 8001102:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e06f      	b.n	80011e8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a38      	ldr	r2, [pc, #224]	; (80011f0 <HAL_ADC_ConfigChannel+0x12c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d035      	beq.n	800117e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	035b      	lsls	r3, r3, #13
 800111e:	0b5a      	lsrs	r2, r3, #13
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	02db      	lsls	r3, r3, #11
 8001130:	4013      	ands	r3, r2
 8001132:	d009      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 800113a:	2180      	movs	r1, #128	; 0x80
 800113c:	0409      	lsls	r1, r1, #16
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001142:	200a      	movs	r0, #10
 8001144:	f000 f8c6 	bl	80012d4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	029b      	lsls	r3, r3, #10
 8001150:	4013      	ands	r3, r2
 8001152:	d006      	beq.n	8001162 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 800115a:	2180      	movs	r1, #128	; 0x80
 800115c:	03c9      	lsls	r1, r1, #15
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	025b      	lsls	r3, r3, #9
 800116a:	4013      	ands	r3, r2
 800116c:	d037      	beq.n	80011de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 8001174:	2180      	movs	r1, #128	; 0x80
 8001176:	0449      	lsls	r1, r1, #17
 8001178:	430a      	orrs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e02f      	b.n	80011de <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	035b      	lsls	r3, r3, #13
 800118a:	0b5b      	lsrs	r3, r3, #13
 800118c:	43d9      	mvns	r1, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	400a      	ands	r2, r1
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2380      	movs	r3, #128	; 0x80
 800119c:	02db      	lsls	r3, r3, #11
 800119e:	4013      	ands	r3, r2
 80011a0:	d005      	beq.n	80011ae <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80011a2:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 80011a8:	4913      	ldr	r1, [pc, #76]	; (80011f8 <HAL_ADC_ConfigChannel+0x134>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	029b      	lsls	r3, r3, #10
 80011b6:	4013      	ands	r3, r2
 80011b8:	d005      	beq.n	80011c6 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 80011c0:	490e      	ldr	r1, [pc, #56]	; (80011fc <HAL_ADC_ConfigChannel+0x138>)
 80011c2:	400a      	ands	r2, r1
 80011c4:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	4013      	ands	r3, r2
 80011d0:	d005      	beq.n	80011de <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <HAL_ADC_ConfigChannel+0x130>)
 80011d8:	4909      	ldr	r1, [pc, #36]	; (8001200 <HAL_ADC_ConfigChannel+0x13c>)
 80011da:	400a      	ands	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2250      	movs	r2, #80	; 0x50
 80011e2:	2100      	movs	r1, #0
 80011e4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	0018      	movs	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	00001001 	.word	0x00001001
 80011f4:	40012708 	.word	0x40012708
 80011f8:	ff7fffff 	.word	0xff7fffff
 80011fc:	ffbfffff 	.word	0xffbfffff
 8001200:	feffffff 	.word	0xfeffffff

08001204 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2203      	movs	r2, #3
 8001218:	4013      	ands	r3, r2
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <ADC_Enable+0x2c>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2201      	movs	r2, #1
 8001226:	4013      	ands	r3, r2
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <ADC_Enable+0x2c>
 800122c:	2301      	movs	r3, #1
 800122e:	e000      	b.n	8001232 <ADC_Enable+0x2e>
 8001230:	2300      	movs	r3, #0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d146      	bne.n	80012c4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	4a24      	ldr	r2, [pc, #144]	; (80012d0 <ADC_Enable+0xcc>)
 800123e:	4013      	ands	r3, r2
 8001240:	d00d      	beq.n	800125e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001246:	2210      	movs	r2, #16
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001252:	2201      	movs	r2, #1
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e033      	b.n	80012c6 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	430a      	orrs	r2, r1
 800126c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800126e:	2001      	movs	r0, #1
 8001270:	f000 f830 	bl	80012d4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001274:	f7ff fd12 	bl	8000c9c <HAL_GetTick>
 8001278:	0003      	movs	r3, r0
 800127a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800127c:	e01b      	b.n	80012b6 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800127e:	f7ff fd0d 	bl	8000c9c <HAL_GetTick>
 8001282:	0002      	movs	r2, r0
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b0a      	cmp	r3, #10
 800128a:	d914      	bls.n	80012b6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2201      	movs	r2, #1
 8001294:	4013      	ands	r3, r2
 8001296:	2b01      	cmp	r3, #1
 8001298:	d00d      	beq.n	80012b6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129e:	2210      	movs	r2, #16
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	2201      	movs	r2, #1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e007      	b.n	80012c6 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2201      	movs	r2, #1
 80012be:	4013      	ands	r3, r2
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d1dc      	bne.n	800127e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	0018      	movs	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	b004      	add	sp, #16
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	80000017 	.word	0x80000017

080012d4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <ADC_DelayMicroSecond+0x38>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	490b      	ldr	r1, [pc, #44]	; (8001310 <ADC_DelayMicroSecond+0x3c>)
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7fe ff10 	bl	8000108 <__udivsi3>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4353      	muls	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80012f2:	e002      	b.n	80012fa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d1f9      	bne.n	80012f4 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	46bd      	mov	sp, r7
 8001306:	b004      	add	sp, #16
 8001308:	bd80      	pop	{r7, pc}
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	20000000 	.word	0x20000000
 8001310:	000f4240 	.word	0x000f4240

08001314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	0002      	movs	r2, r0
 800131c:	1dfb      	adds	r3, r7, #7
 800131e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b7f      	cmp	r3, #127	; 0x7f
 8001326:	d809      	bhi.n	800133c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001328:	1dfb      	adds	r3, r7, #7
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	231f      	movs	r3, #31
 8001330:	401a      	ands	r2, r3
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_EnableIRQ+0x30>)
 8001334:	2101      	movs	r1, #1
 8001336:	4091      	lsls	r1, r2
 8001338:	000a      	movs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
  }
}
 800133c:	46c0      	nop			; (mov r8, r8)
 800133e:	46bd      	mov	sp, r7
 8001340:	b002      	add	sp, #8
 8001342:	bd80      	pop	{r7, pc}
 8001344:	e000e100 	.word	0xe000e100

08001348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	0002      	movs	r2, r0
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	1dfb      	adds	r3, r7, #7
 8001354:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b7f      	cmp	r3, #127	; 0x7f
 800135c:	d828      	bhi.n	80013b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135e:	4a2f      	ldr	r2, [pc, #188]	; (800141c <__NVIC_SetPriority+0xd4>)
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	089b      	lsrs	r3, r3, #2
 8001368:	33c0      	adds	r3, #192	; 0xc0
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	589b      	ldr	r3, [r3, r2]
 800136e:	1dfa      	adds	r2, r7, #7
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	0011      	movs	r1, r2
 8001374:	2203      	movs	r2, #3
 8001376:	400a      	ands	r2, r1
 8001378:	00d2      	lsls	r2, r2, #3
 800137a:	21ff      	movs	r1, #255	; 0xff
 800137c:	4091      	lsls	r1, r2
 800137e:	000a      	movs	r2, r1
 8001380:	43d2      	mvns	r2, r2
 8001382:	401a      	ands	r2, r3
 8001384:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	019b      	lsls	r3, r3, #6
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	401a      	ands	r2, r3
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0018      	movs	r0, r3
 8001394:	2303      	movs	r3, #3
 8001396:	4003      	ands	r3, r0
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800139c:	481f      	ldr	r0, [pc, #124]	; (800141c <__NVIC_SetPriority+0xd4>)
 800139e:	1dfb      	adds	r3, r7, #7
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b25b      	sxtb	r3, r3
 80013a4:	089b      	lsrs	r3, r3, #2
 80013a6:	430a      	orrs	r2, r1
 80013a8:	33c0      	adds	r3, #192	; 0xc0
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013ae:	e031      	b.n	8001414 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	4a1b      	ldr	r2, [pc, #108]	; (8001420 <__NVIC_SetPriority+0xd8>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	0019      	movs	r1, r3
 80013b8:	230f      	movs	r3, #15
 80013ba:	400b      	ands	r3, r1
 80013bc:	3b08      	subs	r3, #8
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3306      	adds	r3, #6
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	18d3      	adds	r3, r2, r3
 80013c6:	3304      	adds	r3, #4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	1dfa      	adds	r2, r7, #7
 80013cc:	7812      	ldrb	r2, [r2, #0]
 80013ce:	0011      	movs	r1, r2
 80013d0:	2203      	movs	r2, #3
 80013d2:	400a      	ands	r2, r1
 80013d4:	00d2      	lsls	r2, r2, #3
 80013d6:	21ff      	movs	r1, #255	; 0xff
 80013d8:	4091      	lsls	r1, r2
 80013da:	000a      	movs	r2, r1
 80013dc:	43d2      	mvns	r2, r2
 80013de:	401a      	ands	r2, r3
 80013e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	019b      	lsls	r3, r3, #6
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	401a      	ands	r2, r3
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	2303      	movs	r3, #3
 80013f2:	4003      	ands	r3, r0
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f8:	4809      	ldr	r0, [pc, #36]	; (8001420 <__NVIC_SetPriority+0xd8>)
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	001c      	movs	r4, r3
 8001400:	230f      	movs	r3, #15
 8001402:	4023      	ands	r3, r4
 8001404:	3b08      	subs	r3, #8
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	430a      	orrs	r2, r1
 800140a:	3306      	adds	r3, #6
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	18c3      	adds	r3, r0, r3
 8001410:	3304      	adds	r3, #4
 8001412:	601a      	str	r2, [r3, #0]
}
 8001414:	46c0      	nop			; (mov r8, r8)
 8001416:	46bd      	mov	sp, r7
 8001418:	b003      	add	sp, #12
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	1e5a      	subs	r2, r3, #1
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	045b      	lsls	r3, r3, #17
 8001434:	429a      	cmp	r2, r3
 8001436:	d301      	bcc.n	800143c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001438:	2301      	movs	r3, #1
 800143a:	e010      	b.n	800145e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <SysTick_Config+0x44>)
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	3a01      	subs	r2, #1
 8001442:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001444:	2301      	movs	r3, #1
 8001446:	425b      	negs	r3, r3
 8001448:	2103      	movs	r1, #3
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff7c 	bl	8001348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <SysTick_Config+0x44>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <SysTick_Config+0x44>)
 8001458:	2207      	movs	r2, #7
 800145a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800145c:	2300      	movs	r3, #0
}
 800145e:	0018      	movs	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	b002      	add	sp, #8
 8001464:	bd80      	pop	{r7, pc}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	e000e010 	.word	0xe000e010

0800146c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	210f      	movs	r1, #15
 8001478:	187b      	adds	r3, r7, r1
 800147a:	1c02      	adds	r2, r0, #0
 800147c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	187b      	adds	r3, r7, r1
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	0011      	movs	r1, r2
 8001488:	0018      	movs	r0, r3
 800148a:	f7ff ff5d 	bl	8001348 <__NVIC_SetPriority>
}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	46bd      	mov	sp, r7
 8001492:	b004      	add	sp, #16
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	0002      	movs	r2, r0
 800149e:	1dfb      	adds	r3, r7, #7
 80014a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	0018      	movs	r0, r3
 80014aa:	f7ff ff33 	bl	8001314 <__NVIC_EnableIRQ>
}
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b082      	sub	sp, #8
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ffaf 	bl	8001424 <SysTick_Config>
 80014c6:	0003      	movs	r3, r0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b002      	add	sp, #8
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014e6:	e155      	b.n	8001794 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <HAL_GPIO_Init+0x30>
 80014fe:	e146      	b.n	800178e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	2201      	movs	r2, #1
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	4013      	ands	r3, r2
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	58d3      	ldr	r3, [r2, r3]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2107      	movs	r1, #7
 80015ee:	400b      	ands	r3, r1
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	401a      	ands	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d100      	bne.n	800164c <HAL_GPIO_Init+0x17c>
 800164a:	e0a0      	b.n	800178e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 800164e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001650:	4b56      	ldr	r3, [pc, #344]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001658:	4a55      	ldr	r2, [pc, #340]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	589b      	ldr	r3, [r3, r2]
 8001664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	409a      	lsls	r2, r3
 8001672:	0013      	movs	r3, r2
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	429a      	cmp	r2, r3
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x1f6>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4a      	ldr	r2, [pc, #296]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x1f2>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x1ee>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a48      	ldr	r2, [pc, #288]	; (80017bc <HAL_GPIO_Init+0x2ec>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x1ea>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <HAL_GPIO_Init+0x2f0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x1e6>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a46      	ldr	r2, [pc, #280]	; (80017c4 <HAL_GPIO_Init+0x2f4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x1e2>
 80016ae:	2305      	movs	r3, #5
 80016b0:	e00a      	b.n	80016c8 <HAL_GPIO_Init+0x1f8>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e008      	b.n	80016c8 <HAL_GPIO_Init+0x1f8>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e006      	b.n	80016c8 <HAL_GPIO_Init+0x1f8>
 80016ba:	2303      	movs	r3, #3
 80016bc:	e004      	b.n	80016c8 <HAL_GPIO_Init+0x1f8>
 80016be:	2302      	movs	r3, #2
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_Init+0x1f8>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e000      	b.n	80016c8 <HAL_GPIO_Init+0x1f8>
 80016c6:	2300      	movs	r3, #0
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	2103      	movs	r1, #3
 80016cc:	400a      	ands	r2, r1
 80016ce:	0092      	lsls	r2, r2, #2
 80016d0:	4093      	lsls	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d8:	4935      	ldr	r1, [pc, #212]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	089b      	lsrs	r3, r3, #2
 80016de:	3302      	adds	r3, #2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e6:	4b38      	ldr	r3, [pc, #224]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43da      	mvns	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	025b      	lsls	r3, r3, #9
 80016fe:	4013      	ands	r3, r2
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4313      	orrs	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800170a:	4b2f      	ldr	r3, [pc, #188]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43da      	mvns	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	029b      	lsls	r3, r3, #10
 8001728:	4013      	ands	r3, r2
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	2380      	movs	r3, #128	; 0x80
 8001750:	035b      	lsls	r3, r3, #13
 8001752:	4013      	ands	r3, r2
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	4313      	orrs	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	2380      	movs	r3, #128	; 0x80
 800177a:	039b      	lsls	r3, r3, #14
 800177c:	4013      	ands	r3, r2
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	4313      	orrs	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <HAL_GPIO_Init+0x2f8>)
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	3301      	adds	r3, #1
 8001792:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	40da      	lsrs	r2, r3
 800179c:	1e13      	subs	r3, r2, #0
 800179e:	d000      	beq.n	80017a2 <HAL_GPIO_Init+0x2d2>
 80017a0:	e6a2      	b.n	80014e8 <HAL_GPIO_Init+0x18>
  }
}
 80017a2:	46c0      	nop			; (mov r8, r8)
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	b006      	add	sp, #24
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000
 80017b4:	50000400 	.word	0x50000400
 80017b8:	50000800 	.word	0x50000800
 80017bc:	50000c00 	.word	0x50000c00
 80017c0:	50001000 	.word	0x50001000
 80017c4:	50001c00 	.word	0x50001c00
 80017c8:	40010400 	.word	0x40010400

080017cc <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	000a      	movs	r2, r1
 80017d6:	1cbb      	adds	r3, r7, #2
 80017d8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	1cba      	adds	r2, r7, #2
 80017e0:	8812      	ldrh	r2, [r2, #0]
 80017e2:	4013      	ands	r3, r2
 80017e4:	d004      	beq.n	80017f0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80017e6:	230f      	movs	r3, #15
 80017e8:	18fb      	adds	r3, r7, r3
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
 80017ee:	e003      	b.n	80017f8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f0:	230f      	movs	r3, #15
 80017f2:	18fb      	adds	r3, r7, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80017f8:	230f      	movs	r3, #15
 80017fa:	18fb      	adds	r3, r7, r3
 80017fc:	781b      	ldrb	r3, [r3, #0]
}
 80017fe:	0018      	movs	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	b004      	add	sp, #16
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	0008      	movs	r0, r1
 8001810:	0011      	movs	r1, r2
 8001812:	1cbb      	adds	r3, r7, #2
 8001814:	1c02      	adds	r2, r0, #0
 8001816:	801a      	strh	r2, [r3, #0]
 8001818:	1c7b      	adds	r3, r7, #1
 800181a:	1c0a      	adds	r2, r1, #0
 800181c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800181e:	1c7b      	adds	r3, r7, #1
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d004      	beq.n	8001830 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001826:	1cbb      	adds	r3, r7, #2
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800182e:	e003      	b.n	8001838 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001830:	1cbb      	adds	r3, r7, #2
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b002      	add	sp, #8
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af06      	add	r7, sp, #24
 8001846:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e0ff      	b.n	8001a52 <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a81      	ldr	r2, [pc, #516]	; (8001a5c <HAL_PCD_Init+0x21c>)
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	23aa      	movs	r3, #170	; 0xaa
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	2100      	movs	r1, #0
 8001866:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	0018      	movs	r0, r3
 800186c:	f007 f87e 	bl	800896c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4a7a      	ldr	r2, [pc, #488]	; (8001a5c <HAL_PCD_Init+0x21c>)
 8001874:	2103      	movs	r1, #3
 8001876:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	0018      	movs	r0, r3
 800187e:	f003 fa8d 	bl	8004d9c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001882:	230f      	movs	r3, #15
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2200      	movs	r2, #0
 8001888:	701a      	strb	r2, [r3, #0]
 800188a:	e058      	b.n	800193e <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800188c:	200f      	movs	r0, #15
 800188e:	183b      	adds	r3, r7, r0
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	1c5a      	adds	r2, r3, #1
 8001896:	0013      	movs	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	189b      	adds	r3, r3, r2
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	18cb      	adds	r3, r1, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	2201      	movs	r2, #1
 80018a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80018a6:	183b      	adds	r3, r7, r0
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	0013      	movs	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	189b      	adds	r3, r3, r2
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	183a      	adds	r2, r7, r0
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80018bc:	0004      	movs	r4, r0
 80018be:	183b      	adds	r3, r7, r0
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	193b      	adds	r3, r7, r4
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b298      	uxth	r0, r3
 80018c8:	6879      	ldr	r1, [r7, #4]
 80018ca:	0013      	movs	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	18cb      	adds	r3, r1, r3
 80018d4:	3336      	adds	r3, #54	; 0x36
 80018d6:	1c02      	adds	r2, r0, #0
 80018d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018da:	193b      	adds	r3, r7, r4
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	1c5a      	adds	r2, r3, #1
 80018e2:	0013      	movs	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	189b      	adds	r3, r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	18cb      	adds	r3, r1, r3
 80018ec:	3303      	adds	r3, #3
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	781a      	ldrb	r2, [r3, #0]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	0013      	movs	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	189b      	adds	r3, r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	18cb      	adds	r3, r1, r3
 8001902:	3338      	adds	r3, #56	; 0x38
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001908:	193b      	adds	r3, r7, r4
 800190a:	781a      	ldrb	r2, [r3, #0]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	0013      	movs	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	189b      	adds	r3, r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	18cb      	adds	r3, r1, r3
 8001918:	333c      	adds	r3, #60	; 0x3c
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800191e:	193b      	adds	r3, r7, r4
 8001920:	781a      	ldrb	r2, [r3, #0]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	0013      	movs	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	189b      	adds	r3, r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	18cb      	adds	r3, r1, r3
 800192e:	3340      	adds	r3, #64	; 0x40
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001934:	193b      	adds	r3, r7, r4
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	193b      	adds	r3, r7, r4
 800193a:	3201      	adds	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
 800193e:	210f      	movs	r1, #15
 8001940:	187b      	adds	r3, r7, r1
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	d39f      	bcc.n	800188c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194c:	187b      	adds	r3, r7, r1
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e056      	b.n	8001a02 <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001954:	240f      	movs	r4, #15
 8001956:	193b      	adds	r3, r7, r4
 8001958:	781a      	ldrb	r2, [r3, #0]
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	236a      	movs	r3, #106	; 0x6a
 800195e:	33ff      	adds	r3, #255	; 0xff
 8001960:	0019      	movs	r1, r3
 8001962:	0013      	movs	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	189b      	adds	r3, r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	18c3      	adds	r3, r0, r3
 800196c:	185b      	adds	r3, r3, r1
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001972:	193b      	adds	r3, r7, r4
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	23b4      	movs	r3, #180	; 0xb4
 800197a:	0059      	lsls	r1, r3, #1
 800197c:	0013      	movs	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	189b      	adds	r3, r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	18c3      	adds	r3, r0, r3
 8001986:	185b      	adds	r3, r3, r1
 8001988:	193a      	adds	r2, r7, r4
 800198a:	7812      	ldrb	r2, [r2, #0]
 800198c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800198e:	193b      	adds	r3, r7, r4
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	236c      	movs	r3, #108	; 0x6c
 8001996:	33ff      	adds	r3, #255	; 0xff
 8001998:	0019      	movs	r1, r3
 800199a:	0013      	movs	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	189b      	adds	r3, r3, r2
 80019a0:	00db      	lsls	r3, r3, #3
 80019a2:	18c3      	adds	r3, r0, r3
 80019a4:	185b      	adds	r3, r3, r1
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	23bc      	movs	r3, #188	; 0xbc
 80019b2:	0059      	lsls	r1, r3, #1
 80019b4:	0013      	movs	r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	189b      	adds	r3, r3, r2
 80019ba:	00db      	lsls	r3, r3, #3
 80019bc:	18c3      	adds	r3, r0, r3
 80019be:	185b      	adds	r3, r3, r1
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	781a      	ldrb	r2, [r3, #0]
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	23be      	movs	r3, #190	; 0xbe
 80019cc:	0059      	lsls	r1, r3, #1
 80019ce:	0013      	movs	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	189b      	adds	r3, r3, r2
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	18c3      	adds	r3, r0, r3
 80019d8:	185b      	adds	r3, r3, r1
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	23c0      	movs	r3, #192	; 0xc0
 80019e6:	0059      	lsls	r1, r3, #1
 80019e8:	0013      	movs	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	189b      	adds	r3, r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	18c3      	adds	r3, r0, r3
 80019f2:	185b      	adds	r3, r3, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019f8:	193b      	adds	r3, r7, r4
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	3201      	adds	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	230f      	movs	r3, #15
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	781a      	ldrb	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d3a1      	bcc.n	8001954 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6818      	ldr	r0, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	466a      	mov	r2, sp
 8001a18:	0011      	movs	r1, r2
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	3210      	adds	r2, #16
 8001a1e:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001a20:	c170      	stmia	r1!, {r4, r5, r6}
 8001a22:	ca30      	ldmia	r2!, {r4, r5}
 8001a24:	c130      	stmia	r1!, {r4, r5}
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 f9d0 	bl	8004dd0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2224      	movs	r2, #36	; 0x24
 8001a34:	2100      	movs	r1, #0
 8001a36:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_PCD_Init+0x21c>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d103      	bne.n	8001a50 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	f001 fd1c 	bl	8003488 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b005      	add	sp, #20
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	000002a9 	.word	0x000002a9

08001a60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	23aa      	movs	r3, #170	; 0xaa
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_PCD_Start+0x18>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e014      	b.n	8001aa2 <HAL_PCD_Start+0x42>
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	23aa      	movs	r3, #170	; 0xaa
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	2101      	movs	r1, #1
 8001a80:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	0018      	movs	r0, r3
 8001a88:	f003 f972 	bl	8004d70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f005 f8cd 	bl	8006c30 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	23aa      	movs	r3, #170	; 0xaa
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b002      	add	sp, #8
 8001aa8:	bd80      	pop	{r7, pc}
	...

08001aac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f005 f8cf 	bl	8006c5c <USB_ReadInterrupts>
 8001abe:	0002      	movs	r2, r0
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	021b      	lsls	r3, r3, #8
 8001ac4:	401a      	ands	r2, r3
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d103      	bne.n	8001ad6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f000 fba3 	bl	800221c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0018      	movs	r0, r3
 8001adc:	f005 f8be 	bl	8006c5c <USB_ReadInterrupts>
 8001ae0:	0002      	movs	r2, r0
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	00db      	lsls	r3, r3, #3
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d114      	bne.n	8001b1a <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2244      	movs	r2, #68	; 0x44
 8001af6:	5a9b      	ldrh	r3, [r3, r2]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	49a2      	ldr	r1, [pc, #648]	; (8001d88 <HAL_PCD_IRQHandler+0x2dc>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	b291      	uxth	r1, r2
 8001b04:	2244      	movs	r2, #68	; 0x44
 8001b06:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f006 ffb1 	bl	8008a72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2100      	movs	r1, #0
 8001b14:	0018      	movs	r0, r3
 8001b16:	f000 f945 	bl	8001da4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f005 f89c 	bl	8006c5c <USB_ReadInterrupts>
 8001b24:	0002      	movs	r2, r0
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	01db      	lsls	r3, r3, #7
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d10b      	bne.n	8001b4c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2244      	movs	r2, #68	; 0x44
 8001b3a:	5a9b      	ldrh	r3, [r3, r2]
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4992      	ldr	r1, [pc, #584]	; (8001d8c <HAL_PCD_IRQHandler+0x2e0>)
 8001b44:	400a      	ands	r2, r1
 8001b46:	b291      	uxth	r1, r2
 8001b48:	2244      	movs	r2, #68	; 0x44
 8001b4a:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0018      	movs	r0, r3
 8001b52:	f005 f883 	bl	8006c5c <USB_ReadInterrupts>
 8001b56:	0002      	movs	r2, r0
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	019b      	lsls	r3, r3, #6
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	019b      	lsls	r3, r3, #6
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d10b      	bne.n	8001b7e <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2244      	movs	r2, #68	; 0x44
 8001b6c:	5a9b      	ldrh	r3, [r3, r2]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4986      	ldr	r1, [pc, #536]	; (8001d90 <HAL_PCD_IRQHandler+0x2e4>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	b291      	uxth	r1, r2
 8001b7a:	2244      	movs	r2, #68	; 0x44
 8001b7c:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f005 f86a 	bl	8006c5c <USB_ReadInterrupts>
 8001b88:	0002      	movs	r2, r0
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	015b      	lsls	r3, r3, #5
 8001b8e:	401a      	ands	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	015b      	lsls	r3, r3, #5
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d137      	bne.n	8001c08 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2240      	movs	r2, #64	; 0x40
 8001b9e:	5a9b      	ldrh	r3, [r3, r2]
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	438a      	bics	r2, r1
 8001baa:	b291      	uxth	r1, r2
 8001bac:	2240      	movs	r2, #64	; 0x40
 8001bae:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2240      	movs	r2, #64	; 0x40
 8001bb6:	5a9b      	ldrh	r3, [r3, r2]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	438a      	bics	r2, r1
 8001bc2:	b291      	uxth	r1, r2
 8001bc4:	2240      	movs	r2, #64	; 0x40
 8001bc6:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	23b8      	movs	r3, #184	; 0xb8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d109      	bne.n	8001be8 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	23b8      	movs	r3, #184	; 0xb8
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	2100      	movs	r1, #0
 8001bdc:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2100      	movs	r1, #0
 8001be2:	0018      	movs	r0, r3
 8001be4:	f001 fc7a 	bl	80034dc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f006 ff82 	bl	8008af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2244      	movs	r2, #68	; 0x44
 8001bf6:	5a9b      	ldrh	r3, [r3, r2]
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4965      	ldr	r1, [pc, #404]	; (8001d94 <HAL_PCD_IRQHandler+0x2e8>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	b291      	uxth	r1, r2
 8001c04:	2244      	movs	r2, #68	; 0x44
 8001c06:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f005 f825 	bl	8006c5c <USB_ReadInterrupts>
 8001c12:	0002      	movs	r2, r0
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	401a      	ands	r2, r3
 8001c1a:	2380      	movs	r3, #128	; 0x80
 8001c1c:	011b      	lsls	r3, r3, #4
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d127      	bne.n	8001c72 <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2240      	movs	r2, #64	; 0x40
 8001c28:	5a9b      	ldrh	r3, [r3, r2]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2108      	movs	r1, #8
 8001c32:	430a      	orrs	r2, r1
 8001c34:	b291      	uxth	r1, r2
 8001c36:	2240      	movs	r2, #64	; 0x40
 8001c38:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2244      	movs	r2, #68	; 0x44
 8001c40:	5a9b      	ldrh	r3, [r3, r2]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4953      	ldr	r1, [pc, #332]	; (8001d98 <HAL_PCD_IRQHandler+0x2ec>)
 8001c4a:	400a      	ands	r2, r1
 8001c4c:	b291      	uxth	r1, r2
 8001c4e:	2244      	movs	r2, #68	; 0x44
 8001c50:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	5a9b      	ldrh	r3, [r3, r2]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2104      	movs	r1, #4
 8001c62:	430a      	orrs	r2, r1
 8001c64:	b291      	uxth	r1, r2
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f006 ff25 	bl	8008abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	0018      	movs	r0, r3
 8001c78:	f004 fff0 	bl	8006c5c <USB_ReadInterrupts>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b80      	cmp	r3, #128	; 0x80
 8001c84:	d145      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2244      	movs	r2, #68	; 0x44
 8001c8c:	5a9b      	ldrh	r3, [r3, r2]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2180      	movs	r1, #128	; 0x80
 8001c96:	438a      	bics	r2, r1
 8001c98:	b291      	uxth	r1, r2
 8001c9a:	2244      	movs	r2, #68	; 0x44
 8001c9c:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	23b8      	movs	r3, #184	; 0xb8
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	5cd3      	ldrb	r3, [r2, r3]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d12f      	bne.n	8001d0a <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	5a9b      	ldrh	r3, [r3, r2]
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2104      	movs	r1, #4
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	b291      	uxth	r1, r2
 8001cbe:	2240      	movs	r2, #64	; 0x40
 8001cc0:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	5a9b      	ldrh	r3, [r3, r2]
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2108      	movs	r1, #8
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	b291      	uxth	r1, r2
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	23b8      	movs	r3, #184	; 0xb8
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2254      	movs	r2, #84	; 0x54
 8001cea:	5a9b      	ldrh	r3, [r3, r2]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	223c      	movs	r2, #60	; 0x3c
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	23b9      	movs	r3, #185	; 0xb9
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2101      	movs	r1, #1
 8001d02:	0018      	movs	r0, r3
 8001d04:	f001 fbea 	bl	80034dc <HAL_PCDEx_LPM_Callback>
 8001d08:	e003      	b.n	8001d12 <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f006 fed5 	bl	8008abc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	0018      	movs	r0, r3
 8001d18:	f004 ffa0 	bl	8006c5c <USB_ReadInterrupts>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	401a      	ands	r2, r3
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10f      	bne.n	8001d4c <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2244      	movs	r2, #68	; 0x44
 8001d32:	5a9b      	ldrh	r3, [r3, r2]
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4918      	ldr	r1, [pc, #96]	; (8001d9c <HAL_PCD_IRQHandler+0x2f0>)
 8001d3c:	400a      	ands	r2, r1
 8001d3e:	b291      	uxth	r1, r2
 8001d40:	2244      	movs	r2, #68	; 0x44
 8001d42:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	0018      	movs	r0, r3
 8001d48:	f006 fe84 	bl	8008a54 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f004 ff83 	bl	8006c5c <USB_ReadInterrupts>
 8001d56:	0002      	movs	r2, r0
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	401a      	ands	r2, r3
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d10b      	bne.n	8001d7e <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2244      	movs	r2, #68	; 0x44
 8001d6c:	5a9b      	ldrh	r3, [r3, r2]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	490a      	ldr	r1, [pc, #40]	; (8001da0 <HAL_PCD_IRQHandler+0x2f4>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	b291      	uxth	r1, r2
 8001d7a:	2244      	movs	r2, #68	; 0x44
 8001d7c:	5299      	strh	r1, [r3, r2]
  }
}
 8001d7e:	46c0      	nop			; (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	fffffbff 	.word	0xfffffbff
 8001d8c:	ffffbfff 	.word	0xffffbfff
 8001d90:	ffffdfff 	.word	0xffffdfff
 8001d94:	ffffefff 	.word	0xffffefff
 8001d98:	fffff7ff 	.word	0xfffff7ff
 8001d9c:	fffffdff 	.word	0xfffffdff
 8001da0:	fffffeff 	.word	0xfffffeff

08001da4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	000a      	movs	r2, r1
 8001dae:	1cfb      	adds	r3, r7, #3
 8001db0:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	23aa      	movs	r3, #170	; 0xaa
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	5cd3      	ldrb	r3, [r2, r3]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d101      	bne.n	8001dc2 <HAL_PCD_SetAddress+0x1e>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e017      	b.n	8001df2 <HAL_PCD_SetAddress+0x4e>
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	23aa      	movs	r3, #170	; 0xaa
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	2101      	movs	r1, #1
 8001dca:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	1cfa      	adds	r2, r7, #3
 8001dd0:	2124      	movs	r1, #36	; 0x24
 8001dd2:	7812      	ldrb	r2, [r2, #0]
 8001dd4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	1cfb      	adds	r3, r7, #3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	0019      	movs	r1, r3
 8001de0:	0010      	movs	r0, r2
 8001de2:	f004 ff11 	bl	8006c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	23aa      	movs	r3, #170	; 0xaa
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	2100      	movs	r1, #0
 8001dee:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001dfa:	b590      	push	{r4, r7, lr}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	000c      	movs	r4, r1
 8001e04:	0010      	movs	r0, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	1cfb      	adds	r3, r7, #3
 8001e0a:	1c22      	adds	r2, r4, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
 8001e0e:	003b      	movs	r3, r7
 8001e10:	1c02      	adds	r2, r0, #0
 8001e12:	801a      	strh	r2, [r3, #0]
 8001e14:	1cbb      	adds	r3, r7, #2
 8001e16:	1c0a      	adds	r2, r1, #0
 8001e18:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001e1a:	230b      	movs	r3, #11
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e22:	1cfb      	adds	r3, r7, #3
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	b25b      	sxtb	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da0f      	bge.n	8001e4c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2c:	1cfb      	adds	r3, r7, #3
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2207      	movs	r2, #7
 8001e32:	4013      	ands	r3, r2
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	0013      	movs	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	189b      	adds	r3, r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	18d3      	adds	r3, r2, r3
 8001e42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	705a      	strb	r2, [r3, #1]
 8001e4a:	e00f      	b.n	8001e6c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e4c:	1cfb      	adds	r3, r7, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2207      	movs	r2, #7
 8001e52:	401a      	ands	r2, r3
 8001e54:	0013      	movs	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	189b      	adds	r3, r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	3369      	adds	r3, #105	; 0x69
 8001e5e:	33ff      	adds	r3, #255	; 0xff
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	18d3      	adds	r3, r2, r3
 8001e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6c:	1cfb      	adds	r3, r7, #3
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2207      	movs	r2, #7
 8001e72:	4013      	ands	r3, r2
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	1cba      	adds	r2, r7, #2
 8001e86:	7812      	ldrb	r2, [r2, #0]
 8001e88:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e9c:	1cbb      	adds	r3, r7, #2
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d102      	bne.n	8001eaa <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	23aa      	movs	r3, #170	; 0xaa
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	5cd3      	ldrb	r3, [r2, r3]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_EP_Open+0xc0>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	e013      	b.n	8001ee2 <HAL_PCD_EP_Open+0xe8>
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	23aa      	movs	r3, #170	; 0xaa
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	0011      	movs	r1, r2
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f002 ffab 	bl	8004e28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	23aa      	movs	r3, #170	; 0xaa
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	2100      	movs	r1, #0
 8001eda:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001edc:	230b      	movs	r3, #11
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	781b      	ldrb	r3, [r3, #0]
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b005      	add	sp, #20
 8001ee8:	bd90      	pop	{r4, r7, pc}

08001eea <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b084      	sub	sp, #16
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	1cfb      	adds	r3, r7, #3
 8001ef6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ef8:	1cfb      	adds	r3, r7, #3
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	b25b      	sxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da0f      	bge.n	8001f22 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f02:	1cfb      	adds	r3, r7, #3
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2207      	movs	r2, #7
 8001f08:	4013      	ands	r3, r2
 8001f0a:	1c5a      	adds	r2, r3, #1
 8001f0c:	0013      	movs	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	189b      	adds	r3, r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	18d3      	adds	r3, r2, r3
 8001f18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	705a      	strb	r2, [r3, #1]
 8001f20:	e00f      	b.n	8001f42 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f22:	1cfb      	adds	r3, r7, #3
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2207      	movs	r2, #7
 8001f28:	401a      	ands	r2, r3
 8001f2a:	0013      	movs	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	189b      	adds	r3, r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	3369      	adds	r3, #105	; 0x69
 8001f34:	33ff      	adds	r3, #255	; 0xff
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	18d3      	adds	r3, r2, r3
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001f42:	1cfb      	adds	r3, r7, #3
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2207      	movs	r2, #7
 8001f48:	4013      	ands	r3, r2
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	23aa      	movs	r3, #170	; 0xaa
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	5cd3      	ldrb	r3, [r2, r3]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_PCD_EP_Close+0x76>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e011      	b.n	8001f84 <HAL_PCD_EP_Close+0x9a>
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	23aa      	movs	r3, #170	; 0xaa
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	2101      	movs	r1, #1
 8001f68:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	0011      	movs	r1, r2
 8001f72:	0018      	movs	r0, r3
 8001f74:	f003 facc 	bl	8005510 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	23aa      	movs	r3, #170	; 0xaa
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	2100      	movs	r1, #0
 8001f80:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	603b      	str	r3, [r7, #0]
 8001f98:	200b      	movs	r0, #11
 8001f9a:	183b      	adds	r3, r7, r0
 8001f9c:	1c0a      	adds	r2, r1, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa0:	0001      	movs	r1, r0
 8001fa2:	187b      	adds	r3, r7, r1
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	401a      	ands	r2, r3
 8001faa:	0013      	movs	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	3369      	adds	r3, #105	; 0x69
 8001fb4:	33ff      	adds	r3, #255	; 0xff
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	18d3      	adds	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	187b      	adds	r3, r7, r1
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2207      	movs	r2, #7
 8001fda:	4013      	ands	r3, r2
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2207      	movs	r2, #7
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d107      	bne.n	8001ffc <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	f003 fc4b 	bl	8005890 <USB_EPStartXfer>
 8001ffa:	e006      	b.n	800200a <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	0011      	movs	r1, r2
 8002004:	0018      	movs	r0, r3
 8002006:	f003 fc43 	bl	8005890 <USB_EPStartXfer>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	0018      	movs	r0, r3
 800200e:	46bd      	mov	sp, r7
 8002010:	b006      	add	sp, #24
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b086      	sub	sp, #24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	200b      	movs	r0, #11
 8002022:	183b      	adds	r3, r7, r0
 8002024:	1c0a      	adds	r2, r1, #0
 8002026:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002028:	183b      	adds	r3, r7, r0
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2207      	movs	r2, #7
 800202e:	4013      	ands	r3, r2
 8002030:	1c5a      	adds	r2, r3, #1
 8002032:	0013      	movs	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	189b      	adds	r3, r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	18d3      	adds	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	2101      	movs	r1, #1
 8002052:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2201      	movs	r2, #1
 8002064:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002066:	183b      	adds	r3, r7, r0
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2207      	movs	r2, #7
 800206c:	4013      	ands	r3, r2
 800206e:	b2da      	uxtb	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002074:	183b      	adds	r3, r7, r0
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2207      	movs	r2, #7
 800207a:	4013      	ands	r3, r2
 800207c:	d107      	bne.n	800208e <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	0011      	movs	r1, r2
 8002086:	0018      	movs	r0, r3
 8002088:	f003 fc02 	bl	8005890 <USB_EPStartXfer>
 800208c:	e006      	b.n	800209c <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	0011      	movs	r1, r2
 8002096:	0018      	movs	r0, r3
 8002098:	f003 fbfa 	bl	8005890 <USB_EPStartXfer>
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b006      	add	sp, #24
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	000a      	movs	r2, r1
 80020b0:	1cfb      	adds	r3, r7, #3
 80020b2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80020b4:	1cfb      	adds	r3, r7, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2207      	movs	r2, #7
 80020ba:	401a      	ands	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d901      	bls.n	80020c8 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e046      	b.n	8002156 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c8:	1cfb      	adds	r3, r7, #3
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	b25b      	sxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	da0f      	bge.n	80020f2 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020d2:	1cfb      	adds	r3, r7, #3
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2207      	movs	r2, #7
 80020d8:	4013      	ands	r3, r2
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	0013      	movs	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	189b      	adds	r3, r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	18d3      	adds	r3, r2, r3
 80020e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2201      	movs	r2, #1
 80020ee:	705a      	strb	r2, [r3, #1]
 80020f0:	e00d      	b.n	800210e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80020f2:	1cfb      	adds	r3, r7, #3
 80020f4:	781a      	ldrb	r2, [r3, #0]
 80020f6:	0013      	movs	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	189b      	adds	r3, r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	3369      	adds	r3, #105	; 0x69
 8002100:	33ff      	adds	r3, #255	; 0xff
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	18d3      	adds	r3, r2, r3
 8002106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002114:	1cfb      	adds	r3, r7, #3
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2207      	movs	r2, #7
 800211a:	4013      	ands	r3, r2
 800211c:	b2da      	uxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	23aa      	movs	r3, #170	; 0xaa
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	5cd3      	ldrb	r3, [r2, r3]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_PCD_EP_SetStall+0x8c>
 800212e:	2302      	movs	r3, #2
 8002130:	e011      	b.n	8002156 <HAL_PCD_EP_SetStall+0xb0>
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	23aa      	movs	r3, #170	; 0xaa
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	2101      	movs	r1, #1
 800213a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	0011      	movs	r1, r2
 8002144:	0018      	movs	r0, r3
 8002146:	f004 fc5d 	bl	8006a04 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	23aa      	movs	r3, #170	; 0xaa
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	2100      	movs	r1, #0
 8002152:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b004      	add	sp, #16
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	000a      	movs	r2, r1
 8002168:	1cfb      	adds	r3, r7, #3
 800216a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800216c:	1cfb      	adds	r3, r7, #3
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	220f      	movs	r2, #15
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	d901      	bls.n	8002180 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e048      	b.n	8002212 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002180:	1cfb      	adds	r3, r7, #3
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	da0f      	bge.n	80021aa <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218a:	1cfb      	adds	r3, r7, #3
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2207      	movs	r2, #7
 8002190:	4013      	ands	r3, r2
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	0013      	movs	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	189b      	adds	r3, r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	18d3      	adds	r3, r2, r3
 80021a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	705a      	strb	r2, [r3, #1]
 80021a8:	e00f      	b.n	80021ca <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021aa:	1cfb      	adds	r3, r7, #3
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	2207      	movs	r2, #7
 80021b0:	401a      	ands	r2, r3
 80021b2:	0013      	movs	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	189b      	adds	r3, r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	3369      	adds	r3, #105	; 0x69
 80021bc:	33ff      	adds	r3, #255	; 0xff
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	18d3      	adds	r3, r2, r3
 80021c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d0:	1cfb      	adds	r3, r7, #3
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2207      	movs	r2, #7
 80021d6:	4013      	ands	r3, r2
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	23aa      	movs	r3, #170	; 0xaa
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d101      	bne.n	80021ee <HAL_PCD_EP_ClrStall+0x90>
 80021ea:	2302      	movs	r3, #2
 80021ec:	e011      	b.n	8002212 <HAL_PCD_EP_ClrStall+0xb4>
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	23aa      	movs	r3, #170	; 0xaa
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	2101      	movs	r1, #1
 80021f6:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f004 fc4f 	bl	8006aa4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	23aa      	movs	r3, #170	; 0xaa
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	2100      	movs	r1, #0
 800220e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	0018      	movs	r0, r3
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800221c:	b5b0      	push	{r4, r5, r7, lr}
 800221e:	b096      	sub	sp, #88	; 0x58
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002224:	f000 fbd8 	bl	80029d8 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	2056      	movs	r0, #86	; 0x56
 800222e:	183b      	adds	r3, r7, r0
 8002230:	2144      	movs	r1, #68	; 0x44
 8002232:	5a52      	ldrh	r2, [r2, r1]
 8002234:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002236:	183b      	adds	r3, r7, r0
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	2455      	movs	r4, #85	; 0x55
 800223e:	193b      	adds	r3, r7, r4
 8002240:	210f      	movs	r1, #15
 8002242:	400a      	ands	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8002246:	193b      	adds	r3, r7, r4
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d000      	beq.n	8002250 <PCD_EP_ISR_Handler+0x34>
 800224e:	e179      	b.n	8002544 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002250:	183b      	adds	r3, r7, r0
 8002252:	881b      	ldrh	r3, [r3, #0]
 8002254:	2210      	movs	r2, #16
 8002256:	4013      	ands	r3, r2
 8002258:	d154      	bne.n	8002304 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	b29a      	uxth	r2, r3
 8002262:	200e      	movs	r0, #14
 8002264:	183b      	adds	r3, r7, r0
 8002266:	49af      	ldr	r1, [pc, #700]	; (8002524 <PCD_EP_ISR_Handler+0x308>)
 8002268:	400a      	ands	r2, r1
 800226a:	801a      	strh	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	183a      	adds	r2, r7, r0
 8002272:	8812      	ldrh	r2, [r2, #0]
 8002274:	49ac      	ldr	r1, [pc, #688]	; (8002528 <PCD_EP_ISR_Handler+0x30c>)
 8002276:	430a      	orrs	r2, r1
 8002278:	b292      	uxth	r2, r2
 800227a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3328      	adds	r3, #40	; 0x28
 8002280:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2250      	movs	r2, #80	; 0x50
 8002288:	5a9b      	ldrh	r3, [r3, r2]
 800228a:	b29b      	uxth	r3, r3
 800228c:	001a      	movs	r2, r3
 800228e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	18d2      	adds	r2, r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	18d3      	adds	r3, r2, r3
 800229c:	4aa3      	ldr	r2, [pc, #652]	; (800252c <PCD_EP_ISR_Handler+0x310>)
 800229e:	4694      	mov	ip, r2
 80022a0:	4463      	add	r3, ip
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	059b      	lsls	r3, r3, #22
 80022a6:	0d9a      	lsrs	r2, r3, #22
 80022a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80022ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	18d2      	adds	r2, r2, r3
 80022b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2100      	movs	r1, #0
 80022be:	0018      	movs	r0, r3
 80022c0:	f006 fbaa 	bl	8008a18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	5c9b      	ldrb	r3, [r3, r2]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <PCD_EP_ISR_Handler+0xb8>
 80022d0:	f000 fb82 	bl	80029d8 <PCD_EP_ISR_Handler+0x7bc>
 80022d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <PCD_EP_ISR_Handler+0xc4>
 80022dc:	f000 fb7c 	bl	80029d8 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2224      	movs	r2, #36	; 0x24
 80022e4:	5c9b      	ldrb	r3, [r3, r2]
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	2280      	movs	r2, #128	; 0x80
 80022ea:	4252      	negs	r2, r2
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	b291      	uxth	r1, r2
 80022f6:	224c      	movs	r2, #76	; 0x4c
 80022f8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2224      	movs	r2, #36	; 0x24
 80022fe:	2100      	movs	r1, #0
 8002300:	5499      	strb	r1, [r3, r2]
 8002302:	e369      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3369      	adds	r3, #105	; 0x69
 8002308:	33ff      	adds	r3, #255	; 0xff
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2152      	movs	r1, #82	; 0x52
 8002312:	187b      	adds	r3, r7, r1
 8002314:	8812      	ldrh	r2, [r2, #0]
 8002316:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002318:	187b      	adds	r3, r7, r1
 800231a:	881a      	ldrh	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	4013      	ands	r3, r2
 8002322:	d037      	beq.n	8002394 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2250      	movs	r2, #80	; 0x50
 800232a:	5a9b      	ldrh	r3, [r3, r2]
 800232c:	b29b      	uxth	r3, r3
 800232e:	001a      	movs	r2, r3
 8002330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	18d2      	adds	r2, r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	18d3      	adds	r3, r2, r3
 800233e:	4a7c      	ldr	r2, [pc, #496]	; (8002530 <PCD_EP_ISR_Handler+0x314>)
 8002340:	4694      	mov	ip, r2
 8002342:	4463      	add	r3, ip
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	059b      	lsls	r3, r3, #22
 8002348:	0d9a      	lsrs	r2, r3, #22
 800234a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800234c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6818      	ldr	r0, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	22ac      	movs	r2, #172	; 0xac
 8002356:	0092      	lsls	r2, r2, #2
 8002358:	1899      	adds	r1, r3, r2
 800235a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800235c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800235e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002360:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002362:	b29b      	uxth	r3, r3
 8002364:	f004 fccc 	bl	8006d00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29a      	uxth	r2, r3
 8002370:	2010      	movs	r0, #16
 8002372:	183b      	adds	r3, r7, r0
 8002374:	496f      	ldr	r1, [pc, #444]	; (8002534 <PCD_EP_ISR_Handler+0x318>)
 8002376:	400a      	ands	r2, r1
 8002378:	801a      	strh	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	183a      	adds	r2, r7, r0
 8002380:	8812      	ldrh	r2, [r2, #0]
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	430a      	orrs	r2, r1
 8002386:	b292      	uxth	r2, r2
 8002388:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	0018      	movs	r0, r3
 800238e:	f006 fb0d 	bl	80089ac <HAL_PCD_SetupStageCallback>
 8002392:	e321      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002394:	2352      	movs	r3, #82	; 0x52
 8002396:	18fb      	adds	r3, r7, r3
 8002398:	2200      	movs	r2, #0
 800239a:	5e9b      	ldrsh	r3, [r3, r2]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db00      	blt.n	80023a2 <PCD_EP_ISR_Handler+0x186>
 80023a0:	e31a      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	201e      	movs	r0, #30
 80023ac:	183b      	adds	r3, r7, r0
 80023ae:	4961      	ldr	r1, [pc, #388]	; (8002534 <PCD_EP_ISR_Handler+0x318>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	801a      	strh	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	183a      	adds	r2, r7, r0
 80023ba:	8812      	ldrh	r2, [r2, #0]
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	430a      	orrs	r2, r1
 80023c0:	b292      	uxth	r2, r2
 80023c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2250      	movs	r2, #80	; 0x50
 80023ca:	5a9b      	ldrh	r3, [r3, r2]
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	001a      	movs	r2, r3
 80023d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	18d2      	adds	r2, r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	18d3      	adds	r3, r2, r3
 80023de:	4a54      	ldr	r2, [pc, #336]	; (8002530 <PCD_EP_ISR_Handler+0x314>)
 80023e0:	4694      	mov	ip, r2
 80023e2:	4463      	add	r3, ip
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	059b      	lsls	r3, r3, #22
 80023e8:	0d9a      	lsrs	r2, r3, #22
 80023ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80023ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d01a      	beq.n	800242c <PCD_EP_ISR_Handler+0x210>
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002404:	6959      	ldr	r1, [r3, #20]
 8002406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002408:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800240e:	b29b      	uxth	r3, r3
 8002410:	f004 fc76 	bl	8006d00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002416:	695a      	ldr	r2, [r3, #20]
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	18d2      	adds	r2, r2, r3
 800241e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002420:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2100      	movs	r1, #0
 8002426:	0018      	movs	r0, r3
 8002428:	f006 fad5 	bl	80089d6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	881b      	ldrh	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	001a      	movs	r2, r3
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4013      	ands	r3, r2
 800243c:	d000      	beq.n	8002440 <PCD_EP_ISR_Handler+0x224>
 800243e:	e2cb      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2250      	movs	r2, #80	; 0x50
 800244c:	5a9b      	ldrh	r3, [r3, r2]
 800244e:	b29b      	uxth	r3, r3
 8002450:	001a      	movs	r2, r3
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	189b      	adds	r3, r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	4a35      	ldr	r2, [pc, #212]	; (8002530 <PCD_EP_ISR_Handler+0x314>)
 800245c:	4694      	mov	ip, r2
 800245e:	4463      	add	r3, ip
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d110      	bne.n	800248c <PCD_EP_ISR_Handler+0x270>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <PCD_EP_ISR_Handler+0x31c>)
 8002472:	4013      	ands	r3, r2
 8002474:	b29a      	uxth	r2, r3
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	801a      	strh	r2, [r3, #0]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	4a29      	ldr	r2, [pc, #164]	; (8002528 <PCD_EP_ISR_Handler+0x30c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	b29a      	uxth	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	801a      	strh	r2, [r3, #0]
 800248a:	e02b      	b.n	80024e4 <PCD_EP_ISR_Handler+0x2c8>
 800248c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b3e      	cmp	r3, #62	; 0x3e
 8002492:	d812      	bhi.n	80024ba <PCD_EP_ISR_Handler+0x29e>
 8002494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	085b      	lsrs	r3, r3, #1
 800249a:	647b      	str	r3, [r7, #68]	; 0x44
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	2201      	movs	r2, #1
 80024a2:	4013      	ands	r3, r2
 80024a4:	d002      	beq.n	80024ac <PCD_EP_ISR_Handler+0x290>
 80024a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a8:	3301      	adds	r3, #1
 80024aa:	647b      	str	r3, [r7, #68]	; 0x44
 80024ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	029b      	lsls	r3, r3, #10
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	801a      	strh	r2, [r3, #0]
 80024b8:	e014      	b.n	80024e4 <PCD_EP_ISR_Handler+0x2c8>
 80024ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	647b      	str	r3, [r7, #68]	; 0x44
 80024c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	221f      	movs	r2, #31
 80024c8:	4013      	ands	r3, r2
 80024ca:	d102      	bne.n	80024d2 <PCD_EP_ISR_Handler+0x2b6>
 80024cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ce:	3b01      	subs	r3, #1
 80024d0:	647b      	str	r3, [r7, #68]	; 0x44
 80024d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	029b      	lsls	r3, r3, #10
 80024d8:	b29b      	uxth	r3, r3
 80024da:	4a13      	ldr	r2, [pc, #76]	; (8002528 <PCD_EP_ISR_Handler+0x30c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	b29a      	uxth	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	2012      	movs	r0, #18
 80024ee:	183b      	adds	r3, r7, r0
 80024f0:	4912      	ldr	r1, [pc, #72]	; (800253c <PCD_EP_ISR_Handler+0x320>)
 80024f2:	400a      	ands	r2, r1
 80024f4:	801a      	strh	r2, [r3, #0]
 80024f6:	183b      	adds	r3, r7, r0
 80024f8:	183a      	adds	r2, r7, r0
 80024fa:	8812      	ldrh	r2, [r2, #0]
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	0149      	lsls	r1, r1, #5
 8002500:	404a      	eors	r2, r1
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	183b      	adds	r3, r7, r0
 8002506:	183a      	adds	r2, r7, r0
 8002508:	8812      	ldrh	r2, [r2, #0]
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0189      	lsls	r1, r1, #6
 800250e:	404a      	eors	r2, r1
 8002510:	801a      	strh	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	183a      	adds	r2, r7, r0
 8002518:	8812      	ldrh	r2, [r2, #0]
 800251a:	4909      	ldr	r1, [pc, #36]	; (8002540 <PCD_EP_ISR_Handler+0x324>)
 800251c:	430a      	orrs	r2, r1
 800251e:	b292      	uxth	r2, r2
 8002520:	801a      	strh	r2, [r3, #0]
 8002522:	e259      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
 8002524:	ffff8f0f 	.word	0xffff8f0f
 8002528:	ffff8000 	.word	0xffff8000
 800252c:	00000402 	.word	0x00000402
 8002530:	00000406 	.word	0x00000406
 8002534:	00000f8f 	.word	0x00000f8f
 8002538:	ffff83ff 	.word	0xffff83ff
 800253c:	ffffbf8f 	.word	0xffffbf8f
 8002540:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	001a      	movs	r2, r3
 800254a:	2055      	movs	r0, #85	; 0x55
 800254c:	183b      	adds	r3, r7, r0
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	18d2      	adds	r2, r2, r3
 8002554:	2152      	movs	r1, #82	; 0x52
 8002556:	187b      	adds	r3, r7, r1
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800255c:	187b      	adds	r3, r7, r1
 800255e:	2200      	movs	r2, #0
 8002560:	5e9b      	ldrsh	r3, [r3, r2]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db00      	blt.n	8002568 <PCD_EP_ISR_Handler+0x34c>
 8002566:	e0fa      	b.n	800275e <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	001a      	movs	r2, r3
 800256e:	183b      	adds	r3, r7, r0
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	18d3      	adds	r3, r2, r3
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	b29a      	uxth	r2, r3
 800257a:	2450      	movs	r4, #80	; 0x50
 800257c:	193b      	adds	r3, r7, r4
 800257e:	49cf      	ldr	r1, [pc, #828]	; (80028bc <PCD_EP_ISR_Handler+0x6a0>)
 8002580:	400a      	ands	r2, r1
 8002582:	801a      	strh	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	001a      	movs	r2, r3
 800258a:	183b      	adds	r3, r7, r0
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	18d3      	adds	r3, r2, r3
 8002592:	193a      	adds	r2, r7, r4
 8002594:	8812      	ldrh	r2, [r2, #0]
 8002596:	2180      	movs	r1, #128	; 0x80
 8002598:	430a      	orrs	r2, r1
 800259a:	b292      	uxth	r2, r2
 800259c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800259e:	183b      	adds	r3, r7, r0
 80025a0:	781a      	ldrb	r2, [r3, #0]
 80025a2:	0013      	movs	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	3369      	adds	r3, #105	; 0x69
 80025ac:	33ff      	adds	r3, #255	; 0xff
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	18d3      	adds	r3, r2, r3
 80025b2:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80025b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b6:	7b1b      	ldrb	r3, [r3, #12]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d125      	bne.n	8002608 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2250      	movs	r2, #80	; 0x50
 80025c2:	5a9b      	ldrh	r3, [r3, r2]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	001a      	movs	r2, r3
 80025c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	18d2      	adds	r2, r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	18d3      	adds	r3, r2, r3
 80025d6:	4aba      	ldr	r2, [pc, #744]	; (80028c0 <PCD_EP_ISR_Handler+0x6a4>)
 80025d8:	4694      	mov	ip, r2
 80025da:	4463      	add	r3, ip
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	2448      	movs	r4, #72	; 0x48
 80025e0:	193b      	adds	r3, r7, r4
 80025e2:	0592      	lsls	r2, r2, #22
 80025e4:	0d92      	lsrs	r2, r2, #22
 80025e6:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80025e8:	193b      	adds	r3, r7, r4
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d100      	bne.n	80025f2 <PCD_EP_ISR_Handler+0x3d6>
 80025f0:	e08d      	b.n	800270e <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6818      	ldr	r0, [r3, #0]
 80025f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f8:	6959      	ldr	r1, [r3, #20]
 80025fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fc:	88da      	ldrh	r2, [r3, #6]
 80025fe:	193b      	adds	r3, r7, r4
 8002600:	881b      	ldrh	r3, [r3, #0]
 8002602:	f004 fb7d 	bl	8006d00 <USB_ReadPMA>
 8002606:	e082      	b.n	800270e <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800260a:	78db      	ldrb	r3, [r3, #3]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d10c      	bne.n	800262a <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002610:	2348      	movs	r3, #72	; 0x48
 8002612:	18fc      	adds	r4, r7, r3
 8002614:	2352      	movs	r3, #82	; 0x52
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	881a      	ldrh	r2, [r3, #0]
 800261a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	0018      	movs	r0, r3
 8002620:	f000 f9ee 	bl	8002a00 <HAL_PCD_EP_DB_Receive>
 8002624:	0003      	movs	r3, r0
 8002626:	8023      	strh	r3, [r4, #0]
 8002628:	e071      	b.n	800270e <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	001a      	movs	r2, r3
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	18d3      	adds	r3, r2, r3
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29a      	uxth	r2, r3
 800263c:	204a      	movs	r0, #74	; 0x4a
 800263e:	183b      	adds	r3, r7, r0
 8002640:	49a0      	ldr	r1, [pc, #640]	; (80028c4 <PCD_EP_ISR_Handler+0x6a8>)
 8002642:	400a      	ands	r2, r1
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	001a      	movs	r2, r3
 800264c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	18d3      	adds	r3, r2, r3
 8002654:	183a      	adds	r2, r7, r0
 8002656:	8812      	ldrh	r2, [r2, #0]
 8002658:	499b      	ldr	r1, [pc, #620]	; (80028c8 <PCD_EP_ISR_Handler+0x6ac>)
 800265a:	430a      	orrs	r2, r1
 800265c:	b292      	uxth	r2, r2
 800265e:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	001a      	movs	r2, r3
 8002666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	18d3      	adds	r3, r2, r3
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	b29b      	uxth	r3, r3
 8002672:	001a      	movs	r2, r3
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	01db      	lsls	r3, r3, #7
 8002678:	4013      	ands	r3, r2
 800267a:	d024      	beq.n	80026c6 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2250      	movs	r2, #80	; 0x50
 8002682:	5a9b      	ldrh	r3, [r3, r2]
 8002684:	b29b      	uxth	r3, r3
 8002686:	001a      	movs	r2, r3
 8002688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	18d2      	adds	r2, r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	18d3      	adds	r3, r2, r3
 8002696:	4a8d      	ldr	r2, [pc, #564]	; (80028cc <PCD_EP_ISR_Handler+0x6b0>)
 8002698:	4694      	mov	ip, r2
 800269a:	4463      	add	r3, ip
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	2448      	movs	r4, #72	; 0x48
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	0592      	lsls	r2, r2, #22
 80026a4:	0d92      	lsrs	r2, r2, #22
 80026a6:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80026a8:	193b      	adds	r3, r7, r4
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d02e      	beq.n	800270e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ba:	891a      	ldrh	r2, [r3, #8]
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	881b      	ldrh	r3, [r3, #0]
 80026c0:	f004 fb1e 	bl	8006d00 <USB_ReadPMA>
 80026c4:	e023      	b.n	800270e <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2250      	movs	r2, #80	; 0x50
 80026cc:	5a9b      	ldrh	r3, [r3, r2]
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	001a      	movs	r2, r3
 80026d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	18d2      	adds	r2, r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	4a77      	ldr	r2, [pc, #476]	; (80028c0 <PCD_EP_ISR_Handler+0x6a4>)
 80026e2:	4694      	mov	ip, r2
 80026e4:	4463      	add	r3, ip
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	2448      	movs	r4, #72	; 0x48
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	0592      	lsls	r2, r2, #22
 80026ee:	0d92      	lsrs	r2, r2, #22
 80026f0:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002700:	6959      	ldr	r1, [r3, #20]
 8002702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002704:	895a      	ldrh	r2, [r3, #10]
 8002706:	193b      	adds	r3, r7, r4
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	f004 faf9 	bl	8006d00 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800270e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	2148      	movs	r1, #72	; 0x48
 8002714:	187b      	adds	r3, r7, r1
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	18d2      	adds	r2, r2, r3
 800271a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	187b      	adds	r3, r7, r1
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	18d2      	adds	r2, r2, r3
 8002728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <PCD_EP_ISR_Handler+0x524>
 8002734:	187b      	adds	r3, r7, r1
 8002736:	881a      	ldrh	r2, [r3, #0]
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	429a      	cmp	r2, r3
 800273e:	d207      	bcs.n	8002750 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	781a      	ldrb	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	0011      	movs	r1, r2
 8002748:	0018      	movs	r0, r3
 800274a:	f006 f944 	bl	80089d6 <HAL_PCD_DataOutStageCallback>
 800274e:	e006      	b.n	800275e <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002756:	0011      	movs	r1, r2
 8002758:	0018      	movs	r0, r3
 800275a:	f003 f899 	bl	8005890 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800275e:	2452      	movs	r4, #82	; 0x52
 8002760:	193b      	adds	r3, r7, r4
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	4013      	ands	r3, r2
 8002768:	d100      	bne.n	800276c <PCD_EP_ISR_Handler+0x550>
 800276a:	e135      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 800276c:	2055      	movs	r0, #85	; 0x55
 800276e:	183b      	adds	r3, r7, r0
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	0013      	movs	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	189b      	adds	r3, r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	18d3      	adds	r3, r2, r3
 8002780:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	001a      	movs	r2, r3
 8002788:	183b      	adds	r3, r7, r0
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	18d3      	adds	r3, r2, r3
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29a      	uxth	r2, r3
 8002794:	2542      	movs	r5, #66	; 0x42
 8002796:	197b      	adds	r3, r7, r5
 8002798:	494d      	ldr	r1, [pc, #308]	; (80028d0 <PCD_EP_ISR_Handler+0x6b4>)
 800279a:	400a      	ands	r2, r1
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	001a      	movs	r2, r3
 80027a4:	183b      	adds	r3, r7, r0
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	18d3      	adds	r3, r2, r3
 80027ac:	197a      	adds	r2, r7, r5
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	4948      	ldr	r1, [pc, #288]	; (80028d4 <PCD_EP_ISR_Handler+0x6b8>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	b292      	uxth	r2, r2
 80027b6:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	78db      	ldrb	r3, [r3, #3]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d100      	bne.n	80027c2 <PCD_EP_ISR_Handler+0x5a6>
 80027c0:	e0ad      	b.n	800291e <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80027c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80027c8:	193b      	adds	r3, r7, r4
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	2240      	movs	r2, #64	; 0x40
 80027ce:	4013      	ands	r3, r2
 80027d0:	d046      	beq.n	8002860 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027d4:	785b      	ldrb	r3, [r3, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d125      	bne.n	8002826 <PCD_EP_ISR_Handler+0x60a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2250      	movs	r2, #80	; 0x50
 80027e6:	5a9b      	ldrh	r3, [r3, r2]
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	001a      	movs	r2, r3
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	189b      	adds	r3, r3, r2
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
 80027f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	00da      	lsls	r2, r3, #3
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	18d3      	adds	r3, r2, r3
 80027fc:	4a33      	ldr	r2, [pc, #204]	; (80028cc <PCD_EP_ISR_Handler+0x6b0>)
 80027fe:	4694      	mov	ip, r2
 8002800:	4463      	add	r3, ip
 8002802:	623b      	str	r3, [r7, #32]
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4a33      	ldr	r2, [pc, #204]	; (80028d8 <PCD_EP_ISR_Handler+0x6bc>)
 800280c:	4013      	ands	r3, r2
 800280e:	b29a      	uxth	r2, r3
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	6a3b      	ldr	r3, [r7, #32]
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	4a2e      	ldr	r2, [pc, #184]	; (80028d4 <PCD_EP_ISR_Handler+0x6b8>)
 800281c:	4313      	orrs	r3, r2
 800281e:	b29a      	uxth	r2, r3
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	801a      	strh	r2, [r3, #0]
 8002824:	e073      	b.n	800290e <PCD_EP_ISR_Handler+0x6f2>
 8002826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d16f      	bne.n	800290e <PCD_EP_ISR_Handler+0x6f2>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2250      	movs	r2, #80	; 0x50
 800283a:	5a9b      	ldrh	r3, [r3, r2]
 800283c:	b29b      	uxth	r3, r3
 800283e:	001a      	movs	r2, r3
 8002840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002842:	189b      	adds	r3, r3, r2
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	00da      	lsls	r2, r3, #3
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	18d3      	adds	r3, r2, r3
 8002850:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <PCD_EP_ISR_Handler+0x6b0>)
 8002852:	4694      	mov	ip, r2
 8002854:	4463      	add	r3, ip
 8002856:	62bb      	str	r3, [r7, #40]	; 0x28
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2200      	movs	r2, #0
 800285c:	801a      	strh	r2, [r3, #0]
 800285e:	e056      	b.n	800290e <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d136      	bne.n	80028dc <PCD_EP_ISR_Handler+0x6c0>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	637b      	str	r3, [r7, #52]	; 0x34
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2250      	movs	r2, #80	; 0x50
 800287a:	5a9b      	ldrh	r3, [r3, r2]
 800287c:	b29b      	uxth	r3, r3
 800287e:	001a      	movs	r2, r3
 8002880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002882:	189b      	adds	r3, r3, r2
 8002884:	637b      	str	r3, [r7, #52]	; 0x34
 8002886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	00da      	lsls	r2, r3, #3
 800288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800288e:	18d3      	adds	r3, r2, r3
 8002890:	4a0b      	ldr	r2, [pc, #44]	; (80028c0 <PCD_EP_ISR_Handler+0x6a4>)
 8002892:	4694      	mov	ip, r2
 8002894:	4463      	add	r3, ip
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <PCD_EP_ISR_Handler+0x6bc>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	801a      	strh	r2, [r3, #0]
 80028a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <PCD_EP_ISR_Handler+0x6b8>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	e029      	b.n	800290e <PCD_EP_ISR_Handler+0x6f2>
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	00000f8f 	.word	0x00000f8f
 80028c0:	00000406 	.word	0x00000406
 80028c4:	ffff8f8f 	.word	0xffff8f8f
 80028c8:	ffff80c0 	.word	0xffff80c0
 80028cc:	00000402 	.word	0x00000402
 80028d0:	ffff8f0f 	.word	0xffff8f0f
 80028d4:	ffff8000 	.word	0xffff8000
 80028d8:	ffff83ff 	.word	0xffff83ff
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d114      	bne.n	800290e <PCD_EP_ISR_Handler+0x6f2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2250      	movs	r2, #80	; 0x50
 80028ea:	5a9b      	ldrh	r3, [r3, r2]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	001a      	movs	r2, r3
 80028f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f2:	189b      	adds	r3, r3, r2
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	00da      	lsls	r2, r3, #3
 80028fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fe:	18d3      	adds	r3, r2, r3
 8002900:	4a3d      	ldr	r2, [pc, #244]	; (80029f8 <PCD_EP_ISR_Handler+0x7dc>)
 8002902:	4694      	mov	ip, r2
 8002904:	4463      	add	r3, ip
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	2200      	movs	r2, #0
 800290c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	781a      	ldrb	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	0011      	movs	r1, r2
 8002916:	0018      	movs	r0, r3
 8002918:	f006 f87e 	bl	8008a18 <HAL_PCD_DataInStageCallback>
 800291c:	e05c      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800291e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002920:	78db      	ldrb	r3, [r3, #3]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d150      	bne.n	80029c8 <PCD_EP_ISR_Handler+0x7ac>
 8002926:	2352      	movs	r3, #82	; 0x52
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	881a      	ldrh	r2, [r3, #0]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4013      	ands	r3, r2
 8002932:	d149      	bne.n	80029c8 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2250      	movs	r2, #80	; 0x50
 800293a:	5a9b      	ldrh	r3, [r3, r2]
 800293c:	b29b      	uxth	r3, r3
 800293e:	001a      	movs	r2, r3
 8002940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	18d2      	adds	r2, r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	18d3      	adds	r3, r2, r3
 800294e:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <PCD_EP_ISR_Handler+0x7e0>)
 8002950:	4694      	mov	ip, r2
 8002952:	4463      	add	r3, ip
 8002954:	881a      	ldrh	r2, [r3, #0]
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	187b      	adds	r3, r7, r1
 800295a:	0592      	lsls	r2, r2, #22
 800295c:	0d92      	lsrs	r2, r2, #22
 800295e:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	187b      	adds	r3, r7, r1
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d907      	bls.n	800297c <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 800296c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	187b      	adds	r3, r7, r1
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	1ad2      	subs	r2, r2, r3
 8002976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002978:	619a      	str	r2, [r3, #24]
 800297a:	e002      	b.n	8002982 <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 800297c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297e:	2200      	movs	r2, #0
 8002980:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d107      	bne.n	800299a <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800298a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800298c:	781a      	ldrb	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	0011      	movs	r1, r2
 8002992:	0018      	movs	r0, r3
 8002994:	f006 f840 	bl	8008a18 <HAL_PCD_DataInStageCallback>
 8002998:	e01e      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800299a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	2140      	movs	r1, #64	; 0x40
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	18d2      	adds	r2, r2, r3
 80029a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029a8:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80029aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	18d2      	adds	r2, r2, r3
 80029b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80029be:	0011      	movs	r1, r2
 80029c0:	0018      	movs	r0, r3
 80029c2:	f002 ff65 	bl	8005890 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029c6:	e007      	b.n	80029d8 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029c8:	2352      	movs	r3, #82	; 0x52
 80029ca:	18fb      	adds	r3, r7, r3
 80029cc:	881a      	ldrh	r2, [r3, #0]
 80029ce:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	0018      	movs	r0, r3
 80029d4:	f000 f930 	bl	8002c38 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2244      	movs	r2, #68	; 0x44
 80029de:	5a9b      	ldrh	r3, [r3, r2]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	b21b      	sxth	r3, r3
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	da01      	bge.n	80029ec <PCD_EP_ISR_Handler+0x7d0>
 80029e8:	f7ff fc1e 	bl	8002228 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b016      	add	sp, #88	; 0x58
 80029f4:	bdb0      	pop	{r4, r5, r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	00000406 	.word	0x00000406
 80029fc:	00000402 	.word	0x00000402

08002a00 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b089      	sub	sp, #36	; 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a0e:	1dbb      	adds	r3, r7, #6
 8002a10:	881a      	ldrh	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	01db      	lsls	r3, r3, #7
 8002a16:	4013      	ands	r3, r2
 8002a18:	d100      	bne.n	8002a1c <HAL_PCD_EP_DB_Receive+0x1c>
 8002a1a:	e07d      	b.n	8002b18 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2250      	movs	r2, #80	; 0x50
 8002a22:	5a9b      	ldrh	r3, [r3, r2]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	001a      	movs	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	18d2      	adds	r2, r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	18d3      	adds	r3, r2, r3
 8002a36:	4a7a      	ldr	r2, [pc, #488]	; (8002c20 <HAL_PCD_EP_DB_Receive+0x220>)
 8002a38:	4694      	mov	ip, r2
 8002a3a:	4463      	add	r3, ip
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	211a      	movs	r1, #26
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	0592      	lsls	r2, r2, #22
 8002a44:	0d92      	lsrs	r2, r2, #22
 8002a46:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d307      	bcc.n	8002a64 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	619a      	str	r2, [r3, #24]
 8002a62:	e002      	b.n	8002a6a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	001a      	movs	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	18d3      	adds	r3, r2, r3
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	2018      	movs	r0, #24
 8002a86:	183b      	adds	r3, r7, r0
 8002a88:	4966      	ldr	r1, [pc, #408]	; (8002c24 <HAL_PCD_EP_DB_Receive+0x224>)
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	801a      	strh	r2, [r3, #0]
 8002a8e:	183b      	adds	r3, r7, r0
 8002a90:	183a      	adds	r2, r7, r0
 8002a92:	8812      	ldrh	r2, [r2, #0]
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0189      	lsls	r1, r1, #6
 8002a98:	404a      	eors	r2, r1
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	001a      	movs	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	18d3      	adds	r3, r2, r3
 8002aaa:	183a      	adds	r2, r7, r0
 8002aac:	8812      	ldrh	r2, [r2, #0]
 8002aae:	495e      	ldr	r1, [pc, #376]	; (8002c28 <HAL_PCD_EP_DB_Receive+0x228>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	b292      	uxth	r2, r2
 8002ab4:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ab6:	1dbb      	adds	r3, r7, #6
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	4013      	ands	r3, r2
 8002abe:	d01a      	beq.n	8002af6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	001a      	movs	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	18d3      	adds	r3, r2, r3
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	2016      	movs	r0, #22
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	4955      	ldr	r1, [pc, #340]	; (8002c2c <HAL_PCD_EP_DB_Receive+0x22c>)
 8002ad8:	400a      	ands	r2, r1
 8002ada:	801a      	strh	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	001a      	movs	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	183a      	adds	r2, r7, r0
 8002aec:	8812      	ldrh	r2, [r2, #0]
 8002aee:	4950      	ldr	r1, [pc, #320]	; (8002c30 <HAL_PCD_EP_DB_Receive+0x230>)
 8002af0:	430a      	orrs	r2, r1
 8002af2:	b292      	uxth	r2, r2
 8002af4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002af6:	241a      	movs	r4, #26
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d100      	bne.n	8002b02 <HAL_PCD_EP_DB_Receive+0x102>
 8002b00:	e086      	b.n	8002c10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	6959      	ldr	r1, [r3, #20]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	891a      	ldrh	r2, [r3, #8]
 8002b0e:	193b      	adds	r3, r7, r4
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f004 f8f5 	bl	8006d00 <USB_ReadPMA>
 8002b16:	e07b      	b.n	8002c10 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2250      	movs	r2, #80	; 0x50
 8002b1e:	5a9b      	ldrh	r3, [r3, r2]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	001a      	movs	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	18d2      	adds	r2, r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	18d3      	adds	r3, r2, r3
 8002b32:	4a40      	ldr	r2, [pc, #256]	; (8002c34 <HAL_PCD_EP_DB_Receive+0x234>)
 8002b34:	4694      	mov	ip, r2
 8002b36:	4463      	add	r3, ip
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	211a      	movs	r1, #26
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	0592      	lsls	r2, r2, #22
 8002b40:	0d92      	lsrs	r2, r2, #22
 8002b42:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	187b      	adds	r3, r7, r1
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d307      	bcc.n	8002b60 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	699a      	ldr	r2, [r3, #24]
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	1ad2      	subs	r2, r2, r3
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	619a      	str	r2, [r3, #24]
 8002b5e:	e002      	b.n	8002b66 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d121      	bne.n	8002bb2 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	001a      	movs	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	18d3      	adds	r3, r2, r3
 8002b7c:	881b      	ldrh	r3, [r3, #0]
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	201e      	movs	r0, #30
 8002b82:	183b      	adds	r3, r7, r0
 8002b84:	4927      	ldr	r1, [pc, #156]	; (8002c24 <HAL_PCD_EP_DB_Receive+0x224>)
 8002b86:	400a      	ands	r2, r1
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	183b      	adds	r3, r7, r0
 8002b8c:	183a      	adds	r2, r7, r0
 8002b8e:	8812      	ldrh	r2, [r2, #0]
 8002b90:	2180      	movs	r1, #128	; 0x80
 8002b92:	0189      	lsls	r1, r1, #6
 8002b94:	404a      	eors	r2, r1
 8002b96:	801a      	strh	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	18d3      	adds	r3, r2, r3
 8002ba6:	183a      	adds	r2, r7, r0
 8002ba8:	8812      	ldrh	r2, [r2, #0]
 8002baa:	491f      	ldr	r1, [pc, #124]	; (8002c28 <HAL_PCD_EP_DB_Receive+0x228>)
 8002bac:	430a      	orrs	r2, r1
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	881b      	ldrh	r3, [r3, #0]
 8002bb6:	2240      	movs	r2, #64	; 0x40
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d11a      	bne.n	8002bf2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	001a      	movs	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	18d3      	adds	r3, r2, r3
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	201c      	movs	r0, #28
 8002bd0:	183b      	adds	r3, r7, r0
 8002bd2:	4916      	ldr	r1, [pc, #88]	; (8002c2c <HAL_PCD_EP_DB_Receive+0x22c>)
 8002bd4:	400a      	ands	r2, r1
 8002bd6:	801a      	strh	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	001a      	movs	r2, r3
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	18d3      	adds	r3, r2, r3
 8002be6:	183a      	adds	r2, r7, r0
 8002be8:	8812      	ldrh	r2, [r2, #0]
 8002bea:	4911      	ldr	r1, [pc, #68]	; (8002c30 <HAL_PCD_EP_DB_Receive+0x230>)
 8002bec:	430a      	orrs	r2, r1
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002bf2:	241a      	movs	r4, #26
 8002bf4:	193b      	adds	r3, r7, r4
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6959      	ldr	r1, [r3, #20]
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	895a      	ldrh	r2, [r3, #10]
 8002c08:	193b      	adds	r3, r7, r4
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f004 f878 	bl	8006d00 <USB_ReadPMA>
    }
  }

  return count;
 8002c10:	231a      	movs	r3, #26
 8002c12:	18fb      	adds	r3, r7, r3
 8002c14:	881b      	ldrh	r3, [r3, #0]
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b009      	add	sp, #36	; 0x24
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	00000402 	.word	0x00000402
 8002c24:	ffffbf8f 	.word	0xffffbf8f
 8002c28:	ffff8080 	.word	0xffff8080
 8002c2c:	ffff8f8f 	.word	0xffff8f8f
 8002c30:	ffff80c0 	.word	0xffff80c0
 8002c34:	00000406 	.word	0x00000406

08002c38 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b0a2      	sub	sp, #136	; 0x88
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	1dbb      	adds	r3, r7, #6
 8002c44:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c46:	1dbb      	adds	r3, r7, #6
 8002c48:	881b      	ldrh	r3, [r3, #0]
 8002c4a:	2240      	movs	r2, #64	; 0x40
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	d100      	bne.n	8002c52 <HAL_PCD_EP_DB_Transmit+0x1a>
 8002c50:	e1c8      	b.n	8002fe4 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2250      	movs	r2, #80	; 0x50
 8002c58:	5a9b      	ldrh	r3, [r3, r2]
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	001a      	movs	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	18d2      	adds	r2, r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	18d3      	adds	r3, r2, r3
 8002c6c:	4ad7      	ldr	r2, [pc, #860]	; (8002fcc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002c6e:	4694      	mov	ip, r2
 8002c70:	4463      	add	r3, ip
 8002c72:	881a      	ldrh	r2, [r3, #0]
 8002c74:	214e      	movs	r1, #78	; 0x4e
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	0592      	lsls	r2, r2, #22
 8002c7a:	0d92      	lsrs	r2, r2, #22
 8002c7c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	699a      	ldr	r2, [r3, #24]
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d907      	bls.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	619a      	str	r2, [r3, #24]
 8002c98:	e002      	b.n	8002ca0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d000      	beq.n	8002caa <HAL_PCD_EP_DB_Transmit+0x72>
 8002ca8:	e0b5      	b.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	785b      	ldrb	r3, [r3, #1]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d125      	bne.n	8002cfe <HAL_PCD_EP_DB_Transmit+0xc6>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2250      	movs	r2, #80	; 0x50
 8002cbe:	5a9b      	ldrh	r3, [r3, r2]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc6:	189b      	adds	r3, r3, r2
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	00da      	lsls	r2, r3, #3
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	18d3      	adds	r3, r2, r3
 8002cd4:	4abd      	ldr	r2, [pc, #756]	; (8002fcc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002cd6:	4694      	mov	ip, r2
 8002cd8:	4463      	add	r3, ip
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4abb      	ldr	r2, [pc, #748]	; (8002fd0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	801a      	strh	r2, [r3, #0]
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	4ab8      	ldr	r2, [pc, #736]	; (8002fd4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfa:	801a      	strh	r2, [r3, #0]
 8002cfc:	e01b      	b.n	8002d36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d117      	bne.n	8002d36 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2250      	movs	r2, #80	; 0x50
 8002d12:	5a9b      	ldrh	r3, [r3, r2]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	001a      	movs	r2, r3
 8002d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1a:	189b      	adds	r3, r3, r2
 8002d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	00da      	lsls	r2, r3, #3
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	18d3      	adds	r3, r2, r3
 8002d28:	4aa8      	ldr	r2, [pc, #672]	; (8002fcc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002d2a:	4694      	mov	ip, r2
 8002d2c:	4463      	add	r3, ip
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d32:	2200      	movs	r2, #0
 8002d34:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	623b      	str	r3, [r7, #32]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	785b      	ldrb	r3, [r3, #1]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d125      	bne.n	8002d90 <HAL_PCD_EP_DB_Transmit+0x158>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2250      	movs	r2, #80	; 0x50
 8002d50:	5a9b      	ldrh	r3, [r3, r2]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	001a      	movs	r2, r3
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	189b      	adds	r3, r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	00da      	lsls	r2, r3, #3
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	18d3      	adds	r3, r2, r3
 8002d66:	4a9c      	ldr	r2, [pc, #624]	; (8002fd8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002d68:	4694      	mov	ip, r2
 8002d6a:	4463      	add	r3, ip
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4a96      	ldr	r2, [pc, #600]	; (8002fd0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	801a      	strh	r2, [r3, #0]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4a93      	ldr	r2, [pc, #588]	; (8002fd4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	801a      	strh	r2, [r3, #0]
 8002d8e:	e018      	b.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d114      	bne.n	8002dc2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2250      	movs	r2, #80	; 0x50
 8002d9e:	5a9b      	ldrh	r3, [r3, r2]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	001a      	movs	r2, r3
 8002da4:	6a3b      	ldr	r3, [r7, #32]
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	623b      	str	r3, [r7, #32]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	00da      	lsls	r2, r3, #3
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	18d3      	adds	r3, r2, r3
 8002db4:	4a88      	ldr	r2, [pc, #544]	; (8002fd8 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002db6:	4694      	mov	ip, r2
 8002db8:	4463      	add	r3, ip
 8002dba:	61fb      	str	r3, [r7, #28]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	0011      	movs	r1, r2
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f005 fe24 	bl	8008a18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dd0:	1dbb      	adds	r3, r7, #6
 8002dd2:	881a      	ldrh	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	01db      	lsls	r3, r3, #7
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002ddc:	e2d4      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	001a      	movs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	18d3      	adds	r3, r2, r3
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	2012      	movs	r0, #18
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	4979      	ldr	r1, [pc, #484]	; (8002fdc <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002df6:	400a      	ands	r2, r1
 8002df8:	801a      	strh	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	001a      	movs	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	18d3      	adds	r3, r2, r3
 8002e08:	183a      	adds	r2, r7, r0
 8002e0a:	8812      	ldrh	r2, [r2, #0]
 8002e0c:	4974      	ldr	r1, [pc, #464]	; (8002fe0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	b292      	uxth	r2, r2
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	e2b8      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e16:	1dbb      	adds	r3, r7, #6
 8002e18:	881a      	ldrh	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	01db      	lsls	r3, r3, #7
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d01a      	beq.n	8002e58 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	001a      	movs	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	18d3      	adds	r3, r2, r3
 8002e30:	881b      	ldrh	r3, [r3, #0]
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	2044      	movs	r0, #68	; 0x44
 8002e36:	183b      	adds	r3, r7, r0
 8002e38:	4968      	ldr	r1, [pc, #416]	; (8002fdc <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002e3a:	400a      	ands	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	001a      	movs	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	18d3      	adds	r3, r2, r3
 8002e4c:	183a      	adds	r2, r7, r0
 8002e4e:	8812      	ldrh	r2, [r2, #0]
 8002e50:	4963      	ldr	r1, [pc, #396]	; (8002fe0 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002e52:	430a      	orrs	r2, r1
 8002e54:	b292      	uxth	r2, r2
 8002e56:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2224      	movs	r2, #36	; 0x24
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d000      	beq.n	8002e64 <HAL_PCD_EP_DB_Transmit+0x22c>
 8002e62:	e291      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	695a      	ldr	r2, [r3, #20]
 8002e68:	214e      	movs	r1, #78	; 0x4e
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	18d2      	adds	r2, r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	69da      	ldr	r2, [r3, #28]
 8002e78:	187b      	adds	r3, r7, r1
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	18d2      	adds	r2, r2, r3
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	6a1a      	ldr	r2, [r3, #32]
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d309      	bcc.n	8002ea2 <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	6a1a      	ldr	r2, [r3, #32]
 8002e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9a:	1ad2      	subs	r2, r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	621a      	str	r2, [r3, #32]
 8002ea0:	e016      	b.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8002eaa:	234e      	movs	r3, #78	; 0x4e
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	2224      	movs	r2, #36	; 0x24
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]
 8002eba:	e009      	b.n	8002ed0 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2224      	movs	r2, #36	; 0x24
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	785b      	ldrb	r3, [r3, #1]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d150      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x342>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2250      	movs	r2, #80	; 0x50
 8002ee4:	5a9b      	ldrh	r3, [r3, r2]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	001a      	movs	r2, r3
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	189b      	adds	r3, r3, r2
 8002eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	00da      	lsls	r2, r3, #3
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	18d3      	adds	r3, r2, r3
 8002efa:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002efc:	4694      	mov	ip, r2
 8002efe:	4463      	add	r3, ip
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
 8002f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d110      	bne.n	8002f2a <HAL_PCD_EP_DB_Transmit+0x2f2>
 8002f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	4a30      	ldr	r2, [pc, #192]	; (8002fd0 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	4a2d      	ldr	r2, [pc, #180]	; (8002fd4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e044      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002f2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2c:	2b3e      	cmp	r3, #62	; 0x3e
 8002f2e:	d810      	bhi.n	8002f52 <HAL_PCD_EP_DB_Transmit+0x31a>
 8002f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f32:	085b      	lsrs	r3, r3, #1
 8002f34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d002      	beq.n	8002f44 <HAL_PCD_EP_DB_Transmit+0x30c>
 8002f3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f40:	3301      	adds	r3, #1
 8002f42:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	029b      	lsls	r3, r3, #10
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	801a      	strh	r2, [r3, #0]
 8002f50:	e030      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f54:	095b      	lsrs	r3, r3, #5
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f5a:	221f      	movs	r2, #31
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d102      	bne.n	8002f66 <HAL_PCD_EP_DB_Transmit+0x32e>
 8002f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f62:	3b01      	subs	r3, #1
 8002f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	029b      	lsls	r3, r3, #10
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f76:	801a      	strh	r2, [r3, #0]
 8002f78:	e01c      	b.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	785b      	ldrb	r3, [r3, #1]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d118      	bne.n	8002fb4 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	643b      	str	r3, [r7, #64]	; 0x40
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2250      	movs	r2, #80	; 0x50
 8002f8e:	5a9b      	ldrh	r3, [r3, r2]
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	001a      	movs	r2, r3
 8002f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	643b      	str	r3, [r7, #64]	; 0x40
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	00da      	lsls	r2, r3, #3
 8002fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa2:	18d3      	adds	r3, r2, r3
 8002fa4:	4a09      	ldr	r2, [pc, #36]	; (8002fcc <HAL_PCD_EP_DB_Transmit+0x394>)
 8002fa6:	4694      	mov	ip, r2
 8002fa8:	4463      	add	r3, ip
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6959      	ldr	r1, [r3, #20]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	891a      	ldrh	r2, [r3, #8]
 8002fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	f003 fe58 	bl	8006c78 <USB_WritePMA>
 8002fc8:	e1de      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	00000402 	.word	0x00000402
 8002fd0:	ffff83ff 	.word	0xffff83ff
 8002fd4:	ffff8000 	.word	0xffff8000
 8002fd8:	00000406 	.word	0x00000406
 8002fdc:	ffff8f8f 	.word	0xffff8f8f
 8002fe0:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2250      	movs	r2, #80	; 0x50
 8002fea:	5a9b      	ldrh	r3, [r3, r2]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	001a      	movs	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	18d2      	adds	r2, r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	18d3      	adds	r3, r2, r3
 8002ffe:	4aca      	ldr	r2, [pc, #808]	; (8003328 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003000:	4694      	mov	ip, r2
 8003002:	4463      	add	r3, ip
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	214e      	movs	r1, #78	; 0x4e
 8003008:	187b      	adds	r3, r7, r1
 800300a:	0592      	lsls	r2, r2, #22
 800300c:	0d92      	lsrs	r2, r2, #22
 800300e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	699a      	ldr	r2, [r3, #24]
 8003014:	187b      	adds	r3, r7, r1
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	429a      	cmp	r2, r3
 800301a:	d307      	bcc.n	800302c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	699a      	ldr	r2, [r3, #24]
 8003020:	187b      	adds	r3, r7, r1
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	1ad2      	subs	r2, r2, r3
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	619a      	str	r2, [r3, #24]
 800302a:	e002      	b.n	8003032 <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2200      	movs	r2, #0
 8003030:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d000      	beq.n	800303c <HAL_PCD_EP_DB_Transmit+0x404>
 800303a:	e0c0      	b.n	80031be <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	785b      	ldrb	r3, [r3, #1]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d125      	bne.n	8003090 <HAL_PCD_EP_DB_Transmit+0x458>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	66fb      	str	r3, [r7, #108]	; 0x6c
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2250      	movs	r2, #80	; 0x50
 8003050:	5a9b      	ldrh	r3, [r3, r2]
 8003052:	b29b      	uxth	r3, r3
 8003054:	001a      	movs	r2, r3
 8003056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003058:	189b      	adds	r3, r3, r2
 800305a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	00da      	lsls	r2, r3, #3
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	18d3      	adds	r3, r2, r3
 8003066:	4ab1      	ldr	r2, [pc, #708]	; (800332c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003068:	4694      	mov	ip, r2
 800306a:	4463      	add	r3, ip
 800306c:	66bb      	str	r3, [r7, #104]	; 0x68
 800306e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	b29b      	uxth	r3, r3
 8003074:	4aae      	ldr	r2, [pc, #696]	; (8003330 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003076:	4013      	ands	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800307c:	801a      	strh	r2, [r3, #0]
 800307e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	4aab      	ldr	r2, [pc, #684]	; (8003334 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	b29a      	uxth	r2, r3
 800308a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308c:	801a      	strh	r2, [r3, #0]
 800308e:	e01b      	b.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x490>
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d117      	bne.n	80030c8 <HAL_PCD_EP_DB_Transmit+0x490>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	677b      	str	r3, [r7, #116]	; 0x74
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2250      	movs	r2, #80	; 0x50
 80030a4:	5a9b      	ldrh	r3, [r3, r2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	001a      	movs	r2, r3
 80030aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ac:	189b      	adds	r3, r3, r2
 80030ae:	677b      	str	r3, [r7, #116]	; 0x74
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	00da      	lsls	r2, r3, #3
 80030b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030b8:	18d3      	adds	r3, r2, r3
 80030ba:	4a9c      	ldr	r2, [pc, #624]	; (800332c <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80030bc:	4694      	mov	ip, r2
 80030be:	4463      	add	r3, ip
 80030c0:	673b      	str	r3, [r7, #112]	; 0x70
 80030c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c4:	2200      	movs	r2, #0
 80030c6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	785b      	ldrb	r3, [r3, #1]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d130      	bne.n	8003138 <HAL_PCD_EP_DB_Transmit+0x500>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2180      	movs	r1, #128	; 0x80
 80030dc:	187a      	adds	r2, r7, r1
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2250      	movs	r2, #80	; 0x50
 80030e6:	5a9b      	ldrh	r3, [r3, r2]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	001a      	movs	r2, r3
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	187a      	adds	r2, r7, r1
 80030f4:	6013      	str	r3, [r2, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	00da      	lsls	r2, r3, #3
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	4a89      	ldr	r2, [pc, #548]	; (8003328 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003104:	4694      	mov	ip, r2
 8003106:	4463      	add	r3, ip
 8003108:	2184      	movs	r1, #132	; 0x84
 800310a:	187a      	adds	r2, r7, r1
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	187b      	adds	r3, r7, r1
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4a86      	ldr	r2, [pc, #536]	; (8003330 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003118:	4013      	ands	r3, r2
 800311a:	b29a      	uxth	r2, r3
 800311c:	187b      	adds	r3, r7, r1
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	187b      	adds	r3, r7, r1
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	881b      	ldrh	r3, [r3, #0]
 8003128:	b29b      	uxth	r3, r3
 800312a:	4a82      	ldr	r2, [pc, #520]	; (8003334 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	b29a      	uxth	r2, r3
 8003130:	187b      	adds	r3, r7, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	801a      	strh	r2, [r3, #0]
 8003136:	e018      	b.n	800316a <HAL_PCD_EP_DB_Transmit+0x532>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	785b      	ldrb	r3, [r3, #1]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d114      	bne.n	800316a <HAL_PCD_EP_DB_Transmit+0x532>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2250      	movs	r2, #80	; 0x50
 8003146:	5a9b      	ldrh	r3, [r3, r2]
 8003148:	b29b      	uxth	r3, r3
 800314a:	001a      	movs	r2, r3
 800314c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314e:	189b      	adds	r3, r3, r2
 8003150:	67bb      	str	r3, [r7, #120]	; 0x78
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	00da      	lsls	r2, r3, #3
 8003158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800315a:	18d3      	adds	r3, r2, r3
 800315c:	4a72      	ldr	r2, [pc, #456]	; (8003328 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800315e:	4694      	mov	ip, r2
 8003160:	4463      	add	r3, ip
 8003162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003164:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003166:	2200      	movs	r2, #0
 8003168:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	781a      	ldrb	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	0011      	movs	r1, r2
 8003172:	0018      	movs	r0, r3
 8003174:	f005 fc50 	bl	8008a18 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003178:	1dbb      	adds	r3, r7, #6
 800317a:	881a      	ldrh	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	01db      	lsls	r3, r3, #7
 8003180:	4013      	ands	r3, r2
 8003182:	d000      	beq.n	8003186 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003184:	e100      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	001a      	movs	r2, r3
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	18d3      	adds	r3, r2, r3
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	b29a      	uxth	r2, r3
 8003198:	2046      	movs	r0, #70	; 0x46
 800319a:	183b      	adds	r3, r7, r0
 800319c:	4966      	ldr	r1, [pc, #408]	; (8003338 <HAL_PCD_EP_DB_Transmit+0x700>)
 800319e:	400a      	ands	r2, r1
 80031a0:	801a      	strh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	001a      	movs	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	18d3      	adds	r3, r2, r3
 80031b0:	183a      	adds	r2, r7, r0
 80031b2:	8812      	ldrh	r2, [r2, #0]
 80031b4:	4961      	ldr	r1, [pc, #388]	; (800333c <HAL_PCD_EP_DB_Transmit+0x704>)
 80031b6:	430a      	orrs	r2, r1
 80031b8:	b292      	uxth	r2, r2
 80031ba:	801a      	strh	r2, [r3, #0]
 80031bc:	e0e4      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031be:	1dbb      	adds	r3, r7, #6
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	01db      	lsls	r3, r3, #7
 80031c6:	4013      	ands	r3, r2
 80031c8:	d11a      	bne.n	8003200 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	001a      	movs	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	18d3      	adds	r3, r2, r3
 80031d8:	881b      	ldrh	r3, [r3, #0]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	204c      	movs	r0, #76	; 0x4c
 80031de:	183b      	adds	r3, r7, r0
 80031e0:	4955      	ldr	r1, [pc, #340]	; (8003338 <HAL_PCD_EP_DB_Transmit+0x700>)
 80031e2:	400a      	ands	r2, r1
 80031e4:	801a      	strh	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	001a      	movs	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	18d3      	adds	r3, r2, r3
 80031f4:	183a      	adds	r2, r7, r0
 80031f6:	8812      	ldrh	r2, [r2, #0]
 80031f8:	4950      	ldr	r1, [pc, #320]	; (800333c <HAL_PCD_EP_DB_Transmit+0x704>)
 80031fa:	430a      	orrs	r2, r1
 80031fc:	b292      	uxth	r2, r2
 80031fe:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2224      	movs	r2, #36	; 0x24
 8003204:	5c9b      	ldrb	r3, [r3, r2]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d000      	beq.n	800320c <HAL_PCD_EP_DB_Transmit+0x5d4>
 800320a:	e0bd      	b.n	8003388 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	695a      	ldr	r2, [r3, #20]
 8003210:	214e      	movs	r1, #78	; 0x4e
 8003212:	187b      	adds	r3, r7, r1
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	18d2      	adds	r2, r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	69da      	ldr	r2, [r3, #28]
 8003220:	187b      	adds	r3, r7, r1
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	18d2      	adds	r2, r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	6a1a      	ldr	r2, [r3, #32]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	429a      	cmp	r2, r3
 8003234:	d309      	bcc.n	800324a <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	6a1a      	ldr	r2, [r3, #32]
 8003240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003242:	1ad2      	subs	r2, r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	621a      	str	r2, [r3, #32]
 8003248:	e016      	b.n	8003278 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d108      	bne.n	8003264 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 8003252:	234e      	movs	r3, #78	; 0x4e
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	881b      	ldrh	r3, [r3, #0]
 8003258:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2224      	movs	r2, #36	; 0x24
 800325e:	2100      	movs	r1, #0
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	e009      	b.n	8003278 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2224      	movs	r2, #36	; 0x24
 8003274:	2100      	movs	r1, #0
 8003276:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	667b      	str	r3, [r7, #100]	; 0x64
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	785b      	ldrb	r3, [r3, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d15c      	bne.n	8003340 <HAL_PCD_EP_DB_Transmit+0x708>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2250      	movs	r2, #80	; 0x50
 8003292:	5a9b      	ldrh	r3, [r3, r2]
 8003294:	b29b      	uxth	r3, r3
 8003296:	001a      	movs	r2, r3
 8003298:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800329a:	189b      	adds	r3, r3, r2
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	00da      	lsls	r2, r3, #3
 80032a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a6:	18d3      	adds	r3, r2, r3
 80032a8:	4a1f      	ldr	r2, [pc, #124]	; (8003328 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80032aa:	4694      	mov	ip, r2
 80032ac:	4463      	add	r3, ip
 80032ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d110      	bne.n	80032d8 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80032b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80032be:	4013      	ands	r3, r2
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4a19      	ldr	r2, [pc, #100]	; (8003334 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d4:	801a      	strh	r2, [r3, #0]
 80032d6:	e04d      	b.n	8003374 <HAL_PCD_EP_DB_Transmit+0x73c>
 80032d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032da:	2b3e      	cmp	r3, #62	; 0x3e
 80032dc:	d810      	bhi.n	8003300 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80032de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e0:	085b      	lsrs	r3, r3, #1
 80032e2:	657b      	str	r3, [r7, #84]	; 0x54
 80032e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032e6:	2201      	movs	r2, #1
 80032e8:	4013      	ands	r3, r2
 80032ea:	d002      	beq.n	80032f2 <HAL_PCD_EP_DB_Transmit+0x6ba>
 80032ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ee:	3301      	adds	r3, #1
 80032f0:	657b      	str	r3, [r7, #84]	; 0x54
 80032f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	029b      	lsls	r3, r3, #10
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	e039      	b.n	8003374 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	657b      	str	r3, [r7, #84]	; 0x54
 8003306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003308:	221f      	movs	r2, #31
 800330a:	4013      	ands	r3, r2
 800330c:	d102      	bne.n	8003314 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800330e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003310:	3b01      	subs	r3, #1
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
 8003314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003316:	b29b      	uxth	r3, r3
 8003318:	029b      	lsls	r3, r3, #10
 800331a:	b29b      	uxth	r3, r3
 800331c:	4a05      	ldr	r2, [pc, #20]	; (8003334 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	b29a      	uxth	r2, r3
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	801a      	strh	r2, [r3, #0]
 8003326:	e025      	b.n	8003374 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003328:	00000406 	.word	0x00000406
 800332c:	00000402 	.word	0x00000402
 8003330:	ffff83ff 	.word	0xffff83ff
 8003334:	ffff8000 	.word	0xffff8000
 8003338:	ffff8f8f 	.word	0xffff8f8f
 800333c:	ffffc080 	.word	0xffffc080
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d115      	bne.n	8003374 <HAL_PCD_EP_DB_Transmit+0x73c>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2250      	movs	r2, #80	; 0x50
 800334e:	5a9b      	ldrh	r3, [r3, r2]
 8003350:	b29b      	uxth	r3, r3
 8003352:	001a      	movs	r2, r3
 8003354:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003356:	189b      	adds	r3, r3, r2
 8003358:	667b      	str	r3, [r7, #100]	; 0x64
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	00da      	lsls	r2, r3, #3
 8003360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003362:	18d3      	adds	r3, r2, r3
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8003366:	4694      	mov	ip, r2
 8003368:	4463      	add	r3, ip
 800336a:	663b      	str	r3, [r7, #96]	; 0x60
 800336c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336e:	b29a      	uxth	r2, r3
 8003370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003372:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6818      	ldr	r0, [r3, #0]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	6959      	ldr	r1, [r3, #20]
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	895a      	ldrh	r2, [r3, #10]
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	b29b      	uxth	r3, r3
 8003384:	f003 fc78 	bl	8006c78 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	001a      	movs	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	18d3      	adds	r3, r2, r3
 8003396:	881b      	ldrh	r3, [r3, #0]
 8003398:	b29a      	uxth	r2, r3
 800339a:	2010      	movs	r0, #16
 800339c:	183b      	adds	r3, r7, r0
 800339e:	4911      	ldr	r1, [pc, #68]	; (80033e4 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	801a      	strh	r2, [r3, #0]
 80033a4:	183b      	adds	r3, r7, r0
 80033a6:	183a      	adds	r2, r7, r0
 80033a8:	8812      	ldrh	r2, [r2, #0]
 80033aa:	2110      	movs	r1, #16
 80033ac:	404a      	eors	r2, r1
 80033ae:	801a      	strh	r2, [r3, #0]
 80033b0:	183b      	adds	r3, r7, r0
 80033b2:	183a      	adds	r2, r7, r0
 80033b4:	8812      	ldrh	r2, [r2, #0]
 80033b6:	2120      	movs	r1, #32
 80033b8:	404a      	eors	r2, r1
 80033ba:	801a      	strh	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	001a      	movs	r2, r3
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	18d3      	adds	r3, r2, r3
 80033ca:	183a      	adds	r2, r7, r0
 80033cc:	8812      	ldrh	r2, [r2, #0]
 80033ce:	4906      	ldr	r1, [pc, #24]	; (80033e8 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	b292      	uxth	r2, r2
 80033d4:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b022      	add	sp, #136	; 0x88
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	00000406 	.word	0x00000406
 80033e4:	ffff8fbf 	.word	0xffff8fbf
 80033e8:	ffff8080 	.word	0xffff8080

080033ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	0008      	movs	r0, r1
 80033f6:	0011      	movs	r1, r2
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	240a      	movs	r4, #10
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	1c02      	adds	r2, r0, #0
 8003400:	801a      	strh	r2, [r3, #0]
 8003402:	2308      	movs	r3, #8
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	1c0a      	adds	r2, r1, #0
 8003408:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800340a:	0021      	movs	r1, r4
 800340c:	187b      	adds	r3, r7, r1
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	2280      	movs	r2, #128	; 0x80
 8003412:	4013      	ands	r3, r2
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800341a:	187b      	adds	r3, r7, r1
 800341c:	881b      	ldrh	r3, [r3, #0]
 800341e:	2207      	movs	r2, #7
 8003420:	4013      	ands	r3, r2
 8003422:	1c5a      	adds	r2, r3, #1
 8003424:	0013      	movs	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	189b      	adds	r3, r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	18d3      	adds	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
 8003432:	e00b      	b.n	800344c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003434:	230a      	movs	r3, #10
 8003436:	18fb      	adds	r3, r7, r3
 8003438:	881a      	ldrh	r2, [r3, #0]
 800343a:	0013      	movs	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	189b      	adds	r3, r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	3369      	adds	r3, #105	; 0x69
 8003444:	33ff      	adds	r3, #255	; 0xff
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	18d3      	adds	r3, r2, r3
 800344a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800344c:	2308      	movs	r3, #8
 800344e:	18fb      	adds	r3, r7, r3
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2200      	movs	r2, #0
 800345a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	b29a      	uxth	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	80da      	strh	r2, [r3, #6]
 8003464:	e00b      	b.n	800347e <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2201      	movs	r2, #1
 800346a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	b29a      	uxth	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	b29a      	uxth	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b007      	add	sp, #28
 8003486:	bd90      	pop	{r4, r7, pc}

08003488 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	23ba      	movs	r3, #186	; 0xba
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	2101      	movs	r1, #1
 800349e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	23b8      	movs	r3, #184	; 0xb8
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	2100      	movs	r1, #0
 80034a8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2254      	movs	r2, #84	; 0x54
 80034ae:	5a9b      	ldrh	r3, [r3, r2]
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2201      	movs	r2, #1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	b299      	uxth	r1, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2254      	movs	r2, #84	; 0x54
 80034bc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2254      	movs	r2, #84	; 0x54
 80034c2:	5a9b      	ldrh	r3, [r3, r2]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2202      	movs	r2, #2
 80034c8:	4313      	orrs	r3, r2
 80034ca:	b299      	uxth	r1, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2254      	movs	r2, #84	; 0x54
 80034d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	000a      	movs	r2, r1
 80034e6:	1cfb      	adds	r3, r7, #3
 80034e8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034ea:	46c0      	nop			; (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b5b0      	push	{r4, r5, r7, lr}
 80034f6:	b08a      	sub	sp, #40	; 0x28
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d102      	bne.n	8003508 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f000 fbbf 	bl	8003c86 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003508:	4bc9      	ldr	r3, [pc, #804]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	220c      	movs	r2, #12
 800350e:	4013      	ands	r3, r2
 8003510:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003512:	4bc7      	ldr	r3, [pc, #796]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	025b      	lsls	r3, r3, #9
 800351a:	4013      	ands	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2201      	movs	r2, #1
 8003524:	4013      	ands	r3, r2
 8003526:	d100      	bne.n	800352a <HAL_RCC_OscConfig+0x36>
 8003528:	e07e      	b.n	8003628 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	2b08      	cmp	r3, #8
 800352e:	d007      	beq.n	8003540 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	2b0c      	cmp	r3, #12
 8003534:	d112      	bne.n	800355c <HAL_RCC_OscConfig+0x68>
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	2380      	movs	r3, #128	; 0x80
 800353a:	025b      	lsls	r3, r3, #9
 800353c:	429a      	cmp	r2, r3
 800353e:	d10d      	bne.n	800355c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4bbb      	ldr	r3, [pc, #748]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	4013      	ands	r3, r2
 800354a:	d100      	bne.n	800354e <HAL_RCC_OscConfig+0x5a>
 800354c:	e06b      	b.n	8003626 <HAL_RCC_OscConfig+0x132>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d167      	bne.n	8003626 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f000 fb95 	bl	8003c86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	025b      	lsls	r3, r3, #9
 8003564:	429a      	cmp	r2, r3
 8003566:	d107      	bne.n	8003578 <HAL_RCC_OscConfig+0x84>
 8003568:	4bb1      	ldr	r3, [pc, #708]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4bb0      	ldr	r3, [pc, #704]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800356e:	2180      	movs	r1, #128	; 0x80
 8003570:	0249      	lsls	r1, r1, #9
 8003572:	430a      	orrs	r2, r1
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	e027      	b.n	80035c8 <HAL_RCC_OscConfig+0xd4>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	23a0      	movs	r3, #160	; 0xa0
 800357e:	02db      	lsls	r3, r3, #11
 8003580:	429a      	cmp	r2, r3
 8003582:	d10e      	bne.n	80035a2 <HAL_RCC_OscConfig+0xae>
 8003584:	4baa      	ldr	r3, [pc, #680]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4ba9      	ldr	r3, [pc, #676]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800358a:	2180      	movs	r1, #128	; 0x80
 800358c:	02c9      	lsls	r1, r1, #11
 800358e:	430a      	orrs	r2, r1
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	4ba7      	ldr	r3, [pc, #668]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	4ba6      	ldr	r3, [pc, #664]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003598:	2180      	movs	r1, #128	; 0x80
 800359a:	0249      	lsls	r1, r1, #9
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	e012      	b.n	80035c8 <HAL_RCC_OscConfig+0xd4>
 80035a2:	4ba3      	ldr	r3, [pc, #652]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4ba2      	ldr	r3, [pc, #648]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80035a8:	49a2      	ldr	r1, [pc, #648]	; (8003834 <HAL_RCC_OscConfig+0x340>)
 80035aa:	400a      	ands	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	4ba0      	ldr	r3, [pc, #640]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	025b      	lsls	r3, r3, #9
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4b9c      	ldr	r3, [pc, #624]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b9b      	ldr	r3, [pc, #620]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80035c2:	499d      	ldr	r1, [pc, #628]	; (8003838 <HAL_RCC_OscConfig+0x344>)
 80035c4:	400a      	ands	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d015      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fb64 	bl	8000c9c <HAL_GetTick>
 80035d4:	0003      	movs	r3, r0
 80035d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035d8:	e009      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035da:	f7fd fb5f 	bl	8000c9c <HAL_GetTick>
 80035de:	0002      	movs	r2, r0
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b64      	cmp	r3, #100	; 0x64
 80035e6:	d902      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	f000 fb4c 	bl	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ee:	4b90      	ldr	r3, [pc, #576]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	2380      	movs	r3, #128	; 0x80
 80035f4:	029b      	lsls	r3, r3, #10
 80035f6:	4013      	ands	r3, r2
 80035f8:	d0ef      	beq.n	80035da <HAL_RCC_OscConfig+0xe6>
 80035fa:	e015      	b.n	8003628 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fc:	f7fd fb4e 	bl	8000c9c <HAL_GetTick>
 8003600:	0003      	movs	r3, r0
 8003602:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003606:	f7fd fb49 	bl	8000c9c <HAL_GetTick>
 800360a:	0002      	movs	r2, r0
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b64      	cmp	r3, #100	; 0x64
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e336      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003618:	4b85      	ldr	r3, [pc, #532]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	4013      	ands	r3, r2
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x112>
 8003624:	e000      	b.n	8003628 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2202      	movs	r2, #2
 800362e:	4013      	ands	r3, r2
 8003630:	d100      	bne.n	8003634 <HAL_RCC_OscConfig+0x140>
 8003632:	e099      	b.n	8003768 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	2220      	movs	r2, #32
 800363e:	4013      	ands	r3, r2
 8003640:	d009      	beq.n	8003656 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003642:	4b7b      	ldr	r3, [pc, #492]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	4b7a      	ldr	r3, [pc, #488]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003648:	2120      	movs	r1, #32
 800364a:	430a      	orrs	r2, r1
 800364c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800364e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003650:	2220      	movs	r2, #32
 8003652:	4393      	bics	r3, r2
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b04      	cmp	r3, #4
 800365a:	d005      	beq.n	8003668 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0c      	cmp	r3, #12
 8003660:	d13e      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1ec>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d13b      	bne.n	80036e0 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003668:	4b71      	ldr	r3, [pc, #452]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2204      	movs	r2, #4
 800366e:	4013      	ands	r3, r2
 8003670:	d004      	beq.n	800367c <HAL_RCC_OscConfig+0x188>
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e304      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a6e      	ldr	r2, [pc, #440]	; (800383c <HAL_RCC_OscConfig+0x348>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	4b68      	ldr	r3, [pc, #416]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003692:	4b67      	ldr	r3, [pc, #412]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2209      	movs	r2, #9
 8003698:	4393      	bics	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	4b64      	ldr	r3, [pc, #400]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800369e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a0:	430a      	orrs	r2, r1
 80036a2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036a4:	f000 fc42 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 80036a8:	0001      	movs	r1, r0
 80036aa:	4b61      	ldr	r3, [pc, #388]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	220f      	movs	r2, #15
 80036b2:	4013      	ands	r3, r2
 80036b4:	4a62      	ldr	r2, [pc, #392]	; (8003840 <HAL_RCC_OscConfig+0x34c>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	000a      	movs	r2, r1
 80036ba:	40da      	lsrs	r2, r3
 80036bc:	4b61      	ldr	r3, [pc, #388]	; (8003844 <HAL_RCC_OscConfig+0x350>)
 80036be:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80036c0:	4b61      	ldr	r3, [pc, #388]	; (8003848 <HAL_RCC_OscConfig+0x354>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2513      	movs	r5, #19
 80036c6:	197c      	adds	r4, r7, r5
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fd faa1 	bl	8000c10 <HAL_InitTick>
 80036ce:	0003      	movs	r3, r0
 80036d0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80036d2:	197b      	adds	r3, r7, r5
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d046      	beq.n	8003768 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80036da:	197b      	adds	r3, r7, r5
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	e2d2      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80036e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d027      	beq.n	8003736 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80036e6:	4b52      	ldr	r3, [pc, #328]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2209      	movs	r2, #9
 80036ec:	4393      	bics	r3, r2
 80036ee:	0019      	movs	r1, r3
 80036f0:	4b4f      	ldr	r3, [pc, #316]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80036f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f8:	f7fd fad0 	bl	8000c9c <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003702:	f7fd facb 	bl	8000c9c <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e2b8      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003714:	4b46      	ldr	r3, [pc, #280]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2204      	movs	r2, #4
 800371a:	4013      	ands	r3, r2
 800371c:	d0f1      	beq.n	8003702 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b44      	ldr	r3, [pc, #272]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4a46      	ldr	r2, [pc, #280]	; (800383c <HAL_RCC_OscConfig+0x348>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	4b40      	ldr	r3, [pc, #256]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	e018      	b.n	8003768 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003736:	4b3e      	ldr	r3, [pc, #248]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b3d      	ldr	r3, [pc, #244]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800373c:	2101      	movs	r1, #1
 800373e:	438a      	bics	r2, r1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fd faab 	bl	8000c9c <HAL_GetTick>
 8003746:	0003      	movs	r3, r0
 8003748:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374c:	f7fd faa6 	bl	8000c9c <HAL_GetTick>
 8003750:	0002      	movs	r2, r0
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e293      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800375e:	4b34      	ldr	r3, [pc, #208]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2204      	movs	r2, #4
 8003764:	4013      	ands	r3, r2
 8003766:	d1f1      	bne.n	800374c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2210      	movs	r2, #16
 800376e:	4013      	ands	r3, r2
 8003770:	d100      	bne.n	8003774 <HAL_RCC_OscConfig+0x280>
 8003772:	e0a2      	b.n	80038ba <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d140      	bne.n	80037fc <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800377a:	4b2d      	ldr	r3, [pc, #180]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	2380      	movs	r3, #128	; 0x80
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4013      	ands	r3, r2
 8003784:	d005      	beq.n	8003792 <HAL_RCC_OscConfig+0x29e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e279      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003792:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4a2d      	ldr	r2, [pc, #180]	; (800384c <HAL_RCC_OscConfig+0x358>)
 8003798:	4013      	ands	r3, r2
 800379a:	0019      	movs	r1, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037a6:	4b22      	ldr	r3, [pc, #136]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	0a19      	lsrs	r1, r3, #8
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	061a      	lsls	r2, r3, #24
 80037b4:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	0b5b      	lsrs	r3, r3, #13
 80037c0:	3301      	adds	r3, #1
 80037c2:	2280      	movs	r2, #128	; 0x80
 80037c4:	0212      	lsls	r2, r2, #8
 80037c6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80037c8:	4b19      	ldr	r3, [pc, #100]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	210f      	movs	r1, #15
 80037d0:	400b      	ands	r3, r1
 80037d2:	491b      	ldr	r1, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x34c>)
 80037d4:	5ccb      	ldrb	r3, [r1, r3]
 80037d6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80037d8:	4b1a      	ldr	r3, [pc, #104]	; (8003844 <HAL_RCC_OscConfig+0x350>)
 80037da:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_RCC_OscConfig+0x354>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2513      	movs	r5, #19
 80037e2:	197c      	adds	r4, r7, r5
 80037e4:	0018      	movs	r0, r3
 80037e6:	f7fd fa13 	bl	8000c10 <HAL_InitTick>
 80037ea:	0003      	movs	r3, r0
 80037ec:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80037ee:	197b      	adds	r3, r7, r5
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d061      	beq.n	80038ba <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80037f6:	197b      	adds	r3, r7, r5
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	e244      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d040      	beq.n	8003886 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003804:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_OscConfig+0x33c>)
 800380a:	2180      	movs	r1, #128	; 0x80
 800380c:	0049      	lsls	r1, r1, #1
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fd fa43 	bl	8000c9c <HAL_GetTick>
 8003816:	0003      	movs	r3, r0
 8003818:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800381a:	e019      	b.n	8003850 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800381c:	f7fd fa3e 	bl	8000c9c <HAL_GetTick>
 8003820:	0002      	movs	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	2b02      	cmp	r3, #2
 8003828:	d912      	bls.n	8003850 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e22b      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	40021000 	.word	0x40021000
 8003834:	fffeffff 	.word	0xfffeffff
 8003838:	fffbffff 	.word	0xfffbffff
 800383c:	ffffe0ff 	.word	0xffffe0ff
 8003840:	08009248 	.word	0x08009248
 8003844:	20000000 	.word	0x20000000
 8003848:	20000004 	.word	0x20000004
 800384c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003850:	4bca      	ldr	r3, [pc, #808]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4013      	ands	r3, r2
 800385a:	d0df      	beq.n	800381c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800385c:	4bc7      	ldr	r3, [pc, #796]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4ac7      	ldr	r2, [pc, #796]	; (8003b80 <HAL_RCC_OscConfig+0x68c>)
 8003862:	4013      	ands	r3, r2
 8003864:	0019      	movs	r1, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	4bc4      	ldr	r3, [pc, #784]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 800386c:	430a      	orrs	r2, r1
 800386e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003870:	4bc2      	ldr	r3, [pc, #776]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	0a19      	lsrs	r1, r3, #8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	061a      	lsls	r2, r3, #24
 800387e:	4bbf      	ldr	r3, [pc, #764]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003880:	430a      	orrs	r2, r1
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	e019      	b.n	80038ba <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003886:	4bbd      	ldr	r3, [pc, #756]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4bbc      	ldr	r3, [pc, #752]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 800388c:	49bd      	ldr	r1, [pc, #756]	; (8003b84 <HAL_RCC_OscConfig+0x690>)
 800388e:	400a      	ands	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003892:	f7fd fa03 	bl	8000c9c <HAL_GetTick>
 8003896:	0003      	movs	r3, r0
 8003898:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800389c:	f7fd f9fe 	bl	8000c9c <HAL_GetTick>
 80038a0:	0002      	movs	r2, r0
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e1eb      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80038ae:	4bb3      	ldr	r3, [pc, #716]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4013      	ands	r3, r2
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2208      	movs	r2, #8
 80038c0:	4013      	ands	r3, r2
 80038c2:	d036      	beq.n	8003932 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d019      	beq.n	8003900 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038cc:	4bab      	ldr	r3, [pc, #684]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80038ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038d0:	4baa      	ldr	r3, [pc, #680]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80038d2:	2101      	movs	r1, #1
 80038d4:	430a      	orrs	r2, r1
 80038d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d8:	f7fd f9e0 	bl	8000c9c <HAL_GetTick>
 80038dc:	0003      	movs	r3, r0
 80038de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e2:	f7fd f9db 	bl	8000c9c <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1c8      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038f4:	4ba1      	ldr	r3, [pc, #644]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	2202      	movs	r2, #2
 80038fa:	4013      	ands	r3, r2
 80038fc:	d0f1      	beq.n	80038e2 <HAL_RCC_OscConfig+0x3ee>
 80038fe:	e018      	b.n	8003932 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003900:	4b9e      	ldr	r3, [pc, #632]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003902:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003904:	4b9d      	ldr	r3, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003906:	2101      	movs	r1, #1
 8003908:	438a      	bics	r2, r1
 800390a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390c:	f7fd f9c6 	bl	8000c9c <HAL_GetTick>
 8003910:	0003      	movs	r3, r0
 8003912:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003916:	f7fd f9c1 	bl	8000c9c <HAL_GetTick>
 800391a:	0002      	movs	r2, r0
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e1ae      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003928:	4b94      	ldr	r3, [pc, #592]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 800392a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d1f1      	bne.n	8003916 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2204      	movs	r2, #4
 8003938:	4013      	ands	r3, r2
 800393a:	d100      	bne.n	800393e <HAL_RCC_OscConfig+0x44a>
 800393c:	e0ae      	b.n	8003a9c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393e:	2023      	movs	r0, #35	; 0x23
 8003940:	183b      	adds	r3, r7, r0
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003946:	4b8d      	ldr	r3, [pc, #564]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394a:	2380      	movs	r3, #128	; 0x80
 800394c:	055b      	lsls	r3, r3, #21
 800394e:	4013      	ands	r3, r2
 8003950:	d109      	bne.n	8003966 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b8a      	ldr	r3, [pc, #552]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003954:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003956:	4b89      	ldr	r3, [pc, #548]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	0549      	lsls	r1, r1, #21
 800395c:	430a      	orrs	r2, r1
 800395e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003960:	183b      	adds	r3, r7, r0
 8003962:	2201      	movs	r2, #1
 8003964:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003966:	4b88      	ldr	r3, [pc, #544]	; (8003b88 <HAL_RCC_OscConfig+0x694>)
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	2380      	movs	r3, #128	; 0x80
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4013      	ands	r3, r2
 8003970:	d11a      	bne.n	80039a8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003972:	4b85      	ldr	r3, [pc, #532]	; (8003b88 <HAL_RCC_OscConfig+0x694>)
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b84      	ldr	r3, [pc, #528]	; (8003b88 <HAL_RCC_OscConfig+0x694>)
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	0049      	lsls	r1, r1, #1
 800397c:	430a      	orrs	r2, r1
 800397e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003980:	f7fd f98c 	bl	8000c9c <HAL_GetTick>
 8003984:	0003      	movs	r3, r0
 8003986:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398a:	f7fd f987 	bl	8000c9c <HAL_GetTick>
 800398e:	0002      	movs	r2, r0
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b64      	cmp	r3, #100	; 0x64
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e174      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b7a      	ldr	r3, [pc, #488]	; (8003b88 <HAL_RCC_OscConfig+0x694>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d107      	bne.n	80039c4 <HAL_RCC_OscConfig+0x4d0>
 80039b4:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039b8:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	0049      	lsls	r1, r1, #1
 80039be:	430a      	orrs	r2, r1
 80039c0:	651a      	str	r2, [r3, #80]	; 0x50
 80039c2:	e031      	b.n	8003a28 <HAL_RCC_OscConfig+0x534>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10c      	bne.n	80039e6 <HAL_RCC_OscConfig+0x4f2>
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039d0:	4b6a      	ldr	r3, [pc, #424]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039d2:	496c      	ldr	r1, [pc, #432]	; (8003b84 <HAL_RCC_OscConfig+0x690>)
 80039d4:	400a      	ands	r2, r1
 80039d6:	651a      	str	r2, [r3, #80]	; 0x50
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039dc:	4b67      	ldr	r3, [pc, #412]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039de:	496b      	ldr	r1, [pc, #428]	; (8003b8c <HAL_RCC_OscConfig+0x698>)
 80039e0:	400a      	ands	r2, r1
 80039e2:	651a      	str	r2, [r3, #80]	; 0x50
 80039e4:	e020      	b.n	8003a28 <HAL_RCC_OscConfig+0x534>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689a      	ldr	r2, [r3, #8]
 80039ea:	23a0      	movs	r3, #160	; 0xa0
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d10e      	bne.n	8003a10 <HAL_RCC_OscConfig+0x51c>
 80039f2:	4b62      	ldr	r3, [pc, #392]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039f6:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 80039f8:	2180      	movs	r1, #128	; 0x80
 80039fa:	00c9      	lsls	r1, r1, #3
 80039fc:	430a      	orrs	r2, r1
 80039fe:	651a      	str	r2, [r3, #80]	; 0x50
 8003a00:	4b5e      	ldr	r3, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a04:	4b5d      	ldr	r3, [pc, #372]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0049      	lsls	r1, r1, #1
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	651a      	str	r2, [r3, #80]	; 0x50
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x534>
 8003a10:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a16:	495b      	ldr	r1, [pc, #364]	; (8003b84 <HAL_RCC_OscConfig+0x690>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	651a      	str	r2, [r3, #80]	; 0x50
 8003a1c:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a20:	4b56      	ldr	r3, [pc, #344]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a22:	495a      	ldr	r1, [pc, #360]	; (8003b8c <HAL_RCC_OscConfig+0x698>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a30:	f7fd f934 	bl	8000c9c <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a38:	e009      	b.n	8003a4e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a3a:	f7fd f92f 	bl	8000c9c <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_OscConfig+0x69c>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e11b      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4013      	ands	r3, r2
 8003a58:	d0ef      	beq.n	8003a3a <HAL_RCC_OscConfig+0x546>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd f91e 	bl	8000c9c <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a64:	e009      	b.n	8003a7a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a66:	f7fd f919 	bl	8000c9c <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	4a47      	ldr	r2, [pc, #284]	; (8003b90 <HAL_RCC_OscConfig+0x69c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e105      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a7a:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003a7e:	2380      	movs	r3, #128	; 0x80
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4013      	ands	r3, r2
 8003a84:	d1ef      	bne.n	8003a66 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a86:	2323      	movs	r3, #35	; 0x23
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d105      	bne.n	8003a9c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a90:	4b3a      	ldr	r3, [pc, #232]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a94:	4b39      	ldr	r3, [pc, #228]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003a96:	493f      	ldr	r1, [pc, #252]	; (8003b94 <HAL_RCC_OscConfig+0x6a0>)
 8003a98:	400a      	ands	r2, r1
 8003a9a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	d049      	beq.n	8003b3a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d026      	beq.n	8003afc <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003aae:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	609a      	str	r2, [r3, #8]
 8003aba:	4b30      	ldr	r3, [pc, #192]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003abc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003abe:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	635a      	str	r2, [r3, #52]	; 0x34
 8003ac6:	4b34      	ldr	r3, [pc, #208]	; (8003b98 <HAL_RCC_OscConfig+0x6a4>)
 8003ac8:	6a1a      	ldr	r2, [r3, #32]
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_RCC_OscConfig+0x6a4>)
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	0189      	lsls	r1, r1, #6
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad4:	f7fd f8e2 	bl	8000c9c <HAL_GetTick>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ade:	f7fd f8dd 	bl	8000c9c <HAL_GetTick>
 8003ae2:	0002      	movs	r2, r0
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e0ca      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003af0:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	2202      	movs	r2, #2
 8003af6:	4013      	ands	r3, r2
 8003af8:	d0f1      	beq.n	8003ade <HAL_RCC_OscConfig+0x5ea>
 8003afa:	e01e      	b.n	8003b3a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	438a      	bics	r2, r1
 8003b06:	609a      	str	r2, [r3, #8]
 8003b08:	4b23      	ldr	r3, [pc, #140]	; (8003b98 <HAL_RCC_OscConfig+0x6a4>)
 8003b0a:	6a1a      	ldr	r2, [r3, #32]
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_RCC_OscConfig+0x6a4>)
 8003b0e:	4923      	ldr	r1, [pc, #140]	; (8003b9c <HAL_RCC_OscConfig+0x6a8>)
 8003b10:	400a      	ands	r2, r1
 8003b12:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b14:	f7fd f8c2 	bl	8000c9c <HAL_GetTick>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b1c:	e008      	b.n	8003b30 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b1e:	f7fd f8bd 	bl	8000c9c <HAL_GetTick>
 8003b22:	0002      	movs	r2, r0
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e0aa      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2202      	movs	r2, #2
 8003b36:	4013      	ands	r3, r2
 8003b38:	d1f1      	bne.n	8003b1e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d100      	bne.n	8003b44 <HAL_RCC_OscConfig+0x650>
 8003b42:	e09f      	b.n	8003c84 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d100      	bne.n	8003b4c <HAL_RCC_OscConfig+0x658>
 8003b4a:	e078      	b.n	8003c3e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d159      	bne.n	8003c08 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <HAL_RCC_OscConfig+0x688>)
 8003b5a:	4911      	ldr	r1, [pc, #68]	; (8003ba0 <HAL_RCC_OscConfig+0x6ac>)
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7fd f89c 	bl	8000c9c <HAL_GetTick>
 8003b64:	0003      	movs	r3, r0
 8003b66:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b68:	e01c      	b.n	8003ba4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b6a:	f7fd f897 	bl	8000c9c <HAL_GetTick>
 8003b6e:	0002      	movs	r2, r0
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d915      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e084      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	ffff1fff 	.word	0xffff1fff
 8003b84:	fffffeff 	.word	0xfffffeff
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	fffffbff 	.word	0xfffffbff
 8003b90:	00001388 	.word	0x00001388
 8003b94:	efffffff 	.word	0xefffffff
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	ffffdfff 	.word	0xffffdfff
 8003ba0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ba4:	4b3a      	ldr	r3, [pc, #232]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	049b      	lsls	r3, r3, #18
 8003bac:	4013      	ands	r3, r2
 8003bae:	d1dc      	bne.n	8003b6a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb0:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4a37      	ldr	r2, [pc, #220]	; (8003c94 <HAL_RCC_OscConfig+0x7a0>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	0019      	movs	r1, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b2f      	ldr	r3, [pc, #188]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003bd6:	2180      	movs	r1, #128	; 0x80
 8003bd8:	0449      	lsls	r1, r1, #17
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bde:	f7fd f85d 	bl	8000c9c <HAL_GetTick>
 8003be2:	0003      	movs	r3, r0
 8003be4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003be6:	e008      	b.n	8003bfa <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be8:	f7fd f858 	bl	8000c9c <HAL_GetTick>
 8003bec:	0002      	movs	r2, r0
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e045      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	2380      	movs	r3, #128	; 0x80
 8003c00:	049b      	lsls	r3, r3, #18
 8003c02:	4013      	ands	r3, r2
 8003c04:	d0f0      	beq.n	8003be8 <HAL_RCC_OscConfig+0x6f4>
 8003c06:	e03d      	b.n	8003c84 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003c0e:	4922      	ldr	r1, [pc, #136]	; (8003c98 <HAL_RCC_OscConfig+0x7a4>)
 8003c10:	400a      	ands	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd f842 	bl	8000c9c <HAL_GetTick>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c1e:	f7fd f83d 	bl	8000c9c <HAL_GetTick>
 8003c22:	0002      	movs	r2, r0
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e02a      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c30:	4b17      	ldr	r3, [pc, #92]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	2380      	movs	r3, #128	; 0x80
 8003c36:	049b      	lsls	r3, r3, #18
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x72a>
 8003c3c:	e022      	b.n	8003c84 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e01d      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c4a:	4b11      	ldr	r3, [pc, #68]	; (8003c90 <HAL_RCC_OscConfig+0x79c>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	2380      	movs	r3, #128	; 0x80
 8003c54:	025b      	lsls	r3, r3, #9
 8003c56:	401a      	ands	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d10f      	bne.n	8003c80 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	23f0      	movs	r3, #240	; 0xf0
 8003c64:	039b      	lsls	r3, r3, #14
 8003c66:	401a      	ands	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d107      	bne.n	8003c80 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	23c0      	movs	r3, #192	; 0xc0
 8003c74:	041b      	lsls	r3, r3, #16
 8003c76:	401a      	ands	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	0018      	movs	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b00a      	add	sp, #40	; 0x28
 8003c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8e:	46c0      	nop			; (mov r8, r8)
 8003c90:	40021000 	.word	0x40021000
 8003c94:	ff02ffff 	.word	0xff02ffff
 8003c98:	feffffff 	.word	0xfeffffff

08003c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c9c:	b5b0      	push	{r4, r5, r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e128      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb0:	4b96      	ldr	r3, [pc, #600]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d91e      	bls.n	8003cfc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cbe:	4b93      	ldr	r3, [pc, #588]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	4b90      	ldr	r3, [pc, #576]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cd0:	f7fc ffe4 	bl	8000c9c <HAL_GetTick>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd8:	e009      	b.n	8003cee <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cda:	f7fc ffdf 	bl	8000c9c <HAL_GetTick>
 8003cde:	0002      	movs	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	4a8a      	ldr	r2, [pc, #552]	; (8003f10 <HAL_RCC_ClockConfig+0x274>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e109      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cee:	4b87      	ldr	r3, [pc, #540]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d1ee      	bne.n	8003cda <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2202      	movs	r2, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d06:	4b83      	ldr	r3, [pc, #524]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	22f0      	movs	r2, #240	; 0xf0
 8003d0c:	4393      	bics	r3, r2
 8003d0e:	0019      	movs	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	4b7f      	ldr	r3, [pc, #508]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	4013      	ands	r3, r2
 8003d22:	d100      	bne.n	8003d26 <HAL_RCC_ClockConfig+0x8a>
 8003d24:	e089      	b.n	8003e3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d2e:	4b79      	ldr	r3, [pc, #484]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	2380      	movs	r3, #128	; 0x80
 8003d34:	029b      	lsls	r3, r3, #10
 8003d36:	4013      	ands	r3, r2
 8003d38:	d120      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e0e1      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	d107      	bne.n	8003d56 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d46:	4b73      	ldr	r3, [pc, #460]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	049b      	lsls	r3, r3, #18
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d114      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e0d5      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d106      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2204      	movs	r2, #4
 8003d64:	4013      	ands	r3, r2
 8003d66:	d109      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e0ca      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d6c:	4b69      	ldr	r3, [pc, #420]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	; 0x80
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	4013      	ands	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e0c2      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7c:	4b65      	ldr	r3, [pc, #404]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	2203      	movs	r2, #3
 8003d82:	4393      	bics	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	4b62      	ldr	r3, [pc, #392]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fc ff84 	bl	8000c9c <HAL_GetTick>
 8003d94:	0003      	movs	r3, r0
 8003d96:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d111      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003da0:	e009      	b.n	8003db6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003da2:	f7fc ff7b 	bl	8000c9c <HAL_GetTick>
 8003da6:	0002      	movs	r2, r0
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	4a58      	ldr	r2, [pc, #352]	; (8003f10 <HAL_RCC_ClockConfig+0x274>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e0a5      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003db6:	4b57      	ldr	r3, [pc, #348]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	220c      	movs	r2, #12
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d1ef      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x106>
 8003dc2:	e03a      	b.n	8003e3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d111      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dcc:	e009      	b.n	8003de2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dce:	f7fc ff65 	bl	8000c9c <HAL_GetTick>
 8003dd2:	0002      	movs	r2, r0
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	4a4d      	ldr	r2, [pc, #308]	; (8003f10 <HAL_RCC_ClockConfig+0x274>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e08f      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003de2:	4b4c      	ldr	r3, [pc, #304]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	220c      	movs	r2, #12
 8003de8:	4013      	ands	r3, r2
 8003dea:	2b0c      	cmp	r3, #12
 8003dec:	d1ef      	bne.n	8003dce <HAL_RCC_ClockConfig+0x132>
 8003dee:	e024      	b.n	8003e3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d11b      	bne.n	8003e30 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003df8:	e009      	b.n	8003e0e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dfa:	f7fc ff4f 	bl	8000c9c <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	4a42      	ldr	r2, [pc, #264]	; (8003f10 <HAL_RCC_ClockConfig+0x274>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e079      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	220c      	movs	r2, #12
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b04      	cmp	r3, #4
 8003e18:	d1ef      	bne.n	8003dfa <HAL_RCC_ClockConfig+0x15e>
 8003e1a:	e00e      	b.n	8003e3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fc ff3e 	bl	8000c9c <HAL_GetTick>
 8003e20:	0002      	movs	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	4a3a      	ldr	r2, [pc, #232]	; (8003f10 <HAL_RCC_ClockConfig+0x274>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e068      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e30:	4b38      	ldr	r3, [pc, #224]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	220c      	movs	r2, #12
 8003e36:	4013      	ands	r3, r2
 8003e38:	d1f0      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e3a:	4b34      	ldr	r3, [pc, #208]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	4013      	ands	r3, r2
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d21e      	bcs.n	8003e86 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4393      	bics	r3, r2
 8003e50:	0019      	movs	r1, r3
 8003e52:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e5a:	f7fc ff1f 	bl	8000c9c <HAL_GetTick>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e62:	e009      	b.n	8003e78 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e64:	f7fc ff1a 	bl	8000c9c <HAL_GetTick>
 8003e68:	0002      	movs	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	4a28      	ldr	r2, [pc, #160]	; (8003f10 <HAL_RCC_ClockConfig+0x274>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d901      	bls.n	8003e78 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e044      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e78:	4b24      	ldr	r3, [pc, #144]	; (8003f0c <HAL_RCC_ClockConfig+0x270>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4013      	ands	r3, r2
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d1ee      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2204      	movs	r2, #4
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e90:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	4a20      	ldr	r2, [pc, #128]	; (8003f18 <HAL_RCC_ClockConfig+0x27c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	4b1d      	ldr	r3, [pc, #116]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2208      	movs	r2, #8
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d00a      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eae:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4a1a      	ldr	r2, [pc, #104]	; (8003f1c <HAL_RCC_ClockConfig+0x280>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	0019      	movs	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	00da      	lsls	r2, r3, #3
 8003ebe:	4b15      	ldr	r3, [pc, #84]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ec4:	f000 f832 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003ec8:	0001      	movs	r1, r0
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x278>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	091b      	lsrs	r3, r3, #4
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <HAL_RCC_ClockConfig+0x284>)
 8003ed6:	5cd3      	ldrb	r3, [r2, r3]
 8003ed8:	000a      	movs	r2, r1
 8003eda:	40da      	lsrs	r2, r3
 8003edc:	4b11      	ldr	r3, [pc, #68]	; (8003f24 <HAL_RCC_ClockConfig+0x288>)
 8003ede:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_RCC_ClockConfig+0x28c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	250b      	movs	r5, #11
 8003ee6:	197c      	adds	r4, r7, r5
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7fc fe91 	bl	8000c10 <HAL_InitTick>
 8003eee:	0003      	movs	r3, r0
 8003ef0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003ef2:	197b      	adds	r3, r7, r5
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003efa:	197b      	adds	r3, r7, r5
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	e000      	b.n	8003f02 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	0018      	movs	r0, r3
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bdb0      	pop	{r4, r5, r7, pc}
 8003f0a:	46c0      	nop			; (mov r8, r8)
 8003f0c:	40022000 	.word	0x40022000
 8003f10:	00001388 	.word	0x00001388
 8003f14:	40021000 	.word	0x40021000
 8003f18:	fffff8ff 	.word	0xfffff8ff
 8003f1c:	ffffc7ff 	.word	0xffffc7ff
 8003f20:	08009248 	.word	0x08009248
 8003f24:	20000000 	.word	0x20000000
 8003f28:	20000004 	.word	0x20000004

08003f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	b5b0      	push	{r4, r5, r7, lr}
 8003f2e:	b08e      	sub	sp, #56	; 0x38
 8003f30:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f32:	4b4c      	ldr	r3, [pc, #304]	; (8004064 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3a:	230c      	movs	r3, #12
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b0c      	cmp	r3, #12
 8003f40:	d014      	beq.n	8003f6c <HAL_RCC_GetSysClockFreq+0x40>
 8003f42:	d900      	bls.n	8003f46 <HAL_RCC_GetSysClockFreq+0x1a>
 8003f44:	e07b      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x112>
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d002      	beq.n	8003f50 <HAL_RCC_GetSysClockFreq+0x24>
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f4e:	e076      	b.n	800403e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f50:	4b44      	ldr	r3, [pc, #272]	; (8004064 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2210      	movs	r2, #16
 8003f56:	4013      	ands	r3, r2
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f5c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003f5e:	e07c      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003f60:	4b42      	ldr	r3, [pc, #264]	; (800406c <HAL_RCC_GetSysClockFreq+0x140>)
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f64:	e079      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f66:	4b42      	ldr	r3, [pc, #264]	; (8004070 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003f6a:	e076      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6e:	0c9a      	lsrs	r2, r3, #18
 8003f70:	230f      	movs	r3, #15
 8003f72:	401a      	ands	r2, r3
 8003f74:	4b3f      	ldr	r3, [pc, #252]	; (8004074 <HAL_RCC_GetSysClockFreq+0x148>)
 8003f76:	5c9b      	ldrb	r3, [r3, r2]
 8003f78:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	0d9a      	lsrs	r2, r3, #22
 8003f7e:	2303      	movs	r3, #3
 8003f80:	4013      	ands	r3, r2
 8003f82:	3301      	adds	r3, #1
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f86:	4b37      	ldr	r3, [pc, #220]	; (8004064 <HAL_RCC_GetSysClockFreq+0x138>)
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	2380      	movs	r3, #128	; 0x80
 8003f8c:	025b      	lsls	r3, r3, #9
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d01a      	beq.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	61bb      	str	r3, [r7, #24]
 8003f96:	2300      	movs	r3, #0
 8003f98:	61fb      	str	r3, [r7, #28]
 8003f9a:	4a35      	ldr	r2, [pc, #212]	; (8004070 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	69f9      	ldr	r1, [r7, #28]
 8003fa2:	f7fc f95d 	bl	8000260 <__aeabi_lmul>
 8003fa6:	0002      	movs	r2, r0
 8003fa8:	000b      	movs	r3, r1
 8003faa:	0010      	movs	r0, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	693a      	ldr	r2, [r7, #16]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f7fc f931 	bl	8000220 <__aeabi_uldivmod>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	000b      	movs	r3, r1
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc6:	e037      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003fc8:	4b26      	ldr	r3, [pc, #152]	; (8004064 <HAL_RCC_GetSysClockFreq+0x138>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2210      	movs	r2, #16
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d01a      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	60bb      	str	r3, [r7, #8]
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	4a23      	ldr	r2, [pc, #140]	; (8004068 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003fdc:	2300      	movs	r3, #0
 8003fde:	68b8      	ldr	r0, [r7, #8]
 8003fe0:	68f9      	ldr	r1, [r7, #12]
 8003fe2:	f7fc f93d 	bl	8000260 <__aeabi_lmul>
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	000b      	movs	r3, r1
 8003fea:	0010      	movs	r0, r2
 8003fec:	0019      	movs	r1, r3
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f7fc f911 	bl	8000220 <__aeabi_uldivmod>
 8003ffe:	0002      	movs	r2, r0
 8004000:	000b      	movs	r3, r1
 8004002:	0013      	movs	r3, r2
 8004004:	637b      	str	r3, [r7, #52]	; 0x34
 8004006:	e017      	b.n	8004038 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	0018      	movs	r0, r3
 800400c:	2300      	movs	r3, #0
 800400e:	0019      	movs	r1, r3
 8004010:	4a16      	ldr	r2, [pc, #88]	; (800406c <HAL_RCC_GetSysClockFreq+0x140>)
 8004012:	2300      	movs	r3, #0
 8004014:	f7fc f924 	bl	8000260 <__aeabi_lmul>
 8004018:	0002      	movs	r2, r0
 800401a:	000b      	movs	r3, r1
 800401c:	0010      	movs	r0, r2
 800401e:	0019      	movs	r1, r3
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	001c      	movs	r4, r3
 8004024:	2300      	movs	r3, #0
 8004026:	001d      	movs	r5, r3
 8004028:	0022      	movs	r2, r4
 800402a:	002b      	movs	r3, r5
 800402c:	f7fc f8f8 	bl	8000220 <__aeabi_uldivmod>
 8004030:	0002      	movs	r2, r0
 8004032:	000b      	movs	r3, r1
 8004034:	0013      	movs	r3, r2
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800403c:	e00d      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <HAL_RCC_GetSysClockFreq+0x138>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	0b5b      	lsrs	r3, r3, #13
 8004044:	2207      	movs	r2, #7
 8004046:	4013      	ands	r3, r2
 8004048:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	3301      	adds	r3, #1
 800404e:	2280      	movs	r2, #128	; 0x80
 8004050:	0212      	lsls	r2, r2, #8
 8004052:	409a      	lsls	r2, r3
 8004054:	0013      	movs	r3, r2
 8004056:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004058:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b00e      	add	sp, #56	; 0x38
 8004062:	bdb0      	pop	{r4, r5, r7, pc}
 8004064:	40021000 	.word	0x40021000
 8004068:	003d0900 	.word	0x003d0900
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200
 8004074:	08009260 	.word	0x08009260

08004078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b02      	ldr	r3, [pc, #8]	; (8004088 <HAL_RCC_GetHCLKFreq+0x10>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	20000000 	.word	0x20000000

0800408c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004090:	f7ff fff2 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004094:	0001      	movs	r1, r0
 8004096:	4b06      	ldr	r3, [pc, #24]	; (80040b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	0a1b      	lsrs	r3, r3, #8
 800409c:	2207      	movs	r2, #7
 800409e:	4013      	ands	r3, r2
 80040a0:	4a04      	ldr	r2, [pc, #16]	; (80040b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040a2:	5cd3      	ldrb	r3, [r2, r3]
 80040a4:	40d9      	lsrs	r1, r3
 80040a6:	000b      	movs	r3, r1
}
 80040a8:	0018      	movs	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	08009258 	.word	0x08009258

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040bc:	f7ff ffdc 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 80040c0:	0001      	movs	r1, r0
 80040c2:	4b06      	ldr	r3, [pc, #24]	; (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	0adb      	lsrs	r3, r3, #11
 80040c8:	2207      	movs	r2, #7
 80040ca:	4013      	ands	r3, r2
 80040cc:	4a04      	ldr	r2, [pc, #16]	; (80040e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80040ce:	5cd3      	ldrb	r3, [r2, r3]
 80040d0:	40d9      	lsrs	r1, r3
 80040d2:	000b      	movs	r3, r1
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	40021000 	.word	0x40021000
 80040e0:	08009258 	.word	0x08009258

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80040ec:	2317      	movs	r3, #23
 80040ee:	18fb      	adds	r3, r7, r3
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2220      	movs	r2, #32
 80040fa:	4013      	ands	r3, r2
 80040fc:	d106      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4013      	ands	r3, r2
 8004108:	d100      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800410a:	e0d9      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800410c:	4ba4      	ldr	r3, [pc, #656]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800410e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	055b      	lsls	r3, r3, #21
 8004114:	4013      	ands	r3, r2
 8004116:	d10a      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004118:	4ba1      	ldr	r3, [pc, #644]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800411a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800411c:	4ba0      	ldr	r3, [pc, #640]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	0549      	lsls	r1, r1, #21
 8004122:	430a      	orrs	r2, r1
 8004124:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004126:	2317      	movs	r3, #23
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	2201      	movs	r2, #1
 800412c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	4b9d      	ldr	r3, [pc, #628]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4013      	ands	r3, r2
 8004138:	d11a      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413a:	4b9a      	ldr	r3, [pc, #616]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	4b99      	ldr	r3, [pc, #612]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004140:	2180      	movs	r1, #128	; 0x80
 8004142:	0049      	lsls	r1, r1, #1
 8004144:	430a      	orrs	r2, r1
 8004146:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004148:	f7fc fda8 	bl	8000c9c <HAL_GetTick>
 800414c:	0003      	movs	r3, r0
 800414e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fc fda3 	bl	8000c9c <HAL_GetTick>
 8004156:	0002      	movs	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	; 0x64
 800415e:	d901      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e118      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	4b8f      	ldr	r3, [pc, #572]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4013      	ands	r3, r2
 800416e:	d0f0      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004170:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	23c0      	movs	r3, #192	; 0xc0
 8004176:	039b      	lsls	r3, r3, #14
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	23c0      	movs	r3, #192	; 0xc0
 8004182:	039b      	lsls	r3, r3, #14
 8004184:	4013      	ands	r3, r2
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	23c0      	movs	r3, #192	; 0xc0
 8004192:	039b      	lsls	r3, r3, #14
 8004194:	4013      	ands	r3, r2
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	429a      	cmp	r2, r3
 800419a:	d013      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	23c0      	movs	r3, #192	; 0xc0
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	401a      	ands	r2, r3
 80041a6:	23c0      	movs	r3, #192	; 0xc0
 80041a8:	029b      	lsls	r3, r3, #10
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d10a      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80041ae:	4b7c      	ldr	r3, [pc, #496]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	2380      	movs	r3, #128	; 0x80
 80041b4:	029b      	lsls	r3, r3, #10
 80041b6:	401a      	ands	r2, r3
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	429a      	cmp	r2, r3
 80041be:	d101      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0e8      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80041c4:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80041c8:	23c0      	movs	r3, #192	; 0xc0
 80041ca:	029b      	lsls	r3, r3, #10
 80041cc:	4013      	ands	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d049      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	23c0      	movs	r3, #192	; 0xc0
 80041dc:	029b      	lsls	r3, r3, #10
 80041de:	4013      	ands	r3, r2
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d004      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2220      	movs	r2, #32
 80041ec:	4013      	ands	r3, r2
 80041ee:	d10d      	bne.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	029b      	lsls	r3, r3, #10
 80041f8:	4013      	ands	r3, r2
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d034      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	4013      	ands	r3, r2
 800420a:	d02e      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800420c:	4b64      	ldr	r3, [pc, #400]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800420e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004210:	4a65      	ldr	r2, [pc, #404]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004212:	4013      	ands	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004216:	4b62      	ldr	r3, [pc, #392]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800421a:	4b61      	ldr	r3, [pc, #388]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800421c:	2180      	movs	r1, #128	; 0x80
 800421e:	0309      	lsls	r1, r1, #12
 8004220:	430a      	orrs	r2, r1
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004224:	4b5e      	ldr	r3, [pc, #376]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004228:	4b5d      	ldr	r3, [pc, #372]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800422a:	4960      	ldr	r1, [pc, #384]	; (80043ac <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800422c:	400a      	ands	r2, r1
 800422e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004230:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d014      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004240:	f7fc fd2c 	bl	8000c9c <HAL_GetTick>
 8004244:	0003      	movs	r3, r0
 8004246:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004248:	e009      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424a:	f7fc fd27 	bl	8000c9c <HAL_GetTick>
 800424e:	0002      	movs	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	4a56      	ldr	r2, [pc, #344]	; (80043b0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e09b      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800425e:	4b50      	ldr	r3, [pc, #320]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004260:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004262:	2380      	movs	r3, #128	; 0x80
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4013      	ands	r3, r2
 8004268:	d0ef      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	23c0      	movs	r3, #192	; 0xc0
 8004270:	029b      	lsls	r3, r3, #10
 8004272:	401a      	ands	r2, r3
 8004274:	23c0      	movs	r3, #192	; 0xc0
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	429a      	cmp	r2, r3
 800427a:	d10c      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800427c:	4b48      	ldr	r3, [pc, #288]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a4c      	ldr	r2, [pc, #304]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004282:	4013      	ands	r3, r2
 8004284:	0019      	movs	r1, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	23c0      	movs	r3, #192	; 0xc0
 800428c:	039b      	lsls	r3, r3, #14
 800428e:	401a      	ands	r2, r3
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004292:	430a      	orrs	r2, r1
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	4b42      	ldr	r3, [pc, #264]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004298:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	23c0      	movs	r3, #192	; 0xc0
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	401a      	ands	r2, r3
 80042a4:	4b3e      	ldr	r3, [pc, #248]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042a6:	430a      	orrs	r2, r1
 80042a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042aa:	2317      	movs	r3, #23
 80042ac:	18fb      	adds	r3, r7, r3
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b3a      	ldr	r3, [pc, #232]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b8:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042ba:	493f      	ldr	r1, [pc, #252]	; (80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80042bc:	400a      	ands	r2, r1
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	4013      	ands	r3, r2
 80042c8:	d009      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ca:	4b35      	ldr	r3, [pc, #212]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ce:	2203      	movs	r2, #3
 80042d0:	4393      	bics	r3, r2
 80042d2:	0019      	movs	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68da      	ldr	r2, [r3, #12]
 80042d8:	4b31      	ldr	r3, [pc, #196]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042da:	430a      	orrs	r2, r1
 80042dc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2202      	movs	r2, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042e8:	4b2d      	ldr	r3, [pc, #180]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ec:	220c      	movs	r2, #12
 80042ee:	4393      	bics	r3, r2
 80042f0:	0019      	movs	r1, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042f8:	430a      	orrs	r2, r1
 80042fa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2204      	movs	r2, #4
 8004302:	4013      	ands	r3, r2
 8004304:	d009      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430a:	4a2c      	ldr	r2, [pc, #176]	; (80043bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800430c:	4013      	ands	r3, r2
 800430e:	0019      	movs	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	4b22      	ldr	r3, [pc, #136]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004316:	430a      	orrs	r2, r1
 8004318:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2208      	movs	r2, #8
 8004320:	4013      	ands	r3, r2
 8004322:	d009      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004328:	4a25      	ldr	r2, [pc, #148]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800432a:	4013      	ands	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699a      	ldr	r2, [r3, #24]
 8004332:	4b1b      	ldr	r3, [pc, #108]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004334:	430a      	orrs	r2, r1
 8004336:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	005b      	lsls	r3, r3, #1
 8004340:	4013      	ands	r3, r2
 8004342:	d009      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004344:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004348:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800434a:	4013      	ands	r3, r2
 800434c:	0019      	movs	r1, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69da      	ldr	r2, [r3, #28]
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004354:	430a      	orrs	r2, r1
 8004356:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2240      	movs	r2, #64	; 0x40
 800435e:	4013      	ands	r3, r2
 8004360:	d009      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004362:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004368:	4013      	ands	r3, r2
 800436a:	0019      	movs	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004370:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004372:	430a      	orrs	r2, r1
 8004374:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2280      	movs	r2, #128	; 0x80
 800437c:	4013      	ands	r3, r2
 800437e:	d009      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004380:	4b07      	ldr	r3, [pc, #28]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004384:	4a10      	ldr	r2, [pc, #64]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004386:	4013      	ands	r3, r2
 8004388:	0019      	movs	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1a      	ldr	r2, [r3, #32]
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004390:	430a      	orrs	r2, r1
 8004392:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	0018      	movs	r0, r3
 8004398:	46bd      	mov	sp, r7
 800439a:	b006      	add	sp, #24
 800439c:	bd80      	pop	{r7, pc}
 800439e:	46c0      	nop			; (mov r8, r8)
 80043a0:	40021000 	.word	0x40021000
 80043a4:	40007000 	.word	0x40007000
 80043a8:	fffcffff 	.word	0xfffcffff
 80043ac:	fff7ffff 	.word	0xfff7ffff
 80043b0:	00001388 	.word	0x00001388
 80043b4:	ffcfffff 	.word	0xffcfffff
 80043b8:	efffffff 	.word	0xefffffff
 80043bc:	fffff3ff 	.word	0xfffff3ff
 80043c0:	ffffcfff 	.word	0xffffcfff
 80043c4:	fbffffff 	.word	0xfbffffff
 80043c8:	fff3ffff 	.word	0xfff3ffff

080043cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e044      	b.n	8004468 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2274      	movs	r2, #116	; 0x74
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fc fb1f 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2224      	movs	r2, #36	; 0x24
 80043fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2101      	movs	r1, #1
 8004408:	438a      	bics	r2, r1
 800440a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0018      	movs	r0, r3
 8004410:	f000 f830 	bl	8004474 <UART_SetConfig>
 8004414:	0003      	movs	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e024      	b.n	8004468 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	2b00      	cmp	r3, #0
 8004424:	d003      	beq.n	800442e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 fae1 	bl	80049f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685a      	ldr	r2, [r3, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	490d      	ldr	r1, [pc, #52]	; (8004470 <HAL_UART_Init+0xa4>)
 800443a:	400a      	ands	r2, r1
 800443c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	212a      	movs	r1, #42	; 0x2a
 800444a:	438a      	bics	r2, r1
 800444c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	430a      	orrs	r2, r1
 800445c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 fb79 	bl	8004b58 <UART_CheckIdleState>
 8004466:	0003      	movs	r3, r0
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b002      	add	sp, #8
 800446e:	bd80      	pop	{r7, pc}
 8004470:	ffffb7ff 	.word	0xffffb7ff

08004474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004474:	b5b0      	push	{r4, r5, r7, lr}
 8004476:	b08e      	sub	sp, #56	; 0x38
 8004478:	af00      	add	r7, sp, #0
 800447a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800447c:	231a      	movs	r3, #26
 800447e:	2218      	movs	r2, #24
 8004480:	4694      	mov	ip, r2
 8004482:	44bc      	add	ip, r7
 8004484:	4463      	add	r3, ip
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	431a      	orrs	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	431a      	orrs	r2, r3
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	69db      	ldr	r3, [r3, #28]
 800449e:	4313      	orrs	r3, r2
 80044a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4ab0      	ldr	r2, [pc, #704]	; (800476c <UART_SetConfig+0x2f8>)
 80044aa:	4013      	ands	r3, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b4:	430a      	orrs	r2, r1
 80044b6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4aac      	ldr	r2, [pc, #688]	; (8004770 <UART_SetConfig+0x2fc>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4aa6      	ldr	r2, [pc, #664]	; (8004774 <UART_SetConfig+0x300>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	6a1b      	ldr	r3, [r3, #32]
 80044e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044e6:	4313      	orrs	r3, r2
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	4aa1      	ldr	r2, [pc, #644]	; (8004778 <UART_SetConfig+0x304>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	0019      	movs	r1, r3
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044fc:	430a      	orrs	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a9d      	ldr	r2, [pc, #628]	; (800477c <UART_SetConfig+0x308>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d136      	bne.n	8004578 <UART_SetConfig+0x104>
 800450a:	4b9d      	ldr	r3, [pc, #628]	; (8004780 <UART_SetConfig+0x30c>)
 800450c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800450e:	2203      	movs	r2, #3
 8004510:	4013      	ands	r3, r2
 8004512:	2b03      	cmp	r3, #3
 8004514:	d020      	beq.n	8004558 <UART_SetConfig+0xe4>
 8004516:	d827      	bhi.n	8004568 <UART_SetConfig+0xf4>
 8004518:	2b02      	cmp	r3, #2
 800451a:	d00d      	beq.n	8004538 <UART_SetConfig+0xc4>
 800451c:	d824      	bhi.n	8004568 <UART_SetConfig+0xf4>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <UART_SetConfig+0xb4>
 8004522:	2b01      	cmp	r3, #1
 8004524:	d010      	beq.n	8004548 <UART_SetConfig+0xd4>
 8004526:	e01f      	b.n	8004568 <UART_SetConfig+0xf4>
 8004528:	231b      	movs	r3, #27
 800452a:	2218      	movs	r2, #24
 800452c:	4694      	mov	ip, r2
 800452e:	44bc      	add	ip, r7
 8004530:	4463      	add	r3, ip
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e0c5      	b.n	80046c4 <UART_SetConfig+0x250>
 8004538:	231b      	movs	r3, #27
 800453a:	2218      	movs	r2, #24
 800453c:	4694      	mov	ip, r2
 800453e:	44bc      	add	ip, r7
 8004540:	4463      	add	r3, ip
 8004542:	2202      	movs	r2, #2
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	e0bd      	b.n	80046c4 <UART_SetConfig+0x250>
 8004548:	231b      	movs	r3, #27
 800454a:	2218      	movs	r2, #24
 800454c:	4694      	mov	ip, r2
 800454e:	44bc      	add	ip, r7
 8004550:	4463      	add	r3, ip
 8004552:	2204      	movs	r2, #4
 8004554:	701a      	strb	r2, [r3, #0]
 8004556:	e0b5      	b.n	80046c4 <UART_SetConfig+0x250>
 8004558:	231b      	movs	r3, #27
 800455a:	2218      	movs	r2, #24
 800455c:	4694      	mov	ip, r2
 800455e:	44bc      	add	ip, r7
 8004560:	4463      	add	r3, ip
 8004562:	2208      	movs	r2, #8
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	e0ad      	b.n	80046c4 <UART_SetConfig+0x250>
 8004568:	231b      	movs	r3, #27
 800456a:	2218      	movs	r2, #24
 800456c:	4694      	mov	ip, r2
 800456e:	44bc      	add	ip, r7
 8004570:	4463      	add	r3, ip
 8004572:	2210      	movs	r2, #16
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e0a5      	b.n	80046c4 <UART_SetConfig+0x250>
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a81      	ldr	r2, [pc, #516]	; (8004784 <UART_SetConfig+0x310>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d136      	bne.n	80045f0 <UART_SetConfig+0x17c>
 8004582:	4b7f      	ldr	r3, [pc, #508]	; (8004780 <UART_SetConfig+0x30c>)
 8004584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004586:	220c      	movs	r2, #12
 8004588:	4013      	ands	r3, r2
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d020      	beq.n	80045d0 <UART_SetConfig+0x15c>
 800458e:	d827      	bhi.n	80045e0 <UART_SetConfig+0x16c>
 8004590:	2b08      	cmp	r3, #8
 8004592:	d00d      	beq.n	80045b0 <UART_SetConfig+0x13c>
 8004594:	d824      	bhi.n	80045e0 <UART_SetConfig+0x16c>
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <UART_SetConfig+0x12c>
 800459a:	2b04      	cmp	r3, #4
 800459c:	d010      	beq.n	80045c0 <UART_SetConfig+0x14c>
 800459e:	e01f      	b.n	80045e0 <UART_SetConfig+0x16c>
 80045a0:	231b      	movs	r3, #27
 80045a2:	2218      	movs	r2, #24
 80045a4:	4694      	mov	ip, r2
 80045a6:	44bc      	add	ip, r7
 80045a8:	4463      	add	r3, ip
 80045aa:	2200      	movs	r2, #0
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	e089      	b.n	80046c4 <UART_SetConfig+0x250>
 80045b0:	231b      	movs	r3, #27
 80045b2:	2218      	movs	r2, #24
 80045b4:	4694      	mov	ip, r2
 80045b6:	44bc      	add	ip, r7
 80045b8:	4463      	add	r3, ip
 80045ba:	2202      	movs	r2, #2
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e081      	b.n	80046c4 <UART_SetConfig+0x250>
 80045c0:	231b      	movs	r3, #27
 80045c2:	2218      	movs	r2, #24
 80045c4:	4694      	mov	ip, r2
 80045c6:	44bc      	add	ip, r7
 80045c8:	4463      	add	r3, ip
 80045ca:	2204      	movs	r2, #4
 80045cc:	701a      	strb	r2, [r3, #0]
 80045ce:	e079      	b.n	80046c4 <UART_SetConfig+0x250>
 80045d0:	231b      	movs	r3, #27
 80045d2:	2218      	movs	r2, #24
 80045d4:	4694      	mov	ip, r2
 80045d6:	44bc      	add	ip, r7
 80045d8:	4463      	add	r3, ip
 80045da:	2208      	movs	r2, #8
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e071      	b.n	80046c4 <UART_SetConfig+0x250>
 80045e0:	231b      	movs	r3, #27
 80045e2:	2218      	movs	r2, #24
 80045e4:	4694      	mov	ip, r2
 80045e6:	44bc      	add	ip, r7
 80045e8:	4463      	add	r3, ip
 80045ea:	2210      	movs	r2, #16
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e069      	b.n	80046c4 <UART_SetConfig+0x250>
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a64      	ldr	r2, [pc, #400]	; (8004788 <UART_SetConfig+0x314>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d107      	bne.n	800460a <UART_SetConfig+0x196>
 80045fa:	231b      	movs	r3, #27
 80045fc:	2218      	movs	r2, #24
 80045fe:	4694      	mov	ip, r2
 8004600:	44bc      	add	ip, r7
 8004602:	4463      	add	r3, ip
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
 8004608:	e05c      	b.n	80046c4 <UART_SetConfig+0x250>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a5f      	ldr	r2, [pc, #380]	; (800478c <UART_SetConfig+0x318>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d107      	bne.n	8004624 <UART_SetConfig+0x1b0>
 8004614:	231b      	movs	r3, #27
 8004616:	2218      	movs	r2, #24
 8004618:	4694      	mov	ip, r2
 800461a:	44bc      	add	ip, r7
 800461c:	4463      	add	r3, ip
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
 8004622:	e04f      	b.n	80046c4 <UART_SetConfig+0x250>
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a52      	ldr	r2, [pc, #328]	; (8004774 <UART_SetConfig+0x300>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d143      	bne.n	80046b6 <UART_SetConfig+0x242>
 800462e:	4b54      	ldr	r3, [pc, #336]	; (8004780 <UART_SetConfig+0x30c>)
 8004630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004632:	23c0      	movs	r3, #192	; 0xc0
 8004634:	011b      	lsls	r3, r3, #4
 8004636:	4013      	ands	r3, r2
 8004638:	22c0      	movs	r2, #192	; 0xc0
 800463a:	0112      	lsls	r2, r2, #4
 800463c:	4293      	cmp	r3, r2
 800463e:	d02a      	beq.n	8004696 <UART_SetConfig+0x222>
 8004640:	22c0      	movs	r2, #192	; 0xc0
 8004642:	0112      	lsls	r2, r2, #4
 8004644:	4293      	cmp	r3, r2
 8004646:	d82e      	bhi.n	80046a6 <UART_SetConfig+0x232>
 8004648:	2280      	movs	r2, #128	; 0x80
 800464a:	0112      	lsls	r2, r2, #4
 800464c:	4293      	cmp	r3, r2
 800464e:	d012      	beq.n	8004676 <UART_SetConfig+0x202>
 8004650:	2280      	movs	r2, #128	; 0x80
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	4293      	cmp	r3, r2
 8004656:	d826      	bhi.n	80046a6 <UART_SetConfig+0x232>
 8004658:	2b00      	cmp	r3, #0
 800465a:	d004      	beq.n	8004666 <UART_SetConfig+0x1f2>
 800465c:	2280      	movs	r2, #128	; 0x80
 800465e:	00d2      	lsls	r2, r2, #3
 8004660:	4293      	cmp	r3, r2
 8004662:	d010      	beq.n	8004686 <UART_SetConfig+0x212>
 8004664:	e01f      	b.n	80046a6 <UART_SetConfig+0x232>
 8004666:	231b      	movs	r3, #27
 8004668:	2218      	movs	r2, #24
 800466a:	4694      	mov	ip, r2
 800466c:	44bc      	add	ip, r7
 800466e:	4463      	add	r3, ip
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
 8004674:	e026      	b.n	80046c4 <UART_SetConfig+0x250>
 8004676:	231b      	movs	r3, #27
 8004678:	2218      	movs	r2, #24
 800467a:	4694      	mov	ip, r2
 800467c:	44bc      	add	ip, r7
 800467e:	4463      	add	r3, ip
 8004680:	2202      	movs	r2, #2
 8004682:	701a      	strb	r2, [r3, #0]
 8004684:	e01e      	b.n	80046c4 <UART_SetConfig+0x250>
 8004686:	231b      	movs	r3, #27
 8004688:	2218      	movs	r2, #24
 800468a:	4694      	mov	ip, r2
 800468c:	44bc      	add	ip, r7
 800468e:	4463      	add	r3, ip
 8004690:	2204      	movs	r2, #4
 8004692:	701a      	strb	r2, [r3, #0]
 8004694:	e016      	b.n	80046c4 <UART_SetConfig+0x250>
 8004696:	231b      	movs	r3, #27
 8004698:	2218      	movs	r2, #24
 800469a:	4694      	mov	ip, r2
 800469c:	44bc      	add	ip, r7
 800469e:	4463      	add	r3, ip
 80046a0:	2208      	movs	r2, #8
 80046a2:	701a      	strb	r2, [r3, #0]
 80046a4:	e00e      	b.n	80046c4 <UART_SetConfig+0x250>
 80046a6:	231b      	movs	r3, #27
 80046a8:	2218      	movs	r2, #24
 80046aa:	4694      	mov	ip, r2
 80046ac:	44bc      	add	ip, r7
 80046ae:	4463      	add	r3, ip
 80046b0:	2210      	movs	r2, #16
 80046b2:	701a      	strb	r2, [r3, #0]
 80046b4:	e006      	b.n	80046c4 <UART_SetConfig+0x250>
 80046b6:	231b      	movs	r3, #27
 80046b8:	2218      	movs	r2, #24
 80046ba:	4694      	mov	ip, r2
 80046bc:	44bc      	add	ip, r7
 80046be:	4463      	add	r3, ip
 80046c0:	2210      	movs	r2, #16
 80046c2:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <UART_SetConfig+0x300>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d000      	beq.n	80046d0 <UART_SetConfig+0x25c>
 80046ce:	e09e      	b.n	800480e <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046d0:	231b      	movs	r3, #27
 80046d2:	2218      	movs	r2, #24
 80046d4:	4694      	mov	ip, r2
 80046d6:	44bc      	add	ip, r7
 80046d8:	4463      	add	r3, ip
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d01d      	beq.n	800471c <UART_SetConfig+0x2a8>
 80046e0:	dc20      	bgt.n	8004724 <UART_SetConfig+0x2b0>
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	d015      	beq.n	8004712 <UART_SetConfig+0x29e>
 80046e6:	dc1d      	bgt.n	8004724 <UART_SetConfig+0x2b0>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <UART_SetConfig+0x27e>
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d005      	beq.n	80046fc <UART_SetConfig+0x288>
 80046f0:	e018      	b.n	8004724 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046f2:	f7ff fccb 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 80046f6:	0003      	movs	r3, r0
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046fa:	e01d      	b.n	8004738 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046fc:	4b20      	ldr	r3, [pc, #128]	; (8004780 <UART_SetConfig+0x30c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2210      	movs	r2, #16
 8004702:	4013      	ands	r3, r2
 8004704:	d002      	beq.n	800470c <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004706:	4b22      	ldr	r3, [pc, #136]	; (8004790 <UART_SetConfig+0x31c>)
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800470a:	e015      	b.n	8004738 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 800470c:	4b21      	ldr	r3, [pc, #132]	; (8004794 <UART_SetConfig+0x320>)
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004710:	e012      	b.n	8004738 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004712:	f7ff fc0b 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8004716:	0003      	movs	r3, r0
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800471a:	e00d      	b.n	8004738 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004722:	e009      	b.n	8004738 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8004724:	2300      	movs	r3, #0
 8004726:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004728:	231a      	movs	r3, #26
 800472a:	2218      	movs	r2, #24
 800472c:	4694      	mov	ip, r2
 800472e:	44bc      	add	ip, r7
 8004730:	4463      	add	r3, ip
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
        break;
 8004736:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d100      	bne.n	8004740 <UART_SetConfig+0x2cc>
 800473e:	e13c      	b.n	80049ba <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	0013      	movs	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	189b      	adds	r3, r3, r2
 800474a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800474c:	429a      	cmp	r2, r3
 800474e:	d305      	bcc.n	800475c <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004758:	429a      	cmp	r2, r3
 800475a:	d91d      	bls.n	8004798 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 800475c:	231a      	movs	r3, #26
 800475e:	2218      	movs	r2, #24
 8004760:	4694      	mov	ip, r2
 8004762:	44bc      	add	ip, r7
 8004764:	4463      	add	r3, ip
 8004766:	2201      	movs	r2, #1
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	e126      	b.n	80049ba <UART_SetConfig+0x546>
 800476c:	efff69f3 	.word	0xefff69f3
 8004770:	ffffcfff 	.word	0xffffcfff
 8004774:	40004800 	.word	0x40004800
 8004778:	fffff4ff 	.word	0xfffff4ff
 800477c:	40013800 	.word	0x40013800
 8004780:	40021000 	.word	0x40021000
 8004784:	40004400 	.word	0x40004400
 8004788:	40004c00 	.word	0x40004c00
 800478c:	40005000 	.word	0x40005000
 8004790:	003d0900 	.word	0x003d0900
 8004794:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	2300      	movs	r3, #0
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	6939      	ldr	r1, [r7, #16]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	000b      	movs	r3, r1
 80047a6:	0e1b      	lsrs	r3, r3, #24
 80047a8:	0010      	movs	r0, r2
 80047aa:	0205      	lsls	r5, r0, #8
 80047ac:	431d      	orrs	r5, r3
 80047ae:	000b      	movs	r3, r1
 80047b0:	021c      	lsls	r4, r3, #8
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	085b      	lsrs	r3, r3, #1
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	2300      	movs	r3, #0
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68b8      	ldr	r0, [r7, #8]
 80047c0:	68f9      	ldr	r1, [r7, #12]
 80047c2:	1900      	adds	r0, r0, r4
 80047c4:	4169      	adcs	r1, r5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	2300      	movs	r3, #0
 80047ce:	607b      	str	r3, [r7, #4]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f7fb fd24 	bl	8000220 <__aeabi_uldivmod>
 80047d8:	0002      	movs	r2, r0
 80047da:	000b      	movs	r3, r1
 80047dc:	0013      	movs	r3, r2
 80047de:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e2:	23c0      	movs	r3, #192	; 0xc0
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d309      	bcc.n	80047fe <UART_SetConfig+0x38a>
 80047ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ec:	2380      	movs	r3, #128	; 0x80
 80047ee:	035b      	lsls	r3, r3, #13
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d204      	bcs.n	80047fe <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047fa:	60da      	str	r2, [r3, #12]
 80047fc:	e0dd      	b.n	80049ba <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80047fe:	231a      	movs	r3, #26
 8004800:	2218      	movs	r2, #24
 8004802:	4694      	mov	ip, r2
 8004804:	44bc      	add	ip, r7
 8004806:	4463      	add	r3, ip
 8004808:	2201      	movs	r2, #1
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e0d5      	b.n	80049ba <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	69da      	ldr	r2, [r3, #28]
 8004812:	2380      	movs	r3, #128	; 0x80
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	429a      	cmp	r2, r3
 8004818:	d000      	beq.n	800481c <UART_SetConfig+0x3a8>
 800481a:	e074      	b.n	8004906 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 800481c:	231b      	movs	r3, #27
 800481e:	2218      	movs	r2, #24
 8004820:	4694      	mov	ip, r2
 8004822:	44bc      	add	ip, r7
 8004824:	4463      	add	r3, ip
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d822      	bhi.n	8004872 <UART_SetConfig+0x3fe>
 800482c:	009a      	lsls	r2, r3, #2
 800482e:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <UART_SetConfig+0x568>)
 8004830:	18d3      	adds	r3, r2, r3
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004836:	f7ff fc29 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 800483a:	0003      	movs	r3, r0
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800483e:	e022      	b.n	8004886 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004840:	f7ff fc3a 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 8004844:	0003      	movs	r3, r0
 8004846:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004848:	e01d      	b.n	8004886 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484a:	4b65      	ldr	r3, [pc, #404]	; (80049e0 <UART_SetConfig+0x56c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2210      	movs	r2, #16
 8004850:	4013      	ands	r3, r2
 8004852:	d002      	beq.n	800485a <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004854:	4b63      	ldr	r3, [pc, #396]	; (80049e4 <UART_SetConfig+0x570>)
 8004856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004858:	e015      	b.n	8004886 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800485a:	4b63      	ldr	r3, [pc, #396]	; (80049e8 <UART_SetConfig+0x574>)
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800485e:	e012      	b.n	8004886 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004860:	f7ff fb64 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8004864:	0003      	movs	r3, r0
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004868:	e00d      	b.n	8004886 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800486a:	2380      	movs	r3, #128	; 0x80
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004870:	e009      	b.n	8004886 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004876:	231a      	movs	r3, #26
 8004878:	2218      	movs	r2, #24
 800487a:	4694      	mov	ip, r2
 800487c:	44bc      	add	ip, r7
 800487e:	4463      	add	r3, ip
 8004880:	2201      	movs	r2, #1
 8004882:	701a      	strb	r2, [r3, #0]
        break;
 8004884:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	2b00      	cmp	r3, #0
 800488a:	d100      	bne.n	800488e <UART_SetConfig+0x41a>
 800488c:	e095      	b.n	80049ba <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800488e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004890:	005a      	lsls	r2, r3, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	18d2      	adds	r2, r2, r3
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	0019      	movs	r1, r3
 80048a0:	0010      	movs	r0, r2
 80048a2:	f7fb fc31 	bl	8000108 <__udivsi3>
 80048a6:	0003      	movs	r3, r0
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d921      	bls.n	80048f6 <UART_SetConfig+0x482>
 80048b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048b4:	2380      	movs	r3, #128	; 0x80
 80048b6:	025b      	lsls	r3, r3, #9
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d21c      	bcs.n	80048f6 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048be:	b29a      	uxth	r2, r3
 80048c0:	200e      	movs	r0, #14
 80048c2:	2418      	movs	r4, #24
 80048c4:	193b      	adds	r3, r7, r4
 80048c6:	181b      	adds	r3, r3, r0
 80048c8:	210f      	movs	r1, #15
 80048ca:	438a      	bics	r2, r1
 80048cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	085b      	lsrs	r3, r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2207      	movs	r2, #7
 80048d6:	4013      	ands	r3, r2
 80048d8:	b299      	uxth	r1, r3
 80048da:	193b      	adds	r3, r7, r4
 80048dc:	181b      	adds	r3, r3, r0
 80048de:	193a      	adds	r2, r7, r4
 80048e0:	1812      	adds	r2, r2, r0
 80048e2:	8812      	ldrh	r2, [r2, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	193a      	adds	r2, r7, r4
 80048ee:	1812      	adds	r2, r2, r0
 80048f0:	8812      	ldrh	r2, [r2, #0]
 80048f2:	60da      	str	r2, [r3, #12]
 80048f4:	e061      	b.n	80049ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80048f6:	231a      	movs	r3, #26
 80048f8:	2218      	movs	r2, #24
 80048fa:	4694      	mov	ip, r2
 80048fc:	44bc      	add	ip, r7
 80048fe:	4463      	add	r3, ip
 8004900:	2201      	movs	r2, #1
 8004902:	701a      	strb	r2, [r3, #0]
 8004904:	e059      	b.n	80049ba <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004906:	231b      	movs	r3, #27
 8004908:	2218      	movs	r2, #24
 800490a:	4694      	mov	ip, r2
 800490c:	44bc      	add	ip, r7
 800490e:	4463      	add	r3, ip
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b08      	cmp	r3, #8
 8004914:	d822      	bhi.n	800495c <UART_SetConfig+0x4e8>
 8004916:	009a      	lsls	r2, r3, #2
 8004918:	4b34      	ldr	r3, [pc, #208]	; (80049ec <UART_SetConfig+0x578>)
 800491a:	18d3      	adds	r3, r2, r3
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004920:	f7ff fbb4 	bl	800408c <HAL_RCC_GetPCLK1Freq>
 8004924:	0003      	movs	r3, r0
 8004926:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004928:	e022      	b.n	8004970 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800492a:	f7ff fbc5 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 800492e:	0003      	movs	r3, r0
 8004930:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004932:	e01d      	b.n	8004970 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <UART_SetConfig+0x56c>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2210      	movs	r2, #16
 800493a:	4013      	ands	r3, r2
 800493c:	d002      	beq.n	8004944 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800493e:	4b29      	ldr	r3, [pc, #164]	; (80049e4 <UART_SetConfig+0x570>)
 8004940:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004942:	e015      	b.n	8004970 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004944:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <UART_SetConfig+0x574>)
 8004946:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004948:	e012      	b.n	8004970 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800494a:	f7ff faef 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 800494e:	0003      	movs	r3, r0
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004952:	e00d      	b.n	8004970 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004954:	2380      	movs	r3, #128	; 0x80
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800495a:	e009      	b.n	8004970 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004960:	231a      	movs	r3, #26
 8004962:	2218      	movs	r2, #24
 8004964:	4694      	mov	ip, r2
 8004966:	44bc      	add	ip, r7
 8004968:	4463      	add	r3, ip
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
        break;
 800496e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d021      	beq.n	80049ba <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	085a      	lsrs	r2, r3, #1
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	18d2      	adds	r2, r2, r3
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0019      	movs	r1, r3
 8004986:	0010      	movs	r0, r2
 8004988:	f7fb fbbe 	bl	8000108 <__udivsi3>
 800498c:	0003      	movs	r3, r0
 800498e:	b29b      	uxth	r3, r3
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d909      	bls.n	80049ac <UART_SetConfig+0x538>
 8004998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	025b      	lsls	r3, r3, #9
 800499e:	429a      	cmp	r2, r3
 80049a0:	d204      	bcs.n	80049ac <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	e006      	b.n	80049ba <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80049ac:	231a      	movs	r3, #26
 80049ae:	2218      	movs	r2, #24
 80049b0:	4694      	mov	ip, r2
 80049b2:	44bc      	add	ip, r7
 80049b4:	4463      	add	r3, ip
 80049b6:	2201      	movs	r2, #1
 80049b8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2200      	movs	r2, #0
 80049be:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2200      	movs	r2, #0
 80049c4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049c6:	231a      	movs	r3, #26
 80049c8:	2218      	movs	r2, #24
 80049ca:	4694      	mov	ip, r2
 80049cc:	44bc      	add	ip, r7
 80049ce:	4463      	add	r3, ip
 80049d0:	781b      	ldrb	r3, [r3, #0]
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b00e      	add	sp, #56	; 0x38
 80049d8:	bdb0      	pop	{r4, r5, r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	0800926c 	.word	0x0800926c
 80049e0:	40021000 	.word	0x40021000
 80049e4:	003d0900 	.word	0x003d0900
 80049e8:	00f42400 	.word	0x00f42400
 80049ec:	08009290 	.word	0x08009290

080049f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fc:	2201      	movs	r2, #1
 80049fe:	4013      	ands	r3, r2
 8004a00:	d00b      	beq.n	8004a1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	4a4a      	ldr	r2, [pc, #296]	; (8004b34 <UART_AdvFeatureConfig+0x144>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	0019      	movs	r1, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1e:	2202      	movs	r2, #2
 8004a20:	4013      	ands	r3, r2
 8004a22:	d00b      	beq.n	8004a3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	4a43      	ldr	r2, [pc, #268]	; (8004b38 <UART_AdvFeatureConfig+0x148>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2204      	movs	r2, #4
 8004a42:	4013      	ands	r3, r2
 8004a44:	d00b      	beq.n	8004a5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	4a3b      	ldr	r2, [pc, #236]	; (8004b3c <UART_AdvFeatureConfig+0x14c>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	0019      	movs	r1, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	2208      	movs	r2, #8
 8004a64:	4013      	ands	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	4a34      	ldr	r2, [pc, #208]	; (8004b40 <UART_AdvFeatureConfig+0x150>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	0019      	movs	r1, r3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	2210      	movs	r2, #16
 8004a86:	4013      	ands	r3, r2
 8004a88:	d00b      	beq.n	8004aa2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a2c      	ldr	r2, [pc, #176]	; (8004b44 <UART_AdvFeatureConfig+0x154>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	0019      	movs	r1, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	430a      	orrs	r2, r1
 8004aa0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	4a25      	ldr	r2, [pc, #148]	; (8004b48 <UART_AdvFeatureConfig+0x158>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2240      	movs	r2, #64	; 0x40
 8004aca:	4013      	ands	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	4a1d      	ldr	r2, [pc, #116]	; (8004b4c <UART_AdvFeatureConfig+0x15c>)
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	0019      	movs	r1, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aea:	2380      	movs	r3, #128	; 0x80
 8004aec:	035b      	lsls	r3, r3, #13
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d10b      	bne.n	8004b0a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a15      	ldr	r2, [pc, #84]	; (8004b50 <UART_AdvFeatureConfig+0x160>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	0019      	movs	r1, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0e:	2280      	movs	r2, #128	; 0x80
 8004b10:	4013      	ands	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	4a0e      	ldr	r2, [pc, #56]	; (8004b54 <UART_AdvFeatureConfig+0x164>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	0019      	movs	r1, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	605a      	str	r2, [r3, #4]
  }
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b002      	add	sp, #8
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	fffdffff 	.word	0xfffdffff
 8004b38:	fffeffff 	.word	0xfffeffff
 8004b3c:	fffbffff 	.word	0xfffbffff
 8004b40:	ffff7fff 	.word	0xffff7fff
 8004b44:	ffffefff 	.word	0xffffefff
 8004b48:	ffffdfff 	.word	0xffffdfff
 8004b4c:	ffefffff 	.word	0xffefffff
 8004b50:	ff9fffff 	.word	0xff9fffff
 8004b54:	fff7ffff 	.word	0xfff7ffff

08004b58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af02      	add	r7, sp, #8
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2280      	movs	r2, #128	; 0x80
 8004b64:	2100      	movs	r1, #0
 8004b66:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b68:	f7fc f898 	bl	8000c9c <HAL_GetTick>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2208      	movs	r2, #8
 8004b78:	4013      	ands	r3, r2
 8004b7a:	2b08      	cmp	r3, #8
 8004b7c:	d10c      	bne.n	8004b98 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2280      	movs	r2, #128	; 0x80
 8004b82:	0391      	lsls	r1, r2, #14
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4a17      	ldr	r2, [pc, #92]	; (8004be4 <UART_CheckIdleState+0x8c>)
 8004b88:	9200      	str	r2, [sp, #0]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f000 f82c 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d001      	beq.n	8004b98 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e021      	b.n	8004bdc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d10c      	bne.n	8004bc0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2280      	movs	r2, #128	; 0x80
 8004baa:	03d1      	lsls	r1, r2, #15
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	4a0d      	ldr	r2, [pc, #52]	; (8004be4 <UART_CheckIdleState+0x8c>)
 8004bb0:	9200      	str	r2, [sp, #0]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f000 f818 	bl	8004be8 <UART_WaitOnFlagUntilTimeout>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d001      	beq.n	8004bc0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e00d      	b.n	8004bdc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2274      	movs	r2, #116	; 0x74
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b004      	add	sp, #16
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	01ffffff 	.word	0x01ffffff

08004be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b094      	sub	sp, #80	; 0x50
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	603b      	str	r3, [r7, #0]
 8004bf4:	1dfb      	adds	r3, r7, #7
 8004bf6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf8:	e0a3      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	d100      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004c00:	e09f      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c02:	f7fc f84b 	bl	8000c9c <HAL_GetTick>
 8004c06:	0002      	movs	r2, r0
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d302      	bcc.n	8004c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d13d      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c18:	f3ef 8310 	mrs	r3, PRIMASK
 8004c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
 8004c22:	2301      	movs	r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	f383 8810 	msr	PRIMASK, r3
}
 8004c2c:	46c0      	nop			; (mov r8, r8)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	494c      	ldr	r1, [pc, #304]	; (8004d6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004c3a:	400a      	ands	r2, r1
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c40:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	f383 8810 	msr	PRIMASK, r3
}
 8004c48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	643b      	str	r3, [r7, #64]	; 0x40
 8004c54:	2301      	movs	r3, #1
 8004c56:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	f383 8810 	msr	PRIMASK, r3
}
 8004c5e:	46c0      	nop			; (mov r8, r8)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	438a      	bics	r2, r1
 8004c6e:	609a      	str	r2, [r3, #8]
 8004c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c76:	f383 8810 	msr	PRIMASK, r3
}
 8004c7a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2220      	movs	r2, #32
 8004c86:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2274      	movs	r2, #116	; 0x74
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e067      	b.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	d050      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	2380      	movs	r3, #128	; 0x80
 8004ca8:	011b      	lsls	r3, r3, #4
 8004caa:	401a      	ands	r2, r3
 8004cac:	2380      	movs	r3, #128	; 0x80
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d146      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2280      	movs	r2, #128	; 0x80
 8004cba:	0112      	lsls	r2, r2, #4
 8004cbc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc2:	613b      	str	r3, [r7, #16]
  return(result);
 8004cc4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cc8:	2301      	movs	r3, #1
 8004cca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4923      	ldr	r1, [pc, #140]	; (8004d6c <UART_WaitOnFlagUntilTimeout+0x184>)
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ce6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	f383 8810 	msr	PRIMASK, r3
}
 8004cee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf4:	61fb      	str	r3, [r7, #28]
  return(result);
 8004cf6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	f383 8810 	msr	PRIMASK, r3
}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689a      	ldr	r2, [r3, #8]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	438a      	bics	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
 8004d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d18:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	f383 8810 	msr	PRIMASK, r3
}
 8004d20:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2220      	movs	r2, #32
 8004d2c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2280      	movs	r2, #128	; 0x80
 8004d32:	2120      	movs	r1, #32
 8004d34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2274      	movs	r2, #116	; 0x74
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e010      	b.n	8004d64 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	425a      	negs	r2, r3
 8004d52:	4153      	adcs	r3, r2
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	001a      	movs	r2, r3
 8004d58:	1dfb      	adds	r3, r7, #7
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d100      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004d60:	e74b      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	0018      	movs	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	b014      	add	sp, #80	; 0x50
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	fffffe5f 	.word	0xfffffe5f

08004d70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2244      	movs	r2, #68	; 0x44
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <USB_EnableGlobalInt+0x28>)
 8004d82:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	b299      	uxth	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b004      	add	sp, #16
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	0000bf80 	.word	0x0000bf80

08004d9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004da4:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <USB_DisableGlobalInt+0x30>)
 8004da6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2240      	movs	r2, #64	; 0x40
 8004dac:	5a9b      	ldrh	r3, [r3, r2]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	b292      	uxth	r2, r2
 8004db4:	43d2      	mvns	r2, r2
 8004db6:	b292      	uxth	r2, r2
 8004db8:	4013      	ands	r3, r2
 8004dba:	b299      	uxth	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2240      	movs	r2, #64	; 0x40
 8004dc0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004dc2:	2300      	movs	r3, #0
}
 8004dc4:	0018      	movs	r0, r3
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	b004      	add	sp, #16
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	0000bf80 	.word	0x0000bf80

08004dd0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	b590      	push	{r4, r7, lr}
 8004dd4:	46c6      	mov	lr, r8
 8004dd6:	b500      	push	{lr}
 8004dd8:	b082      	sub	sp, #8
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	2004      	movs	r0, #4
 8004de0:	2410      	movs	r4, #16
 8004de2:	46a4      	mov	ip, r4
 8004de4:	2408      	movs	r4, #8
 8004de6:	46a0      	mov	r8, r4
 8004de8:	44b8      	add	r8, r7
 8004dea:	44c4      	add	ip, r8
 8004dec:	4460      	add	r0, ip
 8004dee:	6001      	str	r1, [r0, #0]
 8004df0:	6042      	str	r2, [r0, #4]
 8004df2:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2240      	movs	r2, #64	; 0x40
 8004df8:	2101      	movs	r1, #1
 8004dfa:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2240      	movs	r2, #64	; 0x40
 8004e00:	2100      	movs	r1, #0
 8004e02:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2244      	movs	r2, #68	; 0x44
 8004e08:	2100      	movs	r1, #0
 8004e0a:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2250      	movs	r2, #80	; 0x50
 8004e10:	2100      	movs	r1, #0
 8004e12:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b002      	add	sp, #8
 8004e1c:	bc80      	pop	{r7}
 8004e1e:	46b8      	mov	r8, r7
 8004e20:	bc90      	pop	{r4, r7}
 8004e22:	bc08      	pop	{r3}
 8004e24:	b004      	add	sp, #16
 8004e26:	4718      	bx	r3

08004e28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b09c      	sub	sp, #112	; 0x70
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e32:	236f      	movs	r3, #111	; 0x6f
 8004e34:	18fb      	adds	r3, r7, r3
 8004e36:	2200      	movs	r2, #0
 8004e38:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	18d3      	adds	r3, r2, r3
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	236c      	movs	r3, #108	; 0x6c
 8004e4a:	18fb      	adds	r3, r7, r3
 8004e4c:	49cf      	ldr	r1, [pc, #828]	; (800518c <USB_ActivateEndpoint+0x364>)
 8004e4e:	400a      	ands	r2, r1
 8004e50:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	78db      	ldrb	r3, [r3, #3]
 8004e56:	2b03      	cmp	r3, #3
 8004e58:	d017      	beq.n	8004e8a <USB_ActivateEndpoint+0x62>
 8004e5a:	dc28      	bgt.n	8004eae <USB_ActivateEndpoint+0x86>
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d00e      	beq.n	8004e7e <USB_ActivateEndpoint+0x56>
 8004e60:	dc25      	bgt.n	8004eae <USB_ActivateEndpoint+0x86>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <USB_ActivateEndpoint+0x44>
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d018      	beq.n	8004e9c <USB_ActivateEndpoint+0x74>
 8004e6a:	e020      	b.n	8004eae <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004e6c:	226c      	movs	r2, #108	; 0x6c
 8004e6e:	18bb      	adds	r3, r7, r2
 8004e70:	18ba      	adds	r2, r7, r2
 8004e72:	8812      	ldrh	r2, [r2, #0]
 8004e74:	2180      	movs	r1, #128	; 0x80
 8004e76:	0089      	lsls	r1, r1, #2
 8004e78:	430a      	orrs	r2, r1
 8004e7a:	801a      	strh	r2, [r3, #0]
      break;
 8004e7c:	e01c      	b.n	8004eb8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004e7e:	226c      	movs	r2, #108	; 0x6c
 8004e80:	18bb      	adds	r3, r7, r2
 8004e82:	18ba      	adds	r2, r7, r2
 8004e84:	8812      	ldrh	r2, [r2, #0]
 8004e86:	801a      	strh	r2, [r3, #0]
      break;
 8004e88:	e016      	b.n	8004eb8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004e8a:	226c      	movs	r2, #108	; 0x6c
 8004e8c:	18bb      	adds	r3, r7, r2
 8004e8e:	18ba      	adds	r2, r7, r2
 8004e90:	8812      	ldrh	r2, [r2, #0]
 8004e92:	21c0      	movs	r1, #192	; 0xc0
 8004e94:	00c9      	lsls	r1, r1, #3
 8004e96:	430a      	orrs	r2, r1
 8004e98:	801a      	strh	r2, [r3, #0]
      break;
 8004e9a:	e00d      	b.n	8004eb8 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004e9c:	226c      	movs	r2, #108	; 0x6c
 8004e9e:	18bb      	adds	r3, r7, r2
 8004ea0:	18ba      	adds	r2, r7, r2
 8004ea2:	8812      	ldrh	r2, [r2, #0]
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	00c9      	lsls	r1, r1, #3
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	801a      	strh	r2, [r3, #0]
      break;
 8004eac:	e004      	b.n	8004eb8 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004eae:	236f      	movs	r3, #111	; 0x6f
 8004eb0:	18fb      	adds	r3, r7, r3
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
      break;
 8004eb6:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	18d3      	adds	r3, r2, r3
 8004ec2:	226c      	movs	r2, #108	; 0x6c
 8004ec4:	18ba      	adds	r2, r7, r2
 8004ec6:	8812      	ldrh	r2, [r2, #0]
 8004ec8:	49b1      	ldr	r1, [pc, #708]	; (8005190 <USB_ActivateEndpoint+0x368>)
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	b292      	uxth	r2, r2
 8004ece:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	18d3      	adds	r3, r2, r3
 8004eda:	881b      	ldrh	r3, [r3, #0]
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	b21b      	sxth	r3, r3
 8004ee0:	4aac      	ldr	r2, [pc, #688]	; (8005194 <USB_ActivateEndpoint+0x36c>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	b21a      	sxth	r2, r3
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	b21b      	sxth	r3, r3
 8004eec:	4313      	orrs	r3, r2
 8004eee:	b21a      	sxth	r2, r3
 8004ef0:	2166      	movs	r1, #102	; 0x66
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	18d3      	adds	r3, r2, r3
 8004f00:	187a      	adds	r2, r7, r1
 8004f02:	8812      	ldrh	r2, [r2, #0]
 8004f04:	49a2      	ldr	r1, [pc, #648]	; (8005190 <USB_ActivateEndpoint+0x368>)
 8004f06:	430a      	orrs	r2, r1
 8004f08:	b292      	uxth	r2, r2
 8004f0a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	7b1b      	ldrb	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d000      	beq.n	8004f16 <USB_ActivateEndpoint+0xee>
 8004f14:	e150      	b.n	80051b8 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	785b      	ldrb	r3, [r3, #1]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d100      	bne.n	8004f20 <USB_ActivateEndpoint+0xf8>
 8004f1e:	e07a      	b.n	8005016 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	61bb      	str	r3, [r7, #24]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2250      	movs	r2, #80	; 0x50
 8004f28:	5a9b      	ldrh	r3, [r3, r2]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	001a      	movs	r2, r3
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	189b      	adds	r3, r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	00da      	lsls	r2, r3, #3
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	18d3      	adds	r3, r2, r3
 8004f3e:	2280      	movs	r2, #128	; 0x80
 8004f40:	00d2      	lsls	r2, r2, #3
 8004f42:	4694      	mov	ip, r2
 8004f44:	4463      	add	r3, ip
 8004f46:	617b      	str	r3, [r7, #20]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	88db      	ldrh	r3, [r3, #6]
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	18db      	adds	r3, r3, r3
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	18d2      	adds	r2, r2, r3
 8004f62:	2112      	movs	r1, #18
 8004f64:	187b      	adds	r3, r7, r1
 8004f66:	8812      	ldrh	r2, [r2, #0]
 8004f68:	801a      	strh	r2, [r3, #0]
 8004f6a:	187b      	adds	r3, r7, r1
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	2240      	movs	r2, #64	; 0x40
 8004f70:	4013      	ands	r3, r2
 8004f72:	d016      	beq.n	8004fa2 <USB_ActivateEndpoint+0x17a>
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	2010      	movs	r0, #16
 8004f84:	183b      	adds	r3, r7, r0
 8004f86:	4983      	ldr	r1, [pc, #524]	; (8005194 <USB_ActivateEndpoint+0x36c>)
 8004f88:	400a      	ands	r2, r1
 8004f8a:	801a      	strh	r2, [r3, #0]
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	18d3      	adds	r3, r2, r3
 8004f96:	183a      	adds	r2, r7, r0
 8004f98:	8812      	ldrh	r2, [r2, #0]
 8004f9a:	497f      	ldr	r1, [pc, #508]	; (8005198 <USB_ActivateEndpoint+0x370>)
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	b292      	uxth	r2, r2
 8004fa0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d01d      	beq.n	8004fe6 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	18d3      	adds	r3, r2, r3
 8004fb4:	881b      	ldrh	r3, [r3, #0]
 8004fb6:	b29a      	uxth	r2, r3
 8004fb8:	200c      	movs	r0, #12
 8004fba:	183b      	adds	r3, r7, r0
 8004fbc:	4977      	ldr	r1, [pc, #476]	; (800519c <USB_ActivateEndpoint+0x374>)
 8004fbe:	400a      	ands	r2, r1
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	183b      	adds	r3, r7, r0
 8004fc4:	183a      	adds	r2, r7, r0
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	2120      	movs	r1, #32
 8004fca:	404a      	eors	r2, r1
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	18d3      	adds	r3, r2, r3
 8004fd8:	183a      	adds	r2, r7, r0
 8004fda:	8812      	ldrh	r2, [r2, #0]
 8004fdc:	496c      	ldr	r1, [pc, #432]	; (8005190 <USB_ActivateEndpoint+0x368>)
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	b292      	uxth	r2, r2
 8004fe2:	801a      	strh	r2, [r3, #0]
 8004fe4:	e27a      	b.n	80054dc <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	18d3      	adds	r3, r2, r3
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	200e      	movs	r0, #14
 8004ff6:	183b      	adds	r3, r7, r0
 8004ff8:	4968      	ldr	r1, [pc, #416]	; (800519c <USB_ActivateEndpoint+0x374>)
 8004ffa:	400a      	ands	r2, r1
 8004ffc:	801a      	strh	r2, [r3, #0]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	18d3      	adds	r3, r2, r3
 8005008:	183a      	adds	r2, r7, r0
 800500a:	8812      	ldrh	r2, [r2, #0]
 800500c:	4960      	ldr	r1, [pc, #384]	; (8005190 <USB_ActivateEndpoint+0x368>)
 800500e:	430a      	orrs	r2, r1
 8005010:	b292      	uxth	r2, r2
 8005012:	801a      	strh	r2, [r3, #0]
 8005014:	e262      	b.n	80054dc <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2250      	movs	r2, #80	; 0x50
 800501e:	5a9b      	ldrh	r3, [r3, r2]
 8005020:	b29b      	uxth	r3, r3
 8005022:	001a      	movs	r2, r3
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	189b      	adds	r3, r3, r2
 8005028:	633b      	str	r3, [r7, #48]	; 0x30
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	00da      	lsls	r2, r3, #3
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	18d3      	adds	r3, r2, r3
 8005034:	4a5a      	ldr	r2, [pc, #360]	; (80051a0 <USB_ActivateEndpoint+0x378>)
 8005036:	4694      	mov	ip, r2
 8005038:	4463      	add	r3, ip
 800503a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	88db      	ldrh	r3, [r3, #6]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	b29b      	uxth	r3, r3
 8005044:	18db      	adds	r3, r3, r3
 8005046:	b29a      	uxth	r2, r3
 8005048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800504a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2250      	movs	r2, #80	; 0x50
 8005054:	5a9b      	ldrh	r3, [r3, r2]
 8005056:	b29b      	uxth	r3, r3
 8005058:	001a      	movs	r2, r3
 800505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505c:	189b      	adds	r3, r3, r2
 800505e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	00da      	lsls	r2, r3, #3
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	18d3      	adds	r3, r2, r3
 800506a:	4a4e      	ldr	r2, [pc, #312]	; (80051a4 <USB_ActivateEndpoint+0x37c>)
 800506c:	4694      	mov	ip, r2
 800506e:	4463      	add	r3, ip
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d110      	bne.n	800509c <USB_ActivateEndpoint+0x274>
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	881b      	ldrh	r3, [r3, #0]
 800507e:	b29b      	uxth	r3, r3
 8005080:	4a49      	ldr	r2, [pc, #292]	; (80051a8 <USB_ActivateEndpoint+0x380>)
 8005082:	4013      	ands	r3, r2
 8005084:	b29a      	uxth	r2, r3
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	801a      	strh	r2, [r3, #0]
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	b29b      	uxth	r3, r3
 8005090:	4a46      	ldr	r2, [pc, #280]	; (80051ac <USB_ActivateEndpoint+0x384>)
 8005092:	4313      	orrs	r3, r2
 8005094:	b29a      	uxth	r2, r3
 8005096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005098:	801a      	strh	r2, [r3, #0]
 800509a:	e02b      	b.n	80050f4 <USB_ActivateEndpoint+0x2cc>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	2b3e      	cmp	r3, #62	; 0x3e
 80050a2:	d812      	bhi.n	80050ca <USB_ActivateEndpoint+0x2a2>
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	085b      	lsrs	r3, r3, #1
 80050aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	2201      	movs	r2, #1
 80050b2:	4013      	ands	r3, r2
 80050b4:	d002      	beq.n	80050bc <USB_ActivateEndpoint+0x294>
 80050b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050b8:	3301      	adds	r3, #1
 80050ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80050bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050be:	b29b      	uxth	r3, r3
 80050c0:	029b      	lsls	r3, r3, #10
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	e014      	b.n	80050f4 <USB_ActivateEndpoint+0x2cc>
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	221f      	movs	r2, #31
 80050d8:	4013      	ands	r3, r2
 80050da:	d102      	bne.n	80050e2 <USB_ActivateEndpoint+0x2ba>
 80050dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050de:	3b01      	subs	r3, #1
 80050e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80050e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	029b      	lsls	r3, r3, #10
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4a30      	ldr	r2, [pc, #192]	; (80051ac <USB_ActivateEndpoint+0x384>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	18d2      	adds	r2, r2, r3
 80050fe:	2122      	movs	r1, #34	; 0x22
 8005100:	187b      	adds	r3, r7, r1
 8005102:	8812      	ldrh	r2, [r2, #0]
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	187b      	adds	r3, r7, r1
 8005108:	881a      	ldrh	r2, [r3, #0]
 800510a:	2380      	movs	r3, #128	; 0x80
 800510c:	01db      	lsls	r3, r3, #7
 800510e:	4013      	ands	r3, r2
 8005110:	d016      	beq.n	8005140 <USB_ActivateEndpoint+0x318>
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	18d3      	adds	r3, r2, r3
 800511c:	881b      	ldrh	r3, [r3, #0]
 800511e:	b29a      	uxth	r2, r3
 8005120:	2020      	movs	r0, #32
 8005122:	183b      	adds	r3, r7, r0
 8005124:	491b      	ldr	r1, [pc, #108]	; (8005194 <USB_ActivateEndpoint+0x36c>)
 8005126:	400a      	ands	r2, r1
 8005128:	801a      	strh	r2, [r3, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	18d3      	adds	r3, r2, r3
 8005134:	183a      	adds	r2, r7, r0
 8005136:	8812      	ldrh	r2, [r2, #0]
 8005138:	491d      	ldr	r1, [pc, #116]	; (80051b0 <USB_ActivateEndpoint+0x388>)
 800513a:	430a      	orrs	r2, r1
 800513c:	b292      	uxth	r2, r2
 800513e:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	18d3      	adds	r3, r2, r3
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29a      	uxth	r2, r3
 800514e:	201e      	movs	r0, #30
 8005150:	183b      	adds	r3, r7, r0
 8005152:	4918      	ldr	r1, [pc, #96]	; (80051b4 <USB_ActivateEndpoint+0x38c>)
 8005154:	400a      	ands	r2, r1
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	183b      	adds	r3, r7, r0
 800515a:	183a      	adds	r2, r7, r0
 800515c:	8812      	ldrh	r2, [r2, #0]
 800515e:	2180      	movs	r1, #128	; 0x80
 8005160:	0149      	lsls	r1, r1, #5
 8005162:	404a      	eors	r2, r1
 8005164:	801a      	strh	r2, [r3, #0]
 8005166:	183b      	adds	r3, r7, r0
 8005168:	183a      	adds	r2, r7, r0
 800516a:	8812      	ldrh	r2, [r2, #0]
 800516c:	2180      	movs	r1, #128	; 0x80
 800516e:	0189      	lsls	r1, r1, #6
 8005170:	404a      	eors	r2, r1
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	18d3      	adds	r3, r2, r3
 800517e:	183a      	adds	r2, r7, r0
 8005180:	8812      	ldrh	r2, [r2, #0]
 8005182:	4903      	ldr	r1, [pc, #12]	; (8005190 <USB_ActivateEndpoint+0x368>)
 8005184:	430a      	orrs	r2, r1
 8005186:	b292      	uxth	r2, r2
 8005188:	801a      	strh	r2, [r3, #0]
 800518a:	e1a7      	b.n	80054dc <USB_ActivateEndpoint+0x6b4>
 800518c:	ffff898f 	.word	0xffff898f
 8005190:	ffff8080 	.word	0xffff8080
 8005194:	ffff8f8f 	.word	0xffff8f8f
 8005198:	ffff80c0 	.word	0xffff80c0
 800519c:	ffff8fbf 	.word	0xffff8fbf
 80051a0:	00000404 	.word	0x00000404
 80051a4:	00000406 	.word	0x00000406
 80051a8:	ffff83ff 	.word	0xffff83ff
 80051ac:	ffff8000 	.word	0xffff8000
 80051b0:	ffffc080 	.word	0xffffc080
 80051b4:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	78db      	ldrb	r3, [r3, #3]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d117      	bne.n	80051f0 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	18d3      	adds	r3, r2, r3
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	2062      	movs	r0, #98	; 0x62
 80051d0:	183b      	adds	r3, r7, r0
 80051d2:	49c6      	ldr	r1, [pc, #792]	; (80054ec <USB_ActivateEndpoint+0x6c4>)
 80051d4:	400a      	ands	r2, r1
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	18d3      	adds	r3, r2, r3
 80051e2:	183a      	adds	r2, r7, r0
 80051e4:	8812      	ldrh	r2, [r2, #0]
 80051e6:	49c2      	ldr	r1, [pc, #776]	; (80054f0 <USB_ActivateEndpoint+0x6c8>)
 80051e8:	430a      	orrs	r2, r1
 80051ea:	b292      	uxth	r2, r2
 80051ec:	801a      	strh	r2, [r3, #0]
 80051ee:	e016      	b.n	800521e <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	18d3      	adds	r3, r2, r3
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	2064      	movs	r0, #100	; 0x64
 8005200:	183b      	adds	r3, r7, r0
 8005202:	49bc      	ldr	r1, [pc, #752]	; (80054f4 <USB_ActivateEndpoint+0x6cc>)
 8005204:	400a      	ands	r2, r1
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	18d3      	adds	r3, r2, r3
 8005212:	183a      	adds	r2, r7, r0
 8005214:	8812      	ldrh	r2, [r2, #0]
 8005216:	49b8      	ldr	r1, [pc, #736]	; (80054f8 <USB_ActivateEndpoint+0x6d0>)
 8005218:	430a      	orrs	r2, r1
 800521a:	b292      	uxth	r2, r2
 800521c:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2250      	movs	r2, #80	; 0x50
 8005226:	5a9b      	ldrh	r3, [r3, r2]
 8005228:	b29b      	uxth	r3, r3
 800522a:	001a      	movs	r2, r3
 800522c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800522e:	189b      	adds	r3, r3, r2
 8005230:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	00da      	lsls	r2, r3, #3
 8005238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800523a:	18d3      	adds	r3, r2, r3
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	00d2      	lsls	r2, r2, #3
 8005240:	4694      	mov	ip, r2
 8005242:	4463      	add	r3, ip
 8005244:	65bb      	str	r3, [r7, #88]	; 0x58
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	891b      	ldrh	r3, [r3, #8]
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	b29b      	uxth	r3, r3
 800524e:	18db      	adds	r3, r3, r3
 8005250:	b29a      	uxth	r2, r3
 8005252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	657b      	str	r3, [r7, #84]	; 0x54
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2250      	movs	r2, #80	; 0x50
 800525e:	5a9b      	ldrh	r3, [r3, r2]
 8005260:	b29b      	uxth	r3, r3
 8005262:	001a      	movs	r2, r3
 8005264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005266:	189b      	adds	r3, r3, r2
 8005268:	657b      	str	r3, [r7, #84]	; 0x54
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	00da      	lsls	r2, r3, #3
 8005270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005272:	18d3      	adds	r3, r2, r3
 8005274:	4aa1      	ldr	r2, [pc, #644]	; (80054fc <USB_ActivateEndpoint+0x6d4>)
 8005276:	4694      	mov	ip, r2
 8005278:	4463      	add	r3, ip
 800527a:	653b      	str	r3, [r7, #80]	; 0x50
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	895b      	ldrh	r3, [r3, #10]
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	b29b      	uxth	r3, r3
 8005284:	18db      	adds	r3, r3, r3
 8005286:	b29a      	uxth	r2, r3
 8005288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d000      	beq.n	8005296 <USB_ActivateEndpoint+0x46e>
 8005294:	e087      	b.n	80053a6 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	18d2      	adds	r2, r2, r3
 80052a0:	2140      	movs	r1, #64	; 0x40
 80052a2:	187b      	adds	r3, r7, r1
 80052a4:	8812      	ldrh	r2, [r2, #0]
 80052a6:	801a      	strh	r2, [r3, #0]
 80052a8:	187b      	adds	r3, r7, r1
 80052aa:	881a      	ldrh	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	01db      	lsls	r3, r3, #7
 80052b0:	4013      	ands	r3, r2
 80052b2:	d016      	beq.n	80052e2 <USB_ActivateEndpoint+0x4ba>
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	881b      	ldrh	r3, [r3, #0]
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	203e      	movs	r0, #62	; 0x3e
 80052c4:	183b      	adds	r3, r7, r0
 80052c6:	4989      	ldr	r1, [pc, #548]	; (80054ec <USB_ActivateEndpoint+0x6c4>)
 80052c8:	400a      	ands	r2, r1
 80052ca:	801a      	strh	r2, [r3, #0]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	18d3      	adds	r3, r2, r3
 80052d6:	183a      	adds	r2, r7, r0
 80052d8:	8812      	ldrh	r2, [r2, #0]
 80052da:	4989      	ldr	r1, [pc, #548]	; (8005500 <USB_ActivateEndpoint+0x6d8>)
 80052dc:	430a      	orrs	r2, r1
 80052de:	b292      	uxth	r2, r2
 80052e0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	18d2      	adds	r2, r2, r3
 80052ec:	213c      	movs	r1, #60	; 0x3c
 80052ee:	187b      	adds	r3, r7, r1
 80052f0:	8812      	ldrh	r2, [r2, #0]
 80052f2:	801a      	strh	r2, [r3, #0]
 80052f4:	187b      	adds	r3, r7, r1
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	2240      	movs	r2, #64	; 0x40
 80052fa:	4013      	ands	r3, r2
 80052fc:	d016      	beq.n	800532c <USB_ActivateEndpoint+0x504>
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	18d3      	adds	r3, r2, r3
 8005308:	881b      	ldrh	r3, [r3, #0]
 800530a:	b29a      	uxth	r2, r3
 800530c:	203a      	movs	r0, #58	; 0x3a
 800530e:	183b      	adds	r3, r7, r0
 8005310:	4976      	ldr	r1, [pc, #472]	; (80054ec <USB_ActivateEndpoint+0x6c4>)
 8005312:	400a      	ands	r2, r1
 8005314:	801a      	strh	r2, [r3, #0]
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	18d3      	adds	r3, r2, r3
 8005320:	183a      	adds	r2, r7, r0
 8005322:	8812      	ldrh	r2, [r2, #0]
 8005324:	4977      	ldr	r1, [pc, #476]	; (8005504 <USB_ActivateEndpoint+0x6dc>)
 8005326:	430a      	orrs	r2, r1
 8005328:	b292      	uxth	r2, r2
 800532a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	18d3      	adds	r3, r2, r3
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b29a      	uxth	r2, r3
 800533a:	2038      	movs	r0, #56	; 0x38
 800533c:	183b      	adds	r3, r7, r0
 800533e:	4972      	ldr	r1, [pc, #456]	; (8005508 <USB_ActivateEndpoint+0x6e0>)
 8005340:	400a      	ands	r2, r1
 8005342:	801a      	strh	r2, [r3, #0]
 8005344:	183b      	adds	r3, r7, r0
 8005346:	183a      	adds	r2, r7, r0
 8005348:	8812      	ldrh	r2, [r2, #0]
 800534a:	2180      	movs	r1, #128	; 0x80
 800534c:	0149      	lsls	r1, r1, #5
 800534e:	404a      	eors	r2, r1
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	183b      	adds	r3, r7, r0
 8005354:	183a      	adds	r2, r7, r0
 8005356:	8812      	ldrh	r2, [r2, #0]
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	0189      	lsls	r1, r1, #6
 800535c:	404a      	eors	r2, r1
 800535e:	801a      	strh	r2, [r3, #0]
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	18d3      	adds	r3, r2, r3
 800536a:	183a      	adds	r2, r7, r0
 800536c:	8812      	ldrh	r2, [r2, #0]
 800536e:	4962      	ldr	r1, [pc, #392]	; (80054f8 <USB_ActivateEndpoint+0x6d0>)
 8005370:	430a      	orrs	r2, r1
 8005372:	b292      	uxth	r2, r2
 8005374:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	18d3      	adds	r3, r2, r3
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29a      	uxth	r2, r3
 8005384:	2036      	movs	r0, #54	; 0x36
 8005386:	183b      	adds	r3, r7, r0
 8005388:	4960      	ldr	r1, [pc, #384]	; (800550c <USB_ActivateEndpoint+0x6e4>)
 800538a:	400a      	ands	r2, r1
 800538c:	801a      	strh	r2, [r3, #0]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	18d3      	adds	r3, r2, r3
 8005398:	183a      	adds	r2, r7, r0
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	4956      	ldr	r1, [pc, #344]	; (80054f8 <USB_ActivateEndpoint+0x6d0>)
 800539e:	430a      	orrs	r2, r1
 80053a0:	b292      	uxth	r2, r2
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e09a      	b.n	80054dc <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	18d2      	adds	r2, r2, r3
 80053b0:	214e      	movs	r1, #78	; 0x4e
 80053b2:	187b      	adds	r3, r7, r1
 80053b4:	8812      	ldrh	r2, [r2, #0]
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	187b      	adds	r3, r7, r1
 80053ba:	881a      	ldrh	r2, [r3, #0]
 80053bc:	2380      	movs	r3, #128	; 0x80
 80053be:	01db      	lsls	r3, r3, #7
 80053c0:	4013      	ands	r3, r2
 80053c2:	d016      	beq.n	80053f2 <USB_ActivateEndpoint+0x5ca>
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	18d3      	adds	r3, r2, r3
 80053ce:	881b      	ldrh	r3, [r3, #0]
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	204c      	movs	r0, #76	; 0x4c
 80053d4:	183b      	adds	r3, r7, r0
 80053d6:	4945      	ldr	r1, [pc, #276]	; (80054ec <USB_ActivateEndpoint+0x6c4>)
 80053d8:	400a      	ands	r2, r1
 80053da:	801a      	strh	r2, [r3, #0]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	18d3      	adds	r3, r2, r3
 80053e6:	183a      	adds	r2, r7, r0
 80053e8:	8812      	ldrh	r2, [r2, #0]
 80053ea:	4945      	ldr	r1, [pc, #276]	; (8005500 <USB_ActivateEndpoint+0x6d8>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	b292      	uxth	r2, r2
 80053f0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	18d2      	adds	r2, r2, r3
 80053fc:	214a      	movs	r1, #74	; 0x4a
 80053fe:	187b      	adds	r3, r7, r1
 8005400:	8812      	ldrh	r2, [r2, #0]
 8005402:	801a      	strh	r2, [r3, #0]
 8005404:	187b      	adds	r3, r7, r1
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	4013      	ands	r3, r2
 800540c:	d016      	beq.n	800543c <USB_ActivateEndpoint+0x614>
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	18d3      	adds	r3, r2, r3
 8005418:	881b      	ldrh	r3, [r3, #0]
 800541a:	b29a      	uxth	r2, r3
 800541c:	2048      	movs	r0, #72	; 0x48
 800541e:	183b      	adds	r3, r7, r0
 8005420:	4932      	ldr	r1, [pc, #200]	; (80054ec <USB_ActivateEndpoint+0x6c4>)
 8005422:	400a      	ands	r2, r1
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	18d3      	adds	r3, r2, r3
 8005430:	183a      	adds	r2, r7, r0
 8005432:	8812      	ldrh	r2, [r2, #0]
 8005434:	4933      	ldr	r1, [pc, #204]	; (8005504 <USB_ActivateEndpoint+0x6dc>)
 8005436:	430a      	orrs	r2, r1
 8005438:	b292      	uxth	r2, r2
 800543a:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	78db      	ldrb	r3, [r3, #3]
 8005440:	2b01      	cmp	r3, #1
 8005442:	d01d      	beq.n	8005480 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	18d3      	adds	r3, r2, r3
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29a      	uxth	r2, r3
 8005452:	2044      	movs	r0, #68	; 0x44
 8005454:	183b      	adds	r3, r7, r0
 8005456:	492d      	ldr	r1, [pc, #180]	; (800550c <USB_ActivateEndpoint+0x6e4>)
 8005458:	400a      	ands	r2, r1
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	183b      	adds	r3, r7, r0
 800545e:	183a      	adds	r2, r7, r0
 8005460:	8812      	ldrh	r2, [r2, #0]
 8005462:	2120      	movs	r1, #32
 8005464:	404a      	eors	r2, r1
 8005466:	801a      	strh	r2, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	18d3      	adds	r3, r2, r3
 8005472:	183a      	adds	r2, r7, r0
 8005474:	8812      	ldrh	r2, [r2, #0]
 8005476:	4920      	ldr	r1, [pc, #128]	; (80054f8 <USB_ActivateEndpoint+0x6d0>)
 8005478:	430a      	orrs	r2, r1
 800547a:	b292      	uxth	r2, r2
 800547c:	801a      	strh	r2, [r3, #0]
 800547e:	e016      	b.n	80054ae <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	18d3      	adds	r3, r2, r3
 800548a:	881b      	ldrh	r3, [r3, #0]
 800548c:	b29a      	uxth	r2, r3
 800548e:	2046      	movs	r0, #70	; 0x46
 8005490:	183b      	adds	r3, r7, r0
 8005492:	491e      	ldr	r1, [pc, #120]	; (800550c <USB_ActivateEndpoint+0x6e4>)
 8005494:	400a      	ands	r2, r1
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	18d3      	adds	r3, r2, r3
 80054a2:	183a      	adds	r2, r7, r0
 80054a4:	8812      	ldrh	r2, [r2, #0]
 80054a6:	4914      	ldr	r1, [pc, #80]	; (80054f8 <USB_ActivateEndpoint+0x6d0>)
 80054a8:	430a      	orrs	r2, r1
 80054aa:	b292      	uxth	r2, r2
 80054ac:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	18d3      	adds	r3, r2, r3
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	2042      	movs	r0, #66	; 0x42
 80054be:	183b      	adds	r3, r7, r0
 80054c0:	4911      	ldr	r1, [pc, #68]	; (8005508 <USB_ActivateEndpoint+0x6e0>)
 80054c2:	400a      	ands	r2, r1
 80054c4:	801a      	strh	r2, [r3, #0]
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	18d3      	adds	r3, r2, r3
 80054d0:	183a      	adds	r2, r7, r0
 80054d2:	8812      	ldrh	r2, [r2, #0]
 80054d4:	4908      	ldr	r1, [pc, #32]	; (80054f8 <USB_ActivateEndpoint+0x6d0>)
 80054d6:	430a      	orrs	r2, r1
 80054d8:	b292      	uxth	r2, r2
 80054da:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80054dc:	236f      	movs	r3, #111	; 0x6f
 80054de:	18fb      	adds	r3, r7, r3
 80054e0:	781b      	ldrb	r3, [r3, #0]
}
 80054e2:	0018      	movs	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b01c      	add	sp, #112	; 0x70
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	ffff8f8f 	.word	0xffff8f8f
 80054f0:	ffff8180 	.word	0xffff8180
 80054f4:	ffff8e8f 	.word	0xffff8e8f
 80054f8:	ffff8080 	.word	0xffff8080
 80054fc:	00000404 	.word	0x00000404
 8005500:	ffffc080 	.word	0xffffc080
 8005504:	ffff80c0 	.word	0xffff80c0
 8005508:	ffffbf8f 	.word	0xffffbf8f
 800550c:	ffff8fbf 	.word	0xffff8fbf

08005510 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08c      	sub	sp, #48	; 0x30
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	7b1b      	ldrb	r3, [r3, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d000      	beq.n	8005524 <USB_DeactivateEndpoint+0x14>
 8005522:	e07e      	b.n	8005622 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	785b      	ldrb	r3, [r3, #1]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d03c      	beq.n	80055a6 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	18d2      	adds	r2, r2, r3
 8005536:	210c      	movs	r1, #12
 8005538:	187b      	adds	r3, r7, r1
 800553a:	8812      	ldrh	r2, [r2, #0]
 800553c:	801a      	strh	r2, [r3, #0]
 800553e:	187b      	adds	r3, r7, r1
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	2240      	movs	r2, #64	; 0x40
 8005544:	4013      	ands	r3, r2
 8005546:	d016      	beq.n	8005576 <USB_DeactivateEndpoint+0x66>
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	18d3      	adds	r3, r2, r3
 8005552:	881b      	ldrh	r3, [r3, #0]
 8005554:	b29a      	uxth	r2, r3
 8005556:	200a      	movs	r0, #10
 8005558:	183b      	adds	r3, r7, r0
 800555a:	49c7      	ldr	r1, [pc, #796]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 800555c:	400a      	ands	r2, r1
 800555e:	801a      	strh	r2, [r3, #0]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	18d3      	adds	r3, r2, r3
 800556a:	183a      	adds	r2, r7, r0
 800556c:	8812      	ldrh	r2, [r2, #0]
 800556e:	49c3      	ldr	r1, [pc, #780]	; (800587c <USB_DeactivateEndpoint+0x36c>)
 8005570:	430a      	orrs	r2, r1
 8005572:	b292      	uxth	r2, r2
 8005574:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	18d3      	adds	r3, r2, r3
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	b29a      	uxth	r2, r3
 8005584:	2008      	movs	r0, #8
 8005586:	183b      	adds	r3, r7, r0
 8005588:	49bd      	ldr	r1, [pc, #756]	; (8005880 <USB_DeactivateEndpoint+0x370>)
 800558a:	400a      	ands	r2, r1
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	18d3      	adds	r3, r2, r3
 8005598:	183a      	adds	r2, r7, r0
 800559a:	8812      	ldrh	r2, [r2, #0]
 800559c:	49b9      	ldr	r1, [pc, #740]	; (8005884 <USB_DeactivateEndpoint+0x374>)
 800559e:	430a      	orrs	r2, r1
 80055a0:	b292      	uxth	r2, r2
 80055a2:	801a      	strh	r2, [r3, #0]
 80055a4:	e163      	b.n	800586e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	18d2      	adds	r2, r2, r3
 80055b0:	2112      	movs	r1, #18
 80055b2:	187b      	adds	r3, r7, r1
 80055b4:	8812      	ldrh	r2, [r2, #0]
 80055b6:	801a      	strh	r2, [r3, #0]
 80055b8:	187b      	adds	r3, r7, r1
 80055ba:	881a      	ldrh	r2, [r3, #0]
 80055bc:	2380      	movs	r3, #128	; 0x80
 80055be:	01db      	lsls	r3, r3, #7
 80055c0:	4013      	ands	r3, r2
 80055c2:	d016      	beq.n	80055f2 <USB_DeactivateEndpoint+0xe2>
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	18d3      	adds	r3, r2, r3
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	2010      	movs	r0, #16
 80055d4:	183b      	adds	r3, r7, r0
 80055d6:	49a8      	ldr	r1, [pc, #672]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 80055d8:	400a      	ands	r2, r1
 80055da:	801a      	strh	r2, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	18d3      	adds	r3, r2, r3
 80055e6:	183a      	adds	r2, r7, r0
 80055e8:	8812      	ldrh	r2, [r2, #0]
 80055ea:	49a7      	ldr	r1, [pc, #668]	; (8005888 <USB_DeactivateEndpoint+0x378>)
 80055ec:	430a      	orrs	r2, r1
 80055ee:	b292      	uxth	r2, r2
 80055f0:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	18d3      	adds	r3, r2, r3
 80055fc:	881b      	ldrh	r3, [r3, #0]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	200e      	movs	r0, #14
 8005602:	183b      	adds	r3, r7, r0
 8005604:	49a1      	ldr	r1, [pc, #644]	; (800588c <USB_DeactivateEndpoint+0x37c>)
 8005606:	400a      	ands	r2, r1
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	18d3      	adds	r3, r2, r3
 8005614:	183a      	adds	r2, r7, r0
 8005616:	8812      	ldrh	r2, [r2, #0]
 8005618:	499a      	ldr	r1, [pc, #616]	; (8005884 <USB_DeactivateEndpoint+0x374>)
 800561a:	430a      	orrs	r2, r1
 800561c:	b292      	uxth	r2, r2
 800561e:	801a      	strh	r2, [r3, #0]
 8005620:	e125      	b.n	800586e <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	785b      	ldrb	r3, [r3, #1]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d000      	beq.n	800562c <USB_DeactivateEndpoint+0x11c>
 800562a:	e090      	b.n	800574e <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	18d2      	adds	r2, r2, r3
 8005636:	2120      	movs	r1, #32
 8005638:	187b      	adds	r3, r7, r1
 800563a:	8812      	ldrh	r2, [r2, #0]
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	187b      	adds	r3, r7, r1
 8005640:	881a      	ldrh	r2, [r3, #0]
 8005642:	2380      	movs	r3, #128	; 0x80
 8005644:	01db      	lsls	r3, r3, #7
 8005646:	4013      	ands	r3, r2
 8005648:	d016      	beq.n	8005678 <USB_DeactivateEndpoint+0x168>
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	18d3      	adds	r3, r2, r3
 8005654:	881b      	ldrh	r3, [r3, #0]
 8005656:	b29a      	uxth	r2, r3
 8005658:	201e      	movs	r0, #30
 800565a:	183b      	adds	r3, r7, r0
 800565c:	4986      	ldr	r1, [pc, #536]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 800565e:	400a      	ands	r2, r1
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	18d3      	adds	r3, r2, r3
 800566c:	183a      	adds	r2, r7, r0
 800566e:	8812      	ldrh	r2, [r2, #0]
 8005670:	4985      	ldr	r1, [pc, #532]	; (8005888 <USB_DeactivateEndpoint+0x378>)
 8005672:	430a      	orrs	r2, r1
 8005674:	b292      	uxth	r2, r2
 8005676:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	18d2      	adds	r2, r2, r3
 8005682:	211c      	movs	r1, #28
 8005684:	187b      	adds	r3, r7, r1
 8005686:	8812      	ldrh	r2, [r2, #0]
 8005688:	801a      	strh	r2, [r3, #0]
 800568a:	187b      	adds	r3, r7, r1
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	4013      	ands	r3, r2
 8005692:	d016      	beq.n	80056c2 <USB_DeactivateEndpoint+0x1b2>
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	18d3      	adds	r3, r2, r3
 800569e:	881b      	ldrh	r3, [r3, #0]
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	201a      	movs	r0, #26
 80056a4:	183b      	adds	r3, r7, r0
 80056a6:	4974      	ldr	r1, [pc, #464]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 80056a8:	400a      	ands	r2, r1
 80056aa:	801a      	strh	r2, [r3, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	18d3      	adds	r3, r2, r3
 80056b6:	183a      	adds	r2, r7, r0
 80056b8:	8812      	ldrh	r2, [r2, #0]
 80056ba:	4970      	ldr	r1, [pc, #448]	; (800587c <USB_DeactivateEndpoint+0x36c>)
 80056bc:	430a      	orrs	r2, r1
 80056be:	b292      	uxth	r2, r2
 80056c0:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	18d3      	adds	r3, r2, r3
 80056cc:	881b      	ldrh	r3, [r3, #0]
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	2018      	movs	r0, #24
 80056d2:	183b      	adds	r3, r7, r0
 80056d4:	4968      	ldr	r1, [pc, #416]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 80056d6:	400a      	ands	r2, r1
 80056d8:	801a      	strh	r2, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	18d3      	adds	r3, r2, r3
 80056e4:	183a      	adds	r2, r7, r0
 80056e6:	8812      	ldrh	r2, [r2, #0]
 80056e8:	4964      	ldr	r1, [pc, #400]	; (800587c <USB_DeactivateEndpoint+0x36c>)
 80056ea:	430a      	orrs	r2, r1
 80056ec:	b292      	uxth	r2, r2
 80056ee:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	18d3      	adds	r3, r2, r3
 80056fa:	881b      	ldrh	r3, [r3, #0]
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	2016      	movs	r0, #22
 8005700:	183b      	adds	r3, r7, r0
 8005702:	4962      	ldr	r1, [pc, #392]	; (800588c <USB_DeactivateEndpoint+0x37c>)
 8005704:	400a      	ands	r2, r1
 8005706:	801a      	strh	r2, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	18d3      	adds	r3, r2, r3
 8005712:	183a      	adds	r2, r7, r0
 8005714:	8812      	ldrh	r2, [r2, #0]
 8005716:	495b      	ldr	r1, [pc, #364]	; (8005884 <USB_DeactivateEndpoint+0x374>)
 8005718:	430a      	orrs	r2, r1
 800571a:	b292      	uxth	r2, r2
 800571c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	18d3      	adds	r3, r2, r3
 8005728:	881b      	ldrh	r3, [r3, #0]
 800572a:	b29a      	uxth	r2, r3
 800572c:	2014      	movs	r0, #20
 800572e:	183b      	adds	r3, r7, r0
 8005730:	4953      	ldr	r1, [pc, #332]	; (8005880 <USB_DeactivateEndpoint+0x370>)
 8005732:	400a      	ands	r2, r1
 8005734:	801a      	strh	r2, [r3, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	183a      	adds	r2, r7, r0
 8005742:	8812      	ldrh	r2, [r2, #0]
 8005744:	494f      	ldr	r1, [pc, #316]	; (8005884 <USB_DeactivateEndpoint+0x374>)
 8005746:	430a      	orrs	r2, r1
 8005748:	b292      	uxth	r2, r2
 800574a:	801a      	strh	r2, [r3, #0]
 800574c:	e08f      	b.n	800586e <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	18d2      	adds	r2, r2, r3
 8005758:	212e      	movs	r1, #46	; 0x2e
 800575a:	187b      	adds	r3, r7, r1
 800575c:	8812      	ldrh	r2, [r2, #0]
 800575e:	801a      	strh	r2, [r3, #0]
 8005760:	187b      	adds	r3, r7, r1
 8005762:	881a      	ldrh	r2, [r3, #0]
 8005764:	2380      	movs	r3, #128	; 0x80
 8005766:	01db      	lsls	r3, r3, #7
 8005768:	4013      	ands	r3, r2
 800576a:	d016      	beq.n	800579a <USB_DeactivateEndpoint+0x28a>
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29a      	uxth	r2, r3
 800577a:	202c      	movs	r0, #44	; 0x2c
 800577c:	183b      	adds	r3, r7, r0
 800577e:	493e      	ldr	r1, [pc, #248]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 8005780:	400a      	ands	r2, r1
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	18d3      	adds	r3, r2, r3
 800578e:	183a      	adds	r2, r7, r0
 8005790:	8812      	ldrh	r2, [r2, #0]
 8005792:	493d      	ldr	r1, [pc, #244]	; (8005888 <USB_DeactivateEndpoint+0x378>)
 8005794:	430a      	orrs	r2, r1
 8005796:	b292      	uxth	r2, r2
 8005798:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	18d2      	adds	r2, r2, r3
 80057a4:	212a      	movs	r1, #42	; 0x2a
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	8812      	ldrh	r2, [r2, #0]
 80057aa:	801a      	strh	r2, [r3, #0]
 80057ac:	187b      	adds	r3, r7, r1
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	2240      	movs	r2, #64	; 0x40
 80057b2:	4013      	ands	r3, r2
 80057b4:	d016      	beq.n	80057e4 <USB_DeactivateEndpoint+0x2d4>
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	881b      	ldrh	r3, [r3, #0]
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	2028      	movs	r0, #40	; 0x28
 80057c6:	183b      	adds	r3, r7, r0
 80057c8:	492b      	ldr	r1, [pc, #172]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	18d3      	adds	r3, r2, r3
 80057d8:	183a      	adds	r2, r7, r0
 80057da:	8812      	ldrh	r2, [r2, #0]
 80057dc:	4927      	ldr	r1, [pc, #156]	; (800587c <USB_DeactivateEndpoint+0x36c>)
 80057de:	430a      	orrs	r2, r1
 80057e0:	b292      	uxth	r2, r2
 80057e2:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	2026      	movs	r0, #38	; 0x26
 80057f4:	183b      	adds	r3, r7, r0
 80057f6:	4920      	ldr	r1, [pc, #128]	; (8005878 <USB_DeactivateEndpoint+0x368>)
 80057f8:	400a      	ands	r2, r1
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	18d3      	adds	r3, r2, r3
 8005806:	183a      	adds	r2, r7, r0
 8005808:	8812      	ldrh	r2, [r2, #0]
 800580a:	491f      	ldr	r1, [pc, #124]	; (8005888 <USB_DeactivateEndpoint+0x378>)
 800580c:	430a      	orrs	r2, r1
 800580e:	b292      	uxth	r2, r2
 8005810:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	18d3      	adds	r3, r2, r3
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	b29a      	uxth	r2, r3
 8005820:	2024      	movs	r0, #36	; 0x24
 8005822:	183b      	adds	r3, r7, r0
 8005824:	4916      	ldr	r1, [pc, #88]	; (8005880 <USB_DeactivateEndpoint+0x370>)
 8005826:	400a      	ands	r2, r1
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	18d3      	adds	r3, r2, r3
 8005834:	183a      	adds	r2, r7, r0
 8005836:	8812      	ldrh	r2, [r2, #0]
 8005838:	4912      	ldr	r1, [pc, #72]	; (8005884 <USB_DeactivateEndpoint+0x374>)
 800583a:	430a      	orrs	r2, r1
 800583c:	b292      	uxth	r2, r2
 800583e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	18d3      	adds	r3, r2, r3
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29a      	uxth	r2, r3
 800584e:	2022      	movs	r0, #34	; 0x22
 8005850:	183b      	adds	r3, r7, r0
 8005852:	490e      	ldr	r1, [pc, #56]	; (800588c <USB_DeactivateEndpoint+0x37c>)
 8005854:	400a      	ands	r2, r1
 8005856:	801a      	strh	r2, [r3, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	18d3      	adds	r3, r2, r3
 8005862:	183a      	adds	r2, r7, r0
 8005864:	8812      	ldrh	r2, [r2, #0]
 8005866:	4907      	ldr	r1, [pc, #28]	; (8005884 <USB_DeactivateEndpoint+0x374>)
 8005868:	430a      	orrs	r2, r1
 800586a:	b292      	uxth	r2, r2
 800586c:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	0018      	movs	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	b00c      	add	sp, #48	; 0x30
 8005876:	bd80      	pop	{r7, pc}
 8005878:	ffff8f8f 	.word	0xffff8f8f
 800587c:	ffff80c0 	.word	0xffff80c0
 8005880:	ffff8fbf 	.word	0xffff8fbf
 8005884:	ffff8080 	.word	0xffff8080
 8005888:	ffffc080 	.word	0xffffc080
 800588c:	ffffbf8f 	.word	0xffffbf8f

08005890 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005890:	b590      	push	{r4, r7, lr}
 8005892:	b0c3      	sub	sp, #268	; 0x10c
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	785b      	ldrb	r3, [r3, #1]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d001      	beq.n	80058a6 <USB_EPStartXfer+0x16>
 80058a2:	f000 fcef 	bl	8006284 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d905      	bls.n	80058be <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	1d7a      	adds	r2, r7, #5
 80058b8:	32ff      	adds	r2, #255	; 0xff
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	e004      	b.n	80058c8 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	1d7a      	adds	r2, r7, #5
 80058c4:	32ff      	adds	r2, #255	; 0xff
 80058c6:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	7b1b      	ldrb	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d125      	bne.n	800591c <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	6959      	ldr	r1, [r3, #20]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	88da      	ldrh	r2, [r3, #6]
 80058d8:	1d7b      	adds	r3, r7, #5
 80058da:	33ff      	adds	r3, #255	; 0xff
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	b29b      	uxth	r3, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f9c9 	bl	8006c78 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2250      	movs	r2, #80	; 0x50
 80058ee:	5a9b      	ldrh	r3, [r3, r2]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	001a      	movs	r2, r3
 80058f4:	693b      	ldr	r3, [r7, #16]
 80058f6:	189b      	adds	r3, r3, r2
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	00da      	lsls	r2, r3, #3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	18d3      	adds	r3, r2, r3
 8005904:	4acc      	ldr	r2, [pc, #816]	; (8005c38 <USB_EPStartXfer+0x3a8>)
 8005906:	4694      	mov	ip, r2
 8005908:	4463      	add	r3, ip
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	1d7b      	adds	r3, r7, #5
 800590e:	33ff      	adds	r3, #255	; 0xff
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	f000 fc8f 	bl	800623a <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d000      	beq.n	8005926 <USB_EPStartXfer+0x96>
 8005924:	e33a      	b.n	8005f9c <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6a1a      	ldr	r2, [r3, #32]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	429a      	cmp	r2, r3
 8005930:	d800      	bhi.n	8005934 <USB_EPStartXfer+0xa4>
 8005932:	e2df      	b.n	8005ef4 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	18d3      	adds	r3, r2, r3
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29a      	uxth	r2, r3
 8005942:	2056      	movs	r0, #86	; 0x56
 8005944:	183b      	adds	r3, r7, r0
 8005946:	49bd      	ldr	r1, [pc, #756]	; (8005c3c <USB_EPStartXfer+0x3ac>)
 8005948:	400a      	ands	r2, r1
 800594a:	801a      	strh	r2, [r3, #0]
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	18d3      	adds	r3, r2, r3
 8005956:	183a      	adds	r2, r7, r0
 8005958:	8812      	ldrh	r2, [r2, #0]
 800595a:	49b9      	ldr	r1, [pc, #740]	; (8005c40 <USB_EPStartXfer+0x3b0>)
 800595c:	430a      	orrs	r2, r1
 800595e:	b292      	uxth	r2, r2
 8005960:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	1d7b      	adds	r3, r7, #5
 8005968:	33ff      	adds	r3, #255	; 0xff
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29b      	uxth	r3, r3
 8005980:	001a      	movs	r2, r3
 8005982:	2340      	movs	r3, #64	; 0x40
 8005984:	4013      	ands	r3, r2
 8005986:	d100      	bne.n	800598a <USB_EPStartXfer+0xfa>
 8005988:	e162      	b.n	8005c50 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	633b      	str	r3, [r7, #48]	; 0x30
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d16a      	bne.n	8005a6c <USB_EPStartXfer+0x1dc>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	62bb      	str	r3, [r7, #40]	; 0x28
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2250      	movs	r2, #80	; 0x50
 800599e:	5a9b      	ldrh	r3, [r3, r2]
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	001a      	movs	r2, r3
 80059a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a6:	189b      	adds	r3, r3, r2
 80059a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	00da      	lsls	r2, r3, #3
 80059b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b2:	18d3      	adds	r3, r2, r3
 80059b4:	4aa3      	ldr	r2, [pc, #652]	; (8005c44 <USB_EPStartXfer+0x3b4>)
 80059b6:	4694      	mov	ip, r2
 80059b8:	4463      	add	r3, ip
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
 80059bc:	1d7b      	adds	r3, r7, #5
 80059be:	33ff      	adds	r3, #255	; 0xff
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d110      	bne.n	80059e8 <USB_EPStartXfer+0x158>
 80059c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	4a9e      	ldr	r2, [pc, #632]	; (8005c48 <USB_EPStartXfer+0x3b8>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	4a9b      	ldr	r2, [pc, #620]	; (8005c4c <USB_EPStartXfer+0x3bc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	801a      	strh	r2, [r3, #0]
 80059e6:	e05c      	b.n	8005aa2 <USB_EPStartXfer+0x212>
 80059e8:	1d7b      	adds	r3, r7, #5
 80059ea:	33ff      	adds	r3, #255	; 0xff
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2b3e      	cmp	r3, #62	; 0x3e
 80059f0:	d81c      	bhi.n	8005a2c <USB_EPStartXfer+0x19c>
 80059f2:	1d7b      	adds	r3, r7, #5
 80059f4:	33ff      	adds	r3, #255	; 0xff
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	085b      	lsrs	r3, r3, #1
 80059fa:	1c7a      	adds	r2, r7, #1
 80059fc:	32ff      	adds	r2, #255	; 0xff
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	1d7b      	adds	r3, r7, #5
 8005a02:	33ff      	adds	r3, #255	; 0xff
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2201      	movs	r2, #1
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d006      	beq.n	8005a1a <USB_EPStartXfer+0x18a>
 8005a0c:	1c7b      	adds	r3, r7, #1
 8005a0e:	33ff      	adds	r3, #255	; 0xff
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3301      	adds	r3, #1
 8005a14:	1c7a      	adds	r2, r7, #1
 8005a16:	32ff      	adds	r2, #255	; 0xff
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	1c7b      	adds	r3, r7, #1
 8005a1c:	33ff      	adds	r3, #255	; 0xff
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	e03a      	b.n	8005aa2 <USB_EPStartXfer+0x212>
 8005a2c:	1d7b      	adds	r3, r7, #5
 8005a2e:	33ff      	adds	r3, #255	; 0xff
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	095b      	lsrs	r3, r3, #5
 8005a34:	1c7a      	adds	r2, r7, #1
 8005a36:	32ff      	adds	r2, #255	; 0xff
 8005a38:	6013      	str	r3, [r2, #0]
 8005a3a:	1d7b      	adds	r3, r7, #5
 8005a3c:	33ff      	adds	r3, #255	; 0xff
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	221f      	movs	r2, #31
 8005a42:	4013      	ands	r3, r2
 8005a44:	d106      	bne.n	8005a54 <USB_EPStartXfer+0x1c4>
 8005a46:	1c7b      	adds	r3, r7, #1
 8005a48:	33ff      	adds	r3, #255	; 0xff
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	1c7a      	adds	r2, r7, #1
 8005a50:	32ff      	adds	r2, #255	; 0xff
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	1c7b      	adds	r3, r7, #1
 8005a56:	33ff      	adds	r3, #255	; 0xff
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	029b      	lsls	r3, r3, #10
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	4a7a      	ldr	r2, [pc, #488]	; (8005c4c <USB_EPStartXfer+0x3bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	801a      	strh	r2, [r3, #0]
 8005a6a:	e01a      	b.n	8005aa2 <USB_EPStartXfer+0x212>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d116      	bne.n	8005aa2 <USB_EPStartXfer+0x212>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2250      	movs	r2, #80	; 0x50
 8005a78:	5a9b      	ldrh	r3, [r3, r2]
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	001a      	movs	r2, r3
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	189b      	adds	r3, r3, r2
 8005a82:	633b      	str	r3, [r7, #48]	; 0x30
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	00da      	lsls	r2, r3, #3
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	18d3      	adds	r3, r2, r3
 8005a8e:	4a6d      	ldr	r2, [pc, #436]	; (8005c44 <USB_EPStartXfer+0x3b4>)
 8005a90:	4694      	mov	ip, r2
 8005a92:	4463      	add	r3, ip
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a96:	1d7b      	adds	r3, r7, #5
 8005a98:	33ff      	adds	r3, #255	; 0xff
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005aa2:	2076      	movs	r0, #118	; 0x76
 8005aa4:	183b      	adds	r3, r7, r0
 8005aa6:	683a      	ldr	r2, [r7, #0]
 8005aa8:	8952      	ldrh	r2, [r2, #10]
 8005aaa:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	6959      	ldr	r1, [r3, #20]
 8005ab0:	1d7b      	adds	r3, r7, #5
 8005ab2:	33ff      	adds	r3, #255	; 0xff
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	b29c      	uxth	r4, r3
 8005ab8:	183b      	adds	r3, r7, r0
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	0023      	movs	r3, r4
 8005ac0:	f001 f8da 	bl	8006c78 <USB_WritePMA>
            ep->xfer_buff += len;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695a      	ldr	r2, [r3, #20]
 8005ac8:	1d7b      	adds	r3, r7, #5
 8005aca:	33ff      	adds	r3, #255	; 0xff
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	18d2      	adds	r2, r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6a1a      	ldr	r2, [r3, #32]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d908      	bls.n	8005af2 <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	1d7b      	adds	r3, r7, #5
 8005ae6:	33ff      	adds	r3, #255	; 0xff
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1ad2      	subs	r2, r2, r3
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	621a      	str	r2, [r3, #32]
 8005af0:	e007      	b.n	8005b02 <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	1d7a      	adds	r2, r7, #5
 8005af8:	32ff      	adds	r2, #255	; 0xff
 8005afa:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2200      	movs	r2, #0
 8005b00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d166      	bne.n	8005bd8 <USB_EPStartXfer+0x348>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2250      	movs	r2, #80	; 0x50
 8005b12:	5a9b      	ldrh	r3, [r3, r2]
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	001a      	movs	r2, r3
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	189b      	adds	r3, r3, r2
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	781b      	ldrb	r3, [r3, #0]
 8005b22:	00da      	lsls	r2, r3, #3
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	18d3      	adds	r3, r2, r3
 8005b28:	4a43      	ldr	r2, [pc, #268]	; (8005c38 <USB_EPStartXfer+0x3a8>)
 8005b2a:	4694      	mov	ip, r2
 8005b2c:	4463      	add	r3, ip
 8005b2e:	617b      	str	r3, [r7, #20]
 8005b30:	1d7b      	adds	r3, r7, #5
 8005b32:	33ff      	adds	r3, #255	; 0xff
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d110      	bne.n	8005b5c <USB_EPStartXfer+0x2cc>
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	881b      	ldrh	r3, [r3, #0]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	4a41      	ldr	r2, [pc, #260]	; (8005c48 <USB_EPStartXfer+0x3b8>)
 8005b42:	4013      	ands	r3, r2
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	801a      	strh	r2, [r3, #0]
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	881b      	ldrh	r3, [r3, #0]
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	4a3e      	ldr	r2, [pc, #248]	; (8005c4c <USB_EPStartXfer+0x3bc>)
 8005b52:	4313      	orrs	r3, r2
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	801a      	strh	r2, [r3, #0]
 8005b5a:	e05a      	b.n	8005c12 <USB_EPStartXfer+0x382>
 8005b5c:	1d7b      	adds	r3, r7, #5
 8005b5e:	33ff      	adds	r3, #255	; 0xff
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b3e      	cmp	r3, #62	; 0x3e
 8005b64:	d81a      	bhi.n	8005b9c <USB_EPStartXfer+0x30c>
 8005b66:	1d7b      	adds	r3, r7, #5
 8005b68:	33ff      	adds	r3, #255	; 0xff
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	085b      	lsrs	r3, r3, #1
 8005b6e:	21fc      	movs	r1, #252	; 0xfc
 8005b70:	187a      	adds	r2, r7, r1
 8005b72:	6013      	str	r3, [r2, #0]
 8005b74:	1d7b      	adds	r3, r7, #5
 8005b76:	33ff      	adds	r3, #255	; 0xff
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d004      	beq.n	8005b8a <USB_EPStartXfer+0x2fa>
 8005b80:	187b      	adds	r3, r7, r1
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	187a      	adds	r2, r7, r1
 8005b88:	6013      	str	r3, [r2, #0]
 8005b8a:	23fc      	movs	r3, #252	; 0xfc
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	029b      	lsls	r3, r3, #10
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	e03a      	b.n	8005c12 <USB_EPStartXfer+0x382>
 8005b9c:	1d7b      	adds	r3, r7, #5
 8005b9e:	33ff      	adds	r3, #255	; 0xff
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	21fc      	movs	r1, #252	; 0xfc
 8005ba6:	187a      	adds	r2, r7, r1
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	1d7b      	adds	r3, r7, #5
 8005bac:	33ff      	adds	r3, #255	; 0xff
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	221f      	movs	r2, #31
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d104      	bne.n	8005bc0 <USB_EPStartXfer+0x330>
 8005bb6:	187b      	adds	r3, r7, r1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	187a      	adds	r2, r7, r1
 8005bbe:	6013      	str	r3, [r2, #0]
 8005bc0:	23fc      	movs	r3, #252	; 0xfc
 8005bc2:	18fb      	adds	r3, r7, r3
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	029b      	lsls	r3, r3, #10
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <USB_EPStartXfer+0x3bc>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	801a      	strh	r2, [r3, #0]
 8005bd6:	e01c      	b.n	8005c12 <USB_EPStartXfer+0x382>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d118      	bne.n	8005c12 <USB_EPStartXfer+0x382>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	623b      	str	r3, [r7, #32]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2250      	movs	r2, #80	; 0x50
 8005be8:	5a9b      	ldrh	r3, [r3, r2]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	001a      	movs	r2, r3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	189b      	adds	r3, r3, r2
 8005bf2:	623b      	str	r3, [r7, #32]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00da      	lsls	r2, r3, #3
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	18d3      	adds	r3, r2, r3
 8005bfe:	4a0e      	ldr	r2, [pc, #56]	; (8005c38 <USB_EPStartXfer+0x3a8>)
 8005c00:	4694      	mov	ip, r2
 8005c02:	4463      	add	r3, ip
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	1d7b      	adds	r3, r7, #5
 8005c08:	33ff      	adds	r3, #255	; 0xff
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	69fb      	ldr	r3, [r7, #28]
 8005c10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c12:	2076      	movs	r0, #118	; 0x76
 8005c14:	183b      	adds	r3, r7, r0
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	8912      	ldrh	r2, [r2, #8]
 8005c1a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6959      	ldr	r1, [r3, #20]
 8005c20:	1d7b      	adds	r3, r7, #5
 8005c22:	33ff      	adds	r3, #255	; 0xff
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	b29c      	uxth	r4, r3
 8005c28:	183b      	adds	r3, r7, r0
 8005c2a:	881a      	ldrh	r2, [r3, #0]
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	0023      	movs	r3, r4
 8005c30:	f001 f822 	bl	8006c78 <USB_WritePMA>
 8005c34:	e301      	b.n	800623a <USB_EPStartXfer+0x9aa>
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	00000402 	.word	0x00000402
 8005c3c:	ffff8f8f 	.word	0xffff8f8f
 8005c40:	ffff8180 	.word	0xffff8180
 8005c44:	00000406 	.word	0x00000406
 8005c48:	ffff83ff 	.word	0xffff83ff
 8005c4c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	785b      	ldrb	r3, [r3, #1]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d166      	bne.n	8005d26 <USB_EPStartXfer+0x496>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2250      	movs	r2, #80	; 0x50
 8005c60:	5a9b      	ldrh	r3, [r3, r2]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	001a      	movs	r2, r3
 8005c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c68:	189b      	adds	r3, r3, r2
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c74:	18d3      	adds	r3, r2, r3
 8005c76:	4ac3      	ldr	r2, [pc, #780]	; (8005f84 <USB_EPStartXfer+0x6f4>)
 8005c78:	4694      	mov	ip, r2
 8005c7a:	4463      	add	r3, ip
 8005c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c7e:	1d7b      	adds	r3, r7, #5
 8005c80:	33ff      	adds	r3, #255	; 0xff
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d110      	bne.n	8005caa <USB_EPStartXfer+0x41a>
 8005c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	4abe      	ldr	r2, [pc, #760]	; (8005f88 <USB_EPStartXfer+0x6f8>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c96:	801a      	strh	r2, [r3, #0]
 8005c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9a:	881b      	ldrh	r3, [r3, #0]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	4abb      	ldr	r2, [pc, #748]	; (8005f8c <USB_EPStartXfer+0x6fc>)
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e05a      	b.n	8005d60 <USB_EPStartXfer+0x4d0>
 8005caa:	1d7b      	adds	r3, r7, #5
 8005cac:	33ff      	adds	r3, #255	; 0xff
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b3e      	cmp	r3, #62	; 0x3e
 8005cb2:	d81a      	bhi.n	8005cea <USB_EPStartXfer+0x45a>
 8005cb4:	1d7b      	adds	r3, r7, #5
 8005cb6:	33ff      	adds	r3, #255	; 0xff
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	085b      	lsrs	r3, r3, #1
 8005cbc:	21f8      	movs	r1, #248	; 0xf8
 8005cbe:	187a      	adds	r2, r7, r1
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	1d7b      	adds	r3, r7, #5
 8005cc4:	33ff      	adds	r3, #255	; 0xff
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <USB_EPStartXfer+0x448>
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	187a      	adds	r2, r7, r1
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	23f8      	movs	r3, #248	; 0xf8
 8005cda:	18fb      	adds	r3, r7, r3
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce6:	801a      	strh	r2, [r3, #0]
 8005ce8:	e03a      	b.n	8005d60 <USB_EPStartXfer+0x4d0>
 8005cea:	1d7b      	adds	r3, r7, #5
 8005cec:	33ff      	adds	r3, #255	; 0xff
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	21f8      	movs	r1, #248	; 0xf8
 8005cf4:	187a      	adds	r2, r7, r1
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	1d7b      	adds	r3, r7, #5
 8005cfa:	33ff      	adds	r3, #255	; 0xff
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	221f      	movs	r2, #31
 8005d00:	4013      	ands	r3, r2
 8005d02:	d104      	bne.n	8005d0e <USB_EPStartXfer+0x47e>
 8005d04:	187b      	adds	r3, r7, r1
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	187a      	adds	r2, r7, r1
 8005d0c:	6013      	str	r3, [r2, #0]
 8005d0e:	23f8      	movs	r3, #248	; 0xf8
 8005d10:	18fb      	adds	r3, r7, r3
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	029b      	lsls	r3, r3, #10
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	4a9c      	ldr	r2, [pc, #624]	; (8005f8c <USB_EPStartXfer+0x6fc>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	b29a      	uxth	r2, r3
 8005d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d22:	801a      	strh	r2, [r3, #0]
 8005d24:	e01c      	b.n	8005d60 <USB_EPStartXfer+0x4d0>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	785b      	ldrb	r3, [r3, #1]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d118      	bne.n	8005d60 <USB_EPStartXfer+0x4d0>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2250      	movs	r2, #80	; 0x50
 8005d36:	5a9b      	ldrh	r3, [r3, r2]
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	001a      	movs	r2, r3
 8005d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d3e:	189b      	adds	r3, r3, r2
 8005d40:	653b      	str	r3, [r7, #80]	; 0x50
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	00da      	lsls	r2, r3, #3
 8005d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d4a:	18d3      	adds	r3, r2, r3
 8005d4c:	4a8d      	ldr	r2, [pc, #564]	; (8005f84 <USB_EPStartXfer+0x6f4>)
 8005d4e:	4694      	mov	ip, r2
 8005d50:	4463      	add	r3, ip
 8005d52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d54:	1d7b      	adds	r3, r7, #5
 8005d56:	33ff      	adds	r3, #255	; 0xff
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005d60:	2076      	movs	r0, #118	; 0x76
 8005d62:	183b      	adds	r3, r7, r0
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	8912      	ldrh	r2, [r2, #8]
 8005d68:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6959      	ldr	r1, [r3, #20]
 8005d6e:	1d7b      	adds	r3, r7, #5
 8005d70:	33ff      	adds	r3, #255	; 0xff
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	b29c      	uxth	r4, r3
 8005d76:	183b      	adds	r3, r7, r0
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	0023      	movs	r3, r4
 8005d7e:	f000 ff7b 	bl	8006c78 <USB_WritePMA>
            ep->xfer_buff += len;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	1d7b      	adds	r3, r7, #5
 8005d88:	33ff      	adds	r3, #255	; 0xff
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	18d2      	adds	r2, r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6a1a      	ldr	r2, [r3, #32]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d908      	bls.n	8005db0 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	1d7b      	adds	r3, r7, #5
 8005da4:	33ff      	adds	r3, #255	; 0xff
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	1ad2      	subs	r2, r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	621a      	str	r2, [r3, #32]
 8005dae:	e007      	b.n	8005dc0 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	1d7a      	adds	r2, r7, #5
 8005db6:	32ff      	adds	r2, #255	; 0xff
 8005db8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d166      	bne.n	8005e9a <USB_EPStartXfer+0x60a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2250      	movs	r2, #80	; 0x50
 8005dd4:	5a9b      	ldrh	r3, [r3, r2]
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	001a      	movs	r2, r3
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	189b      	adds	r3, r3, r2
 8005dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	00da      	lsls	r2, r3, #3
 8005de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de8:	18d3      	adds	r3, r2, r3
 8005dea:	4a69      	ldr	r2, [pc, #420]	; (8005f90 <USB_EPStartXfer+0x700>)
 8005dec:	4694      	mov	ip, r2
 8005dee:	4463      	add	r3, ip
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34
 8005df2:	1d7b      	adds	r3, r7, #5
 8005df4:	33ff      	adds	r3, #255	; 0xff
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d110      	bne.n	8005e1e <USB_EPStartXfer+0x58e>
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	4a61      	ldr	r2, [pc, #388]	; (8005f88 <USB_EPStartXfer+0x6f8>)
 8005e04:	4013      	ands	r3, r2
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0a:	801a      	strh	r2, [r3, #0]
 8005e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e0e:	881b      	ldrh	r3, [r3, #0]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	4a5e      	ldr	r2, [pc, #376]	; (8005f8c <USB_EPStartXfer+0x6fc>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e058      	b.n	8005ed0 <USB_EPStartXfer+0x640>
 8005e1e:	1d7b      	adds	r3, r7, #5
 8005e20:	33ff      	adds	r3, #255	; 0xff
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2b3e      	cmp	r3, #62	; 0x3e
 8005e26:	d81a      	bhi.n	8005e5e <USB_EPStartXfer+0x5ce>
 8005e28:	1d7b      	adds	r3, r7, #5
 8005e2a:	33ff      	adds	r3, #255	; 0xff
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	21f4      	movs	r1, #244	; 0xf4
 8005e32:	187a      	adds	r2, r7, r1
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	1d7b      	adds	r3, r7, #5
 8005e38:	33ff      	adds	r3, #255	; 0xff
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	4013      	ands	r3, r2
 8005e40:	d004      	beq.n	8005e4c <USB_EPStartXfer+0x5bc>
 8005e42:	187b      	adds	r3, r7, r1
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	187a      	adds	r2, r7, r1
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	23f4      	movs	r3, #244	; 0xf4
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e5a:	801a      	strh	r2, [r3, #0]
 8005e5c:	e038      	b.n	8005ed0 <USB_EPStartXfer+0x640>
 8005e5e:	1d7b      	adds	r3, r7, #5
 8005e60:	33ff      	adds	r3, #255	; 0xff
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	21f4      	movs	r1, #244	; 0xf4
 8005e68:	187a      	adds	r2, r7, r1
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	1d7b      	adds	r3, r7, #5
 8005e6e:	33ff      	adds	r3, #255	; 0xff
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	221f      	movs	r2, #31
 8005e74:	4013      	ands	r3, r2
 8005e76:	d104      	bne.n	8005e82 <USB_EPStartXfer+0x5f2>
 8005e78:	187b      	adds	r3, r7, r1
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	187a      	adds	r2, r7, r1
 8005e80:	6013      	str	r3, [r2, #0]
 8005e82:	23f4      	movs	r3, #244	; 0xf4
 8005e84:	18fb      	adds	r3, r7, r3
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	4a3f      	ldr	r2, [pc, #252]	; (8005f8c <USB_EPStartXfer+0x6fc>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	801a      	strh	r2, [r3, #0]
 8005e98:	e01a      	b.n	8005ed0 <USB_EPStartXfer+0x640>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d116      	bne.n	8005ed0 <USB_EPStartXfer+0x640>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2250      	movs	r2, #80	; 0x50
 8005ea6:	5a9b      	ldrh	r3, [r3, r2]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	001a      	movs	r2, r3
 8005eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eae:	189b      	adds	r3, r3, r2
 8005eb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	00da      	lsls	r2, r3, #3
 8005eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005eba:	18d3      	adds	r3, r2, r3
 8005ebc:	4a34      	ldr	r2, [pc, #208]	; (8005f90 <USB_EPStartXfer+0x700>)
 8005ebe:	4694      	mov	ip, r2
 8005ec0:	4463      	add	r3, ip
 8005ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ec4:	1d7b      	adds	r3, r7, #5
 8005ec6:	33ff      	adds	r3, #255	; 0xff
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	b29a      	uxth	r2, r3
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ed0:	2076      	movs	r0, #118	; 0x76
 8005ed2:	183b      	adds	r3, r7, r0
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	8952      	ldrh	r2, [r2, #10]
 8005ed8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6959      	ldr	r1, [r3, #20]
 8005ede:	1d7b      	adds	r3, r7, #5
 8005ee0:	33ff      	adds	r3, #255	; 0xff
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	b29c      	uxth	r4, r3
 8005ee6:	183b      	adds	r3, r7, r0
 8005ee8:	881a      	ldrh	r2, [r3, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	0023      	movs	r3, r4
 8005eee:	f000 fec3 	bl	8006c78 <USB_WritePMA>
 8005ef2:	e1a2      	b.n	800623a <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	6a1b      	ldr	r3, [r3, #32]
 8005ef8:	1d7a      	adds	r2, r7, #5
 8005efa:	32ff      	adds	r2, #255	; 0xff
 8005efc:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	18d3      	adds	r3, r2, r3
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	2062      	movs	r0, #98	; 0x62
 8005f0e:	183b      	adds	r3, r7, r0
 8005f10:	4920      	ldr	r1, [pc, #128]	; (8005f94 <USB_EPStartXfer+0x704>)
 8005f12:	400a      	ands	r2, r1
 8005f14:	801a      	strh	r2, [r3, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	18d3      	adds	r3, r2, r3
 8005f20:	183a      	adds	r2, r7, r0
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	491c      	ldr	r1, [pc, #112]	; (8005f98 <USB_EPStartXfer+0x708>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	b292      	uxth	r2, r2
 8005f2a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2250      	movs	r2, #80	; 0x50
 8005f34:	5a9b      	ldrh	r3, [r3, r2]
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	001a      	movs	r2, r3
 8005f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f3c:	189b      	adds	r3, r3, r2
 8005f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	00da      	lsls	r2, r3, #3
 8005f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f48:	18d3      	adds	r3, r2, r3
 8005f4a:	4a0e      	ldr	r2, [pc, #56]	; (8005f84 <USB_EPStartXfer+0x6f4>)
 8005f4c:	4694      	mov	ip, r2
 8005f4e:	4463      	add	r3, ip
 8005f50:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f52:	1d7b      	adds	r3, r7, #5
 8005f54:	33ff      	adds	r3, #255	; 0xff
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f5c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005f5e:	2076      	movs	r0, #118	; 0x76
 8005f60:	183b      	adds	r3, r7, r0
 8005f62:	683a      	ldr	r2, [r7, #0]
 8005f64:	8912      	ldrh	r2, [r2, #8]
 8005f66:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	6959      	ldr	r1, [r3, #20]
 8005f6c:	1d7b      	adds	r3, r7, #5
 8005f6e:	33ff      	adds	r3, #255	; 0xff
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	b29c      	uxth	r4, r3
 8005f74:	183b      	adds	r3, r7, r0
 8005f76:	881a      	ldrh	r2, [r3, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	0023      	movs	r3, r4
 8005f7c:	f000 fe7c 	bl	8006c78 <USB_WritePMA>
 8005f80:	e15b      	b.n	800623a <USB_EPStartXfer+0x9aa>
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	00000402 	.word	0x00000402
 8005f88:	ffff83ff 	.word	0xffff83ff
 8005f8c:	ffff8000 	.word	0xffff8000
 8005f90:	00000406 	.word	0x00000406
 8005f94:	ffff8e8f 	.word	0xffff8e8f
 8005f98:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	6a1a      	ldr	r2, [r3, #32]
 8005fa0:	1d7b      	adds	r3, r7, #5
 8005fa2:	33ff      	adds	r3, #255	; 0xff
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	18d3      	adds	r3, r2, r3
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	001a      	movs	r2, r3
 8005fbc:	2340      	movs	r3, #64	; 0x40
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	d100      	bne.n	8005fc4 <USB_EPStartXfer+0x734>
 8005fc2:	e099      	b.n	80060f8 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	673b      	str	r3, [r7, #112]	; 0x70
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	785b      	ldrb	r3, [r3, #1]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d166      	bne.n	800609e <USB_EPStartXfer+0x80e>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2250      	movs	r2, #80	; 0x50
 8005fd8:	5a9b      	ldrh	r3, [r3, r2]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	001a      	movs	r2, r3
 8005fde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fe0:	189b      	adds	r3, r3, r2
 8005fe2:	66bb      	str	r3, [r7, #104]	; 0x68
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	00da      	lsls	r2, r3, #3
 8005fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fec:	18d3      	adds	r3, r2, r3
 8005fee:	4ad0      	ldr	r2, [pc, #832]	; (8006330 <USB_EPStartXfer+0xaa0>)
 8005ff0:	4694      	mov	ip, r2
 8005ff2:	4463      	add	r3, ip
 8005ff4:	667b      	str	r3, [r7, #100]	; 0x64
 8005ff6:	1d7b      	adds	r3, r7, #5
 8005ff8:	33ff      	adds	r3, #255	; 0xff
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d110      	bne.n	8006022 <USB_EPStartXfer+0x792>
 8006000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	b29b      	uxth	r3, r3
 8006006:	4acb      	ldr	r2, [pc, #812]	; (8006334 <USB_EPStartXfer+0xaa4>)
 8006008:	4013      	ands	r3, r2
 800600a:	b29a      	uxth	r2, r3
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	4ac8      	ldr	r2, [pc, #800]	; (8006338 <USB_EPStartXfer+0xaa8>)
 8006018:	4313      	orrs	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800601e:	801a      	strh	r2, [r3, #0]
 8006020:	e058      	b.n	80060d4 <USB_EPStartXfer+0x844>
 8006022:	1d7b      	adds	r3, r7, #5
 8006024:	33ff      	adds	r3, #255	; 0xff
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b3e      	cmp	r3, #62	; 0x3e
 800602a:	d81a      	bhi.n	8006062 <USB_EPStartXfer+0x7d2>
 800602c:	1d7b      	adds	r3, r7, #5
 800602e:	33ff      	adds	r3, #255	; 0xff
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	21f0      	movs	r1, #240	; 0xf0
 8006036:	187a      	adds	r2, r7, r1
 8006038:	6013      	str	r3, [r2, #0]
 800603a:	1d7b      	adds	r3, r7, #5
 800603c:	33ff      	adds	r3, #255	; 0xff
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2201      	movs	r2, #1
 8006042:	4013      	ands	r3, r2
 8006044:	d004      	beq.n	8006050 <USB_EPStartXfer+0x7c0>
 8006046:	187b      	adds	r3, r7, r1
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3301      	adds	r3, #1
 800604c:	187a      	adds	r2, r7, r1
 800604e:	6013      	str	r3, [r2, #0]
 8006050:	23f0      	movs	r3, #240	; 0xf0
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	b29b      	uxth	r3, r3
 8006058:	029b      	lsls	r3, r3, #10
 800605a:	b29a      	uxth	r2, r3
 800605c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e038      	b.n	80060d4 <USB_EPStartXfer+0x844>
 8006062:	1d7b      	adds	r3, r7, #5
 8006064:	33ff      	adds	r3, #255	; 0xff
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	095b      	lsrs	r3, r3, #5
 800606a:	21f0      	movs	r1, #240	; 0xf0
 800606c:	187a      	adds	r2, r7, r1
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	1d7b      	adds	r3, r7, #5
 8006072:	33ff      	adds	r3, #255	; 0xff
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	221f      	movs	r2, #31
 8006078:	4013      	ands	r3, r2
 800607a:	d104      	bne.n	8006086 <USB_EPStartXfer+0x7f6>
 800607c:	187b      	adds	r3, r7, r1
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3b01      	subs	r3, #1
 8006082:	187a      	adds	r2, r7, r1
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	23f0      	movs	r3, #240	; 0xf0
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	b29b      	uxth	r3, r3
 800608e:	029b      	lsls	r3, r3, #10
 8006090:	b29b      	uxth	r3, r3
 8006092:	4aa9      	ldr	r2, [pc, #676]	; (8006338 <USB_EPStartXfer+0xaa8>)
 8006094:	4313      	orrs	r3, r2
 8006096:	b29a      	uxth	r2, r3
 8006098:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800609a:	801a      	strh	r2, [r3, #0]
 800609c:	e01a      	b.n	80060d4 <USB_EPStartXfer+0x844>
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d116      	bne.n	80060d4 <USB_EPStartXfer+0x844>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2250      	movs	r2, #80	; 0x50
 80060aa:	5a9b      	ldrh	r3, [r3, r2]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	001a      	movs	r2, r3
 80060b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060b2:	189b      	adds	r3, r3, r2
 80060b4:	673b      	str	r3, [r7, #112]	; 0x70
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	00da      	lsls	r2, r3, #3
 80060bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060be:	18d3      	adds	r3, r2, r3
 80060c0:	4a9b      	ldr	r2, [pc, #620]	; (8006330 <USB_EPStartXfer+0xaa0>)
 80060c2:	4694      	mov	ip, r2
 80060c4:	4463      	add	r3, ip
 80060c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c8:	1d7b      	adds	r3, r7, #5
 80060ca:	33ff      	adds	r3, #255	; 0xff
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	b29a      	uxth	r2, r3
 80060d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80060d4:	2076      	movs	r0, #118	; 0x76
 80060d6:	183b      	adds	r3, r7, r0
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	8952      	ldrh	r2, [r2, #10]
 80060dc:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6959      	ldr	r1, [r3, #20]
 80060e2:	1d7b      	adds	r3, r7, #5
 80060e4:	33ff      	adds	r3, #255	; 0xff
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	b29c      	uxth	r4, r3
 80060ea:	183b      	adds	r3, r7, r0
 80060ec:	881a      	ldrh	r2, [r3, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	0023      	movs	r3, r4
 80060f2:	f000 fdc1 	bl	8006c78 <USB_WritePMA>
 80060f6:	e0a0      	b.n	800623a <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	785b      	ldrb	r3, [r3, #1]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d166      	bne.n	80061ce <USB_EPStartXfer+0x93e>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2250      	movs	r2, #80	; 0x50
 8006108:	5a9b      	ldrh	r3, [r3, r2]
 800610a:	b29b      	uxth	r3, r3
 800610c:	001a      	movs	r2, r3
 800610e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006110:	189b      	adds	r3, r3, r2
 8006112:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	00da      	lsls	r2, r3, #3
 800611a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800611c:	18d3      	adds	r3, r2, r3
 800611e:	4a87      	ldr	r2, [pc, #540]	; (800633c <USB_EPStartXfer+0xaac>)
 8006120:	4694      	mov	ip, r2
 8006122:	4463      	add	r3, ip
 8006124:	67bb      	str	r3, [r7, #120]	; 0x78
 8006126:	1d7b      	adds	r3, r7, #5
 8006128:	33ff      	adds	r3, #255	; 0xff
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d110      	bne.n	8006152 <USB_EPStartXfer+0x8c2>
 8006130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	4a7f      	ldr	r2, [pc, #508]	; (8006334 <USB_EPStartXfer+0xaa4>)
 8006138:	4013      	ands	r3, r2
 800613a:	b29a      	uxth	r2, r3
 800613c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006142:	881b      	ldrh	r3, [r3, #0]
 8006144:	b29b      	uxth	r3, r3
 8006146:	4a7c      	ldr	r2, [pc, #496]	; (8006338 <USB_EPStartXfer+0xaa8>)
 8006148:	4313      	orrs	r3, r2
 800614a:	b29a      	uxth	r2, r3
 800614c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	e062      	b.n	8006218 <USB_EPStartXfer+0x988>
 8006152:	1d7b      	adds	r3, r7, #5
 8006154:	33ff      	adds	r3, #255	; 0xff
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2b3e      	cmp	r3, #62	; 0x3e
 800615a:	d81a      	bhi.n	8006192 <USB_EPStartXfer+0x902>
 800615c:	1d7b      	adds	r3, r7, #5
 800615e:	33ff      	adds	r3, #255	; 0xff
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	085b      	lsrs	r3, r3, #1
 8006164:	21ec      	movs	r1, #236	; 0xec
 8006166:	187a      	adds	r2, r7, r1
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	1d7b      	adds	r3, r7, #5
 800616c:	33ff      	adds	r3, #255	; 0xff
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	4013      	ands	r3, r2
 8006174:	d004      	beq.n	8006180 <USB_EPStartXfer+0x8f0>
 8006176:	187b      	adds	r3, r7, r1
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	187a      	adds	r2, r7, r1
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	23ec      	movs	r3, #236	; 0xec
 8006182:	18fb      	adds	r3, r7, r3
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	029b      	lsls	r3, r3, #10
 800618a:	b29a      	uxth	r2, r3
 800618c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800618e:	801a      	strh	r2, [r3, #0]
 8006190:	e042      	b.n	8006218 <USB_EPStartXfer+0x988>
 8006192:	1d7b      	adds	r3, r7, #5
 8006194:	33ff      	adds	r3, #255	; 0xff
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	21ec      	movs	r1, #236	; 0xec
 800619c:	187a      	adds	r2, r7, r1
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	1d7b      	adds	r3, r7, #5
 80061a2:	33ff      	adds	r3, #255	; 0xff
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	221f      	movs	r2, #31
 80061a8:	4013      	ands	r3, r2
 80061aa:	d104      	bne.n	80061b6 <USB_EPStartXfer+0x926>
 80061ac:	187b      	adds	r3, r7, r1
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3b01      	subs	r3, #1
 80061b2:	187a      	adds	r2, r7, r1
 80061b4:	6013      	str	r3, [r2, #0]
 80061b6:	23ec      	movs	r3, #236	; 0xec
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	b29b      	uxth	r3, r3
 80061be:	029b      	lsls	r3, r3, #10
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	4a5d      	ldr	r2, [pc, #372]	; (8006338 <USB_EPStartXfer+0xaa8>)
 80061c4:	4313      	orrs	r3, r2
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	e024      	b.n	8006218 <USB_EPStartXfer+0x988>
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d120      	bne.n	8006218 <USB_EPStartXfer+0x988>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2184      	movs	r1, #132	; 0x84
 80061da:	187a      	adds	r2, r7, r1
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2250      	movs	r2, #80	; 0x50
 80061e2:	5a9b      	ldrh	r3, [r3, r2]
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	001a      	movs	r2, r3
 80061e8:	187b      	adds	r3, r7, r1
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	187a      	adds	r2, r7, r1
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	00da      	lsls	r2, r3, #3
 80061f8:	187b      	adds	r3, r7, r1
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	18d3      	adds	r3, r2, r3
 80061fe:	4a4f      	ldr	r2, [pc, #316]	; (800633c <USB_EPStartXfer+0xaac>)
 8006200:	4694      	mov	ip, r2
 8006202:	4463      	add	r3, ip
 8006204:	2180      	movs	r1, #128	; 0x80
 8006206:	187a      	adds	r2, r7, r1
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	1d7b      	adds	r3, r7, #5
 800620c:	33ff      	adds	r3, #255	; 0xff
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	b29a      	uxth	r2, r3
 8006212:	187b      	adds	r3, r7, r1
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006218:	2076      	movs	r0, #118	; 0x76
 800621a:	183b      	adds	r3, r7, r0
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	8912      	ldrh	r2, [r2, #8]
 8006220:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6959      	ldr	r1, [r3, #20]
 8006226:	1d7b      	adds	r3, r7, #5
 8006228:	33ff      	adds	r3, #255	; 0xff
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	b29c      	uxth	r4, r3
 800622e:	183b      	adds	r3, r7, r0
 8006230:	881a      	ldrh	r2, [r3, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	0023      	movs	r3, r4
 8006236:	f000 fd1f 	bl	8006c78 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	18d3      	adds	r3, r2, r3
 8006244:	881b      	ldrh	r3, [r3, #0]
 8006246:	b29a      	uxth	r2, r3
 8006248:	200a      	movs	r0, #10
 800624a:	183b      	adds	r3, r7, r0
 800624c:	493c      	ldr	r1, [pc, #240]	; (8006340 <USB_EPStartXfer+0xab0>)
 800624e:	400a      	ands	r2, r1
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	183b      	adds	r3, r7, r0
 8006254:	183a      	adds	r2, r7, r0
 8006256:	8812      	ldrh	r2, [r2, #0]
 8006258:	2110      	movs	r1, #16
 800625a:	404a      	eors	r2, r1
 800625c:	801a      	strh	r2, [r3, #0]
 800625e:	183b      	adds	r3, r7, r0
 8006260:	183a      	adds	r2, r7, r0
 8006262:	8812      	ldrh	r2, [r2, #0]
 8006264:	2120      	movs	r1, #32
 8006266:	404a      	eors	r2, r1
 8006268:	801a      	strh	r2, [r3, #0]
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	18d3      	adds	r3, r2, r3
 8006274:	183a      	adds	r2, r7, r0
 8006276:	8812      	ldrh	r2, [r2, #0]
 8006278:	4932      	ldr	r1, [pc, #200]	; (8006344 <USB_EPStartXfer+0xab4>)
 800627a:	430a      	orrs	r2, r1
 800627c:	b292      	uxth	r2, r2
 800627e:	801a      	strh	r2, [r3, #0]
 8006280:	f000 fbaf 	bl	80069e2 <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	7b1b      	ldrb	r3, [r3, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d000      	beq.n	800628e <USB_EPStartXfer+0x9fe>
 800628c:	e09e      	b.n	80063cc <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	429a      	cmp	r2, r3
 8006298:	d90d      	bls.n	80062b6 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	1d7a      	adds	r2, r7, #5
 80062a0:	32ff      	adds	r2, #255	; 0xff
 80062a2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	1d7b      	adds	r3, r7, #5
 80062aa:	33ff      	adds	r3, #255	; 0xff
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	1ad2      	subs	r2, r2, r3
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	619a      	str	r2, [r3, #24]
 80062b4:	e007      	b.n	80062c6 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	1d7a      	adds	r2, r7, #5
 80062bc:	32ff      	adds	r2, #255	; 0xff
 80062be:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	2200      	movs	r2, #0
 80062c4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2190      	movs	r1, #144	; 0x90
 80062ca:	187a      	adds	r2, r7, r1
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2250      	movs	r2, #80	; 0x50
 80062d2:	5a9b      	ldrh	r3, [r3, r2]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	001a      	movs	r2, r3
 80062d8:	187b      	adds	r3, r7, r1
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	189b      	adds	r3, r3, r2
 80062de:	187a      	adds	r2, r7, r1
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	00da      	lsls	r2, r3, #3
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	18d3      	adds	r3, r2, r3
 80062ee:	4a10      	ldr	r2, [pc, #64]	; (8006330 <USB_EPStartXfer+0xaa0>)
 80062f0:	4694      	mov	ip, r2
 80062f2:	4463      	add	r3, ip
 80062f4:	218c      	movs	r1, #140	; 0x8c
 80062f6:	187a      	adds	r2, r7, r1
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	1d7b      	adds	r3, r7, #5
 80062fc:	33ff      	adds	r3, #255	; 0xff
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d121      	bne.n	8006348 <USB_EPStartXfer+0xab8>
 8006304:	187b      	adds	r3, r7, r1
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	4a09      	ldr	r2, [pc, #36]	; (8006334 <USB_EPStartXfer+0xaa4>)
 800630e:	4013      	ands	r3, r2
 8006310:	b29a      	uxth	r2, r3
 8006312:	187b      	adds	r3, r7, r1
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	801a      	strh	r2, [r3, #0]
 8006318:	187b      	adds	r3, r7, r1
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	4a05      	ldr	r2, [pc, #20]	; (8006338 <USB_EPStartXfer+0xaa8>)
 8006322:	4313      	orrs	r3, r2
 8006324:	b29a      	uxth	r2, r3
 8006326:	187b      	adds	r3, r7, r1
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	801a      	strh	r2, [r3, #0]
 800632c:	e334      	b.n	8006998 <USB_EPStartXfer+0x1108>
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	00000406 	.word	0x00000406
 8006334:	ffff83ff 	.word	0xffff83ff
 8006338:	ffff8000 	.word	0xffff8000
 800633c:	00000402 	.word	0x00000402
 8006340:	ffff8fbf 	.word	0xffff8fbf
 8006344:	ffff8080 	.word	0xffff8080
 8006348:	1d7b      	adds	r3, r7, #5
 800634a:	33ff      	adds	r3, #255	; 0xff
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2b3e      	cmp	r3, #62	; 0x3e
 8006350:	d81c      	bhi.n	800638c <USB_EPStartXfer+0xafc>
 8006352:	1d7b      	adds	r3, r7, #5
 8006354:	33ff      	adds	r3, #255	; 0xff
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	21e8      	movs	r1, #232	; 0xe8
 800635c:	187a      	adds	r2, r7, r1
 800635e:	6013      	str	r3, [r2, #0]
 8006360:	1d7b      	adds	r3, r7, #5
 8006362:	33ff      	adds	r3, #255	; 0xff
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2201      	movs	r2, #1
 8006368:	4013      	ands	r3, r2
 800636a:	d004      	beq.n	8006376 <USB_EPStartXfer+0xae6>
 800636c:	187b      	adds	r3, r7, r1
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3301      	adds	r3, #1
 8006372:	187a      	adds	r2, r7, r1
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	23e8      	movs	r3, #232	; 0xe8
 8006378:	18fb      	adds	r3, r7, r3
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	b29a      	uxth	r2, r3
 8006382:	238c      	movs	r3, #140	; 0x8c
 8006384:	18fb      	adds	r3, r7, r3
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	801a      	strh	r2, [r3, #0]
 800638a:	e305      	b.n	8006998 <USB_EPStartXfer+0x1108>
 800638c:	1d7b      	adds	r3, r7, #5
 800638e:	33ff      	adds	r3, #255	; 0xff
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	21e8      	movs	r1, #232	; 0xe8
 8006396:	187a      	adds	r2, r7, r1
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	1d7b      	adds	r3, r7, #5
 800639c:	33ff      	adds	r3, #255	; 0xff
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	221f      	movs	r2, #31
 80063a2:	4013      	ands	r3, r2
 80063a4:	d104      	bne.n	80063b0 <USB_EPStartXfer+0xb20>
 80063a6:	187b      	adds	r3, r7, r1
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	187a      	adds	r2, r7, r1
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	23e8      	movs	r3, #232	; 0xe8
 80063b2:	18fb      	adds	r3, r7, r3
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	029b      	lsls	r3, r3, #10
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	4aca      	ldr	r2, [pc, #808]	; (80066e8 <USB_EPStartXfer+0xe58>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	238c      	movs	r3, #140	; 0x8c
 80063c4:	18fb      	adds	r3, r7, r3
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	801a      	strh	r2, [r3, #0]
 80063ca:	e2e5      	b.n	8006998 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	78db      	ldrb	r3, [r3, #3]
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d000      	beq.n	80063d6 <USB_EPStartXfer+0xb46>
 80063d4:	e16f      	b.n	80066b6 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d16f      	bne.n	80064be <USB_EPStartXfer+0xc2e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	21ac      	movs	r1, #172	; 0xac
 80063e2:	187a      	adds	r2, r7, r1
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2250      	movs	r2, #80	; 0x50
 80063ea:	5a9b      	ldrh	r3, [r3, r2]
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	001a      	movs	r2, r3
 80063f0:	187b      	adds	r3, r7, r1
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	189b      	adds	r3, r3, r2
 80063f6:	187a      	adds	r2, r7, r1
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	187b      	adds	r3, r7, r1
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	18d3      	adds	r3, r2, r3
 8006406:	4ab9      	ldr	r2, [pc, #740]	; (80066ec <USB_EPStartXfer+0xe5c>)
 8006408:	4694      	mov	ip, r2
 800640a:	4463      	add	r3, ip
 800640c:	21a8      	movs	r1, #168	; 0xa8
 800640e:	187a      	adds	r2, r7, r1
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	691b      	ldr	r3, [r3, #16]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d114      	bne.n	8006444 <USB_EPStartXfer+0xbb4>
 800641a:	187b      	adds	r3, r7, r1
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	b29b      	uxth	r3, r3
 8006422:	4ab3      	ldr	r2, [pc, #716]	; (80066f0 <USB_EPStartXfer+0xe60>)
 8006424:	4013      	ands	r3, r2
 8006426:	b29a      	uxth	r2, r3
 8006428:	187b      	adds	r3, r7, r1
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	801a      	strh	r2, [r3, #0]
 800642e:	187b      	adds	r3, r7, r1
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	4aac      	ldr	r2, [pc, #688]	; (80066e8 <USB_EPStartXfer+0xe58>)
 8006438:	4313      	orrs	r3, r2
 800643a:	b29a      	uxth	r2, r3
 800643c:	187b      	adds	r3, r7, r1
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	801a      	strh	r2, [r3, #0]
 8006442:	e060      	b.n	8006506 <USB_EPStartXfer+0xc76>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	2b3e      	cmp	r3, #62	; 0x3e
 800644a:	d81a      	bhi.n	8006482 <USB_EPStartXfer+0xbf2>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	085b      	lsrs	r3, r3, #1
 8006452:	21e4      	movs	r1, #228	; 0xe4
 8006454:	187a      	adds	r2, r7, r1
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2201      	movs	r2, #1
 800645e:	4013      	ands	r3, r2
 8006460:	d004      	beq.n	800646c <USB_EPStartXfer+0xbdc>
 8006462:	187b      	adds	r3, r7, r1
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	187a      	adds	r2, r7, r1
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	23e4      	movs	r3, #228	; 0xe4
 800646e:	18fb      	adds	r3, r7, r3
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	b29b      	uxth	r3, r3
 8006474:	029b      	lsls	r3, r3, #10
 8006476:	b29a      	uxth	r2, r3
 8006478:	23a8      	movs	r3, #168	; 0xa8
 800647a:	18fb      	adds	r3, r7, r3
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	801a      	strh	r2, [r3, #0]
 8006480:	e041      	b.n	8006506 <USB_EPStartXfer+0xc76>
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	21e4      	movs	r1, #228	; 0xe4
 800648a:	187a      	adds	r2, r7, r1
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	221f      	movs	r2, #31
 8006494:	4013      	ands	r3, r2
 8006496:	d104      	bne.n	80064a2 <USB_EPStartXfer+0xc12>
 8006498:	187b      	adds	r3, r7, r1
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3b01      	subs	r3, #1
 800649e:	187a      	adds	r2, r7, r1
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	23e4      	movs	r3, #228	; 0xe4
 80064a4:	18fb      	adds	r3, r7, r3
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	029b      	lsls	r3, r3, #10
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	4a8e      	ldr	r2, [pc, #568]	; (80066e8 <USB_EPStartXfer+0xe58>)
 80064b0:	4313      	orrs	r3, r2
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	23a8      	movs	r3, #168	; 0xa8
 80064b6:	18fb      	adds	r3, r7, r3
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	801a      	strh	r2, [r3, #0]
 80064bc:	e023      	b.n	8006506 <USB_EPStartXfer+0xc76>
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	785b      	ldrb	r3, [r3, #1]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d11f      	bne.n	8006506 <USB_EPStartXfer+0xc76>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	21b4      	movs	r1, #180	; 0xb4
 80064ca:	187a      	adds	r2, r7, r1
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2250      	movs	r2, #80	; 0x50
 80064d2:	5a9b      	ldrh	r3, [r3, r2]
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	001a      	movs	r2, r3
 80064d8:	187b      	adds	r3, r7, r1
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	189b      	adds	r3, r3, r2
 80064de:	187a      	adds	r2, r7, r1
 80064e0:	6013      	str	r3, [r2, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	00da      	lsls	r2, r3, #3
 80064e8:	187b      	adds	r3, r7, r1
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	18d3      	adds	r3, r2, r3
 80064ee:	4a7f      	ldr	r2, [pc, #508]	; (80066ec <USB_EPStartXfer+0xe5c>)
 80064f0:	4694      	mov	ip, r2
 80064f2:	4463      	add	r3, ip
 80064f4:	21b0      	movs	r1, #176	; 0xb0
 80064f6:	187a      	adds	r2, r7, r1
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	b29a      	uxth	r2, r3
 8006500:	187b      	adds	r3, r7, r1
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	22a4      	movs	r2, #164	; 0xa4
 800650a:	18ba      	adds	r2, r7, r2
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	785b      	ldrb	r3, [r3, #1]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d16f      	bne.n	80065f6 <USB_EPStartXfer+0xd66>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	219c      	movs	r1, #156	; 0x9c
 800651a:	187a      	adds	r2, r7, r1
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2250      	movs	r2, #80	; 0x50
 8006522:	5a9b      	ldrh	r3, [r3, r2]
 8006524:	b29b      	uxth	r3, r3
 8006526:	001a      	movs	r2, r3
 8006528:	187b      	adds	r3, r7, r1
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	189b      	adds	r3, r3, r2
 800652e:	187a      	adds	r2, r7, r1
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	00da      	lsls	r2, r3, #3
 8006538:	187b      	adds	r3, r7, r1
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	18d3      	adds	r3, r2, r3
 800653e:	4a6d      	ldr	r2, [pc, #436]	; (80066f4 <USB_EPStartXfer+0xe64>)
 8006540:	4694      	mov	ip, r2
 8006542:	4463      	add	r3, ip
 8006544:	2198      	movs	r1, #152	; 0x98
 8006546:	187a      	adds	r2, r7, r1
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d114      	bne.n	800657c <USB_EPStartXfer+0xcec>
 8006552:	187b      	adds	r3, r7, r1
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	881b      	ldrh	r3, [r3, #0]
 8006558:	b29b      	uxth	r3, r3
 800655a:	4a65      	ldr	r2, [pc, #404]	; (80066f0 <USB_EPStartXfer+0xe60>)
 800655c:	4013      	ands	r3, r2
 800655e:	b29a      	uxth	r2, r3
 8006560:	187b      	adds	r3, r7, r1
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	801a      	strh	r2, [r3, #0]
 8006566:	187b      	adds	r3, r7, r1
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29b      	uxth	r3, r3
 800656e:	4a5e      	ldr	r2, [pc, #376]	; (80066e8 <USB_EPStartXfer+0xe58>)
 8006570:	4313      	orrs	r3, r2
 8006572:	b29a      	uxth	r2, r3
 8006574:	187b      	adds	r3, r7, r1
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	e05d      	b.n	8006638 <USB_EPStartXfer+0xda8>
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b3e      	cmp	r3, #62	; 0x3e
 8006582:	d81a      	bhi.n	80065ba <USB_EPStartXfer+0xd2a>
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	085b      	lsrs	r3, r3, #1
 800658a:	21e0      	movs	r1, #224	; 0xe0
 800658c:	187a      	adds	r2, r7, r1
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	2201      	movs	r2, #1
 8006596:	4013      	ands	r3, r2
 8006598:	d004      	beq.n	80065a4 <USB_EPStartXfer+0xd14>
 800659a:	187b      	adds	r3, r7, r1
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3301      	adds	r3, #1
 80065a0:	187a      	adds	r2, r7, r1
 80065a2:	6013      	str	r3, [r2, #0]
 80065a4:	23e0      	movs	r3, #224	; 0xe0
 80065a6:	18fb      	adds	r3, r7, r3
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	029b      	lsls	r3, r3, #10
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	2398      	movs	r3, #152	; 0x98
 80065b2:	18fb      	adds	r3, r7, r3
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	801a      	strh	r2, [r3, #0]
 80065b8:	e03e      	b.n	8006638 <USB_EPStartXfer+0xda8>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	21e0      	movs	r1, #224	; 0xe0
 80065c2:	187a      	adds	r2, r7, r1
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	221f      	movs	r2, #31
 80065cc:	4013      	ands	r3, r2
 80065ce:	d104      	bne.n	80065da <USB_EPStartXfer+0xd4a>
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3b01      	subs	r3, #1
 80065d6:	187a      	adds	r2, r7, r1
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	23e0      	movs	r3, #224	; 0xe0
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	b29b      	uxth	r3, r3
 80065e2:	029b      	lsls	r3, r3, #10
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	4a40      	ldr	r2, [pc, #256]	; (80066e8 <USB_EPStartXfer+0xe58>)
 80065e8:	4313      	orrs	r3, r2
 80065ea:	b29a      	uxth	r2, r3
 80065ec:	2398      	movs	r3, #152	; 0x98
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e020      	b.n	8006638 <USB_EPStartXfer+0xda8>
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	785b      	ldrb	r3, [r3, #1]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d11c      	bne.n	8006638 <USB_EPStartXfer+0xda8>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2250      	movs	r2, #80	; 0x50
 8006602:	5a9b      	ldrh	r3, [r3, r2]
 8006604:	b29b      	uxth	r3, r3
 8006606:	001a      	movs	r2, r3
 8006608:	21a4      	movs	r1, #164	; 0xa4
 800660a:	187b      	adds	r3, r7, r1
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	189b      	adds	r3, r3, r2
 8006610:	187a      	adds	r2, r7, r1
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	781b      	ldrb	r3, [r3, #0]
 8006618:	00da      	lsls	r2, r3, #3
 800661a:	187b      	adds	r3, r7, r1
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	18d3      	adds	r3, r2, r3
 8006620:	4a34      	ldr	r2, [pc, #208]	; (80066f4 <USB_EPStartXfer+0xe64>)
 8006622:	4694      	mov	ip, r2
 8006624:	4463      	add	r3, ip
 8006626:	21a0      	movs	r1, #160	; 0xa0
 8006628:	187a      	adds	r2, r7, r1
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	b29a      	uxth	r2, r3
 8006632:	187b      	adds	r3, r7, r1
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d100      	bne.n	8006642 <USB_EPStartXfer+0xdb2>
 8006640:	e1aa      	b.n	8006998 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	18d2      	adds	r2, r2, r3
 800664c:	2196      	movs	r1, #150	; 0x96
 800664e:	187b      	adds	r3, r7, r1
 8006650:	8812      	ldrh	r2, [r2, #0]
 8006652:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006654:	187b      	adds	r3, r7, r1
 8006656:	881a      	ldrh	r2, [r3, #0]
 8006658:	2380      	movs	r3, #128	; 0x80
 800665a:	01db      	lsls	r3, r3, #7
 800665c:	4013      	ands	r3, r2
 800665e:	d004      	beq.n	800666a <USB_EPStartXfer+0xdda>
 8006660:	187b      	adds	r3, r7, r1
 8006662:	881b      	ldrh	r3, [r3, #0]
 8006664:	2240      	movs	r2, #64	; 0x40
 8006666:	4013      	ands	r3, r2
 8006668:	d10d      	bne.n	8006686 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800666a:	2196      	movs	r1, #150	; 0x96
 800666c:	187b      	adds	r3, r7, r1
 800666e:	881a      	ldrh	r2, [r3, #0]
 8006670:	2380      	movs	r3, #128	; 0x80
 8006672:	01db      	lsls	r3, r3, #7
 8006674:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006676:	d000      	beq.n	800667a <USB_EPStartXfer+0xdea>
 8006678:	e18e      	b.n	8006998 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800667a:	187b      	adds	r3, r7, r1
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	2240      	movs	r2, #64	; 0x40
 8006680:	4013      	ands	r3, r2
 8006682:	d000      	beq.n	8006686 <USB_EPStartXfer+0xdf6>
 8006684:	e188      	b.n	8006998 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	18d3      	adds	r3, r2, r3
 8006690:	881b      	ldrh	r3, [r3, #0]
 8006692:	b29a      	uxth	r2, r3
 8006694:	2094      	movs	r0, #148	; 0x94
 8006696:	183b      	adds	r3, r7, r0
 8006698:	4917      	ldr	r1, [pc, #92]	; (80066f8 <USB_EPStartXfer+0xe68>)
 800669a:	400a      	ands	r2, r1
 800669c:	801a      	strh	r2, [r3, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	18d3      	adds	r3, r2, r3
 80066a8:	183a      	adds	r2, r7, r0
 80066aa:	8812      	ldrh	r2, [r2, #0]
 80066ac:	4913      	ldr	r1, [pc, #76]	; (80066fc <USB_EPStartXfer+0xe6c>)
 80066ae:	430a      	orrs	r2, r1
 80066b0:	b292      	uxth	r2, r2
 80066b2:	801a      	strh	r2, [r3, #0]
 80066b4:	e170      	b.n	8006998 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	78db      	ldrb	r3, [r3, #3]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d000      	beq.n	80066c0 <USB_EPStartXfer+0xe30>
 80066be:	e169      	b.n	8006994 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d919      	bls.n	8006700 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	1d7a      	adds	r2, r7, #5
 80066d2:	32ff      	adds	r2, #255	; 0xff
 80066d4:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	1d7b      	adds	r3, r7, #5
 80066dc:	33ff      	adds	r3, #255	; 0xff
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	619a      	str	r2, [r3, #24]
 80066e6:	e013      	b.n	8006710 <USB_EPStartXfer+0xe80>
 80066e8:	ffff8000 	.word	0xffff8000
 80066ec:	00000402 	.word	0x00000402
 80066f0:	ffff83ff 	.word	0xffff83ff
 80066f4:	00000406 	.word	0x00000406
 80066f8:	ffff8f8f 	.word	0xffff8f8f
 80066fc:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	1d7a      	adds	r2, r7, #5
 8006706:	32ff      	adds	r2, #255	; 0xff
 8006708:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2200      	movs	r2, #0
 800670e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	785b      	ldrb	r3, [r3, #1]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d000      	beq.n	800671a <USB_EPStartXfer+0xe8a>
 8006718:	e075      	b.n	8006806 <USB_EPStartXfer+0xf76>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	21cc      	movs	r1, #204	; 0xcc
 800671e:	187a      	adds	r2, r7, r1
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2250      	movs	r2, #80	; 0x50
 8006726:	5a9b      	ldrh	r3, [r3, r2]
 8006728:	b29b      	uxth	r3, r3
 800672a:	001a      	movs	r2, r3
 800672c:	187b      	adds	r3, r7, r1
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	189b      	adds	r3, r3, r2
 8006732:	187a      	adds	r2, r7, r1
 8006734:	6013      	str	r3, [r2, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	00da      	lsls	r2, r3, #3
 800673c:	187b      	adds	r3, r7, r1
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	18d3      	adds	r3, r2, r3
 8006742:	4aaa      	ldr	r2, [pc, #680]	; (80069ec <USB_EPStartXfer+0x115c>)
 8006744:	4694      	mov	ip, r2
 8006746:	4463      	add	r3, ip
 8006748:	21c8      	movs	r1, #200	; 0xc8
 800674a:	187a      	adds	r2, r7, r1
 800674c:	6013      	str	r3, [r2, #0]
 800674e:	1d7b      	adds	r3, r7, #5
 8006750:	33ff      	adds	r3, #255	; 0xff
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d114      	bne.n	8006782 <USB_EPStartXfer+0xef2>
 8006758:	187b      	adds	r3, r7, r1
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	b29b      	uxth	r3, r3
 8006760:	4aa3      	ldr	r2, [pc, #652]	; (80069f0 <USB_EPStartXfer+0x1160>)
 8006762:	4013      	ands	r3, r2
 8006764:	b29a      	uxth	r2, r3
 8006766:	187b      	adds	r3, r7, r1
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	801a      	strh	r2, [r3, #0]
 800676c:	187b      	adds	r3, r7, r1
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	4a9f      	ldr	r2, [pc, #636]	; (80069f4 <USB_EPStartXfer+0x1164>)
 8006776:	4313      	orrs	r3, r2
 8006778:	b29a      	uxth	r2, r3
 800677a:	187b      	adds	r3, r7, r1
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e066      	b.n	8006850 <USB_EPStartXfer+0xfc0>
 8006782:	1d7b      	adds	r3, r7, #5
 8006784:	33ff      	adds	r3, #255	; 0xff
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b3e      	cmp	r3, #62	; 0x3e
 800678a:	d81c      	bhi.n	80067c6 <USB_EPStartXfer+0xf36>
 800678c:	1d7b      	adds	r3, r7, #5
 800678e:	33ff      	adds	r3, #255	; 0xff
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	085b      	lsrs	r3, r3, #1
 8006794:	21dc      	movs	r1, #220	; 0xdc
 8006796:	187a      	adds	r2, r7, r1
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	1d7b      	adds	r3, r7, #5
 800679c:	33ff      	adds	r3, #255	; 0xff
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2201      	movs	r2, #1
 80067a2:	4013      	ands	r3, r2
 80067a4:	d004      	beq.n	80067b0 <USB_EPStartXfer+0xf20>
 80067a6:	187b      	adds	r3, r7, r1
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	3301      	adds	r3, #1
 80067ac:	187a      	adds	r2, r7, r1
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	23dc      	movs	r3, #220	; 0xdc
 80067b2:	18fb      	adds	r3, r7, r3
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	029b      	lsls	r3, r3, #10
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	23c8      	movs	r3, #200	; 0xc8
 80067be:	18fb      	adds	r3, r7, r3
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e044      	b.n	8006850 <USB_EPStartXfer+0xfc0>
 80067c6:	1d7b      	adds	r3, r7, #5
 80067c8:	33ff      	adds	r3, #255	; 0xff
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	095b      	lsrs	r3, r3, #5
 80067ce:	21dc      	movs	r1, #220	; 0xdc
 80067d0:	187a      	adds	r2, r7, r1
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	1d7b      	adds	r3, r7, #5
 80067d6:	33ff      	adds	r3, #255	; 0xff
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	221f      	movs	r2, #31
 80067dc:	4013      	ands	r3, r2
 80067de:	d104      	bne.n	80067ea <USB_EPStartXfer+0xf5a>
 80067e0:	187b      	adds	r3, r7, r1
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	187a      	adds	r2, r7, r1
 80067e8:	6013      	str	r3, [r2, #0]
 80067ea:	23dc      	movs	r3, #220	; 0xdc
 80067ec:	18fb      	adds	r3, r7, r3
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	029b      	lsls	r3, r3, #10
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	4a7f      	ldr	r2, [pc, #508]	; (80069f4 <USB_EPStartXfer+0x1164>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	23c8      	movs	r3, #200	; 0xc8
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	801a      	strh	r2, [r3, #0]
 8006804:	e024      	b.n	8006850 <USB_EPStartXfer+0xfc0>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	2b01      	cmp	r3, #1
 800680c:	d120      	bne.n	8006850 <USB_EPStartXfer+0xfc0>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	21d4      	movs	r1, #212	; 0xd4
 8006812:	187a      	adds	r2, r7, r1
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2250      	movs	r2, #80	; 0x50
 800681a:	5a9b      	ldrh	r3, [r3, r2]
 800681c:	b29b      	uxth	r3, r3
 800681e:	001a      	movs	r2, r3
 8006820:	187b      	adds	r3, r7, r1
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	189b      	adds	r3, r3, r2
 8006826:	187a      	adds	r2, r7, r1
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	00da      	lsls	r2, r3, #3
 8006830:	187b      	adds	r3, r7, r1
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	18d3      	adds	r3, r2, r3
 8006836:	4a6d      	ldr	r2, [pc, #436]	; (80069ec <USB_EPStartXfer+0x115c>)
 8006838:	4694      	mov	ip, r2
 800683a:	4463      	add	r3, ip
 800683c:	21d0      	movs	r1, #208	; 0xd0
 800683e:	187a      	adds	r2, r7, r1
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	1d7b      	adds	r3, r7, #5
 8006844:	33ff      	adds	r3, #255	; 0xff
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	b29a      	uxth	r2, r3
 800684a:	187b      	adds	r3, r7, r1
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	801a      	strh	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	22c4      	movs	r2, #196	; 0xc4
 8006854:	18ba      	adds	r2, r7, r2
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	785b      	ldrb	r3, [r3, #1]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d000      	beq.n	8006862 <USB_EPStartXfer+0xfd2>
 8006860:	e075      	b.n	800694e <USB_EPStartXfer+0x10be>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	21bc      	movs	r1, #188	; 0xbc
 8006866:	187a      	adds	r2, r7, r1
 8006868:	6013      	str	r3, [r2, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2250      	movs	r2, #80	; 0x50
 800686e:	5a9b      	ldrh	r3, [r3, r2]
 8006870:	b29b      	uxth	r3, r3
 8006872:	001a      	movs	r2, r3
 8006874:	187b      	adds	r3, r7, r1
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	189b      	adds	r3, r3, r2
 800687a:	187a      	adds	r2, r7, r1
 800687c:	6013      	str	r3, [r2, #0]
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	00da      	lsls	r2, r3, #3
 8006884:	187b      	adds	r3, r7, r1
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	18d3      	adds	r3, r2, r3
 800688a:	4a5b      	ldr	r2, [pc, #364]	; (80069f8 <USB_EPStartXfer+0x1168>)
 800688c:	4694      	mov	ip, r2
 800688e:	4463      	add	r3, ip
 8006890:	21b8      	movs	r1, #184	; 0xb8
 8006892:	187a      	adds	r2, r7, r1
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	1d7b      	adds	r3, r7, #5
 8006898:	33ff      	adds	r3, #255	; 0xff
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d114      	bne.n	80068ca <USB_EPStartXfer+0x103a>
 80068a0:	187b      	adds	r3, r7, r1
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	881b      	ldrh	r3, [r3, #0]
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	4a51      	ldr	r2, [pc, #324]	; (80069f0 <USB_EPStartXfer+0x1160>)
 80068aa:	4013      	ands	r3, r2
 80068ac:	b29a      	uxth	r2, r3
 80068ae:	187b      	adds	r3, r7, r1
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	801a      	strh	r2, [r3, #0]
 80068b4:	187b      	adds	r3, r7, r1
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4a4d      	ldr	r2, [pc, #308]	; (80069f4 <USB_EPStartXfer+0x1164>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	187b      	adds	r3, r7, r1
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	801a      	strh	r2, [r3, #0]
 80068c8:	e066      	b.n	8006998 <USB_EPStartXfer+0x1108>
 80068ca:	1d7b      	adds	r3, r7, #5
 80068cc:	33ff      	adds	r3, #255	; 0xff
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b3e      	cmp	r3, #62	; 0x3e
 80068d2:	d81c      	bhi.n	800690e <USB_EPStartXfer+0x107e>
 80068d4:	1d7b      	adds	r3, r7, #5
 80068d6:	33ff      	adds	r3, #255	; 0xff
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	085b      	lsrs	r3, r3, #1
 80068dc:	21d8      	movs	r1, #216	; 0xd8
 80068de:	187a      	adds	r2, r7, r1
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	1d7b      	adds	r3, r7, #5
 80068e4:	33ff      	adds	r3, #255	; 0xff
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	2201      	movs	r2, #1
 80068ea:	4013      	ands	r3, r2
 80068ec:	d004      	beq.n	80068f8 <USB_EPStartXfer+0x1068>
 80068ee:	187b      	adds	r3, r7, r1
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3301      	adds	r3, #1
 80068f4:	187a      	adds	r2, r7, r1
 80068f6:	6013      	str	r3, [r2, #0]
 80068f8:	23d8      	movs	r3, #216	; 0xd8
 80068fa:	18fb      	adds	r3, r7, r3
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	b29b      	uxth	r3, r3
 8006900:	029b      	lsls	r3, r3, #10
 8006902:	b29a      	uxth	r2, r3
 8006904:	23b8      	movs	r3, #184	; 0xb8
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	801a      	strh	r2, [r3, #0]
 800690c:	e044      	b.n	8006998 <USB_EPStartXfer+0x1108>
 800690e:	1d7b      	adds	r3, r7, #5
 8006910:	33ff      	adds	r3, #255	; 0xff
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	21d8      	movs	r1, #216	; 0xd8
 8006918:	187a      	adds	r2, r7, r1
 800691a:	6013      	str	r3, [r2, #0]
 800691c:	1d7b      	adds	r3, r7, #5
 800691e:	33ff      	adds	r3, #255	; 0xff
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	221f      	movs	r2, #31
 8006924:	4013      	ands	r3, r2
 8006926:	d104      	bne.n	8006932 <USB_EPStartXfer+0x10a2>
 8006928:	187b      	adds	r3, r7, r1
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	3b01      	subs	r3, #1
 800692e:	187a      	adds	r2, r7, r1
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	23d8      	movs	r3, #216	; 0xd8
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	029b      	lsls	r3, r3, #10
 800693c:	b29b      	uxth	r3, r3
 800693e:	4a2d      	ldr	r2, [pc, #180]	; (80069f4 <USB_EPStartXfer+0x1164>)
 8006940:	4313      	orrs	r3, r2
 8006942:	b29a      	uxth	r2, r3
 8006944:	23b8      	movs	r3, #184	; 0xb8
 8006946:	18fb      	adds	r3, r7, r3
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	801a      	strh	r2, [r3, #0]
 800694c:	e024      	b.n	8006998 <USB_EPStartXfer+0x1108>
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	785b      	ldrb	r3, [r3, #1]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d120      	bne.n	8006998 <USB_EPStartXfer+0x1108>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2250      	movs	r2, #80	; 0x50
 800695a:	5a9b      	ldrh	r3, [r3, r2]
 800695c:	b29b      	uxth	r3, r3
 800695e:	001a      	movs	r2, r3
 8006960:	21c4      	movs	r1, #196	; 0xc4
 8006962:	187b      	adds	r3, r7, r1
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	189b      	adds	r3, r3, r2
 8006968:	187a      	adds	r2, r7, r1
 800696a:	6013      	str	r3, [r2, #0]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	00da      	lsls	r2, r3, #3
 8006972:	187b      	adds	r3, r7, r1
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	18d3      	adds	r3, r2, r3
 8006978:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <USB_EPStartXfer+0x1168>)
 800697a:	4694      	mov	ip, r2
 800697c:	4463      	add	r3, ip
 800697e:	21c0      	movs	r1, #192	; 0xc0
 8006980:	187a      	adds	r2, r7, r1
 8006982:	6013      	str	r3, [r2, #0]
 8006984:	1d7b      	adds	r3, r7, #5
 8006986:	33ff      	adds	r3, #255	; 0xff
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	b29a      	uxth	r2, r3
 800698c:	187b      	adds	r3, r7, r1
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e001      	b.n	8006998 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e025      	b.n	80069e4 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	18d3      	adds	r3, r2, r3
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	208a      	movs	r0, #138	; 0x8a
 80069a8:	183b      	adds	r3, r7, r0
 80069aa:	4914      	ldr	r1, [pc, #80]	; (80069fc <USB_EPStartXfer+0x116c>)
 80069ac:	400a      	ands	r2, r1
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	183b      	adds	r3, r7, r0
 80069b2:	183a      	adds	r2, r7, r0
 80069b4:	8812      	ldrh	r2, [r2, #0]
 80069b6:	2180      	movs	r1, #128	; 0x80
 80069b8:	0149      	lsls	r1, r1, #5
 80069ba:	404a      	eors	r2, r1
 80069bc:	801a      	strh	r2, [r3, #0]
 80069be:	183b      	adds	r3, r7, r0
 80069c0:	183a      	adds	r2, r7, r0
 80069c2:	8812      	ldrh	r2, [r2, #0]
 80069c4:	2180      	movs	r1, #128	; 0x80
 80069c6:	0189      	lsls	r1, r1, #6
 80069c8:	404a      	eors	r2, r1
 80069ca:	801a      	strh	r2, [r3, #0]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	183a      	adds	r2, r7, r0
 80069d8:	8812      	ldrh	r2, [r2, #0]
 80069da:	4909      	ldr	r1, [pc, #36]	; (8006a00 <USB_EPStartXfer+0x1170>)
 80069dc:	430a      	orrs	r2, r1
 80069de:	b292      	uxth	r2, r2
 80069e0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	0018      	movs	r0, r3
 80069e6:	46bd      	mov	sp, r7
 80069e8:	b043      	add	sp, #268	; 0x10c
 80069ea:	bd90      	pop	{r4, r7, pc}
 80069ec:	00000402 	.word	0x00000402
 80069f0:	ffff83ff 	.word	0xffff83ff
 80069f4:	ffff8000 	.word	0xffff8000
 80069f8:	00000406 	.word	0x00000406
 80069fc:	ffffbf8f 	.word	0xffffbf8f
 8006a00:	ffff8080 	.word	0xffff8080

08006a04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	785b      	ldrb	r3, [r3, #1]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d01d      	beq.n	8006a52 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	18d3      	adds	r3, r2, r3
 8006a20:	881b      	ldrh	r3, [r3, #0]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	200c      	movs	r0, #12
 8006a26:	183b      	adds	r3, r7, r0
 8006a28:	491b      	ldr	r1, [pc, #108]	; (8006a98 <USB_EPSetStall+0x94>)
 8006a2a:	400a      	ands	r2, r1
 8006a2c:	801a      	strh	r2, [r3, #0]
 8006a2e:	183b      	adds	r3, r7, r0
 8006a30:	183a      	adds	r2, r7, r0
 8006a32:	8812      	ldrh	r2, [r2, #0]
 8006a34:	2110      	movs	r1, #16
 8006a36:	404a      	eors	r2, r1
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	18d3      	adds	r3, r2, r3
 8006a44:	183a      	adds	r2, r7, r0
 8006a46:	8812      	ldrh	r2, [r2, #0]
 8006a48:	4914      	ldr	r1, [pc, #80]	; (8006a9c <USB_EPSetStall+0x98>)
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	b292      	uxth	r2, r2
 8006a4e:	801a      	strh	r2, [r3, #0]
 8006a50:	e01d      	b.n	8006a8e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	18d3      	adds	r3, r2, r3
 8006a5c:	881b      	ldrh	r3, [r3, #0]
 8006a5e:	b29a      	uxth	r2, r3
 8006a60:	200e      	movs	r0, #14
 8006a62:	183b      	adds	r3, r7, r0
 8006a64:	490e      	ldr	r1, [pc, #56]	; (8006aa0 <USB_EPSetStall+0x9c>)
 8006a66:	400a      	ands	r2, r1
 8006a68:	801a      	strh	r2, [r3, #0]
 8006a6a:	183b      	adds	r3, r7, r0
 8006a6c:	183a      	adds	r2, r7, r0
 8006a6e:	8812      	ldrh	r2, [r2, #0]
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	0149      	lsls	r1, r1, #5
 8006a74:	404a      	eors	r2, r1
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	18d3      	adds	r3, r2, r3
 8006a82:	183a      	adds	r2, r7, r0
 8006a84:	8812      	ldrh	r2, [r2, #0]
 8006a86:	4905      	ldr	r1, [pc, #20]	; (8006a9c <USB_EPSetStall+0x98>)
 8006a88:	430a      	orrs	r2, r1
 8006a8a:	b292      	uxth	r2, r2
 8006a8c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b004      	add	sp, #16
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	ffff8fbf 	.word	0xffff8fbf
 8006a9c:	ffff8080 	.word	0xffff8080
 8006aa0:	ffffbf8f 	.word	0xffffbf8f

08006aa4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	7b1b      	ldrb	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d000      	beq.n	8006ab8 <USB_EPClearStall+0x14>
 8006ab6:	e095      	b.n	8006be4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d046      	beq.n	8006b4e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	18d2      	adds	r2, r2, r3
 8006aca:	2110      	movs	r1, #16
 8006acc:	187b      	adds	r3, r7, r1
 8006ace:	8812      	ldrh	r2, [r2, #0]
 8006ad0:	801a      	strh	r2, [r3, #0]
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2240      	movs	r2, #64	; 0x40
 8006ad8:	4013      	ands	r3, r2
 8006ada:	d016      	beq.n	8006b0a <USB_EPClearStall+0x66>
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	18d3      	adds	r3, r2, r3
 8006ae6:	881b      	ldrh	r3, [r3, #0]
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	200e      	movs	r0, #14
 8006aec:	183b      	adds	r3, r7, r0
 8006aee:	4940      	ldr	r1, [pc, #256]	; (8006bf0 <USB_EPClearStall+0x14c>)
 8006af0:	400a      	ands	r2, r1
 8006af2:	801a      	strh	r2, [r3, #0]
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	009b      	lsls	r3, r3, #2
 8006afc:	18d3      	adds	r3, r2, r3
 8006afe:	183a      	adds	r2, r7, r0
 8006b00:	8812      	ldrh	r2, [r2, #0]
 8006b02:	493c      	ldr	r1, [pc, #240]	; (8006bf4 <USB_EPClearStall+0x150>)
 8006b04:	430a      	orrs	r2, r1
 8006b06:	b292      	uxth	r2, r2
 8006b08:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	78db      	ldrb	r3, [r3, #3]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d068      	beq.n	8006be4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	18d3      	adds	r3, r2, r3
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	200c      	movs	r0, #12
 8006b22:	183b      	adds	r3, r7, r0
 8006b24:	4934      	ldr	r1, [pc, #208]	; (8006bf8 <USB_EPClearStall+0x154>)
 8006b26:	400a      	ands	r2, r1
 8006b28:	801a      	strh	r2, [r3, #0]
 8006b2a:	183b      	adds	r3, r7, r0
 8006b2c:	183a      	adds	r2, r7, r0
 8006b2e:	8812      	ldrh	r2, [r2, #0]
 8006b30:	2120      	movs	r1, #32
 8006b32:	404a      	eors	r2, r1
 8006b34:	801a      	strh	r2, [r3, #0]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	009b      	lsls	r3, r3, #2
 8006b3e:	18d3      	adds	r3, r2, r3
 8006b40:	183a      	adds	r2, r7, r0
 8006b42:	8812      	ldrh	r2, [r2, #0]
 8006b44:	492d      	ldr	r1, [pc, #180]	; (8006bfc <USB_EPClearStall+0x158>)
 8006b46:	430a      	orrs	r2, r1
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	801a      	strh	r2, [r3, #0]
 8006b4c:	e04a      	b.n	8006be4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	18d2      	adds	r2, r2, r3
 8006b58:	2116      	movs	r1, #22
 8006b5a:	187b      	adds	r3, r7, r1
 8006b5c:	8812      	ldrh	r2, [r2, #0]
 8006b5e:	801a      	strh	r2, [r3, #0]
 8006b60:	187b      	adds	r3, r7, r1
 8006b62:	881a      	ldrh	r2, [r3, #0]
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	01db      	lsls	r3, r3, #7
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d016      	beq.n	8006b9a <USB_EPClearStall+0xf6>
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	18d3      	adds	r3, r2, r3
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	2014      	movs	r0, #20
 8006b7c:	183b      	adds	r3, r7, r0
 8006b7e:	491c      	ldr	r1, [pc, #112]	; (8006bf0 <USB_EPClearStall+0x14c>)
 8006b80:	400a      	ands	r2, r1
 8006b82:	801a      	strh	r2, [r3, #0]
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	18d3      	adds	r3, r2, r3
 8006b8e:	183a      	adds	r2, r7, r0
 8006b90:	8812      	ldrh	r2, [r2, #0]
 8006b92:	491b      	ldr	r1, [pc, #108]	; (8006c00 <USB_EPClearStall+0x15c>)
 8006b94:	430a      	orrs	r2, r1
 8006b96:	b292      	uxth	r2, r2
 8006b98:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	18d3      	adds	r3, r2, r3
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	2012      	movs	r0, #18
 8006baa:	183b      	adds	r3, r7, r0
 8006bac:	4915      	ldr	r1, [pc, #84]	; (8006c04 <USB_EPClearStall+0x160>)
 8006bae:	400a      	ands	r2, r1
 8006bb0:	801a      	strh	r2, [r3, #0]
 8006bb2:	183b      	adds	r3, r7, r0
 8006bb4:	183a      	adds	r2, r7, r0
 8006bb6:	8812      	ldrh	r2, [r2, #0]
 8006bb8:	2180      	movs	r1, #128	; 0x80
 8006bba:	0149      	lsls	r1, r1, #5
 8006bbc:	404a      	eors	r2, r1
 8006bbe:	801a      	strh	r2, [r3, #0]
 8006bc0:	183b      	adds	r3, r7, r0
 8006bc2:	183a      	adds	r2, r7, r0
 8006bc4:	8812      	ldrh	r2, [r2, #0]
 8006bc6:	2180      	movs	r1, #128	; 0x80
 8006bc8:	0189      	lsls	r1, r1, #6
 8006bca:	404a      	eors	r2, r1
 8006bcc:	801a      	strh	r2, [r3, #0]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	18d3      	adds	r3, r2, r3
 8006bd8:	183a      	adds	r2, r7, r0
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	4907      	ldr	r1, [pc, #28]	; (8006bfc <USB_EPClearStall+0x158>)
 8006bde:	430a      	orrs	r2, r1
 8006be0:	b292      	uxth	r2, r2
 8006be2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	0018      	movs	r0, r3
 8006be8:	46bd      	mov	sp, r7
 8006bea:	b006      	add	sp, #24
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	ffff8f8f 	.word	0xffff8f8f
 8006bf4:	ffff80c0 	.word	0xffff80c0
 8006bf8:	ffff8fbf 	.word	0xffff8fbf
 8006bfc:	ffff8080 	.word	0xffff8080
 8006c00:	ffffc080 	.word	0xffffc080
 8006c04:	ffffbf8f 	.word	0xffffbf8f

08006c08 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	000a      	movs	r2, r1
 8006c12:	1cfb      	adds	r3, r7, #3
 8006c14:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006c16:	1cfb      	adds	r3, r7, #3
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	224c      	movs	r2, #76	; 0x4c
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	0018      	movs	r0, r3
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2258      	movs	r2, #88	; 0x58
 8006c3c:	5a9b      	ldrh	r3, [r3, r2]
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	4a05      	ldr	r2, [pc, #20]	; (8006c58 <USB_DevConnect+0x28>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	b299      	uxth	r1, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2258      	movs	r2, #88	; 0x58
 8006c4a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	0018      	movs	r0, r3
 8006c50:	46bd      	mov	sp, r7
 8006c52:	b002      	add	sp, #8
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	ffff8000 	.word	0xffff8000

08006c5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2244      	movs	r2, #68	; 0x44
 8006c68:	5a9b      	ldrh	r3, [r3, r2]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
}
 8006c70:	0018      	movs	r0, r3
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b004      	add	sp, #16
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b08c      	sub	sp, #48	; 0x30
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	0019      	movs	r1, r3
 8006c84:	1dbb      	adds	r3, r7, #6
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	1d3b      	adds	r3, r7, #4
 8006c8a:	1c0a      	adds	r2, r1, #0
 8006c8c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006c8e:	1d3b      	adds	r3, r7, #4
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	085b      	lsrs	r3, r3, #1
 8006c96:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006ca0:	1dbb      	adds	r3, r7, #6
 8006ca2:	881a      	ldrh	r2, [r3, #0]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	18d3      	adds	r3, r2, r3
 8006ca8:	2280      	movs	r2, #128	; 0x80
 8006caa:	00d2      	lsls	r2, r2, #3
 8006cac:	4694      	mov	ip, r2
 8006cae:	4463      	add	r3, ip
 8006cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cb6:	e01b      	b.n	8006cf0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	001a      	movs	r2, r3
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cec:	3b01      	subs	r3, #1
 8006cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e0      	bne.n	8006cb8 <USB_WritePMA+0x40>
  }
}
 8006cf6:	46c0      	nop			; (mov r8, r8)
 8006cf8:	46c0      	nop			; (mov r8, r8)
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	b00c      	add	sp, #48	; 0x30
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b08a      	sub	sp, #40	; 0x28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	0019      	movs	r1, r3
 8006d0c:	1dbb      	adds	r3, r7, #6
 8006d0e:	801a      	strh	r2, [r3, #0]
 8006d10:	1d3b      	adds	r3, r7, #4
 8006d12:	1c0a      	adds	r2, r1, #0
 8006d14:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006d16:	1d3b      	adds	r3, r7, #4
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	085b      	lsrs	r3, r3, #1
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d28:	1dbb      	adds	r3, r7, #6
 8006d2a:	881a      	ldrh	r2, [r3, #0]
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	18d3      	adds	r3, r2, r3
 8006d30:	2280      	movs	r2, #128	; 0x80
 8006d32:	00d2      	lsls	r2, r2, #3
 8006d34:	4694      	mov	ip, r2
 8006d36:	4463      	add	r3, ip
 8006d38:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d3e:	e018      	b.n	8006d72 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	881b      	ldrh	r3, [r3, #0]
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006d48:	6a3b      	ldr	r3, [r7, #32]
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	0a1b      	lsrs	r3, r3, #8
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e3      	bne.n	8006d40 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006d78:	1d3b      	adds	r3, r7, #4
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	4013      	ands	r3, r2
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d007      	beq.n	8006d96 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	701a      	strb	r2, [r3, #0]
  }
}
 8006d96:	46c0      	nop			; (mov r8, r8)
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	b00a      	add	sp, #40	; 0x28
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8006d9e:	b590      	push	{r4, r7, lr}
 8006da0:	b085      	sub	sp, #20
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	000a      	movs	r2, r1
 8006da8:	1cfb      	adds	r3, r7, #3
 8006daa:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8006dac:	240f      	movs	r4, #15
 8006dae:	193b      	adds	r3, r7, r4
 8006db0:	2200      	movs	r2, #0
 8006db2:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	2355      	movs	r3, #85	; 0x55
 8006db8:	2203      	movs	r2, #3
 8006dba:	2181      	movs	r1, #129	; 0x81
 8006dbc:	f001 ff35 	bl	8008c2a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	2355      	movs	r3, #85	; 0x55
 8006dca:	2203      	movs	r2, #3
 8006dcc:	2101      	movs	r1, #1
 8006dce:	f001 ff2c 	bl	8008c2a <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	23b6      	movs	r3, #182	; 0xb6
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	2101      	movs	r1, #1
 8006dda:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006ddc:	2018      	movs	r0, #24
 8006dde:	f002 f90f 	bl	8009000 <malloc>
 8006de2:	0003      	movs	r3, r0
 8006de4:	0019      	movs	r1, r3
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	23ae      	movs	r3, #174	; 0xae
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	23ae      	movs	r3, #174	; 0xae
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	58d3      	ldr	r3, [r2, r3]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 8006dfa:	193b      	adds	r3, r7, r4
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	701a      	strb	r2, [r3, #0]
 8006e00:	e013      	b.n	8006e2a <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	23ae      	movs	r3, #174	; 0xae
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	58d3      	ldr	r3, [r2, r3]
 8006e0a:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	23af      	movs	r3, #175	; 0xaf
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	58d3      	ldr	r3, [r2, r3]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	2302      	movs	r3, #2
 8006e24:	2101      	movs	r1, #1
 8006e26:	f002 f84b 	bl	8008ec0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8006e2a:	230f      	movs	r3, #15
 8006e2c:	18fb      	adds	r3, r7, r3
 8006e2e:	781b      	ldrb	r3, [r3, #0]
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b005      	add	sp, #20
 8006e36:	bd90      	pop	{r4, r7, pc}

08006e38 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	000a      	movs	r2, r1
 8006e42:	1cfb      	adds	r3, r7, #3
 8006e44:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2181      	movs	r1, #129	; 0x81
 8006e4a:	0018      	movs	r0, r3
 8006e4c:	f001 ff24 	bl	8008c98 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	0018      	movs	r0, r3
 8006e5c:	f001 ff1c 	bl	8008c98 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	23b6      	movs	r3, #182	; 0xb6
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	2100      	movs	r1, #0
 8006e68:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	23ae      	movs	r3, #174	; 0xae
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	58d3      	ldr	r3, [r2, r3]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d011      	beq.n	8006e9a <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	23af      	movs	r3, #175	; 0xaf
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	58d3      	ldr	r3, [r2, r3]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	23ae      	movs	r3, #174	; 0xae
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	58d3      	ldr	r3, [r2, r3]
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f002 f8c2 	bl	8009014 <free>
    pdev->pClassData = NULL;
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	23ae      	movs	r3, #174	; 0xae
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	2100      	movs	r1, #0
 8006e98:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b088      	sub	sp, #32
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	23ae      	movs	r3, #174	; 0xae
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	58d3      	ldr	r3, [r2, r3]
 8006eb6:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006eb8:	231e      	movs	r3, #30
 8006eba:	18fb      	adds	r3, r7, r3
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006ec4:	230e      	movs	r3, #14
 8006ec6:	18fb      	adds	r3, r7, r3
 8006ec8:	2200      	movs	r2, #0
 8006eca:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8006ecc:	2317      	movs	r3, #23
 8006ece:	18fb      	adds	r3, r7, r3
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	001a      	movs	r2, r3
 8006eda:	2360      	movs	r3, #96	; 0x60
 8006edc:	4013      	ands	r3, r2
 8006ede:	d043      	beq.n	8006f68 <USBD_CUSTOM_HID_Setup+0xc4>
 8006ee0:	2b20      	cmp	r3, #32
 8006ee2:	d000      	beq.n	8006ee6 <USBD_CUSTOM_HID_Setup+0x42>
 8006ee4:	e0d7      	b.n	8007096 <USBD_CUSTOM_HID_Setup+0x1f2>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b0b      	cmp	r3, #11
 8006eec:	d830      	bhi.n	8006f50 <USBD_CUSTOM_HID_Setup+0xac>
 8006eee:	009a      	lsls	r2, r3, #2
 8006ef0:	4b72      	ldr	r3, [pc, #456]	; (80070bc <USBD_CUSTOM_HID_Setup+0x218>)
 8006ef2:	18d3      	adds	r3, r2, r3
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	885b      	ldrh	r3, [r3, #2]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	001a      	movs	r2, r3
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	605a      	str	r2, [r3, #4]
          break;
 8006f04:	e02f      	b.n	8006f66 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1d19      	adds	r1, r3, #4
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f001 fb1e 	bl	8008550 <USBD_CtlSendData>
          break;
 8006f14:	e027      	b.n	8006f66 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	885b      	ldrh	r3, [r3, #2]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	001a      	movs	r2, r3
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	609a      	str	r2, [r3, #8]
          break;
 8006f26:	e01e      	b.n	8006f66 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	3308      	adds	r3, #8
 8006f2c:	0019      	movs	r1, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	0018      	movs	r0, r3
 8006f34:	f001 fb0c 	bl	8008550 <USBD_CtlSendData>
          break;
 8006f38:	e015      	b.n	8006f66 <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006f40:	6939      	ldr	r1, [r7, #16]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	88da      	ldrh	r2, [r3, #6]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f001 fb34 	bl	80085b6 <USBD_CtlPrepareRx>
          break;
 8006f4e:	e00a      	b.n	8006f66 <USBD_CUSTOM_HID_Setup+0xc2>

        default:
          USBD_CtlError(pdev, req);
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0011      	movs	r1, r2
 8006f56:	0018      	movs	r0, r3
 8006f58:	f001 fa7c 	bl	8008454 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f5c:	2317      	movs	r3, #23
 8006f5e:	18fb      	adds	r3, r7, r3
 8006f60:	2202      	movs	r2, #2
 8006f62:	701a      	strb	r2, [r3, #0]
          break;
 8006f64:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006f66:	e0a1      	b.n	80070ac <USBD_CUSTOM_HID_Setup+0x208>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b0b      	cmp	r3, #11
 8006f6e:	d100      	bne.n	8006f72 <USBD_CUSTOM_HID_Setup+0xce>
 8006f70:	e06d      	b.n	800704e <USBD_CUSTOM_HID_Setup+0x1aa>
 8006f72:	dd00      	ble.n	8006f76 <USBD_CUSTOM_HID_Setup+0xd2>
 8006f74:	e083      	b.n	800707e <USBD_CUSTOM_HID_Setup+0x1da>
 8006f76:	2b0a      	cmp	r3, #10
 8006f78:	d04f      	beq.n	800701a <USBD_CUSTOM_HID_Setup+0x176>
 8006f7a:	dd00      	ble.n	8006f7e <USBD_CUSTOM_HID_Setup+0xda>
 8006f7c:	e07f      	b.n	800707e <USBD_CUSTOM_HID_Setup+0x1da>
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <USBD_CUSTOM_HID_Setup+0xe4>
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d019      	beq.n	8006fba <USBD_CUSTOM_HID_Setup+0x116>
 8006f86:	e07a      	b.n	800707e <USBD_CUSTOM_HID_Setup+0x1da>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	23a7      	movs	r3, #167	; 0xa7
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	5cd3      	ldrb	r3, [r2, r3]
 8006f90:	2b03      	cmp	r3, #3
 8006f92:	d107      	bne.n	8006fa4 <USBD_CUSTOM_HID_Setup+0x100>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006f94:	230e      	movs	r3, #14
 8006f96:	18f9      	adds	r1, r7, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f001 fad7 	bl	8008550 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fa2:	e077      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	0011      	movs	r1, r2
 8006faa:	0018      	movs	r0, r3
 8006fac:	f001 fa52 	bl	8008454 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fb0:	2317      	movs	r3, #23
 8006fb2:	18fb      	adds	r3, r7, r3
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	701a      	strb	r2, [r3, #0]
          break;
 8006fb8:	e06c      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	885b      	ldrh	r3, [r3, #2]
 8006fbe:	0a1b      	lsrs	r3, r3, #8
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b22      	cmp	r3, #34	; 0x22
 8006fc4:	d10f      	bne.n	8006fe6 <USBD_CUSTOM_HID_Setup+0x142>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	88db      	ldrh	r3, [r3, #6]
 8006fca:	221e      	movs	r2, #30
 8006fcc:	18ba      	adds	r2, r7, r2
 8006fce:	b299      	uxth	r1, r3
 8006fd0:	2955      	cmp	r1, #85	; 0x55
 8006fd2:	d900      	bls.n	8006fd6 <USBD_CUSTOM_HID_Setup+0x132>
 8006fd4:	2355      	movs	r3, #85	; 0x55
 8006fd6:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	23af      	movs	r3, #175	; 0xaf
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	58d3      	ldr	r3, [r2, r3]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	e010      	b.n	8007008 <USBD_CUSTOM_HID_Setup+0x164>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	885b      	ldrh	r3, [r3, #2]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b21      	cmp	r3, #33	; 0x21
 8006ff0:	d10a      	bne.n	8007008 <USBD_CUSTOM_HID_Setup+0x164>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006ff2:	4b33      	ldr	r3, [pc, #204]	; (80070c0 <USBD_CUSTOM_HID_Setup+0x21c>)
 8006ff4:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	88db      	ldrh	r3, [r3, #6]
 8006ffa:	221e      	movs	r2, #30
 8006ffc:	18ba      	adds	r2, r7, r2
 8006ffe:	b299      	uxth	r1, r3
 8007000:	2909      	cmp	r1, #9
 8007002:	d900      	bls.n	8007006 <USBD_CUSTOM_HID_Setup+0x162>
 8007004:	2309      	movs	r3, #9
 8007006:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007008:	231e      	movs	r3, #30
 800700a:	18fb      	adds	r3, r7, r3
 800700c:	881a      	ldrh	r2, [r3, #0]
 800700e:	69b9      	ldr	r1, [r7, #24]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	0018      	movs	r0, r3
 8007014:	f001 fa9c 	bl	8008550 <USBD_CtlSendData>
          break;
 8007018:	e03c      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	23a7      	movs	r3, #167	; 0xa7
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	5cd3      	ldrb	r3, [r2, r3]
 8007022:	2b03      	cmp	r3, #3
 8007024:	d108      	bne.n	8007038 <USBD_CUSTOM_HID_Setup+0x194>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	330c      	adds	r3, #12
 800702a:	0019      	movs	r1, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	0018      	movs	r0, r3
 8007032:	f001 fa8d 	bl	8008550 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007036:	e02d      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007038:	683a      	ldr	r2, [r7, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0011      	movs	r1, r2
 800703e:	0018      	movs	r0, r3
 8007040:	f001 fa08 	bl	8008454 <USBD_CtlError>
            ret = USBD_FAIL;
 8007044:	2317      	movs	r3, #23
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	2202      	movs	r2, #2
 800704a:	701a      	strb	r2, [r3, #0]
          break;
 800704c:	e022      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	23a7      	movs	r3, #167	; 0xa7
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	5cd3      	ldrb	r3, [r2, r3]
 8007056:	2b03      	cmp	r3, #3
 8007058:	d106      	bne.n	8007068 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	885b      	ldrh	r3, [r3, #2]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	001a      	movs	r2, r3
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007066:	e015      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	0011      	movs	r1, r2
 800706e:	0018      	movs	r0, r3
 8007070:	f001 f9f0 	bl	8008454 <USBD_CtlError>
            ret = USBD_FAIL;
 8007074:	2317      	movs	r3, #23
 8007076:	18fb      	adds	r3, r7, r3
 8007078:	2202      	movs	r2, #2
 800707a:	701a      	strb	r2, [r3, #0]
          break;
 800707c:	e00a      	b.n	8007094 <USBD_CUSTOM_HID_Setup+0x1f0>

        default:
          USBD_CtlError(pdev, req);
 800707e:	683a      	ldr	r2, [r7, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	0011      	movs	r1, r2
 8007084:	0018      	movs	r0, r3
 8007086:	f001 f9e5 	bl	8008454 <USBD_CtlError>
          ret = USBD_FAIL;
 800708a:	2317      	movs	r3, #23
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	2202      	movs	r2, #2
 8007090:	701a      	strb	r2, [r3, #0]
          break;
 8007092:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007094:	e00a      	b.n	80070ac <USBD_CUSTOM_HID_Setup+0x208>

    default:
      USBD_CtlError(pdev, req);
 8007096:	683a      	ldr	r2, [r7, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	0011      	movs	r1, r2
 800709c:	0018      	movs	r0, r3
 800709e:	f001 f9d9 	bl	8008454 <USBD_CtlError>
      ret = USBD_FAIL;
 80070a2:	2317      	movs	r3, #23
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	2202      	movs	r2, #2
 80070a8:	701a      	strb	r2, [r3, #0]
      break;
 80070aa:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 80070ac:	2317      	movs	r3, #23
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	781b      	ldrb	r3, [r3, #0]
}
 80070b2:	0018      	movs	r0, r3
 80070b4:	46bd      	mov	sp, r7
 80070b6:	b008      	add	sp, #32
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	46c0      	nop			; (mov r8, r8)
 80070bc:	080092b4 	.word	0x080092b4
 80070c0:	200000c8 	.word	0x200000c8

080070c4 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	1dbb      	adds	r3, r7, #6
 80070d0:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	23ae      	movs	r3, #174	; 0xae
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	58d3      	ldr	r3, [r2, r3]
 80070da:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	23a7      	movs	r3, #167	; 0xa7
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	5cd3      	ldrb	r3, [r2, r3]
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d110      	bne.n	800710a <USBD_CUSTOM_HID_SendReport+0x46>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	7d1b      	ldrb	r3, [r3, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10a      	bne.n	8007106 <USBD_CUSTOM_HID_SendReport+0x42>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2201      	movs	r2, #1
 80070f4:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80070f6:	1dbb      	adds	r3, r7, #6
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	68f8      	ldr	r0, [r7, #12]
 80070fe:	2181      	movs	r1, #129	; 0x81
 8007100:	f001 fea7 	bl	8008e52 <USBD_LL_Transmit>
 8007104:	e001      	b.n	800710a <USBD_CUSTOM_HID_SendReport+0x46>
    }
    else
    {
      return USBD_BUSY;
 8007106:	2301      	movs	r3, #1
 8007108:	e000      	b.n	800710c <USBD_CUSTOM_HID_SendReport+0x48>
    }
  }
  return USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	0018      	movs	r0, r3
 800710e:	46bd      	mov	sp, r7
 8007110:	b006      	add	sp, #24
 8007112:	bd80      	pop	{r7, pc}

08007114 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2229      	movs	r2, #41	; 0x29
 8007120:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8007122:	4b02      	ldr	r3, [pc, #8]	; (800712c <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 8007124:	0018      	movs	r0, r3
 8007126:	46bd      	mov	sp, r7
 8007128:	b002      	add	sp, #8
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000044 	.word	0x20000044

08007130 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2229      	movs	r2, #41	; 0x29
 800713c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800713e:	4b02      	ldr	r3, [pc, #8]	; (8007148 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b002      	add	sp, #8
 8007146:	bd80      	pop	{r7, pc}
 8007148:	20000070 	.word	0x20000070

0800714c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2229      	movs	r2, #41	; 0x29
 8007158:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800715a:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 800715c:	0018      	movs	r0, r3
 800715e:	46bd      	mov	sp, r7
 8007160:	b002      	add	sp, #8
 8007162:	bd80      	pop	{r7, pc}
 8007164:	2000009c 	.word	0x2000009c

08007168 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	000a      	movs	r2, r1
 8007172:	1cfb      	adds	r3, r7, #3
 8007174:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	23ae      	movs	r3, #174	; 0xae
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	58d3      	ldr	r3, [r2, r3]
 800717e:	2200      	movs	r2, #0
 8007180:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	0018      	movs	r0, r3
 8007186:	46bd      	mov	sp, r7
 8007188:	b002      	add	sp, #8
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	000a      	movs	r2, r1
 8007196:	1cfb      	adds	r3, r7, #3
 8007198:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	23ae      	movs	r3, #174	; 0xae
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	58d3      	ldr	r3, [r2, r3]
 80071a2:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	23af      	movs	r3, #175	; 0xaf
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	58d3      	ldr	r3, [r2, r3]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	0010      	movs	r0, r2
 80071b2:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	2302      	movs	r3, #2
 80071ba:	2101      	movs	r1, #1
 80071bc:	f001 fe80 	bl	8008ec0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	0018      	movs	r0, r3
 80071c4:	46bd      	mov	sp, r7
 80071c6:	b004      	add	sp, #16
 80071c8:	bd80      	pop	{r7, pc}

080071ca <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	23ae      	movs	r3, #174	; 0xae
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	58d3      	ldr	r3, [r2, r3]
 80071da:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d10a      	bne.n	80071fa <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	23af      	movs	r3, #175	; 0xaf
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	58d3      	ldr	r3, [r2, r3]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	0010      	movs	r0, r2
 80071f2:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	0018      	movs	r0, r3
 80071fe:	46bd      	mov	sp, r7
 8007200:	b004      	add	sp, #16
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	220a      	movs	r2, #10
 8007210:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007212:	4b02      	ldr	r3, [pc, #8]	; (800721c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 8007214:	0018      	movs	r0, r3
 8007216:	46bd      	mov	sp, r7
 8007218:	b002      	add	sp, #8
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200000d4 	.word	0x200000d4

08007220 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800722a:	200f      	movs	r0, #15
 800722c:	183b      	adds	r3, r7, r0
 800722e:	2202      	movs	r2, #2
 8007230:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	23af      	movs	r3, #175	; 0xaf
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8007242:	183b      	adds	r3, r7, r0
 8007244:	2200      	movs	r2, #0
 8007246:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007248:	230f      	movs	r3, #15
 800724a:	18fb      	adds	r3, r7, r3
 800724c:	781b      	ldrb	r3, [r3, #0]
}
 800724e:	0018      	movs	r0, r3
 8007250:	46bd      	mov	sp, r7
 8007252:	b004      	add	sp, #16
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b084      	sub	sp, #16
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	1dfb      	adds	r3, r7, #7
 8007262:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d101      	bne.n	800726e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800726a:	2302      	movs	r3, #2
 800726c:	e020      	b.n	80072b0 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	23ad      	movs	r3, #173	; 0xad
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	58d3      	ldr	r3, [r2, r3]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d004      	beq.n	8007284 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	23ad      	movs	r3, #173	; 0xad
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	2100      	movs	r1, #0
 8007282:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	23ac      	movs	r3, #172	; 0xac
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	68b9      	ldr	r1, [r7, #8]
 8007292:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	23a7      	movs	r3, #167	; 0xa7
 8007298:	009b      	lsls	r3, r3, #2
 800729a:	2101      	movs	r1, #1
 800729c:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1dfa      	adds	r2, r7, #7
 80072a2:	7812      	ldrb	r2, [r2, #0]
 80072a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	0018      	movs	r0, r3
 80072aa:	f001 fc41 	bl	8008b30 <USBD_LL_Init>

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	0018      	movs	r0, r3
 80072b2:	46bd      	mov	sp, r7
 80072b4:	b004      	add	sp, #16
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80072c2:	200f      	movs	r0, #15
 80072c4:	183b      	adds	r3, r7, r0
 80072c6:	2200      	movs	r2, #0
 80072c8:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	23ad      	movs	r3, #173	; 0xad
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	6839      	ldr	r1, [r7, #0]
 80072d8:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80072da:	183b      	adds	r3, r7, r0
 80072dc:	2200      	movs	r2, #0
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	e003      	b.n	80072ea <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80072e2:	230f      	movs	r3, #15
 80072e4:	18fb      	adds	r3, r7, r3
 80072e6:	2202      	movs	r2, #2
 80072e8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80072ea:	230f      	movs	r3, #15
 80072ec:	18fb      	adds	r3, r7, r3
 80072ee:	781b      	ldrb	r3, [r3, #0]
}
 80072f0:	0018      	movs	r0, r3
 80072f2:	46bd      	mov	sp, r7
 80072f4:	b004      	add	sp, #16
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	0018      	movs	r0, r3
 8007304:	f001 fc6c 	bl	8008be0 <USBD_LL_Start>

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	0018      	movs	r0, r3
 800730c:	46bd      	mov	sp, r7
 800730e:	b002      	add	sp, #8
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	0018      	movs	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	b002      	add	sp, #8
 8007322:	bd80      	pop	{r7, pc}

08007324 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	000a      	movs	r2, r1
 800732e:	1cfb      	adds	r3, r7, #3
 8007330:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007332:	240f      	movs	r4, #15
 8007334:	193b      	adds	r3, r7, r4
 8007336:	2202      	movs	r2, #2
 8007338:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	23ad      	movs	r3, #173	; 0xad
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	58d3      	ldr	r3, [r2, r3]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00e      	beq.n	8007364 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	23ad      	movs	r3, #173	; 0xad
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	58d3      	ldr	r3, [r2, r3]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	1cfa      	adds	r2, r7, #3
 8007352:	7811      	ldrb	r1, [r2, #0]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	0010      	movs	r0, r2
 8007358:	4798      	blx	r3
 800735a:	1e03      	subs	r3, r0, #0
 800735c:	d102      	bne.n	8007364 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800735e:	193b      	adds	r3, r7, r4
 8007360:	2200      	movs	r2, #0
 8007362:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8007364:	230f      	movs	r3, #15
 8007366:	18fb      	adds	r3, r7, r3
 8007368:	781b      	ldrb	r3, [r3, #0]
}
 800736a:	0018      	movs	r0, r3
 800736c:	46bd      	mov	sp, r7
 800736e:	b005      	add	sp, #20
 8007370:	bd90      	pop	{r4, r7, pc}

08007372 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b082      	sub	sp, #8
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	000a      	movs	r2, r1
 800737c:	1cfb      	adds	r3, r7, #3
 800737e:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	23ad      	movs	r3, #173	; 0xad
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	58d3      	ldr	r3, [r2, r3]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	1cfa      	adds	r2, r7, #3
 800738c:	7811      	ldrb	r1, [r2, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	0010      	movs	r0, r2
 8007392:	4798      	blx	r3

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	0018      	movs	r0, r3
 8007398:	46bd      	mov	sp, r7
 800739a:	b002      	add	sp, #8
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	22aa      	movs	r2, #170	; 0xaa
 80073ae:	0092      	lsls	r2, r2, #2
 80073b0:	4694      	mov	ip, r2
 80073b2:	4463      	add	r3, ip
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	0011      	movs	r1, r2
 80073b8:	0018      	movs	r0, r3
 80073ba:	f001 f810 	bl	80083de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	23a5      	movs	r3, #165	; 0xa5
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	2101      	movs	r1, #1
 80073c6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a23      	ldr	r2, [pc, #140]	; (8007458 <USBD_LL_SetupStage+0xb8>)
 80073cc:	5a9b      	ldrh	r3, [r3, r2]
 80073ce:	0019      	movs	r1, r3
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	23a6      	movs	r3, #166	; 0xa6
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	23aa      	movs	r3, #170	; 0xaa
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	5cd3      	ldrb	r3, [r2, r3]
 80073e0:	001a      	movs	r2, r3
 80073e2:	231f      	movs	r3, #31
 80073e4:	4013      	ands	r3, r2
 80073e6:	2b02      	cmp	r3, #2
 80073e8:	d019      	beq.n	800741e <USBD_LL_SetupStage+0x7e>
 80073ea:	d822      	bhi.n	8007432 <USBD_LL_SetupStage+0x92>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <USBD_LL_SetupStage+0x56>
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d00a      	beq.n	800740a <USBD_LL_SetupStage+0x6a>
 80073f4:	e01d      	b.n	8007432 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	22aa      	movs	r2, #170	; 0xaa
 80073fa:	0092      	lsls	r2, r2, #2
 80073fc:	189a      	adds	r2, r3, r2
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	0011      	movs	r1, r2
 8007402:	0018      	movs	r0, r3
 8007404:	f000 fa10 	bl	8007828 <USBD_StdDevReq>
      break;
 8007408:	e020      	b.n	800744c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	22aa      	movs	r2, #170	; 0xaa
 800740e:	0092      	lsls	r2, r2, #2
 8007410:	189a      	adds	r2, r3, r2
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	0011      	movs	r1, r2
 8007416:	0018      	movs	r0, r3
 8007418:	f000 fa78 	bl	800790c <USBD_StdItfReq>
      break;
 800741c:	e016      	b.n	800744c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	22aa      	movs	r2, #170	; 0xaa
 8007422:	0092      	lsls	r2, r2, #2
 8007424:	189a      	adds	r2, r3, r2
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	0011      	movs	r1, r2
 800742a:	0018      	movs	r0, r3
 800742c:	f000 fac5 	bl	80079ba <USBD_StdEPReq>
      break;
 8007430:	e00c      	b.n	800744c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	23aa      	movs	r3, #170	; 0xaa
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	5cd3      	ldrb	r3, [r2, r3]
 800743a:	227f      	movs	r2, #127	; 0x7f
 800743c:	4393      	bics	r3, r2
 800743e:	b2da      	uxtb	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f001 fc52 	bl	8008cee <USBD_LL_StallEP>
      break;
 800744a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	0018      	movs	r0, r3
 8007450:	46bd      	mov	sp, r7
 8007452:	b002      	add	sp, #8
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			; (mov r8, r8)
 8007458:	000002ae 	.word	0x000002ae

0800745c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	607a      	str	r2, [r7, #4]
 8007466:	200b      	movs	r0, #11
 8007468:	183b      	adds	r3, r7, r0
 800746a:	1c0a      	adds	r2, r1, #0
 800746c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800746e:	183b      	adds	r3, r7, r0
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d154      	bne.n	8007520 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	3355      	adds	r3, #85	; 0x55
 800747a:	33ff      	adds	r3, #255	; 0xff
 800747c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	23a5      	movs	r3, #165	; 0xa5
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	58d3      	ldr	r3, [r2, r3]
 8007486:	2b03      	cmp	r3, #3
 8007488:	d139      	bne.n	80074fe <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	68da      	ldr	r2, [r3, #12]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	429a      	cmp	r2, r3
 8007494:	d919      	bls.n	80074ca <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	68da      	ldr	r2, [r3, #12]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d203      	bcs.n	80074b8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	e002      	b.n	80074be <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80074bc:	b29b      	uxth	r3, r3
 80074be:	6879      	ldr	r1, [r7, #4]
 80074c0:	68f8      	ldr	r0, [r7, #12]
 80074c2:	001a      	movs	r2, r3
 80074c4:	f001 f89b 	bl	80085fe <USBD_CtlContinueRx>
 80074c8:	e045      	b.n	8007556 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	23ad      	movs	r3, #173	; 0xad
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	58d3      	ldr	r3, [r2, r3]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	23a7      	movs	r3, #167	; 0xa7
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80074e0:	2b03      	cmp	r3, #3
 80074e2:	d107      	bne.n	80074f4 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	23ad      	movs	r3, #173	; 0xad
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	58d3      	ldr	r3, [r2, r3]
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	0010      	movs	r0, r2
 80074f2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	0018      	movs	r0, r3
 80074f8:	f001 f894 	bl	8008624 <USBD_CtlSendStatus>
 80074fc:	e02b      	b.n	8007556 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	23a5      	movs	r3, #165	; 0xa5
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	58d3      	ldr	r3, [r2, r3]
 8007506:	2b05      	cmp	r3, #5
 8007508:	d125      	bne.n	8007556 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	23a5      	movs	r3, #165	; 0xa5
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	2100      	movs	r1, #0
 8007512:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2100      	movs	r1, #0
 8007518:	0018      	movs	r0, r3
 800751a:	f001 fbe8 	bl	8008cee <USBD_LL_StallEP>
 800751e:	e01a      	b.n	8007556 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	23ad      	movs	r3, #173	; 0xad
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	58d3      	ldr	r3, [r2, r3]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d011      	beq.n	8007552 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	23a7      	movs	r3, #167	; 0xa7
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8007536:	2b03      	cmp	r3, #3
 8007538:	d10b      	bne.n	8007552 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	23ad      	movs	r3, #173	; 0xad
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	58d3      	ldr	r3, [r2, r3]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	220b      	movs	r2, #11
 8007546:	18ba      	adds	r2, r7, r2
 8007548:	7811      	ldrb	r1, [r2, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	0010      	movs	r0, r2
 800754e:	4798      	blx	r3
 8007550:	e001      	b.n	8007556 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007552:	2302      	movs	r3, #2
 8007554:	e000      	b.n	8007558 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b006      	add	sp, #24
 800755e:	bd80      	pop	{r7, pc}

08007560 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	607a      	str	r2, [r7, #4]
 800756a:	200b      	movs	r0, #11
 800756c:	183b      	adds	r3, r7, r0
 800756e:	1c0a      	adds	r2, r1, #0
 8007570:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007572:	183b      	adds	r3, r7, r0
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d000      	beq.n	800757c <USBD_LL_DataInStage+0x1c>
 800757a:	e08e      	b.n	800769a <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3314      	adds	r3, #20
 8007580:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	23a5      	movs	r3, #165	; 0xa5
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	58d3      	ldr	r3, [r2, r3]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d164      	bne.n	8007658 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	68da      	ldr	r2, [r3, #12]
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	429a      	cmp	r2, r3
 8007598:	d915      	bls.n	80075c6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	68da      	ldr	r2, [r3, #12]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	1ad2      	subs	r2, r2, r3
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	6879      	ldr	r1, [r7, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	0018      	movs	r0, r3
 80075b4:	f000 ffec 	bl	8008590 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	2300      	movs	r3, #0
 80075bc:	2200      	movs	r2, #0
 80075be:	2100      	movs	r1, #0
 80075c0:	f001 fc7e 	bl	8008ec0 <USBD_LL_PrepareReceive>
 80075c4:	e059      	b.n	800767a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	689a      	ldr	r2, [r3, #8]
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	0019      	movs	r1, r3
 80075d0:	0010      	movs	r0, r2
 80075d2:	f7f8 fe1f 	bl	8000214 <__aeabi_uidivmod>
 80075d6:	1e0b      	subs	r3, r1, #0
 80075d8:	d11f      	bne.n	800761a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d319      	bcc.n	800761a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	68f9      	ldr	r1, [r7, #12]
 80075ec:	23a6      	movs	r3, #166	; 0xa6
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d211      	bcs.n	800761a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	2100      	movs	r1, #0
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 ffc7 	bl	8008590 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	23a6      	movs	r3, #166	; 0xa6
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	2100      	movs	r1, #0
 800760a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	2300      	movs	r3, #0
 8007610:	2200      	movs	r2, #0
 8007612:	2100      	movs	r1, #0
 8007614:	f001 fc54 	bl	8008ec0 <USBD_LL_PrepareReceive>
 8007618:	e02f      	b.n	800767a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	23ad      	movs	r3, #173	; 0xad
 800761e:	009b      	lsls	r3, r3, #2
 8007620:	58d3      	ldr	r3, [r2, r3]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00d      	beq.n	8007644 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	23a7      	movs	r3, #167	; 0xa7
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007630:	2b03      	cmp	r3, #3
 8007632:	d107      	bne.n	8007644 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007634:	68fa      	ldr	r2, [r7, #12]
 8007636:	23ad      	movs	r3, #173	; 0xad
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	58d3      	ldr	r3, [r2, r3]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	0010      	movs	r0, r2
 8007642:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2180      	movs	r1, #128	; 0x80
 8007648:	0018      	movs	r0, r3
 800764a:	f001 fb50 	bl	8008cee <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	0018      	movs	r0, r3
 8007652:	f000 fffb 	bl	800864c <USBD_CtlReceiveStatus>
 8007656:	e010      	b.n	800767a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	23a5      	movs	r3, #165	; 0xa5
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	58d3      	ldr	r3, [r2, r3]
 8007660:	2b04      	cmp	r3, #4
 8007662:	d005      	beq.n	8007670 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	23a5      	movs	r3, #165	; 0xa5
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800766c:	2b00      	cmp	r3, #0
 800766e:	d104      	bne.n	800767a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2180      	movs	r1, #128	; 0x80
 8007674:	0018      	movs	r0, r3
 8007676:	f001 fb3a 	bl	8008cee <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	23a8      	movs	r3, #168	; 0xa8
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	5cd3      	ldrb	r3, [r2, r3]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d124      	bne.n	80076d0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	0018      	movs	r0, r3
 800768a:	f7ff fe42 	bl	8007312 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	23a8      	movs	r3, #168	; 0xa8
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	2100      	movs	r1, #0
 8007696:	54d1      	strb	r1, [r2, r3]
 8007698:	e01a      	b.n	80076d0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800769a:	68fa      	ldr	r2, [r7, #12]
 800769c:	23ad      	movs	r3, #173	; 0xad
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	58d3      	ldr	r3, [r2, r3]
 80076a2:	695b      	ldr	r3, [r3, #20]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d011      	beq.n	80076cc <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	23a7      	movs	r3, #167	; 0xa7
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d10b      	bne.n	80076cc <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	23ad      	movs	r3, #173	; 0xad
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	58d3      	ldr	r3, [r2, r3]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	220b      	movs	r2, #11
 80076c0:	18ba      	adds	r2, r7, r2
 80076c2:	7811      	ldrb	r1, [r2, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	0010      	movs	r0, r2
 80076c8:	4798      	blx	r3
 80076ca:	e001      	b.n	80076d0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076cc:	2302      	movs	r3, #2
 80076ce:	e000      	b.n	80076d2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b006      	add	sp, #24
 80076d8:	bd80      	pop	{r7, pc}

080076da <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	2340      	movs	r3, #64	; 0x40
 80076e6:	2200      	movs	r2, #0
 80076e8:	2100      	movs	r1, #0
 80076ea:	f001 fa9e 	bl	8008c2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	23ac      	movs	r3, #172	; 0xac
 80076f2:	005b      	lsls	r3, r3, #1
 80076f4:	2101      	movs	r1, #1
 80076f6:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	23b2      	movs	r3, #178	; 0xb2
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	2140      	movs	r1, #64	; 0x40
 8007700:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	2340      	movs	r3, #64	; 0x40
 8007706:	2200      	movs	r2, #0
 8007708:	2180      	movs	r1, #128	; 0x80
 800770a:	f001 fa8e 	bl	8008c2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2240      	movs	r2, #64	; 0x40
 8007718:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	23a7      	movs	r3, #167	; 0xa7
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	2101      	movs	r1, #1
 8007722:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	23a5      	movs	r3, #165	; 0xa5
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	2100      	movs	r1, #0
 800772c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	23a9      	movs	r3, #169	; 0xa9
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	2100      	movs	r1, #0
 800773c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	23ae      	movs	r3, #174	; 0xae
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	58d3      	ldr	r3, [r2, r3]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	23ad      	movs	r3, #173	; 0xad
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	58d3      	ldr	r3, [r2, r3]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	b2d9      	uxtb	r1, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	0018      	movs	r0, r3
 800775e:	4790      	blx	r2
  }

  return USBD_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	0018      	movs	r0, r3
 8007764:	46bd      	mov	sp, r7
 8007766:	b002      	add	sp, #8
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	000a      	movs	r2, r1
 8007774:	1cfb      	adds	r3, r7, #3
 8007776:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	1cfa      	adds	r2, r7, #3
 800777c:	7812      	ldrb	r2, [r2, #0]
 800777e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	0018      	movs	r0, r3
 8007784:	46bd      	mov	sp, r7
 8007786:	b002      	add	sp, #8
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	23a7      	movs	r3, #167	; 0xa7
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	5cd1      	ldrb	r1, [r2, r3]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a06      	ldr	r2, [pc, #24]	; (80077b8 <USBD_LL_Suspend+0x2c>)
 80077a0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	23a7      	movs	r3, #167	; 0xa7
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	2104      	movs	r1, #4
 80077aa:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	0018      	movs	r0, r3
 80077b0:	46bd      	mov	sp, r7
 80077b2:	b002      	add	sp, #8
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	46c0      	nop			; (mov r8, r8)
 80077b8:	0000029d 	.word	0x0000029d

080077bc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	23a7      	movs	r3, #167	; 0xa7
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	5cd3      	ldrb	r3, [r2, r3]
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d106      	bne.n	80077de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a05      	ldr	r2, [pc, #20]	; (80077e8 <USBD_LL_Resume+0x2c>)
 80077d4:	5c99      	ldrb	r1, [r3, r2]
 80077d6:	687a      	ldr	r2, [r7, #4]
 80077d8:	23a7      	movs	r3, #167	; 0xa7
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	0018      	movs	r0, r3
 80077e2:	46bd      	mov	sp, r7
 80077e4:	b002      	add	sp, #8
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	0000029d 	.word	0x0000029d

080077ec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	23a7      	movs	r3, #167	; 0xa7
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	5cd3      	ldrb	r3, [r2, r3]
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d10e      	bne.n	800781e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	23ad      	movs	r3, #173	; 0xad
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	58d3      	ldr	r3, [r2, r3]
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	23ad      	movs	r3, #173	; 0xad
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	58d3      	ldr	r3, [r2, r3]
 8007816:	69db      	ldr	r3, [r3, #28]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	0010      	movs	r0, r2
 800781c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	0018      	movs	r0, r3
 8007822:	46bd      	mov	sp, r7
 8007824:	b002      	add	sp, #8
 8007826:	bd80      	pop	{r7, pc}

08007828 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007832:	230f      	movs	r3, #15
 8007834:	18fb      	adds	r3, r7, r3
 8007836:	2200      	movs	r2, #0
 8007838:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	001a      	movs	r2, r3
 8007840:	2360      	movs	r3, #96	; 0x60
 8007842:	4013      	ands	r3, r2
 8007844:	2b40      	cmp	r3, #64	; 0x40
 8007846:	d004      	beq.n	8007852 <USBD_StdDevReq+0x2a>
 8007848:	d84f      	bhi.n	80078ea <USBD_StdDevReq+0xc2>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <USBD_StdDevReq+0x3e>
 800784e:	2b20      	cmp	r3, #32
 8007850:	d14b      	bne.n	80078ea <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	23ad      	movs	r3, #173	; 0xad
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	58d3      	ldr	r3, [r2, r3]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	0010      	movs	r0, r2
 8007862:	4798      	blx	r3
      break;
 8007864:	e048      	b.n	80078f8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	785b      	ldrb	r3, [r3, #1]
 800786a:	2b09      	cmp	r3, #9
 800786c:	d835      	bhi.n	80078da <USBD_StdDevReq+0xb2>
 800786e:	009a      	lsls	r2, r3, #2
 8007870:	4b25      	ldr	r3, [pc, #148]	; (8007908 <USBD_StdDevReq+0xe0>)
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0011      	movs	r1, r2
 800787e:	0018      	movs	r0, r3
 8007880:	f000 fa52 	bl	8007d28 <USBD_GetDescriptor>
          break;
 8007884:	e030      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	0011      	movs	r1, r2
 800788c:	0018      	movs	r0, r3
 800788e:	f000 fbfd 	bl	800808c <USBD_SetAddress>
          break;
 8007892:	e029      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	0011      	movs	r1, r2
 800789a:	0018      	movs	r0, r3
 800789c:	f000 fc4a 	bl	8008134 <USBD_SetConfig>
          break;
 80078a0:	e022      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	0011      	movs	r1, r2
 80078a8:	0018      	movs	r0, r3
 80078aa:	f000 fce7 	bl	800827c <USBD_GetConfig>
          break;
 80078ae:	e01b      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078b0:	683a      	ldr	r2, [r7, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	0011      	movs	r1, r2
 80078b6:	0018      	movs	r0, r3
 80078b8:	f000 fd1b 	bl	80082f2 <USBD_GetStatus>
          break;
 80078bc:	e014      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	0011      	movs	r1, r2
 80078c4:	0018      	movs	r0, r3
 80078c6:	f000 fd4e 	bl	8008366 <USBD_SetFeature>
          break;
 80078ca:	e00d      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078cc:	683a      	ldr	r2, [r7, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	0011      	movs	r1, r2
 80078d2:	0018      	movs	r0, r3
 80078d4:	f000 fd5d 	bl	8008392 <USBD_ClrFeature>
          break;
 80078d8:	e006      	b.n	80078e8 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	0011      	movs	r1, r2
 80078e0:	0018      	movs	r0, r3
 80078e2:	f000 fdb7 	bl	8008454 <USBD_CtlError>
          break;
 80078e6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80078e8:	e006      	b.n	80078f8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	0011      	movs	r1, r2
 80078f0:	0018      	movs	r0, r3
 80078f2:	f000 fdaf 	bl	8008454 <USBD_CtlError>
      break;
 80078f6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80078f8:	230f      	movs	r3, #15
 80078fa:	18fb      	adds	r3, r7, r3
 80078fc:	781b      	ldrb	r3, [r3, #0]
}
 80078fe:	0018      	movs	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	b004      	add	sp, #16
 8007904:	bd80      	pop	{r7, pc}
 8007906:	46c0      	nop			; (mov r8, r8)
 8007908:	080092e4 	.word	0x080092e4

0800790c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800790c:	b5b0      	push	{r4, r5, r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007916:	230f      	movs	r3, #15
 8007918:	18fb      	adds	r3, r7, r3
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	001a      	movs	r2, r3
 8007924:	2360      	movs	r3, #96	; 0x60
 8007926:	4013      	ands	r3, r2
 8007928:	2b40      	cmp	r3, #64	; 0x40
 800792a:	d004      	beq.n	8007936 <USBD_StdItfReq+0x2a>
 800792c:	d839      	bhi.n	80079a2 <USBD_StdItfReq+0x96>
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <USBD_StdItfReq+0x2a>
 8007932:	2b20      	cmp	r3, #32
 8007934:	d135      	bne.n	80079a2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	23a7      	movs	r3, #167	; 0xa7
 800793a:	009b      	lsls	r3, r3, #2
 800793c:	5cd3      	ldrb	r3, [r2, r3]
 800793e:	3b01      	subs	r3, #1
 8007940:	2b02      	cmp	r3, #2
 8007942:	d825      	bhi.n	8007990 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	889b      	ldrh	r3, [r3, #4]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b01      	cmp	r3, #1
 800794c:	d819      	bhi.n	8007982 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	23ad      	movs	r3, #173	; 0xad
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	58d3      	ldr	r3, [r2, r3]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	250f      	movs	r5, #15
 800795a:	197c      	adds	r4, r7, r5
 800795c:	6839      	ldr	r1, [r7, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	0010      	movs	r0, r2
 8007962:	4798      	blx	r3
 8007964:	0003      	movs	r3, r0
 8007966:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	88db      	ldrh	r3, [r3, #6]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d116      	bne.n	800799e <USBD_StdItfReq+0x92>
 8007970:	197b      	adds	r3, r7, r5
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d112      	bne.n	800799e <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	0018      	movs	r0, r3
 800797c:	f000 fe52 	bl	8008624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007980:	e00d      	b.n	800799e <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8007982:	683a      	ldr	r2, [r7, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	0011      	movs	r1, r2
 8007988:	0018      	movs	r0, r3
 800798a:	f000 fd63 	bl	8008454 <USBD_CtlError>
          break;
 800798e:	e006      	b.n	800799e <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8007990:	683a      	ldr	r2, [r7, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	0011      	movs	r1, r2
 8007996:	0018      	movs	r0, r3
 8007998:	f000 fd5c 	bl	8008454 <USBD_CtlError>
          break;
 800799c:	e000      	b.n	80079a0 <USBD_StdItfReq+0x94>
          break;
 800799e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80079a0:	e006      	b.n	80079b0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80079a2:	683a      	ldr	r2, [r7, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	0011      	movs	r1, r2
 80079a8:	0018      	movs	r0, r3
 80079aa:	f000 fd53 	bl	8008454 <USBD_CtlError>
      break;
 80079ae:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	0018      	movs	r0, r3
 80079b4:	46bd      	mov	sp, r7
 80079b6:	b004      	add	sp, #16
 80079b8:	bdb0      	pop	{r4, r5, r7, pc}

080079ba <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079ba:	b5b0      	push	{r4, r5, r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079c4:	230f      	movs	r3, #15
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	2200      	movs	r2, #0
 80079ca:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	889a      	ldrh	r2, [r3, #4]
 80079d0:	230e      	movs	r3, #14
 80079d2:	18fb      	adds	r3, r7, r3
 80079d4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	001a      	movs	r2, r3
 80079dc:	2360      	movs	r3, #96	; 0x60
 80079de:	4013      	ands	r3, r2
 80079e0:	2b40      	cmp	r3, #64	; 0x40
 80079e2:	d006      	beq.n	80079f2 <USBD_StdEPReq+0x38>
 80079e4:	d900      	bls.n	80079e8 <USBD_StdEPReq+0x2e>
 80079e6:	e190      	b.n	8007d0a <USBD_StdEPReq+0x350>
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00c      	beq.n	8007a06 <USBD_StdEPReq+0x4c>
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d000      	beq.n	80079f2 <USBD_StdEPReq+0x38>
 80079f0:	e18b      	b.n	8007d0a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	23ad      	movs	r3, #173	; 0xad
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	58d3      	ldr	r3, [r2, r3]
 80079fa:	689b      	ldr	r3, [r3, #8]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	0010      	movs	r0, r2
 8007a02:	4798      	blx	r3
      break;
 8007a04:	e188      	b.n	8007d18 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	2360      	movs	r3, #96	; 0x60
 8007a0e:	4013      	ands	r3, r2
 8007a10:	2b20      	cmp	r3, #32
 8007a12:	d10f      	bne.n	8007a34 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	23ad      	movs	r3, #173	; 0xad
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	58d3      	ldr	r3, [r2, r3]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	250f      	movs	r5, #15
 8007a20:	197c      	adds	r4, r7, r5
 8007a22:	6839      	ldr	r1, [r7, #0]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	0010      	movs	r0, r2
 8007a28:	4798      	blx	r3
 8007a2a:	0003      	movs	r3, r0
 8007a2c:	7023      	strb	r3, [r4, #0]

        return ret;
 8007a2e:	197b      	adds	r3, r7, r5
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	e174      	b.n	8007d1e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b03      	cmp	r3, #3
 8007a3a:	d007      	beq.n	8007a4c <USBD_StdEPReq+0x92>
 8007a3c:	dd00      	ble.n	8007a40 <USBD_StdEPReq+0x86>
 8007a3e:	e15c      	b.n	8007cfa <USBD_StdEPReq+0x340>
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d100      	bne.n	8007a46 <USBD_StdEPReq+0x8c>
 8007a44:	e092      	b.n	8007b6c <USBD_StdEPReq+0x1b2>
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d04b      	beq.n	8007ae2 <USBD_StdEPReq+0x128>
 8007a4a:	e156      	b.n	8007cfa <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	23a7      	movs	r3, #167	; 0xa7
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	5cd3      	ldrb	r3, [r2, r3]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	d002      	beq.n	8007a5e <USBD_StdEPReq+0xa4>
 8007a58:	2b03      	cmp	r3, #3
 8007a5a:	d01d      	beq.n	8007a98 <USBD_StdEPReq+0xde>
 8007a5c:	e039      	b.n	8007ad2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a5e:	220e      	movs	r2, #14
 8007a60:	18bb      	adds	r3, r7, r2
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d010      	beq.n	8007a8a <USBD_StdEPReq+0xd0>
 8007a68:	18bb      	adds	r3, r7, r2
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b80      	cmp	r3, #128	; 0x80
 8007a6e:	d00c      	beq.n	8007a8a <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a70:	18bb      	adds	r3, r7, r2
 8007a72:	781a      	ldrb	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	0011      	movs	r1, r2
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f001 f938 	bl	8008cee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2180      	movs	r1, #128	; 0x80
 8007a82:	0018      	movs	r0, r3
 8007a84:	f001 f933 	bl	8008cee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a88:	e02a      	b.n	8007ae0 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8007a8a:	683a      	ldr	r2, [r7, #0]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	0011      	movs	r1, r2
 8007a90:	0018      	movs	r0, r3
 8007a92:	f000 fcdf 	bl	8008454 <USBD_CtlError>
              break;
 8007a96:	e023      	b.n	8007ae0 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	885b      	ldrh	r3, [r3, #2]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d113      	bne.n	8007ac8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8007aa0:	220e      	movs	r2, #14
 8007aa2:	18bb      	adds	r3, r7, r2
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00e      	beq.n	8007ac8 <USBD_StdEPReq+0x10e>
 8007aaa:	18bb      	adds	r3, r7, r2
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	d00a      	beq.n	8007ac8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	88db      	ldrh	r3, [r3, #6]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007aba:	18bb      	adds	r3, r7, r2
 8007abc:	781a      	ldrb	r2, [r3, #0]
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	0011      	movs	r1, r2
 8007ac2:	0018      	movs	r0, r3
 8007ac4:	f001 f913 	bl	8008cee <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	0018      	movs	r0, r3
 8007acc:	f000 fdaa 	bl	8008624 <USBD_CtlSendStatus>

              break;
 8007ad0:	e006      	b.n	8007ae0 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8007ad2:	683a      	ldr	r2, [r7, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	0011      	movs	r1, r2
 8007ad8:	0018      	movs	r0, r3
 8007ada:	f000 fcbb 	bl	8008454 <USBD_CtlError>
              break;
 8007ade:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007ae0:	e112      	b.n	8007d08 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	23a7      	movs	r3, #167	; 0xa7
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	5cd3      	ldrb	r3, [r2, r3]
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d002      	beq.n	8007af4 <USBD_StdEPReq+0x13a>
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d01d      	beq.n	8007b2e <USBD_StdEPReq+0x174>
 8007af2:	e032      	b.n	8007b5a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007af4:	220e      	movs	r2, #14
 8007af6:	18bb      	adds	r3, r7, r2
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d010      	beq.n	8007b20 <USBD_StdEPReq+0x166>
 8007afe:	18bb      	adds	r3, r7, r2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b80      	cmp	r3, #128	; 0x80
 8007b04:	d00c      	beq.n	8007b20 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007b06:	18bb      	adds	r3, r7, r2
 8007b08:	781a      	ldrb	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	0011      	movs	r1, r2
 8007b0e:	0018      	movs	r0, r3
 8007b10:	f001 f8ed 	bl	8008cee <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2180      	movs	r1, #128	; 0x80
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f001 f8e8 	bl	8008cee <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b1e:	e024      	b.n	8007b6a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8007b20:	683a      	ldr	r2, [r7, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	0011      	movs	r1, r2
 8007b26:	0018      	movs	r0, r3
 8007b28:	f000 fc94 	bl	8008454 <USBD_CtlError>
              break;
 8007b2c:	e01d      	b.n	8007b6a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	885b      	ldrh	r3, [r3, #2]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d118      	bne.n	8007b68 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b36:	210e      	movs	r1, #14
 8007b38:	187b      	adds	r3, r7, r1
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	227f      	movs	r2, #127	; 0x7f
 8007b3e:	4013      	ands	r3, r2
 8007b40:	d006      	beq.n	8007b50 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b42:	187b      	adds	r3, r7, r1
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	0011      	movs	r1, r2
 8007b4a:	0018      	movs	r0, r3
 8007b4c:	f001 f8fa 	bl	8008d44 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	0018      	movs	r0, r3
 8007b54:	f000 fd66 	bl	8008624 <USBD_CtlSendStatus>
              }
              break;
 8007b58:	e006      	b.n	8007b68 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	0011      	movs	r1, r2
 8007b60:	0018      	movs	r0, r3
 8007b62:	f000 fc77 	bl	8008454 <USBD_CtlError>
              break;
 8007b66:	e000      	b.n	8007b6a <USBD_StdEPReq+0x1b0>
              break;
 8007b68:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007b6a:	e0cd      	b.n	8007d08 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	23a7      	movs	r3, #167	; 0xa7
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	5cd3      	ldrb	r3, [r2, r3]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d002      	beq.n	8007b7e <USBD_StdEPReq+0x1c4>
 8007b78:	2b03      	cmp	r3, #3
 8007b7a:	d03c      	beq.n	8007bf6 <USBD_StdEPReq+0x23c>
 8007b7c:	e0b5      	b.n	8007cea <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b7e:	220e      	movs	r2, #14
 8007b80:	18bb      	adds	r3, r7, r2
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00a      	beq.n	8007b9e <USBD_StdEPReq+0x1e4>
 8007b88:	18bb      	adds	r3, r7, r2
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d006      	beq.n	8007b9e <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8007b90:	683a      	ldr	r2, [r7, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	0011      	movs	r1, r2
 8007b96:	0018      	movs	r0, r3
 8007b98:	f000 fc5c 	bl	8008454 <USBD_CtlError>
                break;
 8007b9c:	e0ac      	b.n	8007cf8 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b9e:	220e      	movs	r2, #14
 8007ba0:	18bb      	adds	r3, r7, r2
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	b25b      	sxtb	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	da0c      	bge.n	8007bc4 <USBD_StdEPReq+0x20a>
 8007baa:	18bb      	adds	r3, r7, r2
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	227f      	movs	r2, #127	; 0x7f
 8007bb0:	401a      	ands	r2, r3
 8007bb2:	0013      	movs	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	3310      	adds	r3, #16
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	18d3      	adds	r3, r2, r3
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	e00d      	b.n	8007be0 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bc4:	230e      	movs	r3, #14
 8007bc6:	18fb      	adds	r3, r7, r3
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	227f      	movs	r2, #127	; 0x7f
 8007bcc:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bce:	0013      	movs	r3, r2
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	189b      	adds	r3, r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	3351      	adds	r3, #81	; 0x51
 8007bd8:	33ff      	adds	r3, #255	; 0xff
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	18d3      	adds	r3, r2, r3
 8007bde:	3304      	adds	r3, #4
 8007be0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007be8:	68b9      	ldr	r1, [r7, #8]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	0018      	movs	r0, r3
 8007bf0:	f000 fcae 	bl	8008550 <USBD_CtlSendData>
              break;
 8007bf4:	e080      	b.n	8007cf8 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007bf6:	220e      	movs	r2, #14
 8007bf8:	18bb      	adds	r3, r7, r2
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	b25b      	sxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da14      	bge.n	8007c2c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c02:	18bb      	adds	r3, r7, r2
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	220f      	movs	r2, #15
 8007c08:	401a      	ands	r2, r3
 8007c0a:	6879      	ldr	r1, [r7, #4]
 8007c0c:	0013      	movs	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	189b      	adds	r3, r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	18cb      	adds	r3, r1, r3
 8007c16:	3318      	adds	r3, #24
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d11e      	bne.n	8007c5c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	0011      	movs	r1, r2
 8007c24:	0018      	movs	r0, r3
 8007c26:	f000 fc15 	bl	8008454 <USBD_CtlError>
                  break;
 8007c2a:	e065      	b.n	8007cf8 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c2c:	230e      	movs	r3, #14
 8007c2e:	18fb      	adds	r3, r7, r3
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	220f      	movs	r2, #15
 8007c34:	401a      	ands	r2, r3
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	23ac      	movs	r3, #172	; 0xac
 8007c3a:	0059      	lsls	r1, r3, #1
 8007c3c:	0013      	movs	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	189b      	adds	r3, r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	18c3      	adds	r3, r0, r3
 8007c46:	185b      	adds	r3, r3, r1
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d106      	bne.n	8007c5c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	0011      	movs	r1, r2
 8007c54:	0018      	movs	r0, r3
 8007c56:	f000 fbfd 	bl	8008454 <USBD_CtlError>
                  break;
 8007c5a:	e04d      	b.n	8007cf8 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c5c:	220e      	movs	r2, #14
 8007c5e:	18bb      	adds	r3, r7, r2
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b25b      	sxtb	r3, r3
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	da0c      	bge.n	8007c82 <USBD_StdEPReq+0x2c8>
 8007c68:	18bb      	adds	r3, r7, r2
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	227f      	movs	r2, #127	; 0x7f
 8007c6e:	401a      	ands	r2, r3
 8007c70:	0013      	movs	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	189b      	adds	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	3310      	adds	r3, #16
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	18d3      	adds	r3, r2, r3
 8007c7e:	3304      	adds	r3, #4
 8007c80:	e00d      	b.n	8007c9e <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c82:	230e      	movs	r3, #14
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	227f      	movs	r2, #127	; 0x7f
 8007c8a:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c8c:	0013      	movs	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	189b      	adds	r3, r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	3351      	adds	r3, #81	; 0x51
 8007c96:	33ff      	adds	r3, #255	; 0xff
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	18d3      	adds	r3, r2, r3
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ca0:	220e      	movs	r2, #14
 8007ca2:	18bb      	adds	r3, r7, r2
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d003      	beq.n	8007cb2 <USBD_StdEPReq+0x2f8>
 8007caa:	18bb      	adds	r3, r7, r2
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	2b80      	cmp	r3, #128	; 0x80
 8007cb0:	d103      	bne.n	8007cba <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	e010      	b.n	8007cdc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007cba:	230e      	movs	r3, #14
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	781a      	ldrb	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	0011      	movs	r1, r2
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f001 f868 	bl	8008d9a <USBD_LL_IsStallEP>
 8007cca:	1e03      	subs	r3, r0, #0
 8007ccc:	d003      	beq.n	8007cd6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	e002      	b.n	8007cdc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cdc:	68b9      	ldr	r1, [r7, #8]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	f000 fc34 	bl	8008550 <USBD_CtlSendData>
              break;
 8007ce8:	e006      	b.n	8007cf8 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8007cea:	683a      	ldr	r2, [r7, #0]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	0011      	movs	r1, r2
 8007cf0:	0018      	movs	r0, r3
 8007cf2:	f000 fbaf 	bl	8008454 <USBD_CtlError>
              break;
 8007cf6:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007cf8:	e006      	b.n	8007d08 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	0011      	movs	r1, r2
 8007d00:	0018      	movs	r0, r3
 8007d02:	f000 fba7 	bl	8008454 <USBD_CtlError>
          break;
 8007d06:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007d08:	e006      	b.n	8007d18 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8007d0a:	683a      	ldr	r2, [r7, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	0011      	movs	r1, r2
 8007d10:	0018      	movs	r0, r3
 8007d12:	f000 fb9f 	bl	8008454 <USBD_CtlError>
      break;
 8007d16:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007d18:	230f      	movs	r3, #15
 8007d1a:	18fb      	adds	r3, r7, r3
 8007d1c:	781b      	ldrb	r3, [r3, #0]
}
 8007d1e:	0018      	movs	r0, r3
 8007d20:	46bd      	mov	sp, r7
 8007d22:	b004      	add	sp, #16
 8007d24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d32:	2308      	movs	r3, #8
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	2200      	movs	r2, #0
 8007d38:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d3e:	230b      	movs	r3, #11
 8007d40:	18fb      	adds	r3, r7, r3
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	885b      	ldrh	r3, [r3, #2]
 8007d4a:	0a1b      	lsrs	r3, r3, #8
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b07      	cmp	r3, #7
 8007d50:	d900      	bls.n	8007d54 <USBD_GetDescriptor+0x2c>
 8007d52:	e159      	b.n	8008008 <USBD_GetDescriptor+0x2e0>
 8007d54:	009a      	lsls	r2, r3, #2
 8007d56:	4bcb      	ldr	r3, [pc, #812]	; (8008084 <USBD_GetDescriptor+0x35c>)
 8007d58:	18d3      	adds	r3, r2, r3
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	23ac      	movs	r3, #172	; 0xac
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	58d3      	ldr	r3, [r2, r3]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	7c12      	ldrb	r2, [r2, #16]
 8007d6c:	2108      	movs	r1, #8
 8007d6e:	1879      	adds	r1, r7, r1
 8007d70:	0010      	movs	r0, r2
 8007d72:	4798      	blx	r3
 8007d74:	0003      	movs	r3, r0
 8007d76:	60fb      	str	r3, [r7, #12]
      break;
 8007d78:	e153      	b.n	8008022 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	7c1b      	ldrb	r3, [r3, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d10f      	bne.n	8007da2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	23ad      	movs	r3, #173	; 0xad
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	58d3      	ldr	r3, [r2, r3]
 8007d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d8c:	2208      	movs	r2, #8
 8007d8e:	18ba      	adds	r2, r7, r2
 8007d90:	0010      	movs	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	0003      	movs	r3, r0
 8007d96:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	2202      	movs	r2, #2
 8007d9e:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007da0:	e13f      	b.n	8008022 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	23ad      	movs	r3, #173	; 0xad
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	58d3      	ldr	r3, [r2, r3]
 8007daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dac:	2208      	movs	r2, #8
 8007dae:	18ba      	adds	r2, r7, r2
 8007db0:	0010      	movs	r0, r2
 8007db2:	4798      	blx	r3
 8007db4:	0003      	movs	r3, r0
 8007db6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	701a      	strb	r2, [r3, #0]
      break;
 8007dc0:	e12f      	b.n	8008022 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	885b      	ldrh	r3, [r3, #2]
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	2b05      	cmp	r3, #5
 8007dca:	d900      	bls.n	8007dce <USBD_GetDescriptor+0xa6>
 8007dcc:	e0d0      	b.n	8007f70 <USBD_GetDescriptor+0x248>
 8007dce:	009a      	lsls	r2, r3, #2
 8007dd0:	4bad      	ldr	r3, [pc, #692]	; (8008088 <USBD_GetDescriptor+0x360>)
 8007dd2:	18d3      	adds	r3, r2, r3
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	23ac      	movs	r3, #172	; 0xac
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	58d3      	ldr	r3, [r2, r3]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00d      	beq.n	8007e02 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	23ac      	movs	r3, #172	; 0xac
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	58d3      	ldr	r3, [r2, r3]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	2108      	movs	r1, #8
 8007df6:	1879      	adds	r1, r7, r1
 8007df8:	0010      	movs	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	0003      	movs	r3, r0
 8007dfe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e00:	e0c3      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	0011      	movs	r1, r2
 8007e08:	0018      	movs	r0, r3
 8007e0a:	f000 fb23 	bl	8008454 <USBD_CtlError>
            err++;
 8007e0e:	210b      	movs	r1, #11
 8007e10:	187b      	adds	r3, r7, r1
 8007e12:	781a      	ldrb	r2, [r3, #0]
 8007e14:	187b      	adds	r3, r7, r1
 8007e16:	3201      	adds	r2, #1
 8007e18:	701a      	strb	r2, [r3, #0]
          break;
 8007e1a:	e0b6      	b.n	8007f8a <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	23ac      	movs	r3, #172	; 0xac
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	58d3      	ldr	r3, [r2, r3]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00d      	beq.n	8007e46 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	23ac      	movs	r3, #172	; 0xac
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	58d3      	ldr	r3, [r2, r3]
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	7c12      	ldrb	r2, [r2, #16]
 8007e38:	2108      	movs	r1, #8
 8007e3a:	1879      	adds	r1, r7, r1
 8007e3c:	0010      	movs	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	0003      	movs	r3, r0
 8007e42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e44:	e0a1      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007e46:	683a      	ldr	r2, [r7, #0]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	0011      	movs	r1, r2
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	f000 fb01 	bl	8008454 <USBD_CtlError>
            err++;
 8007e52:	210b      	movs	r1, #11
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	781a      	ldrb	r2, [r3, #0]
 8007e58:	187b      	adds	r3, r7, r1
 8007e5a:	3201      	adds	r2, #1
 8007e5c:	701a      	strb	r2, [r3, #0]
          break;
 8007e5e:	e094      	b.n	8007f8a <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	23ac      	movs	r3, #172	; 0xac
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	58d3      	ldr	r3, [r2, r3]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00d      	beq.n	8007e8a <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	23ac      	movs	r3, #172	; 0xac
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	58d3      	ldr	r3, [r2, r3]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	7c12      	ldrb	r2, [r2, #16]
 8007e7c:	2108      	movs	r1, #8
 8007e7e:	1879      	adds	r1, r7, r1
 8007e80:	0010      	movs	r0, r2
 8007e82:	4798      	blx	r3
 8007e84:	0003      	movs	r3, r0
 8007e86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e88:	e07f      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	0011      	movs	r1, r2
 8007e90:	0018      	movs	r0, r3
 8007e92:	f000 fadf 	bl	8008454 <USBD_CtlError>
            err++;
 8007e96:	210b      	movs	r1, #11
 8007e98:	187b      	adds	r3, r7, r1
 8007e9a:	781a      	ldrb	r2, [r3, #0]
 8007e9c:	187b      	adds	r3, r7, r1
 8007e9e:	3201      	adds	r2, #1
 8007ea0:	701a      	strb	r2, [r3, #0]
          break;
 8007ea2:	e072      	b.n	8007f8a <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	23ac      	movs	r3, #172	; 0xac
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	58d3      	ldr	r3, [r2, r3]
 8007eac:	691b      	ldr	r3, [r3, #16]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00d      	beq.n	8007ece <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	23ac      	movs	r3, #172	; 0xac
 8007eb6:	009b      	lsls	r3, r3, #2
 8007eb8:	58d3      	ldr	r3, [r2, r3]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	2108      	movs	r1, #8
 8007ec2:	1879      	adds	r1, r7, r1
 8007ec4:	0010      	movs	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	0003      	movs	r3, r0
 8007eca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ecc:	e05d      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007ece:	683a      	ldr	r2, [r7, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	0011      	movs	r1, r2
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f000 fabd 	bl	8008454 <USBD_CtlError>
            err++;
 8007eda:	210b      	movs	r1, #11
 8007edc:	187b      	adds	r3, r7, r1
 8007ede:	781a      	ldrb	r2, [r3, #0]
 8007ee0:	187b      	adds	r3, r7, r1
 8007ee2:	3201      	adds	r2, #1
 8007ee4:	701a      	strb	r2, [r3, #0]
          break;
 8007ee6:	e050      	b.n	8007f8a <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	23ac      	movs	r3, #172	; 0xac
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	58d3      	ldr	r3, [r2, r3]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00d      	beq.n	8007f12 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	23ac      	movs	r3, #172	; 0xac
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	58d3      	ldr	r3, [r2, r3]
 8007efe:	695b      	ldr	r3, [r3, #20]
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	7c12      	ldrb	r2, [r2, #16]
 8007f04:	2108      	movs	r1, #8
 8007f06:	1879      	adds	r1, r7, r1
 8007f08:	0010      	movs	r0, r2
 8007f0a:	4798      	blx	r3
 8007f0c:	0003      	movs	r3, r0
 8007f0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f10:	e03b      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007f12:	683a      	ldr	r2, [r7, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	0011      	movs	r1, r2
 8007f18:	0018      	movs	r0, r3
 8007f1a:	f000 fa9b 	bl	8008454 <USBD_CtlError>
            err++;
 8007f1e:	210b      	movs	r1, #11
 8007f20:	187b      	adds	r3, r7, r1
 8007f22:	781a      	ldrb	r2, [r3, #0]
 8007f24:	187b      	adds	r3, r7, r1
 8007f26:	3201      	adds	r2, #1
 8007f28:	701a      	strb	r2, [r3, #0]
          break;
 8007f2a:	e02e      	b.n	8007f8a <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	23ac      	movs	r3, #172	; 0xac
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	58d3      	ldr	r3, [r2, r3]
 8007f34:	699b      	ldr	r3, [r3, #24]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00d      	beq.n	8007f56 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	23ac      	movs	r3, #172	; 0xac
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	58d3      	ldr	r3, [r2, r3]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	7c12      	ldrb	r2, [r2, #16]
 8007f48:	2108      	movs	r1, #8
 8007f4a:	1879      	adds	r1, r7, r1
 8007f4c:	0010      	movs	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	0003      	movs	r3, r0
 8007f52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f54:	e019      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	0011      	movs	r1, r2
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f000 fa79 	bl	8008454 <USBD_CtlError>
            err++;
 8007f62:	210b      	movs	r1, #11
 8007f64:	187b      	adds	r3, r7, r1
 8007f66:	781a      	ldrb	r2, [r3, #0]
 8007f68:	187b      	adds	r3, r7, r1
 8007f6a:	3201      	adds	r2, #1
 8007f6c:	701a      	strb	r2, [r3, #0]
          break;
 8007f6e:	e00c      	b.n	8007f8a <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	0011      	movs	r1, r2
 8007f76:	0018      	movs	r0, r3
 8007f78:	f000 fa6c 	bl	8008454 <USBD_CtlError>
          err++;
 8007f7c:	210b      	movs	r1, #11
 8007f7e:	187b      	adds	r3, r7, r1
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	187b      	adds	r3, r7, r1
 8007f84:	3201      	adds	r2, #1
 8007f86:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007f88:	e04b      	b.n	8008022 <USBD_GetDescriptor+0x2fa>
 8007f8a:	e04a      	b.n	8008022 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	7c1b      	ldrb	r3, [r3, #16]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d10b      	bne.n	8007fac <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	23ad      	movs	r3, #173	; 0xad
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	58d3      	ldr	r3, [r2, r3]
 8007f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f9e:	2208      	movs	r2, #8
 8007fa0:	18ba      	adds	r2, r7, r2
 8007fa2:	0010      	movs	r0, r2
 8007fa4:	4798      	blx	r3
 8007fa6:	0003      	movs	r3, r0
 8007fa8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007faa:	e03a      	b.n	8008022 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	0011      	movs	r1, r2
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 fa4e 	bl	8008454 <USBD_CtlError>
        err++;
 8007fb8:	210b      	movs	r1, #11
 8007fba:	187b      	adds	r3, r7, r1
 8007fbc:	781a      	ldrb	r2, [r3, #0]
 8007fbe:	187b      	adds	r3, r7, r1
 8007fc0:	3201      	adds	r2, #1
 8007fc2:	701a      	strb	r2, [r3, #0]
      break;
 8007fc4:	e02d      	b.n	8008022 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7c1b      	ldrb	r3, [r3, #16]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	23ad      	movs	r3, #173	; 0xad
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	58d3      	ldr	r3, [r2, r3]
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	2208      	movs	r2, #8
 8007fda:	18ba      	adds	r2, r7, r2
 8007fdc:	0010      	movs	r0, r2
 8007fde:	4798      	blx	r3
 8007fe0:	0003      	movs	r3, r0
 8007fe2:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	2207      	movs	r2, #7
 8007fea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fec:	e019      	b.n	8008022 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	0011      	movs	r1, r2
 8007ff4:	0018      	movs	r0, r3
 8007ff6:	f000 fa2d 	bl	8008454 <USBD_CtlError>
        err++;
 8007ffa:	210b      	movs	r1, #11
 8007ffc:	187b      	adds	r3, r7, r1
 8007ffe:	781a      	ldrb	r2, [r3, #0]
 8008000:	187b      	adds	r3, r7, r1
 8008002:	3201      	adds	r2, #1
 8008004:	701a      	strb	r2, [r3, #0]
      break;
 8008006:	e00c      	b.n	8008022 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	0011      	movs	r1, r2
 800800e:	0018      	movs	r0, r3
 8008010:	f000 fa20 	bl	8008454 <USBD_CtlError>
      err++;
 8008014:	210b      	movs	r1, #11
 8008016:	187b      	adds	r3, r7, r1
 8008018:	781a      	ldrb	r2, [r3, #0]
 800801a:	187b      	adds	r3, r7, r1
 800801c:	3201      	adds	r2, #1
 800801e:	701a      	strb	r2, [r3, #0]
      break;
 8008020:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8008022:	230b      	movs	r3, #11
 8008024:	18fb      	adds	r3, r7, r3
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d127      	bne.n	800807c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800802c:	2108      	movs	r1, #8
 800802e:	187b      	adds	r3, r7, r1
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d019      	beq.n	800806a <USBD_GetDescriptor+0x342>
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	88db      	ldrh	r3, [r3, #6]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d015      	beq.n	800806a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	88da      	ldrh	r2, [r3, #6]
 8008042:	187b      	adds	r3, r7, r1
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	1c18      	adds	r0, r3, #0
 8008048:	1c11      	adds	r1, r2, #0
 800804a:	b28a      	uxth	r2, r1
 800804c:	b283      	uxth	r3, r0
 800804e:	429a      	cmp	r2, r3
 8008050:	d900      	bls.n	8008054 <USBD_GetDescriptor+0x32c>
 8008052:	1c01      	adds	r1, r0, #0
 8008054:	b28a      	uxth	r2, r1
 8008056:	2108      	movs	r1, #8
 8008058:	187b      	adds	r3, r7, r1
 800805a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800805c:	187b      	adds	r3, r7, r1
 800805e:	881a      	ldrh	r2, [r3, #0]
 8008060:	68f9      	ldr	r1, [r7, #12]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0018      	movs	r0, r3
 8008066:	f000 fa73 	bl	8008550 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	88db      	ldrh	r3, [r3, #6]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d105      	bne.n	800807e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	0018      	movs	r0, r3
 8008076:	f000 fad5 	bl	8008624 <USBD_CtlSendStatus>
 800807a:	e000      	b.n	800807e <USBD_GetDescriptor+0x356>
    return;
 800807c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800807e:	46bd      	mov	sp, r7
 8008080:	b004      	add	sp, #16
 8008082:	bd80      	pop	{r7, pc}
 8008084:	0800930c 	.word	0x0800930c
 8008088:	0800932c 	.word	0x0800932c

0800808c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800808c:	b590      	push	{r4, r7, lr}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	889b      	ldrh	r3, [r3, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d13d      	bne.n	800811a <USBD_SetAddress+0x8e>
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	88db      	ldrh	r3, [r3, #6]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d139      	bne.n	800811a <USBD_SetAddress+0x8e>
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	885b      	ldrh	r3, [r3, #2]
 80080aa:	2b7f      	cmp	r3, #127	; 0x7f
 80080ac:	d835      	bhi.n	800811a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	885b      	ldrh	r3, [r3, #2]
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	230f      	movs	r3, #15
 80080b6:	18fb      	adds	r3, r7, r3
 80080b8:	217f      	movs	r1, #127	; 0x7f
 80080ba:	400a      	ands	r2, r1
 80080bc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	23a7      	movs	r3, #167	; 0xa7
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	5cd3      	ldrb	r3, [r2, r3]
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d106      	bne.n	80080d8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	0011      	movs	r1, r2
 80080d0:	0018      	movs	r0, r3
 80080d2:	f000 f9bf 	bl	8008454 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d6:	e027      	b.n	8008128 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	240f      	movs	r4, #15
 80080dc:	193a      	adds	r2, r7, r4
 80080de:	4914      	ldr	r1, [pc, #80]	; (8008130 <USBD_SetAddress+0xa4>)
 80080e0:	7812      	ldrb	r2, [r2, #0]
 80080e2:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080e4:	193b      	adds	r3, r7, r4
 80080e6:	781a      	ldrb	r2, [r3, #0]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	0011      	movs	r1, r2
 80080ec:	0018      	movs	r0, r3
 80080ee:	f000 fe85 	bl	8008dfc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	0018      	movs	r0, r3
 80080f6:	f000 fa95 	bl	8008624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080fa:	193b      	adds	r3, r7, r4
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d005      	beq.n	800810e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	23a7      	movs	r3, #167	; 0xa7
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	2102      	movs	r1, #2
 800810a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810c:	e00c      	b.n	8008128 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23a7      	movs	r3, #167	; 0xa7
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	2101      	movs	r1, #1
 8008116:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008118:	e006      	b.n	8008128 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	0011      	movs	r1, r2
 8008120:	0018      	movs	r0, r3
 8008122:	f000 f997 	bl	8008454 <USBD_CtlError>
  }
}
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46c0      	nop			; (mov r8, r8)
 800812a:	46bd      	mov	sp, r7
 800812c:	b005      	add	sp, #20
 800812e:	bd90      	pop	{r4, r7, pc}
 8008130:	0000029e 	.word	0x0000029e

08008134 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	885b      	ldrh	r3, [r3, #2]
 8008142:	b2da      	uxtb	r2, r3
 8008144:	4b4c      	ldr	r3, [pc, #304]	; (8008278 <USBD_SetConfig+0x144>)
 8008146:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008148:	4b4b      	ldr	r3, [pc, #300]	; (8008278 <USBD_SetConfig+0x144>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b01      	cmp	r3, #1
 800814e:	d906      	bls.n	800815e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008150:	683a      	ldr	r2, [r7, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	0011      	movs	r1, r2
 8008156:	0018      	movs	r0, r3
 8008158:	f000 f97c 	bl	8008454 <USBD_CtlError>
 800815c:	e088      	b.n	8008270 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	23a7      	movs	r3, #167	; 0xa7
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	5cd3      	ldrb	r3, [r2, r3]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d002      	beq.n	8008170 <USBD_SetConfig+0x3c>
 800816a:	2b03      	cmp	r3, #3
 800816c:	d029      	beq.n	80081c2 <USBD_SetConfig+0x8e>
 800816e:	e071      	b.n	8008254 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008170:	4b41      	ldr	r3, [pc, #260]	; (8008278 <USBD_SetConfig+0x144>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01f      	beq.n	80081b8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8008178:	4b3f      	ldr	r3, [pc, #252]	; (8008278 <USBD_SetConfig+0x144>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	001a      	movs	r2, r3
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	23a7      	movs	r3, #167	; 0xa7
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	2103      	movs	r1, #3
 800818a:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800818c:	4b3a      	ldr	r3, [pc, #232]	; (8008278 <USBD_SetConfig+0x144>)
 800818e:	781a      	ldrb	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	0011      	movs	r1, r2
 8008194:	0018      	movs	r0, r3
 8008196:	f7ff f8c5 	bl	8007324 <USBD_SetClassConfig>
 800819a:	0003      	movs	r3, r0
 800819c:	2b02      	cmp	r3, #2
 800819e:	d106      	bne.n	80081ae <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	0011      	movs	r1, r2
 80081a6:	0018      	movs	r0, r3
 80081a8:	f000 f954 	bl	8008454 <USBD_CtlError>
            return;
 80081ac:	e060      	b.n	8008270 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	0018      	movs	r0, r3
 80081b2:	f000 fa37 	bl	8008624 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80081b6:	e05b      	b.n	8008270 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	0018      	movs	r0, r3
 80081bc:	f000 fa32 	bl	8008624 <USBD_CtlSendStatus>
        break;
 80081c0:	e056      	b.n	8008270 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80081c2:	4b2d      	ldr	r3, [pc, #180]	; (8008278 <USBD_SetConfig+0x144>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d115      	bne.n	80081f6 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	23a7      	movs	r3, #167	; 0xa7
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	2102      	movs	r1, #2
 80081d2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80081d4:	4b28      	ldr	r3, [pc, #160]	; (8008278 <USBD_SetConfig+0x144>)
 80081d6:	781b      	ldrb	r3, [r3, #0]
 80081d8:	001a      	movs	r2, r3
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80081de:	4b26      	ldr	r3, [pc, #152]	; (8008278 <USBD_SetConfig+0x144>)
 80081e0:	781a      	ldrb	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	0011      	movs	r1, r2
 80081e6:	0018      	movs	r0, r3
 80081e8:	f7ff f8c3 	bl	8007372 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	0018      	movs	r0, r3
 80081f0:	f000 fa18 	bl	8008624 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80081f4:	e03c      	b.n	8008270 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80081f6:	4b20      	ldr	r3, [pc, #128]	; (8008278 <USBD_SetConfig+0x144>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	001a      	movs	r2, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	429a      	cmp	r2, r3
 8008202:	d022      	beq.n	800824a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	b2da      	uxtb	r2, r3
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0011      	movs	r1, r2
 800820e:	0018      	movs	r0, r3
 8008210:	f7ff f8af 	bl	8007372 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008214:	4b18      	ldr	r3, [pc, #96]	; (8008278 <USBD_SetConfig+0x144>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	001a      	movs	r2, r3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800821e:	4b16      	ldr	r3, [pc, #88]	; (8008278 <USBD_SetConfig+0x144>)
 8008220:	781a      	ldrb	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	0011      	movs	r1, r2
 8008226:	0018      	movs	r0, r3
 8008228:	f7ff f87c 	bl	8007324 <USBD_SetClassConfig>
 800822c:	0003      	movs	r3, r0
 800822e:	2b02      	cmp	r3, #2
 8008230:	d106      	bne.n	8008240 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	0011      	movs	r1, r2
 8008238:	0018      	movs	r0, r3
 800823a:	f000 f90b 	bl	8008454 <USBD_CtlError>
            return;
 800823e:	e017      	b.n	8008270 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	0018      	movs	r0, r3
 8008244:	f000 f9ee 	bl	8008624 <USBD_CtlSendStatus>
        break;
 8008248:	e012      	b.n	8008270 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	0018      	movs	r0, r3
 800824e:	f000 f9e9 	bl	8008624 <USBD_CtlSendStatus>
        break;
 8008252:	e00d      	b.n	8008270 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8008254:	683a      	ldr	r2, [r7, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	0011      	movs	r1, r2
 800825a:	0018      	movs	r0, r3
 800825c:	f000 f8fa 	bl	8008454 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008260:	4b05      	ldr	r3, [pc, #20]	; (8008278 <USBD_SetConfig+0x144>)
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	0011      	movs	r1, r2
 8008268:	0018      	movs	r0, r3
 800826a:	f7ff f882 	bl	8007372 <USBD_ClrClassConfig>
        break;
 800826e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008270:	46bd      	mov	sp, r7
 8008272:	b002      	add	sp, #8
 8008274:	bd80      	pop	{r7, pc}
 8008276:	46c0      	nop			; (mov r8, r8)
 8008278:	2000021c 	.word	0x2000021c

0800827c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	88db      	ldrh	r3, [r3, #6]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d006      	beq.n	800829c <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	0011      	movs	r1, r2
 8008294:	0018      	movs	r0, r3
 8008296:	f000 f8dd 	bl	8008454 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800829a:	e026      	b.n	80082ea <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	23a7      	movs	r3, #167	; 0xa7
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	5cd3      	ldrb	r3, [r2, r3]
 80082a4:	2b02      	cmp	r3, #2
 80082a6:	dc02      	bgt.n	80082ae <USBD_GetConfig+0x32>
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dc03      	bgt.n	80082b4 <USBD_GetConfig+0x38>
 80082ac:	e016      	b.n	80082dc <USBD_GetConfig+0x60>
 80082ae:	2b03      	cmp	r3, #3
 80082b0:	d00c      	beq.n	80082cc <USBD_GetConfig+0x50>
 80082b2:	e013      	b.n	80082dc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3308      	adds	r3, #8
 80082be:	0019      	movs	r1, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	0018      	movs	r0, r3
 80082c6:	f000 f943 	bl	8008550 <USBD_CtlSendData>
        break;
 80082ca:	e00e      	b.n	80082ea <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1d19      	adds	r1, r3, #4
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 f93b 	bl	8008550 <USBD_CtlSendData>
        break;
 80082da:	e006      	b.n	80082ea <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	0011      	movs	r1, r2
 80082e2:	0018      	movs	r0, r3
 80082e4:	f000 f8b6 	bl	8008454 <USBD_CtlError>
        break;
 80082e8:	46c0      	nop			; (mov r8, r8)
}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	46bd      	mov	sp, r7
 80082ee:	b002      	add	sp, #8
 80082f0:	bd80      	pop	{r7, pc}

080082f2 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f2:	b580      	push	{r7, lr}
 80082f4:	b082      	sub	sp, #8
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
 80082fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	23a7      	movs	r3, #167	; 0xa7
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	5cd3      	ldrb	r3, [r2, r3]
 8008304:	3b01      	subs	r3, #1
 8008306:	2b02      	cmp	r3, #2
 8008308:	d822      	bhi.n	8008350 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	88db      	ldrh	r3, [r3, #6]
 800830e:	2b02      	cmp	r3, #2
 8008310:	d006      	beq.n	8008320 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8008312:	683a      	ldr	r2, [r7, #0]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	0011      	movs	r1, r2
 8008318:	0018      	movs	r0, r3
 800831a:	f000 f89b 	bl	8008454 <USBD_CtlError>
        break;
 800831e:	e01e      	b.n	800835e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	23a9      	movs	r3, #169	; 0xa9
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	58d3      	ldr	r3, [r2, r3]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d005      	beq.n	800833e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	2202      	movs	r2, #2
 8008338:	431a      	orrs	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	330c      	adds	r3, #12
 8008342:	0019      	movs	r1, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	0018      	movs	r0, r3
 800834a:	f000 f901 	bl	8008550 <USBD_CtlSendData>
      break;
 800834e:	e006      	b.n	800835e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	0011      	movs	r1, r2
 8008356:	0018      	movs	r0, r3
 8008358:	f000 f87c 	bl	8008454 <USBD_CtlError>
      break;
 800835c:	46c0      	nop			; (mov r8, r8)
  }
}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	46bd      	mov	sp, r7
 8008362:	b002      	add	sp, #8
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	885b      	ldrh	r3, [r3, #2]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d108      	bne.n	800838a <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	23a9      	movs	r3, #169	; 0xa9
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	2101      	movs	r1, #1
 8008380:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	0018      	movs	r0, r3
 8008386:	f000 f94d 	bl	8008624 <USBD_CtlSendStatus>
  }
}
 800838a:	46c0      	nop			; (mov r8, r8)
 800838c:	46bd      	mov	sp, r7
 800838e:	b002      	add	sp, #8
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	23a7      	movs	r3, #167	; 0xa7
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	5cd3      	ldrb	r3, [r2, r3]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d80d      	bhi.n	80083c6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	885b      	ldrh	r3, [r3, #2]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	d110      	bne.n	80083d4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	23a9      	movs	r3, #169	; 0xa9
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	2100      	movs	r1, #0
 80083ba:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	0018      	movs	r0, r3
 80083c0:	f000 f930 	bl	8008624 <USBD_CtlSendStatus>
      }
      break;
 80083c4:	e006      	b.n	80083d4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	0011      	movs	r1, r2
 80083cc:	0018      	movs	r0, r3
 80083ce:	f000 f841 	bl	8008454 <USBD_CtlError>
      break;
 80083d2:	e000      	b.n	80083d6 <USBD_ClrFeature+0x44>
      break;
 80083d4:	46c0      	nop			; (mov r8, r8)
  }
}
 80083d6:	46c0      	nop			; (mov r8, r8)
 80083d8:	46bd      	mov	sp, r7
 80083da:	b002      	add	sp, #8
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b082      	sub	sp, #8
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781a      	ldrb	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	785a      	ldrb	r2, [r3, #1]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	3302      	adds	r3, #2
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	b29a      	uxth	r2, r3
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	3303      	adds	r3, #3
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	b29b      	uxth	r3, r3
 800840c:	18d3      	adds	r3, r2, r3
 800840e:	b29a      	uxth	r2, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	3304      	adds	r3, #4
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b29a      	uxth	r2, r3
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	3305      	adds	r3, #5
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	b29b      	uxth	r3, r3
 8008424:	021b      	lsls	r3, r3, #8
 8008426:	b29b      	uxth	r3, r3
 8008428:	18d3      	adds	r3, r2, r3
 800842a:	b29a      	uxth	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	3306      	adds	r3, #6
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	b29a      	uxth	r2, r3
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	3307      	adds	r3, #7
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	b29b      	uxth	r3, r3
 8008444:	18d3      	adds	r3, r2, r3
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	80da      	strh	r2, [r3, #6]

}
 800844c:	46c0      	nop			; (mov r8, r8)
 800844e:	46bd      	mov	sp, r7
 8008450:	b002      	add	sp, #8
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2180      	movs	r1, #128	; 0x80
 8008462:	0018      	movs	r0, r3
 8008464:	f000 fc43 	bl	8008cee <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2100      	movs	r1, #0
 800846c:	0018      	movs	r0, r3
 800846e:	f000 fc3e 	bl	8008cee <USBD_LL_StallEP>
}
 8008472:	46c0      	nop			; (mov r8, r8)
 8008474:	46bd      	mov	sp, r7
 8008476:	b002      	add	sp, #8
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800847a:	b590      	push	{r4, r7, lr}
 800847c:	b087      	sub	sp, #28
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	60b9      	str	r1, [r7, #8]
 8008484:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008486:	2417      	movs	r4, #23
 8008488:	193b      	adds	r3, r7, r4
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d03c      	beq.n	800850e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	0018      	movs	r0, r3
 8008498:	f000 f83d 	bl	8008516 <USBD_GetLen>
 800849c:	0003      	movs	r3, r0
 800849e:	3301      	adds	r3, #1
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	18db      	adds	r3, r3, r3
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80084aa:	193b      	adds	r3, r7, r4
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	193a      	adds	r2, r7, r4
 80084b0:	1c59      	adds	r1, r3, #1
 80084b2:	7011      	strb	r1, [r2, #0]
 80084b4:	001a      	movs	r2, r3
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	189b      	adds	r3, r3, r2
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	7812      	ldrb	r2, [r2, #0]
 80084be:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80084c0:	193b      	adds	r3, r7, r4
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	193a      	adds	r2, r7, r4
 80084c6:	1c59      	adds	r1, r3, #1
 80084c8:	7011      	strb	r1, [r2, #0]
 80084ca:	001a      	movs	r2, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	2203      	movs	r2, #3
 80084d2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80084d4:	e017      	b.n	8008506 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	60fa      	str	r2, [r7, #12]
 80084dc:	2417      	movs	r4, #23
 80084de:	193a      	adds	r2, r7, r4
 80084e0:	7812      	ldrb	r2, [r2, #0]
 80084e2:	1939      	adds	r1, r7, r4
 80084e4:	1c50      	adds	r0, r2, #1
 80084e6:	7008      	strb	r0, [r1, #0]
 80084e8:	0011      	movs	r1, r2
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	1852      	adds	r2, r2, r1
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80084f2:	193b      	adds	r3, r7, r4
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	193a      	adds	r2, r7, r4
 80084f8:	1c59      	adds	r1, r3, #1
 80084fa:	7011      	strb	r1, [r2, #0]
 80084fc:	001a      	movs	r2, r3
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	189b      	adds	r3, r3, r2
 8008502:	2200      	movs	r2, #0
 8008504:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1e3      	bne.n	80084d6 <USBD_GetString+0x5c>
    }
  }
}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	46bd      	mov	sp, r7
 8008512:	b007      	add	sp, #28
 8008514:	bd90      	pop	{r4, r7, pc}

08008516 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008516:	b580      	push	{r7, lr}
 8008518:	b084      	sub	sp, #16
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800851e:	230f      	movs	r3, #15
 8008520:	18fb      	adds	r3, r7, r3
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8008526:	e008      	b.n	800853a <USBD_GetLen+0x24>
  {
    len++;
 8008528:	210f      	movs	r1, #15
 800852a:	187b      	adds	r3, r7, r1
 800852c:	781a      	ldrb	r2, [r3, #0]
 800852e:	187b      	adds	r3, r7, r1
 8008530:	3201      	adds	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]
    buf++;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3301      	adds	r3, #1
 8008538:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f2      	bne.n	8008528 <USBD_GetLen+0x12>
  }

  return len;
 8008542:	230f      	movs	r3, #15
 8008544:	18fb      	adds	r3, r7, r3
 8008546:	781b      	ldrb	r3, [r3, #0]
}
 8008548:	0018      	movs	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	b004      	add	sp, #16
 800854e:	bd80      	pop	{r7, pc}

08008550 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	1dbb      	adds	r3, r7, #6
 800855c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	23a5      	movs	r3, #165	; 0xa5
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	2102      	movs	r1, #2
 8008566:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008568:	1dbb      	adds	r3, r7, #6
 800856a:	881a      	ldrh	r2, [r3, #0]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008570:	1dbb      	adds	r3, r7, #6
 8008572:	881a      	ldrh	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008578:	1dbb      	adds	r3, r7, #6
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	2100      	movs	r1, #0
 8008582:	f000 fc66 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	0018      	movs	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	b004      	add	sp, #16
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	1dbb      	adds	r3, r7, #6
 800859c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800859e:	1dbb      	adds	r3, r7, #6
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	2100      	movs	r1, #0
 80085a8:	f000 fc53 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	0018      	movs	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b004      	add	sp, #16
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	60f8      	str	r0, [r7, #12]
 80085be:	60b9      	str	r1, [r7, #8]
 80085c0:	1dbb      	adds	r3, r7, #6
 80085c2:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	23a5      	movs	r3, #165	; 0xa5
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	2103      	movs	r1, #3
 80085cc:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80085ce:	1dbb      	adds	r3, r7, #6
 80085d0:	8819      	ldrh	r1, [r3, #0]
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	23ae      	movs	r3, #174	; 0xae
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 80085da:	1dbb      	adds	r3, r7, #6
 80085dc:	8819      	ldrh	r1, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	23b0      	movs	r3, #176	; 0xb0
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085e6:	1dbb      	adds	r3, r7, #6
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	2100      	movs	r1, #0
 80085f0:	f000 fc66 	bl	8008ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	0018      	movs	r0, r3
 80085f8:	46bd      	mov	sp, r7
 80085fa:	b004      	add	sp, #16
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	1dbb      	adds	r3, r7, #6
 800860a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800860c:	1dbb      	adds	r3, r7, #6
 800860e:	881b      	ldrh	r3, [r3, #0]
 8008610:	68ba      	ldr	r2, [r7, #8]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	2100      	movs	r1, #0
 8008616:	f000 fc53 	bl	8008ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	0018      	movs	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	b004      	add	sp, #16
 8008622:	bd80      	pop	{r7, pc}

08008624 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	23a5      	movs	r3, #165	; 0xa5
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	2104      	movs	r1, #4
 8008634:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	2300      	movs	r3, #0
 800863a:	2200      	movs	r2, #0
 800863c:	2100      	movs	r1, #0
 800863e:	f000 fc08 	bl	8008e52 <USBD_LL_Transmit>

  return USBD_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	0018      	movs	r0, r3
 8008646:	46bd      	mov	sp, r7
 8008648:	b002      	add	sp, #8
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	23a5      	movs	r3, #165	; 0xa5
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	2105      	movs	r1, #5
 800865c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	2300      	movs	r3, #0
 8008662:	2200      	movs	r2, #0
 8008664:	2100      	movs	r1, #0
 8008666:	f000 fc2b 	bl	8008ec0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	0018      	movs	r0, r3
 800866e:	46bd      	mov	sp, r7
 8008670:	b002      	add	sp, #8
 8008672:	bd80      	pop	{r7, pc}

08008674 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008678:	4914      	ldr	r1, [pc, #80]	; (80086cc <MX_USB_DEVICE_Init+0x58>)
 800867a:	4b15      	ldr	r3, [pc, #84]	; (80086d0 <MX_USB_DEVICE_Init+0x5c>)
 800867c:	2200      	movs	r2, #0
 800867e:	0018      	movs	r0, r3
 8008680:	f7fe fde9 	bl	8007256 <USBD_Init>
 8008684:	1e03      	subs	r3, r0, #0
 8008686:	d001      	beq.n	800868c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008688:	f7f8 f97e 	bl	8000988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800868c:	4a11      	ldr	r2, [pc, #68]	; (80086d4 <MX_USB_DEVICE_Init+0x60>)
 800868e:	4b10      	ldr	r3, [pc, #64]	; (80086d0 <MX_USB_DEVICE_Init+0x5c>)
 8008690:	0011      	movs	r1, r2
 8008692:	0018      	movs	r0, r3
 8008694:	f7fe fe10 	bl	80072b8 <USBD_RegisterClass>
 8008698:	1e03      	subs	r3, r0, #0
 800869a:	d001      	beq.n	80086a0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800869c:	f7f8 f974 	bl	8000988 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80086a0:	4a0d      	ldr	r2, [pc, #52]	; (80086d8 <MX_USB_DEVICE_Init+0x64>)
 80086a2:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <MX_USB_DEVICE_Init+0x5c>)
 80086a4:	0011      	movs	r1, r2
 80086a6:	0018      	movs	r0, r3
 80086a8:	f7fe fdba 	bl	8007220 <USBD_CUSTOM_HID_RegisterInterface>
 80086ac:	1e03      	subs	r3, r0, #0
 80086ae:	d001      	beq.n	80086b4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80086b0:	f7f8 f96a 	bl	8000988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <MX_USB_DEVICE_Init+0x5c>)
 80086b6:	0018      	movs	r0, r3
 80086b8:	f7fe fe1e 	bl	80072f8 <USBD_Start>
 80086bc:	1e03      	subs	r3, r0, #0
 80086be:	d001      	beq.n	80086c4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80086c0:	f7f8 f962 	bl	8000988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80086c4:	46c0      	nop			; (mov r8, r8)
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	20000148 	.word	0x20000148
 80086d0:	20000350 	.word	0x20000350
 80086d4:	2000000c 	.word	0x2000000c
 80086d8:	20000138 	.word	0x20000138

080086dc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80086e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80086e2:	0018      	movs	r0, r3
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80086ec:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086ee:	0018      	movs	r0, r3
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	0002      	movs	r2, r0
 80086fc:	1dfb      	adds	r3, r7, #7
 80086fe:	701a      	strb	r2, [r3, #0]
 8008700:	1dbb      	adds	r3, r7, #6
 8008702:	1c0a      	adds	r2, r1, #0
 8008704:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008706:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008708:	0018      	movs	r0, r3
 800870a:	46bd      	mov	sp, r7
 800870c:	b002      	add	sp, #8
 800870e:	bd80      	pop	{r7, pc}

08008710 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	0002      	movs	r2, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	1dfb      	adds	r3, r7, #7
 800871c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	2212      	movs	r2, #18
 8008722:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008726:	0018      	movs	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	b002      	add	sp, #8
 800872c:	bd80      	pop	{r7, pc}
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	20000164 	.word	0x20000164

08008734 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	0002      	movs	r2, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	1dfb      	adds	r3, r7, #7
 8008740:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	2204      	movs	r2, #4
 8008746:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008748:	4b02      	ldr	r3, [pc, #8]	; (8008754 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800874a:	0018      	movs	r0, r3
 800874c:	46bd      	mov	sp, r7
 800874e:	b002      	add	sp, #8
 8008750:	bd80      	pop	{r7, pc}
 8008752:	46c0      	nop			; (mov r8, r8)
 8008754:	20000178 	.word	0x20000178

08008758 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b082      	sub	sp, #8
 800875c:	af00      	add	r7, sp, #0
 800875e:	0002      	movs	r2, r0
 8008760:	6039      	str	r1, [r7, #0]
 8008762:	1dfb      	adds	r3, r7, #7
 8008764:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008766:	1dfb      	adds	r3, r7, #7
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800876e:	683a      	ldr	r2, [r7, #0]
 8008770:	4908      	ldr	r1, [pc, #32]	; (8008794 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008772:	4b09      	ldr	r3, [pc, #36]	; (8008798 <USBD_FS_ProductStrDescriptor+0x40>)
 8008774:	0018      	movs	r0, r3
 8008776:	f7ff fe80 	bl	800847a <USBD_GetString>
 800877a:	e005      	b.n	8008788 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	4905      	ldr	r1, [pc, #20]	; (8008794 <USBD_FS_ProductStrDescriptor+0x3c>)
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <USBD_FS_ProductStrDescriptor+0x40>)
 8008782:	0018      	movs	r0, r3
 8008784:	f7ff fe79 	bl	800847a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800878a:	0018      	movs	r0, r3
 800878c:	46bd      	mov	sp, r7
 800878e:	b002      	add	sp, #8
 8008790:	bd80      	pop	{r7, pc}
 8008792:	46c0      	nop			; (mov r8, r8)
 8008794:	20000614 	.word	0x20000614
 8008798:	080091e8 	.word	0x080091e8

0800879c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	0002      	movs	r2, r0
 80087a4:	6039      	str	r1, [r7, #0]
 80087a6:	1dfb      	adds	r3, r7, #7
 80087a8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80087aa:	683a      	ldr	r2, [r7, #0]
 80087ac:	4904      	ldr	r1, [pc, #16]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80087ae:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7ff fe62 	bl	800847a <USBD_GetString>
  return USBD_StrDesc;
 80087b6:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80087b8:	0018      	movs	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	b002      	add	sp, #8
 80087be:	bd80      	pop	{r7, pc}
 80087c0:	20000614 	.word	0x20000614
 80087c4:	08009208 	.word	0x08009208

080087c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	0002      	movs	r2, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	1dfb      	adds	r3, r7, #7
 80087d4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	221a      	movs	r2, #26
 80087da:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087dc:	f000 f84c 	bl	8008878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087e0:	4b02      	ldr	r3, [pc, #8]	; (80087ec <USBD_FS_SerialStrDescriptor+0x24>)
}
 80087e2:	0018      	movs	r0, r3
 80087e4:	46bd      	mov	sp, r7
 80087e6:	b002      	add	sp, #8
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	46c0      	nop			; (mov r8, r8)
 80087ec:	2000017c 	.word	0x2000017c

080087f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	0002      	movs	r2, r0
 80087f8:	6039      	str	r1, [r7, #0]
 80087fa:	1dfb      	adds	r3, r7, #7
 80087fc:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80087fe:	1dfb      	adds	r3, r7, #7
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d106      	bne.n	8008814 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008806:	683a      	ldr	r2, [r7, #0]
 8008808:	4908      	ldr	r1, [pc, #32]	; (800882c <USBD_FS_ConfigStrDescriptor+0x3c>)
 800880a:	4b09      	ldr	r3, [pc, #36]	; (8008830 <USBD_FS_ConfigStrDescriptor+0x40>)
 800880c:	0018      	movs	r0, r3
 800880e:	f7ff fe34 	bl	800847a <USBD_GetString>
 8008812:	e005      	b.n	8008820 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008814:	683a      	ldr	r2, [r7, #0]
 8008816:	4905      	ldr	r1, [pc, #20]	; (800882c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008818:	4b05      	ldr	r3, [pc, #20]	; (8008830 <USBD_FS_ConfigStrDescriptor+0x40>)
 800881a:	0018      	movs	r0, r3
 800881c:	f7ff fe2d 	bl	800847a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8008822:	0018      	movs	r0, r3
 8008824:	46bd      	mov	sp, r7
 8008826:	b002      	add	sp, #8
 8008828:	bd80      	pop	{r7, pc}
 800882a:	46c0      	nop			; (mov r8, r8)
 800882c:	20000614 	.word	0x20000614
 8008830:	0800921c 	.word	0x0800921c

08008834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	0002      	movs	r2, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	1dfb      	adds	r3, r7, #7
 8008840:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008842:	1dfb      	adds	r3, r7, #7
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d106      	bne.n	8008858 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	4908      	ldr	r1, [pc, #32]	; (8008870 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800884e:	4b09      	ldr	r3, [pc, #36]	; (8008874 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008850:	0018      	movs	r0, r3
 8008852:	f7ff fe12 	bl	800847a <USBD_GetString>
 8008856:	e005      	b.n	8008864 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	4905      	ldr	r1, [pc, #20]	; (8008870 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800885e:	0018      	movs	r0, r3
 8008860:	f7ff fe0b 	bl	800847a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008864:	4b02      	ldr	r3, [pc, #8]	; (8008870 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008866:	0018      	movs	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	b002      	add	sp, #8
 800886c:	bd80      	pop	{r7, pc}
 800886e:	46c0      	nop			; (mov r8, r8)
 8008870:	20000614 	.word	0x20000614
 8008874:	08009230 	.word	0x08009230

08008878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800887e:	4b10      	ldr	r3, [pc, #64]	; (80088c0 <Get_SerialNum+0x48>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008884:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <Get_SerialNum+0x4c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800888a:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <Get_SerialNum+0x50>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	18d3      	adds	r3, r2, r3
 8008896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00b      	beq.n	80088b6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800889e:	490b      	ldr	r1, [pc, #44]	; (80088cc <Get_SerialNum+0x54>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2208      	movs	r2, #8
 80088a4:	0018      	movs	r0, r3
 80088a6:	f000 f815 	bl	80088d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80088aa:	4909      	ldr	r1, [pc, #36]	; (80088d0 <Get_SerialNum+0x58>)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2204      	movs	r2, #4
 80088b0:	0018      	movs	r0, r3
 80088b2:	f000 f80f 	bl	80088d4 <IntToUnicode>
  }
}
 80088b6:	46c0      	nop			; (mov r8, r8)
 80088b8:	46bd      	mov	sp, r7
 80088ba:	b004      	add	sp, #16
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	1ff80050 	.word	0x1ff80050
 80088c4:	1ff80054 	.word	0x1ff80054
 80088c8:	1ff80058 	.word	0x1ff80058
 80088cc:	2000017e 	.word	0x2000017e
 80088d0:	2000018e 	.word	0x2000018e

080088d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	1dfb      	adds	r3, r7, #7
 80088e0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80088e2:	2117      	movs	r1, #23
 80088e4:	187b      	adds	r3, r7, r1
 80088e6:	2200      	movs	r2, #0
 80088e8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80088ea:	187b      	adds	r3, r7, r1
 80088ec:	2200      	movs	r2, #0
 80088ee:	701a      	strb	r2, [r3, #0]
 80088f0:	e02f      	b.n	8008952 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	0f1b      	lsrs	r3, r3, #28
 80088f6:	2b09      	cmp	r3, #9
 80088f8:	d80d      	bhi.n	8008916 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	0f1b      	lsrs	r3, r3, #28
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	2317      	movs	r3, #23
 8008902:	18fb      	adds	r3, r7, r3
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	0019      	movs	r1, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	185b      	adds	r3, r3, r1
 800890e:	3230      	adds	r2, #48	; 0x30
 8008910:	b2d2      	uxtb	r2, r2
 8008912:	701a      	strb	r2, [r3, #0]
 8008914:	e00c      	b.n	8008930 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	0f1b      	lsrs	r3, r3, #28
 800891a:	b2da      	uxtb	r2, r3
 800891c:	2317      	movs	r3, #23
 800891e:	18fb      	adds	r3, r7, r3
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	005b      	lsls	r3, r3, #1
 8008924:	0019      	movs	r1, r3
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	185b      	adds	r3, r3, r1
 800892a:	3237      	adds	r2, #55	; 0x37
 800892c:	b2d2      	uxtb	r2, r2
 800892e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008936:	2117      	movs	r1, #23
 8008938:	187b      	adds	r3, r7, r1
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	3301      	adds	r3, #1
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	18d3      	adds	r3, r2, r3
 8008944:	2200      	movs	r2, #0
 8008946:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008948:	187b      	adds	r3, r7, r1
 800894a:	781a      	ldrb	r2, [r3, #0]
 800894c:	187b      	adds	r3, r7, r1
 800894e:	3201      	adds	r2, #1
 8008950:	701a      	strb	r2, [r3, #0]
 8008952:	2317      	movs	r3, #23
 8008954:	18fa      	adds	r2, r7, r3
 8008956:	1dfb      	adds	r3, r7, #7
 8008958:	7812      	ldrb	r2, [r2, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	429a      	cmp	r2, r3
 800895e:	d3c8      	bcc.n	80088f2 <IntToUnicode+0x1e>
  }
}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	46c0      	nop			; (mov r8, r8)
 8008964:	46bd      	mov	sp, r7
 8008966:	b006      	add	sp, #24
 8008968:	bd80      	pop	{r7, pc}
	...

0800896c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a0a      	ldr	r2, [pc, #40]	; (80089a4 <HAL_PCD_MspInit+0x38>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d10e      	bne.n	800899c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800897e:	4b0a      	ldr	r3, [pc, #40]	; (80089a8 <HAL_PCD_MspInit+0x3c>)
 8008980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008982:	4b09      	ldr	r3, [pc, #36]	; (80089a8 <HAL_PCD_MspInit+0x3c>)
 8008984:	2180      	movs	r1, #128	; 0x80
 8008986:	0409      	lsls	r1, r1, #16
 8008988:	430a      	orrs	r2, r1
 800898a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	201f      	movs	r0, #31
 8008992:	f7f8 fd6b 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008996:	201f      	movs	r0, #31
 8008998:	f7f8 fd7d 	bl	8001496 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800899c:	46c0      	nop			; (mov r8, r8)
 800899e:	46bd      	mov	sp, r7
 80089a0:	b002      	add	sp, #8
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40005c00 	.word	0x40005c00
 80089a8:	40021000 	.word	0x40021000

080089ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b082      	sub	sp, #8
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	23bc      	movs	r3, #188	; 0xbc
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	58d2      	ldr	r2, [r2, r3]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	21ac      	movs	r1, #172	; 0xac
 80089c0:	0089      	lsls	r1, r1, #2
 80089c2:	468c      	mov	ip, r1
 80089c4:	4463      	add	r3, ip
 80089c6:	0019      	movs	r1, r3
 80089c8:	0010      	movs	r0, r2
 80089ca:	f7fe fce9 	bl	80073a0 <USBD_LL_SetupStage>
}
 80089ce:	46c0      	nop			; (mov r8, r8)
 80089d0:	46bd      	mov	sp, r7
 80089d2:	b002      	add	sp, #8
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089d6:	b590      	push	{r4, r7, lr}
 80089d8:	b083      	sub	sp, #12
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	000a      	movs	r2, r1
 80089e0:	1cfb      	adds	r3, r7, #3
 80089e2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	23bc      	movs	r3, #188	; 0xbc
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	58d4      	ldr	r4, [r2, r3]
 80089ec:	1cfb      	adds	r3, r7, #3
 80089ee:	781a      	ldrb	r2, [r3, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	23be      	movs	r3, #190	; 0xbe
 80089f4:	0059      	lsls	r1, r3, #1
 80089f6:	0013      	movs	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	189b      	adds	r3, r3, r2
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	18c3      	adds	r3, r0, r3
 8008a00:	185b      	adds	r3, r3, r1
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	1cfb      	adds	r3, r7, #3
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	0019      	movs	r1, r3
 8008a0a:	0020      	movs	r0, r4
 8008a0c:	f7fe fd26 	bl	800745c <USBD_LL_DataOutStage>
}
 8008a10:	46c0      	nop			; (mov r8, r8)
 8008a12:	46bd      	mov	sp, r7
 8008a14:	b003      	add	sp, #12
 8008a16:	bd90      	pop	{r4, r7, pc}

08008a18 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	000a      	movs	r2, r1
 8008a22:	1cfb      	adds	r3, r7, #3
 8008a24:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	23bc      	movs	r3, #188	; 0xbc
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	58d0      	ldr	r0, [r2, r3]
 8008a2e:	1cfb      	adds	r3, r7, #3
 8008a30:	781a      	ldrb	r2, [r3, #0]
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	0013      	movs	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	189b      	adds	r3, r3, r2
 8008a3a:	00db      	lsls	r3, r3, #3
 8008a3c:	18cb      	adds	r3, r1, r3
 8008a3e:	333c      	adds	r3, #60	; 0x3c
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	1cfb      	adds	r3, r7, #3
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	0019      	movs	r1, r3
 8008a48:	f7fe fd8a 	bl	8007560 <USBD_LL_DataInStage>
}
 8008a4c:	46c0      	nop			; (mov r8, r8)
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b002      	add	sp, #8
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	23bc      	movs	r3, #188	; 0xbc
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	58d3      	ldr	r3, [r2, r3]
 8008a64:	0018      	movs	r0, r3
 8008a66:	f7fe fec1 	bl	80077ec <USBD_LL_SOF>
}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	b002      	add	sp, #8
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a7a:	230f      	movs	r3, #15
 8008a7c:	18fb      	adds	r3, r7, r3
 8008a7e:	2201      	movs	r2, #1
 8008a80:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d001      	beq.n	8008a8e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008a8a:	f7f7 ff7d 	bl	8000988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	23bc      	movs	r3, #188	; 0xbc
 8008a92:	009b      	lsls	r3, r3, #2
 8008a94:	58d2      	ldr	r2, [r2, r3]
 8008a96:	230f      	movs	r3, #15
 8008a98:	18fb      	adds	r3, r7, r3
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	0019      	movs	r1, r3
 8008a9e:	0010      	movs	r0, r2
 8008aa0:	f7fe fe63 	bl	800776a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	23bc      	movs	r3, #188	; 0xbc
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	58d3      	ldr	r3, [r2, r3]
 8008aac:	0018      	movs	r0, r3
 8008aae:	f7fe fe14 	bl	80076da <USBD_LL_Reset>
}
 8008ab2:	46c0      	nop			; (mov r8, r8)
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	b004      	add	sp, #16
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	23bc      	movs	r3, #188	; 0xbc
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	58d3      	ldr	r3, [r2, r3]
 8008acc:	0018      	movs	r0, r3
 8008ace:	f7fe fe5d 	bl	800778c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ada:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <HAL_PCD_SuspendCallback+0x34>)
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <HAL_PCD_SuspendCallback+0x34>)
 8008ae0:	2106      	movs	r1, #6
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008ae6:	46c0      	nop			; (mov r8, r8)
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	b002      	add	sp, #8
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	e000ed00 	.word	0xe000ed00

08008af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d007      	beq.n	8008b14 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <HAL_PCD_ResumeCallback+0x38>)
 8008b06:	691a      	ldr	r2, [r3, #16]
 8008b08:	4b08      	ldr	r3, [pc, #32]	; (8008b2c <HAL_PCD_ResumeCallback+0x38>)
 8008b0a:	2106      	movs	r1, #6
 8008b0c:	438a      	bics	r2, r1
 8008b0e:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008b10:	f000 fa0d 	bl	8008f2e <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	23bc      	movs	r3, #188	; 0xbc
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	58d3      	ldr	r3, [r2, r3]
 8008b1c:	0018      	movs	r0, r3
 8008b1e:	f7fe fe4d 	bl	80077bc <USBD_LL_Resume>
}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	46bd      	mov	sp, r7
 8008b26:	b002      	add	sp, #8
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	46c0      	nop			; (mov r8, r8)
 8008b2c:	e000ed00 	.word	0xe000ed00

08008b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008b38:	4a27      	ldr	r2, [pc, #156]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b3a:	23bc      	movs	r3, #188	; 0xbc
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	6879      	ldr	r1, [r7, #4]
 8008b40:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	23b0      	movs	r3, #176	; 0xb0
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	4923      	ldr	r1, [pc, #140]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b4a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008b4c:	4b22      	ldr	r3, [pc, #136]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b4e:	4a23      	ldr	r2, [pc, #140]	; (8008bdc <USBD_LL_Init+0xac>)
 8008b50:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008b52:	4b21      	ldr	r3, [pc, #132]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b54:	2208      	movs	r2, #8
 8008b56:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008b58:	4b1f      	ldr	r3, [pc, #124]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008b5e:	4b1e      	ldr	r3, [pc, #120]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b60:	2202      	movs	r2, #2
 8008b62:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008b64:	4b1c      	ldr	r3, [pc, #112]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008b6a:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008b70:	4b19      	ldr	r3, [pc, #100]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008b76:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <USBD_LL_Init+0xa8>)
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7f8 fe61 	bl	8001840 <HAL_PCD_Init>
 8008b7e:	1e03      	subs	r3, r0, #0
 8008b80:	d001      	beq.n	8008b86 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008b82:	f7f7 ff01 	bl	8000988 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	23b0      	movs	r3, #176	; 0xb0
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	58d0      	ldr	r0, [r2, r3]
 8008b8e:	2318      	movs	r3, #24
 8008b90:	2200      	movs	r2, #0
 8008b92:	2100      	movs	r1, #0
 8008b94:	f7fa fc2a 	bl	80033ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	23b0      	movs	r3, #176	; 0xb0
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	58d0      	ldr	r0, [r2, r3]
 8008ba0:	2358      	movs	r3, #88	; 0x58
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	2180      	movs	r1, #128	; 0x80
 8008ba6:	f7fa fc21 	bl	80033ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	23b0      	movs	r3, #176	; 0xb0
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	58d0      	ldr	r0, [r2, r3]
 8008bb2:	2398      	movs	r3, #152	; 0x98
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	2181      	movs	r1, #129	; 0x81
 8008bb8:	f7fa fc18 	bl	80033ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	23b0      	movs	r3, #176	; 0xb0
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	58d0      	ldr	r0, [r2, r3]
 8008bc4:	23d8      	movs	r3, #216	; 0xd8
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	2101      	movs	r1, #1
 8008bca:	f7fa fc0f 	bl	80033ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b002      	add	sp, #8
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000814 	.word	0x20000814
 8008bdc:	40005c00 	.word	0x40005c00

08008be0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be8:	210f      	movs	r1, #15
 8008bea:	187b      	adds	r3, r7, r1
 8008bec:	2200      	movs	r2, #0
 8008bee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf0:	260e      	movs	r6, #14
 8008bf2:	19bb      	adds	r3, r7, r6
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	23b0      	movs	r3, #176	; 0xb0
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	58d3      	ldr	r3, [r2, r3]
 8008c00:	000d      	movs	r5, r1
 8008c02:	187c      	adds	r4, r7, r1
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7f8 ff2b 	bl	8001a60 <HAL_PCD_Start>
 8008c0a:	0003      	movs	r3, r0
 8008c0c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0e:	19bc      	adds	r4, r7, r6
 8008c10:	197b      	adds	r3, r7, r5
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	0018      	movs	r0, r3
 8008c16:	f000 f991 	bl	8008f3c <USBD_Get_USB_Status>
 8008c1a:	0003      	movs	r3, r0
 8008c1c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008c1e:	19bb      	adds	r3, r7, r6
 8008c20:	781b      	ldrb	r3, [r3, #0]
}
 8008c22:	0018      	movs	r0, r3
 8008c24:	46bd      	mov	sp, r7
 8008c26:	b005      	add	sp, #20
 8008c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c2c:	b085      	sub	sp, #20
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	000c      	movs	r4, r1
 8008c34:	0010      	movs	r0, r2
 8008c36:	0019      	movs	r1, r3
 8008c38:	1cfb      	adds	r3, r7, #3
 8008c3a:	1c22      	adds	r2, r4, #0
 8008c3c:	701a      	strb	r2, [r3, #0]
 8008c3e:	1cbb      	adds	r3, r7, #2
 8008c40:	1c02      	adds	r2, r0, #0
 8008c42:	701a      	strb	r2, [r3, #0]
 8008c44:	003b      	movs	r3, r7
 8008c46:	1c0a      	adds	r2, r1, #0
 8008c48:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4a:	260f      	movs	r6, #15
 8008c4c:	19bb      	adds	r3, r7, r6
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c52:	250e      	movs	r5, #14
 8008c54:	197b      	adds	r3, r7, r5
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	23b0      	movs	r3, #176	; 0xb0
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	58d0      	ldr	r0, [r2, r3]
 8008c62:	19bc      	adds	r4, r7, r6
 8008c64:	1cbb      	adds	r3, r7, #2
 8008c66:	781d      	ldrb	r5, [r3, #0]
 8008c68:	003b      	movs	r3, r7
 8008c6a:	881a      	ldrh	r2, [r3, #0]
 8008c6c:	1cfb      	adds	r3, r7, #3
 8008c6e:	7819      	ldrb	r1, [r3, #0]
 8008c70:	002b      	movs	r3, r5
 8008c72:	f7f9 f8c2 	bl	8001dfa <HAL_PCD_EP_Open>
 8008c76:	0003      	movs	r3, r0
 8008c78:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c7a:	250e      	movs	r5, #14
 8008c7c:	197c      	adds	r4, r7, r5
 8008c7e:	19bb      	adds	r3, r7, r6
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	0018      	movs	r0, r3
 8008c84:	f000 f95a 	bl	8008f3c <USBD_Get_USB_Status>
 8008c88:	0003      	movs	r3, r0
 8008c8a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008c8c:	197b      	adds	r3, r7, r5
 8008c8e:	781b      	ldrb	r3, [r3, #0]
}
 8008c90:	0018      	movs	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b005      	add	sp, #20
 8008c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c98 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	000a      	movs	r2, r1
 8008ca2:	1cfb      	adds	r3, r7, #3
 8008ca4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ca6:	210f      	movs	r1, #15
 8008ca8:	187b      	adds	r3, r7, r1
 8008caa:	2200      	movs	r2, #0
 8008cac:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cae:	260e      	movs	r6, #14
 8008cb0:	19bb      	adds	r3, r7, r6
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008cb6:	687a      	ldr	r2, [r7, #4]
 8008cb8:	23b0      	movs	r3, #176	; 0xb0
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	58d2      	ldr	r2, [r2, r3]
 8008cbe:	000d      	movs	r5, r1
 8008cc0:	187c      	adds	r4, r7, r1
 8008cc2:	1cfb      	adds	r3, r7, #3
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	0019      	movs	r1, r3
 8008cc8:	0010      	movs	r0, r2
 8008cca:	f7f9 f90e 	bl	8001eea <HAL_PCD_EP_Close>
 8008cce:	0003      	movs	r3, r0
 8008cd0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cd2:	19bc      	adds	r4, r7, r6
 8008cd4:	197b      	adds	r3, r7, r5
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	0018      	movs	r0, r3
 8008cda:	f000 f92f 	bl	8008f3c <USBD_Get_USB_Status>
 8008cde:	0003      	movs	r3, r0
 8008ce0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008ce2:	19bb      	adds	r3, r7, r6
 8008ce4:	781b      	ldrb	r3, [r3, #0]
}
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	b005      	add	sp, #20
 8008cec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008cee <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
 8008cf6:	000a      	movs	r2, r1
 8008cf8:	1cfb      	adds	r3, r7, #3
 8008cfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cfc:	210f      	movs	r1, #15
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	2200      	movs	r2, #0
 8008d02:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d04:	260e      	movs	r6, #14
 8008d06:	19bb      	adds	r3, r7, r6
 8008d08:	2200      	movs	r2, #0
 8008d0a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	23b0      	movs	r3, #176	; 0xb0
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	58d2      	ldr	r2, [r2, r3]
 8008d14:	000d      	movs	r5, r1
 8008d16:	187c      	adds	r4, r7, r1
 8008d18:	1cfb      	adds	r3, r7, #3
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	0019      	movs	r1, r3
 8008d1e:	0010      	movs	r0, r2
 8008d20:	f7f9 f9c1 	bl	80020a6 <HAL_PCD_EP_SetStall>
 8008d24:	0003      	movs	r3, r0
 8008d26:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d28:	19bc      	adds	r4, r7, r6
 8008d2a:	197b      	adds	r3, r7, r5
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f000 f904 	bl	8008f3c <USBD_Get_USB_Status>
 8008d34:	0003      	movs	r3, r0
 8008d36:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008d38:	19bb      	adds	r3, r7, r6
 8008d3a:	781b      	ldrb	r3, [r3, #0]
}
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	b005      	add	sp, #20
 8008d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	000a      	movs	r2, r1
 8008d4e:	1cfb      	adds	r3, r7, #3
 8008d50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d52:	210f      	movs	r1, #15
 8008d54:	187b      	adds	r3, r7, r1
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d5a:	260e      	movs	r6, #14
 8008d5c:	19bb      	adds	r3, r7, r6
 8008d5e:	2200      	movs	r2, #0
 8008d60:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	23b0      	movs	r3, #176	; 0xb0
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	58d2      	ldr	r2, [r2, r3]
 8008d6a:	000d      	movs	r5, r1
 8008d6c:	187c      	adds	r4, r7, r1
 8008d6e:	1cfb      	adds	r3, r7, #3
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	0019      	movs	r1, r3
 8008d74:	0010      	movs	r0, r2
 8008d76:	f7f9 f9f2 	bl	800215e <HAL_PCD_EP_ClrStall>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7e:	19bc      	adds	r4, r7, r6
 8008d80:	197b      	adds	r3, r7, r5
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	0018      	movs	r0, r3
 8008d86:	f000 f8d9 	bl	8008f3c <USBD_Get_USB_Status>
 8008d8a:	0003      	movs	r3, r0
 8008d8c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008d8e:	19bb      	adds	r3, r7, r6
 8008d90:	781b      	ldrb	r3, [r3, #0]
}
 8008d92:	0018      	movs	r0, r3
 8008d94:	46bd      	mov	sp, r7
 8008d96:	b005      	add	sp, #20
 8008d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d9a <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	000a      	movs	r2, r1
 8008da4:	1cfb      	adds	r3, r7, #3
 8008da6:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	23b0      	movs	r3, #176	; 0xb0
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	58d3      	ldr	r3, [r2, r3]
 8008db0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008db2:	1cfb      	adds	r3, r7, #3
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	b25b      	sxtb	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da0d      	bge.n	8008dd8 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008dbc:	1cfb      	adds	r3, r7, #3
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	227f      	movs	r2, #127	; 0x7f
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	68f9      	ldr	r1, [r7, #12]
 8008dc6:	1c5a      	adds	r2, r3, #1
 8008dc8:	0013      	movs	r3, r2
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	189b      	adds	r3, r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	18cb      	adds	r3, r1, r3
 8008dd2:	3302      	adds	r3, #2
 8008dd4:	781b      	ldrb	r3, [r3, #0]
 8008dd6:	e00d      	b.n	8008df4 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008dd8:	1cfb      	adds	r3, r7, #3
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	227f      	movs	r2, #127	; 0x7f
 8008dde:	401a      	ands	r2, r3
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	23b5      	movs	r3, #181	; 0xb5
 8008de4:	0059      	lsls	r1, r3, #1
 8008de6:	0013      	movs	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	189b      	adds	r3, r3, r2
 8008dec:	00db      	lsls	r3, r3, #3
 8008dee:	18c3      	adds	r3, r0, r3
 8008df0:	185b      	adds	r3, r3, r1
 8008df2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b004      	add	sp, #16
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	000a      	movs	r2, r1
 8008e06:	1cfb      	adds	r3, r7, #3
 8008e08:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0a:	210f      	movs	r1, #15
 8008e0c:	187b      	adds	r3, r7, r1
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e12:	260e      	movs	r6, #14
 8008e14:	19bb      	adds	r3, r7, r6
 8008e16:	2200      	movs	r2, #0
 8008e18:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	23b0      	movs	r3, #176	; 0xb0
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	58d2      	ldr	r2, [r2, r3]
 8008e22:	000d      	movs	r5, r1
 8008e24:	187c      	adds	r4, r7, r1
 8008e26:	1cfb      	adds	r3, r7, #3
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	0019      	movs	r1, r3
 8008e2c:	0010      	movs	r0, r2
 8008e2e:	f7f8 ffb9 	bl	8001da4 <HAL_PCD_SetAddress>
 8008e32:	0003      	movs	r3, r0
 8008e34:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e36:	19bc      	adds	r4, r7, r6
 8008e38:	197b      	adds	r3, r7, r5
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f000 f87d 	bl	8008f3c <USBD_Get_USB_Status>
 8008e42:	0003      	movs	r3, r0
 8008e44:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008e46:	19bb      	adds	r3, r7, r6
 8008e48:	781b      	ldrb	r3, [r3, #0]
}
 8008e4a:	0018      	movs	r0, r3
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b005      	add	sp, #20
 8008e50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e54:	b087      	sub	sp, #28
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	0008      	movs	r0, r1
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	0019      	movs	r1, r3
 8008e60:	230b      	movs	r3, #11
 8008e62:	18fb      	adds	r3, r7, r3
 8008e64:	1c02      	adds	r2, r0, #0
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	2408      	movs	r4, #8
 8008e6a:	193b      	adds	r3, r7, r4
 8008e6c:	1c0a      	adds	r2, r1, #0
 8008e6e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e70:	2117      	movs	r1, #23
 8008e72:	187b      	adds	r3, r7, r1
 8008e74:	2200      	movs	r2, #0
 8008e76:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e78:	2516      	movs	r5, #22
 8008e7a:	197b      	adds	r3, r7, r5
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	23b0      	movs	r3, #176	; 0xb0
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	58d0      	ldr	r0, [r2, r3]
 8008e88:	193b      	adds	r3, r7, r4
 8008e8a:	881d      	ldrh	r5, [r3, #0]
 8008e8c:	000e      	movs	r6, r1
 8008e8e:	187c      	adds	r4, r7, r1
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	230b      	movs	r3, #11
 8008e94:	18fb      	adds	r3, r7, r3
 8008e96:	7819      	ldrb	r1, [r3, #0]
 8008e98:	002b      	movs	r3, r5
 8008e9a:	f7f9 f8bb 	bl	8002014 <HAL_PCD_EP_Transmit>
 8008e9e:	0003      	movs	r3, r0
 8008ea0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea2:	2516      	movs	r5, #22
 8008ea4:	197c      	adds	r4, r7, r5
 8008ea6:	19bb      	adds	r3, r7, r6
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	0018      	movs	r0, r3
 8008eac:	f000 f846 	bl	8008f3c <USBD_Get_USB_Status>
 8008eb0:	0003      	movs	r3, r0
 8008eb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008eb4:	197b      	adds	r3, r7, r5
 8008eb6:	781b      	ldrb	r3, [r3, #0]
}
 8008eb8:	0018      	movs	r0, r3
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	b007      	add	sp, #28
 8008ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ec0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	0008      	movs	r0, r1
 8008eca:	607a      	str	r2, [r7, #4]
 8008ecc:	0019      	movs	r1, r3
 8008ece:	230b      	movs	r3, #11
 8008ed0:	18fb      	adds	r3, r7, r3
 8008ed2:	1c02      	adds	r2, r0, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	2408      	movs	r4, #8
 8008ed8:	193b      	adds	r3, r7, r4
 8008eda:	1c0a      	adds	r2, r1, #0
 8008edc:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ede:	2117      	movs	r1, #23
 8008ee0:	187b      	adds	r3, r7, r1
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee6:	2516      	movs	r5, #22
 8008ee8:	197b      	adds	r3, r7, r5
 8008eea:	2200      	movs	r2, #0
 8008eec:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008eee:	68fa      	ldr	r2, [r7, #12]
 8008ef0:	23b0      	movs	r3, #176	; 0xb0
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	58d0      	ldr	r0, [r2, r3]
 8008ef6:	193b      	adds	r3, r7, r4
 8008ef8:	881d      	ldrh	r5, [r3, #0]
 8008efa:	000e      	movs	r6, r1
 8008efc:	187c      	adds	r4, r7, r1
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	230b      	movs	r3, #11
 8008f02:	18fb      	adds	r3, r7, r3
 8008f04:	7819      	ldrb	r1, [r3, #0]
 8008f06:	002b      	movs	r3, r5
 8008f08:	f7f9 f840 	bl	8001f8c <HAL_PCD_EP_Receive>
 8008f0c:	0003      	movs	r3, r0
 8008f0e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f10:	2516      	movs	r5, #22
 8008f12:	197c      	adds	r4, r7, r5
 8008f14:	19bb      	adds	r3, r7, r6
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	0018      	movs	r0, r3
 8008f1a:	f000 f80f 	bl	8008f3c <USBD_Get_USB_Status>
 8008f1e:	0003      	movs	r3, r0
 8008f20:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008f22:	197b      	adds	r3, r7, r5
 8008f24:	781b      	ldrb	r3, [r3, #0]
}
 8008f26:	0018      	movs	r0, r3
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	b007      	add	sp, #28
 8008f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f2e <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008f32:	f7f7 fb45 	bl	80005c0 <SystemClock_Config>
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	0002      	movs	r2, r0
 8008f44:	1dfb      	adds	r3, r7, #7
 8008f46:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f48:	230f      	movs	r3, #15
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008f50:	1dfb      	adds	r3, r7, #7
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b03      	cmp	r3, #3
 8008f56:	d017      	beq.n	8008f88 <USBD_Get_USB_Status+0x4c>
 8008f58:	dc1b      	bgt.n	8008f92 <USBD_Get_USB_Status+0x56>
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d00f      	beq.n	8008f7e <USBD_Get_USB_Status+0x42>
 8008f5e:	dc18      	bgt.n	8008f92 <USBD_Get_USB_Status+0x56>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d002      	beq.n	8008f6a <USBD_Get_USB_Status+0x2e>
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d005      	beq.n	8008f74 <USBD_Get_USB_Status+0x38>
 8008f68:	e013      	b.n	8008f92 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f6a:	230f      	movs	r3, #15
 8008f6c:	18fb      	adds	r3, r7, r3
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
    break;
 8008f72:	e013      	b.n	8008f9c <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f74:	230f      	movs	r3, #15
 8008f76:	18fb      	adds	r3, r7, r3
 8008f78:	2202      	movs	r2, #2
 8008f7a:	701a      	strb	r2, [r3, #0]
    break;
 8008f7c:	e00e      	b.n	8008f9c <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f7e:	230f      	movs	r3, #15
 8008f80:	18fb      	adds	r3, r7, r3
 8008f82:	2201      	movs	r2, #1
 8008f84:	701a      	strb	r2, [r3, #0]
    break;
 8008f86:	e009      	b.n	8008f9c <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f88:	230f      	movs	r3, #15
 8008f8a:	18fb      	adds	r3, r7, r3
 8008f8c:	2202      	movs	r2, #2
 8008f8e:	701a      	strb	r2, [r3, #0]
    break;
 8008f90:	e004      	b.n	8008f9c <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8008f92:	230f      	movs	r3, #15
 8008f94:	18fb      	adds	r3, r7, r3
 8008f96:	2202      	movs	r2, #2
 8008f98:	701a      	strb	r2, [r3, #0]
    break;
 8008f9a:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 8008f9c:	230f      	movs	r3, #15
 8008f9e:	18fb      	adds	r3, r7, r3
 8008fa0:	781b      	ldrb	r3, [r3, #0]
}
 8008fa2:	0018      	movs	r0, r3
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	b004      	add	sp, #16
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <__errno>:
 8008fac:	4b01      	ldr	r3, [pc, #4]	; (8008fb4 <__errno+0x8>)
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	4770      	bx	lr
 8008fb2:	46c0      	nop			; (mov r8, r8)
 8008fb4:	20000198 	.word	0x20000198

08008fb8 <__libc_init_array>:
 8008fb8:	b570      	push	{r4, r5, r6, lr}
 8008fba:	2600      	movs	r6, #0
 8008fbc:	4d0c      	ldr	r5, [pc, #48]	; (8008ff0 <__libc_init_array+0x38>)
 8008fbe:	4c0d      	ldr	r4, [pc, #52]	; (8008ff4 <__libc_init_array+0x3c>)
 8008fc0:	1b64      	subs	r4, r4, r5
 8008fc2:	10a4      	asrs	r4, r4, #2
 8008fc4:	42a6      	cmp	r6, r4
 8008fc6:	d109      	bne.n	8008fdc <__libc_init_array+0x24>
 8008fc8:	2600      	movs	r6, #0
 8008fca:	f000 f901 	bl	80091d0 <_init>
 8008fce:	4d0a      	ldr	r5, [pc, #40]	; (8008ff8 <__libc_init_array+0x40>)
 8008fd0:	4c0a      	ldr	r4, [pc, #40]	; (8008ffc <__libc_init_array+0x44>)
 8008fd2:	1b64      	subs	r4, r4, r5
 8008fd4:	10a4      	asrs	r4, r4, #2
 8008fd6:	42a6      	cmp	r6, r4
 8008fd8:	d105      	bne.n	8008fe6 <__libc_init_array+0x2e>
 8008fda:	bd70      	pop	{r4, r5, r6, pc}
 8008fdc:	00b3      	lsls	r3, r6, #2
 8008fde:	58eb      	ldr	r3, [r5, r3]
 8008fe0:	4798      	blx	r3
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7ee      	b.n	8008fc4 <__libc_init_array+0xc>
 8008fe6:	00b3      	lsls	r3, r6, #2
 8008fe8:	58eb      	ldr	r3, [r5, r3]
 8008fea:	4798      	blx	r3
 8008fec:	3601      	adds	r6, #1
 8008fee:	e7f2      	b.n	8008fd6 <__libc_init_array+0x1e>
 8008ff0:	0800934c 	.word	0x0800934c
 8008ff4:	0800934c 	.word	0x0800934c
 8008ff8:	0800934c 	.word	0x0800934c
 8008ffc:	08009350 	.word	0x08009350

08009000 <malloc>:
 8009000:	b510      	push	{r4, lr}
 8009002:	4b03      	ldr	r3, [pc, #12]	; (8009010 <malloc+0x10>)
 8009004:	0001      	movs	r1, r0
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	f000 f860 	bl	80090cc <_malloc_r>
 800900c:	bd10      	pop	{r4, pc}
 800900e:	46c0      	nop			; (mov r8, r8)
 8009010:	20000198 	.word	0x20000198

08009014 <free>:
 8009014:	b510      	push	{r4, lr}
 8009016:	4b03      	ldr	r3, [pc, #12]	; (8009024 <free+0x10>)
 8009018:	0001      	movs	r1, r0
 800901a:	6818      	ldr	r0, [r3, #0]
 800901c:	f000 f80c 	bl	8009038 <_free_r>
 8009020:	bd10      	pop	{r4, pc}
 8009022:	46c0      	nop			; (mov r8, r8)
 8009024:	20000198 	.word	0x20000198

08009028 <memset>:
 8009028:	0003      	movs	r3, r0
 800902a:	1882      	adds	r2, r0, r2
 800902c:	4293      	cmp	r3, r2
 800902e:	d100      	bne.n	8009032 <memset+0xa>
 8009030:	4770      	bx	lr
 8009032:	7019      	strb	r1, [r3, #0]
 8009034:	3301      	adds	r3, #1
 8009036:	e7f9      	b.n	800902c <memset+0x4>

08009038 <_free_r>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	0005      	movs	r5, r0
 800903c:	2900      	cmp	r1, #0
 800903e:	d010      	beq.n	8009062 <_free_r+0x2a>
 8009040:	1f0c      	subs	r4, r1, #4
 8009042:	6823      	ldr	r3, [r4, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	da00      	bge.n	800904a <_free_r+0x12>
 8009048:	18e4      	adds	r4, r4, r3
 800904a:	0028      	movs	r0, r5
 800904c:	f000 f8ae 	bl	80091ac <__malloc_lock>
 8009050:	4a1d      	ldr	r2, [pc, #116]	; (80090c8 <_free_r+0x90>)
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d105      	bne.n	8009064 <_free_r+0x2c>
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	6014      	str	r4, [r2, #0]
 800905c:	0028      	movs	r0, r5
 800905e:	f000 f8ad 	bl	80091bc <__malloc_unlock>
 8009062:	bd70      	pop	{r4, r5, r6, pc}
 8009064:	42a3      	cmp	r3, r4
 8009066:	d908      	bls.n	800907a <_free_r+0x42>
 8009068:	6821      	ldr	r1, [r4, #0]
 800906a:	1860      	adds	r0, r4, r1
 800906c:	4283      	cmp	r3, r0
 800906e:	d1f3      	bne.n	8009058 <_free_r+0x20>
 8009070:	6818      	ldr	r0, [r3, #0]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	1841      	adds	r1, r0, r1
 8009076:	6021      	str	r1, [r4, #0]
 8009078:	e7ee      	b.n	8009058 <_free_r+0x20>
 800907a:	001a      	movs	r2, r3
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <_free_r+0x4e>
 8009082:	42a3      	cmp	r3, r4
 8009084:	d9f9      	bls.n	800907a <_free_r+0x42>
 8009086:	6811      	ldr	r1, [r2, #0]
 8009088:	1850      	adds	r0, r2, r1
 800908a:	42a0      	cmp	r0, r4
 800908c:	d10b      	bne.n	80090a6 <_free_r+0x6e>
 800908e:	6820      	ldr	r0, [r4, #0]
 8009090:	1809      	adds	r1, r1, r0
 8009092:	1850      	adds	r0, r2, r1
 8009094:	6011      	str	r1, [r2, #0]
 8009096:	4283      	cmp	r3, r0
 8009098:	d1e0      	bne.n	800905c <_free_r+0x24>
 800909a:	6818      	ldr	r0, [r3, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	1841      	adds	r1, r0, r1
 80090a0:	6011      	str	r1, [r2, #0]
 80090a2:	6053      	str	r3, [r2, #4]
 80090a4:	e7da      	b.n	800905c <_free_r+0x24>
 80090a6:	42a0      	cmp	r0, r4
 80090a8:	d902      	bls.n	80090b0 <_free_r+0x78>
 80090aa:	230c      	movs	r3, #12
 80090ac:	602b      	str	r3, [r5, #0]
 80090ae:	e7d5      	b.n	800905c <_free_r+0x24>
 80090b0:	6821      	ldr	r1, [r4, #0]
 80090b2:	1860      	adds	r0, r4, r1
 80090b4:	4283      	cmp	r3, r0
 80090b6:	d103      	bne.n	80090c0 <_free_r+0x88>
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	1841      	adds	r1, r0, r1
 80090be:	6021      	str	r1, [r4, #0]
 80090c0:	6063      	str	r3, [r4, #4]
 80090c2:	6054      	str	r4, [r2, #4]
 80090c4:	e7ca      	b.n	800905c <_free_r+0x24>
 80090c6:	46c0      	nop			; (mov r8, r8)
 80090c8:	20000220 	.word	0x20000220

080090cc <_malloc_r>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	2303      	movs	r3, #3
 80090d0:	1ccd      	adds	r5, r1, #3
 80090d2:	439d      	bics	r5, r3
 80090d4:	3508      	adds	r5, #8
 80090d6:	0006      	movs	r6, r0
 80090d8:	2d0c      	cmp	r5, #12
 80090da:	d21f      	bcs.n	800911c <_malloc_r+0x50>
 80090dc:	250c      	movs	r5, #12
 80090de:	42a9      	cmp	r1, r5
 80090e0:	d81e      	bhi.n	8009120 <_malloc_r+0x54>
 80090e2:	0030      	movs	r0, r6
 80090e4:	f000 f862 	bl	80091ac <__malloc_lock>
 80090e8:	4925      	ldr	r1, [pc, #148]	; (8009180 <_malloc_r+0xb4>)
 80090ea:	680a      	ldr	r2, [r1, #0]
 80090ec:	0014      	movs	r4, r2
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	d11a      	bne.n	8009128 <_malloc_r+0x5c>
 80090f2:	4f24      	ldr	r7, [pc, #144]	; (8009184 <_malloc_r+0xb8>)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <_malloc_r+0x38>
 80090fa:	0021      	movs	r1, r4
 80090fc:	0030      	movs	r0, r6
 80090fe:	f000 f843 	bl	8009188 <_sbrk_r>
 8009102:	6038      	str	r0, [r7, #0]
 8009104:	0029      	movs	r1, r5
 8009106:	0030      	movs	r0, r6
 8009108:	f000 f83e 	bl	8009188 <_sbrk_r>
 800910c:	1c43      	adds	r3, r0, #1
 800910e:	d12b      	bne.n	8009168 <_malloc_r+0x9c>
 8009110:	230c      	movs	r3, #12
 8009112:	0030      	movs	r0, r6
 8009114:	6033      	str	r3, [r6, #0]
 8009116:	f000 f851 	bl	80091bc <__malloc_unlock>
 800911a:	e003      	b.n	8009124 <_malloc_r+0x58>
 800911c:	2d00      	cmp	r5, #0
 800911e:	dade      	bge.n	80090de <_malloc_r+0x12>
 8009120:	230c      	movs	r3, #12
 8009122:	6033      	str	r3, [r6, #0]
 8009124:	2000      	movs	r0, #0
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	1b5b      	subs	r3, r3, r5
 800912c:	d419      	bmi.n	8009162 <_malloc_r+0x96>
 800912e:	2b0b      	cmp	r3, #11
 8009130:	d903      	bls.n	800913a <_malloc_r+0x6e>
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	18e4      	adds	r4, r4, r3
 8009136:	6025      	str	r5, [r4, #0]
 8009138:	e003      	b.n	8009142 <_malloc_r+0x76>
 800913a:	6863      	ldr	r3, [r4, #4]
 800913c:	42a2      	cmp	r2, r4
 800913e:	d10e      	bne.n	800915e <_malloc_r+0x92>
 8009140:	600b      	str	r3, [r1, #0]
 8009142:	0030      	movs	r0, r6
 8009144:	f000 f83a 	bl	80091bc <__malloc_unlock>
 8009148:	0020      	movs	r0, r4
 800914a:	2207      	movs	r2, #7
 800914c:	300b      	adds	r0, #11
 800914e:	1d23      	adds	r3, r4, #4
 8009150:	4390      	bics	r0, r2
 8009152:	1ac2      	subs	r2, r0, r3
 8009154:	4298      	cmp	r0, r3
 8009156:	d0e6      	beq.n	8009126 <_malloc_r+0x5a>
 8009158:	1a1b      	subs	r3, r3, r0
 800915a:	50a3      	str	r3, [r4, r2]
 800915c:	e7e3      	b.n	8009126 <_malloc_r+0x5a>
 800915e:	6053      	str	r3, [r2, #4]
 8009160:	e7ef      	b.n	8009142 <_malloc_r+0x76>
 8009162:	0022      	movs	r2, r4
 8009164:	6864      	ldr	r4, [r4, #4]
 8009166:	e7c2      	b.n	80090ee <_malloc_r+0x22>
 8009168:	2303      	movs	r3, #3
 800916a:	1cc4      	adds	r4, r0, #3
 800916c:	439c      	bics	r4, r3
 800916e:	42a0      	cmp	r0, r4
 8009170:	d0e1      	beq.n	8009136 <_malloc_r+0x6a>
 8009172:	1a21      	subs	r1, r4, r0
 8009174:	0030      	movs	r0, r6
 8009176:	f000 f807 	bl	8009188 <_sbrk_r>
 800917a:	1c43      	adds	r3, r0, #1
 800917c:	d1db      	bne.n	8009136 <_malloc_r+0x6a>
 800917e:	e7c7      	b.n	8009110 <_malloc_r+0x44>
 8009180:	20000220 	.word	0x20000220
 8009184:	20000224 	.word	0x20000224

08009188 <_sbrk_r>:
 8009188:	2300      	movs	r3, #0
 800918a:	b570      	push	{r4, r5, r6, lr}
 800918c:	4d06      	ldr	r5, [pc, #24]	; (80091a8 <_sbrk_r+0x20>)
 800918e:	0004      	movs	r4, r0
 8009190:	0008      	movs	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f7 fcb6 	bl	8000b04 <_sbrk>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d103      	bne.n	80091a4 <_sbrk_r+0x1c>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d000      	beq.n	80091a4 <_sbrk_r+0x1c>
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	bd70      	pop	{r4, r5, r6, pc}
 80091a6:	46c0      	nop			; (mov r8, r8)
 80091a8:	20000b08 	.word	0x20000b08

080091ac <__malloc_lock>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	4802      	ldr	r0, [pc, #8]	; (80091b8 <__malloc_lock+0xc>)
 80091b0:	f000 f80c 	bl	80091cc <__retarget_lock_acquire_recursive>
 80091b4:	bd10      	pop	{r4, pc}
 80091b6:	46c0      	nop			; (mov r8, r8)
 80091b8:	20000b10 	.word	0x20000b10

080091bc <__malloc_unlock>:
 80091bc:	b510      	push	{r4, lr}
 80091be:	4802      	ldr	r0, [pc, #8]	; (80091c8 <__malloc_unlock+0xc>)
 80091c0:	f000 f805 	bl	80091ce <__retarget_lock_release_recursive>
 80091c4:	bd10      	pop	{r4, pc}
 80091c6:	46c0      	nop			; (mov r8, r8)
 80091c8:	20000b10 	.word	0x20000b10

080091cc <__retarget_lock_acquire_recursive>:
 80091cc:	4770      	bx	lr

080091ce <__retarget_lock_release_recursive>:
 80091ce:	4770      	bx	lr

080091d0 <_init>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr

080091dc <_fini>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	46c0      	nop			; (mov r8, r8)
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr
