
Simulator_HID_CUSTOM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009450  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009510  08009510  00019510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800966c  0800966c  000201fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800966c  0800966c  0001966c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009674  08009674  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009674  08009674  00019674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009678  08009678  00019678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0800967c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000924  200001fc  08009878  000201fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b20  08009878  00020b20  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184a4  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003492  00000000  00000000  000386c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0003bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  0003c948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001809d  00000000  00000000  0003d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eae  00000000  00000000  00055685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000867d1  00000000  00000000  00069533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000efd04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000324c  00000000  00000000  000efd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001fc 	.word	0x200001fc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080094f8 	.word	0x080094f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000200 	.word	0x20000200
 8000104:	080094f8 	.word	0x080094f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	pumahid.hat0 = 0x00;
 80004a0:	4b4a      	ldr	r3, [pc, #296]	; (80005cc <main+0x130>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	pumahid.hat1 = 0x00;
 80004a6:	4b49      	ldr	r3, [pc, #292]	; (80005cc <main+0x130>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	705a      	strb	r2, [r3, #1]
	pumahid.hat2 = 0x00;
 80004ac:	4b47      	ldr	r3, [pc, #284]	; (80005cc <main+0x130>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	709a      	strb	r2, [r3, #2]
	pumahid.key3 = 0x00;
 80004b2:	4b46      	ldr	r3, [pc, #280]	; (80005cc <main+0x130>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	70da      	strb	r2, [r3, #3]
	pumahid.but0 = 0x00;
 80004b8:	4b44      	ldr	r3, [pc, #272]	; (80005cc <main+0x130>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	711a      	strb	r2, [r3, #4]
	pumahid.but1 = 0x00;
 80004be:	4b43      	ldr	r3, [pc, #268]	; (80005cc <main+0x130>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	715a      	strb	r2, [r3, #5]
	pumahid.but2 = 0x00;
 80004c4:	4b41      	ldr	r3, [pc, #260]	; (80005cc <main+0x130>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	719a      	strb	r2, [r3, #6]
	pumahid.but3 = 0x00;
 80004ca:	4b40      	ldr	r3, [pc, #256]	; (80005cc <main+0x130>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	71da      	strb	r2, [r3, #7]
	pumahid.x = 0x0000;
 80004d0:	4b3e      	ldr	r3, [pc, #248]	; (80005cc <main+0x130>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	811a      	strh	r2, [r3, #8]
	pumahid.y = 0x0000;
 80004d6:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <main+0x130>)
 80004d8:	2200      	movs	r2, #0
 80004da:	815a      	strh	r2, [r3, #10]
	pumahid.z = 0x0000;
 80004dc:	4b3b      	ldr	r3, [pc, #236]	; (80005cc <main+0x130>)
 80004de:	2200      	movs	r2, #0
 80004e0:	819a      	strh	r2, [r3, #12]
	pumahid.rx = 0x0000;
 80004e2:	4b3a      	ldr	r3, [pc, #232]	; (80005cc <main+0x130>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	81da      	strh	r2, [r3, #14]
	pumahid.ry = 0x0000;
 80004e8:	4b38      	ldr	r3, [pc, #224]	; (80005cc <main+0x130>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fb85 	bl	8000bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f87b 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f9c3 	bl	8000880 <MX_GPIO_Init>
  MX_ADC_Init();
 80004fa:	f000 f8f1 	bl	80006e0 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004fe:	f000 f98f 	bl	8000820 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000502:	f008 fa4b 	bl	800899c <MX_USB_DEVICE_Init>
  //HAL_ADC_Start_IT(&hadc);
  //HAL_NVIC_EnableIRQ(ADC_IRQ);
  //HAL_NVIC_SetPriority(ADC_IRQ, 0, 0);
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, PinState)
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000506:	2380      	movs	r3, #128	; 0x80
 8000508:	009b      	lsls	r3, r3, #2
 800050a:	4831      	ldr	r0, [pc, #196]	; (80005d0 <main+0x134>)
 800050c:	2200      	movs	r2, #0
 800050e:	0019      	movs	r1, r3
 8000510:	f001 fb0d 	bl	8001b2e <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	4a2d      	ldr	r2, [pc, #180]	; (80005d0 <main+0x134>)
 800051a:	0019      	movs	r1, r3
 800051c:	0010      	movs	r0, r2
 800051e:	f001 fae9 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000522:	0003      	movs	r3, r0
 8000524:	001a      	movs	r2, r3
 8000526:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <main+0x138>)
 8000528:	701a      	strb	r2, [r3, #0]
	  BP_5 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800052a:	2380      	movs	r3, #128	; 0x80
 800052c:	019b      	lsls	r3, r3, #6
 800052e:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <main+0x134>)
 8000530:	0019      	movs	r1, r3
 8000532:	0010      	movs	r0, r2
 8000534:	f001 fade 	bl	8001af4 <HAL_GPIO_ReadPin>
 8000538:	0003      	movs	r3, r0
 800053a:	001a      	movs	r2, r3
 800053c:	4b26      	ldr	r3, [pc, #152]	; (80005d8 <main+0x13c>)
 800053e:	701a      	strb	r2, [r3, #0]
	  BP_6 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	01db      	lsls	r3, r3, #7
 8000544:	4a22      	ldr	r2, [pc, #136]	; (80005d0 <main+0x134>)
 8000546:	0019      	movs	r1, r3
 8000548:	0010      	movs	r0, r2
 800054a:	f001 fad3 	bl	8001af4 <HAL_GPIO_ReadPin>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	4b22      	ldr	r3, [pc, #136]	; (80005dc <main+0x140>)
 8000554:	701a      	strb	r2, [r3, #0]

	  HAL_ADC_Start(&hadc);
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0x144>)
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fd57 	bl	800100c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 800055e:	2301      	movs	r3, #1
 8000560:	425a      	negs	r2, r3
 8000562:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <main+0x144>)
 8000564:	0011      	movs	r1, r2
 8000566:	0018      	movs	r0, r3
 8000568:	f000 fde4 	bl	8001134 <HAL_ADC_PollForConversion>
	  uiAnalogData[0] = HAL_ADC_GetValue(&hadc);
 800056c:	4b1c      	ldr	r3, [pc, #112]	; (80005e0 <main+0x144>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fe7c 	bl	800126c <HAL_ADC_GetValue>
 8000574:	0002      	movs	r2, r0
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <main+0x148>)
 8000578:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 800057a:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <main+0x144>)
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fd99 	bl	80010b4 <HAL_ADC_Stop>
	  /*if (uiAnalogData[0] <= 30)
		  uiAnalogData[0] = 0;

	  uiAnalogData[0] = (uiAnalogData[0]*256)/4096;*/

	  if (BP_5 == 0 /*&& CH == 1*/) pumahid.hat0 = 0x01;
 8000582:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <main+0x13c>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d103      	bne.n	8000592 <main+0xf6>
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <main+0x130>)
 800058c:	2201      	movs	r2, #1
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	e002      	b.n	8000598 <main+0xfc>
	  else pumahid.hat0 = 0x00;
 8000592:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <main+0x130>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
	  if (BP_6 == 0) pumahid.hat1 = 0x02;
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <main+0x140>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <main+0x10c>
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <main+0x130>)
 80005a2:	2202      	movs	r2, #2
 80005a4:	705a      	strb	r2, [r3, #1]
 80005a6:	e002      	b.n	80005ae <main+0x112>
	  else pumahid.hat1 = 0x00;
 80005a8:	4b08      	ldr	r3, [pc, #32]	; (80005cc <main+0x130>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	705a      	strb	r2, [r3, #1]

	  pumahid.x = uiAnalogData[0];
 80005ae:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <main+0x148>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <main+0x130>)
 80005b6:	811a      	strh	r2, [r3, #8]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));
 80005b8:	4904      	ldr	r1, [pc, #16]	; (80005cc <main+0x130>)
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <main+0x14c>)
 80005bc:	2212      	movs	r2, #18
 80005be:	0018      	movs	r0, r3
 80005c0:	f006 ff14 	bl	80073ec <USBD_CUSTOM_HID_SendReport>


	  HAL_Delay(100);
 80005c4:	2064      	movs	r0, #100	; 0x64
 80005c6:	f000 fb89 	bl	8000cdc <HAL_Delay>
	  CH = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80005ca:	e7a3      	b.n	8000514 <main+0x78>
 80005cc:	20000248 	.word	0x20000248
 80005d0:	50000400 	.word	0x50000400
 80005d4:	2000022a 	.word	0x2000022a
 80005d8:	20000240 	.word	0x20000240
 80005dc:	20000228 	.word	0x20000228
 80005e0:	200002f4 	.word	0x200002f4
 80005e4:	200002e0 	.word	0x200002e0
 80005e8:	20000358 	.word	0x20000358

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b09f      	sub	sp, #124	; 0x7c
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	2440      	movs	r4, #64	; 0x40
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2338      	movs	r3, #56	; 0x38
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f008 fea7 	bl	8009350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000602:	232c      	movs	r3, #44	; 0x2c
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	0018      	movs	r0, r3
 8000608:	2314      	movs	r3, #20
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f008 fe9f 	bl	8009350 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	0018      	movs	r0, r3
 8000616:	2328      	movs	r3, #40	; 0x28
 8000618:	001a      	movs	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	f008 fe98 	bl	8009350 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemClock_Config+0xec>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a2d      	ldr	r2, [pc, #180]	; (80006dc <SystemClock_Config+0xf0>)
 8000626:	401a      	ands	r2, r3
 8000628:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemClock_Config+0xec>)
 800062a:	2180      	movs	r1, #128	; 0x80
 800062c:	0109      	lsls	r1, r1, #4
 800062e:	430a      	orrs	r2, r1
 8000630:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000632:	0021      	movs	r1, r4
 8000634:	187b      	adds	r3, r7, r1
 8000636:	2222      	movs	r2, #34	; 0x22
 8000638:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063a:	187b      	adds	r3, r7, r1
 800063c:	2201      	movs	r2, #1
 800063e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2210      	movs	r2, #16
 8000644:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2201      	movs	r2, #1
 800064a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2202      	movs	r2, #2
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	02d2      	lsls	r2, r2, #11
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	03d2      	lsls	r2, r2, #15
 8000666:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	187b      	adds	r3, r7, r1
 800066a:	0018      	movs	r0, r3
 800066c:	f003 f8d6 	bl	800381c <HAL_RCC_OscConfig>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000674:	f000 f99e 	bl	80009b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	212c      	movs	r1, #44	; 0x2c
 800067a:	187b      	adds	r3, r7, r1
 800067c:	220f      	movs	r2, #15
 800067e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2203      	movs	r2, #3
 8000684:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2101      	movs	r1, #1
 800069c:	0018      	movs	r0, r3
 800069e:	f003 fc91 	bl	8003fc4 <HAL_RCC_ClockConfig>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006a6:	f000 f985 	bl	80009b4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	2242      	movs	r2, #66	; 0x42
 80006ae:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2280      	movs	r2, #128	; 0x80
 80006ba:	04d2      	lsls	r2, r2, #19
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	0018      	movs	r0, r3
 80006c2:	f003 fea3 	bl	800440c <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80006ca:	f000 f973 	bl	80009b4 <Error_Handler>
  }
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	b01f      	add	sp, #124	; 0x7c
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	40007000 	.word	0x40007000
 80006dc:	ffffe7ff 	.word	0xffffe7ff

080006e0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e6:	003b      	movs	r3, r7
 80006e8:	0018      	movs	r0, r3
 80006ea:	2308      	movs	r3, #8
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f008 fe2e 	bl	8009350 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80006f4:	4b44      	ldr	r3, [pc, #272]	; (8000808 <MX_ADC_Init+0x128>)
 80006f6:	4a45      	ldr	r2, [pc, #276]	; (800080c <MX_ADC_Init+0x12c>)
 80006f8:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80006fa:	4b43      	ldr	r3, [pc, #268]	; (8000808 <MX_ADC_Init+0x128>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000700:	4b41      	ldr	r3, [pc, #260]	; (8000808 <MX_ADC_Init+0x128>)
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	05d2      	lsls	r2, r2, #23
 8000706:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000708:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <MX_ADC_Init+0x128>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800070e:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <MX_ADC_Init+0x128>)
 8000710:	2200      	movs	r2, #0
 8000712:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000714:	4b3c      	ldr	r3, [pc, #240]	; (8000808 <MX_ADC_Init+0x128>)
 8000716:	2201      	movs	r2, #1
 8000718:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800071a:	4b3b      	ldr	r3, [pc, #236]	; (8000808 <MX_ADC_Init+0x128>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000720:	4b39      	ldr	r3, [pc, #228]	; (8000808 <MX_ADC_Init+0x128>)
 8000722:	2220      	movs	r2, #32
 8000724:	2100      	movs	r1, #0
 8000726:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000728:	4b37      	ldr	r3, [pc, #220]	; (8000808 <MX_ADC_Init+0x128>)
 800072a:	2221      	movs	r2, #33	; 0x21
 800072c:	2100      	movs	r1, #0
 800072e:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <MX_ADC_Init+0x128>)
 8000732:	2200      	movs	r2, #0
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000736:	4b34      	ldr	r3, [pc, #208]	; (8000808 <MX_ADC_Init+0x128>)
 8000738:	22c2      	movs	r2, #194	; 0xc2
 800073a:	32ff      	adds	r2, #255	; 0xff
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <MX_ADC_Init+0x128>)
 8000740:	222c      	movs	r2, #44	; 0x2c
 8000742:	2100      	movs	r1, #0
 8000744:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_ADC_Init+0x128>)
 8000748:	2204      	movs	r2, #4
 800074a:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800074c:	4b2e      	ldr	r3, [pc, #184]	; (8000808 <MX_ADC_Init+0x128>)
 800074e:	2200      	movs	r2, #0
 8000750:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000752:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <MX_ADC_Init+0x128>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000758:	4b2b      	ldr	r3, [pc, #172]	; (8000808 <MX_ADC_Init+0x128>)
 800075a:	2200      	movs	r2, #0
 800075c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800075e:	4b2a      	ldr	r3, [pc, #168]	; (8000808 <MX_ADC_Init+0x128>)
 8000760:	2200      	movs	r2, #0
 8000762:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <MX_ADC_Init+0x128>)
 8000766:	0018      	movs	r0, r3
 8000768:	f000 fadc 	bl	8000d24 <HAL_ADC_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000770:	f000 f920 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000774:	003b      	movs	r3, r7
 8000776:	2201      	movs	r2, #1
 8000778:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800077a:	003b      	movs	r3, r7
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0152      	lsls	r2, r2, #5
 8000780:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000782:	003a      	movs	r2, r7
 8000784:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_ADC_Init+0x128>)
 8000786:	0011      	movs	r1, r2
 8000788:	0018      	movs	r0, r3
 800078a:	f000 fd7b 	bl	8001284 <HAL_ADC_ConfigChannel>
 800078e:	1e03      	subs	r3, r0, #0
 8000790:	d001      	beq.n	8000796 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000792:	f000 f90f 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000796:	003b      	movs	r3, r7
 8000798:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <MX_ADC_Init+0x130>)
 800079a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800079c:	003a      	movs	r2, r7
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_ADC_Init+0x128>)
 80007a0:	0011      	movs	r1, r2
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fd6e 	bl	8001284 <HAL_ADC_ConfigChannel>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80007ac:	f000 f902 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80007b0:	003b      	movs	r3, r7
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_ADC_Init+0x134>)
 80007b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007b6:	003a      	movs	r2, r7
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_ADC_Init+0x128>)
 80007ba:	0011      	movs	r1, r2
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 fd61 	bl	8001284 <HAL_ADC_ConfigChannel>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80007c6:	f000 f8f5 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007ca:	003b      	movs	r3, r7
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_ADC_Init+0x138>)
 80007ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007d0:	003a      	movs	r2, r7
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <MX_ADC_Init+0x128>)
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f000 fd54 	bl	8001284 <HAL_ADC_ConfigChannel>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC_Init+0x104>
  {
    Error_Handler();
 80007e0:	f000 f8e8 	bl	80009b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80007e4:	003b      	movs	r3, r7
 80007e6:	4a0d      	ldr	r2, [pc, #52]	; (800081c <MX_ADC_Init+0x13c>)
 80007e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80007ea:	003a      	movs	r2, r7
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_ADC_Init+0x128>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 fd47 	bl	8001284 <HAL_ADC_ConfigChannel>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 80007fa:	f000 f8db 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	200002f4 	.word	0x200002f4
 800080c:	40012400 	.word	0x40012400
 8000810:	04000002 	.word	0x04000002
 8000814:	10000010 	.word	0x10000010
 8000818:	14000020 	.word	0x14000020
 800081c:	18000040 	.word	0x18000040

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <MX_USART2_UART_Init+0x5c>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800082c:	22e1      	movs	r2, #225	; 0xe1
 800082e:	0252      	lsls	r2, r2, #9
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b0b      	ldr	r3, [pc, #44]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000862:	4b05      	ldr	r3, [pc, #20]	; (8000878 <MX_USART2_UART_Init+0x58>)
 8000864:	0018      	movs	r0, r3
 8000866:	f003 ff45 	bl	80046f4 <HAL_UART_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800086e:	f000 f8a1 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	2000025c 	.word	0x2000025c
 800087c:	40004400 	.word	0x40004400

08000880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b089      	sub	sp, #36	; 0x24
 8000884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000886:	240c      	movs	r4, #12
 8000888:	193b      	adds	r3, r7, r4
 800088a:	0018      	movs	r0, r3
 800088c:	2314      	movs	r3, #20
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f008 fd5d 	bl	8009350 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b43      	ldr	r3, [pc, #268]	; (80009a4 <MX_GPIO_Init+0x124>)
 8000898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <MX_GPIO_Init+0x124>)
 800089c:	2101      	movs	r1, #1
 800089e:	430a      	orrs	r2, r1
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80008a2:	4b40      	ldr	r3, [pc, #256]	; (80009a4 <MX_GPIO_Init+0x124>)
 80008a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008a6:	2201      	movs	r2, #1
 80008a8:	4013      	ands	r3, r2
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	4b3d      	ldr	r3, [pc, #244]	; (80009a4 <MX_GPIO_Init+0x124>)
 80008b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008b2:	4b3c      	ldr	r3, [pc, #240]	; (80009a4 <MX_GPIO_Init+0x124>)
 80008b4:	2102      	movs	r1, #2
 80008b6:	430a      	orrs	r2, r1
 80008b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ba:	4b3a      	ldr	r3, [pc, #232]	; (80009a4 <MX_GPIO_Init+0x124>)
 80008bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008be:	2202      	movs	r2, #2
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80008c6:	2380      	movs	r3, #128	; 0x80
 80008c8:	00d9      	lsls	r1, r3, #3
 80008ca:	23a0      	movs	r3, #160	; 0xa0
 80008cc:	05db      	lsls	r3, r3, #23
 80008ce:	2200      	movs	r2, #0
 80008d0:	0018      	movs	r0, r3
 80008d2:	f001 f92c 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4833      	ldr	r0, [pc, #204]	; (80009a8 <MX_GPIO_Init+0x128>)
 80008dc:	2200      	movs	r2, #0
 80008de:	0019      	movs	r1, r3
 80008e0:	f001 f925 	bl	8001b2e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA7 PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a31      	ldr	r2, [pc, #196]	; (80009ac <MX_GPIO_Init+0x12c>)
 80008e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	193a      	adds	r2, r7, r4
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 ff7a 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000904:	193b      	adds	r3, r7, r4
 8000906:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <MX_GPIO_Init+0x130>)
 8000908:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2200      	movs	r2, #0
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	193b      	adds	r3, r7, r4
 8000918:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <MX_GPIO_Init+0x128>)
 800091a:	0019      	movs	r1, r3
 800091c:	0010      	movs	r0, r2
 800091e:	f000 ff6b 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000922:	0021      	movs	r1, r4
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2280      	movs	r2, #128	; 0x80
 8000928:	00d2      	lsls	r2, r2, #3
 800092a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	000c      	movs	r4, r1
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2201      	movs	r2, #1
 8000932:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2200      	movs	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	193a      	adds	r2, r7, r4
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	05db      	lsls	r3, r3, #23
 8000946:	0011      	movs	r1, r2
 8000948:	0018      	movs	r0, r3
 800094a:	f000 ff55 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_Pin */
  GPIO_InitStruct.Pin = CH_Pin;
 800094e:	0021      	movs	r1, r4
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2280      	movs	r2, #128	; 0x80
 8000954:	0052      	lsls	r2, r2, #1
 8000956:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	000c      	movs	r4, r1
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2202      	movs	r2, #2
 8000964:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH_GPIO_Port, &GPIO_InitStruct);
 8000966:	193b      	adds	r3, r7, r4
 8000968:	4a0f      	ldr	r2, [pc, #60]	; (80009a8 <MX_GPIO_Init+0x128>)
 800096a:	0019      	movs	r1, r3
 800096c:	0010      	movs	r0, r2
 800096e:	f000 ff43 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 8000972:	0021      	movs	r1, r4
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2280      	movs	r2, #128	; 0x80
 8000978:	0092      	lsls	r2, r2, #2
 800097a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2201      	movs	r2, #1
 8000980:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2202      	movs	r2, #2
 8000986:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 800098e:	187b      	adds	r3, r7, r1
 8000990:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <MX_GPIO_Init+0x128>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f000 ff2f 	bl	80017f8 <HAL_GPIO_Init>

}
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	46bd      	mov	sp, r7
 800099e:	b009      	add	sp, #36	; 0x24
 80009a0:	bd90      	pop	{r4, r7, pc}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	40021000 	.word	0x40021000
 80009a8:	50000400 	.word	0x50000400
 80009ac:	00008380 	.word	0x00008380
 80009b0:	0000ec7f 	.word	0x0000ec7f

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	e7fe      	b.n	80009bc <Error_Handler+0x8>
	...

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <HAL_MspInit+0x24>)
 80009c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_MspInit+0x24>)
 80009ca:	2101      	movs	r1, #1
 80009cc:	430a      	orrs	r2, r1
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <HAL_MspInit+0x24>)
 80009d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009d4:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_MspInit+0x24>)
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	0549      	lsls	r1, r1, #21
 80009da:	430a      	orrs	r2, r1
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	240c      	movs	r4, #12
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f008 fca8 	bl	8009350 <memset>
  if(hadc->Instance==ADC1)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <HAL_ADC_MspInit+0x70>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d122      	bne.n	8000a50 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <HAL_ADC_MspInit+0x74>)
 8000a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <HAL_ADC_MspInit+0x74>)
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	0089      	lsls	r1, r1, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a18:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <HAL_ADC_MspInit+0x74>)
 8000a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_ADC_MspInit+0x74>)
 8000a1e:	2101      	movs	r1, #1
 8000a20:	430a      	orrs	r2, r1
 8000a22:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a24:	4b0d      	ldr	r3, [pc, #52]	; (8000a5c <HAL_ADC_MspInit+0x74>)
 8000a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a28:	2201      	movs	r2, #1
 8000a2a:	4013      	ands	r3, r2
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2273      	movs	r2, #115	; 0x73
 8000a34:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2203      	movs	r2, #3
 8000a3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	193a      	adds	r2, r7, r4
 8000a44:	23a0      	movs	r3, #160	; 0xa0
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f000 fed4 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b009      	add	sp, #36	; 0x24
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	40012400 	.word	0x40012400
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b089      	sub	sp, #36	; 0x24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	240c      	movs	r4, #12
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	2314      	movs	r3, #20
 8000a70:	001a      	movs	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	f008 fc6c 	bl	8009350 <memset>
  if(huart->Instance==USART2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <HAL_UART_MspInit+0x80>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d129      	bne.n	8000ad6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	0289      	lsls	r1, r1, #10
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <HAL_UART_MspInit+0x84>)
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000aa8:	0021      	movs	r1, r4
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	220c      	movs	r2, #12
 8000aae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fe91 	bl	80017f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b009      	add	sp, #36	; 0x24
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	40004400 	.word	0x40004400
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f8ca 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <USB_IRQHandler+0x14>)
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f001 f958 	bl	8001dd4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	2000081c 	.word	0x2000081c

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	18d3      	adds	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f008 fbb8 	bl	80092d4 <__errno>
 8000b64:	0003      	movs	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	18d2      	adds	r2, r2, r3
 8000b7e:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20005000 	.word	0x20005000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	20000218 	.word	0x20000218
 8000b98:	20000b20 	.word	0x20000b20

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000ba8:	480d      	ldr	r0, [pc, #52]	; (8000be0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bac:	480d      	ldr	r0, [pc, #52]	; (8000be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bae:	490e      	ldr	r1, [pc, #56]	; (8000be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <LoopForever+0xe>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb4:	e002      	b.n	8000bbc <LoopCopyDataInit>

08000bb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bba:	3304      	adds	r3, #4

08000bbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bc0:	d3f9      	bcc.n	8000bb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bc2:	4a0b      	ldr	r2, [pc, #44]	; (8000bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc4:	4c0b      	ldr	r4, [pc, #44]	; (8000bf4 <LoopForever+0x16>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc8:	e001      	b.n	8000bce <LoopFillZerobss>

08000bca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bcc:	3204      	adds	r2, #4

08000bce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bd0:	d3fb      	bcc.n	8000bca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bd2:	f7ff ffe3 	bl	8000b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bd6:	f008 fb83 	bl	80092e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bda:	f7ff fc5f 	bl	800049c <main>

08000bde <LoopForever>:

LoopForever:
    b LoopForever
 8000bde:	e7fe      	b.n	8000bde <LoopForever>
   ldr   r0, =_estack
 8000be0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8000bec:	0800967c 	.word	0x0800967c
  ldr r2, =_sbss
 8000bf0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8000bf4:	20000b20 	.word	0x20000b20

08000bf8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf8:	e7fe      	b.n	8000bf8 <ADC1_COMP_IRQHandler>
	...

08000bfc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c08:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <HAL_Init+0x3c>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <HAL_Init+0x3c>)
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	430a      	orrs	r2, r1
 8000c12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c14:	2003      	movs	r0, #3
 8000c16:	f000 f811 	bl	8000c3c <HAL_InitTick>
 8000c1a:	1e03      	subs	r3, r0, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	2201      	movs	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e001      	b.n	8000c2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c26:	f7ff fecb 	bl	80009c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
}
 8000c2e:	0018      	movs	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40022000 	.word	0x40022000

08000c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c3c:	b590      	push	{r4, r7, lr}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <HAL_InitTick+0x5c>)
 8000c46:	681c      	ldr	r4, [r3, #0]
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <HAL_InitTick+0x60>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	23fa      	movs	r3, #250	; 0xfa
 8000c50:	0098      	lsls	r0, r3, #2
 8000c52:	f7ff fa59 	bl	8000108 <__udivsi3>
 8000c56:	0003      	movs	r3, r0
 8000c58:	0019      	movs	r1, r3
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f7ff fa54 	bl	8000108 <__udivsi3>
 8000c60:	0003      	movs	r3, r0
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 fdbb 	bl	80017de <HAL_SYSTICK_Config>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	e00f      	b.n	8000c90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d80b      	bhi.n	8000c8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2301      	movs	r3, #1
 8000c7a:	425b      	negs	r3, r3
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fd88 	bl	8001794 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_InitTick+0x64>)
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b003      	add	sp, #12
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	20000004 	.word	0x20000004

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ca8:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <HAL_IncTick+0x1c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	4b05      	ldr	r3, [pc, #20]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	18d2      	adds	r2, r2, r3
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_IncTick+0x20>)
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	20000354 	.word	0x20000354

08000cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ccc:	4b02      	ldr	r3, [pc, #8]	; (8000cd8 <HAL_GetTick+0x10>)
 8000cce:	681b      	ldr	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	20000354 	.word	0x20000354

08000cdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce4:	f7ff fff0 	bl	8000cc8 <HAL_GetTick>
 8000ce8:	0003      	movs	r3, r0
 8000cea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	d005      	beq.n	8000d02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_Delay+0x44>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	189b      	adds	r3, r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	f7ff ffe0 	bl	8000cc8 <HAL_GetTick>
 8000d08:	0002      	movs	r2, r0
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	1ad3      	subs	r3, r2, r3
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d8f7      	bhi.n	8000d04 <HAL_Delay+0x28>
  {
  }
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b004      	add	sp, #16
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e159      	b.n	8000fea <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d10a      	bne.n	8000d54 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2200      	movs	r2, #0
 8000d42:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2250      	movs	r2, #80	; 0x50
 8000d48:	2100      	movs	r1, #0
 8000d4a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fe4a 	bl	80009e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d58:	2210      	movs	r2, #16
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	2b10      	cmp	r3, #16
 8000d5e:	d005      	beq.n	8000d6c <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2204      	movs	r2, #4
 8000d68:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000d6a:	d00b      	beq.n	8000d84 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d70:	2210      	movs	r2, #16
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2250      	movs	r2, #80	; 0x50
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e132      	b.n	8000fea <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d88:	4a9a      	ldr	r2, [pc, #616]	; (8000ff4 <HAL_ADC_Init+0x2d0>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d108      	bne.n	8000db4 <HAL_ADC_Init+0x90>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d101      	bne.n	8000db4 <HAL_ADC_Init+0x90>
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <HAL_ADC_Init+0x92>
 8000db4:	2300      	movs	r3, #0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d149      	bne.n	8000e4e <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	061b      	lsls	r3, r3, #24
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d00b      	beq.n	8000dde <HAL_ADC_Init+0xba>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d005      	beq.n	8000dde <HAL_ADC_Init+0xba>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	2380      	movs	r3, #128	; 0x80
 8000dd8:	061b      	lsls	r3, r3, #24
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d111      	bne.n	8000e02 <HAL_ADC_Init+0xde>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	691a      	ldr	r2, [r3, #16]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	0892      	lsrs	r2, r2, #2
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6919      	ldr	r1, [r3, #16]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	685a      	ldr	r2, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	e014      	b.n	8000e2c <HAL_ADC_Init+0x108>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	0892      	lsrs	r2, r2, #2
 8000e10:	611a      	str	r2, [r3, #16]
 8000e12:	4b79      	ldr	r3, [pc, #484]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e18:	4978      	ldr	r1, [pc, #480]	; (8000ffc <HAL_ADC_Init+0x2d8>)
 8000e1a:	400a      	ands	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	4b76      	ldr	r3, [pc, #472]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4b74      	ldr	r3, [pc, #464]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2118      	movs	r1, #24
 8000e38:	438a      	bics	r2, r1
 8000e3a:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	68d9      	ldr	r1, [r3, #12]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e4e:	4b6a      	ldr	r3, [pc, #424]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	4b69      	ldr	r3, [pc, #420]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e54:	496a      	ldr	r1, [pc, #424]	; (8001000 <HAL_ADC_Init+0x2dc>)
 8000e56:	400a      	ands	r2, r1
 8000e58:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000e5a:	4b67      	ldr	r3, [pc, #412]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e5c:	6819      	ldr	r1, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e62:	065a      	lsls	r2, r3, #25
 8000e64:	4b64      	ldr	r3, [pc, #400]	; (8000ff8 <HAL_ADC_Init+0x2d4>)
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689a      	ldr	r2, [r3, #8]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	055b      	lsls	r3, r3, #21
 8000e74:	4013      	ands	r3, r2
 8000e76:	d108      	bne.n	8000e8a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0549      	lsls	r1, r1, #21
 8000e86:	430a      	orrs	r2, r1
 8000e88:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	495b      	ldr	r1, [pc, #364]	; (8001004 <HAL_ADC_Init+0x2e0>)
 8000e96:	400a      	ands	r2, r1
 8000e98:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	68d9      	ldr	r1, [r3, #12]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	691b      	ldr	r3, [r3, #16]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d101      	bne.n	8000eb0 <HAL_ADC_Init+0x18c>
 8000eac:	2304      	movs	r3, #4
 8000eae:	e000      	b.n	8000eb2 <HAL_ADC_Init+0x18e>
 8000eb0:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000eb2:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2020      	movs	r0, #32
 8000eb8:	5c1b      	ldrb	r3, [r3, r0]
 8000eba:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ebc:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	202c      	movs	r0, #44	; 0x2c
 8000ec2:	5c1b      	ldrb	r3, [r3, r0]
 8000ec4:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ec6:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000ecc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000ed4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000edc:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000eea:	23c2      	movs	r3, #194	; 0xc2
 8000eec:	33ff      	adds	r3, #255	; 0xff
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d00b      	beq.n	8000f0a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	68d9      	ldr	r1, [r3, #12]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f00:	431a      	orrs	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2221      	movs	r2, #33	; 0x21
 8000f0e:	5c9b      	ldrb	r3, [r3, r2]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d11a      	bne.n	8000f4a <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2220      	movs	r2, #32
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	0249      	lsls	r1, r1, #9
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	e00b      	b.n	8000f4a <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f36:	2220      	movs	r2, #32
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	2201      	movs	r2, #1
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f4e:	2b01      	cmp	r3, #1
 8000f50:	d11f      	bne.n	8000f92 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	691a      	ldr	r2, [r3, #16]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	492a      	ldr	r1, [pc, #168]	; (8001008 <HAL_ADC_Init+0x2e4>)
 8000f5e:	400a      	ands	r2, r1
 8000f60:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	6919      	ldr	r1, [r3, #16]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f70:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000f76:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	691a      	ldr	r2, [r3, #16]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	e00e      	b.n	8000fb0 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d107      	bne.n	8000fb0 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	691a      	ldr	r2, [r3, #16]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2101      	movs	r1, #1
 8000fac:	438a      	bics	r2, r1
 8000fae:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	695a      	ldr	r2, [r3, #20]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2107      	movs	r1, #7
 8000fbc:	438a      	bics	r2, r1
 8000fbe:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6959      	ldr	r1, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fdc:	2203      	movs	r2, #3
 8000fde:	4393      	bics	r3, r2
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	fffffefd 	.word	0xfffffefd
 8000ff8:	40012708 	.word	0x40012708
 8000ffc:	ffc3ffff 	.word	0xffc3ffff
 8001000:	fdffffff 	.word	0xfdffffff
 8001004:	fffe0219 	.word	0xfffe0219
 8001008:	fffffc03 	.word	0xfffffc03

0800100c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001014:	230f      	movs	r3, #15
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2204      	movs	r2, #4
 8001024:	4013      	ands	r3, r2
 8001026:	d138      	bne.n	800109a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2250      	movs	r2, #80	; 0x50
 800102c:	5c9b      	ldrb	r3, [r3, r2]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Start+0x2a>
 8001032:	2302      	movs	r3, #2
 8001034:	e038      	b.n	80010a8 <HAL_ADC_Start+0x9c>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2250      	movs	r2, #80	; 0x50
 800103a:	2101      	movs	r1, #1
 800103c:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	2b01      	cmp	r3, #1
 8001044:	d007      	beq.n	8001056 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001046:	230f      	movs	r3, #15
 8001048:	18fc      	adds	r4, r7, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	0018      	movs	r0, r3
 800104e:	f000 f9b9 	bl	80013c4 <ADC_Enable>
 8001052:	0003      	movs	r3, r0
 8001054:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001056:	230f      	movs	r3, #15
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d120      	bne.n	80010a2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <HAL_ADC_Start+0xa4>)
 8001066:	4013      	ands	r3, r2
 8001068:	2280      	movs	r2, #128	; 0x80
 800106a:	0052      	lsls	r2, r2, #1
 800106c:	431a      	orrs	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2250      	movs	r2, #80	; 0x50
 800107c:	2100      	movs	r1, #0
 800107e:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	221c      	movs	r2, #28
 8001086:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2104      	movs	r1, #4
 8001094:	430a      	orrs	r2, r1
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	e003      	b.n	80010a2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800109a:	230f      	movs	r3, #15
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010a2:	230f      	movs	r3, #15
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b005      	add	sp, #20
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	fffff0fe 	.word	0xfffff0fe

080010b4 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80010b4:	b5b0      	push	{r4, r5, r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2250      	movs	r2, #80	; 0x50
 80010c8:	5c9b      	ldrb	r3, [r3, r2]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Stop+0x1e>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e029      	b.n	8001126 <HAL_ADC_Stop+0x72>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2250      	movs	r2, #80	; 0x50
 80010d6:	2101      	movs	r1, #1
 80010d8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80010da:	250f      	movs	r5, #15
 80010dc:	197c      	adds	r4, r7, r5
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f000 fa3e 	bl	8001562 <ADC_ConversionStop>
 80010e6:	0003      	movs	r3, r0
 80010e8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80010ea:	197b      	adds	r3, r7, r5
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d112      	bne.n	8001118 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80010f2:	197c      	adds	r4, r7, r5
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f9cc 	bl	8001494 <ADC_Disable>
 80010fc:	0003      	movs	r3, r0
 80010fe:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001100:	197b      	adds	r3, r7, r5
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800110c:	4a08      	ldr	r2, [pc, #32]	; (8001130 <HAL_ADC_Stop+0x7c>)
 800110e:	4013      	ands	r3, r2
 8001110:	2201      	movs	r2, #1
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2250      	movs	r2, #80	; 0x50
 800111c:	2100      	movs	r1, #0
 800111e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001120:	230f      	movs	r3, #15
 8001122:	18fb      	adds	r3, r7, r3
 8001124:	781b      	ldrb	r3, [r3, #0]
}
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bdb0      	pop	{r4, r5, r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	fffffefe 	.word	0xfffffefe

08001134 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	2b08      	cmp	r3, #8
 800114c:	d102      	bne.n	8001154 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800114e:	2308      	movs	r3, #8
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	e014      	b.n	800117e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2201      	movs	r2, #1
 800115c:	4013      	ands	r3, r2
 800115e:	2b01      	cmp	r3, #1
 8001160:	d10b      	bne.n	800117a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001166:	2220      	movs	r2, #32
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2250      	movs	r2, #80	; 0x50
 8001172:	2100      	movs	r1, #0
 8001174:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e072      	b.n	8001260 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800117a:	230c      	movs	r3, #12
 800117c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800117e:	f7ff fda3 	bl	8000cc8 <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001186:	e01f      	b.n	80011c8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	3301      	adds	r3, #1
 800118c:	d01c      	beq.n	80011c8 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d007      	beq.n	80011a4 <HAL_ADC_PollForConversion+0x70>
 8001194:	f7ff fd98 	bl	8000cc8 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d211      	bcs.n	80011c8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	4013      	ands	r3, r2
 80011ae:	d10b      	bne.n	80011c8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011b4:	2204      	movs	r2, #4
 80011b6:	431a      	orrs	r2, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2250      	movs	r2, #80	; 0x50
 80011c0:	2100      	movs	r1, #0
 80011c2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e04b      	b.n	8001260 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	d0d9      	beq.n	8001188 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	68da      	ldr	r2, [r3, #12]
 80011e8:	23c0      	movs	r3, #192	; 0xc0
 80011ea:	011b      	lsls	r3, r3, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d12e      	bne.n	800124e <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2220      	movs	r2, #32
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d129      	bne.n	800124e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2208      	movs	r2, #8
 8001202:	4013      	ands	r3, r2
 8001204:	2b08      	cmp	r3, #8
 8001206:	d122      	bne.n	800124e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	2204      	movs	r2, #4
 8001210:	4013      	ands	r3, r2
 8001212:	d110      	bne.n	8001236 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	210c      	movs	r1, #12
 8001220:	438a      	bics	r2, r1
 8001222:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_ADC_PollForConversion+0x134>)
 800122a:	4013      	ands	r3, r2
 800122c:	2201      	movs	r2, #1
 800122e:	431a      	orrs	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	655a      	str	r2, [r3, #84]	; 0x54
 8001234:	e00b      	b.n	800124e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123a:	2220      	movs	r2, #32
 800123c:	431a      	orrs	r2, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	2201      	movs	r2, #1
 8001248:	431a      	orrs	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d103      	bne.n	800125e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
}
 8001260:	0018      	movs	r0, r3
 8001262:	46bd      	mov	sp, r7
 8001264:	b004      	add	sp, #16
 8001266:	bd80      	pop	{r7, pc}
 8001268:	fffffefe 	.word	0xfffffefe

0800126c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800127a:	0018      	movs	r0, r3
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2250      	movs	r2, #80	; 0x50
 8001292:	5c9b      	ldrb	r3, [r3, r2]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d101      	bne.n	800129c <HAL_ADC_ConfigChannel+0x18>
 8001298:	2302      	movs	r3, #2
 800129a:	e085      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x124>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2250      	movs	r2, #80	; 0x50
 80012a0:	2101      	movs	r1, #1
 80012a2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2204      	movs	r2, #4
 80012ac:	4013      	ands	r3, r2
 80012ae:	d00b      	beq.n	80012c8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012b4:	2220      	movs	r2, #32
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2250      	movs	r2, #80	; 0x50
 80012c0:	2100      	movs	r1, #0
 80012c2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e06f      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <HAL_ADC_ConfigChannel+0x12c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d035      	beq.n	800133e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	035b      	lsls	r3, r3, #13
 80012de:	0b5a      	lsrs	r2, r3, #13
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	430a      	orrs	r2, r1
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	02db      	lsls	r3, r3, #11
 80012f0:	4013      	ands	r3, r2
 80012f2:	d009      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 80012fa:	2180      	movs	r1, #128	; 0x80
 80012fc:	0409      	lsls	r1, r1, #16
 80012fe:	430a      	orrs	r2, r1
 8001300:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8001302:	200a      	movs	r0, #10
 8001304:	f000 f97a 	bl	80015fc <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	d006      	beq.n	8001322 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	4b26      	ldr	r3, [pc, #152]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 800131a:	2180      	movs	r1, #128	; 0x80
 800131c:	03c9      	lsls	r1, r1, #15
 800131e:	430a      	orrs	r2, r1
 8001320:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	025b      	lsls	r3, r3, #9
 800132a:	4013      	ands	r3, r2
 800132c:	d037      	beq.n	800139e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 800132e:	4b21      	ldr	r3, [pc, #132]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0449      	lsls	r1, r1, #17
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	e02f      	b.n	800139e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	035b      	lsls	r3, r3, #13
 800134a:	0b5b      	lsrs	r3, r3, #13
 800134c:	43d9      	mvns	r1, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	400a      	ands	r2, r1
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	02db      	lsls	r3, r3, #11
 800135e:	4013      	ands	r3, r2
 8001360:	d005      	beq.n	800136e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001362:	4b14      	ldr	r3, [pc, #80]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <HAL_ADC_ConfigChannel+0x134>)
 800136a:	400a      	ands	r2, r1
 800136c:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	029b      	lsls	r3, r3, #10
 8001376:	4013      	ands	r3, r2
 8001378:	d005      	beq.n	8001386 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001380:	490e      	ldr	r1, [pc, #56]	; (80013bc <HAL_ADC_ConfigChannel+0x138>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	2380      	movs	r3, #128	; 0x80
 800138c:	025b      	lsls	r3, r3, #9
 800138e:	4013      	ands	r3, r2
 8001390:	d005      	beq.n	800139e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <HAL_ADC_ConfigChannel+0x130>)
 8001398:	4909      	ldr	r1, [pc, #36]	; (80013c0 <HAL_ADC_ConfigChannel+0x13c>)
 800139a:	400a      	ands	r2, r1
 800139c:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2250      	movs	r2, #80	; 0x50
 80013a2:	2100      	movs	r1, #0
 80013a4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	00001001 	.word	0x00001001
 80013b4:	40012708 	.word	0x40012708
 80013b8:	ff7fffff 	.word	0xff7fffff
 80013bc:	ffbfffff 	.word	0xffbfffff
 80013c0:	feffffff 	.word	0xfeffffff

080013c4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2203      	movs	r2, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d108      	bne.n	80013f0 <ADC_Enable+0x2c>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2201      	movs	r2, #1
 80013e6:	4013      	ands	r3, r2
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <ADC_Enable+0x2c>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <ADC_Enable+0x2e>
 80013f0:	2300      	movs	r3, #0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d146      	bne.n	8001484 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <ADC_Enable+0xcc>)
 80013fe:	4013      	ands	r3, r2
 8001400:	d00d      	beq.n	800141e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001406:	2210      	movs	r2, #16
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	2201      	movs	r2, #1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e033      	b.n	8001486 <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	430a      	orrs	r2, r1
 800142c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800142e:	2001      	movs	r0, #1
 8001430:	f000 f8e4 	bl	80015fc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001434:	f7ff fc48 	bl	8000cc8 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800143c:	e01b      	b.n	8001476 <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800143e:	f7ff fc43 	bl	8000cc8 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b0a      	cmp	r3, #10
 800144a:	d914      	bls.n	8001476 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2201      	movs	r2, #1
 8001454:	4013      	ands	r3, r2
 8001456:	2b01      	cmp	r3, #1
 8001458:	d00d      	beq.n	8001476 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800145e:	2210      	movs	r2, #16
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	2201      	movs	r2, #1
 800146c:	431a      	orrs	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e007      	b.n	8001486 <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2201      	movs	r2, #1
 800147e:	4013      	ands	r3, r2
 8001480:	2b01      	cmp	r3, #1
 8001482:	d1dc      	bne.n	800143e <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b004      	add	sp, #16
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	80000017 	.word	0x80000017

08001494 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2203      	movs	r2, #3
 80014a8:	4013      	ands	r3, r2
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d108      	bne.n	80014c0 <ADC_Disable+0x2c>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <ADC_Disable+0x2c>
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <ADC_Disable+0x2e>
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d048      	beq.n	8001558 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2205      	movs	r2, #5
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d110      	bne.n	80014f6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2102      	movs	r1, #2
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2203      	movs	r2, #3
 80014ea:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ec:	f7ff fbec 	bl	8000cc8 <HAL_GetTick>
 80014f0:	0003      	movs	r3, r0
 80014f2:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80014f4:	e029      	b.n	800154a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	2210      	movs	r2, #16
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	2201      	movs	r2, #1
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e023      	b.n	800155a <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001512:	f7ff fbd9 	bl	8000cc8 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b0a      	cmp	r3, #10
 800151e:	d914      	bls.n	800154a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2201      	movs	r2, #1
 8001528:	4013      	ands	r3, r2
 800152a:	2b01      	cmp	r3, #1
 800152c:	d10d      	bne.n	800154a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	2210      	movs	r2, #16
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	2201      	movs	r2, #1
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e007      	b.n	800155a <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2201      	movs	r2, #1
 8001552:	4013      	ands	r3, r2
 8001554:	2b01      	cmp	r3, #1
 8001556:	d0dc      	beq.n	8001512 <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	0018      	movs	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}

08001562 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2204      	movs	r2, #4
 8001576:	4013      	ands	r3, r2
 8001578:	d03a      	beq.n	80015f0 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2204      	movs	r2, #4
 8001582:	4013      	ands	r3, r2
 8001584:	2b04      	cmp	r3, #4
 8001586:	d10d      	bne.n	80015a4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001592:	d107      	bne.n	80015a4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	2110      	movs	r1, #16
 80015a0:	430a      	orrs	r2, r1
 80015a2:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80015a4:	f7ff fb90 	bl	8000cc8 <HAL_GetTick>
 80015a8:	0003      	movs	r3, r0
 80015aa:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80015ac:	e01a      	b.n	80015e4 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80015ae:	f7ff fb8b 	bl	8000cc8 <HAL_GetTick>
 80015b2:	0002      	movs	r2, r0
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b0a      	cmp	r3, #10
 80015ba:	d913      	bls.n	80015e4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d00d      	beq.n	80015e4 <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015cc:	2210      	movs	r2, #16
 80015ce:	431a      	orrs	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	2201      	movs	r2, #1
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e006      	b.n	80015f2 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2204      	movs	r2, #4
 80015ec:	4013      	ands	r3, r2
 80015ee:	d1de      	bne.n	80015ae <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	0018      	movs	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	b004      	add	sp, #16
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <ADC_DelayMicroSecond+0x38>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	490b      	ldr	r1, [pc, #44]	; (8001638 <ADC_DelayMicroSecond+0x3c>)
 800160a:	0018      	movs	r0, r3
 800160c:	f7fe fd7c 	bl	8000108 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4353      	muls	r3, r2
 8001618:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800161a:	e002      	b.n	8001622 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	3b01      	subs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f9      	bne.n	800161c <ADC_DelayMicroSecond+0x20>
  } 
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	20000000 	.word	0x20000000
 8001638:	000f4240 	.word	0x000f4240

0800163c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	0002      	movs	r2, r0
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b7f      	cmp	r3, #127	; 0x7f
 800164e:	d809      	bhi.n	8001664 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001650:	1dfb      	adds	r3, r7, #7
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	001a      	movs	r2, r3
 8001656:	231f      	movs	r3, #31
 8001658:	401a      	ands	r2, r3
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <__NVIC_EnableIRQ+0x30>)
 800165c:	2101      	movs	r1, #1
 800165e:	4091      	lsls	r1, r2
 8001660:	000a      	movs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]
  }
}
 8001664:	46c0      	nop			; (mov r8, r8)
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}
 800166c:	e000e100 	.word	0xe000e100

08001670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	6039      	str	r1, [r7, #0]
 800167a:	1dfb      	adds	r3, r7, #7
 800167c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800167e:	1dfb      	adds	r3, r7, #7
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b7f      	cmp	r3, #127	; 0x7f
 8001684:	d828      	bhi.n	80016d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001686:	4a2f      	ldr	r2, [pc, #188]	; (8001744 <__NVIC_SetPriority+0xd4>)
 8001688:	1dfb      	adds	r3, r7, #7
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b25b      	sxtb	r3, r3
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	33c0      	adds	r3, #192	; 0xc0
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	589b      	ldr	r3, [r3, r2]
 8001696:	1dfa      	adds	r2, r7, #7
 8001698:	7812      	ldrb	r2, [r2, #0]
 800169a:	0011      	movs	r1, r2
 800169c:	2203      	movs	r2, #3
 800169e:	400a      	ands	r2, r1
 80016a0:	00d2      	lsls	r2, r2, #3
 80016a2:	21ff      	movs	r1, #255	; 0xff
 80016a4:	4091      	lsls	r1, r2
 80016a6:	000a      	movs	r2, r1
 80016a8:	43d2      	mvns	r2, r2
 80016aa:	401a      	ands	r2, r3
 80016ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	019b      	lsls	r3, r3, #6
 80016b2:	22ff      	movs	r2, #255	; 0xff
 80016b4:	401a      	ands	r2, r3
 80016b6:	1dfb      	adds	r3, r7, #7
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	0018      	movs	r0, r3
 80016bc:	2303      	movs	r3, #3
 80016be:	4003      	ands	r3, r0
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016c4:	481f      	ldr	r0, [pc, #124]	; (8001744 <__NVIC_SetPriority+0xd4>)
 80016c6:	1dfb      	adds	r3, r7, #7
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	089b      	lsrs	r3, r3, #2
 80016ce:	430a      	orrs	r2, r1
 80016d0:	33c0      	adds	r3, #192	; 0xc0
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016d6:	e031      	b.n	800173c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <__NVIC_SetPriority+0xd8>)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	0019      	movs	r1, r3
 80016e0:	230f      	movs	r3, #15
 80016e2:	400b      	ands	r3, r1
 80016e4:	3b08      	subs	r3, #8
 80016e6:	089b      	lsrs	r3, r3, #2
 80016e8:	3306      	adds	r3, #6
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	18d3      	adds	r3, r2, r3
 80016ee:	3304      	adds	r3, #4
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1dfa      	adds	r2, r7, #7
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	0011      	movs	r1, r2
 80016f8:	2203      	movs	r2, #3
 80016fa:	400a      	ands	r2, r1
 80016fc:	00d2      	lsls	r2, r2, #3
 80016fe:	21ff      	movs	r1, #255	; 0xff
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	43d2      	mvns	r2, r2
 8001706:	401a      	ands	r2, r3
 8001708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	401a      	ands	r2, r3
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	2303      	movs	r3, #3
 800171a:	4003      	ands	r3, r0
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <__NVIC_SetPriority+0xd8>)
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	001c      	movs	r4, r3
 8001728:	230f      	movs	r3, #15
 800172a:	4023      	ands	r3, r4
 800172c:	3b08      	subs	r3, #8
 800172e:	089b      	lsrs	r3, r3, #2
 8001730:	430a      	orrs	r2, r1
 8001732:	3306      	adds	r3, #6
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	18c3      	adds	r3, r0, r3
 8001738:	3304      	adds	r3, #4
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b003      	add	sp, #12
 8001742:	bd90      	pop	{r4, r7, pc}
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1e5a      	subs	r2, r3, #1
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	045b      	lsls	r3, r3, #17
 800175c:	429a      	cmp	r2, r3
 800175e:	d301      	bcc.n	8001764 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001760:	2301      	movs	r3, #1
 8001762:	e010      	b.n	8001786 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <SysTick_Config+0x44>)
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	3a01      	subs	r2, #1
 800176a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176c:	2301      	movs	r3, #1
 800176e:	425b      	negs	r3, r3
 8001770:	2103      	movs	r1, #3
 8001772:	0018      	movs	r0, r3
 8001774:	f7ff ff7c 	bl	8001670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x44>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x44>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	0018      	movs	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	210f      	movs	r1, #15
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	1c02      	adds	r2, r0, #0
 80017a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	187b      	adds	r3, r7, r1
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	0011      	movs	r1, r2
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff ff5d 	bl	8001670 <__NVIC_SetPriority>
}
 80017b6:	46c0      	nop			; (mov r8, r8)
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b004      	add	sp, #16
 80017bc:	bd80      	pop	{r7, pc}

080017be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	0002      	movs	r2, r0
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017ca:	1dfb      	adds	r3, r7, #7
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff ff33 	bl	800163c <__NVIC_EnableIRQ>
}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	b002      	add	sp, #8
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff ffaf 	bl	800174c <SysTick_Config>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800180e:	e155      	b.n	8001abc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	4091      	lsls	r1, r2
 800181a:	000a      	movs	r2, r1
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0x30>
 8001826:	e146      	b.n	8001ab6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2203      	movs	r2, #3
 800183a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	409a      	lsls	r2, r3
 800184e:	0013      	movs	r3, r2
 8001850:	43da      	mvns	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	409a      	lsls	r2, r3
 8001862:	0013      	movs	r3, r2
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	43da      	mvns	r2, r3
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	2201      	movs	r2, #1
 800188e:	401a      	ands	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	409a      	lsls	r2, r3
 8001894:	0013      	movs	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2203      	movs	r2, #3
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	409a      	lsls	r2, r3
 80018bc:	0013      	movs	r3, r2
 80018be:	43da      	mvns	r2, r3
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	409a      	lsls	r2, r3
 80018d0:	0013      	movs	r3, r2
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2203      	movs	r2, #3
 80018e4:	4013      	ands	r3, r2
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	0092      	lsls	r2, r2, #2
 80018f4:	58d3      	ldr	r3, [r2, r3]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2207      	movs	r2, #7
 80018fc:	4013      	ands	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	409a      	lsls	r2, r3
 8001904:	0013      	movs	r3, r2
 8001906:	43da      	mvns	r2, r3
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2107      	movs	r1, #7
 8001916:	400b      	ands	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	0092      	lsls	r2, r2, #2
 800192e:	6939      	ldr	r1, [r7, #16]
 8001930:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	409a      	lsls	r2, r3
 8001940:	0013      	movs	r3, r2
 8001942:	43da      	mvns	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2203      	movs	r2, #3
 8001950:	401a      	ands	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	409a      	lsls	r2, r3
 8001958:	0013      	movs	r3, r2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	23c0      	movs	r3, #192	; 0xc0
 800196c:	029b      	lsls	r3, r3, #10
 800196e:	4013      	ands	r3, r2
 8001970:	d100      	bne.n	8001974 <HAL_GPIO_Init+0x17c>
 8001972:	e0a0      	b.n	8001ab6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b57      	ldr	r3, [pc, #348]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 8001976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001978:	4b56      	ldr	r3, [pc, #344]	; (8001ad4 <HAL_GPIO_Init+0x2dc>)
 800197a:	2101      	movs	r1, #1
 800197c:	430a      	orrs	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001980:	4a55      	ldr	r2, [pc, #340]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	589b      	ldr	r3, [r3, r2]
 800198c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	23a0      	movs	r3, #160	; 0xa0
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d01f      	beq.n	80019ee <HAL_GPIO_Init+0x1f6>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	; (8001adc <HAL_GPIO_Init+0x2e4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d019      	beq.n	80019ea <HAL_GPIO_Init+0x1f2>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2e8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d013      	beq.n	80019e6 <HAL_GPIO_Init+0x1ee>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2ec>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d00d      	beq.n	80019e2 <HAL_GPIO_Init+0x1ea>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_GPIO_Init+0x2f0>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d007      	beq.n	80019de <HAL_GPIO_Init+0x1e6>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a46      	ldr	r2, [pc, #280]	; (8001aec <HAL_GPIO_Init+0x2f4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d6:	2305      	movs	r3, #5
 80019d8:	e00a      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019da:	2306      	movs	r3, #6
 80019dc:	e008      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019de:	2304      	movs	r3, #4
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e2:	2303      	movs	r3, #3
 80019e4:	e004      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x1f8>
 80019ee:	2300      	movs	r3, #0
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	2103      	movs	r1, #3
 80019f4:	400a      	ands	r2, r1
 80019f6:	0092      	lsls	r2, r2, #2
 80019f8:	4093      	lsls	r3, r2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a00:	4935      	ldr	r1, [pc, #212]	; (8001ad8 <HAL_GPIO_Init+0x2e0>)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	089b      	lsrs	r3, r3, #2
 8001a06:	3302      	adds	r3, #2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a0e:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	43da      	mvns	r2, r3
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	4013      	ands	r3, r2
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a38:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a5c:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	2380      	movs	r3, #128	; 0x80
 8001a78:	035b      	lsls	r3, r3, #13
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	43da      	mvns	r2, r3
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	039b      	lsls	r3, r3, #14
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_GPIO_Init+0x2f8>)
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	40da      	lsrs	r2, r3
 8001ac4:	1e13      	subs	r3, r2, #0
 8001ac6:	d000      	beq.n	8001aca <HAL_GPIO_Init+0x2d2>
 8001ac8:	e6a2      	b.n	8001810 <HAL_GPIO_Init+0x18>
  }
}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b006      	add	sp, #24
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000
 8001adc:	50000400 	.word	0x50000400
 8001ae0:	50000800 	.word	0x50000800
 8001ae4:	50000c00 	.word	0x50000c00
 8001ae8:	50001000 	.word	0x50001000
 8001aec:	50001c00 	.word	0x50001c00
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	000a      	movs	r2, r1
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	1cba      	adds	r2, r7, #2
 8001b08:	8812      	ldrh	r2, [r2, #0]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b0e:	230f      	movs	r3, #15
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
 8001b16:	e003      	b.n	8001b20 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b18:	230f      	movs	r3, #15
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b20:	230f      	movs	r3, #15
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	781b      	ldrb	r3, [r3, #0]
}
 8001b26:	0018      	movs	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	b004      	add	sp, #16
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	0008      	movs	r0, r1
 8001b38:	0011      	movs	r1, r2
 8001b3a:	1cbb      	adds	r3, r7, #2
 8001b3c:	1c02      	adds	r2, r0, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
 8001b40:	1c7b      	adds	r3, r7, #1
 8001b42:	1c0a      	adds	r2, r1, #0
 8001b44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b46:	1c7b      	adds	r3, r7, #1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d004      	beq.n	8001b58 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b4e:	1cbb      	adds	r3, r7, #2
 8001b50:	881a      	ldrh	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001b56:	e003      	b.n	8001b60 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001b58:	1cbb      	adds	r3, r7, #2
 8001b5a:	881a      	ldrh	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b6a:	b08b      	sub	sp, #44	; 0x2c
 8001b6c:	af06      	add	r7, sp, #24
 8001b6e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e0ff      	b.n	8001d7a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a81      	ldr	r2, [pc, #516]	; (8001d84 <HAL_PCD_Init+0x21c>)
 8001b7e:	5c9b      	ldrb	r3, [r3, r2]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d108      	bne.n	8001b98 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	23aa      	movs	r3, #170	; 0xaa
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	0018      	movs	r0, r3
 8001b94:	f007 f87e 	bl	8008c94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a7a      	ldr	r2, [pc, #488]	; (8001d84 <HAL_PCD_Init+0x21c>)
 8001b9c:	2103      	movs	r1, #3
 8001b9e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f003 fa8d 	bl	80050c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001baa:	230f      	movs	r3, #15
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	e058      	b.n	8001c66 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bb4:	200f      	movs	r0, #15
 8001bb6:	183b      	adds	r3, r7, r0
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	1c5a      	adds	r2, r3, #1
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	00db      	lsls	r3, r3, #3
 8001bc6:	18cb      	adds	r3, r1, r3
 8001bc8:	3301      	adds	r3, #1
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bce:	183b      	adds	r3, r7, r0
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	1c5a      	adds	r2, r3, #1
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	183a      	adds	r2, r7, r0
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001be4:	0004      	movs	r4, r0
 8001be6:	183b      	adds	r3, r7, r0
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	193b      	adds	r3, r7, r4
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	b298      	uxth	r0, r3
 8001bf0:	6879      	ldr	r1, [r7, #4]
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	18cb      	adds	r3, r1, r3
 8001bfc:	3336      	adds	r3, #54	; 0x36
 8001bfe:	1c02      	adds	r2, r0, #0
 8001c00:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	1c5a      	adds	r2, r3, #1
 8001c0a:	0013      	movs	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	189b      	adds	r3, r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	18cb      	adds	r3, r1, r3
 8001c14:	3303      	adds	r3, #3
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1a:	193b      	adds	r3, r7, r4
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	0013      	movs	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	189b      	adds	r3, r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	18cb      	adds	r3, r1, r3
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	0013      	movs	r3, r2
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	189b      	adds	r3, r3, r2
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	18cb      	adds	r3, r1, r3
 8001c40:	333c      	adds	r3, #60	; 0x3c
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c46:	193b      	adds	r3, r7, r4
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	0013      	movs	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	189b      	adds	r3, r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	18cb      	adds	r3, r1, r3
 8001c56:	3340      	adds	r3, #64	; 0x40
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	3201      	adds	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
 8001c66:	210f      	movs	r1, #15
 8001c68:	187b      	adds	r3, r7, r1
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d39f      	bcc.n	8001bb4 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e056      	b.n	8001d2a <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c7c:	240f      	movs	r4, #15
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	236a      	movs	r3, #106	; 0x6a
 8001c86:	33ff      	adds	r3, #255	; 0xff
 8001c88:	0019      	movs	r1, r3
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	18c3      	adds	r3, r0, r3
 8001c94:	185b      	adds	r3, r3, r1
 8001c96:	2200      	movs	r2, #0
 8001c98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c9a:	193b      	adds	r3, r7, r4
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	23b4      	movs	r3, #180	; 0xb4
 8001ca2:	0059      	lsls	r1, r3, #1
 8001ca4:	0013      	movs	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	189b      	adds	r3, r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	18c3      	adds	r3, r0, r3
 8001cae:	185b      	adds	r3, r3, r1
 8001cb0:	193a      	adds	r2, r7, r4
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cb6:	193b      	adds	r3, r7, r4
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	236c      	movs	r3, #108	; 0x6c
 8001cbe:	33ff      	adds	r3, #255	; 0xff
 8001cc0:	0019      	movs	r1, r3
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	189b      	adds	r3, r3, r2
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	18c3      	adds	r3, r0, r3
 8001ccc:	185b      	adds	r3, r3, r1
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd2:	193b      	adds	r3, r7, r4
 8001cd4:	781a      	ldrb	r2, [r3, #0]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	23bc      	movs	r3, #188	; 0xbc
 8001cda:	0059      	lsls	r1, r3, #1
 8001cdc:	0013      	movs	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	189b      	adds	r3, r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	18c3      	adds	r3, r0, r3
 8001ce6:	185b      	adds	r3, r3, r1
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	781a      	ldrb	r2, [r3, #0]
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	23be      	movs	r3, #190	; 0xbe
 8001cf4:	0059      	lsls	r1, r3, #1
 8001cf6:	0013      	movs	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	189b      	adds	r3, r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	18c3      	adds	r3, r0, r3
 8001d00:	185b      	adds	r3, r3, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d06:	193b      	adds	r3, r7, r4
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	23c0      	movs	r3, #192	; 0xc0
 8001d0e:	0059      	lsls	r1, r3, #1
 8001d10:	0013      	movs	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	189b      	adds	r3, r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	18c3      	adds	r3, r0, r3
 8001d1a:	185b      	adds	r3, r3, r1
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d20:	193b      	adds	r3, r7, r4
 8001d22:	781a      	ldrb	r2, [r3, #0]
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	3201      	adds	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	781a      	ldrb	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d3a1      	bcc.n	8001c7c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	466a      	mov	r2, sp
 8001d40:	0011      	movs	r1, r2
 8001d42:	001a      	movs	r2, r3
 8001d44:	3210      	adds	r2, #16
 8001d46:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001d48:	c170      	stmia	r1!, {r4, r5, r6}
 8001d4a:	ca30      	ldmia	r2!, {r4, r5}
 8001d4c:	c130      	stmia	r1!, {r4, r5}
 8001d4e:	6859      	ldr	r1, [r3, #4]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 f9d0 	bl	80050f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	; 0x24
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_PCD_Init+0x21c>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d103      	bne.n	8001d78 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f001 fd1c 	bl	80037b0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b005      	add	sp, #20
 8001d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	000002a9 	.word	0x000002a9

08001d88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	23aa      	movs	r3, #170	; 0xaa
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_Start+0x18>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e014      	b.n	8001dca <HAL_PCD_Start+0x42>
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	23aa      	movs	r3, #170	; 0xaa
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	2101      	movs	r1, #1
 8001da8:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	0018      	movs	r0, r3
 8001db0:	f003 f972 	bl	8005098 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0018      	movs	r0, r3
 8001dba:	f005 f8cd 	bl	8006f58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	23aa      	movs	r3, #170	; 0xaa
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	0018      	movs	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	b002      	add	sp, #8
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f005 f8cf 	bl	8006f84 <USB_ReadInterrupts>
 8001de6:	0002      	movs	r2, r0
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	021b      	lsls	r3, r3, #8
 8001dec:	401a      	ands	r2, r3
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	021b      	lsls	r3, r3, #8
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d103      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f000 fba3 	bl	8002544 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f005 f8be 	bl	8006f84 <USB_ReadInterrupts>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d114      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2244      	movs	r2, #68	; 0x44
 8001e1e:	5a9b      	ldrh	r3, [r3, r2]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	49a2      	ldr	r1, [pc, #648]	; (80020b0 <HAL_PCD_IRQHandler+0x2dc>)
 8001e28:	400a      	ands	r2, r1
 8001e2a:	b291      	uxth	r1, r2
 8001e2c:	2244      	movs	r2, #68	; 0x44
 8001e2e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f006 ffb1 	bl	8008d9a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	f000 f945 	bl	80020cc <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	0018      	movs	r0, r3
 8001e48:	f005 f89c 	bl	8006f84 <USB_ReadInterrupts>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	01db      	lsls	r3, r3, #7
 8001e52:	401a      	ands	r2, r3
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	01db      	lsls	r3, r3, #7
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d10b      	bne.n	8001e74 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2244      	movs	r2, #68	; 0x44
 8001e62:	5a9b      	ldrh	r3, [r3, r2]
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4992      	ldr	r1, [pc, #584]	; (80020b4 <HAL_PCD_IRQHandler+0x2e0>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	b291      	uxth	r1, r2
 8001e70:	2244      	movs	r2, #68	; 0x44
 8001e72:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f005 f883 	bl	8006f84 <USB_ReadInterrupts>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	019b      	lsls	r3, r3, #6
 8001e84:	401a      	ands	r2, r3
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	019b      	lsls	r3, r3, #6
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2244      	movs	r2, #68	; 0x44
 8001e94:	5a9b      	ldrh	r3, [r3, r2]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4986      	ldr	r1, [pc, #536]	; (80020b8 <HAL_PCD_IRQHandler+0x2e4>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	b291      	uxth	r1, r2
 8001ea2:	2244      	movs	r2, #68	; 0x44
 8001ea4:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f005 f86a 	bl	8006f84 <USB_ReadInterrupts>
 8001eb0:	0002      	movs	r2, r0
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	2380      	movs	r3, #128	; 0x80
 8001eba:	015b      	lsls	r3, r3, #5
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d137      	bne.n	8001f30 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2240      	movs	r2, #64	; 0x40
 8001ec6:	5a9b      	ldrh	r3, [r3, r2]
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2104      	movs	r1, #4
 8001ed0:	438a      	bics	r2, r1
 8001ed2:	b291      	uxth	r1, r2
 8001ed4:	2240      	movs	r2, #64	; 0x40
 8001ed6:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2240      	movs	r2, #64	; 0x40
 8001ede:	5a9b      	ldrh	r3, [r3, r2]
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2108      	movs	r1, #8
 8001ee8:	438a      	bics	r2, r1
 8001eea:	b291      	uxth	r1, r2
 8001eec:	2240      	movs	r2, #64	; 0x40
 8001eee:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	23b8      	movs	r3, #184	; 0xb8
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	5cd3      	ldrb	r3, [r2, r3]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d109      	bne.n	8001f10 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	23b8      	movs	r3, #184	; 0xb8
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	2100      	movs	r1, #0
 8001f04:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2100      	movs	r1, #0
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f001 fc7a 	bl	8003804 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	0018      	movs	r0, r3
 8001f14:	f006 ff82 	bl	8008e1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2244      	movs	r2, #68	; 0x44
 8001f1e:	5a9b      	ldrh	r3, [r3, r2]
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4965      	ldr	r1, [pc, #404]	; (80020bc <HAL_PCD_IRQHandler+0x2e8>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	b291      	uxth	r1, r2
 8001f2c:	2244      	movs	r2, #68	; 0x44
 8001f2e:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0018      	movs	r0, r3
 8001f36:	f005 f825 	bl	8006f84 <USB_ReadInterrupts>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	2380      	movs	r3, #128	; 0x80
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	401a      	ands	r2, r3
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d127      	bne.n	8001f9a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2240      	movs	r2, #64	; 0x40
 8001f50:	5a9b      	ldrh	r3, [r3, r2]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2108      	movs	r1, #8
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	b291      	uxth	r1, r2
 8001f5e:	2240      	movs	r2, #64	; 0x40
 8001f60:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2244      	movs	r2, #68	; 0x44
 8001f68:	5a9b      	ldrh	r3, [r3, r2]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4953      	ldr	r1, [pc, #332]	; (80020c0 <HAL_PCD_IRQHandler+0x2ec>)
 8001f72:	400a      	ands	r2, r1
 8001f74:	b291      	uxth	r1, r2
 8001f76:	2244      	movs	r2, #68	; 0x44
 8001f78:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2240      	movs	r2, #64	; 0x40
 8001f80:	5a9b      	ldrh	r3, [r3, r2]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2104      	movs	r1, #4
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	b291      	uxth	r1, r2
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	0018      	movs	r0, r3
 8001f96:	f006 ff25 	bl	8008de4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f004 fff0 	bl	8006f84 <USB_ReadInterrupts>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	4013      	ands	r3, r2
 8001faa:	2b80      	cmp	r3, #128	; 0x80
 8001fac:	d145      	bne.n	800203a <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2244      	movs	r2, #68	; 0x44
 8001fb4:	5a9b      	ldrh	r3, [r3, r2]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	438a      	bics	r2, r1
 8001fc0:	b291      	uxth	r1, r2
 8001fc2:	2244      	movs	r2, #68	; 0x44
 8001fc4:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	23b8      	movs	r3, #184	; 0xb8
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12f      	bne.n	8002032 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2240      	movs	r2, #64	; 0x40
 8001fd8:	5a9b      	ldrh	r3, [r3, r2]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2104      	movs	r1, #4
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	b291      	uxth	r1, r2
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2240      	movs	r2, #64	; 0x40
 8001ff0:	5a9b      	ldrh	r3, [r3, r2]
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2108      	movs	r1, #8
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	b291      	uxth	r1, r2
 8001ffe:	2240      	movs	r2, #64	; 0x40
 8002000:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	23b8      	movs	r3, #184	; 0xb8
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	2101      	movs	r1, #1
 800200a:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2254      	movs	r2, #84	; 0x54
 8002012:	5a9b      	ldrh	r3, [r3, r2]
 8002014:	b29b      	uxth	r3, r3
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	223c      	movs	r2, #60	; 0x3c
 800201a:	4013      	ands	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	23b9      	movs	r3, #185	; 0xb9
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2101      	movs	r1, #1
 800202a:	0018      	movs	r0, r3
 800202c:	f001 fbea 	bl	8003804 <HAL_PCDEx_LPM_Callback>
 8002030:	e003      	b.n	800203a <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f006 fed5 	bl	8008de4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	0018      	movs	r0, r3
 8002040:	f004 ffa0 	bl	8006f84 <USB_ReadInterrupts>
 8002044:	0002      	movs	r2, r0
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	401a      	ands	r2, r3
 800204c:	2380      	movs	r3, #128	; 0x80
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	429a      	cmp	r2, r3
 8002052:	d10f      	bne.n	8002074 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2244      	movs	r2, #68	; 0x44
 800205a:	5a9b      	ldrh	r3, [r3, r2]
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_PCD_IRQHandler+0x2f0>)
 8002064:	400a      	ands	r2, r1
 8002066:	b291      	uxth	r1, r2
 8002068:	2244      	movs	r2, #68	; 0x44
 800206a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f006 fe84 	bl	8008d7c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	0018      	movs	r0, r3
 800207a:	f004 ff83 	bl	8006f84 <USB_ReadInterrupts>
 800207e:	0002      	movs	r2, r0
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	401a      	ands	r2, r3
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	429a      	cmp	r2, r3
 800208c:	d10b      	bne.n	80020a6 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2244      	movs	r2, #68	; 0x44
 8002094:	5a9b      	ldrh	r3, [r3, r2]
 8002096:	b29a      	uxth	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	490a      	ldr	r1, [pc, #40]	; (80020c8 <HAL_PCD_IRQHandler+0x2f4>)
 800209e:	400a      	ands	r2, r1
 80020a0:	b291      	uxth	r1, r2
 80020a2:	2244      	movs	r2, #68	; 0x44
 80020a4:	5299      	strh	r1, [r3, r2]
  }
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	fffffbff 	.word	0xfffffbff
 80020b4:	ffffbfff 	.word	0xffffbfff
 80020b8:	ffffdfff 	.word	0xffffdfff
 80020bc:	ffffefff 	.word	0xffffefff
 80020c0:	fffff7ff 	.word	0xfffff7ff
 80020c4:	fffffdff 	.word	0xfffffdff
 80020c8:	fffffeff 	.word	0xfffffeff

080020cc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	000a      	movs	r2, r1
 80020d6:	1cfb      	adds	r3, r7, #3
 80020d8:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	23aa      	movs	r3, #170	; 0xaa
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_PCD_SetAddress+0x1e>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e017      	b.n	800211a <HAL_PCD_SetAddress+0x4e>
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	23aa      	movs	r3, #170	; 0xaa
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	2101      	movs	r1, #1
 80020f2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	1cfa      	adds	r2, r7, #3
 80020f8:	2124      	movs	r1, #36	; 0x24
 80020fa:	7812      	ldrb	r2, [r2, #0]
 80020fc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	1cfb      	adds	r3, r7, #3
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	0019      	movs	r1, r3
 8002108:	0010      	movs	r0, r2
 800210a:	f004 ff11 	bl	8006f30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800210e:	687a      	ldr	r2, [r7, #4]
 8002110:	23aa      	movs	r3, #170	; 0xaa
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	2100      	movs	r1, #0
 8002116:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	0018      	movs	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002122:	b590      	push	{r4, r7, lr}
 8002124:	b085      	sub	sp, #20
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	000c      	movs	r4, r1
 800212c:	0010      	movs	r0, r2
 800212e:	0019      	movs	r1, r3
 8002130:	1cfb      	adds	r3, r7, #3
 8002132:	1c22      	adds	r2, r4, #0
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	003b      	movs	r3, r7
 8002138:	1c02      	adds	r2, r0, #0
 800213a:	801a      	strh	r2, [r3, #0]
 800213c:	1cbb      	adds	r3, r7, #2
 800213e:	1c0a      	adds	r2, r1, #0
 8002140:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002142:	230b      	movs	r3, #11
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800214a:	1cfb      	adds	r3, r7, #3
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b25b      	sxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	da0f      	bge.n	8002174 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002154:	1cfb      	adds	r3, r7, #3
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2207      	movs	r2, #7
 800215a:	4013      	ands	r3, r2
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	0013      	movs	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	189b      	adds	r3, r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	18d3      	adds	r3, r2, r3
 800216a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2201      	movs	r2, #1
 8002170:	705a      	strb	r2, [r3, #1]
 8002172:	e00f      	b.n	8002194 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002174:	1cfb      	adds	r3, r7, #3
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2207      	movs	r2, #7
 800217a:	401a      	ands	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	189b      	adds	r3, r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	3369      	adds	r3, #105	; 0x69
 8002186:	33ff      	adds	r3, #255	; 0xff
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	18d3      	adds	r3, r2, r3
 800218c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002194:	1cfb      	adds	r3, r7, #3
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2207      	movs	r2, #7
 800219a:	4013      	ands	r3, r2
 800219c:	b2da      	uxtb	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021a2:	003b      	movs	r3, r7
 80021a4:	881a      	ldrh	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1cba      	adds	r2, r7, #2
 80021ae:	7812      	ldrb	r2, [r2, #0]
 80021b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	785b      	ldrb	r3, [r3, #1]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d004      	beq.n	80021c4 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021c4:	1cbb      	adds	r3, r7, #2
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d102      	bne.n	80021d2 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	23aa      	movs	r3, #170	; 0xaa
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	5cd3      	ldrb	r3, [r2, r3]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d101      	bne.n	80021e2 <HAL_PCD_EP_Open+0xc0>
 80021de:	2302      	movs	r3, #2
 80021e0:	e013      	b.n	800220a <HAL_PCD_EP_Open+0xe8>
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	23aa      	movs	r3, #170	; 0xaa
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	2101      	movs	r1, #1
 80021ea:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	0011      	movs	r1, r2
 80021f4:	0018      	movs	r0, r3
 80021f6:	f002 ffab 	bl	8005150 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	23aa      	movs	r3, #170	; 0xaa
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	2100      	movs	r1, #0
 8002202:	54d1      	strb	r1, [r2, r3]

  return ret;
 8002204:	230b      	movs	r3, #11
 8002206:	18fb      	adds	r3, r7, r3
 8002208:	781b      	ldrb	r3, [r3, #0]
}
 800220a:	0018      	movs	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	b005      	add	sp, #20
 8002210:	bd90      	pop	{r4, r7, pc}

08002212 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b084      	sub	sp, #16
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	000a      	movs	r2, r1
 800221c:	1cfb      	adds	r3, r7, #3
 800221e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002220:	1cfb      	adds	r3, r7, #3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b25b      	sxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	da0f      	bge.n	800224a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800222a:	1cfb      	adds	r3, r7, #3
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2207      	movs	r2, #7
 8002230:	4013      	ands	r3, r2
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	0013      	movs	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	189b      	adds	r3, r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	18d3      	adds	r3, r2, r3
 8002240:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2201      	movs	r2, #1
 8002246:	705a      	strb	r2, [r3, #1]
 8002248:	e00f      	b.n	800226a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800224a:	1cfb      	adds	r3, r7, #3
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2207      	movs	r2, #7
 8002250:	401a      	ands	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	189b      	adds	r3, r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	3369      	adds	r3, #105	; 0x69
 800225c:	33ff      	adds	r3, #255	; 0xff
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	18d3      	adds	r3, r2, r3
 8002262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800226a:	1cfb      	adds	r3, r7, #3
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2207      	movs	r2, #7
 8002270:	4013      	ands	r3, r2
 8002272:	b2da      	uxtb	r2, r3
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	23aa      	movs	r3, #170	; 0xaa
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_PCD_EP_Close+0x76>
 8002284:	2302      	movs	r3, #2
 8002286:	e011      	b.n	80022ac <HAL_PCD_EP_Close+0x9a>
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	23aa      	movs	r3, #170	; 0xaa
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	2101      	movs	r1, #1
 8002290:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	0011      	movs	r1, r2
 800229a:	0018      	movs	r0, r3
 800229c:	f003 facc 	bl	8005838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	23aa      	movs	r3, #170	; 0xaa
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	2100      	movs	r1, #0
 80022a8:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	0018      	movs	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b004      	add	sp, #16
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	603b      	str	r3, [r7, #0]
 80022c0:	200b      	movs	r0, #11
 80022c2:	183b      	adds	r3, r7, r0
 80022c4:	1c0a      	adds	r2, r1, #0
 80022c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022c8:	0001      	movs	r1, r0
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2207      	movs	r2, #7
 80022d0:	401a      	ands	r2, r3
 80022d2:	0013      	movs	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	189b      	adds	r3, r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	3369      	adds	r3, #105	; 0x69
 80022dc:	33ff      	adds	r3, #255	; 0xff
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	18d3      	adds	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2207      	movs	r2, #7
 8002302:	4013      	ands	r3, r2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800230a:	187b      	adds	r3, r7, r1
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2207      	movs	r2, #7
 8002310:	4013      	ands	r3, r2
 8002312:	d107      	bne.n	8002324 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	0011      	movs	r1, r2
 800231c:	0018      	movs	r0, r3
 800231e:	f003 fc4b 	bl	8005bb8 <USB_EPStartXfer>
 8002322:	e006      	b.n	8002332 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	0011      	movs	r1, r2
 800232c:	0018      	movs	r0, r3
 800232e:	f003 fc43 	bl	8005bb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b006      	add	sp, #24
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b086      	sub	sp, #24
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	200b      	movs	r0, #11
 800234a:	183b      	adds	r3, r7, r0
 800234c:	1c0a      	adds	r2, r1, #0
 800234e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002350:	183b      	adds	r3, r7, r0
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2207      	movs	r2, #7
 8002356:	4013      	ands	r3, r2
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	0013      	movs	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	189b      	adds	r3, r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	18d3      	adds	r3, r2, r3
 8002366:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	2101      	movs	r1, #1
 800237a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	2201      	movs	r2, #1
 800238c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238e:	183b      	adds	r3, r7, r0
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2207      	movs	r2, #7
 8002394:	4013      	ands	r3, r2
 8002396:	b2da      	uxtb	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800239c:	183b      	adds	r3, r7, r0
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2207      	movs	r2, #7
 80023a2:	4013      	ands	r3, r2
 80023a4:	d107      	bne.n	80023b6 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	0011      	movs	r1, r2
 80023ae:	0018      	movs	r0, r3
 80023b0:	f003 fc02 	bl	8005bb8 <USB_EPStartXfer>
 80023b4:	e006      	b.n	80023c4 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	0011      	movs	r1, r2
 80023be:	0018      	movs	r0, r3
 80023c0:	f003 fbfa 	bl	8005bb8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	0018      	movs	r0, r3
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b006      	add	sp, #24
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	000a      	movs	r2, r1
 80023d8:	1cfb      	adds	r3, r7, #3
 80023da:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80023dc:	1cfb      	adds	r3, r7, #3
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2207      	movs	r2, #7
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d901      	bls.n	80023f0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e046      	b.n	800247e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80023f0:	1cfb      	adds	r3, r7, #3
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	da0f      	bge.n	800241a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023fa:	1cfb      	adds	r3, r7, #3
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2207      	movs	r2, #7
 8002400:	4013      	ands	r3, r2
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	0013      	movs	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	189b      	adds	r3, r3, r2
 800240a:	00db      	lsls	r3, r3, #3
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	705a      	strb	r2, [r3, #1]
 8002418:	e00d      	b.n	8002436 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800241a:	1cfb      	adds	r3, r7, #3
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	0013      	movs	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	189b      	adds	r3, r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	3369      	adds	r3, #105	; 0x69
 8002428:	33ff      	adds	r3, #255	; 0xff
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2200      	movs	r2, #0
 8002434:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800243c:	1cfb      	adds	r3, r7, #3
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2207      	movs	r2, #7
 8002442:	4013      	ands	r3, r2
 8002444:	b2da      	uxtb	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	23aa      	movs	r3, #170	; 0xaa
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_PCD_EP_SetStall+0x8c>
 8002456:	2302      	movs	r3, #2
 8002458:	e011      	b.n	800247e <HAL_PCD_EP_SetStall+0xb0>
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	23aa      	movs	r3, #170	; 0xaa
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	2101      	movs	r1, #1
 8002462:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	0011      	movs	r1, r2
 800246c:	0018      	movs	r0, r3
 800246e:	f004 fc5d 	bl	8006d2c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	23aa      	movs	r3, #170	; 0xaa
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	2100      	movs	r1, #0
 800247a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	0018      	movs	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	b004      	add	sp, #16
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002486:	b580      	push	{r7, lr}
 8002488:	b084      	sub	sp, #16
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	000a      	movs	r2, r1
 8002490:	1cfb      	adds	r3, r7, #3
 8002492:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002494:	1cfb      	adds	r3, r7, #3
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	220f      	movs	r2, #15
 800249a:	401a      	ands	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d901      	bls.n	80024a8 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e048      	b.n	800253a <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024a8:	1cfb      	adds	r3, r7, #3
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b25b      	sxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	da0f      	bge.n	80024d2 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024b2:	1cfb      	adds	r3, r7, #3
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2207      	movs	r2, #7
 80024b8:	4013      	ands	r3, r2
 80024ba:	1c5a      	adds	r2, r3, #1
 80024bc:	0013      	movs	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	189b      	adds	r3, r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2201      	movs	r2, #1
 80024ce:	705a      	strb	r2, [r3, #1]
 80024d0:	e00f      	b.n	80024f2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024d2:	1cfb      	adds	r3, r7, #3
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2207      	movs	r2, #7
 80024d8:	401a      	ands	r2, r3
 80024da:	0013      	movs	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	189b      	adds	r3, r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	3369      	adds	r3, #105	; 0x69
 80024e4:	33ff      	adds	r3, #255	; 0xff
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	18d3      	adds	r3, r2, r3
 80024ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2200      	movs	r2, #0
 80024f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80024f8:	1cfb      	adds	r3, r7, #3
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2207      	movs	r2, #7
 80024fe:	4013      	ands	r3, r2
 8002500:	b2da      	uxtb	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	23aa      	movs	r3, #170	; 0xaa
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	5cd3      	ldrb	r3, [r2, r3]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_PCD_EP_ClrStall+0x90>
 8002512:	2302      	movs	r3, #2
 8002514:	e011      	b.n	800253a <HAL_PCD_EP_ClrStall+0xb4>
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	23aa      	movs	r3, #170	; 0xaa
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	2101      	movs	r1, #1
 800251e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	0011      	movs	r1, r2
 8002528:	0018      	movs	r0, r3
 800252a:	f004 fc4f 	bl	8006dcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	23aa      	movs	r3, #170	; 0xaa
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	2100      	movs	r1, #0
 8002536:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b004      	add	sp, #16
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002544:	b5b0      	push	{r4, r5, r7, lr}
 8002546:	b096      	sub	sp, #88	; 0x58
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800254c:	f000 fbd8 	bl	8002d00 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	2056      	movs	r0, #86	; 0x56
 8002556:	183b      	adds	r3, r7, r0
 8002558:	2144      	movs	r1, #68	; 0x44
 800255a:	5a52      	ldrh	r2, [r2, r1]
 800255c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800255e:	183b      	adds	r3, r7, r0
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	b2da      	uxtb	r2, r3
 8002564:	2455      	movs	r4, #85	; 0x55
 8002566:	193b      	adds	r3, r7, r4
 8002568:	210f      	movs	r1, #15
 800256a:	400a      	ands	r2, r1
 800256c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800256e:	193b      	adds	r3, r7, r4
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d000      	beq.n	8002578 <PCD_EP_ISR_Handler+0x34>
 8002576:	e179      	b.n	800286c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002578:	183b      	adds	r3, r7, r0
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	2210      	movs	r2, #16
 800257e:	4013      	ands	r3, r2
 8002580:	d154      	bne.n	800262c <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	881b      	ldrh	r3, [r3, #0]
 8002588:	b29a      	uxth	r2, r3
 800258a:	200e      	movs	r0, #14
 800258c:	183b      	adds	r3, r7, r0
 800258e:	49af      	ldr	r1, [pc, #700]	; (800284c <PCD_EP_ISR_Handler+0x308>)
 8002590:	400a      	ands	r2, r1
 8002592:	801a      	strh	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	183a      	adds	r2, r7, r0
 800259a:	8812      	ldrh	r2, [r2, #0]
 800259c:	49ac      	ldr	r1, [pc, #688]	; (8002850 <PCD_EP_ISR_Handler+0x30c>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	b292      	uxth	r2, r2
 80025a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3328      	adds	r3, #40	; 0x28
 80025a8:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2250      	movs	r2, #80	; 0x50
 80025b0:	5a9b      	ldrh	r3, [r3, r2]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	001a      	movs	r2, r3
 80025b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	18d2      	adds	r2, r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	18d3      	adds	r3, r2, r3
 80025c4:	4aa3      	ldr	r2, [pc, #652]	; (8002854 <PCD_EP_ISR_Handler+0x310>)
 80025c6:	4694      	mov	ip, r2
 80025c8:	4463      	add	r3, ip
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	059b      	lsls	r3, r3, #22
 80025ce:	0d9a      	lsrs	r2, r3, #22
 80025d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	18d2      	adds	r2, r2, r3
 80025de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025e0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2100      	movs	r1, #0
 80025e6:	0018      	movs	r0, r3
 80025e8:	f006 fbaa 	bl	8008d40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	5c9b      	ldrb	r3, [r3, r2]
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <PCD_EP_ISR_Handler+0xb8>
 80025f8:	f000 fb82 	bl	8002d00 <PCD_EP_ISR_Handler+0x7bc>
 80025fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <PCD_EP_ISR_Handler+0xc4>
 8002604:	f000 fb7c 	bl	8002d00 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	; 0x24
 800260c:	5c9b      	ldrb	r3, [r3, r2]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	4252      	negs	r2, r2
 8002614:	4313      	orrs	r3, r2
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b291      	uxth	r1, r2
 800261e:	224c      	movs	r2, #76	; 0x4c
 8002620:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2224      	movs	r2, #36	; 0x24
 8002626:	2100      	movs	r1, #0
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	e369      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3369      	adds	r3, #105	; 0x69
 8002630:	33ff      	adds	r3, #255	; 0xff
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2152      	movs	r1, #82	; 0x52
 800263a:	187b      	adds	r3, r7, r1
 800263c:	8812      	ldrh	r2, [r2, #0]
 800263e:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002640:	187b      	adds	r3, r7, r1
 8002642:	881a      	ldrh	r2, [r3, #0]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	4013      	ands	r3, r2
 800264a:	d037      	beq.n	80026bc <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2250      	movs	r2, #80	; 0x50
 8002652:	5a9b      	ldrh	r3, [r3, r2]
 8002654:	b29b      	uxth	r3, r3
 8002656:	001a      	movs	r2, r3
 8002658:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	18d2      	adds	r2, r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	18d3      	adds	r3, r2, r3
 8002666:	4a7c      	ldr	r2, [pc, #496]	; (8002858 <PCD_EP_ISR_Handler+0x314>)
 8002668:	4694      	mov	ip, r2
 800266a:	4463      	add	r3, ip
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	059b      	lsls	r3, r3, #22
 8002670:	0d9a      	lsrs	r2, r3, #22
 8002672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002674:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	22ac      	movs	r2, #172	; 0xac
 800267e:	0092      	lsls	r2, r2, #2
 8002680:	1899      	adds	r1, r3, r2
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002684:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002688:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800268a:	b29b      	uxth	r3, r3
 800268c:	f004 fccc 	bl	8007028 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	2010      	movs	r0, #16
 800269a:	183b      	adds	r3, r7, r0
 800269c:	496f      	ldr	r1, [pc, #444]	; (800285c <PCD_EP_ISR_Handler+0x318>)
 800269e:	400a      	ands	r2, r1
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	183a      	adds	r2, r7, r0
 80026a8:	8812      	ldrh	r2, [r2, #0]
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	430a      	orrs	r2, r1
 80026ae:	b292      	uxth	r2, r2
 80026b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f006 fb0d 	bl	8008cd4 <HAL_PCD_SetupStageCallback>
 80026ba:	e321      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026bc:	2352      	movs	r3, #82	; 0x52
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	5e9b      	ldrsh	r3, [r3, r2]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db00      	blt.n	80026ca <PCD_EP_ISR_Handler+0x186>
 80026c8:	e31a      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	201e      	movs	r0, #30
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	4961      	ldr	r1, [pc, #388]	; (800285c <PCD_EP_ISR_Handler+0x318>)
 80026d8:	400a      	ands	r2, r1
 80026da:	801a      	strh	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	183a      	adds	r2, r7, r0
 80026e2:	8812      	ldrh	r2, [r2, #0]
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	430a      	orrs	r2, r1
 80026e8:	b292      	uxth	r2, r2
 80026ea:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2250      	movs	r2, #80	; 0x50
 80026f2:	5a9b      	ldrh	r3, [r3, r2]
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	001a      	movs	r2, r3
 80026f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	18d2      	adds	r2, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	18d3      	adds	r3, r2, r3
 8002706:	4a54      	ldr	r2, [pc, #336]	; (8002858 <PCD_EP_ISR_Handler+0x314>)
 8002708:	4694      	mov	ip, r2
 800270a:	4463      	add	r3, ip
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	059b      	lsls	r3, r3, #22
 8002710:	0d9a      	lsrs	r2, r3, #22
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002714:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01a      	beq.n	8002754 <PCD_EP_ISR_Handler+0x210>
 800271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272c:	6959      	ldr	r1, [r3, #20]
 800272e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002730:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002736:	b29b      	uxth	r3, r3
 8002738:	f004 fc76 	bl	8007028 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800273c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273e:	695a      	ldr	r2, [r3, #20]
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	18d2      	adds	r2, r2, r3
 8002746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002748:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2100      	movs	r1, #0
 800274e:	0018      	movs	r0, r3
 8002750:	f006 fad5 	bl	8008cfe <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	881b      	ldrh	r3, [r3, #0]
 800275a:	b29b      	uxth	r3, r3
 800275c:	001a      	movs	r2, r3
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	011b      	lsls	r3, r3, #4
 8002762:	4013      	ands	r3, r2
 8002764:	d000      	beq.n	8002768 <PCD_EP_ISR_Handler+0x224>
 8002766:	e2cb      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2250      	movs	r2, #80	; 0x50
 8002774:	5a9b      	ldrh	r3, [r3, r2]
 8002776:	b29b      	uxth	r3, r3
 8002778:	001a      	movs	r2, r3
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	189b      	adds	r3, r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	4a35      	ldr	r2, [pc, #212]	; (8002858 <PCD_EP_ISR_Handler+0x314>)
 8002784:	4694      	mov	ip, r2
 8002786:	4463      	add	r3, ip
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d110      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x270>
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <PCD_EP_ISR_Handler+0x31c>)
 800279a:	4013      	ands	r3, r2
 800279c:	b29a      	uxth	r2, r3
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	801a      	strh	r2, [r3, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4a29      	ldr	r2, [pc, #164]	; (8002850 <PCD_EP_ISR_Handler+0x30c>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e02b      	b.n	800280c <PCD_EP_ISR_Handler+0x2c8>
 80027b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b3e      	cmp	r3, #62	; 0x3e
 80027ba:	d812      	bhi.n	80027e2 <PCD_EP_ISR_Handler+0x29e>
 80027bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	085b      	lsrs	r3, r3, #1
 80027c2:	647b      	str	r3, [r7, #68]	; 0x44
 80027c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	2201      	movs	r2, #1
 80027ca:	4013      	ands	r3, r2
 80027cc:	d002      	beq.n	80027d4 <PCD_EP_ISR_Handler+0x290>
 80027ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d0:	3301      	adds	r3, #1
 80027d2:	647b      	str	r3, [r7, #68]	; 0x44
 80027d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	029b      	lsls	r3, r3, #10
 80027da:	b29a      	uxth	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e014      	b.n	800280c <PCD_EP_ISR_Handler+0x2c8>
 80027e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	221f      	movs	r2, #31
 80027f0:	4013      	ands	r3, r2
 80027f2:	d102      	bne.n	80027fa <PCD_EP_ISR_Handler+0x2b6>
 80027f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f6:	3b01      	subs	r3, #1
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
 80027fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	029b      	lsls	r3, r3, #10
 8002800:	b29b      	uxth	r3, r3
 8002802:	4a13      	ldr	r2, [pc, #76]	; (8002850 <PCD_EP_ISR_Handler+0x30c>)
 8002804:	4313      	orrs	r3, r2
 8002806:	b29a      	uxth	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	881b      	ldrh	r3, [r3, #0]
 8002812:	b29a      	uxth	r2, r3
 8002814:	2012      	movs	r0, #18
 8002816:	183b      	adds	r3, r7, r0
 8002818:	4912      	ldr	r1, [pc, #72]	; (8002864 <PCD_EP_ISR_Handler+0x320>)
 800281a:	400a      	ands	r2, r1
 800281c:	801a      	strh	r2, [r3, #0]
 800281e:	183b      	adds	r3, r7, r0
 8002820:	183a      	adds	r2, r7, r0
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	2180      	movs	r1, #128	; 0x80
 8002826:	0149      	lsls	r1, r1, #5
 8002828:	404a      	eors	r2, r1
 800282a:	801a      	strh	r2, [r3, #0]
 800282c:	183b      	adds	r3, r7, r0
 800282e:	183a      	adds	r2, r7, r0
 8002830:	8812      	ldrh	r2, [r2, #0]
 8002832:	2180      	movs	r1, #128	; 0x80
 8002834:	0189      	lsls	r1, r1, #6
 8002836:	404a      	eors	r2, r1
 8002838:	801a      	strh	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	183a      	adds	r2, r7, r0
 8002840:	8812      	ldrh	r2, [r2, #0]
 8002842:	4909      	ldr	r1, [pc, #36]	; (8002868 <PCD_EP_ISR_Handler+0x324>)
 8002844:	430a      	orrs	r2, r1
 8002846:	b292      	uxth	r2, r2
 8002848:	801a      	strh	r2, [r3, #0]
 800284a:	e259      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
 800284c:	ffff8f0f 	.word	0xffff8f0f
 8002850:	ffff8000 	.word	0xffff8000
 8002854:	00000402 	.word	0x00000402
 8002858:	00000406 	.word	0x00000406
 800285c:	00000f8f 	.word	0x00000f8f
 8002860:	ffff83ff 	.word	0xffff83ff
 8002864:	ffffbf8f 	.word	0xffffbf8f
 8002868:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	001a      	movs	r2, r3
 8002872:	2055      	movs	r0, #85	; 0x55
 8002874:	183b      	adds	r3, r7, r0
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	18d2      	adds	r2, r2, r3
 800287c:	2152      	movs	r1, #82	; 0x52
 800287e:	187b      	adds	r3, r7, r1
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002884:	187b      	adds	r3, r7, r1
 8002886:	2200      	movs	r2, #0
 8002888:	5e9b      	ldrsh	r3, [r3, r2]
 800288a:	2b00      	cmp	r3, #0
 800288c:	db00      	blt.n	8002890 <PCD_EP_ISR_Handler+0x34c>
 800288e:	e0fa      	b.n	8002a86 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	001a      	movs	r2, r3
 8002896:	183b      	adds	r3, r7, r0
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	18d3      	adds	r3, r2, r3
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	2450      	movs	r4, #80	; 0x50
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	49cf      	ldr	r1, [pc, #828]	; (8002be4 <PCD_EP_ISR_Handler+0x6a0>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	001a      	movs	r2, r3
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	193a      	adds	r2, r7, r4
 80028bc:	8812      	ldrh	r2, [r2, #0]
 80028be:	2180      	movs	r1, #128	; 0x80
 80028c0:	430a      	orrs	r2, r1
 80028c2:	b292      	uxth	r2, r2
 80028c4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80028c6:	183b      	adds	r3, r7, r0
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	0013      	movs	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	00db      	lsls	r3, r3, #3
 80028d2:	3369      	adds	r3, #105	; 0x69
 80028d4:	33ff      	adds	r3, #255	; 0xff
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	18d3      	adds	r3, r2, r3
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	7b1b      	ldrb	r3, [r3, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d125      	bne.n	8002930 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2250      	movs	r2, #80	; 0x50
 80028ea:	5a9b      	ldrh	r3, [r3, r2]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	001a      	movs	r2, r3
 80028f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	18d2      	adds	r2, r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	18d3      	adds	r3, r2, r3
 80028fe:	4aba      	ldr	r2, [pc, #744]	; (8002be8 <PCD_EP_ISR_Handler+0x6a4>)
 8002900:	4694      	mov	ip, r2
 8002902:	4463      	add	r3, ip
 8002904:	881a      	ldrh	r2, [r3, #0]
 8002906:	2448      	movs	r4, #72	; 0x48
 8002908:	193b      	adds	r3, r7, r4
 800290a:	0592      	lsls	r2, r2, #22
 800290c:	0d92      	lsrs	r2, r2, #22
 800290e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8002910:	193b      	adds	r3, r7, r4
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d100      	bne.n	800291a <PCD_EP_ISR_Handler+0x3d6>
 8002918:	e08d      	b.n	8002a36 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002920:	6959      	ldr	r1, [r3, #20]
 8002922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002924:	88da      	ldrh	r2, [r3, #6]
 8002926:	193b      	adds	r3, r7, r4
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f004 fb7d 	bl	8007028 <USB_ReadPMA>
 800292e:	e082      	b.n	8002a36 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002932:	78db      	ldrb	r3, [r3, #3]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d10c      	bne.n	8002952 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002938:	2348      	movs	r3, #72	; 0x48
 800293a:	18fc      	adds	r4, r7, r3
 800293c:	2352      	movs	r3, #82	; 0x52
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 f9ee 	bl	8002d28 <HAL_PCD_EP_DB_Receive>
 800294c:	0003      	movs	r3, r0
 800294e:	8023      	strh	r3, [r4, #0]
 8002950:	e071      	b.n	8002a36 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	001a      	movs	r2, r3
 8002958:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	18d3      	adds	r3, r2, r3
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29a      	uxth	r2, r3
 8002964:	204a      	movs	r0, #74	; 0x4a
 8002966:	183b      	adds	r3, r7, r0
 8002968:	49a0      	ldr	r1, [pc, #640]	; (8002bec <PCD_EP_ISR_Handler+0x6a8>)
 800296a:	400a      	ands	r2, r1
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	001a      	movs	r2, r3
 8002974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	18d3      	adds	r3, r2, r3
 800297c:	183a      	adds	r2, r7, r0
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	499b      	ldr	r1, [pc, #620]	; (8002bf0 <PCD_EP_ISR_Handler+0x6ac>)
 8002982:	430a      	orrs	r2, r1
 8002984:	b292      	uxth	r2, r2
 8002986:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	001a      	movs	r2, r3
 800298e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	18d3      	adds	r3, r2, r3
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	001a      	movs	r2, r3
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	01db      	lsls	r3, r3, #7
 80029a0:	4013      	ands	r3, r2
 80029a2:	d024      	beq.n	80029ee <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2250      	movs	r2, #80	; 0x50
 80029aa:	5a9b      	ldrh	r3, [r3, r2]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	001a      	movs	r2, r3
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	18d2      	adds	r2, r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	18d3      	adds	r3, r2, r3
 80029be:	4a8d      	ldr	r2, [pc, #564]	; (8002bf4 <PCD_EP_ISR_Handler+0x6b0>)
 80029c0:	4694      	mov	ip, r2
 80029c2:	4463      	add	r3, ip
 80029c4:	881a      	ldrh	r2, [r3, #0]
 80029c6:	2448      	movs	r4, #72	; 0x48
 80029c8:	193b      	adds	r3, r7, r4
 80029ca:	0592      	lsls	r2, r2, #22
 80029cc:	0d92      	lsrs	r2, r2, #22
 80029ce:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80029d0:	193b      	adds	r3, r7, r4
 80029d2:	881b      	ldrh	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02e      	beq.n	8002a36 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6818      	ldr	r0, [r3, #0]
 80029dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029de:	6959      	ldr	r1, [r3, #20]
 80029e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e2:	891a      	ldrh	r2, [r3, #8]
 80029e4:	193b      	adds	r3, r7, r4
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f004 fb1e 	bl	8007028 <USB_ReadPMA>
 80029ec:	e023      	b.n	8002a36 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2250      	movs	r2, #80	; 0x50
 80029f4:	5a9b      	ldrh	r3, [r3, r2]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	001a      	movs	r2, r3
 80029fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	18d2      	adds	r2, r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	18d3      	adds	r3, r2, r3
 8002a08:	4a77      	ldr	r2, [pc, #476]	; (8002be8 <PCD_EP_ISR_Handler+0x6a4>)
 8002a0a:	4694      	mov	ip, r2
 8002a0c:	4463      	add	r3, ip
 8002a0e:	881a      	ldrh	r2, [r3, #0]
 8002a10:	2448      	movs	r4, #72	; 0x48
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	0592      	lsls	r2, r2, #22
 8002a16:	0d92      	lsrs	r2, r2, #22
 8002a18:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a28:	6959      	ldr	r1, [r3, #20]
 8002a2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2c:	895a      	ldrh	r2, [r3, #10]
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	f004 faf9 	bl	8007028 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a38:	69da      	ldr	r2, [r3, #28]
 8002a3a:	2148      	movs	r1, #72	; 0x48
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	18d2      	adds	r2, r2, r3
 8002a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a44:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a48:	695a      	ldr	r2, [r3, #20]
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	18d2      	adds	r2, r2, r3
 8002a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a52:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <PCD_EP_ISR_Handler+0x524>
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	881a      	ldrh	r2, [r3, #0]
 8002a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d207      	bcs.n	8002a78 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0011      	movs	r1, r2
 8002a70:	0018      	movs	r0, r3
 8002a72:	f006 f944 	bl	8008cfe <HAL_PCD_DataOutStageCallback>
 8002a76:	e006      	b.n	8002a86 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002a7e:	0011      	movs	r1, r2
 8002a80:	0018      	movs	r0, r3
 8002a82:	f003 f899 	bl	8005bb8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002a86:	2452      	movs	r4, #82	; 0x52
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2280      	movs	r2, #128	; 0x80
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d100      	bne.n	8002a94 <PCD_EP_ISR_Handler+0x550>
 8002a92:	e135      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8002a94:	2055      	movs	r0, #85	; 0x55
 8002a96:	183b      	adds	r3, r7, r0
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	0013      	movs	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	189b      	adds	r3, r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	18d3      	adds	r3, r2, r3
 8002aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	001a      	movs	r2, r3
 8002ab0:	183b      	adds	r3, r7, r0
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	881b      	ldrh	r3, [r3, #0]
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	2542      	movs	r5, #66	; 0x42
 8002abe:	197b      	adds	r3, r7, r5
 8002ac0:	494d      	ldr	r1, [pc, #308]	; (8002bf8 <PCD_EP_ISR_Handler+0x6b4>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	801a      	strh	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	001a      	movs	r2, r3
 8002acc:	183b      	adds	r3, r7, r0
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	18d3      	adds	r3, r2, r3
 8002ad4:	197a      	adds	r2, r7, r5
 8002ad6:	8812      	ldrh	r2, [r2, #0]
 8002ad8:	4948      	ldr	r1, [pc, #288]	; (8002bfc <PCD_EP_ISR_Handler+0x6b8>)
 8002ada:	430a      	orrs	r2, r1
 8002adc:	b292      	uxth	r2, r2
 8002ade:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8002ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ae2:	78db      	ldrb	r3, [r3, #3]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d100      	bne.n	8002aea <PCD_EP_ISR_Handler+0x5a6>
 8002ae8:	e0ad      	b.n	8002c46 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8002aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002aec:	2200      	movs	r2, #0
 8002aee:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002af0:	193b      	adds	r3, r7, r4
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	2240      	movs	r2, #64	; 0x40
 8002af6:	4013      	ands	r3, r2
 8002af8:	d046      	beq.n	8002b88 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d125      	bne.n	8002b4e <PCD_EP_ISR_Handler+0x60a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2250      	movs	r2, #80	; 0x50
 8002b0e:	5a9b      	ldrh	r3, [r3, r2]
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	001a      	movs	r2, r3
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	189b      	adds	r3, r3, r2
 8002b18:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	00da      	lsls	r2, r3, #3
 8002b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b22:	18d3      	adds	r3, r2, r3
 8002b24:	4a33      	ldr	r2, [pc, #204]	; (8002bf4 <PCD_EP_ISR_Handler+0x6b0>)
 8002b26:	4694      	mov	ip, r2
 8002b28:	4463      	add	r3, ip
 8002b2a:	623b      	str	r3, [r7, #32]
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	881b      	ldrh	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	4a33      	ldr	r2, [pc, #204]	; (8002c00 <PCD_EP_ISR_Handler+0x6bc>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	801a      	strh	r2, [r3, #0]
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	4a2e      	ldr	r2, [pc, #184]	; (8002bfc <PCD_EP_ISR_Handler+0x6b8>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	801a      	strh	r2, [r3, #0]
 8002b4c:	e073      	b.n	8002c36 <PCD_EP_ISR_Handler+0x6f2>
 8002b4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b50:	785b      	ldrb	r3, [r3, #1]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d16f      	bne.n	8002c36 <PCD_EP_ISR_Handler+0x6f2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2250      	movs	r2, #80	; 0x50
 8002b62:	5a9b      	ldrh	r3, [r3, r2]
 8002b64:	b29b      	uxth	r3, r3
 8002b66:	001a      	movs	r2, r3
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	189b      	adds	r3, r3, r2
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	00da      	lsls	r2, r3, #3
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	18d3      	adds	r3, r2, r3
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <PCD_EP_ISR_Handler+0x6b0>)
 8002b7a:	4694      	mov	ip, r2
 8002b7c:	4463      	add	r3, ip
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2200      	movs	r2, #0
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	e056      	b.n	8002c36 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b90:	785b      	ldrb	r3, [r3, #1]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d136      	bne.n	8002c04 <PCD_EP_ISR_Handler+0x6c0>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2250      	movs	r2, #80	; 0x50
 8002ba2:	5a9b      	ldrh	r3, [r3, r2]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
 8002bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	00da      	lsls	r2, r3, #3
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	18d3      	adds	r3, r2, r3
 8002bb8:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <PCD_EP_ISR_Handler+0x6a4>)
 8002bba:	4694      	mov	ip, r2
 8002bbc:	4463      	add	r3, ip
 8002bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	; (8002c00 <PCD_EP_ISR_Handler+0x6bc>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bce:	801a      	strh	r2, [r3, #0]
 8002bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <PCD_EP_ISR_Handler+0x6b8>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bde:	801a      	strh	r2, [r3, #0]
 8002be0:	e029      	b.n	8002c36 <PCD_EP_ISR_Handler+0x6f2>
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	00000f8f 	.word	0x00000f8f
 8002be8:	00000406 	.word	0x00000406
 8002bec:	ffff8f8f 	.word	0xffff8f8f
 8002bf0:	ffff80c0 	.word	0xffff80c0
 8002bf4:	00000402 	.word	0x00000402
 8002bf8:	ffff8f0f 	.word	0xffff8f0f
 8002bfc:	ffff8000 	.word	0xffff8000
 8002c00:	ffff83ff 	.word	0xffff83ff
 8002c04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d114      	bne.n	8002c36 <PCD_EP_ISR_Handler+0x6f2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2250      	movs	r2, #80	; 0x50
 8002c12:	5a9b      	ldrh	r3, [r3, r2]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	001a      	movs	r2, r3
 8002c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	00da      	lsls	r2, r3, #3
 8002c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c26:	18d3      	adds	r3, r2, r3
 8002c28:	4a3d      	ldr	r2, [pc, #244]	; (8002d20 <PCD_EP_ISR_Handler+0x7dc>)
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	4463      	add	r3, ip
 8002c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c32:	2200      	movs	r2, #0
 8002c34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c38:	781a      	ldrb	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	0011      	movs	r1, r2
 8002c3e:	0018      	movs	r0, r3
 8002c40:	f006 f87e 	bl	8008d40 <HAL_PCD_DataInStageCallback>
 8002c44:	e05c      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c48:	78db      	ldrb	r3, [r3, #3]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d150      	bne.n	8002cf0 <PCD_EP_ISR_Handler+0x7ac>
 8002c4e:	2352      	movs	r3, #82	; 0x52
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	4013      	ands	r3, r2
 8002c5a:	d149      	bne.n	8002cf0 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2250      	movs	r2, #80	; 0x50
 8002c62:	5a9b      	ldrh	r3, [r3, r2]
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	001a      	movs	r2, r3
 8002c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	18d2      	adds	r2, r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	18d3      	adds	r3, r2, r3
 8002c76:	4a2b      	ldr	r2, [pc, #172]	; (8002d24 <PCD_EP_ISR_Handler+0x7e0>)
 8002c78:	4694      	mov	ip, r2
 8002c7a:	4463      	add	r3, ip
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	2140      	movs	r1, #64	; 0x40
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	0592      	lsls	r2, r2, #22
 8002c84:	0d92      	lsrs	r2, r2, #22
 8002c86:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d907      	bls.n	8002ca4 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8002c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c96:	699a      	ldr	r2, [r3, #24]
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	1ad2      	subs	r2, r2, r3
 8002c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca0:	619a      	str	r2, [r3, #24]
 8002ca2:	e002      	b.n	8002caa <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8002ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002cb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0011      	movs	r1, r2
 8002cba:	0018      	movs	r0, r3
 8002cbc:	f006 f840 	bl	8008d40 <HAL_PCD_DataInStageCallback>
 8002cc0:	e01e      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc4:	695a      	ldr	r2, [r3, #20]
 8002cc6:	2140      	movs	r1, #64	; 0x40
 8002cc8:	187b      	adds	r3, r7, r1
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	18d2      	adds	r2, r2, r3
 8002cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002cd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	18d2      	adds	r2, r2, r3
 8002cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cde:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ce6:	0011      	movs	r1, r2
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f002 ff65 	bl	8005bb8 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002cee:	e007      	b.n	8002d00 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002cf0:	2352      	movs	r3, #82	; 0x52
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	881a      	ldrh	r2, [r3, #0]
 8002cf6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f930 	bl	8002f60 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2244      	movs	r2, #68	; 0x44
 8002d06:	5a9b      	ldrh	r3, [r3, r2]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	da01      	bge.n	8002d14 <PCD_EP_ISR_Handler+0x7d0>
 8002d10:	f7ff fc1e 	bl	8002550 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b016      	add	sp, #88	; 0x58
 8002d1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	00000406 	.word	0x00000406
 8002d24:	00000402 	.word	0x00000402

08002d28 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d28:	b590      	push	{r4, r7, lr}
 8002d2a:	b089      	sub	sp, #36	; 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	1dbb      	adds	r3, r7, #6
 8002d34:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d36:	1dbb      	adds	r3, r7, #6
 8002d38:	881a      	ldrh	r2, [r3, #0]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	01db      	lsls	r3, r3, #7
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d100      	bne.n	8002d44 <HAL_PCD_EP_DB_Receive+0x1c>
 8002d42:	e07d      	b.n	8002e40 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2250      	movs	r2, #80	; 0x50
 8002d4a:	5a9b      	ldrh	r3, [r3, r2]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	001a      	movs	r2, r3
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	18d2      	adds	r2, r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	18d3      	adds	r3, r2, r3
 8002d5e:	4a7a      	ldr	r2, [pc, #488]	; (8002f48 <HAL_PCD_EP_DB_Receive+0x220>)
 8002d60:	4694      	mov	ip, r2
 8002d62:	4463      	add	r3, ip
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	211a      	movs	r1, #26
 8002d68:	187b      	adds	r3, r7, r1
 8002d6a:	0592      	lsls	r2, r2, #22
 8002d6c:	0d92      	lsrs	r2, r2, #22
 8002d6e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	699a      	ldr	r2, [r3, #24]
 8002d74:	187b      	adds	r3, r7, r1
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d307      	bcc.n	8002d8c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	1ad2      	subs	r2, r2, r3
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	619a      	str	r2, [r3, #24]
 8002d8a:	e002      	b.n	8002d92 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d121      	bne.n	8002dde <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	001a      	movs	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	18d3      	adds	r3, r2, r3
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	2018      	movs	r0, #24
 8002dae:	183b      	adds	r3, r7, r0
 8002db0:	4966      	ldr	r1, [pc, #408]	; (8002f4c <HAL_PCD_EP_DB_Receive+0x224>)
 8002db2:	400a      	ands	r2, r1
 8002db4:	801a      	strh	r2, [r3, #0]
 8002db6:	183b      	adds	r3, r7, r0
 8002db8:	183a      	adds	r2, r7, r0
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	2180      	movs	r1, #128	; 0x80
 8002dbe:	0189      	lsls	r1, r1, #6
 8002dc0:	404a      	eors	r2, r1
 8002dc2:	801a      	strh	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	001a      	movs	r2, r3
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	18d3      	adds	r3, r2, r3
 8002dd2:	183a      	adds	r2, r7, r0
 8002dd4:	8812      	ldrh	r2, [r2, #0]
 8002dd6:	495e      	ldr	r1, [pc, #376]	; (8002f50 <HAL_PCD_EP_DB_Receive+0x228>)
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	b292      	uxth	r2, r2
 8002ddc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dde:	1dbb      	adds	r3, r7, #6
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	2240      	movs	r2, #64	; 0x40
 8002de4:	4013      	ands	r3, r2
 8002de6:	d01a      	beq.n	8002e1e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	001a      	movs	r2, r3
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	18d3      	adds	r3, r2, r3
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	2016      	movs	r0, #22
 8002dfc:	183b      	adds	r3, r7, r0
 8002dfe:	4955      	ldr	r1, [pc, #340]	; (8002f54 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	001a      	movs	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	18d3      	adds	r3, r2, r3
 8002e12:	183a      	adds	r2, r7, r0
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	4950      	ldr	r1, [pc, #320]	; (8002f58 <HAL_PCD_EP_DB_Receive+0x230>)
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	b292      	uxth	r2, r2
 8002e1c:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002e1e:	241a      	movs	r4, #26
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d100      	bne.n	8002e2a <HAL_PCD_EP_DB_Receive+0x102>
 8002e28:	e086      	b.n	8002f38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	6959      	ldr	r1, [r3, #20]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	891a      	ldrh	r2, [r3, #8]
 8002e36:	193b      	adds	r3, r7, r4
 8002e38:	881b      	ldrh	r3, [r3, #0]
 8002e3a:	f004 f8f5 	bl	8007028 <USB_ReadPMA>
 8002e3e:	e07b      	b.n	8002f38 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2250      	movs	r2, #80	; 0x50
 8002e46:	5a9b      	ldrh	r3, [r3, r2]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	001a      	movs	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	18d2      	adds	r2, r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	4a40      	ldr	r2, [pc, #256]	; (8002f5c <HAL_PCD_EP_DB_Receive+0x234>)
 8002e5c:	4694      	mov	ip, r2
 8002e5e:	4463      	add	r3, ip
 8002e60:	881a      	ldrh	r2, [r3, #0]
 8002e62:	211a      	movs	r1, #26
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	0592      	lsls	r2, r2, #22
 8002e68:	0d92      	lsrs	r2, r2, #22
 8002e6a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	699a      	ldr	r2, [r3, #24]
 8002e70:	187b      	adds	r3, r7, r1
 8002e72:	881b      	ldrh	r3, [r3, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d307      	bcc.n	8002e88 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	187b      	adds	r3, r7, r1
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	1ad2      	subs	r2, r2, r3
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	619a      	str	r2, [r3, #24]
 8002e86:	e002      	b.n	8002e8e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d121      	bne.n	8002eda <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	18d3      	adds	r3, r2, r3
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	201e      	movs	r0, #30
 8002eaa:	183b      	adds	r3, r7, r0
 8002eac:	4927      	ldr	r1, [pc, #156]	; (8002f4c <HAL_PCD_EP_DB_Receive+0x224>)
 8002eae:	400a      	ands	r2, r1
 8002eb0:	801a      	strh	r2, [r3, #0]
 8002eb2:	183b      	adds	r3, r7, r0
 8002eb4:	183a      	adds	r2, r7, r0
 8002eb6:	8812      	ldrh	r2, [r2, #0]
 8002eb8:	2180      	movs	r1, #128	; 0x80
 8002eba:	0189      	lsls	r1, r1, #6
 8002ebc:	404a      	eors	r2, r1
 8002ebe:	801a      	strh	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	001a      	movs	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	18d3      	adds	r3, r2, r3
 8002ece:	183a      	adds	r2, r7, r0
 8002ed0:	8812      	ldrh	r2, [r2, #0]
 8002ed2:	491f      	ldr	r1, [pc, #124]	; (8002f50 <HAL_PCD_EP_DB_Receive+0x228>)
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	b292      	uxth	r2, r2
 8002ed8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002eda:	1dbb      	adds	r3, r7, #6
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	2240      	movs	r2, #64	; 0x40
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d11a      	bne.n	8002f1a <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	001a      	movs	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	18d3      	adds	r3, r2, r3
 8002ef2:	881b      	ldrh	r3, [r3, #0]
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	201c      	movs	r0, #28
 8002ef8:	183b      	adds	r3, r7, r0
 8002efa:	4916      	ldr	r1, [pc, #88]	; (8002f54 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	801a      	strh	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	001a      	movs	r2, r3
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	183a      	adds	r2, r7, r0
 8002f10:	8812      	ldrh	r2, [r2, #0]
 8002f12:	4911      	ldr	r1, [pc, #68]	; (8002f58 <HAL_PCD_EP_DB_Receive+0x230>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	b292      	uxth	r2, r2
 8002f18:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002f1a:	241a      	movs	r4, #26
 8002f1c:	193b      	adds	r3, r7, r4
 8002f1e:	881b      	ldrh	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d009      	beq.n	8002f38 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6959      	ldr	r1, [r3, #20]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	895a      	ldrh	r2, [r3, #10]
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	f004 f878 	bl	8007028 <USB_ReadPMA>
    }
  }

  return count;
 8002f38:	231a      	movs	r3, #26
 8002f3a:	18fb      	adds	r3, r7, r3
 8002f3c:	881b      	ldrh	r3, [r3, #0]
}
 8002f3e:	0018      	movs	r0, r3
 8002f40:	46bd      	mov	sp, r7
 8002f42:	b009      	add	sp, #36	; 0x24
 8002f44:	bd90      	pop	{r4, r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	00000402 	.word	0x00000402
 8002f4c:	ffffbf8f 	.word	0xffffbf8f
 8002f50:	ffff8080 	.word	0xffff8080
 8002f54:	ffff8f8f 	.word	0xffff8f8f
 8002f58:	ffff80c0 	.word	0xffff80c0
 8002f5c:	00000406 	.word	0x00000406

08002f60 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0a2      	sub	sp, #136	; 0x88
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	1dbb      	adds	r3, r7, #6
 8002f6c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f6e:	1dbb      	adds	r3, r7, #6
 8002f70:	881b      	ldrh	r3, [r3, #0]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	4013      	ands	r3, r2
 8002f76:	d100      	bne.n	8002f7a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002f78:	e1c8      	b.n	800330c <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2250      	movs	r2, #80	; 0x50
 8002f80:	5a9b      	ldrh	r3, [r3, r2]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	001a      	movs	r2, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	18d2      	adds	r2, r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	18d3      	adds	r3, r2, r3
 8002f94:	4ad7      	ldr	r2, [pc, #860]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002f96:	4694      	mov	ip, r2
 8002f98:	4463      	add	r3, ip
 8002f9a:	881a      	ldrh	r2, [r3, #0]
 8002f9c:	214e      	movs	r1, #78	; 0x4e
 8002f9e:	187b      	adds	r3, r7, r1
 8002fa0:	0592      	lsls	r2, r2, #22
 8002fa2:	0d92      	lsrs	r2, r2, #22
 8002fa4:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	187b      	adds	r3, r7, r1
 8002fac:	881b      	ldrh	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d907      	bls.n	8002fc2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	187b      	adds	r3, r7, r1
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	1ad2      	subs	r2, r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	619a      	str	r2, [r3, #24]
 8002fc0:	e002      	b.n	8002fc8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d000      	beq.n	8002fd2 <HAL_PCD_EP_DB_Transmit+0x72>
 8002fd0:	e0b5      	b.n	800313e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d125      	bne.n	8003026 <HAL_PCD_EP_DB_Transmit+0xc6>
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2250      	movs	r2, #80	; 0x50
 8002fe6:	5a9b      	ldrh	r3, [r3, r2]
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	001a      	movs	r2, r3
 8002fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fee:	189b      	adds	r3, r3, r2
 8002ff0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	00da      	lsls	r2, r3, #3
 8002ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffa:	18d3      	adds	r3, r2, r3
 8002ffc:	4abd      	ldr	r2, [pc, #756]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002ffe:	4694      	mov	ip, r2
 8003000:	4463      	add	r3, ip
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4abb      	ldr	r2, [pc, #748]	; (80032f8 <HAL_PCD_EP_DB_Transmit+0x398>)
 800300c:	4013      	ands	r3, r2
 800300e:	b29a      	uxth	r2, r3
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b29b      	uxth	r3, r3
 800301a:	4ab8      	ldr	r2, [pc, #736]	; (80032fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 800301c:	4313      	orrs	r3, r2
 800301e:	b29a      	uxth	r2, r3
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	801a      	strh	r2, [r3, #0]
 8003024:	e01b      	b.n	800305e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	785b      	ldrb	r3, [r3, #1]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d117      	bne.n	800305e <HAL_PCD_EP_DB_Transmit+0xfe>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	633b      	str	r3, [r7, #48]	; 0x30
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2250      	movs	r2, #80	; 0x50
 800303a:	5a9b      	ldrh	r3, [r3, r2]
 800303c:	b29b      	uxth	r3, r3
 800303e:	001a      	movs	r2, r3
 8003040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003042:	189b      	adds	r3, r3, r2
 8003044:	633b      	str	r3, [r7, #48]	; 0x30
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	00da      	lsls	r2, r3, #3
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	18d3      	adds	r3, r2, r3
 8003050:	4aa8      	ldr	r2, [pc, #672]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003052:	4694      	mov	ip, r2
 8003054:	4463      	add	r3, ip
 8003056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305a:	2200      	movs	r2, #0
 800305c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	623b      	str	r3, [r7, #32]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	785b      	ldrb	r3, [r3, #1]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d125      	bne.n	80030b8 <HAL_PCD_EP_DB_Transmit+0x158>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2250      	movs	r2, #80	; 0x50
 8003078:	5a9b      	ldrh	r3, [r3, r2]
 800307a:	b29b      	uxth	r3, r3
 800307c:	001a      	movs	r2, r3
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	189b      	adds	r3, r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	00da      	lsls	r2, r3, #3
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	18d3      	adds	r3, r2, r3
 800308e:	4a9c      	ldr	r2, [pc, #624]	; (8003300 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8003090:	4694      	mov	ip, r2
 8003092:	4463      	add	r3, ip
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	881b      	ldrh	r3, [r3, #0]
 800309a:	b29b      	uxth	r3, r3
 800309c:	4a96      	ldr	r2, [pc, #600]	; (80032f8 <HAL_PCD_EP_DB_Transmit+0x398>)
 800309e:	4013      	ands	r3, r2
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	801a      	strh	r2, [r3, #0]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	4a93      	ldr	r2, [pc, #588]	; (80032fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	801a      	strh	r2, [r3, #0]
 80030b6:	e018      	b.n	80030ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HAL_PCD_EP_DB_Transmit+0x18a>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2250      	movs	r2, #80	; 0x50
 80030c6:	5a9b      	ldrh	r3, [r3, r2]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	001a      	movs	r2, r3
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	623b      	str	r3, [r7, #32]
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	00da      	lsls	r2, r3, #3
 80030d8:	6a3b      	ldr	r3, [r7, #32]
 80030da:	18d3      	adds	r3, r2, r3
 80030dc:	4a88      	ldr	r2, [pc, #544]	; (8003300 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80030de:	4694      	mov	ip, r2
 80030e0:	4463      	add	r3, ip
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	2200      	movs	r2, #0
 80030e8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	781a      	ldrb	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0011      	movs	r1, r2
 80030f2:	0018      	movs	r0, r3
 80030f4:	f005 fe24 	bl	8008d40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030f8:	1dbb      	adds	r3, r7, #6
 80030fa:	881a      	ldrh	r2, [r3, #0]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	01db      	lsls	r3, r3, #7
 8003100:	4013      	ands	r3, r2
 8003102:	d100      	bne.n	8003106 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8003104:	e2d4      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	001a      	movs	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	18d3      	adds	r3, r2, r3
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b29a      	uxth	r2, r3
 8003118:	2012      	movs	r0, #18
 800311a:	183b      	adds	r3, r7, r0
 800311c:	4979      	ldr	r1, [pc, #484]	; (8003304 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 800311e:	400a      	ands	r2, r1
 8003120:	801a      	strh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	001a      	movs	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	18d3      	adds	r3, r2, r3
 8003130:	183a      	adds	r2, r7, r0
 8003132:	8812      	ldrh	r2, [r2, #0]
 8003134:	4974      	ldr	r1, [pc, #464]	; (8003308 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8003136:	430a      	orrs	r2, r1
 8003138:	b292      	uxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]
 800313c:	e2b8      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800313e:	1dbb      	adds	r3, r7, #6
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	4013      	ands	r3, r2
 8003148:	d01a      	beq.n	8003180 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	001a      	movs	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	18d3      	adds	r3, r2, r3
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29a      	uxth	r2, r3
 800315c:	2044      	movs	r0, #68	; 0x44
 800315e:	183b      	adds	r3, r7, r0
 8003160:	4968      	ldr	r1, [pc, #416]	; (8003304 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8003162:	400a      	ands	r2, r1
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	001a      	movs	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	18d3      	adds	r3, r2, r3
 8003174:	183a      	adds	r2, r7, r0
 8003176:	8812      	ldrh	r2, [r2, #0]
 8003178:	4963      	ldr	r1, [pc, #396]	; (8003308 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800317a:	430a      	orrs	r2, r1
 800317c:	b292      	uxth	r2, r2
 800317e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	2224      	movs	r2, #36	; 0x24
 8003184:	5c9b      	ldrb	r3, [r3, r2]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d000      	beq.n	800318c <HAL_PCD_EP_DB_Transmit+0x22c>
 800318a:	e291      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	695a      	ldr	r2, [r3, #20]
 8003190:	214e      	movs	r1, #78	; 0x4e
 8003192:	187b      	adds	r3, r7, r1
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	18d2      	adds	r2, r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	69da      	ldr	r2, [r3, #28]
 80031a0:	187b      	adds	r3, r7, r1
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	18d2      	adds	r2, r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	6a1a      	ldr	r2, [r3, #32]
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d309      	bcc.n	80031ca <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c2:	1ad2      	subs	r2, r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	621a      	str	r2, [r3, #32]
 80031c8:	e016      	b.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80031d2:	234e      	movs	r3, #78	; 0x4e
 80031d4:	18fb      	adds	r3, r7, r3
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2224      	movs	r2, #36	; 0x24
 80031de:	2100      	movs	r1, #0
 80031e0:	5499      	strb	r1, [r3, r2]
 80031e2:	e009      	b.n	80031f8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2224      	movs	r2, #36	; 0x24
 80031e8:	2100      	movs	r1, #0
 80031ea:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2200      	movs	r2, #0
 80031f6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	785b      	ldrb	r3, [r3, #1]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d150      	bne.n	80032a2 <HAL_PCD_EP_DB_Transmit+0x342>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2250      	movs	r2, #80	; 0x50
 800320c:	5a9b      	ldrh	r3, [r3, r2]
 800320e:	b29b      	uxth	r3, r3
 8003210:	001a      	movs	r2, r3
 8003212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003214:	189b      	adds	r3, r3, r2
 8003216:	63bb      	str	r3, [r7, #56]	; 0x38
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	00da      	lsls	r2, r3, #3
 800321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003220:	18d3      	adds	r3, r2, r3
 8003222:	4a34      	ldr	r2, [pc, #208]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8003224:	4694      	mov	ip, r2
 8003226:	4463      	add	r3, ip
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
 800322a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800322c:	2b00      	cmp	r3, #0
 800322e:	d110      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8003230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	4a30      	ldr	r2, [pc, #192]	; (80032f8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8003238:	4013      	ands	r3, r2
 800323a:	b29a      	uxth	r2, r3
 800323c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323e:	801a      	strh	r2, [r3, #0]
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29b      	uxth	r3, r3
 8003246:	4a2d      	ldr	r2, [pc, #180]	; (80032fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	b29a      	uxth	r2, r3
 800324c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800324e:	801a      	strh	r2, [r3, #0]
 8003250:	e044      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x37c>
 8003252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003254:	2b3e      	cmp	r3, #62	; 0x3e
 8003256:	d810      	bhi.n	800327a <HAL_PCD_EP_DB_Transmit+0x31a>
 8003258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325a:	085b      	lsrs	r3, r3, #1
 800325c:	64bb      	str	r3, [r7, #72]	; 0x48
 800325e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	d002      	beq.n	800326c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003268:	3301      	adds	r3, #1
 800326a:	64bb      	str	r3, [r7, #72]	; 0x48
 800326c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800326e:	b29b      	uxth	r3, r3
 8003270:	029b      	lsls	r3, r3, #10
 8003272:	b29a      	uxth	r2, r3
 8003274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	e030      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x37c>
 800327a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800327c:	095b      	lsrs	r3, r3, #5
 800327e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003282:	221f      	movs	r2, #31
 8003284:	4013      	ands	r3, r2
 8003286:	d102      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800328a:	3b01      	subs	r3, #1
 800328c:	64bb      	str	r3, [r7, #72]	; 0x48
 800328e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003290:	b29b      	uxth	r3, r3
 8003292:	029b      	lsls	r3, r3, #10
 8003294:	b29b      	uxth	r3, r3
 8003296:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003298:	4313      	orrs	r3, r2
 800329a:	b29a      	uxth	r2, r3
 800329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329e:	801a      	strh	r2, [r3, #0]
 80032a0:	e01c      	b.n	80032dc <HAL_PCD_EP_DB_Transmit+0x37c>
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	785b      	ldrb	r3, [r3, #1]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d118      	bne.n	80032dc <HAL_PCD_EP_DB_Transmit+0x37c>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	643b      	str	r3, [r7, #64]	; 0x40
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2250      	movs	r2, #80	; 0x50
 80032b6:	5a9b      	ldrh	r3, [r3, r2]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	001a      	movs	r2, r3
 80032bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032be:	189b      	adds	r3, r3, r2
 80032c0:	643b      	str	r3, [r7, #64]	; 0x40
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	00da      	lsls	r2, r3, #3
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	18d3      	adds	r3, r2, r3
 80032cc:	4a09      	ldr	r2, [pc, #36]	; (80032f4 <HAL_PCD_EP_DB_Transmit+0x394>)
 80032ce:	4694      	mov	ip, r2
 80032d0:	4463      	add	r3, ip
 80032d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6818      	ldr	r0, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	6959      	ldr	r1, [r3, #20]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	891a      	ldrh	r2, [r3, #8]
 80032e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ea:	b29b      	uxth	r3, r3
 80032ec:	f003 fe58 	bl	8006fa0 <USB_WritePMA>
 80032f0:	e1de      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	00000402 	.word	0x00000402
 80032f8:	ffff83ff 	.word	0xffff83ff
 80032fc:	ffff8000 	.word	0xffff8000
 8003300:	00000406 	.word	0x00000406
 8003304:	ffff8f8f 	.word	0xffff8f8f
 8003308:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2250      	movs	r2, #80	; 0x50
 8003312:	5a9b      	ldrh	r3, [r3, r2]
 8003314:	b29b      	uxth	r3, r3
 8003316:	001a      	movs	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	18d2      	adds	r2, r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	18d3      	adds	r3, r2, r3
 8003326:	4aca      	ldr	r2, [pc, #808]	; (8003650 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003328:	4694      	mov	ip, r2
 800332a:	4463      	add	r3, ip
 800332c:	881a      	ldrh	r2, [r3, #0]
 800332e:	214e      	movs	r1, #78	; 0x4e
 8003330:	187b      	adds	r3, r7, r1
 8003332:	0592      	lsls	r2, r2, #22
 8003334:	0d92      	lsrs	r2, r2, #22
 8003336:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	699a      	ldr	r2, [r3, #24]
 800333c:	187b      	adds	r3, r7, r1
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d307      	bcc.n	8003354 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	699a      	ldr	r2, [r3, #24]
 8003348:	187b      	adds	r3, r7, r1
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	1ad2      	subs	r2, r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	619a      	str	r2, [r3, #24]
 8003352:	e002      	b.n	800335a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d000      	beq.n	8003364 <HAL_PCD_EP_DB_Transmit+0x404>
 8003362:	e0c0      	b.n	80034e6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	785b      	ldrb	r3, [r3, #1]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d125      	bne.n	80033b8 <HAL_PCD_EP_DB_Transmit+0x458>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2250      	movs	r2, #80	; 0x50
 8003378:	5a9b      	ldrh	r3, [r3, r2]
 800337a:	b29b      	uxth	r3, r3
 800337c:	001a      	movs	r2, r3
 800337e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003380:	189b      	adds	r3, r3, r2
 8003382:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	00da      	lsls	r2, r3, #3
 800338a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338c:	18d3      	adds	r3, r2, r3
 800338e:	4ab1      	ldr	r2, [pc, #708]	; (8003654 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003390:	4694      	mov	ip, r2
 8003392:	4463      	add	r3, ip
 8003394:	66bb      	str	r3, [r7, #104]	; 0x68
 8003396:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	4aae      	ldr	r2, [pc, #696]	; (8003658 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800339e:	4013      	ands	r3, r2
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a4:	801a      	strh	r2, [r3, #0]
 80033a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	4aab      	ldr	r2, [pc, #684]	; (800365c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033b4:	801a      	strh	r2, [r3, #0]
 80033b6:	e01b      	b.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x490>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	785b      	ldrb	r3, [r3, #1]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d117      	bne.n	80033f0 <HAL_PCD_EP_DB_Transmit+0x490>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	677b      	str	r3, [r7, #116]	; 0x74
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2250      	movs	r2, #80	; 0x50
 80033cc:	5a9b      	ldrh	r3, [r3, r2]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	001a      	movs	r2, r3
 80033d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033d4:	189b      	adds	r3, r3, r2
 80033d6:	677b      	str	r3, [r7, #116]	; 0x74
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	00da      	lsls	r2, r3, #3
 80033de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033e0:	18d3      	adds	r3, r2, r3
 80033e2:	4a9c      	ldr	r2, [pc, #624]	; (8003654 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80033e4:	4694      	mov	ip, r2
 80033e6:	4463      	add	r3, ip
 80033e8:	673b      	str	r3, [r7, #112]	; 0x70
 80033ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033ec:	2200      	movs	r2, #0
 80033ee:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	785b      	ldrb	r3, [r3, #1]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d130      	bne.n	8003460 <HAL_PCD_EP_DB_Transmit+0x500>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2180      	movs	r1, #128	; 0x80
 8003404:	187a      	adds	r2, r7, r1
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2250      	movs	r2, #80	; 0x50
 800340e:	5a9b      	ldrh	r3, [r3, r2]
 8003410:	b29b      	uxth	r3, r3
 8003412:	001a      	movs	r2, r3
 8003414:	187b      	adds	r3, r7, r1
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	189b      	adds	r3, r3, r2
 800341a:	187a      	adds	r2, r7, r1
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	00da      	lsls	r2, r3, #3
 8003424:	187b      	adds	r3, r7, r1
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	4a89      	ldr	r2, [pc, #548]	; (8003650 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800342c:	4694      	mov	ip, r2
 800342e:	4463      	add	r3, ip
 8003430:	2184      	movs	r1, #132	; 0x84
 8003432:	187a      	adds	r2, r7, r1
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	187b      	adds	r3, r7, r1
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	881b      	ldrh	r3, [r3, #0]
 800343c:	b29b      	uxth	r3, r3
 800343e:	4a86      	ldr	r2, [pc, #536]	; (8003658 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003440:	4013      	ands	r3, r2
 8003442:	b29a      	uxth	r2, r3
 8003444:	187b      	adds	r3, r7, r1
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	801a      	strh	r2, [r3, #0]
 800344a:	187b      	adds	r3, r7, r1
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	b29b      	uxth	r3, r3
 8003452:	4a82      	ldr	r2, [pc, #520]	; (800365c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	b29a      	uxth	r2, r3
 8003458:	187b      	adds	r3, r7, r1
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	e018      	b.n	8003492 <HAL_PCD_EP_DB_Transmit+0x532>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d114      	bne.n	8003492 <HAL_PCD_EP_DB_Transmit+0x532>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2250      	movs	r2, #80	; 0x50
 800346e:	5a9b      	ldrh	r3, [r3, r2]
 8003470:	b29b      	uxth	r3, r3
 8003472:	001a      	movs	r2, r3
 8003474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003476:	189b      	adds	r3, r3, r2
 8003478:	67bb      	str	r3, [r7, #120]	; 0x78
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	00da      	lsls	r2, r3, #3
 8003480:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003482:	18d3      	adds	r3, r2, r3
 8003484:	4a72      	ldr	r2, [pc, #456]	; (8003650 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003486:	4694      	mov	ip, r2
 8003488:	4463      	add	r3, ip
 800348a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800348c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800348e:	2200      	movs	r2, #0
 8003490:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781a      	ldrb	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	0011      	movs	r1, r2
 800349a:	0018      	movs	r0, r3
 800349c:	f005 fc50 	bl	8008d40 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034a0:	1dbb      	adds	r3, r7, #6
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	2380      	movs	r3, #128	; 0x80
 80034a6:	01db      	lsls	r3, r3, #7
 80034a8:	4013      	ands	r3, r2
 80034aa:	d000      	beq.n	80034ae <HAL_PCD_EP_DB_Transmit+0x54e>
 80034ac:	e100      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	001a      	movs	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	18d3      	adds	r3, r2, r3
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29a      	uxth	r2, r3
 80034c0:	2046      	movs	r0, #70	; 0x46
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	4966      	ldr	r1, [pc, #408]	; (8003660 <HAL_PCD_EP_DB_Transmit+0x700>)
 80034c6:	400a      	ands	r2, r1
 80034c8:	801a      	strh	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	001a      	movs	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	18d3      	adds	r3, r2, r3
 80034d8:	183a      	adds	r2, r7, r0
 80034da:	8812      	ldrh	r2, [r2, #0]
 80034dc:	4961      	ldr	r1, [pc, #388]	; (8003664 <HAL_PCD_EP_DB_Transmit+0x704>)
 80034de:	430a      	orrs	r2, r1
 80034e0:	b292      	uxth	r2, r2
 80034e2:	801a      	strh	r2, [r3, #0]
 80034e4:	e0e4      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80034e6:	1dbb      	adds	r3, r7, #6
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	01db      	lsls	r3, r3, #7
 80034ee:	4013      	ands	r3, r2
 80034f0:	d11a      	bne.n	8003528 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	001a      	movs	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	18d3      	adds	r3, r2, r3
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29a      	uxth	r2, r3
 8003504:	204c      	movs	r0, #76	; 0x4c
 8003506:	183b      	adds	r3, r7, r0
 8003508:	4955      	ldr	r1, [pc, #340]	; (8003660 <HAL_PCD_EP_DB_Transmit+0x700>)
 800350a:	400a      	ands	r2, r1
 800350c:	801a      	strh	r2, [r3, #0]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	001a      	movs	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	18d3      	adds	r3, r2, r3
 800351c:	183a      	adds	r2, r7, r0
 800351e:	8812      	ldrh	r2, [r2, #0]
 8003520:	4950      	ldr	r1, [pc, #320]	; (8003664 <HAL_PCD_EP_DB_Transmit+0x704>)
 8003522:	430a      	orrs	r2, r1
 8003524:	b292      	uxth	r2, r2
 8003526:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2224      	movs	r2, #36	; 0x24
 800352c:	5c9b      	ldrb	r3, [r3, r2]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d000      	beq.n	8003534 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8003532:	e0bd      	b.n	80036b0 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	214e      	movs	r1, #78	; 0x4e
 800353a:	187b      	adds	r3, r7, r1
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	18d2      	adds	r2, r2, r3
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	187b      	adds	r3, r7, r1
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	18d2      	adds	r2, r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	6a1a      	ldr	r2, [r3, #32]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	429a      	cmp	r2, r3
 800355c:	d309      	bcc.n	8003572 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	6a1a      	ldr	r2, [r3, #32]
 8003568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800356a:	1ad2      	subs	r2, r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	621a      	str	r2, [r3, #32]
 8003570:	e016      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d108      	bne.n	800358c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 800357a:	234e      	movs	r3, #78	; 0x4e
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2224      	movs	r2, #36	; 0x24
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]
 800358a:	e009      	b.n	80035a0 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2224      	movs	r2, #36	; 0x24
 800359c:	2100      	movs	r1, #0
 800359e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	667b      	str	r3, [r7, #100]	; 0x64
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	785b      	ldrb	r3, [r3, #1]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d15c      	bne.n	8003668 <HAL_PCD_EP_DB_Transmit+0x708>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2250      	movs	r2, #80	; 0x50
 80035ba:	5a9b      	ldrh	r3, [r3, r2]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	001a      	movs	r2, r3
 80035c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	00da      	lsls	r2, r3, #3
 80035cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035ce:	18d3      	adds	r3, r2, r3
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80035d2:	4694      	mov	ip, r2
 80035d4:	4463      	add	r3, ip
 80035d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d110      	bne.n	8003600 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80035de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e0:	881b      	ldrh	r3, [r3, #0]
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	4a1c      	ldr	r2, [pc, #112]	; (8003658 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ec:	801a      	strh	r2, [r3, #0]
 80035ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	4a19      	ldr	r2, [pc, #100]	; (800365c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	e04d      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003600:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003602:	2b3e      	cmp	r3, #62	; 0x3e
 8003604:	d810      	bhi.n	8003628 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8003606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	657b      	str	r3, [r7, #84]	; 0x54
 800360c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360e:	2201      	movs	r2, #1
 8003610:	4013      	ands	r3, r2
 8003612:	d002      	beq.n	800361a <HAL_PCD_EP_DB_Transmit+0x6ba>
 8003614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003616:	3301      	adds	r3, #1
 8003618:	657b      	str	r3, [r7, #84]	; 0x54
 800361a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800361c:	b29b      	uxth	r3, r3
 800361e:	029b      	lsls	r3, r3, #10
 8003620:	b29a      	uxth	r2, r3
 8003622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003624:	801a      	strh	r2, [r3, #0]
 8003626:	e039      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	657b      	str	r3, [r7, #84]	; 0x54
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	221f      	movs	r2, #31
 8003632:	4013      	ands	r3, r2
 8003634:	d102      	bne.n	800363c <HAL_PCD_EP_DB_Transmit+0x6dc>
 8003636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003638:	3b01      	subs	r3, #1
 800363a:	657b      	str	r3, [r7, #84]	; 0x54
 800363c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363e:	b29b      	uxth	r3, r3
 8003640:	029b      	lsls	r3, r3, #10
 8003642:	b29b      	uxth	r3, r3
 8003644:	4a05      	ldr	r2, [pc, #20]	; (800365c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	b29a      	uxth	r2, r3
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	e025      	b.n	800369c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003650:	00000406 	.word	0x00000406
 8003654:	00000402 	.word	0x00000402
 8003658:	ffff83ff 	.word	0xffff83ff
 800365c:	ffff8000 	.word	0xffff8000
 8003660:	ffff8f8f 	.word	0xffff8f8f
 8003664:	ffffc080 	.word	0xffffc080
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d115      	bne.n	800369c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2250      	movs	r2, #80	; 0x50
 8003676:	5a9b      	ldrh	r3, [r3, r2]
 8003678:	b29b      	uxth	r3, r3
 800367a:	001a      	movs	r2, r3
 800367c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800367e:	189b      	adds	r3, r3, r2
 8003680:	667b      	str	r3, [r7, #100]	; 0x64
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	00da      	lsls	r2, r3, #3
 8003688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800368e:	4694      	mov	ip, r2
 8003690:	4463      	add	r3, ip
 8003692:	663b      	str	r3, [r7, #96]	; 0x60
 8003694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003696:	b29a      	uxth	r2, r3
 8003698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800369a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6818      	ldr	r0, [r3, #0]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	6959      	ldr	r1, [r3, #20]
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	895a      	ldrh	r2, [r3, #10]
 80036a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f003 fc78 	bl	8006fa0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	001a      	movs	r2, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	18d3      	adds	r3, r2, r3
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	2010      	movs	r0, #16
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	4911      	ldr	r1, [pc, #68]	; (800370c <HAL_PCD_EP_DB_Transmit+0x7ac>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	801a      	strh	r2, [r3, #0]
 80036cc:	183b      	adds	r3, r7, r0
 80036ce:	183a      	adds	r2, r7, r0
 80036d0:	8812      	ldrh	r2, [r2, #0]
 80036d2:	2110      	movs	r1, #16
 80036d4:	404a      	eors	r2, r1
 80036d6:	801a      	strh	r2, [r3, #0]
 80036d8:	183b      	adds	r3, r7, r0
 80036da:	183a      	adds	r2, r7, r0
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	2120      	movs	r1, #32
 80036e0:	404a      	eors	r2, r1
 80036e2:	801a      	strh	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	001a      	movs	r2, r3
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	18d3      	adds	r3, r2, r3
 80036f2:	183a      	adds	r2, r7, r0
 80036f4:	8812      	ldrh	r2, [r2, #0]
 80036f6:	4906      	ldr	r1, [pc, #24]	; (8003710 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80036f8:	430a      	orrs	r2, r1
 80036fa:	b292      	uxth	r2, r2
 80036fc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	0018      	movs	r0, r3
 8003702:	46bd      	mov	sp, r7
 8003704:	b022      	add	sp, #136	; 0x88
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00000406 	.word	0x00000406
 800370c:	ffff8fbf 	.word	0xffff8fbf
 8003710:	ffff8080 	.word	0xffff8080

08003714 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	0008      	movs	r0, r1
 800371e:	0011      	movs	r1, r2
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	240a      	movs	r4, #10
 8003724:	193b      	adds	r3, r7, r4
 8003726:	1c02      	adds	r2, r0, #0
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	2308      	movs	r3, #8
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	1c0a      	adds	r2, r1, #0
 8003730:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003732:	0021      	movs	r1, r4
 8003734:	187b      	adds	r3, r7, r1
 8003736:	881b      	ldrh	r3, [r3, #0]
 8003738:	2280      	movs	r2, #128	; 0x80
 800373a:	4013      	ands	r3, r2
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00c      	beq.n	800375c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003742:	187b      	adds	r3, r7, r1
 8003744:	881b      	ldrh	r3, [r3, #0]
 8003746:	2207      	movs	r2, #7
 8003748:	4013      	ands	r3, r2
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	0013      	movs	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	189b      	adds	r3, r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	18d3      	adds	r3, r2, r3
 8003758:	617b      	str	r3, [r7, #20]
 800375a:	e00b      	b.n	8003774 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800375c:	230a      	movs	r3, #10
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	0013      	movs	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	189b      	adds	r3, r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	3369      	adds	r3, #105	; 0x69
 800376c:	33ff      	adds	r3, #255	; 0xff
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	18d3      	adds	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003774:	2308      	movs	r3, #8
 8003776:	18fb      	adds	r3, r7, r3
 8003778:	881b      	ldrh	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d107      	bne.n	800378e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	2200      	movs	r2, #0
 8003782:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	b29a      	uxth	r2, r3
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	80da      	strh	r2, [r3, #6]
 800378c:	e00b      	b.n	80037a6 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2201      	movs	r2, #1
 8003792:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	b29a      	uxth	r2, r3
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	0018      	movs	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	b007      	add	sp, #28
 80037ae:	bd90      	pop	{r4, r7, pc}

080037b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	23ba      	movs	r3, #186	; 0xba
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	2101      	movs	r1, #1
 80037c6:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	23b8      	movs	r3, #184	; 0xb8
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	2100      	movs	r1, #0
 80037d0:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2254      	movs	r2, #84	; 0x54
 80037d6:	5a9b      	ldrh	r3, [r3, r2]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2201      	movs	r2, #1
 80037dc:	4313      	orrs	r3, r2
 80037de:	b299      	uxth	r1, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2254      	movs	r2, #84	; 0x54
 80037e4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2254      	movs	r2, #84	; 0x54
 80037ea:	5a9b      	ldrh	r3, [r3, r2]
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2202      	movs	r2, #2
 80037f0:	4313      	orrs	r3, r2
 80037f2:	b299      	uxth	r1, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2254      	movs	r2, #84	; 0x54
 80037f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b004      	add	sp, #16
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	000a      	movs	r2, r1
 800380e:	1cfb      	adds	r3, r7, #3
 8003810:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b002      	add	sp, #8
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800381c:	b5b0      	push	{r4, r5, r7, lr}
 800381e:	b08a      	sub	sp, #40	; 0x28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d102      	bne.n	8003830 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f000 fbbf 	bl	8003fae <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003830:	4bc9      	ldr	r3, [pc, #804]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	220c      	movs	r2, #12
 8003836:	4013      	ands	r3, r2
 8003838:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800383a:	4bc7      	ldr	r3, [pc, #796]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 800383c:	68da      	ldr	r2, [r3, #12]
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	025b      	lsls	r3, r3, #9
 8003842:	4013      	ands	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2201      	movs	r2, #1
 800384c:	4013      	ands	r3, r2
 800384e:	d100      	bne.n	8003852 <HAL_RCC_OscConfig+0x36>
 8003850:	e07e      	b.n	8003950 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d007      	beq.n	8003868 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b0c      	cmp	r3, #12
 800385c:	d112      	bne.n	8003884 <HAL_RCC_OscConfig+0x68>
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	2380      	movs	r3, #128	; 0x80
 8003862:	025b      	lsls	r3, r3, #9
 8003864:	429a      	cmp	r2, r3
 8003866:	d10d      	bne.n	8003884 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003868:	4bbb      	ldr	r3, [pc, #748]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	029b      	lsls	r3, r3, #10
 8003870:	4013      	ands	r3, r2
 8003872:	d100      	bne.n	8003876 <HAL_RCC_OscConfig+0x5a>
 8003874:	e06b      	b.n	800394e <HAL_RCC_OscConfig+0x132>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d167      	bne.n	800394e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f000 fb95 	bl	8003fae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	025b      	lsls	r3, r3, #9
 800388c:	429a      	cmp	r2, r3
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x84>
 8003890:	4bb1      	ldr	r3, [pc, #708]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	4bb0      	ldr	r3, [pc, #704]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003896:	2180      	movs	r1, #128	; 0x80
 8003898:	0249      	lsls	r1, r1, #9
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e027      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	23a0      	movs	r3, #160	; 0xa0
 80038a6:	02db      	lsls	r3, r3, #11
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d10e      	bne.n	80038ca <HAL_RCC_OscConfig+0xae>
 80038ac:	4baa      	ldr	r3, [pc, #680]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	4ba9      	ldr	r3, [pc, #676]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038b2:	2180      	movs	r1, #128	; 0x80
 80038b4:	02c9      	lsls	r1, r1, #11
 80038b6:	430a      	orrs	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	4ba7      	ldr	r3, [pc, #668]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	4ba6      	ldr	r3, [pc, #664]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0249      	lsls	r1, r1, #9
 80038c4:	430a      	orrs	r2, r1
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	e012      	b.n	80038f0 <HAL_RCC_OscConfig+0xd4>
 80038ca:	4ba3      	ldr	r3, [pc, #652]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4ba2      	ldr	r3, [pc, #648]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038d0:	49a2      	ldr	r1, [pc, #648]	; (8003b5c <HAL_RCC_OscConfig+0x340>)
 80038d2:	400a      	ands	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	4ba0      	ldr	r3, [pc, #640]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	2380      	movs	r3, #128	; 0x80
 80038dc:	025b      	lsls	r3, r3, #9
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4b9c      	ldr	r3, [pc, #624]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b9b      	ldr	r3, [pc, #620]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80038ea:	499d      	ldr	r1, [pc, #628]	; (8003b60 <HAL_RCC_OscConfig+0x344>)
 80038ec:	400a      	ands	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f8:	f7fd f9e6 	bl	8000cc8 <HAL_GetTick>
 80038fc:	0003      	movs	r3, r0
 80038fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003900:	e009      	b.n	8003916 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003902:	f7fd f9e1 	bl	8000cc8 <HAL_GetTick>
 8003906:	0002      	movs	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d902      	bls.n	8003916 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	f000 fb4c 	bl	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003916:	4b90      	ldr	r3, [pc, #576]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	029b      	lsls	r3, r3, #10
 800391e:	4013      	ands	r3, r2
 8003920:	d0ef      	beq.n	8003902 <HAL_RCC_OscConfig+0xe6>
 8003922:	e015      	b.n	8003950 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd f9d0 	bl	8000cc8 <HAL_GetTick>
 8003928:	0003      	movs	r3, r0
 800392a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800392e:	f7fd f9cb 	bl	8000cc8 <HAL_GetTick>
 8003932:	0002      	movs	r2, r0
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b64      	cmp	r3, #100	; 0x64
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e336      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003940:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	029b      	lsls	r3, r3, #10
 8003948:	4013      	ands	r3, r2
 800394a:	d1f0      	bne.n	800392e <HAL_RCC_OscConfig+0x112>
 800394c:	e000      	b.n	8003950 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800394e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2202      	movs	r2, #2
 8003956:	4013      	ands	r3, r2
 8003958:	d100      	bne.n	800395c <HAL_RCC_OscConfig+0x140>
 800395a:	e099      	b.n	8003a90 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	2220      	movs	r2, #32
 8003966:	4013      	ands	r3, r2
 8003968:	d009      	beq.n	800397e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800396a:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003970:	2120      	movs	r1, #32
 8003972:	430a      	orrs	r2, r1
 8003974:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	2220      	movs	r2, #32
 800397a:	4393      	bics	r3, r2
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b04      	cmp	r3, #4
 8003982:	d005      	beq.n	8003990 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	2b0c      	cmp	r3, #12
 8003988:	d13e      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1ec>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d13b      	bne.n	8003a08 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003990:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2204      	movs	r2, #4
 8003996:	4013      	ands	r3, r2
 8003998:	d004      	beq.n	80039a4 <HAL_RCC_OscConfig+0x188>
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e304      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039a4:	4b6c      	ldr	r3, [pc, #432]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	; (8003b64 <HAL_RCC_OscConfig+0x348>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	021a      	lsls	r2, r3, #8
 80039b4:	4b68      	ldr	r3, [pc, #416]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2209      	movs	r2, #9
 80039c0:	4393      	bics	r3, r2
 80039c2:	0019      	movs	r1, r3
 80039c4:	4b64      	ldr	r3, [pc, #400]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039cc:	f000 fc42 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80039d0:	0001      	movs	r1, r0
 80039d2:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	220f      	movs	r2, #15
 80039da:	4013      	ands	r3, r2
 80039dc:	4a62      	ldr	r2, [pc, #392]	; (8003b68 <HAL_RCC_OscConfig+0x34c>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	000a      	movs	r2, r1
 80039e2:	40da      	lsrs	r2, r3
 80039e4:	4b61      	ldr	r3, [pc, #388]	; (8003b6c <HAL_RCC_OscConfig+0x350>)
 80039e6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80039e8:	4b61      	ldr	r3, [pc, #388]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2513      	movs	r5, #19
 80039ee:	197c      	adds	r4, r7, r5
 80039f0:	0018      	movs	r0, r3
 80039f2:	f7fd f923 	bl	8000c3c <HAL_InitTick>
 80039f6:	0003      	movs	r3, r0
 80039f8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80039fa:	197b      	adds	r3, r7, r5
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d046      	beq.n	8003a90 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003a02:	197b      	adds	r3, r7, r5
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	e2d2      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d027      	beq.n	8003a5e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003a0e:	4b52      	ldr	r3, [pc, #328]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2209      	movs	r2, #9
 8003a14:	4393      	bics	r3, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	4b4f      	ldr	r3, [pc, #316]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a20:	f7fd f952 	bl	8000cc8 <HAL_GetTick>
 8003a24:	0003      	movs	r3, r0
 8003a26:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7fd f94d 	bl	8000cc8 <HAL_GetTick>
 8003a2e:	0002      	movs	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e2b8      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a3c:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2204      	movs	r2, #4
 8003a42:	4013      	ands	r3, r2
 8003a44:	d0f1      	beq.n	8003a2a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a46:	4b44      	ldr	r3, [pc, #272]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4a46      	ldr	r2, [pc, #280]	; (8003b64 <HAL_RCC_OscConfig+0x348>)
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	0019      	movs	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	021a      	lsls	r2, r3, #8
 8003a56:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	e018      	b.n	8003a90 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	4b3d      	ldr	r3, [pc, #244]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a64:	2101      	movs	r1, #1
 8003a66:	438a      	bics	r2, r1
 8003a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a6a:	f7fd f92d 	bl	8000cc8 <HAL_GetTick>
 8003a6e:	0003      	movs	r3, r0
 8003a70:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd f928 	bl	8000cc8 <HAL_GetTick>
 8003a78:	0002      	movs	r2, r0
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e293      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d1f1      	bne.n	8003a74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2210      	movs	r2, #16
 8003a96:	4013      	ands	r3, r2
 8003a98:	d100      	bne.n	8003a9c <HAL_RCC_OscConfig+0x280>
 8003a9a:	e0a2      	b.n	8003be2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d140      	bne.n	8003b24 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d005      	beq.n	8003aba <HAL_RCC_OscConfig+0x29e>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e279      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <HAL_RCC_OscConfig+0x358>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ac8:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003aca:	430a      	orrs	r2, r1
 8003acc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	0a19      	lsrs	r1, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	061a      	lsls	r2, r3, #24
 8003adc:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003ade:	430a      	orrs	r2, r1
 8003ae0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	0b5b      	lsrs	r3, r3, #13
 8003ae8:	3301      	adds	r3, #1
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	0212      	lsls	r2, r2, #8
 8003aee:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003af0:	4b19      	ldr	r3, [pc, #100]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	210f      	movs	r1, #15
 8003af8:	400b      	ands	r3, r1
 8003afa:	491b      	ldr	r1, [pc, #108]	; (8003b68 <HAL_RCC_OscConfig+0x34c>)
 8003afc:	5ccb      	ldrb	r3, [r1, r3]
 8003afe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003b00:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <HAL_RCC_OscConfig+0x350>)
 8003b02:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCC_OscConfig+0x354>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2513      	movs	r5, #19
 8003b0a:	197c      	adds	r4, r7, r5
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7fd f895 	bl	8000c3c <HAL_InitTick>
 8003b12:	0003      	movs	r3, r0
 8003b14:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003b16:	197b      	adds	r3, r7, r5
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d061      	beq.n	8003be2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003b1e:	197b      	adds	r3, r7, r5
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	e244      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d040      	beq.n	8003bae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x33c>)
 8003b32:	2180      	movs	r1, #128	; 0x80
 8003b34:	0049      	lsls	r1, r1, #1
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3a:	f7fd f8c5 	bl	8000cc8 <HAL_GetTick>
 8003b3e:	0003      	movs	r3, r0
 8003b40:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b42:	e019      	b.n	8003b78 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b44:	f7fd f8c0 	bl	8000cc8 <HAL_GetTick>
 8003b48:	0002      	movs	r2, r0
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d912      	bls.n	8003b78 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e22b      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	fffeffff 	.word	0xfffeffff
 8003b60:	fffbffff 	.word	0xfffbffff
 8003b64:	ffffe0ff 	.word	0xffffe0ff
 8003b68:	08009570 	.word	0x08009570
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000004 	.word	0x20000004
 8003b74:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b78:	4bca      	ldr	r3, [pc, #808]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4013      	ands	r3, r2
 8003b82:	d0df      	beq.n	8003b44 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b84:	4bc7      	ldr	r3, [pc, #796]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	4ac7      	ldr	r2, [pc, #796]	; (8003ea8 <HAL_RCC_OscConfig+0x68c>)
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	0019      	movs	r1, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b92:	4bc4      	ldr	r3, [pc, #784]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b98:	4bc2      	ldr	r3, [pc, #776]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	0a19      	lsrs	r1, r3, #8
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	061a      	lsls	r2, r3, #24
 8003ba6:	4bbf      	ldr	r3, [pc, #764]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	e019      	b.n	8003be2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bae:	4bbd      	ldr	r3, [pc, #756]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4bbc      	ldr	r3, [pc, #752]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003bb4:	49bd      	ldr	r1, [pc, #756]	; (8003eac <HAL_RCC_OscConfig+0x690>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fd f885 	bl	8000cc8 <HAL_GetTick>
 8003bbe:	0003      	movs	r3, r0
 8003bc0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bc2:	e008      	b.n	8003bd6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc4:	f7fd f880 	bl	8000cc8 <HAL_GetTick>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e1eb      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003bd6:	4bb3      	ldr	r3, [pc, #716]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4013      	ands	r3, r2
 8003be0:	d1f0      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2208      	movs	r2, #8
 8003be8:	4013      	ands	r3, r2
 8003bea:	d036      	beq.n	8003c5a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	695b      	ldr	r3, [r3, #20]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d019      	beq.n	8003c28 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bf4:	4bab      	ldr	r3, [pc, #684]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003bf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bf8:	4baa      	ldr	r3, [pc, #680]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fd f862 	bl	8000cc8 <HAL_GetTick>
 8003c04:	0003      	movs	r3, r0
 8003c06:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c08:	e008      	b.n	8003c1c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0a:	f7fd f85d 	bl	8000cc8 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d901      	bls.n	8003c1c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e1c8      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003c1c:	4ba1      	ldr	r3, [pc, #644]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d0f1      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3ee>
 8003c26:	e018      	b.n	8003c5a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b9e      	ldr	r3, [pc, #632]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c2c:	4b9d      	ldr	r3, [pc, #628]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c2e:	2101      	movs	r1, #1
 8003c30:	438a      	bics	r2, r1
 8003c32:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c34:	f7fd f848 	bl	8000cc8 <HAL_GetTick>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c3c:	e008      	b.n	8003c50 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c3e:	f7fd f843 	bl	8000cc8 <HAL_GetTick>
 8003c42:	0002      	movs	r2, r0
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1ae      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003c50:	4b94      	ldr	r3, [pc, #592]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c54:	2202      	movs	r2, #2
 8003c56:	4013      	ands	r3, r2
 8003c58:	d1f1      	bne.n	8003c3e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2204      	movs	r2, #4
 8003c60:	4013      	ands	r3, r2
 8003c62:	d100      	bne.n	8003c66 <HAL_RCC_OscConfig+0x44a>
 8003c64:	e0ae      	b.n	8003dc4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c66:	2023      	movs	r0, #35	; 0x23
 8003c68:	183b      	adds	r3, r7, r0
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c6e:	4b8d      	ldr	r3, [pc, #564]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	2380      	movs	r3, #128	; 0x80
 8003c74:	055b      	lsls	r3, r3, #21
 8003c76:	4013      	ands	r3, r2
 8003c78:	d109      	bne.n	8003c8e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	4b8a      	ldr	r3, [pc, #552]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c7e:	4b89      	ldr	r3, [pc, #548]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0549      	lsls	r1, r1, #21
 8003c84:	430a      	orrs	r2, r1
 8003c86:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003c88:	183b      	adds	r3, r7, r0
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c8e:	4b88      	ldr	r3, [pc, #544]	; (8003eb0 <HAL_RCC_OscConfig+0x694>)
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	4013      	ands	r3, r2
 8003c98:	d11a      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9a:	4b85      	ldr	r3, [pc, #532]	; (8003eb0 <HAL_RCC_OscConfig+0x694>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b84      	ldr	r3, [pc, #528]	; (8003eb0 <HAL_RCC_OscConfig+0x694>)
 8003ca0:	2180      	movs	r1, #128	; 0x80
 8003ca2:	0049      	lsls	r1, r1, #1
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca8:	f7fd f80e 	bl	8000cc8 <HAL_GetTick>
 8003cac:	0003      	movs	r3, r0
 8003cae:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cb2:	f7fd f809 	bl	8000cc8 <HAL_GetTick>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b64      	cmp	r3, #100	; 0x64
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e174      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cc4:	4b7a      	ldr	r3, [pc, #488]	; (8003eb0 <HAL_RCC_OscConfig+0x694>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	005b      	lsls	r3, r3, #1
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d0f0      	beq.n	8003cb2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x4d0>
 8003cdc:	4b71      	ldr	r3, [pc, #452]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ce0:	4b70      	ldr	r3, [pc, #448]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	0049      	lsls	r1, r1, #1
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	651a      	str	r2, [r3, #80]	; 0x50
 8003cea:	e031      	b.n	8003d50 <HAL_RCC_OscConfig+0x534>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10c      	bne.n	8003d0e <HAL_RCC_OscConfig+0x4f2>
 8003cf4:	4b6b      	ldr	r3, [pc, #428]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003cf6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003cf8:	4b6a      	ldr	r3, [pc, #424]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003cfa:	496c      	ldr	r1, [pc, #432]	; (8003eac <HAL_RCC_OscConfig+0x690>)
 8003cfc:	400a      	ands	r2, r1
 8003cfe:	651a      	str	r2, [r3, #80]	; 0x50
 8003d00:	4b68      	ldr	r3, [pc, #416]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d04:	4b67      	ldr	r3, [pc, #412]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d06:	496b      	ldr	r1, [pc, #428]	; (8003eb4 <HAL_RCC_OscConfig+0x698>)
 8003d08:	400a      	ands	r2, r1
 8003d0a:	651a      	str	r2, [r3, #80]	; 0x50
 8003d0c:	e020      	b.n	8003d50 <HAL_RCC_OscConfig+0x534>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	23a0      	movs	r3, #160	; 0xa0
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d10e      	bne.n	8003d38 <HAL_RCC_OscConfig+0x51c>
 8003d1a:	4b62      	ldr	r3, [pc, #392]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d1e:	4b61      	ldr	r3, [pc, #388]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	00c9      	lsls	r1, r1, #3
 8003d24:	430a      	orrs	r2, r1
 8003d26:	651a      	str	r2, [r3, #80]	; 0x50
 8003d28:	4b5e      	ldr	r3, [pc, #376]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d2c:	4b5d      	ldr	r3, [pc, #372]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d2e:	2180      	movs	r1, #128	; 0x80
 8003d30:	0049      	lsls	r1, r1, #1
 8003d32:	430a      	orrs	r2, r1
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50
 8003d36:	e00b      	b.n	8003d50 <HAL_RCC_OscConfig+0x534>
 8003d38:	4b5a      	ldr	r3, [pc, #360]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d3c:	4b59      	ldr	r3, [pc, #356]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d3e:	495b      	ldr	r1, [pc, #364]	; (8003eac <HAL_RCC_OscConfig+0x690>)
 8003d40:	400a      	ands	r2, r1
 8003d42:	651a      	str	r2, [r3, #80]	; 0x50
 8003d44:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d48:	4b56      	ldr	r3, [pc, #344]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d4a:	495a      	ldr	r1, [pc, #360]	; (8003eb4 <HAL_RCC_OscConfig+0x698>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d58:	f7fc ffb6 	bl	8000cc8 <HAL_GetTick>
 8003d5c:	0003      	movs	r3, r0
 8003d5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d60:	e009      	b.n	8003d76 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fc ffb1 	bl	8000cc8 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4a52      	ldr	r2, [pc, #328]	; (8003eb8 <HAL_RCC_OscConfig+0x69c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e11b      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d76:	4b4b      	ldr	r3, [pc, #300]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003d78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d0ef      	beq.n	8003d62 <HAL_RCC_OscConfig+0x546>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d84:	f7fc ffa0 	bl	8000cc8 <HAL_GetTick>
 8003d88:	0003      	movs	r3, r0
 8003d8a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003d8c:	e009      	b.n	8003da2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d8e:	f7fc ff9b 	bl	8000cc8 <HAL_GetTick>
 8003d92:	0002      	movs	r2, r0
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	4a47      	ldr	r2, [pc, #284]	; (8003eb8 <HAL_RCC_OscConfig+0x69c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e105      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003da2:	4b40      	ldr	r3, [pc, #256]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4013      	ands	r3, r2
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003dae:	2323      	movs	r3, #35	; 0x23
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003db8:	4b3a      	ldr	r3, [pc, #232]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dbc:	4b39      	ldr	r3, [pc, #228]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003dbe:	493f      	ldr	r1, [pc, #252]	; (8003ebc <HAL_RCC_OscConfig+0x6a0>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d049      	beq.n	8003e62 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d026      	beq.n	8003e24 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003dd6:	4b33      	ldr	r3, [pc, #204]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	4b32      	ldr	r3, [pc, #200]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003ddc:	2101      	movs	r1, #1
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
 8003de2:	4b30      	ldr	r3, [pc, #192]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de6:	4b2f      	ldr	r3, [pc, #188]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003de8:	2101      	movs	r1, #1
 8003dea:	430a      	orrs	r2, r1
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCC_OscConfig+0x6a4>)
 8003df0:	6a1a      	ldr	r2, [r3, #32]
 8003df2:	4b33      	ldr	r3, [pc, #204]	; (8003ec0 <HAL_RCC_OscConfig+0x6a4>)
 8003df4:	2180      	movs	r1, #128	; 0x80
 8003df6:	0189      	lsls	r1, r1, #6
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fc ff64 	bl	8000cc8 <HAL_GetTick>
 8003e00:	0003      	movs	r3, r0
 8003e02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e04:	e008      	b.n	8003e18 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e06:	f7fc ff5f 	bl	8000cc8 <HAL_GetTick>
 8003e0a:	0002      	movs	r2, r0
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d901      	bls.n	8003e18 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e0ca      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d0f1      	beq.n	8003e06 <HAL_RCC_OscConfig+0x5ea>
 8003e22:	e01e      	b.n	8003e62 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	609a      	str	r2, [r3, #8]
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <HAL_RCC_OscConfig+0x6a4>)
 8003e32:	6a1a      	ldr	r2, [r3, #32]
 8003e34:	4b22      	ldr	r3, [pc, #136]	; (8003ec0 <HAL_RCC_OscConfig+0x6a4>)
 8003e36:	4923      	ldr	r1, [pc, #140]	; (8003ec4 <HAL_RCC_OscConfig+0x6a8>)
 8003e38:	400a      	ands	r2, r1
 8003e3a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7fc ff44 	bl	8000cc8 <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003e46:	f7fc ff3f 	bl	8000cc8 <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0aa      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d1f1      	bne.n	8003e46 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d100      	bne.n	8003e6c <HAL_RCC_OscConfig+0x650>
 8003e6a:	e09f      	b.n	8003fac <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d100      	bne.n	8003e74 <HAL_RCC_OscConfig+0x658>
 8003e72:	e078      	b.n	8003f66 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d159      	bne.n	8003f30 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e7c:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_RCC_OscConfig+0x688>)
 8003e82:	4911      	ldr	r1, [pc, #68]	; (8003ec8 <HAL_RCC_OscConfig+0x6ac>)
 8003e84:	400a      	ands	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fc ff1e 	bl	8000cc8 <HAL_GetTick>
 8003e8c:	0003      	movs	r3, r0
 8003e8e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003e90:	e01c      	b.n	8003ecc <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e92:	f7fc ff19 	bl	8000cc8 <HAL_GetTick>
 8003e96:	0002      	movs	r2, r0
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d915      	bls.n	8003ecc <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e084      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	ffff1fff 	.word	0xffff1fff
 8003eac:	fffffeff 	.word	0xfffffeff
 8003eb0:	40007000 	.word	0x40007000
 8003eb4:	fffffbff 	.word	0xfffffbff
 8003eb8:	00001388 	.word	0x00001388
 8003ebc:	efffffff 	.word	0xefffffff
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	ffffdfff 	.word	0xffffdfff
 8003ec8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ecc:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	049b      	lsls	r3, r3, #18
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d1dc      	bne.n	8003e92 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ed8:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a37      	ldr	r2, [pc, #220]	; (8003fbc <HAL_RCC_OscConfig+0x7a0>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	0019      	movs	r1, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	0449      	lsls	r1, r1, #17
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f06:	f7fc fedf 	bl	8000cc8 <HAL_GetTick>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f10:	f7fc feda 	bl	8000cc8 <HAL_GetTick>
 8003f14:	0002      	movs	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e045      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003f22:	4b25      	ldr	r3, [pc, #148]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	049b      	lsls	r3, r3, #18
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0x6f4>
 8003f2e:	e03d      	b.n	8003fac <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003f36:	4922      	ldr	r1, [pc, #136]	; (8003fc0 <HAL_RCC_OscConfig+0x7a4>)
 8003f38:	400a      	ands	r2, r1
 8003f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3c:	f7fc fec4 	bl	8000cc8 <HAL_GetTick>
 8003f40:	0003      	movs	r3, r0
 8003f42:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f44:	e008      	b.n	8003f58 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f46:	f7fc febf 	bl	8000cc8 <HAL_GetTick>
 8003f4a:	0002      	movs	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e02a      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	049b      	lsls	r3, r3, #18
 8003f60:	4013      	ands	r3, r2
 8003f62:	d1f0      	bne.n	8003f46 <HAL_RCC_OscConfig+0x72a>
 8003f64:	e022      	b.n	8003fac <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e01d      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCC_OscConfig+0x79c>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	2380      	movs	r3, #128	; 0x80
 8003f7c:	025b      	lsls	r3, r3, #9
 8003f7e:	401a      	ands	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d10f      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	23f0      	movs	r3, #240	; 0xf0
 8003f8c:	039b      	lsls	r3, r3, #14
 8003f8e:	401a      	ands	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	23c0      	movs	r3, #192	; 0xc0
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e000      	b.n	8003fae <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	0018      	movs	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	b00a      	add	sp, #40	; 0x28
 8003fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	ff02ffff 	.word	0xff02ffff
 8003fc0:	feffffff 	.word	0xfeffffff

08003fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b5b0      	push	{r4, r5, r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e128      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b96      	ldr	r3, [pc, #600]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	4013      	ands	r3, r2
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d91e      	bls.n	8004024 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b93      	ldr	r3, [pc, #588]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	4393      	bics	r3, r2
 8003fee:	0019      	movs	r1, r3
 8003ff0:	4b90      	ldr	r3, [pc, #576]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ff8:	f7fc fe66 	bl	8000cc8 <HAL_GetTick>
 8003ffc:	0003      	movs	r3, r0
 8003ffe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004000:	e009      	b.n	8004016 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004002:	f7fc fe61 	bl	8000cc8 <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	4a8a      	ldr	r2, [pc, #552]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e109      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b87      	ldr	r3, [pc, #540]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800402e:	4b83      	ldr	r3, [pc, #524]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	22f0      	movs	r2, #240	; 0xf0
 8004034:	4393      	bics	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	4b7f      	ldr	r3, [pc, #508]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 800403e:	430a      	orrs	r2, r1
 8004040:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	4013      	ands	r3, r2
 800404a:	d100      	bne.n	800404e <HAL_RCC_ClockConfig+0x8a>
 800404c:	e089      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004056:	4b79      	ldr	r3, [pc, #484]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	2380      	movs	r3, #128	; 0x80
 800405c:	029b      	lsls	r3, r3, #10
 800405e:	4013      	ands	r3, r2
 8004060:	d120      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e0e1      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b03      	cmp	r3, #3
 800406c:	d107      	bne.n	800407e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800406e:	4b73      	ldr	r3, [pc, #460]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	049b      	lsls	r3, r3, #18
 8004076:	4013      	ands	r3, r2
 8004078:	d114      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0d5      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d106      	bne.n	8004094 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004086:	4b6d      	ldr	r3, [pc, #436]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2204      	movs	r2, #4
 800408c:	4013      	ands	r3, r2
 800408e:	d109      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0ca      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004094:	4b69      	ldr	r3, [pc, #420]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2380      	movs	r3, #128	; 0x80
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4013      	ands	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e0c2      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2203      	movs	r2, #3
 80040aa:	4393      	bics	r3, r2
 80040ac:	0019      	movs	r1, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80040b4:	430a      	orrs	r2, r1
 80040b6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b8:	f7fc fe06 	bl	8000cc8 <HAL_GetTick>
 80040bc:	0003      	movs	r3, r0
 80040be:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d111      	bne.n	80040ec <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040c8:	e009      	b.n	80040de <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040ca:	f7fc fdfd 	bl	8000cc8 <HAL_GetTick>
 80040ce:	0002      	movs	r2, r0
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	4a58      	ldr	r2, [pc, #352]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e0a5      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80040de:	4b57      	ldr	r3, [pc, #348]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	220c      	movs	r2, #12
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b08      	cmp	r3, #8
 80040e8:	d1ef      	bne.n	80040ca <HAL_RCC_ClockConfig+0x106>
 80040ea:	e03a      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b03      	cmp	r3, #3
 80040f2:	d111      	bne.n	8004118 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040f4:	e009      	b.n	800410a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f6:	f7fc fde7 	bl	8000cc8 <HAL_GetTick>
 80040fa:	0002      	movs	r2, r0
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	4a4d      	ldr	r2, [pc, #308]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e08f      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800410a:	4b4c      	ldr	r3, [pc, #304]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	220c      	movs	r2, #12
 8004110:	4013      	ands	r3, r2
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d1ef      	bne.n	80040f6 <HAL_RCC_ClockConfig+0x132>
 8004116:	e024      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d11b      	bne.n	8004158 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004120:	e009      	b.n	8004136 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004122:	f7fc fdd1 	bl	8000cc8 <HAL_GetTick>
 8004126:	0002      	movs	r2, r0
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	4a42      	ldr	r2, [pc, #264]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e079      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004136:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	220c      	movs	r2, #12
 800413c:	4013      	ands	r3, r2
 800413e:	2b04      	cmp	r3, #4
 8004140:	d1ef      	bne.n	8004122 <HAL_RCC_ClockConfig+0x15e>
 8004142:	e00e      	b.n	8004162 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004144:	f7fc fdc0 	bl	8000cc8 <HAL_GetTick>
 8004148:	0002      	movs	r2, r0
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	4a3a      	ldr	r2, [pc, #232]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e068      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004158:	4b38      	ldr	r3, [pc, #224]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	220c      	movs	r2, #12
 800415e:	4013      	ands	r3, r2
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004162:	4b34      	ldr	r3, [pc, #208]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2201      	movs	r2, #1
 8004168:	4013      	ands	r3, r2
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d21e      	bcs.n	80041ae <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004170:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	4393      	bics	r3, r2
 8004178:	0019      	movs	r1, r3
 800417a:	4b2e      	ldr	r3, [pc, #184]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004182:	f7fc fda1 	bl	8000cc8 <HAL_GetTick>
 8004186:	0003      	movs	r3, r0
 8004188:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	e009      	b.n	80041a0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800418c:	f7fc fd9c 	bl	8000cc8 <HAL_GetTick>
 8004190:	0002      	movs	r2, r0
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	4a28      	ldr	r2, [pc, #160]	; (8004238 <HAL_RCC_ClockConfig+0x274>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e044      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a0:	4b24      	ldr	r3, [pc, #144]	; (8004234 <HAL_RCC_ClockConfig+0x270>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2201      	movs	r2, #1
 80041a6:	4013      	ands	r3, r2
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d1ee      	bne.n	800418c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2204      	movs	r2, #4
 80041b4:	4013      	ands	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4a20      	ldr	r2, [pc, #128]	; (8004240 <HAL_RCC_ClockConfig+0x27c>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	4b1d      	ldr	r3, [pc, #116]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2208      	movs	r2, #8
 80041d2:	4013      	ands	r3, r2
 80041d4:	d00a      	beq.n	80041ec <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041d6:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	4a1a      	ldr	r2, [pc, #104]	; (8004244 <HAL_RCC_ClockConfig+0x280>)
 80041dc:	4013      	ands	r3, r2
 80041de:	0019      	movs	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	00da      	lsls	r2, r3, #3
 80041e6:	4b15      	ldr	r3, [pc, #84]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041e8:	430a      	orrs	r2, r1
 80041ea:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ec:	f000 f832 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 80041f0:	0001      	movs	r1, r0
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x278>)
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	091b      	lsrs	r3, r3, #4
 80041f8:	220f      	movs	r2, #15
 80041fa:	4013      	ands	r3, r2
 80041fc:	4a12      	ldr	r2, [pc, #72]	; (8004248 <HAL_RCC_ClockConfig+0x284>)
 80041fe:	5cd3      	ldrb	r3, [r2, r3]
 8004200:	000a      	movs	r2, r1
 8004202:	40da      	lsrs	r2, r3
 8004204:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_ClockConfig+0x288>)
 8004206:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004208:	4b11      	ldr	r3, [pc, #68]	; (8004250 <HAL_RCC_ClockConfig+0x28c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	250b      	movs	r5, #11
 800420e:	197c      	adds	r4, r7, r5
 8004210:	0018      	movs	r0, r3
 8004212:	f7fc fd13 	bl	8000c3c <HAL_InitTick>
 8004216:	0003      	movs	r3, r0
 8004218:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800421a:	197b      	adds	r3, r7, r5
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004222:	197b      	adds	r3, r7, r5
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	e000      	b.n	800422a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bdb0      	pop	{r4, r5, r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	40022000 	.word	0x40022000
 8004238:	00001388 	.word	0x00001388
 800423c:	40021000 	.word	0x40021000
 8004240:	fffff8ff 	.word	0xfffff8ff
 8004244:	ffffc7ff 	.word	0xffffc7ff
 8004248:	08009570 	.word	0x08009570
 800424c:	20000000 	.word	0x20000000
 8004250:	20000004 	.word	0x20000004

08004254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004254:	b5b0      	push	{r4, r5, r7, lr}
 8004256:	b08e      	sub	sp, #56	; 0x38
 8004258:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800425a:	4b4c      	ldr	r3, [pc, #304]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004262:	230c      	movs	r3, #12
 8004264:	4013      	ands	r3, r2
 8004266:	2b0c      	cmp	r3, #12
 8004268:	d014      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x40>
 800426a:	d900      	bls.n	800426e <HAL_RCC_GetSysClockFreq+0x1a>
 800426c:	e07b      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x112>
 800426e:	2b04      	cmp	r3, #4
 8004270:	d002      	beq.n	8004278 <HAL_RCC_GetSysClockFreq+0x24>
 8004272:	2b08      	cmp	r3, #8
 8004274:	d00b      	beq.n	800428e <HAL_RCC_GetSysClockFreq+0x3a>
 8004276:	e076      	b.n	8004366 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004278:	4b44      	ldr	r3, [pc, #272]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2210      	movs	r2, #16
 800427e:	4013      	ands	r3, r2
 8004280:	d002      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004282:	4b43      	ldr	r3, [pc, #268]	; (8004390 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004286:	e07c      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004288:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_RCC_GetSysClockFreq+0x140>)
 800428a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800428c:	e079      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800428e:	4b42      	ldr	r3, [pc, #264]	; (8004398 <HAL_RCC_GetSysClockFreq+0x144>)
 8004290:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004292:	e076      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004296:	0c9a      	lsrs	r2, r3, #18
 8004298:	230f      	movs	r3, #15
 800429a:	401a      	ands	r2, r3
 800429c:	4b3f      	ldr	r3, [pc, #252]	; (800439c <HAL_RCC_GetSysClockFreq+0x148>)
 800429e:	5c9b      	ldrb	r3, [r3, r2]
 80042a0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	0d9a      	lsrs	r2, r3, #22
 80042a6:	2303      	movs	r3, #3
 80042a8:	4013      	ands	r3, r2
 80042aa:	3301      	adds	r3, #1
 80042ac:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	025b      	lsls	r3, r3, #9
 80042b6:	4013      	ands	r3, r2
 80042b8:	d01a      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80042ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
 80042c2:	4a35      	ldr	r2, [pc, #212]	; (8004398 <HAL_RCC_GetSysClockFreq+0x144>)
 80042c4:	2300      	movs	r3, #0
 80042c6:	69b8      	ldr	r0, [r7, #24]
 80042c8:	69f9      	ldr	r1, [r7, #28]
 80042ca:	f7fb ffc9 	bl	8000260 <__aeabi_lmul>
 80042ce:	0002      	movs	r2, r0
 80042d0:	000b      	movs	r3, r1
 80042d2:	0010      	movs	r0, r2
 80042d4:	0019      	movs	r1, r3
 80042d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f7fb ff9d 	bl	8000220 <__aeabi_uldivmod>
 80042e6:	0002      	movs	r2, r0
 80042e8:	000b      	movs	r3, r1
 80042ea:	0013      	movs	r3, r2
 80042ec:	637b      	str	r3, [r7, #52]	; 0x34
 80042ee:	e037      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80042f0:	4b26      	ldr	r3, [pc, #152]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2210      	movs	r2, #16
 80042f6:	4013      	ands	r3, r2
 80042f8:	d01a      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	60bb      	str	r3, [r7, #8]
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4a23      	ldr	r2, [pc, #140]	; (8004390 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004304:	2300      	movs	r3, #0
 8004306:	68b8      	ldr	r0, [r7, #8]
 8004308:	68f9      	ldr	r1, [r7, #12]
 800430a:	f7fb ffa9 	bl	8000260 <__aeabi_lmul>
 800430e:	0002      	movs	r2, r0
 8004310:	000b      	movs	r3, r1
 8004312:	0010      	movs	r0, r2
 8004314:	0019      	movs	r1, r3
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	603b      	str	r3, [r7, #0]
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f7fb ff7d 	bl	8000220 <__aeabi_uldivmod>
 8004326:	0002      	movs	r2, r0
 8004328:	000b      	movs	r3, r1
 800432a:	0013      	movs	r3, r2
 800432c:	637b      	str	r3, [r7, #52]	; 0x34
 800432e:	e017      	b.n	8004360 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	0018      	movs	r0, r3
 8004334:	2300      	movs	r3, #0
 8004336:	0019      	movs	r1, r3
 8004338:	4a16      	ldr	r2, [pc, #88]	; (8004394 <HAL_RCC_GetSysClockFreq+0x140>)
 800433a:	2300      	movs	r3, #0
 800433c:	f7fb ff90 	bl	8000260 <__aeabi_lmul>
 8004340:	0002      	movs	r2, r0
 8004342:	000b      	movs	r3, r1
 8004344:	0010      	movs	r0, r2
 8004346:	0019      	movs	r1, r3
 8004348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800434a:	001c      	movs	r4, r3
 800434c:	2300      	movs	r3, #0
 800434e:	001d      	movs	r5, r3
 8004350:	0022      	movs	r2, r4
 8004352:	002b      	movs	r3, r5
 8004354:	f7fb ff64 	bl	8000220 <__aeabi_uldivmod>
 8004358:	0002      	movs	r2, r0
 800435a:	000b      	movs	r3, r1
 800435c:	0013      	movs	r3, r2
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004364:	e00d      	b.n	8004382 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_GetSysClockFreq+0x138>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	0b5b      	lsrs	r3, r3, #13
 800436c:	2207      	movs	r2, #7
 800436e:	4013      	ands	r3, r2
 8004370:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	3301      	adds	r3, #1
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	0212      	lsls	r2, r2, #8
 800437a:	409a      	lsls	r2, r3
 800437c:	0013      	movs	r3, r2
 800437e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004380:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004384:	0018      	movs	r0, r3
 8004386:	46bd      	mov	sp, r7
 8004388:	b00e      	add	sp, #56	; 0x38
 800438a:	bdb0      	pop	{r4, r5, r7, pc}
 800438c:	40021000 	.word	0x40021000
 8004390:	003d0900 	.word	0x003d0900
 8004394:	00f42400 	.word	0x00f42400
 8004398:	007a1200 	.word	0x007a1200
 800439c:	08009588 	.word	0x08009588

080043a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043a4:	4b02      	ldr	r3, [pc, #8]	; (80043b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80043a6:	681b      	ldr	r3, [r3, #0]
}
 80043a8:	0018      	movs	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	20000000 	.word	0x20000000

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043b8:	f7ff fff2 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043bc:	0001      	movs	r1, r0
 80043be:	4b06      	ldr	r3, [pc, #24]	; (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	2207      	movs	r2, #7
 80043c6:	4013      	ands	r3, r2
 80043c8:	4a04      	ldr	r2, [pc, #16]	; (80043dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	40d9      	lsrs	r1, r3
 80043ce:	000b      	movs	r3, r1
}
 80043d0:	0018      	movs	r0, r3
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	40021000 	.word	0x40021000
 80043dc:	08009580 	.word	0x08009580

080043e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043e4:	f7ff ffdc 	bl	80043a0 <HAL_RCC_GetHCLKFreq>
 80043e8:	0001      	movs	r1, r0
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	0adb      	lsrs	r3, r3, #11
 80043f0:	2207      	movs	r2, #7
 80043f2:	4013      	ands	r3, r2
 80043f4:	4a04      	ldr	r2, [pc, #16]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x28>)
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	40d9      	lsrs	r1, r3
 80043fa:	000b      	movs	r3, r1
}
 80043fc:	0018      	movs	r0, r3
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40021000 	.word	0x40021000
 8004408:	08009580 	.word	0x08009580

0800440c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b086      	sub	sp, #24
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004414:	2317      	movs	r3, #23
 8004416:	18fb      	adds	r3, r7, r3
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2220      	movs	r2, #32
 8004422:	4013      	ands	r3, r2
 8004424:	d106      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	4013      	ands	r3, r2
 8004430:	d100      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004432:	e0d9      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004434:	4ba4      	ldr	r3, [pc, #656]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004436:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004438:	2380      	movs	r3, #128	; 0x80
 800443a:	055b      	lsls	r3, r3, #21
 800443c:	4013      	ands	r3, r2
 800443e:	d10a      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004440:	4ba1      	ldr	r3, [pc, #644]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004442:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004444:	4ba0      	ldr	r3, [pc, #640]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004446:	2180      	movs	r1, #128	; 0x80
 8004448:	0549      	lsls	r1, r1, #21
 800444a:	430a      	orrs	r2, r1
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800444e:	2317      	movs	r3, #23
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b9d      	ldr	r3, [pc, #628]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	2380      	movs	r3, #128	; 0x80
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	4013      	ands	r3, r2
 8004460:	d11a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b9a      	ldr	r3, [pc, #616]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b99      	ldr	r3, [pc, #612]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	0049      	lsls	r1, r1, #1
 800446c:	430a      	orrs	r2, r1
 800446e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004470:	f7fc fc2a 	bl	8000cc8 <HAL_GetTick>
 8004474:	0003      	movs	r3, r0
 8004476:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fc fc25 	bl	8000cc8 <HAL_GetTick>
 800447e:	0002      	movs	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e118      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b8f      	ldr	r3, [pc, #572]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4013      	ands	r3, r2
 8004496:	d0f0      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004498:	4b8b      	ldr	r3, [pc, #556]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	23c0      	movs	r3, #192	; 0xc0
 800449e:	039b      	lsls	r3, r3, #14
 80044a0:	4013      	ands	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	23c0      	movs	r3, #192	; 0xc0
 80044aa:	039b      	lsls	r3, r3, #14
 80044ac:	4013      	ands	r3, r2
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d107      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	23c0      	movs	r3, #192	; 0xc0
 80044ba:	039b      	lsls	r3, r3, #14
 80044bc:	4013      	ands	r3, r2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d013      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	23c0      	movs	r3, #192	; 0xc0
 80044ca:	029b      	lsls	r3, r3, #10
 80044cc:	401a      	ands	r2, r3
 80044ce:	23c0      	movs	r3, #192	; 0xc0
 80044d0:	029b      	lsls	r3, r3, #10
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d10a      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044d6:	4b7c      	ldr	r3, [pc, #496]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	029b      	lsls	r3, r3, #10
 80044de:	401a      	ands	r2, r3
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	029b      	lsls	r3, r3, #10
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d101      	bne.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0e8      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80044ec:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80044ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044f0:	23c0      	movs	r3, #192	; 0xc0
 80044f2:	029b      	lsls	r3, r3, #10
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d049      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	23c0      	movs	r3, #192	; 0xc0
 8004504:	029b      	lsls	r3, r3, #10
 8004506:	4013      	ands	r3, r2
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	429a      	cmp	r2, r3
 800450c:	d004      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2220      	movs	r2, #32
 8004514:	4013      	ands	r3, r2
 8004516:	d10d      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	029b      	lsls	r3, r3, #10
 8004520:	4013      	ands	r3, r2
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d034      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	011b      	lsls	r3, r3, #4
 8004530:	4013      	ands	r3, r2
 8004532:	d02e      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004534:	4b64      	ldr	r3, [pc, #400]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004538:	4a65      	ldr	r2, [pc, #404]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800453a:	4013      	ands	r3, r2
 800453c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800453e:	4b62      	ldr	r3, [pc, #392]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004540:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004542:	4b61      	ldr	r3, [pc, #388]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004544:	2180      	movs	r1, #128	; 0x80
 8004546:	0309      	lsls	r1, r1, #12
 8004548:	430a      	orrs	r2, r1
 800454a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454c:	4b5e      	ldr	r3, [pc, #376]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800454e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004550:	4b5d      	ldr	r3, [pc, #372]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004552:	4960      	ldr	r1, [pc, #384]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004554:	400a      	ands	r2, r1
 8004556:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004558:	4b5b      	ldr	r3, [pc, #364]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4013      	ands	r3, r2
 8004566:	d014      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004568:	f7fc fbae 	bl	8000cc8 <HAL_GetTick>
 800456c:	0003      	movs	r3, r0
 800456e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004570:	e009      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fc fba9 	bl	8000cc8 <HAL_GetTick>
 8004576:	0002      	movs	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	4a56      	ldr	r2, [pc, #344]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e09b      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004586:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4013      	ands	r3, r2
 8004590:	d0ef      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	23c0      	movs	r3, #192	; 0xc0
 8004598:	029b      	lsls	r3, r3, #10
 800459a:	401a      	ands	r2, r3
 800459c:	23c0      	movs	r3, #192	; 0xc0
 800459e:	029b      	lsls	r3, r3, #10
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d10c      	bne.n	80045be <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80045a4:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4c      	ldr	r2, [pc, #304]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80045aa:	4013      	ands	r3, r2
 80045ac:	0019      	movs	r1, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	23c0      	movs	r3, #192	; 0xc0
 80045b4:	039b      	lsls	r3, r3, #14
 80045b6:	401a      	ands	r2, r3
 80045b8:	4b43      	ldr	r3, [pc, #268]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045ba:	430a      	orrs	r2, r1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	4b42      	ldr	r3, [pc, #264]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	23c0      	movs	r3, #192	; 0xc0
 80045c8:	029b      	lsls	r3, r3, #10
 80045ca:	401a      	ands	r2, r3
 80045cc:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045ce:	430a      	orrs	r2, r1
 80045d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045d2:	2317      	movs	r3, #23
 80045d4:	18fb      	adds	r3, r7, r3
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e0:	4b39      	ldr	r3, [pc, #228]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045e2:	493f      	ldr	r1, [pc, #252]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80045e4:	400a      	ands	r2, r1
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	4013      	ands	r3, r2
 80045f0:	d009      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045f2:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	2203      	movs	r2, #3
 80045f8:	4393      	bics	r3, r2
 80045fa:	0019      	movs	r1, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004602:	430a      	orrs	r2, r1
 8004604:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2202      	movs	r2, #2
 800460c:	4013      	ands	r3, r2
 800460e:	d009      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004614:	220c      	movs	r2, #12
 8004616:	4393      	bics	r3, r2
 8004618:	0019      	movs	r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004620:	430a      	orrs	r2, r1
 8004622:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2204      	movs	r2, #4
 800462a:	4013      	ands	r3, r2
 800462c:	d009      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800462e:	4b26      	ldr	r3, [pc, #152]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004632:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004634:	4013      	ands	r3, r2
 8004636:	0019      	movs	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800463e:	430a      	orrs	r2, r1
 8004640:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2208      	movs	r2, #8
 8004648:	4013      	ands	r3, r2
 800464a:	d009      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800464e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004652:	4013      	ands	r3, r2
 8004654:	0019      	movs	r1, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699a      	ldr	r2, [r3, #24]
 800465a:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800465c:	430a      	orrs	r2, r1
 800465e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4013      	ands	r3, r2
 800466a:	d009      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800466c:	4b16      	ldr	r3, [pc, #88]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800466e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004670:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004672:	4013      	ands	r3, r2
 8004674:	0019      	movs	r1, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800467c:	430a      	orrs	r2, r1
 800467e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2240      	movs	r2, #64	; 0x40
 8004686:	4013      	ands	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800468a:	4b0f      	ldr	r3, [pc, #60]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004690:	4013      	ands	r3, r2
 8004692:	0019      	movs	r1, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800469a:	430a      	orrs	r2, r1
 800469c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	4013      	ands	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ac:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1a      	ldr	r2, [r3, #32]
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80046b8:	430a      	orrs	r2, r1
 80046ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	0018      	movs	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	b006      	add	sp, #24
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	40021000 	.word	0x40021000
 80046cc:	40007000 	.word	0x40007000
 80046d0:	fffcffff 	.word	0xfffcffff
 80046d4:	fff7ffff 	.word	0xfff7ffff
 80046d8:	00001388 	.word	0x00001388
 80046dc:	ffcfffff 	.word	0xffcfffff
 80046e0:	efffffff 	.word	0xefffffff
 80046e4:	fffff3ff 	.word	0xfffff3ff
 80046e8:	ffffcfff 	.word	0xffffcfff
 80046ec:	fbffffff 	.word	0xfbffffff
 80046f0:	fff3ffff 	.word	0xfff3ffff

080046f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e044      	b.n	8004790 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2274      	movs	r2, #116	; 0x74
 8004712:	2100      	movs	r1, #0
 8004714:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	0018      	movs	r0, r3
 800471a:	f7fc f9a1 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2224      	movs	r2, #36	; 0x24
 8004722:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2101      	movs	r1, #1
 8004730:	438a      	bics	r2, r1
 8004732:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	0018      	movs	r0, r3
 8004738:	f000 f830 	bl	800479c <UART_SetConfig>
 800473c:	0003      	movs	r3, r0
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e024      	b.n	8004790 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	0018      	movs	r0, r3
 8004752:	f000 fae1 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	490d      	ldr	r1, [pc, #52]	; (8004798 <HAL_UART_Init+0xa4>)
 8004762:	400a      	ands	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	212a      	movs	r1, #42	; 0x2a
 8004772:	438a      	bics	r2, r1
 8004774:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2101      	movs	r1, #1
 8004782:	430a      	orrs	r2, r1
 8004784:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f000 fb79 	bl	8004e80 <UART_CheckIdleState>
 800478e:	0003      	movs	r3, r0
}
 8004790:	0018      	movs	r0, r3
 8004792:	46bd      	mov	sp, r7
 8004794:	b002      	add	sp, #8
 8004796:	bd80      	pop	{r7, pc}
 8004798:	ffffb7ff 	.word	0xffffb7ff

0800479c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800479c:	b5b0      	push	{r4, r5, r7, lr}
 800479e:	b08e      	sub	sp, #56	; 0x38
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047a4:	231a      	movs	r3, #26
 80047a6:	2218      	movs	r2, #24
 80047a8:	4694      	mov	ip, r2
 80047aa:	44bc      	add	ip, r7
 80047ac:	4463      	add	r3, ip
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4ab0      	ldr	r2, [pc, #704]	; (8004a94 <UART_SetConfig+0x2f8>)
 80047d2:	4013      	ands	r3, r2
 80047d4:	0019      	movs	r1, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	4aac      	ldr	r2, [pc, #688]	; (8004a98 <UART_SetConfig+0x2fc>)
 80047e8:	4013      	ands	r3, r2
 80047ea:	0019      	movs	r1, r3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	68da      	ldr	r2, [r3, #12]
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4aa6      	ldr	r2, [pc, #664]	; (8004a9c <UART_SetConfig+0x300>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800480e:	4313      	orrs	r3, r2
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	4aa1      	ldr	r2, [pc, #644]	; (8004aa0 <UART_SetConfig+0x304>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a9d      	ldr	r2, [pc, #628]	; (8004aa4 <UART_SetConfig+0x308>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d136      	bne.n	80048a0 <UART_SetConfig+0x104>
 8004832:	4b9d      	ldr	r3, [pc, #628]	; (8004aa8 <UART_SetConfig+0x30c>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	2203      	movs	r2, #3
 8004838:	4013      	ands	r3, r2
 800483a:	2b03      	cmp	r3, #3
 800483c:	d020      	beq.n	8004880 <UART_SetConfig+0xe4>
 800483e:	d827      	bhi.n	8004890 <UART_SetConfig+0xf4>
 8004840:	2b02      	cmp	r3, #2
 8004842:	d00d      	beq.n	8004860 <UART_SetConfig+0xc4>
 8004844:	d824      	bhi.n	8004890 <UART_SetConfig+0xf4>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <UART_SetConfig+0xb4>
 800484a:	2b01      	cmp	r3, #1
 800484c:	d010      	beq.n	8004870 <UART_SetConfig+0xd4>
 800484e:	e01f      	b.n	8004890 <UART_SetConfig+0xf4>
 8004850:	231b      	movs	r3, #27
 8004852:	2218      	movs	r2, #24
 8004854:	4694      	mov	ip, r2
 8004856:	44bc      	add	ip, r7
 8004858:	4463      	add	r3, ip
 800485a:	2201      	movs	r2, #1
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	e0c5      	b.n	80049ec <UART_SetConfig+0x250>
 8004860:	231b      	movs	r3, #27
 8004862:	2218      	movs	r2, #24
 8004864:	4694      	mov	ip, r2
 8004866:	44bc      	add	ip, r7
 8004868:	4463      	add	r3, ip
 800486a:	2202      	movs	r2, #2
 800486c:	701a      	strb	r2, [r3, #0]
 800486e:	e0bd      	b.n	80049ec <UART_SetConfig+0x250>
 8004870:	231b      	movs	r3, #27
 8004872:	2218      	movs	r2, #24
 8004874:	4694      	mov	ip, r2
 8004876:	44bc      	add	ip, r7
 8004878:	4463      	add	r3, ip
 800487a:	2204      	movs	r2, #4
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e0b5      	b.n	80049ec <UART_SetConfig+0x250>
 8004880:	231b      	movs	r3, #27
 8004882:	2218      	movs	r2, #24
 8004884:	4694      	mov	ip, r2
 8004886:	44bc      	add	ip, r7
 8004888:	4463      	add	r3, ip
 800488a:	2208      	movs	r2, #8
 800488c:	701a      	strb	r2, [r3, #0]
 800488e:	e0ad      	b.n	80049ec <UART_SetConfig+0x250>
 8004890:	231b      	movs	r3, #27
 8004892:	2218      	movs	r2, #24
 8004894:	4694      	mov	ip, r2
 8004896:	44bc      	add	ip, r7
 8004898:	4463      	add	r3, ip
 800489a:	2210      	movs	r2, #16
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e0a5      	b.n	80049ec <UART_SetConfig+0x250>
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a81      	ldr	r2, [pc, #516]	; (8004aac <UART_SetConfig+0x310>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d136      	bne.n	8004918 <UART_SetConfig+0x17c>
 80048aa:	4b7f      	ldr	r3, [pc, #508]	; (8004aa8 <UART_SetConfig+0x30c>)
 80048ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ae:	220c      	movs	r2, #12
 80048b0:	4013      	ands	r3, r2
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d020      	beq.n	80048f8 <UART_SetConfig+0x15c>
 80048b6:	d827      	bhi.n	8004908 <UART_SetConfig+0x16c>
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d00d      	beq.n	80048d8 <UART_SetConfig+0x13c>
 80048bc:	d824      	bhi.n	8004908 <UART_SetConfig+0x16c>
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d002      	beq.n	80048c8 <UART_SetConfig+0x12c>
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d010      	beq.n	80048e8 <UART_SetConfig+0x14c>
 80048c6:	e01f      	b.n	8004908 <UART_SetConfig+0x16c>
 80048c8:	231b      	movs	r3, #27
 80048ca:	2218      	movs	r2, #24
 80048cc:	4694      	mov	ip, r2
 80048ce:	44bc      	add	ip, r7
 80048d0:	4463      	add	r3, ip
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	e089      	b.n	80049ec <UART_SetConfig+0x250>
 80048d8:	231b      	movs	r3, #27
 80048da:	2218      	movs	r2, #24
 80048dc:	4694      	mov	ip, r2
 80048de:	44bc      	add	ip, r7
 80048e0:	4463      	add	r3, ip
 80048e2:	2202      	movs	r2, #2
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e081      	b.n	80049ec <UART_SetConfig+0x250>
 80048e8:	231b      	movs	r3, #27
 80048ea:	2218      	movs	r2, #24
 80048ec:	4694      	mov	ip, r2
 80048ee:	44bc      	add	ip, r7
 80048f0:	4463      	add	r3, ip
 80048f2:	2204      	movs	r2, #4
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e079      	b.n	80049ec <UART_SetConfig+0x250>
 80048f8:	231b      	movs	r3, #27
 80048fa:	2218      	movs	r2, #24
 80048fc:	4694      	mov	ip, r2
 80048fe:	44bc      	add	ip, r7
 8004900:	4463      	add	r3, ip
 8004902:	2208      	movs	r2, #8
 8004904:	701a      	strb	r2, [r3, #0]
 8004906:	e071      	b.n	80049ec <UART_SetConfig+0x250>
 8004908:	231b      	movs	r3, #27
 800490a:	2218      	movs	r2, #24
 800490c:	4694      	mov	ip, r2
 800490e:	44bc      	add	ip, r7
 8004910:	4463      	add	r3, ip
 8004912:	2210      	movs	r2, #16
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e069      	b.n	80049ec <UART_SetConfig+0x250>
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a64      	ldr	r2, [pc, #400]	; (8004ab0 <UART_SetConfig+0x314>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d107      	bne.n	8004932 <UART_SetConfig+0x196>
 8004922:	231b      	movs	r3, #27
 8004924:	2218      	movs	r2, #24
 8004926:	4694      	mov	ip, r2
 8004928:	44bc      	add	ip, r7
 800492a:	4463      	add	r3, ip
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
 8004930:	e05c      	b.n	80049ec <UART_SetConfig+0x250>
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <UART_SetConfig+0x318>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d107      	bne.n	800494c <UART_SetConfig+0x1b0>
 800493c:	231b      	movs	r3, #27
 800493e:	2218      	movs	r2, #24
 8004940:	4694      	mov	ip, r2
 8004942:	44bc      	add	ip, r7
 8004944:	4463      	add	r3, ip
 8004946:	2200      	movs	r2, #0
 8004948:	701a      	strb	r2, [r3, #0]
 800494a:	e04f      	b.n	80049ec <UART_SetConfig+0x250>
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a52      	ldr	r2, [pc, #328]	; (8004a9c <UART_SetConfig+0x300>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d143      	bne.n	80049de <UART_SetConfig+0x242>
 8004956:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <UART_SetConfig+0x30c>)
 8004958:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800495a:	23c0      	movs	r3, #192	; 0xc0
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	4013      	ands	r3, r2
 8004960:	22c0      	movs	r2, #192	; 0xc0
 8004962:	0112      	lsls	r2, r2, #4
 8004964:	4293      	cmp	r3, r2
 8004966:	d02a      	beq.n	80049be <UART_SetConfig+0x222>
 8004968:	22c0      	movs	r2, #192	; 0xc0
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	4293      	cmp	r3, r2
 800496e:	d82e      	bhi.n	80049ce <UART_SetConfig+0x232>
 8004970:	2280      	movs	r2, #128	; 0x80
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	4293      	cmp	r3, r2
 8004976:	d012      	beq.n	800499e <UART_SetConfig+0x202>
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	4293      	cmp	r3, r2
 800497e:	d826      	bhi.n	80049ce <UART_SetConfig+0x232>
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <UART_SetConfig+0x1f2>
 8004984:	2280      	movs	r2, #128	; 0x80
 8004986:	00d2      	lsls	r2, r2, #3
 8004988:	4293      	cmp	r3, r2
 800498a:	d010      	beq.n	80049ae <UART_SetConfig+0x212>
 800498c:	e01f      	b.n	80049ce <UART_SetConfig+0x232>
 800498e:	231b      	movs	r3, #27
 8004990:	2218      	movs	r2, #24
 8004992:	4694      	mov	ip, r2
 8004994:	44bc      	add	ip, r7
 8004996:	4463      	add	r3, ip
 8004998:	2200      	movs	r2, #0
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e026      	b.n	80049ec <UART_SetConfig+0x250>
 800499e:	231b      	movs	r3, #27
 80049a0:	2218      	movs	r2, #24
 80049a2:	4694      	mov	ip, r2
 80049a4:	44bc      	add	ip, r7
 80049a6:	4463      	add	r3, ip
 80049a8:	2202      	movs	r2, #2
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	e01e      	b.n	80049ec <UART_SetConfig+0x250>
 80049ae:	231b      	movs	r3, #27
 80049b0:	2218      	movs	r2, #24
 80049b2:	4694      	mov	ip, r2
 80049b4:	44bc      	add	ip, r7
 80049b6:	4463      	add	r3, ip
 80049b8:	2204      	movs	r2, #4
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	e016      	b.n	80049ec <UART_SetConfig+0x250>
 80049be:	231b      	movs	r3, #27
 80049c0:	2218      	movs	r2, #24
 80049c2:	4694      	mov	ip, r2
 80049c4:	44bc      	add	ip, r7
 80049c6:	4463      	add	r3, ip
 80049c8:	2208      	movs	r2, #8
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e00e      	b.n	80049ec <UART_SetConfig+0x250>
 80049ce:	231b      	movs	r3, #27
 80049d0:	2218      	movs	r2, #24
 80049d2:	4694      	mov	ip, r2
 80049d4:	44bc      	add	ip, r7
 80049d6:	4463      	add	r3, ip
 80049d8:	2210      	movs	r2, #16
 80049da:	701a      	strb	r2, [r3, #0]
 80049dc:	e006      	b.n	80049ec <UART_SetConfig+0x250>
 80049de:	231b      	movs	r3, #27
 80049e0:	2218      	movs	r2, #24
 80049e2:	4694      	mov	ip, r2
 80049e4:	44bc      	add	ip, r7
 80049e6:	4463      	add	r3, ip
 80049e8:	2210      	movs	r2, #16
 80049ea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <UART_SetConfig+0x300>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d000      	beq.n	80049f8 <UART_SetConfig+0x25c>
 80049f6:	e09e      	b.n	8004b36 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049f8:	231b      	movs	r3, #27
 80049fa:	2218      	movs	r2, #24
 80049fc:	4694      	mov	ip, r2
 80049fe:	44bc      	add	ip, r7
 8004a00:	4463      	add	r3, ip
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d01d      	beq.n	8004a44 <UART_SetConfig+0x2a8>
 8004a08:	dc20      	bgt.n	8004a4c <UART_SetConfig+0x2b0>
 8004a0a:	2b04      	cmp	r3, #4
 8004a0c:	d015      	beq.n	8004a3a <UART_SetConfig+0x29e>
 8004a0e:	dc1d      	bgt.n	8004a4c <UART_SetConfig+0x2b0>
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <UART_SetConfig+0x27e>
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d005      	beq.n	8004a24 <UART_SetConfig+0x288>
 8004a18:	e018      	b.n	8004a4c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a1a:	f7ff fccb 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a22:	e01d      	b.n	8004a60 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a24:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <UART_SetConfig+0x30c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2210      	movs	r2, #16
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d002      	beq.n	8004a34 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a2e:	4b22      	ldr	r3, [pc, #136]	; (8004ab8 <UART_SetConfig+0x31c>)
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a32:	e015      	b.n	8004a60 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8004a34:	4b21      	ldr	r3, [pc, #132]	; (8004abc <UART_SetConfig+0x320>)
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a38:	e012      	b.n	8004a60 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a3a:	f7ff fc0b 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a42:	e00d      	b.n	8004a60 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a44:	2380      	movs	r3, #128	; 0x80
 8004a46:	021b      	lsls	r3, r3, #8
 8004a48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a4a:	e009      	b.n	8004a60 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004a50:	231a      	movs	r3, #26
 8004a52:	2218      	movs	r2, #24
 8004a54:	4694      	mov	ip, r2
 8004a56:	44bc      	add	ip, r7
 8004a58:	4463      	add	r3, ip
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
        break;
 8004a5e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d100      	bne.n	8004a68 <UART_SetConfig+0x2cc>
 8004a66:	e13c      	b.n	8004ce2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	0013      	movs	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	189b      	adds	r3, r3, r2
 8004a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d305      	bcc.n	8004a84 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d91d      	bls.n	8004ac0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8004a84:	231a      	movs	r3, #26
 8004a86:	2218      	movs	r2, #24
 8004a88:	4694      	mov	ip, r2
 8004a8a:	44bc      	add	ip, r7
 8004a8c:	4463      	add	r3, ip
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e126      	b.n	8004ce2 <UART_SetConfig+0x546>
 8004a94:	efff69f3 	.word	0xefff69f3
 8004a98:	ffffcfff 	.word	0xffffcfff
 8004a9c:	40004800 	.word	0x40004800
 8004aa0:	fffff4ff 	.word	0xfffff4ff
 8004aa4:	40013800 	.word	0x40013800
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	40004400 	.word	0x40004400
 8004ab0:	40004c00 	.word	0x40004c00
 8004ab4:	40005000 	.word	0x40005000
 8004ab8:	003d0900 	.word	0x003d0900
 8004abc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]
 8004ac8:	6939      	ldr	r1, [r7, #16]
 8004aca:	697a      	ldr	r2, [r7, #20]
 8004acc:	000b      	movs	r3, r1
 8004ace:	0e1b      	lsrs	r3, r3, #24
 8004ad0:	0010      	movs	r0, r2
 8004ad2:	0205      	lsls	r5, r0, #8
 8004ad4:	431d      	orrs	r5, r3
 8004ad6:	000b      	movs	r3, r1
 8004ad8:	021c      	lsls	r4, r3, #8
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	68b8      	ldr	r0, [r7, #8]
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	1900      	adds	r0, r0, r4
 8004aec:	4169      	adcs	r1, r5
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	607b      	str	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f7fb fb90 	bl	8000220 <__aeabi_uldivmod>
 8004b00:	0002      	movs	r2, r0
 8004b02:	000b      	movs	r3, r1
 8004b04:	0013      	movs	r3, r2
 8004b06:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b0a:	23c0      	movs	r3, #192	; 0xc0
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d309      	bcc.n	8004b26 <UART_SetConfig+0x38a>
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	2380      	movs	r3, #128	; 0x80
 8004b16:	035b      	lsls	r3, r3, #13
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d204      	bcs.n	8004b26 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e0dd      	b.n	8004ce2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004b26:	231a      	movs	r3, #26
 8004b28:	2218      	movs	r2, #24
 8004b2a:	4694      	mov	ip, r2
 8004b2c:	44bc      	add	ip, r7
 8004b2e:	4463      	add	r3, ip
 8004b30:	2201      	movs	r2, #1
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e0d5      	b.n	8004ce2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	69da      	ldr	r2, [r3, #28]
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d000      	beq.n	8004b44 <UART_SetConfig+0x3a8>
 8004b42:	e074      	b.n	8004c2e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8004b44:	231b      	movs	r3, #27
 8004b46:	2218      	movs	r2, #24
 8004b48:	4694      	mov	ip, r2
 8004b4a:	44bc      	add	ip, r7
 8004b4c:	4463      	add	r3, ip
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b08      	cmp	r3, #8
 8004b52:	d822      	bhi.n	8004b9a <UART_SetConfig+0x3fe>
 8004b54:	009a      	lsls	r2, r3, #2
 8004b56:	4b6b      	ldr	r3, [pc, #428]	; (8004d04 <UART_SetConfig+0x568>)
 8004b58:	18d3      	adds	r3, r2, r3
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5e:	f7ff fc29 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8004b62:	0003      	movs	r3, r0
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b66:	e022      	b.n	8004bae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7ff fc3a 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	0003      	movs	r3, r0
 8004b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b70:	e01d      	b.n	8004bae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b72:	4b65      	ldr	r3, [pc, #404]	; (8004d08 <UART_SetConfig+0x56c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2210      	movs	r2, #16
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d002      	beq.n	8004b82 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b7c:	4b63      	ldr	r3, [pc, #396]	; (8004d0c <UART_SetConfig+0x570>)
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b80:	e015      	b.n	8004bae <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <UART_SetConfig+0x574>)
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b86:	e012      	b.n	8004bae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b88:	f7ff fb64 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b90:	e00d      	b.n	8004bae <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b92:	2380      	movs	r3, #128	; 0x80
 8004b94:	021b      	lsls	r3, r3, #8
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b98:	e009      	b.n	8004bae <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b9e:	231a      	movs	r3, #26
 8004ba0:	2218      	movs	r2, #24
 8004ba2:	4694      	mov	ip, r2
 8004ba4:	44bc      	add	ip, r7
 8004ba6:	4463      	add	r3, ip
 8004ba8:	2201      	movs	r2, #1
 8004baa:	701a      	strb	r2, [r3, #0]
        break;
 8004bac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d100      	bne.n	8004bb6 <UART_SetConfig+0x41a>
 8004bb4:	e095      	b.n	8004ce2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	005a      	lsls	r2, r3, #1
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	18d2      	adds	r2, r2, r3
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	0010      	movs	r0, r2
 8004bca:	f7fb fa9d 	bl	8000108 <__udivsi3>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	2b0f      	cmp	r3, #15
 8004bd8:	d921      	bls.n	8004c1e <UART_SetConfig+0x482>
 8004bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	025b      	lsls	r3, r3, #9
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d21c      	bcs.n	8004c1e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	200e      	movs	r0, #14
 8004bea:	2418      	movs	r4, #24
 8004bec:	193b      	adds	r3, r7, r4
 8004bee:	181b      	adds	r3, r3, r0
 8004bf0:	210f      	movs	r1, #15
 8004bf2:	438a      	bics	r2, r1
 8004bf4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	2207      	movs	r2, #7
 8004bfe:	4013      	ands	r3, r2
 8004c00:	b299      	uxth	r1, r3
 8004c02:	193b      	adds	r3, r7, r4
 8004c04:	181b      	adds	r3, r3, r0
 8004c06:	193a      	adds	r2, r7, r4
 8004c08:	1812      	adds	r2, r2, r0
 8004c0a:	8812      	ldrh	r2, [r2, #0]
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	193a      	adds	r2, r7, r4
 8004c16:	1812      	adds	r2, r2, r0
 8004c18:	8812      	ldrh	r2, [r2, #0]
 8004c1a:	60da      	str	r2, [r3, #12]
 8004c1c:	e061      	b.n	8004ce2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004c1e:	231a      	movs	r3, #26
 8004c20:	2218      	movs	r2, #24
 8004c22:	4694      	mov	ip, r2
 8004c24:	44bc      	add	ip, r7
 8004c26:	4463      	add	r3, ip
 8004c28:	2201      	movs	r2, #1
 8004c2a:	701a      	strb	r2, [r3, #0]
 8004c2c:	e059      	b.n	8004ce2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c2e:	231b      	movs	r3, #27
 8004c30:	2218      	movs	r2, #24
 8004c32:	4694      	mov	ip, r2
 8004c34:	44bc      	add	ip, r7
 8004c36:	4463      	add	r3, ip
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d822      	bhi.n	8004c84 <UART_SetConfig+0x4e8>
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <UART_SetConfig+0x578>)
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7ff fbb4 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c50:	e022      	b.n	8004c98 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c52:	f7ff fbc5 	bl	80043e0 <HAL_RCC_GetPCLK2Freq>
 8004c56:	0003      	movs	r3, r0
 8004c58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c5a:	e01d      	b.n	8004c98 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5c:	4b2a      	ldr	r3, [pc, #168]	; (8004d08 <UART_SetConfig+0x56c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2210      	movs	r2, #16
 8004c62:	4013      	ands	r3, r2
 8004c64:	d002      	beq.n	8004c6c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c66:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <UART_SetConfig+0x570>)
 8004c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c6a:	e015      	b.n	8004c98 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b28      	ldr	r3, [pc, #160]	; (8004d10 <UART_SetConfig+0x574>)
 8004c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c70:	e012      	b.n	8004c98 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7ff faef 	bl	8004254 <HAL_RCC_GetSysClockFreq>
 8004c76:	0003      	movs	r3, r0
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c7a:	e00d      	b.n	8004c98 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004c82:	e009      	b.n	8004c98 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004c88:	231a      	movs	r3, #26
 8004c8a:	2218      	movs	r2, #24
 8004c8c:	4694      	mov	ip, r2
 8004c8e:	44bc      	add	ip, r7
 8004c90:	4463      	add	r3, ip
 8004c92:	2201      	movs	r2, #1
 8004c94:	701a      	strb	r2, [r3, #0]
        break;
 8004c96:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d021      	beq.n	8004ce2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	085a      	lsrs	r2, r3, #1
 8004ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca6:	18d2      	adds	r2, r2, r3
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	0019      	movs	r1, r3
 8004cae:	0010      	movs	r0, r2
 8004cb0:	f7fb fa2a 	bl	8000108 <__udivsi3>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbc:	2b0f      	cmp	r3, #15
 8004cbe:	d909      	bls.n	8004cd4 <UART_SetConfig+0x538>
 8004cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d204      	bcs.n	8004cd4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	e006      	b.n	8004ce2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd4:	231a      	movs	r3, #26
 8004cd6:	2218      	movs	r2, #24
 8004cd8:	4694      	mov	ip, r2
 8004cda:	44bc      	add	ip, r7
 8004cdc:	4463      	add	r3, ip
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	2200      	movs	r2, #0
 8004cec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004cee:	231a      	movs	r3, #26
 8004cf0:	2218      	movs	r2, #24
 8004cf2:	4694      	mov	ip, r2
 8004cf4:	44bc      	add	ip, r7
 8004cf6:	4463      	add	r3, ip
 8004cf8:	781b      	ldrb	r3, [r3, #0]
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b00e      	add	sp, #56	; 0x38
 8004d00:	bdb0      	pop	{r4, r5, r7, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	08009594 	.word	0x08009594
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	003d0900 	.word	0x003d0900
 8004d10:	00f42400 	.word	0x00f42400
 8004d14:	080095b8 	.word	0x080095b8

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a4a      	ldr	r2, [pc, #296]	; (8004e5c <UART_AdvFeatureConfig+0x144>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4a43      	ldr	r2, [pc, #268]	; (8004e60 <UART_AdvFeatureConfig+0x148>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d68:	2204      	movs	r2, #4
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a3b      	ldr	r2, [pc, #236]	; (8004e64 <UART_AdvFeatureConfig+0x14c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <UART_AdvFeatureConfig+0x150>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	2210      	movs	r2, #16
 8004dae:	4013      	ands	r3, r2
 8004db0:	d00b      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a2c      	ldr	r2, [pc, #176]	; (8004e6c <UART_AdvFeatureConfig+0x154>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2220      	movs	r2, #32
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <UART_AdvFeatureConfig+0x158>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	4013      	ands	r3, r2
 8004df4:	d01d      	beq.n	8004e32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <UART_AdvFeatureConfig+0x15c>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	035b      	lsls	r3, r3, #13
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d10b      	bne.n	8004e32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <UART_AdvFeatureConfig+0x160>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <UART_AdvFeatureConfig+0x164>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	fffdffff 	.word	0xfffdffff
 8004e60:	fffeffff 	.word	0xfffeffff
 8004e64:	fffbffff 	.word	0xfffbffff
 8004e68:	ffff7fff 	.word	0xffff7fff
 8004e6c:	ffffefff 	.word	0xffffefff
 8004e70:	ffffdfff 	.word	0xffffdfff
 8004e74:	ffefffff 	.word	0xffefffff
 8004e78:	ff9fffff 	.word	0xff9fffff
 8004e7c:	fff7ffff 	.word	0xfff7ffff

08004e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2280      	movs	r2, #128	; 0x80
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e90:	f7fb ff1a 	bl	8000cc8 <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d10c      	bne.n	8004ec0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	0391      	lsls	r1, r2, #14
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4a17      	ldr	r2, [pc, #92]	; (8004f0c <UART_CheckIdleState+0x8c>)
 8004eb0:	9200      	str	r2, [sp, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f000 f82c 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	1e03      	subs	r3, r0, #0
 8004eba:	d001      	beq.n	8004ec0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e021      	b.n	8004f04 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d10c      	bne.n	8004ee8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2280      	movs	r2, #128	; 0x80
 8004ed2:	03d1      	lsls	r1, r2, #15
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4a0d      	ldr	r2, [pc, #52]	; (8004f0c <UART_CheckIdleState+0x8c>)
 8004ed8:	9200      	str	r2, [sp, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f000 f818 	bl	8004f10 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	1e03      	subs	r3, r0, #0
 8004ee2:	d001      	beq.n	8004ee8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e00d      	b.n	8004f04 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2274      	movs	r2, #116	; 0x74
 8004efe:	2100      	movs	r1, #0
 8004f00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	0018      	movs	r0, r3
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b004      	add	sp, #16
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	01ffffff 	.word	0x01ffffff

08004f10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b094      	sub	sp, #80	; 0x50
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f20:	e0a3      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f24:	3301      	adds	r3, #1
 8004f26:	d100      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004f28:	e09f      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2a:	f7fb fecd 	bl	8000cc8 <HAL_GetTick>
 8004f2e:	0002      	movs	r2, r0
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d302      	bcc.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d13d      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f40:	f3ef 8310 	mrs	r3, PRIMASK
 8004f44:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f48:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f50:	f383 8810 	msr	PRIMASK, r3
}
 8004f54:	46c0      	nop			; (mov r8, r8)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	494c      	ldr	r1, [pc, #304]	; (8005094 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004f62:	400a      	ands	r2, r1
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6c:	f383 8810 	msr	PRIMASK, r3
}
 8004f70:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f72:	f3ef 8310 	mrs	r3, PRIMASK
 8004f76:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f82:	f383 8810 	msr	PRIMASK, r3
}
 8004f86:	46c0      	nop			; (mov r8, r8)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2101      	movs	r1, #1
 8004f94:	438a      	bics	r2, r1
 8004f96:	609a      	str	r2, [r3, #8]
 8004f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f9e:	f383 8810 	msr	PRIMASK, r3
}
 8004fa2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2220      	movs	r2, #32
 8004fae:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2274      	movs	r2, #116	; 0x74
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e067      	b.n	800508c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d050      	beq.n	800506a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	69da      	ldr	r2, [r3, #28]
 8004fce:	2380      	movs	r3, #128	; 0x80
 8004fd0:	011b      	lsls	r3, r3, #4
 8004fd2:	401a      	ands	r2, r3
 8004fd4:	2380      	movs	r3, #128	; 0x80
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d146      	bne.n	800506a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2280      	movs	r2, #128	; 0x80
 8004fe2:	0112      	lsls	r2, r2, #4
 8004fe4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8004fea:	613b      	str	r3, [r7, #16]
  return(result);
 8004fec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f383 8810 	msr	PRIMASK, r3
}
 8004ffa:	46c0      	nop			; (mov r8, r8)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4923      	ldr	r1, [pc, #140]	; (8005094 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005008:	400a      	ands	r2, r1
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	f383 8810 	msr	PRIMASK, r3
}
 8005016:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005018:	f3ef 8310 	mrs	r3, PRIMASK
 800501c:	61fb      	str	r3, [r7, #28]
  return(result);
 800501e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	64bb      	str	r3, [r7, #72]	; 0x48
 8005022:	2301      	movs	r3, #1
 8005024:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2101      	movs	r1, #1
 800503a:	438a      	bics	r2, r1
 800503c:	609a      	str	r2, [r3, #8]
 800503e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005044:	f383 8810 	msr	PRIMASK, r3
}
 8005048:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2220      	movs	r2, #32
 800504e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2280      	movs	r2, #128	; 0x80
 800505a:	2120      	movs	r1, #32
 800505c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2274      	movs	r2, #116	; 0x74
 8005062:	2100      	movs	r1, #0
 8005064:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e010      	b.n	800508c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	425a      	negs	r2, r3
 800507a:	4153      	adcs	r3, r2
 800507c:	b2db      	uxtb	r3, r3
 800507e:	001a      	movs	r2, r3
 8005080:	1dfb      	adds	r3, r7, #7
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d100      	bne.n	800508a <UART_WaitOnFlagUntilTimeout+0x17a>
 8005088:	e74b      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	0018      	movs	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	b014      	add	sp, #80	; 0x50
 8005092:	bd80      	pop	{r7, pc}
 8005094:	fffffe5f 	.word	0xfffffe5f

08005098 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b084      	sub	sp, #16
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2244      	movs	r2, #68	; 0x44
 80050a4:	2100      	movs	r1, #0
 80050a6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050a8:	4b05      	ldr	r3, [pc, #20]	; (80050c0 <USB_EnableGlobalInt+0x28>)
 80050aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	b299      	uxth	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2240      	movs	r2, #64	; 0x40
 80050b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	0018      	movs	r0, r3
 80050ba:	46bd      	mov	sp, r7
 80050bc:	b004      	add	sp, #16
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	0000bf80 	.word	0x0000bf80

080050c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <USB_DisableGlobalInt+0x30>)
 80050ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2240      	movs	r2, #64	; 0x40
 80050d4:	5a9b      	ldrh	r3, [r3, r2]
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	b292      	uxth	r2, r2
 80050dc:	43d2      	mvns	r2, r2
 80050de:	b292      	uxth	r2, r2
 80050e0:	4013      	ands	r3, r2
 80050e2:	b299      	uxth	r1, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2240      	movs	r2, #64	; 0x40
 80050e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b004      	add	sp, #16
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	0000bf80 	.word	0x0000bf80

080050f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80050f8:	b084      	sub	sp, #16
 80050fa:	b590      	push	{r4, r7, lr}
 80050fc:	46c6      	mov	lr, r8
 80050fe:	b500      	push	{lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	2004      	movs	r0, #4
 8005108:	2410      	movs	r4, #16
 800510a:	46a4      	mov	ip, r4
 800510c:	2408      	movs	r4, #8
 800510e:	46a0      	mov	r8, r4
 8005110:	44b8      	add	r8, r7
 8005112:	44c4      	add	ip, r8
 8005114:	4460      	add	r0, ip
 8005116:	6001      	str	r1, [r0, #0]
 8005118:	6042      	str	r2, [r0, #4]
 800511a:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2240      	movs	r2, #64	; 0x40
 8005120:	2101      	movs	r1, #1
 8005122:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2240      	movs	r2, #64	; 0x40
 8005128:	2100      	movs	r1, #0
 800512a:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2244      	movs	r2, #68	; 0x44
 8005130:	2100      	movs	r1, #0
 8005132:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2250      	movs	r2, #80	; 0x50
 8005138:	2100      	movs	r1, #0
 800513a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	0018      	movs	r0, r3
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bc80      	pop	{r7}
 8005146:	46b8      	mov	r8, r7
 8005148:	bc90      	pop	{r4, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	b004      	add	sp, #16
 800514e:	4718      	bx	r3

08005150 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b09c      	sub	sp, #112	; 0x70
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800515a:	236f      	movs	r3, #111	; 0x6f
 800515c:	18fb      	adds	r3, r7, r3
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	18d3      	adds	r3, r2, r3
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29a      	uxth	r2, r3
 8005170:	236c      	movs	r3, #108	; 0x6c
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	49cf      	ldr	r1, [pc, #828]	; (80054b4 <USB_ActivateEndpoint+0x364>)
 8005176:	400a      	ands	r2, r1
 8005178:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	78db      	ldrb	r3, [r3, #3]
 800517e:	2b03      	cmp	r3, #3
 8005180:	d017      	beq.n	80051b2 <USB_ActivateEndpoint+0x62>
 8005182:	dc28      	bgt.n	80051d6 <USB_ActivateEndpoint+0x86>
 8005184:	2b02      	cmp	r3, #2
 8005186:	d00e      	beq.n	80051a6 <USB_ActivateEndpoint+0x56>
 8005188:	dc25      	bgt.n	80051d6 <USB_ActivateEndpoint+0x86>
 800518a:	2b00      	cmp	r3, #0
 800518c:	d002      	beq.n	8005194 <USB_ActivateEndpoint+0x44>
 800518e:	2b01      	cmp	r3, #1
 8005190:	d018      	beq.n	80051c4 <USB_ActivateEndpoint+0x74>
 8005192:	e020      	b.n	80051d6 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005194:	226c      	movs	r2, #108	; 0x6c
 8005196:	18bb      	adds	r3, r7, r2
 8005198:	18ba      	adds	r2, r7, r2
 800519a:	8812      	ldrh	r2, [r2, #0]
 800519c:	2180      	movs	r1, #128	; 0x80
 800519e:	0089      	lsls	r1, r1, #2
 80051a0:	430a      	orrs	r2, r1
 80051a2:	801a      	strh	r2, [r3, #0]
      break;
 80051a4:	e01c      	b.n	80051e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80051a6:	226c      	movs	r2, #108	; 0x6c
 80051a8:	18bb      	adds	r3, r7, r2
 80051aa:	18ba      	adds	r2, r7, r2
 80051ac:	8812      	ldrh	r2, [r2, #0]
 80051ae:	801a      	strh	r2, [r3, #0]
      break;
 80051b0:	e016      	b.n	80051e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80051b2:	226c      	movs	r2, #108	; 0x6c
 80051b4:	18bb      	adds	r3, r7, r2
 80051b6:	18ba      	adds	r2, r7, r2
 80051b8:	8812      	ldrh	r2, [r2, #0]
 80051ba:	21c0      	movs	r1, #192	; 0xc0
 80051bc:	00c9      	lsls	r1, r1, #3
 80051be:	430a      	orrs	r2, r1
 80051c0:	801a      	strh	r2, [r3, #0]
      break;
 80051c2:	e00d      	b.n	80051e0 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80051c4:	226c      	movs	r2, #108	; 0x6c
 80051c6:	18bb      	adds	r3, r7, r2
 80051c8:	18ba      	adds	r2, r7, r2
 80051ca:	8812      	ldrh	r2, [r2, #0]
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	00c9      	lsls	r1, r1, #3
 80051d0:	430a      	orrs	r2, r1
 80051d2:	801a      	strh	r2, [r3, #0]
      break;
 80051d4:	e004      	b.n	80051e0 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80051d6:	236f      	movs	r3, #111	; 0x6f
 80051d8:	18fb      	adds	r3, r7, r3
 80051da:	2201      	movs	r2, #1
 80051dc:	701a      	strb	r2, [r3, #0]
      break;
 80051de:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	18d3      	adds	r3, r2, r3
 80051ea:	226c      	movs	r2, #108	; 0x6c
 80051ec:	18ba      	adds	r2, r7, r2
 80051ee:	8812      	ldrh	r2, [r2, #0]
 80051f0:	49b1      	ldr	r1, [pc, #708]	; (80054b8 <USB_ActivateEndpoint+0x368>)
 80051f2:	430a      	orrs	r2, r1
 80051f4:	b292      	uxth	r2, r2
 80051f6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	18d3      	adds	r3, r2, r3
 8005202:	881b      	ldrh	r3, [r3, #0]
 8005204:	b29b      	uxth	r3, r3
 8005206:	b21b      	sxth	r3, r3
 8005208:	4aac      	ldr	r2, [pc, #688]	; (80054bc <USB_ActivateEndpoint+0x36c>)
 800520a:	4013      	ands	r3, r2
 800520c:	b21a      	sxth	r2, r3
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	b21b      	sxth	r3, r3
 8005214:	4313      	orrs	r3, r2
 8005216:	b21a      	sxth	r2, r3
 8005218:	2166      	movs	r1, #102	; 0x66
 800521a:	187b      	adds	r3, r7, r1
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	18d3      	adds	r3, r2, r3
 8005228:	187a      	adds	r2, r7, r1
 800522a:	8812      	ldrh	r2, [r2, #0]
 800522c:	49a2      	ldr	r1, [pc, #648]	; (80054b8 <USB_ActivateEndpoint+0x368>)
 800522e:	430a      	orrs	r2, r1
 8005230:	b292      	uxth	r2, r2
 8005232:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	7b1b      	ldrb	r3, [r3, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d000      	beq.n	800523e <USB_ActivateEndpoint+0xee>
 800523c:	e150      	b.n	80054e0 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d100      	bne.n	8005248 <USB_ActivateEndpoint+0xf8>
 8005246:	e07a      	b.n	800533e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	61bb      	str	r3, [r7, #24]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2250      	movs	r2, #80	; 0x50
 8005250:	5a9b      	ldrh	r3, [r3, r2]
 8005252:	b29b      	uxth	r3, r3
 8005254:	001a      	movs	r2, r3
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	189b      	adds	r3, r3, r2
 800525a:	61bb      	str	r3, [r7, #24]
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	00da      	lsls	r2, r3, #3
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	18d3      	adds	r3, r2, r3
 8005266:	2280      	movs	r2, #128	; 0x80
 8005268:	00d2      	lsls	r2, r2, #3
 800526a:	4694      	mov	ip, r2
 800526c:	4463      	add	r3, ip
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	88db      	ldrh	r3, [r3, #6]
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	b29b      	uxth	r3, r3
 8005278:	18db      	adds	r3, r3, r3
 800527a:	b29a      	uxth	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	18d2      	adds	r2, r2, r3
 800528a:	2112      	movs	r1, #18
 800528c:	187b      	adds	r3, r7, r1
 800528e:	8812      	ldrh	r2, [r2, #0]
 8005290:	801a      	strh	r2, [r3, #0]
 8005292:	187b      	adds	r3, r7, r1
 8005294:	881b      	ldrh	r3, [r3, #0]
 8005296:	2240      	movs	r2, #64	; 0x40
 8005298:	4013      	ands	r3, r2
 800529a:	d016      	beq.n	80052ca <USB_ActivateEndpoint+0x17a>
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	18d3      	adds	r3, r2, r3
 80052a6:	881b      	ldrh	r3, [r3, #0]
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	2010      	movs	r0, #16
 80052ac:	183b      	adds	r3, r7, r0
 80052ae:	4983      	ldr	r1, [pc, #524]	; (80054bc <USB_ActivateEndpoint+0x36c>)
 80052b0:	400a      	ands	r2, r1
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	18d3      	adds	r3, r2, r3
 80052be:	183a      	adds	r2, r7, r0
 80052c0:	8812      	ldrh	r2, [r2, #0]
 80052c2:	497f      	ldr	r1, [pc, #508]	; (80054c0 <USB_ActivateEndpoint+0x370>)
 80052c4:	430a      	orrs	r2, r1
 80052c6:	b292      	uxth	r2, r2
 80052c8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	78db      	ldrb	r3, [r3, #3]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d01d      	beq.n	800530e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	18d3      	adds	r3, r2, r3
 80052dc:	881b      	ldrh	r3, [r3, #0]
 80052de:	b29a      	uxth	r2, r3
 80052e0:	200c      	movs	r0, #12
 80052e2:	183b      	adds	r3, r7, r0
 80052e4:	4977      	ldr	r1, [pc, #476]	; (80054c4 <USB_ActivateEndpoint+0x374>)
 80052e6:	400a      	ands	r2, r1
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	183b      	adds	r3, r7, r0
 80052ec:	183a      	adds	r2, r7, r0
 80052ee:	8812      	ldrh	r2, [r2, #0]
 80052f0:	2120      	movs	r1, #32
 80052f2:	404a      	eors	r2, r1
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	18d3      	adds	r3, r2, r3
 8005300:	183a      	adds	r2, r7, r0
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	496c      	ldr	r1, [pc, #432]	; (80054b8 <USB_ActivateEndpoint+0x368>)
 8005306:	430a      	orrs	r2, r1
 8005308:	b292      	uxth	r2, r2
 800530a:	801a      	strh	r2, [r3, #0]
 800530c:	e27a      	b.n	8005804 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	18d3      	adds	r3, r2, r3
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29a      	uxth	r2, r3
 800531c:	200e      	movs	r0, #14
 800531e:	183b      	adds	r3, r7, r0
 8005320:	4968      	ldr	r1, [pc, #416]	; (80054c4 <USB_ActivateEndpoint+0x374>)
 8005322:	400a      	ands	r2, r1
 8005324:	801a      	strh	r2, [r3, #0]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	18d3      	adds	r3, r2, r3
 8005330:	183a      	adds	r2, r7, r0
 8005332:	8812      	ldrh	r2, [r2, #0]
 8005334:	4960      	ldr	r1, [pc, #384]	; (80054b8 <USB_ActivateEndpoint+0x368>)
 8005336:	430a      	orrs	r2, r1
 8005338:	b292      	uxth	r2, r2
 800533a:	801a      	strh	r2, [r3, #0]
 800533c:	e262      	b.n	8005804 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	633b      	str	r3, [r7, #48]	; 0x30
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2250      	movs	r2, #80	; 0x50
 8005346:	5a9b      	ldrh	r3, [r3, r2]
 8005348:	b29b      	uxth	r3, r3
 800534a:	001a      	movs	r2, r3
 800534c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534e:	189b      	adds	r3, r3, r2
 8005350:	633b      	str	r3, [r7, #48]	; 0x30
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00da      	lsls	r2, r3, #3
 8005358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535a:	18d3      	adds	r3, r2, r3
 800535c:	4a5a      	ldr	r2, [pc, #360]	; (80054c8 <USB_ActivateEndpoint+0x378>)
 800535e:	4694      	mov	ip, r2
 8005360:	4463      	add	r3, ip
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	88db      	ldrh	r3, [r3, #6]
 8005368:	085b      	lsrs	r3, r3, #1
 800536a:	b29b      	uxth	r3, r3
 800536c:	18db      	adds	r3, r3, r3
 800536e:	b29a      	uxth	r2, r3
 8005370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005372:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	62bb      	str	r3, [r7, #40]	; 0x28
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2250      	movs	r2, #80	; 0x50
 800537c:	5a9b      	ldrh	r3, [r3, r2]
 800537e:	b29b      	uxth	r3, r3
 8005380:	001a      	movs	r2, r3
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	189b      	adds	r3, r3, r2
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	00da      	lsls	r2, r3, #3
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	18d3      	adds	r3, r2, r3
 8005392:	4a4e      	ldr	r2, [pc, #312]	; (80054cc <USB_ActivateEndpoint+0x37c>)
 8005394:	4694      	mov	ip, r2
 8005396:	4463      	add	r3, ip
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d110      	bne.n	80053c4 <USB_ActivateEndpoint+0x274>
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	4a49      	ldr	r2, [pc, #292]	; (80054d0 <USB_ActivateEndpoint+0x380>)
 80053aa:	4013      	ands	r3, r2
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b4:	881b      	ldrh	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	4a46      	ldr	r2, [pc, #280]	; (80054d4 <USB_ActivateEndpoint+0x384>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	b29a      	uxth	r2, r3
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	801a      	strh	r2, [r3, #0]
 80053c2:	e02b      	b.n	800541c <USB_ActivateEndpoint+0x2cc>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b3e      	cmp	r3, #62	; 0x3e
 80053ca:	d812      	bhi.n	80053f2 <USB_ActivateEndpoint+0x2a2>
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	085b      	lsrs	r3, r3, #1
 80053d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2201      	movs	r2, #1
 80053da:	4013      	ands	r3, r2
 80053dc:	d002      	beq.n	80053e4 <USB_ActivateEndpoint+0x294>
 80053de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053e0:	3301      	adds	r3, #1
 80053e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	029b      	lsls	r3, r3, #10
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	801a      	strh	r2, [r3, #0]
 80053f0:	e014      	b.n	800541c <USB_ActivateEndpoint+0x2cc>
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	221f      	movs	r2, #31
 8005400:	4013      	ands	r3, r2
 8005402:	d102      	bne.n	800540a <USB_ActivateEndpoint+0x2ba>
 8005404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005406:	3b01      	subs	r3, #1
 8005408:	66bb      	str	r3, [r7, #104]	; 0x68
 800540a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800540c:	b29b      	uxth	r3, r3
 800540e:	029b      	lsls	r3, r3, #10
 8005410:	b29b      	uxth	r3, r3
 8005412:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <USB_ActivateEndpoint+0x384>)
 8005414:	4313      	orrs	r3, r2
 8005416:	b29a      	uxth	r2, r3
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	18d2      	adds	r2, r2, r3
 8005426:	2122      	movs	r1, #34	; 0x22
 8005428:	187b      	adds	r3, r7, r1
 800542a:	8812      	ldrh	r2, [r2, #0]
 800542c:	801a      	strh	r2, [r3, #0]
 800542e:	187b      	adds	r3, r7, r1
 8005430:	881a      	ldrh	r2, [r3, #0]
 8005432:	2380      	movs	r3, #128	; 0x80
 8005434:	01db      	lsls	r3, r3, #7
 8005436:	4013      	ands	r3, r2
 8005438:	d016      	beq.n	8005468 <USB_ActivateEndpoint+0x318>
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	18d3      	adds	r3, r2, r3
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29a      	uxth	r2, r3
 8005448:	2020      	movs	r0, #32
 800544a:	183b      	adds	r3, r7, r0
 800544c:	491b      	ldr	r1, [pc, #108]	; (80054bc <USB_ActivateEndpoint+0x36c>)
 800544e:	400a      	ands	r2, r1
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	18d3      	adds	r3, r2, r3
 800545c:	183a      	adds	r2, r7, r0
 800545e:	8812      	ldrh	r2, [r2, #0]
 8005460:	491d      	ldr	r1, [pc, #116]	; (80054d8 <USB_ActivateEndpoint+0x388>)
 8005462:	430a      	orrs	r2, r1
 8005464:	b292      	uxth	r2, r2
 8005466:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	18d3      	adds	r3, r2, r3
 8005472:	881b      	ldrh	r3, [r3, #0]
 8005474:	b29a      	uxth	r2, r3
 8005476:	201e      	movs	r0, #30
 8005478:	183b      	adds	r3, r7, r0
 800547a:	4918      	ldr	r1, [pc, #96]	; (80054dc <USB_ActivateEndpoint+0x38c>)
 800547c:	400a      	ands	r2, r1
 800547e:	801a      	strh	r2, [r3, #0]
 8005480:	183b      	adds	r3, r7, r0
 8005482:	183a      	adds	r2, r7, r0
 8005484:	8812      	ldrh	r2, [r2, #0]
 8005486:	2180      	movs	r1, #128	; 0x80
 8005488:	0149      	lsls	r1, r1, #5
 800548a:	404a      	eors	r2, r1
 800548c:	801a      	strh	r2, [r3, #0]
 800548e:	183b      	adds	r3, r7, r0
 8005490:	183a      	adds	r2, r7, r0
 8005492:	8812      	ldrh	r2, [r2, #0]
 8005494:	2180      	movs	r1, #128	; 0x80
 8005496:	0189      	lsls	r1, r1, #6
 8005498:	404a      	eors	r2, r1
 800549a:	801a      	strh	r2, [r3, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	18d3      	adds	r3, r2, r3
 80054a6:	183a      	adds	r2, r7, r0
 80054a8:	8812      	ldrh	r2, [r2, #0]
 80054aa:	4903      	ldr	r1, [pc, #12]	; (80054b8 <USB_ActivateEndpoint+0x368>)
 80054ac:	430a      	orrs	r2, r1
 80054ae:	b292      	uxth	r2, r2
 80054b0:	801a      	strh	r2, [r3, #0]
 80054b2:	e1a7      	b.n	8005804 <USB_ActivateEndpoint+0x6b4>
 80054b4:	ffff898f 	.word	0xffff898f
 80054b8:	ffff8080 	.word	0xffff8080
 80054bc:	ffff8f8f 	.word	0xffff8f8f
 80054c0:	ffff80c0 	.word	0xffff80c0
 80054c4:	ffff8fbf 	.word	0xffff8fbf
 80054c8:	00000404 	.word	0x00000404
 80054cc:	00000406 	.word	0x00000406
 80054d0:	ffff83ff 	.word	0xffff83ff
 80054d4:	ffff8000 	.word	0xffff8000
 80054d8:	ffffc080 	.word	0xffffc080
 80054dc:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	78db      	ldrb	r3, [r3, #3]
 80054e4:	2b02      	cmp	r3, #2
 80054e6:	d117      	bne.n	8005518 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	18d3      	adds	r3, r2, r3
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	2062      	movs	r0, #98	; 0x62
 80054f8:	183b      	adds	r3, r7, r0
 80054fa:	49c6      	ldr	r1, [pc, #792]	; (8005814 <USB_ActivateEndpoint+0x6c4>)
 80054fc:	400a      	ands	r2, r1
 80054fe:	801a      	strh	r2, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	18d3      	adds	r3, r2, r3
 800550a:	183a      	adds	r2, r7, r0
 800550c:	8812      	ldrh	r2, [r2, #0]
 800550e:	49c2      	ldr	r1, [pc, #776]	; (8005818 <USB_ActivateEndpoint+0x6c8>)
 8005510:	430a      	orrs	r2, r1
 8005512:	b292      	uxth	r2, r2
 8005514:	801a      	strh	r2, [r3, #0]
 8005516:	e016      	b.n	8005546 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	18d3      	adds	r3, r2, r3
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29a      	uxth	r2, r3
 8005526:	2064      	movs	r0, #100	; 0x64
 8005528:	183b      	adds	r3, r7, r0
 800552a:	49bc      	ldr	r1, [pc, #752]	; (800581c <USB_ActivateEndpoint+0x6cc>)
 800552c:	400a      	ands	r2, r1
 800552e:	801a      	strh	r2, [r3, #0]
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	18d3      	adds	r3, r2, r3
 800553a:	183a      	adds	r2, r7, r0
 800553c:	8812      	ldrh	r2, [r2, #0]
 800553e:	49b8      	ldr	r1, [pc, #736]	; (8005820 <USB_ActivateEndpoint+0x6d0>)
 8005540:	430a      	orrs	r2, r1
 8005542:	b292      	uxth	r2, r2
 8005544:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2250      	movs	r2, #80	; 0x50
 800554e:	5a9b      	ldrh	r3, [r3, r2]
 8005550:	b29b      	uxth	r3, r3
 8005552:	001a      	movs	r2, r3
 8005554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005556:	189b      	adds	r3, r3, r2
 8005558:	65fb      	str	r3, [r7, #92]	; 0x5c
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00da      	lsls	r2, r3, #3
 8005560:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005562:	18d3      	adds	r3, r2, r3
 8005564:	2280      	movs	r2, #128	; 0x80
 8005566:	00d2      	lsls	r2, r2, #3
 8005568:	4694      	mov	ip, r2
 800556a:	4463      	add	r3, ip
 800556c:	65bb      	str	r3, [r7, #88]	; 0x58
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	891b      	ldrh	r3, [r3, #8]
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	b29b      	uxth	r3, r3
 8005576:	18db      	adds	r3, r3, r3
 8005578:	b29a      	uxth	r2, r3
 800557a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800557c:	801a      	strh	r2, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	657b      	str	r3, [r7, #84]	; 0x54
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2250      	movs	r2, #80	; 0x50
 8005586:	5a9b      	ldrh	r3, [r3, r2]
 8005588:	b29b      	uxth	r3, r3
 800558a:	001a      	movs	r2, r3
 800558c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558e:	189b      	adds	r3, r3, r2
 8005590:	657b      	str	r3, [r7, #84]	; 0x54
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	00da      	lsls	r2, r3, #3
 8005598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800559a:	18d3      	adds	r3, r2, r3
 800559c:	4aa1      	ldr	r2, [pc, #644]	; (8005824 <USB_ActivateEndpoint+0x6d4>)
 800559e:	4694      	mov	ip, r2
 80055a0:	4463      	add	r3, ip
 80055a2:	653b      	str	r3, [r7, #80]	; 0x50
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	895b      	ldrh	r3, [r3, #10]
 80055a8:	085b      	lsrs	r3, r3, #1
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	18db      	adds	r3, r3, r3
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055b2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	785b      	ldrb	r3, [r3, #1]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d000      	beq.n	80055be <USB_ActivateEndpoint+0x46e>
 80055bc:	e087      	b.n	80056ce <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	18d2      	adds	r2, r2, r3
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	8812      	ldrh	r2, [r2, #0]
 80055ce:	801a      	strh	r2, [r3, #0]
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	881a      	ldrh	r2, [r3, #0]
 80055d4:	2380      	movs	r3, #128	; 0x80
 80055d6:	01db      	lsls	r3, r3, #7
 80055d8:	4013      	ands	r3, r2
 80055da:	d016      	beq.n	800560a <USB_ActivateEndpoint+0x4ba>
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	18d3      	adds	r3, r2, r3
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	203e      	movs	r0, #62	; 0x3e
 80055ec:	183b      	adds	r3, r7, r0
 80055ee:	4989      	ldr	r1, [pc, #548]	; (8005814 <USB_ActivateEndpoint+0x6c4>)
 80055f0:	400a      	ands	r2, r1
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	18d3      	adds	r3, r2, r3
 80055fe:	183a      	adds	r2, r7, r0
 8005600:	8812      	ldrh	r2, [r2, #0]
 8005602:	4989      	ldr	r1, [pc, #548]	; (8005828 <USB_ActivateEndpoint+0x6d8>)
 8005604:	430a      	orrs	r2, r1
 8005606:	b292      	uxth	r2, r2
 8005608:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	18d2      	adds	r2, r2, r3
 8005614:	213c      	movs	r1, #60	; 0x3c
 8005616:	187b      	adds	r3, r7, r1
 8005618:	8812      	ldrh	r2, [r2, #0]
 800561a:	801a      	strh	r2, [r3, #0]
 800561c:	187b      	adds	r3, r7, r1
 800561e:	881b      	ldrh	r3, [r3, #0]
 8005620:	2240      	movs	r2, #64	; 0x40
 8005622:	4013      	ands	r3, r2
 8005624:	d016      	beq.n	8005654 <USB_ActivateEndpoint+0x504>
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	18d3      	adds	r3, r2, r3
 8005630:	881b      	ldrh	r3, [r3, #0]
 8005632:	b29a      	uxth	r2, r3
 8005634:	203a      	movs	r0, #58	; 0x3a
 8005636:	183b      	adds	r3, r7, r0
 8005638:	4976      	ldr	r1, [pc, #472]	; (8005814 <USB_ActivateEndpoint+0x6c4>)
 800563a:	400a      	ands	r2, r1
 800563c:	801a      	strh	r2, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	18d3      	adds	r3, r2, r3
 8005648:	183a      	adds	r2, r7, r0
 800564a:	8812      	ldrh	r2, [r2, #0]
 800564c:	4977      	ldr	r1, [pc, #476]	; (800582c <USB_ActivateEndpoint+0x6dc>)
 800564e:	430a      	orrs	r2, r1
 8005650:	b292      	uxth	r2, r2
 8005652:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	18d3      	adds	r3, r2, r3
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	b29a      	uxth	r2, r3
 8005662:	2038      	movs	r0, #56	; 0x38
 8005664:	183b      	adds	r3, r7, r0
 8005666:	4972      	ldr	r1, [pc, #456]	; (8005830 <USB_ActivateEndpoint+0x6e0>)
 8005668:	400a      	ands	r2, r1
 800566a:	801a      	strh	r2, [r3, #0]
 800566c:	183b      	adds	r3, r7, r0
 800566e:	183a      	adds	r2, r7, r0
 8005670:	8812      	ldrh	r2, [r2, #0]
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	0149      	lsls	r1, r1, #5
 8005676:	404a      	eors	r2, r1
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	183b      	adds	r3, r7, r0
 800567c:	183a      	adds	r2, r7, r0
 800567e:	8812      	ldrh	r2, [r2, #0]
 8005680:	2180      	movs	r1, #128	; 0x80
 8005682:	0189      	lsls	r1, r1, #6
 8005684:	404a      	eors	r2, r1
 8005686:	801a      	strh	r2, [r3, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	18d3      	adds	r3, r2, r3
 8005692:	183a      	adds	r2, r7, r0
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	4962      	ldr	r1, [pc, #392]	; (8005820 <USB_ActivateEndpoint+0x6d0>)
 8005698:	430a      	orrs	r2, r1
 800569a:	b292      	uxth	r2, r2
 800569c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	009b      	lsls	r3, r3, #2
 80056a6:	18d3      	adds	r3, r2, r3
 80056a8:	881b      	ldrh	r3, [r3, #0]
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	2036      	movs	r0, #54	; 0x36
 80056ae:	183b      	adds	r3, r7, r0
 80056b0:	4960      	ldr	r1, [pc, #384]	; (8005834 <USB_ActivateEndpoint+0x6e4>)
 80056b2:	400a      	ands	r2, r1
 80056b4:	801a      	strh	r2, [r3, #0]
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	18d3      	adds	r3, r2, r3
 80056c0:	183a      	adds	r2, r7, r0
 80056c2:	8812      	ldrh	r2, [r2, #0]
 80056c4:	4956      	ldr	r1, [pc, #344]	; (8005820 <USB_ActivateEndpoint+0x6d0>)
 80056c6:	430a      	orrs	r2, r1
 80056c8:	b292      	uxth	r2, r2
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e09a      	b.n	8005804 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	18d2      	adds	r2, r2, r3
 80056d8:	214e      	movs	r1, #78	; 0x4e
 80056da:	187b      	adds	r3, r7, r1
 80056dc:	8812      	ldrh	r2, [r2, #0]
 80056de:	801a      	strh	r2, [r3, #0]
 80056e0:	187b      	adds	r3, r7, r1
 80056e2:	881a      	ldrh	r2, [r3, #0]
 80056e4:	2380      	movs	r3, #128	; 0x80
 80056e6:	01db      	lsls	r3, r3, #7
 80056e8:	4013      	ands	r3, r2
 80056ea:	d016      	beq.n	800571a <USB_ActivateEndpoint+0x5ca>
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	18d3      	adds	r3, r2, r3
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	204c      	movs	r0, #76	; 0x4c
 80056fc:	183b      	adds	r3, r7, r0
 80056fe:	4945      	ldr	r1, [pc, #276]	; (8005814 <USB_ActivateEndpoint+0x6c4>)
 8005700:	400a      	ands	r2, r1
 8005702:	801a      	strh	r2, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	18d3      	adds	r3, r2, r3
 800570e:	183a      	adds	r2, r7, r0
 8005710:	8812      	ldrh	r2, [r2, #0]
 8005712:	4945      	ldr	r1, [pc, #276]	; (8005828 <USB_ActivateEndpoint+0x6d8>)
 8005714:	430a      	orrs	r2, r1
 8005716:	b292      	uxth	r2, r2
 8005718:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	009b      	lsls	r3, r3, #2
 8005722:	18d2      	adds	r2, r2, r3
 8005724:	214a      	movs	r1, #74	; 0x4a
 8005726:	187b      	adds	r3, r7, r1
 8005728:	8812      	ldrh	r2, [r2, #0]
 800572a:	801a      	strh	r2, [r3, #0]
 800572c:	187b      	adds	r3, r7, r1
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	2240      	movs	r2, #64	; 0x40
 8005732:	4013      	ands	r3, r2
 8005734:	d016      	beq.n	8005764 <USB_ActivateEndpoint+0x614>
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	2048      	movs	r0, #72	; 0x48
 8005746:	183b      	adds	r3, r7, r0
 8005748:	4932      	ldr	r1, [pc, #200]	; (8005814 <USB_ActivateEndpoint+0x6c4>)
 800574a:	400a      	ands	r2, r1
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	18d3      	adds	r3, r2, r3
 8005758:	183a      	adds	r2, r7, r0
 800575a:	8812      	ldrh	r2, [r2, #0]
 800575c:	4933      	ldr	r1, [pc, #204]	; (800582c <USB_ActivateEndpoint+0x6dc>)
 800575e:	430a      	orrs	r2, r1
 8005760:	b292      	uxth	r2, r2
 8005762:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	78db      	ldrb	r3, [r3, #3]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d01d      	beq.n	80057a8 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	18d3      	adds	r3, r2, r3
 8005776:	881b      	ldrh	r3, [r3, #0]
 8005778:	b29a      	uxth	r2, r3
 800577a:	2044      	movs	r0, #68	; 0x44
 800577c:	183b      	adds	r3, r7, r0
 800577e:	492d      	ldr	r1, [pc, #180]	; (8005834 <USB_ActivateEndpoint+0x6e4>)
 8005780:	400a      	ands	r2, r1
 8005782:	801a      	strh	r2, [r3, #0]
 8005784:	183b      	adds	r3, r7, r0
 8005786:	183a      	adds	r2, r7, r0
 8005788:	8812      	ldrh	r2, [r2, #0]
 800578a:	2120      	movs	r1, #32
 800578c:	404a      	eors	r2, r1
 800578e:	801a      	strh	r2, [r3, #0]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	18d3      	adds	r3, r2, r3
 800579a:	183a      	adds	r2, r7, r0
 800579c:	8812      	ldrh	r2, [r2, #0]
 800579e:	4920      	ldr	r1, [pc, #128]	; (8005820 <USB_ActivateEndpoint+0x6d0>)
 80057a0:	430a      	orrs	r2, r1
 80057a2:	b292      	uxth	r2, r2
 80057a4:	801a      	strh	r2, [r3, #0]
 80057a6:	e016      	b.n	80057d6 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	18d3      	adds	r3, r2, r3
 80057b2:	881b      	ldrh	r3, [r3, #0]
 80057b4:	b29a      	uxth	r2, r3
 80057b6:	2046      	movs	r0, #70	; 0x46
 80057b8:	183b      	adds	r3, r7, r0
 80057ba:	491e      	ldr	r1, [pc, #120]	; (8005834 <USB_ActivateEndpoint+0x6e4>)
 80057bc:	400a      	ands	r2, r1
 80057be:	801a      	strh	r2, [r3, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	18d3      	adds	r3, r2, r3
 80057ca:	183a      	adds	r2, r7, r0
 80057cc:	8812      	ldrh	r2, [r2, #0]
 80057ce:	4914      	ldr	r1, [pc, #80]	; (8005820 <USB_ActivateEndpoint+0x6d0>)
 80057d0:	430a      	orrs	r2, r1
 80057d2:	b292      	uxth	r2, r2
 80057d4:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	18d3      	adds	r3, r2, r3
 80057e0:	881b      	ldrh	r3, [r3, #0]
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	2042      	movs	r0, #66	; 0x42
 80057e6:	183b      	adds	r3, r7, r0
 80057e8:	4911      	ldr	r1, [pc, #68]	; (8005830 <USB_ActivateEndpoint+0x6e0>)
 80057ea:	400a      	ands	r2, r1
 80057ec:	801a      	strh	r2, [r3, #0]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	18d3      	adds	r3, r2, r3
 80057f8:	183a      	adds	r2, r7, r0
 80057fa:	8812      	ldrh	r2, [r2, #0]
 80057fc:	4908      	ldr	r1, [pc, #32]	; (8005820 <USB_ActivateEndpoint+0x6d0>)
 80057fe:	430a      	orrs	r2, r1
 8005800:	b292      	uxth	r2, r2
 8005802:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8005804:	236f      	movs	r3, #111	; 0x6f
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	781b      	ldrb	r3, [r3, #0]
}
 800580a:	0018      	movs	r0, r3
 800580c:	46bd      	mov	sp, r7
 800580e:	b01c      	add	sp, #112	; 0x70
 8005810:	bd80      	pop	{r7, pc}
 8005812:	46c0      	nop			; (mov r8, r8)
 8005814:	ffff8f8f 	.word	0xffff8f8f
 8005818:	ffff8180 	.word	0xffff8180
 800581c:	ffff8e8f 	.word	0xffff8e8f
 8005820:	ffff8080 	.word	0xffff8080
 8005824:	00000404 	.word	0x00000404
 8005828:	ffffc080 	.word	0xffffc080
 800582c:	ffff80c0 	.word	0xffff80c0
 8005830:	ffffbf8f 	.word	0xffffbf8f
 8005834:	ffff8fbf 	.word	0xffff8fbf

08005838 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	7b1b      	ldrb	r3, [r3, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d000      	beq.n	800584c <USB_DeactivateEndpoint+0x14>
 800584a:	e07e      	b.n	800594a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	785b      	ldrb	r3, [r3, #1]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d03c      	beq.n	80058ce <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	18d2      	adds	r2, r2, r3
 800585e:	210c      	movs	r1, #12
 8005860:	187b      	adds	r3, r7, r1
 8005862:	8812      	ldrh	r2, [r2, #0]
 8005864:	801a      	strh	r2, [r3, #0]
 8005866:	187b      	adds	r3, r7, r1
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	2240      	movs	r2, #64	; 0x40
 800586c:	4013      	ands	r3, r2
 800586e:	d016      	beq.n	800589e <USB_DeactivateEndpoint+0x66>
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	18d3      	adds	r3, r2, r3
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	b29a      	uxth	r2, r3
 800587e:	200a      	movs	r0, #10
 8005880:	183b      	adds	r3, r7, r0
 8005882:	49c7      	ldr	r1, [pc, #796]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 8005884:	400a      	ands	r2, r1
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	18d3      	adds	r3, r2, r3
 8005892:	183a      	adds	r2, r7, r0
 8005894:	8812      	ldrh	r2, [r2, #0]
 8005896:	49c3      	ldr	r1, [pc, #780]	; (8005ba4 <USB_DeactivateEndpoint+0x36c>)
 8005898:	430a      	orrs	r2, r1
 800589a:	b292      	uxth	r2, r2
 800589c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	18d3      	adds	r3, r2, r3
 80058a8:	881b      	ldrh	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	2008      	movs	r0, #8
 80058ae:	183b      	adds	r3, r7, r0
 80058b0:	49bd      	ldr	r1, [pc, #756]	; (8005ba8 <USB_DeactivateEndpoint+0x370>)
 80058b2:	400a      	ands	r2, r1
 80058b4:	801a      	strh	r2, [r3, #0]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	18d3      	adds	r3, r2, r3
 80058c0:	183a      	adds	r2, r7, r0
 80058c2:	8812      	ldrh	r2, [r2, #0]
 80058c4:	49b9      	ldr	r1, [pc, #740]	; (8005bac <USB_DeactivateEndpoint+0x374>)
 80058c6:	430a      	orrs	r2, r1
 80058c8:	b292      	uxth	r2, r2
 80058ca:	801a      	strh	r2, [r3, #0]
 80058cc:	e163      	b.n	8005b96 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	18d2      	adds	r2, r2, r3
 80058d8:	2112      	movs	r1, #18
 80058da:	187b      	adds	r3, r7, r1
 80058dc:	8812      	ldrh	r2, [r2, #0]
 80058de:	801a      	strh	r2, [r3, #0]
 80058e0:	187b      	adds	r3, r7, r1
 80058e2:	881a      	ldrh	r2, [r3, #0]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	01db      	lsls	r3, r3, #7
 80058e8:	4013      	ands	r3, r2
 80058ea:	d016      	beq.n	800591a <USB_DeactivateEndpoint+0xe2>
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	18d3      	adds	r3, r2, r3
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	2010      	movs	r0, #16
 80058fc:	183b      	adds	r3, r7, r0
 80058fe:	49a8      	ldr	r1, [pc, #672]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 8005900:	400a      	ands	r2, r1
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	18d3      	adds	r3, r2, r3
 800590e:	183a      	adds	r2, r7, r0
 8005910:	8812      	ldrh	r2, [r2, #0]
 8005912:	49a7      	ldr	r1, [pc, #668]	; (8005bb0 <USB_DeactivateEndpoint+0x378>)
 8005914:	430a      	orrs	r2, r1
 8005916:	b292      	uxth	r2, r2
 8005918:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	18d3      	adds	r3, r2, r3
 8005924:	881b      	ldrh	r3, [r3, #0]
 8005926:	b29a      	uxth	r2, r3
 8005928:	200e      	movs	r0, #14
 800592a:	183b      	adds	r3, r7, r0
 800592c:	49a1      	ldr	r1, [pc, #644]	; (8005bb4 <USB_DeactivateEndpoint+0x37c>)
 800592e:	400a      	ands	r2, r1
 8005930:	801a      	strh	r2, [r3, #0]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	18d3      	adds	r3, r2, r3
 800593c:	183a      	adds	r2, r7, r0
 800593e:	8812      	ldrh	r2, [r2, #0]
 8005940:	499a      	ldr	r1, [pc, #616]	; (8005bac <USB_DeactivateEndpoint+0x374>)
 8005942:	430a      	orrs	r2, r1
 8005944:	b292      	uxth	r2, r2
 8005946:	801a      	strh	r2, [r3, #0]
 8005948:	e125      	b.n	8005b96 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	785b      	ldrb	r3, [r3, #1]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d000      	beq.n	8005954 <USB_DeactivateEndpoint+0x11c>
 8005952:	e090      	b.n	8005a76 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	18d2      	adds	r2, r2, r3
 800595e:	2120      	movs	r1, #32
 8005960:	187b      	adds	r3, r7, r1
 8005962:	8812      	ldrh	r2, [r2, #0]
 8005964:	801a      	strh	r2, [r3, #0]
 8005966:	187b      	adds	r3, r7, r1
 8005968:	881a      	ldrh	r2, [r3, #0]
 800596a:	2380      	movs	r3, #128	; 0x80
 800596c:	01db      	lsls	r3, r3, #7
 800596e:	4013      	ands	r3, r2
 8005970:	d016      	beq.n	80059a0 <USB_DeactivateEndpoint+0x168>
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	18d3      	adds	r3, r2, r3
 800597c:	881b      	ldrh	r3, [r3, #0]
 800597e:	b29a      	uxth	r2, r3
 8005980:	201e      	movs	r0, #30
 8005982:	183b      	adds	r3, r7, r0
 8005984:	4986      	ldr	r1, [pc, #536]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 8005986:	400a      	ands	r2, r1
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	18d3      	adds	r3, r2, r3
 8005994:	183a      	adds	r2, r7, r0
 8005996:	8812      	ldrh	r2, [r2, #0]
 8005998:	4985      	ldr	r1, [pc, #532]	; (8005bb0 <USB_DeactivateEndpoint+0x378>)
 800599a:	430a      	orrs	r2, r1
 800599c:	b292      	uxth	r2, r2
 800599e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	18d2      	adds	r2, r2, r3
 80059aa:	211c      	movs	r1, #28
 80059ac:	187b      	adds	r3, r7, r1
 80059ae:	8812      	ldrh	r2, [r2, #0]
 80059b0:	801a      	strh	r2, [r3, #0]
 80059b2:	187b      	adds	r3, r7, r1
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	2240      	movs	r2, #64	; 0x40
 80059b8:	4013      	ands	r3, r2
 80059ba:	d016      	beq.n	80059ea <USB_DeactivateEndpoint+0x1b2>
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	18d3      	adds	r3, r2, r3
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	201a      	movs	r0, #26
 80059cc:	183b      	adds	r3, r7, r0
 80059ce:	4974      	ldr	r1, [pc, #464]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 80059d0:	400a      	ands	r2, r1
 80059d2:	801a      	strh	r2, [r3, #0]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	18d3      	adds	r3, r2, r3
 80059de:	183a      	adds	r2, r7, r0
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	4970      	ldr	r1, [pc, #448]	; (8005ba4 <USB_DeactivateEndpoint+0x36c>)
 80059e4:	430a      	orrs	r2, r1
 80059e6:	b292      	uxth	r2, r2
 80059e8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	18d3      	adds	r3, r2, r3
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	2018      	movs	r0, #24
 80059fa:	183b      	adds	r3, r7, r0
 80059fc:	4968      	ldr	r1, [pc, #416]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 80059fe:	400a      	ands	r2, r1
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	18d3      	adds	r3, r2, r3
 8005a0c:	183a      	adds	r2, r7, r0
 8005a0e:	8812      	ldrh	r2, [r2, #0]
 8005a10:	4964      	ldr	r1, [pc, #400]	; (8005ba4 <USB_DeactivateEndpoint+0x36c>)
 8005a12:	430a      	orrs	r2, r1
 8005a14:	b292      	uxth	r2, r2
 8005a16:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005a18:	687a      	ldr	r2, [r7, #4]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	18d3      	adds	r3, r2, r3
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	2016      	movs	r0, #22
 8005a28:	183b      	adds	r3, r7, r0
 8005a2a:	4962      	ldr	r1, [pc, #392]	; (8005bb4 <USB_DeactivateEndpoint+0x37c>)
 8005a2c:	400a      	ands	r2, r1
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	18d3      	adds	r3, r2, r3
 8005a3a:	183a      	adds	r2, r7, r0
 8005a3c:	8812      	ldrh	r2, [r2, #0]
 8005a3e:	495b      	ldr	r1, [pc, #364]	; (8005bac <USB_DeactivateEndpoint+0x374>)
 8005a40:	430a      	orrs	r2, r1
 8005a42:	b292      	uxth	r2, r2
 8005a44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	18d3      	adds	r3, r2, r3
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	2014      	movs	r0, #20
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	4953      	ldr	r1, [pc, #332]	; (8005ba8 <USB_DeactivateEndpoint+0x370>)
 8005a5a:	400a      	ands	r2, r1
 8005a5c:	801a      	strh	r2, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	18d3      	adds	r3, r2, r3
 8005a68:	183a      	adds	r2, r7, r0
 8005a6a:	8812      	ldrh	r2, [r2, #0]
 8005a6c:	494f      	ldr	r1, [pc, #316]	; (8005bac <USB_DeactivateEndpoint+0x374>)
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	b292      	uxth	r2, r2
 8005a72:	801a      	strh	r2, [r3, #0]
 8005a74:	e08f      	b.n	8005b96 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	18d2      	adds	r2, r2, r3
 8005a80:	212e      	movs	r1, #46	; 0x2e
 8005a82:	187b      	adds	r3, r7, r1
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	801a      	strh	r2, [r3, #0]
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	881a      	ldrh	r2, [r3, #0]
 8005a8c:	2380      	movs	r3, #128	; 0x80
 8005a8e:	01db      	lsls	r3, r3, #7
 8005a90:	4013      	ands	r3, r2
 8005a92:	d016      	beq.n	8005ac2 <USB_DeactivateEndpoint+0x28a>
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	18d3      	adds	r3, r2, r3
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29a      	uxth	r2, r3
 8005aa2:	202c      	movs	r0, #44	; 0x2c
 8005aa4:	183b      	adds	r3, r7, r0
 8005aa6:	493e      	ldr	r1, [pc, #248]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 8005aa8:	400a      	ands	r2, r1
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	18d3      	adds	r3, r2, r3
 8005ab6:	183a      	adds	r2, r7, r0
 8005ab8:	8812      	ldrh	r2, [r2, #0]
 8005aba:	493d      	ldr	r1, [pc, #244]	; (8005bb0 <USB_DeactivateEndpoint+0x378>)
 8005abc:	430a      	orrs	r2, r1
 8005abe:	b292      	uxth	r2, r2
 8005ac0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	18d2      	adds	r2, r2, r3
 8005acc:	212a      	movs	r1, #42	; 0x2a
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	8812      	ldrh	r2, [r2, #0]
 8005ad2:	801a      	strh	r2, [r3, #0]
 8005ad4:	187b      	adds	r3, r7, r1
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	2240      	movs	r2, #64	; 0x40
 8005ada:	4013      	ands	r3, r2
 8005adc:	d016      	beq.n	8005b0c <USB_DeactivateEndpoint+0x2d4>
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	18d3      	adds	r3, r2, r3
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	b29a      	uxth	r2, r3
 8005aec:	2028      	movs	r0, #40	; 0x28
 8005aee:	183b      	adds	r3, r7, r0
 8005af0:	492b      	ldr	r1, [pc, #172]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 8005af2:	400a      	ands	r2, r1
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	18d3      	adds	r3, r2, r3
 8005b00:	183a      	adds	r2, r7, r0
 8005b02:	8812      	ldrh	r2, [r2, #0]
 8005b04:	4927      	ldr	r1, [pc, #156]	; (8005ba4 <USB_DeactivateEndpoint+0x36c>)
 8005b06:	430a      	orrs	r2, r1
 8005b08:	b292      	uxth	r2, r2
 8005b0a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	18d3      	adds	r3, r2, r3
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	2026      	movs	r0, #38	; 0x26
 8005b1c:	183b      	adds	r3, r7, r0
 8005b1e:	4920      	ldr	r1, [pc, #128]	; (8005ba0 <USB_DeactivateEndpoint+0x368>)
 8005b20:	400a      	ands	r2, r1
 8005b22:	801a      	strh	r2, [r3, #0]
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	18d3      	adds	r3, r2, r3
 8005b2e:	183a      	adds	r2, r7, r0
 8005b30:	8812      	ldrh	r2, [r2, #0]
 8005b32:	491f      	ldr	r1, [pc, #124]	; (8005bb0 <USB_DeactivateEndpoint+0x378>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	b292      	uxth	r2, r2
 8005b38:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	18d3      	adds	r3, r2, r3
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	2024      	movs	r0, #36	; 0x24
 8005b4a:	183b      	adds	r3, r7, r0
 8005b4c:	4916      	ldr	r1, [pc, #88]	; (8005ba8 <USB_DeactivateEndpoint+0x370>)
 8005b4e:	400a      	ands	r2, r1
 8005b50:	801a      	strh	r2, [r3, #0]
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	18d3      	adds	r3, r2, r3
 8005b5c:	183a      	adds	r2, r7, r0
 8005b5e:	8812      	ldrh	r2, [r2, #0]
 8005b60:	4912      	ldr	r1, [pc, #72]	; (8005bac <USB_DeactivateEndpoint+0x374>)
 8005b62:	430a      	orrs	r2, r1
 8005b64:	b292      	uxth	r2, r2
 8005b66:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	18d3      	adds	r3, r2, r3
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	2022      	movs	r0, #34	; 0x22
 8005b78:	183b      	adds	r3, r7, r0
 8005b7a:	490e      	ldr	r1, [pc, #56]	; (8005bb4 <USB_DeactivateEndpoint+0x37c>)
 8005b7c:	400a      	ands	r2, r1
 8005b7e:	801a      	strh	r2, [r3, #0]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	18d3      	adds	r3, r2, r3
 8005b8a:	183a      	adds	r2, r7, r0
 8005b8c:	8812      	ldrh	r2, [r2, #0]
 8005b8e:	4907      	ldr	r1, [pc, #28]	; (8005bac <USB_DeactivateEndpoint+0x374>)
 8005b90:	430a      	orrs	r2, r1
 8005b92:	b292      	uxth	r2, r2
 8005b94:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	0018      	movs	r0, r3
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	b00c      	add	sp, #48	; 0x30
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	ffff8f8f 	.word	0xffff8f8f
 8005ba4:	ffff80c0 	.word	0xffff80c0
 8005ba8:	ffff8fbf 	.word	0xffff8fbf
 8005bac:	ffff8080 	.word	0xffff8080
 8005bb0:	ffffc080 	.word	0xffffc080
 8005bb4:	ffffbf8f 	.word	0xffffbf8f

08005bb8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005bb8:	b590      	push	{r4, r7, lr}
 8005bba:	b0c3      	sub	sp, #268	; 0x10c
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	785b      	ldrb	r3, [r3, #1]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d001      	beq.n	8005bce <USB_EPStartXfer+0x16>
 8005bca:	f000 fcef 	bl	80065ac <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	699a      	ldr	r2, [r3, #24]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d905      	bls.n	8005be6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	1d7a      	adds	r2, r7, #5
 8005be0:	32ff      	adds	r2, #255	; 0xff
 8005be2:	6013      	str	r3, [r2, #0]
 8005be4:	e004      	b.n	8005bf0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	1d7a      	adds	r2, r7, #5
 8005bec:	32ff      	adds	r2, #255	; 0xff
 8005bee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	7b1b      	ldrb	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d125      	bne.n	8005c44 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	6959      	ldr	r1, [r3, #20]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	88da      	ldrh	r2, [r3, #6]
 8005c00:	1d7b      	adds	r3, r7, #5
 8005c02:	33ff      	adds	r3, #255	; 0xff
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f001 f9c9 	bl	8006fa0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	613b      	str	r3, [r7, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2250      	movs	r2, #80	; 0x50
 8005c16:	5a9b      	ldrh	r3, [r3, r2]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	001a      	movs	r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	189b      	adds	r3, r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	00da      	lsls	r2, r3, #3
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	18d3      	adds	r3, r2, r3
 8005c2c:	4acc      	ldr	r2, [pc, #816]	; (8005f60 <USB_EPStartXfer+0x3a8>)
 8005c2e:	4694      	mov	ip, r2
 8005c30:	4463      	add	r3, ip
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	1d7b      	adds	r3, r7, #5
 8005c36:	33ff      	adds	r3, #255	; 0xff
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	f000 fc8f 	bl	8006562 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	78db      	ldrb	r3, [r3, #3]
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d000      	beq.n	8005c4e <USB_EPStartXfer+0x96>
 8005c4c:	e33a      	b.n	80062c4 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	6a1a      	ldr	r2, [r3, #32]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d800      	bhi.n	8005c5c <USB_EPStartXfer+0xa4>
 8005c5a:	e2df      	b.n	800621c <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	18d3      	adds	r3, r2, r3
 8005c66:	881b      	ldrh	r3, [r3, #0]
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	2056      	movs	r0, #86	; 0x56
 8005c6c:	183b      	adds	r3, r7, r0
 8005c6e:	49bd      	ldr	r1, [pc, #756]	; (8005f64 <USB_EPStartXfer+0x3ac>)
 8005c70:	400a      	ands	r2, r1
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	18d3      	adds	r3, r2, r3
 8005c7e:	183a      	adds	r2, r7, r0
 8005c80:	8812      	ldrh	r2, [r2, #0]
 8005c82:	49b9      	ldr	r1, [pc, #740]	; (8005f68 <USB_EPStartXfer+0x3b0>)
 8005c84:	430a      	orrs	r2, r1
 8005c86:	b292      	uxth	r2, r2
 8005c88:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	6a1a      	ldr	r2, [r3, #32]
 8005c8e:	1d7b      	adds	r3, r7, #5
 8005c90:	33ff      	adds	r3, #255	; 0xff
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	1ad2      	subs	r2, r2, r3
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	18d3      	adds	r3, r2, r3
 8005ca4:	881b      	ldrh	r3, [r3, #0]
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	001a      	movs	r2, r3
 8005caa:	2340      	movs	r3, #64	; 0x40
 8005cac:	4013      	ands	r3, r2
 8005cae:	d100      	bne.n	8005cb2 <USB_EPStartXfer+0xfa>
 8005cb0:	e162      	b.n	8005f78 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	785b      	ldrb	r3, [r3, #1]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d16a      	bne.n	8005d94 <USB_EPStartXfer+0x1dc>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2250      	movs	r2, #80	; 0x50
 8005cc6:	5a9b      	ldrh	r3, [r3, r2]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	001a      	movs	r2, r3
 8005ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cce:	189b      	adds	r3, r3, r2
 8005cd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	00da      	lsls	r2, r3, #3
 8005cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cda:	18d3      	adds	r3, r2, r3
 8005cdc:	4aa3      	ldr	r2, [pc, #652]	; (8005f6c <USB_EPStartXfer+0x3b4>)
 8005cde:	4694      	mov	ip, r2
 8005ce0:	4463      	add	r3, ip
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ce4:	1d7b      	adds	r3, r7, #5
 8005ce6:	33ff      	adds	r3, #255	; 0xff
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d110      	bne.n	8005d10 <USB_EPStartXfer+0x158>
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	4a9e      	ldr	r2, [pc, #632]	; (8005f70 <USB_EPStartXfer+0x3b8>)
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	801a      	strh	r2, [r3, #0]
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	4a9b      	ldr	r2, [pc, #620]	; (8005f74 <USB_EPStartXfer+0x3bc>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	801a      	strh	r2, [r3, #0]
 8005d0e:	e05c      	b.n	8005dca <USB_EPStartXfer+0x212>
 8005d10:	1d7b      	adds	r3, r7, #5
 8005d12:	33ff      	adds	r3, #255	; 0xff
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b3e      	cmp	r3, #62	; 0x3e
 8005d18:	d81c      	bhi.n	8005d54 <USB_EPStartXfer+0x19c>
 8005d1a:	1d7b      	adds	r3, r7, #5
 8005d1c:	33ff      	adds	r3, #255	; 0xff
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	1c7a      	adds	r2, r7, #1
 8005d24:	32ff      	adds	r2, #255	; 0xff
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	1d7b      	adds	r3, r7, #5
 8005d2a:	33ff      	adds	r3, #255	; 0xff
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	4013      	ands	r3, r2
 8005d32:	d006      	beq.n	8005d42 <USB_EPStartXfer+0x18a>
 8005d34:	1c7b      	adds	r3, r7, #1
 8005d36:	33ff      	adds	r3, #255	; 0xff
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	1c7a      	adds	r2, r7, #1
 8005d3e:	32ff      	adds	r2, #255	; 0xff
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	1c7b      	adds	r3, r7, #1
 8005d44:	33ff      	adds	r3, #255	; 0xff
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	029b      	lsls	r3, r3, #10
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d50:	801a      	strh	r2, [r3, #0]
 8005d52:	e03a      	b.n	8005dca <USB_EPStartXfer+0x212>
 8005d54:	1d7b      	adds	r3, r7, #5
 8005d56:	33ff      	adds	r3, #255	; 0xff
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	1c7a      	adds	r2, r7, #1
 8005d5e:	32ff      	adds	r2, #255	; 0xff
 8005d60:	6013      	str	r3, [r2, #0]
 8005d62:	1d7b      	adds	r3, r7, #5
 8005d64:	33ff      	adds	r3, #255	; 0xff
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	221f      	movs	r2, #31
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d106      	bne.n	8005d7c <USB_EPStartXfer+0x1c4>
 8005d6e:	1c7b      	adds	r3, r7, #1
 8005d70:	33ff      	adds	r3, #255	; 0xff
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	1c7a      	adds	r2, r7, #1
 8005d78:	32ff      	adds	r2, #255	; 0xff
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	1c7b      	adds	r3, r7, #1
 8005d7e:	33ff      	adds	r3, #255	; 0xff
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	029b      	lsls	r3, r3, #10
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	4a7a      	ldr	r2, [pc, #488]	; (8005f74 <USB_EPStartXfer+0x3bc>)
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	b29a      	uxth	r2, r3
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e01a      	b.n	8005dca <USB_EPStartXfer+0x212>
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	785b      	ldrb	r3, [r3, #1]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d116      	bne.n	8005dca <USB_EPStartXfer+0x212>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2250      	movs	r2, #80	; 0x50
 8005da0:	5a9b      	ldrh	r3, [r3, r2]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	001a      	movs	r2, r3
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	189b      	adds	r3, r3, r2
 8005daa:	633b      	str	r3, [r7, #48]	; 0x30
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	00da      	lsls	r2, r3, #3
 8005db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db4:	18d3      	adds	r3, r2, r3
 8005db6:	4a6d      	ldr	r2, [pc, #436]	; (8005f6c <USB_EPStartXfer+0x3b4>)
 8005db8:	4694      	mov	ip, r2
 8005dba:	4463      	add	r3, ip
 8005dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dbe:	1d7b      	adds	r3, r7, #5
 8005dc0:	33ff      	adds	r3, #255	; 0xff
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005dca:	2076      	movs	r0, #118	; 0x76
 8005dcc:	183b      	adds	r3, r7, r0
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	8952      	ldrh	r2, [r2, #10]
 8005dd2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6959      	ldr	r1, [r3, #20]
 8005dd8:	1d7b      	adds	r3, r7, #5
 8005dda:	33ff      	adds	r3, #255	; 0xff
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	b29c      	uxth	r4, r3
 8005de0:	183b      	adds	r3, r7, r0
 8005de2:	881a      	ldrh	r2, [r3, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	0023      	movs	r3, r4
 8005de8:	f001 f8da 	bl	8006fa0 <USB_WritePMA>
            ep->xfer_buff += len;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	1d7b      	adds	r3, r7, #5
 8005df2:	33ff      	adds	r3, #255	; 0xff
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	18d2      	adds	r2, r2, r3
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6a1a      	ldr	r2, [r3, #32]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d908      	bls.n	8005e1a <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6a1a      	ldr	r2, [r3, #32]
 8005e0c:	1d7b      	adds	r3, r7, #5
 8005e0e:	33ff      	adds	r3, #255	; 0xff
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	1ad2      	subs	r2, r2, r3
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	621a      	str	r2, [r3, #32]
 8005e18:	e007      	b.n	8005e2a <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	1d7a      	adds	r2, r7, #5
 8005e20:	32ff      	adds	r2, #255	; 0xff
 8005e22:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2200      	movs	r2, #0
 8005e28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d166      	bne.n	8005f00 <USB_EPStartXfer+0x348>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	61bb      	str	r3, [r7, #24]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2250      	movs	r2, #80	; 0x50
 8005e3a:	5a9b      	ldrh	r3, [r3, r2]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	001a      	movs	r2, r3
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	189b      	adds	r3, r3, r2
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	00da      	lsls	r2, r3, #3
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	18d3      	adds	r3, r2, r3
 8005e50:	4a43      	ldr	r2, [pc, #268]	; (8005f60 <USB_EPStartXfer+0x3a8>)
 8005e52:	4694      	mov	ip, r2
 8005e54:	4463      	add	r3, ip
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	1d7b      	adds	r3, r7, #5
 8005e5a:	33ff      	adds	r3, #255	; 0xff
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d110      	bne.n	8005e84 <USB_EPStartXfer+0x2cc>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	4a41      	ldr	r2, [pc, #260]	; (8005f70 <USB_EPStartXfer+0x3b8>)
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	801a      	strh	r2, [r3, #0]
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	4a3e      	ldr	r2, [pc, #248]	; (8005f74 <USB_EPStartXfer+0x3bc>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	801a      	strh	r2, [r3, #0]
 8005e82:	e05a      	b.n	8005f3a <USB_EPStartXfer+0x382>
 8005e84:	1d7b      	adds	r3, r7, #5
 8005e86:	33ff      	adds	r3, #255	; 0xff
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e8c:	d81a      	bhi.n	8005ec4 <USB_EPStartXfer+0x30c>
 8005e8e:	1d7b      	adds	r3, r7, #5
 8005e90:	33ff      	adds	r3, #255	; 0xff
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	085b      	lsrs	r3, r3, #1
 8005e96:	21fc      	movs	r1, #252	; 0xfc
 8005e98:	187a      	adds	r2, r7, r1
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	1d7b      	adds	r3, r7, #5
 8005e9e:	33ff      	adds	r3, #255	; 0xff
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	d004      	beq.n	8005eb2 <USB_EPStartXfer+0x2fa>
 8005ea8:	187b      	adds	r3, r7, r1
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3301      	adds	r3, #1
 8005eae:	187a      	adds	r2, r7, r1
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	23fc      	movs	r3, #252	; 0xfc
 8005eb4:	18fb      	adds	r3, r7, r3
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	029b      	lsls	r3, r3, #10
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	801a      	strh	r2, [r3, #0]
 8005ec2:	e03a      	b.n	8005f3a <USB_EPStartXfer+0x382>
 8005ec4:	1d7b      	adds	r3, r7, #5
 8005ec6:	33ff      	adds	r3, #255	; 0xff
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	095b      	lsrs	r3, r3, #5
 8005ecc:	21fc      	movs	r1, #252	; 0xfc
 8005ece:	187a      	adds	r2, r7, r1
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	1d7b      	adds	r3, r7, #5
 8005ed4:	33ff      	adds	r3, #255	; 0xff
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	221f      	movs	r2, #31
 8005eda:	4013      	ands	r3, r2
 8005edc:	d104      	bne.n	8005ee8 <USB_EPStartXfer+0x330>
 8005ede:	187b      	adds	r3, r7, r1
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	187a      	adds	r2, r7, r1
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	23fc      	movs	r3, #252	; 0xfc
 8005eea:	18fb      	adds	r3, r7, r3
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	029b      	lsls	r3, r3, #10
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <USB_EPStartXfer+0x3bc>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	e01c      	b.n	8005f3a <USB_EPStartXfer+0x382>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	785b      	ldrb	r3, [r3, #1]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d118      	bne.n	8005f3a <USB_EPStartXfer+0x382>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	623b      	str	r3, [r7, #32]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2250      	movs	r2, #80	; 0x50
 8005f10:	5a9b      	ldrh	r3, [r3, r2]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	001a      	movs	r2, r3
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	189b      	adds	r3, r3, r2
 8005f1a:	623b      	str	r3, [r7, #32]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	00da      	lsls	r2, r3, #3
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	18d3      	adds	r3, r2, r3
 8005f26:	4a0e      	ldr	r2, [pc, #56]	; (8005f60 <USB_EPStartXfer+0x3a8>)
 8005f28:	4694      	mov	ip, r2
 8005f2a:	4463      	add	r3, ip
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	1d7b      	adds	r3, r7, #5
 8005f30:	33ff      	adds	r3, #255	; 0xff
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f3a:	2076      	movs	r0, #118	; 0x76
 8005f3c:	183b      	adds	r3, r7, r0
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	8912      	ldrh	r2, [r2, #8]
 8005f42:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6959      	ldr	r1, [r3, #20]
 8005f48:	1d7b      	adds	r3, r7, #5
 8005f4a:	33ff      	adds	r3, #255	; 0xff
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	b29c      	uxth	r4, r3
 8005f50:	183b      	adds	r3, r7, r0
 8005f52:	881a      	ldrh	r2, [r3, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	0023      	movs	r3, r4
 8005f58:	f001 f822 	bl	8006fa0 <USB_WritePMA>
 8005f5c:	e301      	b.n	8006562 <USB_EPStartXfer+0x9aa>
 8005f5e:	46c0      	nop			; (mov r8, r8)
 8005f60:	00000402 	.word	0x00000402
 8005f64:	ffff8f8f 	.word	0xffff8f8f
 8005f68:	ffff8180 	.word	0xffff8180
 8005f6c:	00000406 	.word	0x00000406
 8005f70:	ffff83ff 	.word	0xffff83ff
 8005f74:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	785b      	ldrb	r3, [r3, #1]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d166      	bne.n	800604e <USB_EPStartXfer+0x496>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2250      	movs	r2, #80	; 0x50
 8005f88:	5a9b      	ldrh	r3, [r3, r2]
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	001a      	movs	r2, r3
 8005f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f90:	189b      	adds	r3, r3, r2
 8005f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	00da      	lsls	r2, r3, #3
 8005f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9c:	18d3      	adds	r3, r2, r3
 8005f9e:	4ac3      	ldr	r2, [pc, #780]	; (80062ac <USB_EPStartXfer+0x6f4>)
 8005fa0:	4694      	mov	ip, r2
 8005fa2:	4463      	add	r3, ip
 8005fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa6:	1d7b      	adds	r3, r7, #5
 8005fa8:	33ff      	adds	r3, #255	; 0xff
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d110      	bne.n	8005fd2 <USB_EPStartXfer+0x41a>
 8005fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4abe      	ldr	r2, [pc, #760]	; (80062b0 <USB_EPStartXfer+0x6f8>)
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fbe:	801a      	strh	r2, [r3, #0]
 8005fc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fc2:	881b      	ldrh	r3, [r3, #0]
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	4abb      	ldr	r2, [pc, #748]	; (80062b4 <USB_EPStartXfer+0x6fc>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fce:	801a      	strh	r2, [r3, #0]
 8005fd0:	e05a      	b.n	8006088 <USB_EPStartXfer+0x4d0>
 8005fd2:	1d7b      	adds	r3, r7, #5
 8005fd4:	33ff      	adds	r3, #255	; 0xff
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b3e      	cmp	r3, #62	; 0x3e
 8005fda:	d81a      	bhi.n	8006012 <USB_EPStartXfer+0x45a>
 8005fdc:	1d7b      	adds	r3, r7, #5
 8005fde:	33ff      	adds	r3, #255	; 0xff
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	085b      	lsrs	r3, r3, #1
 8005fe4:	21f8      	movs	r1, #248	; 0xf8
 8005fe6:	187a      	adds	r2, r7, r1
 8005fe8:	6013      	str	r3, [r2, #0]
 8005fea:	1d7b      	adds	r3, r7, #5
 8005fec:	33ff      	adds	r3, #255	; 0xff
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d004      	beq.n	8006000 <USB_EPStartXfer+0x448>
 8005ff6:	187b      	adds	r3, r7, r1
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	187a      	adds	r2, r7, r1
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	23f8      	movs	r3, #248	; 0xf8
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	029b      	lsls	r3, r3, #10
 800600a:	b29a      	uxth	r2, r3
 800600c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800600e:	801a      	strh	r2, [r3, #0]
 8006010:	e03a      	b.n	8006088 <USB_EPStartXfer+0x4d0>
 8006012:	1d7b      	adds	r3, r7, #5
 8006014:	33ff      	adds	r3, #255	; 0xff
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	095b      	lsrs	r3, r3, #5
 800601a:	21f8      	movs	r1, #248	; 0xf8
 800601c:	187a      	adds	r2, r7, r1
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	1d7b      	adds	r3, r7, #5
 8006022:	33ff      	adds	r3, #255	; 0xff
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	221f      	movs	r2, #31
 8006028:	4013      	ands	r3, r2
 800602a:	d104      	bne.n	8006036 <USB_EPStartXfer+0x47e>
 800602c:	187b      	adds	r3, r7, r1
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3b01      	subs	r3, #1
 8006032:	187a      	adds	r2, r7, r1
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	23f8      	movs	r3, #248	; 0xf8
 8006038:	18fb      	adds	r3, r7, r3
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	029b      	lsls	r3, r3, #10
 8006040:	b29b      	uxth	r3, r3
 8006042:	4a9c      	ldr	r2, [pc, #624]	; (80062b4 <USB_EPStartXfer+0x6fc>)
 8006044:	4313      	orrs	r3, r2
 8006046:	b29a      	uxth	r2, r3
 8006048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800604a:	801a      	strh	r2, [r3, #0]
 800604c:	e01c      	b.n	8006088 <USB_EPStartXfer+0x4d0>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	785b      	ldrb	r3, [r3, #1]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d118      	bne.n	8006088 <USB_EPStartXfer+0x4d0>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	653b      	str	r3, [r7, #80]	; 0x50
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2250      	movs	r2, #80	; 0x50
 800605e:	5a9b      	ldrh	r3, [r3, r2]
 8006060:	b29b      	uxth	r3, r3
 8006062:	001a      	movs	r2, r3
 8006064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006066:	189b      	adds	r3, r3, r2
 8006068:	653b      	str	r3, [r7, #80]	; 0x50
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	00da      	lsls	r2, r3, #3
 8006070:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006072:	18d3      	adds	r3, r2, r3
 8006074:	4a8d      	ldr	r2, [pc, #564]	; (80062ac <USB_EPStartXfer+0x6f4>)
 8006076:	4694      	mov	ip, r2
 8006078:	4463      	add	r3, ip
 800607a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800607c:	1d7b      	adds	r3, r7, #5
 800607e:	33ff      	adds	r3, #255	; 0xff
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	b29a      	uxth	r2, r3
 8006084:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006086:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006088:	2076      	movs	r0, #118	; 0x76
 800608a:	183b      	adds	r3, r7, r0
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	8912      	ldrh	r2, [r2, #8]
 8006090:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6959      	ldr	r1, [r3, #20]
 8006096:	1d7b      	adds	r3, r7, #5
 8006098:	33ff      	adds	r3, #255	; 0xff
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	b29c      	uxth	r4, r3
 800609e:	183b      	adds	r3, r7, r0
 80060a0:	881a      	ldrh	r2, [r3, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	0023      	movs	r3, r4
 80060a6:	f000 ff7b 	bl	8006fa0 <USB_WritePMA>
            ep->xfer_buff += len;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695a      	ldr	r2, [r3, #20]
 80060ae:	1d7b      	adds	r3, r7, #5
 80060b0:	33ff      	adds	r3, #255	; 0xff
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	18d2      	adds	r2, r2, r3
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d908      	bls.n	80060d8 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	1d7b      	adds	r3, r7, #5
 80060cc:	33ff      	adds	r3, #255	; 0xff
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	1ad2      	subs	r2, r2, r3
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	621a      	str	r2, [r3, #32]
 80060d6:	e007      	b.n	80060e8 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	1d7a      	adds	r2, r7, #5
 80060de:	32ff      	adds	r2, #255	; 0xff
 80060e0:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2200      	movs	r2, #0
 80060e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	643b      	str	r3, [r7, #64]	; 0x40
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	785b      	ldrb	r3, [r3, #1]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d166      	bne.n	80061c2 <USB_EPStartXfer+0x60a>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2250      	movs	r2, #80	; 0x50
 80060fc:	5a9b      	ldrh	r3, [r3, r2]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	001a      	movs	r2, r3
 8006102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006104:	189b      	adds	r3, r3, r2
 8006106:	63bb      	str	r3, [r7, #56]	; 0x38
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	00da      	lsls	r2, r3, #3
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	18d3      	adds	r3, r2, r3
 8006112:	4a69      	ldr	r2, [pc, #420]	; (80062b8 <USB_EPStartXfer+0x700>)
 8006114:	4694      	mov	ip, r2
 8006116:	4463      	add	r3, ip
 8006118:	637b      	str	r3, [r7, #52]	; 0x34
 800611a:	1d7b      	adds	r3, r7, #5
 800611c:	33ff      	adds	r3, #255	; 0xff
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d110      	bne.n	8006146 <USB_EPStartXfer+0x58e>
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	4a61      	ldr	r2, [pc, #388]	; (80062b0 <USB_EPStartXfer+0x6f8>)
 800612c:	4013      	ands	r3, r2
 800612e:	b29a      	uxth	r2, r3
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	801a      	strh	r2, [r3, #0]
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	b29b      	uxth	r3, r3
 800613a:	4a5e      	ldr	r2, [pc, #376]	; (80062b4 <USB_EPStartXfer+0x6fc>)
 800613c:	4313      	orrs	r3, r2
 800613e:	b29a      	uxth	r2, r3
 8006140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006142:	801a      	strh	r2, [r3, #0]
 8006144:	e058      	b.n	80061f8 <USB_EPStartXfer+0x640>
 8006146:	1d7b      	adds	r3, r7, #5
 8006148:	33ff      	adds	r3, #255	; 0xff
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b3e      	cmp	r3, #62	; 0x3e
 800614e:	d81a      	bhi.n	8006186 <USB_EPStartXfer+0x5ce>
 8006150:	1d7b      	adds	r3, r7, #5
 8006152:	33ff      	adds	r3, #255	; 0xff
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	21f4      	movs	r1, #244	; 0xf4
 800615a:	187a      	adds	r2, r7, r1
 800615c:	6013      	str	r3, [r2, #0]
 800615e:	1d7b      	adds	r3, r7, #5
 8006160:	33ff      	adds	r3, #255	; 0xff
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2201      	movs	r2, #1
 8006166:	4013      	ands	r3, r2
 8006168:	d004      	beq.n	8006174 <USB_EPStartXfer+0x5bc>
 800616a:	187b      	adds	r3, r7, r1
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3301      	adds	r3, #1
 8006170:	187a      	adds	r2, r7, r1
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	23f4      	movs	r3, #244	; 0xf4
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29a      	uxth	r2, r3
 8006180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	e038      	b.n	80061f8 <USB_EPStartXfer+0x640>
 8006186:	1d7b      	adds	r3, r7, #5
 8006188:	33ff      	adds	r3, #255	; 0xff
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	095b      	lsrs	r3, r3, #5
 800618e:	21f4      	movs	r1, #244	; 0xf4
 8006190:	187a      	adds	r2, r7, r1
 8006192:	6013      	str	r3, [r2, #0]
 8006194:	1d7b      	adds	r3, r7, #5
 8006196:	33ff      	adds	r3, #255	; 0xff
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	221f      	movs	r2, #31
 800619c:	4013      	ands	r3, r2
 800619e:	d104      	bne.n	80061aa <USB_EPStartXfer+0x5f2>
 80061a0:	187b      	adds	r3, r7, r1
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	187a      	adds	r2, r7, r1
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	23f4      	movs	r3, #244	; 0xf4
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	029b      	lsls	r3, r3, #10
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	4a3f      	ldr	r2, [pc, #252]	; (80062b4 <USB_EPStartXfer+0x6fc>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	801a      	strh	r2, [r3, #0]
 80061c0:	e01a      	b.n	80061f8 <USB_EPStartXfer+0x640>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d116      	bne.n	80061f8 <USB_EPStartXfer+0x640>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2250      	movs	r2, #80	; 0x50
 80061ce:	5a9b      	ldrh	r3, [r3, r2]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	001a      	movs	r2, r3
 80061d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	643b      	str	r3, [r7, #64]	; 0x40
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	00da      	lsls	r2, r3, #3
 80061e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061e2:	18d3      	adds	r3, r2, r3
 80061e4:	4a34      	ldr	r2, [pc, #208]	; (80062b8 <USB_EPStartXfer+0x700>)
 80061e6:	4694      	mov	ip, r2
 80061e8:	4463      	add	r3, ip
 80061ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061ec:	1d7b      	adds	r3, r7, #5
 80061ee:	33ff      	adds	r3, #255	; 0xff
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80061f8:	2076      	movs	r0, #118	; 0x76
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	8952      	ldrh	r2, [r2, #10]
 8006200:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6959      	ldr	r1, [r3, #20]
 8006206:	1d7b      	adds	r3, r7, #5
 8006208:	33ff      	adds	r3, #255	; 0xff
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	b29c      	uxth	r4, r3
 800620e:	183b      	adds	r3, r7, r0
 8006210:	881a      	ldrh	r2, [r3, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	0023      	movs	r3, r4
 8006216:	f000 fec3 	bl	8006fa0 <USB_WritePMA>
 800621a:	e1a2      	b.n	8006562 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	1d7a      	adds	r2, r7, #5
 8006222:	32ff      	adds	r2, #255	; 0xff
 8006224:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	18d3      	adds	r3, r2, r3
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29a      	uxth	r2, r3
 8006234:	2062      	movs	r0, #98	; 0x62
 8006236:	183b      	adds	r3, r7, r0
 8006238:	4920      	ldr	r1, [pc, #128]	; (80062bc <USB_EPStartXfer+0x704>)
 800623a:	400a      	ands	r2, r1
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	18d3      	adds	r3, r2, r3
 8006248:	183a      	adds	r2, r7, r0
 800624a:	8812      	ldrh	r2, [r2, #0]
 800624c:	491c      	ldr	r1, [pc, #112]	; (80062c0 <USB_EPStartXfer+0x708>)
 800624e:	430a      	orrs	r2, r1
 8006250:	b292      	uxth	r2, r2
 8006252:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2250      	movs	r2, #80	; 0x50
 800625c:	5a9b      	ldrh	r3, [r3, r2]
 800625e:	b29b      	uxth	r3, r3
 8006260:	001a      	movs	r2, r3
 8006262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006264:	189b      	adds	r3, r3, r2
 8006266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	00da      	lsls	r2, r3, #3
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	18d3      	adds	r3, r2, r3
 8006272:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <USB_EPStartXfer+0x6f4>)
 8006274:	4694      	mov	ip, r2
 8006276:	4463      	add	r3, ip
 8006278:	65bb      	str	r3, [r7, #88]	; 0x58
 800627a:	1d7b      	adds	r3, r7, #5
 800627c:	33ff      	adds	r3, #255	; 0xff
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	b29a      	uxth	r2, r3
 8006282:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006284:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006286:	2076      	movs	r0, #118	; 0x76
 8006288:	183b      	adds	r3, r7, r0
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	8912      	ldrh	r2, [r2, #8]
 800628e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	6959      	ldr	r1, [r3, #20]
 8006294:	1d7b      	adds	r3, r7, #5
 8006296:	33ff      	adds	r3, #255	; 0xff
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	b29c      	uxth	r4, r3
 800629c:	183b      	adds	r3, r7, r0
 800629e:	881a      	ldrh	r2, [r3, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	0023      	movs	r3, r4
 80062a4:	f000 fe7c 	bl	8006fa0 <USB_WritePMA>
 80062a8:	e15b      	b.n	8006562 <USB_EPStartXfer+0x9aa>
 80062aa:	46c0      	nop			; (mov r8, r8)
 80062ac:	00000402 	.word	0x00000402
 80062b0:	ffff83ff 	.word	0xffff83ff
 80062b4:	ffff8000 	.word	0xffff8000
 80062b8:	00000406 	.word	0x00000406
 80062bc:	ffff8e8f 	.word	0xffff8e8f
 80062c0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6a1a      	ldr	r2, [r3, #32]
 80062c8:	1d7b      	adds	r3, r7, #5
 80062ca:	33ff      	adds	r3, #255	; 0xff
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	1ad2      	subs	r2, r2, r3
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	18d3      	adds	r3, r2, r3
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	001a      	movs	r2, r3
 80062e4:	2340      	movs	r3, #64	; 0x40
 80062e6:	4013      	ands	r3, r2
 80062e8:	d100      	bne.n	80062ec <USB_EPStartXfer+0x734>
 80062ea:	e099      	b.n	8006420 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	673b      	str	r3, [r7, #112]	; 0x70
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	785b      	ldrb	r3, [r3, #1]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d166      	bne.n	80063c6 <USB_EPStartXfer+0x80e>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2250      	movs	r2, #80	; 0x50
 8006300:	5a9b      	ldrh	r3, [r3, r2]
 8006302:	b29b      	uxth	r3, r3
 8006304:	001a      	movs	r2, r3
 8006306:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006308:	189b      	adds	r3, r3, r2
 800630a:	66bb      	str	r3, [r7, #104]	; 0x68
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	00da      	lsls	r2, r3, #3
 8006312:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006314:	18d3      	adds	r3, r2, r3
 8006316:	4ad0      	ldr	r2, [pc, #832]	; (8006658 <USB_EPStartXfer+0xaa0>)
 8006318:	4694      	mov	ip, r2
 800631a:	4463      	add	r3, ip
 800631c:	667b      	str	r3, [r7, #100]	; 0x64
 800631e:	1d7b      	adds	r3, r7, #5
 8006320:	33ff      	adds	r3, #255	; 0xff
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d110      	bne.n	800634a <USB_EPStartXfer+0x792>
 8006328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	4acb      	ldr	r2, [pc, #812]	; (800665c <USB_EPStartXfer+0xaa4>)
 8006330:	4013      	ands	r3, r2
 8006332:	b29a      	uxth	r2, r3
 8006334:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006336:	801a      	strh	r2, [r3, #0]
 8006338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800633a:	881b      	ldrh	r3, [r3, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	4ac8      	ldr	r2, [pc, #800]	; (8006660 <USB_EPStartXfer+0xaa8>)
 8006340:	4313      	orrs	r3, r2
 8006342:	b29a      	uxth	r2, r3
 8006344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	e058      	b.n	80063fc <USB_EPStartXfer+0x844>
 800634a:	1d7b      	adds	r3, r7, #5
 800634c:	33ff      	adds	r3, #255	; 0xff
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b3e      	cmp	r3, #62	; 0x3e
 8006352:	d81a      	bhi.n	800638a <USB_EPStartXfer+0x7d2>
 8006354:	1d7b      	adds	r3, r7, #5
 8006356:	33ff      	adds	r3, #255	; 0xff
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	085b      	lsrs	r3, r3, #1
 800635c:	21f0      	movs	r1, #240	; 0xf0
 800635e:	187a      	adds	r2, r7, r1
 8006360:	6013      	str	r3, [r2, #0]
 8006362:	1d7b      	adds	r3, r7, #5
 8006364:	33ff      	adds	r3, #255	; 0xff
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2201      	movs	r2, #1
 800636a:	4013      	ands	r3, r2
 800636c:	d004      	beq.n	8006378 <USB_EPStartXfer+0x7c0>
 800636e:	187b      	adds	r3, r7, r1
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	187a      	adds	r2, r7, r1
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	23f0      	movs	r3, #240	; 0xf0
 800637a:	18fb      	adds	r3, r7, r3
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	b29a      	uxth	r2, r3
 8006384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	e038      	b.n	80063fc <USB_EPStartXfer+0x844>
 800638a:	1d7b      	adds	r3, r7, #5
 800638c:	33ff      	adds	r3, #255	; 0xff
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	21f0      	movs	r1, #240	; 0xf0
 8006394:	187a      	adds	r2, r7, r1
 8006396:	6013      	str	r3, [r2, #0]
 8006398:	1d7b      	adds	r3, r7, #5
 800639a:	33ff      	adds	r3, #255	; 0xff
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	221f      	movs	r2, #31
 80063a0:	4013      	ands	r3, r2
 80063a2:	d104      	bne.n	80063ae <USB_EPStartXfer+0x7f6>
 80063a4:	187b      	adds	r3, r7, r1
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3b01      	subs	r3, #1
 80063aa:	187a      	adds	r2, r7, r1
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	23f0      	movs	r3, #240	; 0xf0
 80063b0:	18fb      	adds	r3, r7, r3
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	029b      	lsls	r3, r3, #10
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	4aa9      	ldr	r2, [pc, #676]	; (8006660 <USB_EPStartXfer+0xaa8>)
 80063bc:	4313      	orrs	r3, r2
 80063be:	b29a      	uxth	r2, r3
 80063c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	e01a      	b.n	80063fc <USB_EPStartXfer+0x844>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	785b      	ldrb	r3, [r3, #1]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d116      	bne.n	80063fc <USB_EPStartXfer+0x844>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2250      	movs	r2, #80	; 0x50
 80063d2:	5a9b      	ldrh	r3, [r3, r2]
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	001a      	movs	r2, r3
 80063d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063da:	189b      	adds	r3, r3, r2
 80063dc:	673b      	str	r3, [r7, #112]	; 0x70
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	00da      	lsls	r2, r3, #3
 80063e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063e6:	18d3      	adds	r3, r2, r3
 80063e8:	4a9b      	ldr	r2, [pc, #620]	; (8006658 <USB_EPStartXfer+0xaa0>)
 80063ea:	4694      	mov	ip, r2
 80063ec:	4463      	add	r3, ip
 80063ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063f0:	1d7b      	adds	r3, r7, #5
 80063f2:	33ff      	adds	r3, #255	; 0xff
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063fa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80063fc:	2076      	movs	r0, #118	; 0x76
 80063fe:	183b      	adds	r3, r7, r0
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	8952      	ldrh	r2, [r2, #10]
 8006404:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	6959      	ldr	r1, [r3, #20]
 800640a:	1d7b      	adds	r3, r7, #5
 800640c:	33ff      	adds	r3, #255	; 0xff
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	b29c      	uxth	r4, r3
 8006412:	183b      	adds	r3, r7, r0
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	0023      	movs	r3, r4
 800641a:	f000 fdc1 	bl	8006fa0 <USB_WritePMA>
 800641e:	e0a0      	b.n	8006562 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d166      	bne.n	80064f6 <USB_EPStartXfer+0x93e>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2250      	movs	r2, #80	; 0x50
 8006430:	5a9b      	ldrh	r3, [r3, r2]
 8006432:	b29b      	uxth	r3, r3
 8006434:	001a      	movs	r2, r3
 8006436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006438:	189b      	adds	r3, r3, r2
 800643a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	00da      	lsls	r2, r3, #3
 8006442:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006444:	18d3      	adds	r3, r2, r3
 8006446:	4a87      	ldr	r2, [pc, #540]	; (8006664 <USB_EPStartXfer+0xaac>)
 8006448:	4694      	mov	ip, r2
 800644a:	4463      	add	r3, ip
 800644c:	67bb      	str	r3, [r7, #120]	; 0x78
 800644e:	1d7b      	adds	r3, r7, #5
 8006450:	33ff      	adds	r3, #255	; 0xff
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d110      	bne.n	800647a <USB_EPStartXfer+0x8c2>
 8006458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	4a7f      	ldr	r2, [pc, #508]	; (800665c <USB_EPStartXfer+0xaa4>)
 8006460:	4013      	ands	r3, r2
 8006462:	b29a      	uxth	r2, r3
 8006464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006466:	801a      	strh	r2, [r3, #0]
 8006468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	b29b      	uxth	r3, r3
 800646e:	4a7c      	ldr	r2, [pc, #496]	; (8006660 <USB_EPStartXfer+0xaa8>)
 8006470:	4313      	orrs	r3, r2
 8006472:	b29a      	uxth	r2, r3
 8006474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006476:	801a      	strh	r2, [r3, #0]
 8006478:	e062      	b.n	8006540 <USB_EPStartXfer+0x988>
 800647a:	1d7b      	adds	r3, r7, #5
 800647c:	33ff      	adds	r3, #255	; 0xff
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b3e      	cmp	r3, #62	; 0x3e
 8006482:	d81a      	bhi.n	80064ba <USB_EPStartXfer+0x902>
 8006484:	1d7b      	adds	r3, r7, #5
 8006486:	33ff      	adds	r3, #255	; 0xff
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	085b      	lsrs	r3, r3, #1
 800648c:	21ec      	movs	r1, #236	; 0xec
 800648e:	187a      	adds	r2, r7, r1
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	1d7b      	adds	r3, r7, #5
 8006494:	33ff      	adds	r3, #255	; 0xff
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2201      	movs	r2, #1
 800649a:	4013      	ands	r3, r2
 800649c:	d004      	beq.n	80064a8 <USB_EPStartXfer+0x8f0>
 800649e:	187b      	adds	r3, r7, r1
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3301      	adds	r3, #1
 80064a4:	187a      	adds	r2, r7, r1
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	23ec      	movs	r3, #236	; 0xec
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064b6:	801a      	strh	r2, [r3, #0]
 80064b8:	e042      	b.n	8006540 <USB_EPStartXfer+0x988>
 80064ba:	1d7b      	adds	r3, r7, #5
 80064bc:	33ff      	adds	r3, #255	; 0xff
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	21ec      	movs	r1, #236	; 0xec
 80064c4:	187a      	adds	r2, r7, r1
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	1d7b      	adds	r3, r7, #5
 80064ca:	33ff      	adds	r3, #255	; 0xff
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	221f      	movs	r2, #31
 80064d0:	4013      	ands	r3, r2
 80064d2:	d104      	bne.n	80064de <USB_EPStartXfer+0x926>
 80064d4:	187b      	adds	r3, r7, r1
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3b01      	subs	r3, #1
 80064da:	187a      	adds	r2, r7, r1
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	23ec      	movs	r3, #236	; 0xec
 80064e0:	18fb      	adds	r3, r7, r3
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	029b      	lsls	r3, r3, #10
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	4a5d      	ldr	r2, [pc, #372]	; (8006660 <USB_EPStartXfer+0xaa8>)
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b29a      	uxth	r2, r3
 80064f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064f2:	801a      	strh	r2, [r3, #0]
 80064f4:	e024      	b.n	8006540 <USB_EPStartXfer+0x988>
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d120      	bne.n	8006540 <USB_EPStartXfer+0x988>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2184      	movs	r1, #132	; 0x84
 8006502:	187a      	adds	r2, r7, r1
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2250      	movs	r2, #80	; 0x50
 800650a:	5a9b      	ldrh	r3, [r3, r2]
 800650c:	b29b      	uxth	r3, r3
 800650e:	001a      	movs	r2, r3
 8006510:	187b      	adds	r3, r7, r1
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	189b      	adds	r3, r3, r2
 8006516:	187a      	adds	r2, r7, r1
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	00da      	lsls	r2, r3, #3
 8006520:	187b      	adds	r3, r7, r1
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	18d3      	adds	r3, r2, r3
 8006526:	4a4f      	ldr	r2, [pc, #316]	; (8006664 <USB_EPStartXfer+0xaac>)
 8006528:	4694      	mov	ip, r2
 800652a:	4463      	add	r3, ip
 800652c:	2180      	movs	r1, #128	; 0x80
 800652e:	187a      	adds	r2, r7, r1
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	1d7b      	adds	r3, r7, #5
 8006534:	33ff      	adds	r3, #255	; 0xff
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	b29a      	uxth	r2, r3
 800653a:	187b      	adds	r3, r7, r1
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006540:	2076      	movs	r0, #118	; 0x76
 8006542:	183b      	adds	r3, r7, r0
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	8912      	ldrh	r2, [r2, #8]
 8006548:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	6959      	ldr	r1, [r3, #20]
 800654e:	1d7b      	adds	r3, r7, #5
 8006550:	33ff      	adds	r3, #255	; 0xff
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	b29c      	uxth	r4, r3
 8006556:	183b      	adds	r3, r7, r0
 8006558:	881a      	ldrh	r2, [r3, #0]
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	0023      	movs	r3, r4
 800655e:	f000 fd1f 	bl	8006fa0 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	18d3      	adds	r3, r2, r3
 800656c:	881b      	ldrh	r3, [r3, #0]
 800656e:	b29a      	uxth	r2, r3
 8006570:	200a      	movs	r0, #10
 8006572:	183b      	adds	r3, r7, r0
 8006574:	493c      	ldr	r1, [pc, #240]	; (8006668 <USB_EPStartXfer+0xab0>)
 8006576:	400a      	ands	r2, r1
 8006578:	801a      	strh	r2, [r3, #0]
 800657a:	183b      	adds	r3, r7, r0
 800657c:	183a      	adds	r2, r7, r0
 800657e:	8812      	ldrh	r2, [r2, #0]
 8006580:	2110      	movs	r1, #16
 8006582:	404a      	eors	r2, r1
 8006584:	801a      	strh	r2, [r3, #0]
 8006586:	183b      	adds	r3, r7, r0
 8006588:	183a      	adds	r2, r7, r0
 800658a:	8812      	ldrh	r2, [r2, #0]
 800658c:	2120      	movs	r1, #32
 800658e:	404a      	eors	r2, r1
 8006590:	801a      	strh	r2, [r3, #0]
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	18d3      	adds	r3, r2, r3
 800659c:	183a      	adds	r2, r7, r0
 800659e:	8812      	ldrh	r2, [r2, #0]
 80065a0:	4932      	ldr	r1, [pc, #200]	; (800666c <USB_EPStartXfer+0xab4>)
 80065a2:	430a      	orrs	r2, r1
 80065a4:	b292      	uxth	r2, r2
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	f000 fbaf 	bl	8006d0a <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	7b1b      	ldrb	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d000      	beq.n	80065b6 <USB_EPStartXfer+0x9fe>
 80065b4:	e09e      	b.n	80066f4 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d90d      	bls.n	80065de <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	1d7a      	adds	r2, r7, #5
 80065c8:	32ff      	adds	r2, #255	; 0xff
 80065ca:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	699a      	ldr	r2, [r3, #24]
 80065d0:	1d7b      	adds	r3, r7, #5
 80065d2:	33ff      	adds	r3, #255	; 0xff
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	1ad2      	subs	r2, r2, r3
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	619a      	str	r2, [r3, #24]
 80065dc:	e007      	b.n	80065ee <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	1d7a      	adds	r2, r7, #5
 80065e4:	32ff      	adds	r2, #255	; 0xff
 80065e6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	2200      	movs	r2, #0
 80065ec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2190      	movs	r1, #144	; 0x90
 80065f2:	187a      	adds	r2, r7, r1
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2250      	movs	r2, #80	; 0x50
 80065fa:	5a9b      	ldrh	r3, [r3, r2]
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	001a      	movs	r2, r3
 8006600:	187b      	adds	r3, r7, r1
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	189b      	adds	r3, r3, r2
 8006606:	187a      	adds	r2, r7, r1
 8006608:	6013      	str	r3, [r2, #0]
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	00da      	lsls	r2, r3, #3
 8006610:	187b      	adds	r3, r7, r1
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	18d3      	adds	r3, r2, r3
 8006616:	4a10      	ldr	r2, [pc, #64]	; (8006658 <USB_EPStartXfer+0xaa0>)
 8006618:	4694      	mov	ip, r2
 800661a:	4463      	add	r3, ip
 800661c:	218c      	movs	r1, #140	; 0x8c
 800661e:	187a      	adds	r2, r7, r1
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	1d7b      	adds	r3, r7, #5
 8006624:	33ff      	adds	r3, #255	; 0xff
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d121      	bne.n	8006670 <USB_EPStartXfer+0xab8>
 800662c:	187b      	adds	r3, r7, r1
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	b29b      	uxth	r3, r3
 8006634:	4a09      	ldr	r2, [pc, #36]	; (800665c <USB_EPStartXfer+0xaa4>)
 8006636:	4013      	ands	r3, r2
 8006638:	b29a      	uxth	r2, r3
 800663a:	187b      	adds	r3, r7, r1
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	801a      	strh	r2, [r3, #0]
 8006640:	187b      	adds	r3, r7, r1
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	4a05      	ldr	r2, [pc, #20]	; (8006660 <USB_EPStartXfer+0xaa8>)
 800664a:	4313      	orrs	r3, r2
 800664c:	b29a      	uxth	r2, r3
 800664e:	187b      	adds	r3, r7, r1
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	801a      	strh	r2, [r3, #0]
 8006654:	e334      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	00000406 	.word	0x00000406
 800665c:	ffff83ff 	.word	0xffff83ff
 8006660:	ffff8000 	.word	0xffff8000
 8006664:	00000402 	.word	0x00000402
 8006668:	ffff8fbf 	.word	0xffff8fbf
 800666c:	ffff8080 	.word	0xffff8080
 8006670:	1d7b      	adds	r3, r7, #5
 8006672:	33ff      	adds	r3, #255	; 0xff
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b3e      	cmp	r3, #62	; 0x3e
 8006678:	d81c      	bhi.n	80066b4 <USB_EPStartXfer+0xafc>
 800667a:	1d7b      	adds	r3, r7, #5
 800667c:	33ff      	adds	r3, #255	; 0xff
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	21e8      	movs	r1, #232	; 0xe8
 8006684:	187a      	adds	r2, r7, r1
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	1d7b      	adds	r3, r7, #5
 800668a:	33ff      	adds	r3, #255	; 0xff
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2201      	movs	r2, #1
 8006690:	4013      	ands	r3, r2
 8006692:	d004      	beq.n	800669e <USB_EPStartXfer+0xae6>
 8006694:	187b      	adds	r3, r7, r1
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	187a      	adds	r2, r7, r1
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	23e8      	movs	r3, #232	; 0xe8
 80066a0:	18fb      	adds	r3, r7, r3
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	238c      	movs	r3, #140	; 0x8c
 80066ac:	18fb      	adds	r3, r7, r3
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	801a      	strh	r2, [r3, #0]
 80066b2:	e305      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
 80066b4:	1d7b      	adds	r3, r7, #5
 80066b6:	33ff      	adds	r3, #255	; 0xff
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	21e8      	movs	r1, #232	; 0xe8
 80066be:	187a      	adds	r2, r7, r1
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	1d7b      	adds	r3, r7, #5
 80066c4:	33ff      	adds	r3, #255	; 0xff
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	221f      	movs	r2, #31
 80066ca:	4013      	ands	r3, r2
 80066cc:	d104      	bne.n	80066d8 <USB_EPStartXfer+0xb20>
 80066ce:	187b      	adds	r3, r7, r1
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	187a      	adds	r2, r7, r1
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	23e8      	movs	r3, #232	; 0xe8
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	b29b      	uxth	r3, r3
 80066e0:	029b      	lsls	r3, r3, #10
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	4aca      	ldr	r2, [pc, #808]	; (8006a10 <USB_EPStartXfer+0xe58>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	238c      	movs	r3, #140	; 0x8c
 80066ec:	18fb      	adds	r3, r7, r3
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	e2e5      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	78db      	ldrb	r3, [r3, #3]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d000      	beq.n	80066fe <USB_EPStartXfer+0xb46>
 80066fc:	e16f      	b.n	80069de <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	785b      	ldrb	r3, [r3, #1]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d16f      	bne.n	80067e6 <USB_EPStartXfer+0xc2e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	21ac      	movs	r1, #172	; 0xac
 800670a:	187a      	adds	r2, r7, r1
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2250      	movs	r2, #80	; 0x50
 8006712:	5a9b      	ldrh	r3, [r3, r2]
 8006714:	b29b      	uxth	r3, r3
 8006716:	001a      	movs	r2, r3
 8006718:	187b      	adds	r3, r7, r1
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	189b      	adds	r3, r3, r2
 800671e:	187a      	adds	r2, r7, r1
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	00da      	lsls	r2, r3, #3
 8006728:	187b      	adds	r3, r7, r1
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	18d3      	adds	r3, r2, r3
 800672e:	4ab9      	ldr	r2, [pc, #740]	; (8006a14 <USB_EPStartXfer+0xe5c>)
 8006730:	4694      	mov	ip, r2
 8006732:	4463      	add	r3, ip
 8006734:	21a8      	movs	r1, #168	; 0xa8
 8006736:	187a      	adds	r2, r7, r1
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d114      	bne.n	800676c <USB_EPStartXfer+0xbb4>
 8006742:	187b      	adds	r3, r7, r1
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	b29b      	uxth	r3, r3
 800674a:	4ab3      	ldr	r2, [pc, #716]	; (8006a18 <USB_EPStartXfer+0xe60>)
 800674c:	4013      	ands	r3, r2
 800674e:	b29a      	uxth	r2, r3
 8006750:	187b      	adds	r3, r7, r1
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	801a      	strh	r2, [r3, #0]
 8006756:	187b      	adds	r3, r7, r1
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	b29b      	uxth	r3, r3
 800675e:	4aac      	ldr	r2, [pc, #688]	; (8006a10 <USB_EPStartXfer+0xe58>)
 8006760:	4313      	orrs	r3, r2
 8006762:	b29a      	uxth	r2, r3
 8006764:	187b      	adds	r3, r7, r1
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	801a      	strh	r2, [r3, #0]
 800676a:	e060      	b.n	800682e <USB_EPStartXfer+0xc76>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	2b3e      	cmp	r3, #62	; 0x3e
 8006772:	d81a      	bhi.n	80067aa <USB_EPStartXfer+0xbf2>
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	085b      	lsrs	r3, r3, #1
 800677a:	21e4      	movs	r1, #228	; 0xe4
 800677c:	187a      	adds	r2, r7, r1
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2201      	movs	r2, #1
 8006786:	4013      	ands	r3, r2
 8006788:	d004      	beq.n	8006794 <USB_EPStartXfer+0xbdc>
 800678a:	187b      	adds	r3, r7, r1
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3301      	adds	r3, #1
 8006790:	187a      	adds	r2, r7, r1
 8006792:	6013      	str	r3, [r2, #0]
 8006794:	23e4      	movs	r3, #228	; 0xe4
 8006796:	18fb      	adds	r3, r7, r3
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	029b      	lsls	r3, r3, #10
 800679e:	b29a      	uxth	r2, r3
 80067a0:	23a8      	movs	r3, #168	; 0xa8
 80067a2:	18fb      	adds	r3, r7, r3
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	801a      	strh	r2, [r3, #0]
 80067a8:	e041      	b.n	800682e <USB_EPStartXfer+0xc76>
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	21e4      	movs	r1, #228	; 0xe4
 80067b2:	187a      	adds	r2, r7, r1
 80067b4:	6013      	str	r3, [r2, #0]
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	221f      	movs	r2, #31
 80067bc:	4013      	ands	r3, r2
 80067be:	d104      	bne.n	80067ca <USB_EPStartXfer+0xc12>
 80067c0:	187b      	adds	r3, r7, r1
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	187a      	adds	r2, r7, r1
 80067c8:	6013      	str	r3, [r2, #0]
 80067ca:	23e4      	movs	r3, #228	; 0xe4
 80067cc:	18fb      	adds	r3, r7, r3
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	029b      	lsls	r3, r3, #10
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	4a8e      	ldr	r2, [pc, #568]	; (8006a10 <USB_EPStartXfer+0xe58>)
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29a      	uxth	r2, r3
 80067dc:	23a8      	movs	r3, #168	; 0xa8
 80067de:	18fb      	adds	r3, r7, r3
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	e023      	b.n	800682e <USB_EPStartXfer+0xc76>
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d11f      	bne.n	800682e <USB_EPStartXfer+0xc76>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	21b4      	movs	r1, #180	; 0xb4
 80067f2:	187a      	adds	r2, r7, r1
 80067f4:	6013      	str	r3, [r2, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2250      	movs	r2, #80	; 0x50
 80067fa:	5a9b      	ldrh	r3, [r3, r2]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	001a      	movs	r2, r3
 8006800:	187b      	adds	r3, r7, r1
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	189b      	adds	r3, r3, r2
 8006806:	187a      	adds	r2, r7, r1
 8006808:	6013      	str	r3, [r2, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	00da      	lsls	r2, r3, #3
 8006810:	187b      	adds	r3, r7, r1
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	18d3      	adds	r3, r2, r3
 8006816:	4a7f      	ldr	r2, [pc, #508]	; (8006a14 <USB_EPStartXfer+0xe5c>)
 8006818:	4694      	mov	ip, r2
 800681a:	4463      	add	r3, ip
 800681c:	21b0      	movs	r1, #176	; 0xb0
 800681e:	187a      	adds	r2, r7, r1
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	b29a      	uxth	r2, r3
 8006828:	187b      	adds	r3, r7, r1
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	22a4      	movs	r2, #164	; 0xa4
 8006832:	18ba      	adds	r2, r7, r2
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	785b      	ldrb	r3, [r3, #1]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d16f      	bne.n	800691e <USB_EPStartXfer+0xd66>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	219c      	movs	r1, #156	; 0x9c
 8006842:	187a      	adds	r2, r7, r1
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2250      	movs	r2, #80	; 0x50
 800684a:	5a9b      	ldrh	r3, [r3, r2]
 800684c:	b29b      	uxth	r3, r3
 800684e:	001a      	movs	r2, r3
 8006850:	187b      	adds	r3, r7, r1
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	189b      	adds	r3, r3, r2
 8006856:	187a      	adds	r2, r7, r1
 8006858:	6013      	str	r3, [r2, #0]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	00da      	lsls	r2, r3, #3
 8006860:	187b      	adds	r3, r7, r1
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	18d3      	adds	r3, r2, r3
 8006866:	4a6d      	ldr	r2, [pc, #436]	; (8006a1c <USB_EPStartXfer+0xe64>)
 8006868:	4694      	mov	ip, r2
 800686a:	4463      	add	r3, ip
 800686c:	2198      	movs	r1, #152	; 0x98
 800686e:	187a      	adds	r2, r7, r1
 8006870:	6013      	str	r3, [r2, #0]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d114      	bne.n	80068a4 <USB_EPStartXfer+0xcec>
 800687a:	187b      	adds	r3, r7, r1
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	4a65      	ldr	r2, [pc, #404]	; (8006a18 <USB_EPStartXfer+0xe60>)
 8006884:	4013      	ands	r3, r2
 8006886:	b29a      	uxth	r2, r3
 8006888:	187b      	adds	r3, r7, r1
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	187b      	adds	r3, r7, r1
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	881b      	ldrh	r3, [r3, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	4a5e      	ldr	r2, [pc, #376]	; (8006a10 <USB_EPStartXfer+0xe58>)
 8006898:	4313      	orrs	r3, r2
 800689a:	b29a      	uxth	r2, r3
 800689c:	187b      	adds	r3, r7, r1
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	801a      	strh	r2, [r3, #0]
 80068a2:	e05d      	b.n	8006960 <USB_EPStartXfer+0xda8>
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	2b3e      	cmp	r3, #62	; 0x3e
 80068aa:	d81a      	bhi.n	80068e2 <USB_EPStartXfer+0xd2a>
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	085b      	lsrs	r3, r3, #1
 80068b2:	21e0      	movs	r1, #224	; 0xe0
 80068b4:	187a      	adds	r2, r7, r1
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2201      	movs	r2, #1
 80068be:	4013      	ands	r3, r2
 80068c0:	d004      	beq.n	80068cc <USB_EPStartXfer+0xd14>
 80068c2:	187b      	adds	r3, r7, r1
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3301      	adds	r3, #1
 80068c8:	187a      	adds	r2, r7, r1
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	23e0      	movs	r3, #224	; 0xe0
 80068ce:	18fb      	adds	r3, r7, r3
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	029b      	lsls	r3, r3, #10
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	2398      	movs	r3, #152	; 0x98
 80068da:	18fb      	adds	r3, r7, r3
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	801a      	strh	r2, [r3, #0]
 80068e0:	e03e      	b.n	8006960 <USB_EPStartXfer+0xda8>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	691b      	ldr	r3, [r3, #16]
 80068e6:	095b      	lsrs	r3, r3, #5
 80068e8:	21e0      	movs	r1, #224	; 0xe0
 80068ea:	187a      	adds	r2, r7, r1
 80068ec:	6013      	str	r3, [r2, #0]
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	221f      	movs	r2, #31
 80068f4:	4013      	ands	r3, r2
 80068f6:	d104      	bne.n	8006902 <USB_EPStartXfer+0xd4a>
 80068f8:	187b      	adds	r3, r7, r1
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	187a      	adds	r2, r7, r1
 8006900:	6013      	str	r3, [r2, #0]
 8006902:	23e0      	movs	r3, #224	; 0xe0
 8006904:	18fb      	adds	r3, r7, r3
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	b29b      	uxth	r3, r3
 800690a:	029b      	lsls	r3, r3, #10
 800690c:	b29b      	uxth	r3, r3
 800690e:	4a40      	ldr	r2, [pc, #256]	; (8006a10 <USB_EPStartXfer+0xe58>)
 8006910:	4313      	orrs	r3, r2
 8006912:	b29a      	uxth	r2, r3
 8006914:	2398      	movs	r3, #152	; 0x98
 8006916:	18fb      	adds	r3, r7, r3
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	801a      	strh	r2, [r3, #0]
 800691c:	e020      	b.n	8006960 <USB_EPStartXfer+0xda8>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	785b      	ldrb	r3, [r3, #1]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d11c      	bne.n	8006960 <USB_EPStartXfer+0xda8>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2250      	movs	r2, #80	; 0x50
 800692a:	5a9b      	ldrh	r3, [r3, r2]
 800692c:	b29b      	uxth	r3, r3
 800692e:	001a      	movs	r2, r3
 8006930:	21a4      	movs	r1, #164	; 0xa4
 8006932:	187b      	adds	r3, r7, r1
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	189b      	adds	r3, r3, r2
 8006938:	187a      	adds	r2, r7, r1
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	00da      	lsls	r2, r3, #3
 8006942:	187b      	adds	r3, r7, r1
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	18d3      	adds	r3, r2, r3
 8006948:	4a34      	ldr	r2, [pc, #208]	; (8006a1c <USB_EPStartXfer+0xe64>)
 800694a:	4694      	mov	ip, r2
 800694c:	4463      	add	r3, ip
 800694e:	21a0      	movs	r1, #160	; 0xa0
 8006950:	187a      	adds	r2, r7, r1
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	b29a      	uxth	r2, r3
 800695a:	187b      	adds	r3, r7, r1
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	69db      	ldr	r3, [r3, #28]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d100      	bne.n	800696a <USB_EPStartXfer+0xdb2>
 8006968:	e1aa      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	18d2      	adds	r2, r2, r3
 8006974:	2196      	movs	r1, #150	; 0x96
 8006976:	187b      	adds	r3, r7, r1
 8006978:	8812      	ldrh	r2, [r2, #0]
 800697a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800697c:	187b      	adds	r3, r7, r1
 800697e:	881a      	ldrh	r2, [r3, #0]
 8006980:	2380      	movs	r3, #128	; 0x80
 8006982:	01db      	lsls	r3, r3, #7
 8006984:	4013      	ands	r3, r2
 8006986:	d004      	beq.n	8006992 <USB_EPStartXfer+0xdda>
 8006988:	187b      	adds	r3, r7, r1
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	2240      	movs	r2, #64	; 0x40
 800698e:	4013      	ands	r3, r2
 8006990:	d10d      	bne.n	80069ae <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006992:	2196      	movs	r1, #150	; 0x96
 8006994:	187b      	adds	r3, r7, r1
 8006996:	881a      	ldrh	r2, [r3, #0]
 8006998:	2380      	movs	r3, #128	; 0x80
 800699a:	01db      	lsls	r3, r3, #7
 800699c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800699e:	d000      	beq.n	80069a2 <USB_EPStartXfer+0xdea>
 80069a0:	e18e      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	2240      	movs	r2, #64	; 0x40
 80069a8:	4013      	ands	r3, r2
 80069aa:	d000      	beq.n	80069ae <USB_EPStartXfer+0xdf6>
 80069ac:	e188      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	18d3      	adds	r3, r2, r3
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	2094      	movs	r0, #148	; 0x94
 80069be:	183b      	adds	r3, r7, r0
 80069c0:	4917      	ldr	r1, [pc, #92]	; (8006a20 <USB_EPStartXfer+0xe68>)
 80069c2:	400a      	ands	r2, r1
 80069c4:	801a      	strh	r2, [r3, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	18d3      	adds	r3, r2, r3
 80069d0:	183a      	adds	r2, r7, r0
 80069d2:	8812      	ldrh	r2, [r2, #0]
 80069d4:	4913      	ldr	r1, [pc, #76]	; (8006a24 <USB_EPStartXfer+0xe6c>)
 80069d6:	430a      	orrs	r2, r1
 80069d8:	b292      	uxth	r2, r2
 80069da:	801a      	strh	r2, [r3, #0]
 80069dc:	e170      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	78db      	ldrb	r3, [r3, #3]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d000      	beq.n	80069e8 <USB_EPStartXfer+0xe30>
 80069e6:	e169      	b.n	8006cbc <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	699a      	ldr	r2, [r3, #24]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d919      	bls.n	8006a28 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	1d7a      	adds	r2, r7, #5
 80069fa:	32ff      	adds	r2, #255	; 0xff
 80069fc:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	1d7b      	adds	r3, r7, #5
 8006a04:	33ff      	adds	r3, #255	; 0xff
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	619a      	str	r2, [r3, #24]
 8006a0e:	e013      	b.n	8006a38 <USB_EPStartXfer+0xe80>
 8006a10:	ffff8000 	.word	0xffff8000
 8006a14:	00000402 	.word	0x00000402
 8006a18:	ffff83ff 	.word	0xffff83ff
 8006a1c:	00000406 	.word	0x00000406
 8006a20:	ffff8f8f 	.word	0xffff8f8f
 8006a24:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	1d7a      	adds	r2, r7, #5
 8006a2e:	32ff      	adds	r2, #255	; 0xff
 8006a30:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2200      	movs	r2, #0
 8006a36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	785b      	ldrb	r3, [r3, #1]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d000      	beq.n	8006a42 <USB_EPStartXfer+0xe8a>
 8006a40:	e075      	b.n	8006b2e <USB_EPStartXfer+0xf76>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	21cc      	movs	r1, #204	; 0xcc
 8006a46:	187a      	adds	r2, r7, r1
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2250      	movs	r2, #80	; 0x50
 8006a4e:	5a9b      	ldrh	r3, [r3, r2]
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	001a      	movs	r2, r3
 8006a54:	187b      	adds	r3, r7, r1
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	189b      	adds	r3, r3, r2
 8006a5a:	187a      	adds	r2, r7, r1
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	00da      	lsls	r2, r3, #3
 8006a64:	187b      	adds	r3, r7, r1
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	18d3      	adds	r3, r2, r3
 8006a6a:	4aaa      	ldr	r2, [pc, #680]	; (8006d14 <USB_EPStartXfer+0x115c>)
 8006a6c:	4694      	mov	ip, r2
 8006a6e:	4463      	add	r3, ip
 8006a70:	21c8      	movs	r1, #200	; 0xc8
 8006a72:	187a      	adds	r2, r7, r1
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	1d7b      	adds	r3, r7, #5
 8006a78:	33ff      	adds	r3, #255	; 0xff
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d114      	bne.n	8006aaa <USB_EPStartXfer+0xef2>
 8006a80:	187b      	adds	r3, r7, r1
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4aa3      	ldr	r2, [pc, #652]	; (8006d18 <USB_EPStartXfer+0x1160>)
 8006a8a:	4013      	ands	r3, r2
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	187b      	adds	r3, r7, r1
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	801a      	strh	r2, [r3, #0]
 8006a94:	187b      	adds	r3, r7, r1
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	4a9f      	ldr	r2, [pc, #636]	; (8006d1c <USB_EPStartXfer+0x1164>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	187b      	adds	r3, r7, r1
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	e066      	b.n	8006b78 <USB_EPStartXfer+0xfc0>
 8006aaa:	1d7b      	adds	r3, r7, #5
 8006aac:	33ff      	adds	r3, #255	; 0xff
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ab2:	d81c      	bhi.n	8006aee <USB_EPStartXfer+0xf36>
 8006ab4:	1d7b      	adds	r3, r7, #5
 8006ab6:	33ff      	adds	r3, #255	; 0xff
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	085b      	lsrs	r3, r3, #1
 8006abc:	21dc      	movs	r1, #220	; 0xdc
 8006abe:	187a      	adds	r2, r7, r1
 8006ac0:	6013      	str	r3, [r2, #0]
 8006ac2:	1d7b      	adds	r3, r7, #5
 8006ac4:	33ff      	adds	r3, #255	; 0xff
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <USB_EPStartXfer+0xf20>
 8006ace:	187b      	adds	r3, r7, r1
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	187a      	adds	r2, r7, r1
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	23dc      	movs	r3, #220	; 0xdc
 8006ada:	18fb      	adds	r3, r7, r3
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	029b      	lsls	r3, r3, #10
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	23c8      	movs	r3, #200	; 0xc8
 8006ae6:	18fb      	adds	r3, r7, r3
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	801a      	strh	r2, [r3, #0]
 8006aec:	e044      	b.n	8006b78 <USB_EPStartXfer+0xfc0>
 8006aee:	1d7b      	adds	r3, r7, #5
 8006af0:	33ff      	adds	r3, #255	; 0xff
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	095b      	lsrs	r3, r3, #5
 8006af6:	21dc      	movs	r1, #220	; 0xdc
 8006af8:	187a      	adds	r2, r7, r1
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	1d7b      	adds	r3, r7, #5
 8006afe:	33ff      	adds	r3, #255	; 0xff
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	221f      	movs	r2, #31
 8006b04:	4013      	ands	r3, r2
 8006b06:	d104      	bne.n	8006b12 <USB_EPStartXfer+0xf5a>
 8006b08:	187b      	adds	r3, r7, r1
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	187a      	adds	r2, r7, r1
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	23dc      	movs	r3, #220	; 0xdc
 8006b14:	18fb      	adds	r3, r7, r3
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	029b      	lsls	r3, r3, #10
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	4a7f      	ldr	r2, [pc, #508]	; (8006d1c <USB_EPStartXfer+0x1164>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	23c8      	movs	r3, #200	; 0xc8
 8006b26:	18fb      	adds	r3, r7, r3
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	801a      	strh	r2, [r3, #0]
 8006b2c:	e024      	b.n	8006b78 <USB_EPStartXfer+0xfc0>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d120      	bne.n	8006b78 <USB_EPStartXfer+0xfc0>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	21d4      	movs	r1, #212	; 0xd4
 8006b3a:	187a      	adds	r2, r7, r1
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2250      	movs	r2, #80	; 0x50
 8006b42:	5a9b      	ldrh	r3, [r3, r2]
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	001a      	movs	r2, r3
 8006b48:	187b      	adds	r3, r7, r1
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	189b      	adds	r3, r3, r2
 8006b4e:	187a      	adds	r2, r7, r1
 8006b50:	6013      	str	r3, [r2, #0]
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	00da      	lsls	r2, r3, #3
 8006b58:	187b      	adds	r3, r7, r1
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	18d3      	adds	r3, r2, r3
 8006b5e:	4a6d      	ldr	r2, [pc, #436]	; (8006d14 <USB_EPStartXfer+0x115c>)
 8006b60:	4694      	mov	ip, r2
 8006b62:	4463      	add	r3, ip
 8006b64:	21d0      	movs	r1, #208	; 0xd0
 8006b66:	187a      	adds	r2, r7, r1
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	1d7b      	adds	r3, r7, #5
 8006b6c:	33ff      	adds	r3, #255	; 0xff
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	187b      	adds	r3, r7, r1
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	801a      	strh	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	22c4      	movs	r2, #196	; 0xc4
 8006b7c:	18ba      	adds	r2, r7, r2
 8006b7e:	6013      	str	r3, [r2, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	785b      	ldrb	r3, [r3, #1]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d000      	beq.n	8006b8a <USB_EPStartXfer+0xfd2>
 8006b88:	e075      	b.n	8006c76 <USB_EPStartXfer+0x10be>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	21bc      	movs	r1, #188	; 0xbc
 8006b8e:	187a      	adds	r2, r7, r1
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2250      	movs	r2, #80	; 0x50
 8006b96:	5a9b      	ldrh	r3, [r3, r2]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	001a      	movs	r2, r3
 8006b9c:	187b      	adds	r3, r7, r1
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	189b      	adds	r3, r3, r2
 8006ba2:	187a      	adds	r2, r7, r1
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	781b      	ldrb	r3, [r3, #0]
 8006baa:	00da      	lsls	r2, r3, #3
 8006bac:	187b      	adds	r3, r7, r1
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	18d3      	adds	r3, r2, r3
 8006bb2:	4a5b      	ldr	r2, [pc, #364]	; (8006d20 <USB_EPStartXfer+0x1168>)
 8006bb4:	4694      	mov	ip, r2
 8006bb6:	4463      	add	r3, ip
 8006bb8:	21b8      	movs	r1, #184	; 0xb8
 8006bba:	187a      	adds	r2, r7, r1
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	1d7b      	adds	r3, r7, #5
 8006bc0:	33ff      	adds	r3, #255	; 0xff
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d114      	bne.n	8006bf2 <USB_EPStartXfer+0x103a>
 8006bc8:	187b      	adds	r3, r7, r1
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	4a51      	ldr	r2, [pc, #324]	; (8006d18 <USB_EPStartXfer+0x1160>)
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	187b      	adds	r3, r7, r1
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	801a      	strh	r2, [r3, #0]
 8006bdc:	187b      	adds	r3, r7, r1
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	881b      	ldrh	r3, [r3, #0]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4a4d      	ldr	r2, [pc, #308]	; (8006d1c <USB_EPStartXfer+0x1164>)
 8006be6:	4313      	orrs	r3, r2
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	187b      	adds	r3, r7, r1
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	801a      	strh	r2, [r3, #0]
 8006bf0:	e066      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
 8006bf2:	1d7b      	adds	r3, r7, #5
 8006bf4:	33ff      	adds	r3, #255	; 0xff
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b3e      	cmp	r3, #62	; 0x3e
 8006bfa:	d81c      	bhi.n	8006c36 <USB_EPStartXfer+0x107e>
 8006bfc:	1d7b      	adds	r3, r7, #5
 8006bfe:	33ff      	adds	r3, #255	; 0xff
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	085b      	lsrs	r3, r3, #1
 8006c04:	21d8      	movs	r1, #216	; 0xd8
 8006c06:	187a      	adds	r2, r7, r1
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	1d7b      	adds	r3, r7, #5
 8006c0c:	33ff      	adds	r3, #255	; 0xff
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2201      	movs	r2, #1
 8006c12:	4013      	ands	r3, r2
 8006c14:	d004      	beq.n	8006c20 <USB_EPStartXfer+0x1068>
 8006c16:	187b      	adds	r3, r7, r1
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	187a      	adds	r2, r7, r1
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	23d8      	movs	r3, #216	; 0xd8
 8006c22:	18fb      	adds	r3, r7, r3
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	029b      	lsls	r3, r3, #10
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	23b8      	movs	r3, #184	; 0xb8
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	801a      	strh	r2, [r3, #0]
 8006c34:	e044      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
 8006c36:	1d7b      	adds	r3, r7, #5
 8006c38:	33ff      	adds	r3, #255	; 0xff
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	21d8      	movs	r1, #216	; 0xd8
 8006c40:	187a      	adds	r2, r7, r1
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	1d7b      	adds	r3, r7, #5
 8006c46:	33ff      	adds	r3, #255	; 0xff
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	221f      	movs	r2, #31
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d104      	bne.n	8006c5a <USB_EPStartXfer+0x10a2>
 8006c50:	187b      	adds	r3, r7, r1
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	187a      	adds	r2, r7, r1
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	23d8      	movs	r3, #216	; 0xd8
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	029b      	lsls	r3, r3, #10
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	4a2d      	ldr	r2, [pc, #180]	; (8006d1c <USB_EPStartXfer+0x1164>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	23b8      	movs	r3, #184	; 0xb8
 8006c6e:	18fb      	adds	r3, r7, r3
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	801a      	strh	r2, [r3, #0]
 8006c74:	e024      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d120      	bne.n	8006cc0 <USB_EPStartXfer+0x1108>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2250      	movs	r2, #80	; 0x50
 8006c82:	5a9b      	ldrh	r3, [r3, r2]
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	001a      	movs	r2, r3
 8006c88:	21c4      	movs	r1, #196	; 0xc4
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	189b      	adds	r3, r3, r2
 8006c90:	187a      	adds	r2, r7, r1
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	00da      	lsls	r2, r3, #3
 8006c9a:	187b      	adds	r3, r7, r1
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	18d3      	adds	r3, r2, r3
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	; (8006d20 <USB_EPStartXfer+0x1168>)
 8006ca2:	4694      	mov	ip, r2
 8006ca4:	4463      	add	r3, ip
 8006ca6:	21c0      	movs	r1, #192	; 0xc0
 8006ca8:	187a      	adds	r2, r7, r1
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	1d7b      	adds	r3, r7, #5
 8006cae:	33ff      	adds	r3, #255	; 0xff
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	187b      	adds	r3, r7, r1
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	801a      	strh	r2, [r3, #0]
 8006cba:	e001      	b.n	8006cc0 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e025      	b.n	8006d0c <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	18d3      	adds	r3, r2, r3
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	208a      	movs	r0, #138	; 0x8a
 8006cd0:	183b      	adds	r3, r7, r0
 8006cd2:	4914      	ldr	r1, [pc, #80]	; (8006d24 <USB_EPStartXfer+0x116c>)
 8006cd4:	400a      	ands	r2, r1
 8006cd6:	801a      	strh	r2, [r3, #0]
 8006cd8:	183b      	adds	r3, r7, r0
 8006cda:	183a      	adds	r2, r7, r0
 8006cdc:	8812      	ldrh	r2, [r2, #0]
 8006cde:	2180      	movs	r1, #128	; 0x80
 8006ce0:	0149      	lsls	r1, r1, #5
 8006ce2:	404a      	eors	r2, r1
 8006ce4:	801a      	strh	r2, [r3, #0]
 8006ce6:	183b      	adds	r3, r7, r0
 8006ce8:	183a      	adds	r2, r7, r0
 8006cea:	8812      	ldrh	r2, [r2, #0]
 8006cec:	2180      	movs	r1, #128	; 0x80
 8006cee:	0189      	lsls	r1, r1, #6
 8006cf0:	404a      	eors	r2, r1
 8006cf2:	801a      	strh	r2, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	18d3      	adds	r3, r2, r3
 8006cfe:	183a      	adds	r2, r7, r0
 8006d00:	8812      	ldrh	r2, [r2, #0]
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <USB_EPStartXfer+0x1170>)
 8006d04:	430a      	orrs	r2, r1
 8006d06:	b292      	uxth	r2, r2
 8006d08:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	b043      	add	sp, #268	; 0x10c
 8006d12:	bd90      	pop	{r4, r7, pc}
 8006d14:	00000402 	.word	0x00000402
 8006d18:	ffff83ff 	.word	0xffff83ff
 8006d1c:	ffff8000 	.word	0xffff8000
 8006d20:	00000406 	.word	0x00000406
 8006d24:	ffffbf8f 	.word	0xffffbf8f
 8006d28:	ffff8080 	.word	0xffff8080

08006d2c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01d      	beq.n	8006d7a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	18d3      	adds	r3, r2, r3
 8006d48:	881b      	ldrh	r3, [r3, #0]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	200c      	movs	r0, #12
 8006d4e:	183b      	adds	r3, r7, r0
 8006d50:	491b      	ldr	r1, [pc, #108]	; (8006dc0 <USB_EPSetStall+0x94>)
 8006d52:	400a      	ands	r2, r1
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	183b      	adds	r3, r7, r0
 8006d58:	183a      	adds	r2, r7, r0
 8006d5a:	8812      	ldrh	r2, [r2, #0]
 8006d5c:	2110      	movs	r1, #16
 8006d5e:	404a      	eors	r2, r1
 8006d60:	801a      	strh	r2, [r3, #0]
 8006d62:	687a      	ldr	r2, [r7, #4]
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	18d3      	adds	r3, r2, r3
 8006d6c:	183a      	adds	r2, r7, r0
 8006d6e:	8812      	ldrh	r2, [r2, #0]
 8006d70:	4914      	ldr	r1, [pc, #80]	; (8006dc4 <USB_EPSetStall+0x98>)
 8006d72:	430a      	orrs	r2, r1
 8006d74:	b292      	uxth	r2, r2
 8006d76:	801a      	strh	r2, [r3, #0]
 8006d78:	e01d      	b.n	8006db6 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	18d3      	adds	r3, r2, r3
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	200e      	movs	r0, #14
 8006d8a:	183b      	adds	r3, r7, r0
 8006d8c:	490e      	ldr	r1, [pc, #56]	; (8006dc8 <USB_EPSetStall+0x9c>)
 8006d8e:	400a      	ands	r2, r1
 8006d90:	801a      	strh	r2, [r3, #0]
 8006d92:	183b      	adds	r3, r7, r0
 8006d94:	183a      	adds	r2, r7, r0
 8006d96:	8812      	ldrh	r2, [r2, #0]
 8006d98:	2180      	movs	r1, #128	; 0x80
 8006d9a:	0149      	lsls	r1, r1, #5
 8006d9c:	404a      	eors	r2, r1
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	18d3      	adds	r3, r2, r3
 8006daa:	183a      	adds	r2, r7, r0
 8006dac:	8812      	ldrh	r2, [r2, #0]
 8006dae:	4905      	ldr	r1, [pc, #20]	; (8006dc4 <USB_EPSetStall+0x98>)
 8006db0:	430a      	orrs	r2, r1
 8006db2:	b292      	uxth	r2, r2
 8006db4:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	0018      	movs	r0, r3
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	b004      	add	sp, #16
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	ffff8fbf 	.word	0xffff8fbf
 8006dc4:	ffff8080 	.word	0xffff8080
 8006dc8:	ffffbf8f 	.word	0xffffbf8f

08006dcc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d000      	beq.n	8006de0 <USB_EPClearStall+0x14>
 8006dde:	e095      	b.n	8006f0c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d046      	beq.n	8006e76 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	18d2      	adds	r2, r2, r3
 8006df2:	2110      	movs	r1, #16
 8006df4:	187b      	adds	r3, r7, r1
 8006df6:	8812      	ldrh	r2, [r2, #0]
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	187b      	adds	r3, r7, r1
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	2240      	movs	r2, #64	; 0x40
 8006e00:	4013      	ands	r3, r2
 8006e02:	d016      	beq.n	8006e32 <USB_EPClearStall+0x66>
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	18d3      	adds	r3, r2, r3
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	200e      	movs	r0, #14
 8006e14:	183b      	adds	r3, r7, r0
 8006e16:	4940      	ldr	r1, [pc, #256]	; (8006f18 <USB_EPClearStall+0x14c>)
 8006e18:	400a      	ands	r2, r1
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	18d3      	adds	r3, r2, r3
 8006e26:	183a      	adds	r2, r7, r0
 8006e28:	8812      	ldrh	r2, [r2, #0]
 8006e2a:	493c      	ldr	r1, [pc, #240]	; (8006f1c <USB_EPClearStall+0x150>)
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	b292      	uxth	r2, r2
 8006e30:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d068      	beq.n	8006f0c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	200c      	movs	r0, #12
 8006e4a:	183b      	adds	r3, r7, r0
 8006e4c:	4934      	ldr	r1, [pc, #208]	; (8006f20 <USB_EPClearStall+0x154>)
 8006e4e:	400a      	ands	r2, r1
 8006e50:	801a      	strh	r2, [r3, #0]
 8006e52:	183b      	adds	r3, r7, r0
 8006e54:	183a      	adds	r2, r7, r0
 8006e56:	8812      	ldrh	r2, [r2, #0]
 8006e58:	2120      	movs	r1, #32
 8006e5a:	404a      	eors	r2, r1
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	18d3      	adds	r3, r2, r3
 8006e68:	183a      	adds	r2, r7, r0
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	492d      	ldr	r1, [pc, #180]	; (8006f24 <USB_EPClearStall+0x158>)
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	b292      	uxth	r2, r2
 8006e72:	801a      	strh	r2, [r3, #0]
 8006e74:	e04a      	b.n	8006f0c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	18d2      	adds	r2, r2, r3
 8006e80:	2116      	movs	r1, #22
 8006e82:	187b      	adds	r3, r7, r1
 8006e84:	8812      	ldrh	r2, [r2, #0]
 8006e86:	801a      	strh	r2, [r3, #0]
 8006e88:	187b      	adds	r3, r7, r1
 8006e8a:	881a      	ldrh	r2, [r3, #0]
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	01db      	lsls	r3, r3, #7
 8006e90:	4013      	ands	r3, r2
 8006e92:	d016      	beq.n	8006ec2 <USB_EPClearStall+0xf6>
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	18d3      	adds	r3, r2, r3
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	2014      	movs	r0, #20
 8006ea4:	183b      	adds	r3, r7, r0
 8006ea6:	491c      	ldr	r1, [pc, #112]	; (8006f18 <USB_EPClearStall+0x14c>)
 8006ea8:	400a      	ands	r2, r1
 8006eaa:	801a      	strh	r2, [r3, #0]
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	18d3      	adds	r3, r2, r3
 8006eb6:	183a      	adds	r2, r7, r0
 8006eb8:	8812      	ldrh	r2, [r2, #0]
 8006eba:	491b      	ldr	r1, [pc, #108]	; (8006f28 <USB_EPClearStall+0x15c>)
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	b292      	uxth	r2, r2
 8006ec0:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	18d3      	adds	r3, r2, r3
 8006ecc:	881b      	ldrh	r3, [r3, #0]
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	2012      	movs	r0, #18
 8006ed2:	183b      	adds	r3, r7, r0
 8006ed4:	4915      	ldr	r1, [pc, #84]	; (8006f2c <USB_EPClearStall+0x160>)
 8006ed6:	400a      	ands	r2, r1
 8006ed8:	801a      	strh	r2, [r3, #0]
 8006eda:	183b      	adds	r3, r7, r0
 8006edc:	183a      	adds	r2, r7, r0
 8006ede:	8812      	ldrh	r2, [r2, #0]
 8006ee0:	2180      	movs	r1, #128	; 0x80
 8006ee2:	0149      	lsls	r1, r1, #5
 8006ee4:	404a      	eors	r2, r1
 8006ee6:	801a      	strh	r2, [r3, #0]
 8006ee8:	183b      	adds	r3, r7, r0
 8006eea:	183a      	adds	r2, r7, r0
 8006eec:	8812      	ldrh	r2, [r2, #0]
 8006eee:	2180      	movs	r1, #128	; 0x80
 8006ef0:	0189      	lsls	r1, r1, #6
 8006ef2:	404a      	eors	r2, r1
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	18d3      	adds	r3, r2, r3
 8006f00:	183a      	adds	r2, r7, r0
 8006f02:	8812      	ldrh	r2, [r2, #0]
 8006f04:	4907      	ldr	r1, [pc, #28]	; (8006f24 <USB_EPClearStall+0x158>)
 8006f06:	430a      	orrs	r2, r1
 8006f08:	b292      	uxth	r2, r2
 8006f0a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	0018      	movs	r0, r3
 8006f10:	46bd      	mov	sp, r7
 8006f12:	b006      	add	sp, #24
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	ffff8f8f 	.word	0xffff8f8f
 8006f1c:	ffff80c0 	.word	0xffff80c0
 8006f20:	ffff8fbf 	.word	0xffff8fbf
 8006f24:	ffff8080 	.word	0xffff8080
 8006f28:	ffffc080 	.word	0xffffc080
 8006f2c:	ffffbf8f 	.word	0xffffbf8f

08006f30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	000a      	movs	r2, r1
 8006f3a:	1cfb      	adds	r3, r7, #3
 8006f3c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006f3e:	1cfb      	adds	r3, r7, #3
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d103      	bne.n	8006f4e <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	224c      	movs	r2, #76	; 0x4c
 8006f4a:	2180      	movs	r1, #128	; 0x80
 8006f4c:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	0018      	movs	r0, r3
 8006f52:	46bd      	mov	sp, r7
 8006f54:	b002      	add	sp, #8
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2258      	movs	r2, #88	; 0x58
 8006f64:	5a9b      	ldrh	r3, [r3, r2]
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	4a05      	ldr	r2, [pc, #20]	; (8006f80 <USB_DevConnect+0x28>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	b299      	uxth	r1, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2258      	movs	r2, #88	; 0x58
 8006f72:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	0018      	movs	r0, r3
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b002      	add	sp, #8
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	46c0      	nop			; (mov r8, r8)
 8006f80:	ffff8000 	.word	0xffff8000

08006f84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2244      	movs	r2, #68	; 0x44
 8006f90:	5a9b      	ldrh	r3, [r3, r2]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	0018      	movs	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	b004      	add	sp, #16
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	; 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	0019      	movs	r1, r3
 8006fac:	1dbb      	adds	r3, r7, #6
 8006fae:	801a      	strh	r2, [r3, #0]
 8006fb0:	1d3b      	adds	r3, r7, #4
 8006fb2:	1c0a      	adds	r2, r1, #0
 8006fb4:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006fb6:	1d3b      	adds	r3, r7, #4
 8006fb8:	881b      	ldrh	r3, [r3, #0]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fc8:	1dbb      	adds	r3, r7, #6
 8006fca:	881a      	ldrh	r2, [r3, #0]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	18d3      	adds	r3, r2, r3
 8006fd0:	2280      	movs	r2, #128	; 0x80
 8006fd2:	00d2      	lsls	r2, r2, #3
 8006fd4:	4694      	mov	ip, r2
 8006fd6:	4463      	add	r3, ip
 8006fd8:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fde:	e01b      	b.n	8007018 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe8:	3301      	adds	r3, #1
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	021b      	lsls	r3, r3, #8
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	001a      	movs	r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	b29a      	uxth	r2, r3
 8007002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007004:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	3302      	adds	r3, #2
 800700a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	3301      	adds	r3, #1
 8007010:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	3b01      	subs	r3, #1
 8007016:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e0      	bne.n	8006fe0 <USB_WritePMA+0x40>
  }
}
 800701e:	46c0      	nop			; (mov r8, r8)
 8007020:	46c0      	nop			; (mov r8, r8)
 8007022:	46bd      	mov	sp, r7
 8007024:	b00c      	add	sp, #48	; 0x30
 8007026:	bd80      	pop	{r7, pc}

08007028 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08a      	sub	sp, #40	; 0x28
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	0019      	movs	r1, r3
 8007034:	1dbb      	adds	r3, r7, #6
 8007036:	801a      	strh	r2, [r3, #0]
 8007038:	1d3b      	adds	r3, r7, #4
 800703a:	1c0a      	adds	r2, r1, #0
 800703c:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007050:	1dbb      	adds	r3, r7, #6
 8007052:	881a      	ldrh	r2, [r3, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	18d3      	adds	r3, r2, r3
 8007058:	2280      	movs	r2, #128	; 0x80
 800705a:	00d2      	lsls	r2, r2, #3
 800705c:	4694      	mov	ip, r2
 800705e:	4463      	add	r3, ip
 8007060:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	627b      	str	r3, [r7, #36]	; 0x24
 8007066:	e018      	b.n	800709a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007068:	6a3b      	ldr	r3, [r7, #32]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007070:	6a3b      	ldr	r3, [r7, #32]
 8007072:	3302      	adds	r3, #2
 8007074:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	b2da      	uxtb	r2, r3
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	3301      	adds	r3, #1
 8007082:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	0a1b      	lsrs	r3, r3, #8
 8007088:	b2da      	uxtb	r2, r3
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	3301      	adds	r3, #1
 8007092:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	3b01      	subs	r3, #1
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1e3      	bne.n	8007068 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80070a0:	1d3b      	adds	r3, r7, #4
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	2201      	movs	r2, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d007      	beq.n	80070be <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	b2da      	uxtb	r2, r3
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	701a      	strb	r2, [r3, #0]
  }
}
 80070be:	46c0      	nop			; (mov r8, r8)
 80070c0:	46bd      	mov	sp, r7
 80070c2:	b00a      	add	sp, #40	; 0x28
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80070c6:	b590      	push	{r4, r7, lr}
 80070c8:	b085      	sub	sp, #20
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	000a      	movs	r2, r1
 80070d0:	1cfb      	adds	r3, r7, #3
 80070d2:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80070d4:	240f      	movs	r4, #15
 80070d6:	193b      	adds	r3, r7, r4
 80070d8:	2200      	movs	r2, #0
 80070da:	701a      	strb	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	2355      	movs	r3, #85	; 0x55
 80070e0:	2203      	movs	r2, #3
 80070e2:	2181      	movs	r1, #129	; 0x81
 80070e4:	f001 ff35 	bl	8008f52 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	2355      	movs	r3, #85	; 0x55
 80070f2:	2203      	movs	r2, #3
 80070f4:	2101      	movs	r1, #1
 80070f6:	f001 ff2c 	bl	8008f52 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	23b6      	movs	r3, #182	; 0xb6
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	2101      	movs	r1, #1
 8007102:	50d1      	str	r1, [r2, r3]

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8007104:	2018      	movs	r0, #24
 8007106:	f002 f90f 	bl	8009328 <malloc>
 800710a:	0003      	movs	r3, r0
 800710c:	0019      	movs	r1, r3
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	23ae      	movs	r3, #174	; 0xae
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	23ae      	movs	r3, #174	; 0xae
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	58d3      	ldr	r3, [r2, r3]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d103      	bne.n	800712a <USBD_CUSTOM_HID_Init+0x64>
  {
    ret = 1U;
 8007122:	193b      	adds	r3, r7, r4
 8007124:	2201      	movs	r2, #1
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	e013      	b.n	8007152 <USBD_CUSTOM_HID_Init+0x8c>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800712a:	687a      	ldr	r2, [r7, #4]
 800712c:	23ae      	movs	r3, #174	; 0xae
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	58d3      	ldr	r3, [r2, r3]
 8007132:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2200      	movs	r2, #0
 8007138:	751a      	strb	r2, [r3, #20]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	23af      	movs	r3, #175	; 0xaf
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	58d3      	ldr	r3, [r2, r3]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	2302      	movs	r3, #2
 800714c:	2101      	movs	r1, #1
 800714e:	f002 f84b 	bl	80091e8 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8007152:	230f      	movs	r3, #15
 8007154:	18fb      	adds	r3, r7, r3
 8007156:	781b      	ldrb	r3, [r3, #0]
}
 8007158:	0018      	movs	r0, r3
 800715a:	46bd      	mov	sp, r7
 800715c:	b005      	add	sp, #20
 800715e:	bd90      	pop	{r4, r7, pc}

08007160 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	000a      	movs	r2, r1
 800716a:	1cfb      	adds	r3, r7, #3
 800716c:	701a      	strb	r2, [r3, #0]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2181      	movs	r1, #129	; 0x81
 8007172:	0018      	movs	r0, r3
 8007174:	f001 ff24 	bl	8008fc0 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2101      	movs	r1, #1
 8007182:	0018      	movs	r0, r3
 8007184:	f001 ff1c 	bl	8008fc0 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	23b6      	movs	r3, #182	; 0xb6
 800718c:	005b      	lsls	r3, r3, #1
 800718e:	2100      	movs	r1, #0
 8007190:	50d1      	str	r1, [r2, r3]

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	23ae      	movs	r3, #174	; 0xae
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	58d3      	ldr	r3, [r2, r3]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d011      	beq.n	80071c2 <USBD_CUSTOM_HID_DeInit+0x62>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	23af      	movs	r3, #175	; 0xaf
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	58d3      	ldr	r3, [r2, r3]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	23ae      	movs	r3, #174	; 0xae
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	58d3      	ldr	r3, [r2, r3]
 80071b2:	0018      	movs	r0, r3
 80071b4:	f002 f8c2 	bl	800933c <free>
    pdev->pClassData = NULL;
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	23ae      	movs	r3, #174	; 0xae
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	2100      	movs	r1, #0
 80071c0:	50d1      	str	r1, [r2, r3]
  }
  return USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	0018      	movs	r0, r3
 80071c6:	46bd      	mov	sp, r7
 80071c8:	b002      	add	sp, #8
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	23ae      	movs	r3, #174	; 0xae
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	58d3      	ldr	r3, [r2, r3]
 80071de:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80071e0:	231e      	movs	r3, #30
 80071e2:	18fb      	adds	r3, r7, r3
 80071e4:	2200      	movs	r2, #0
 80071e6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pbuf = NULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80071ec:	230e      	movs	r3, #14
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	2200      	movs	r2, #0
 80071f2:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 80071f4:	2317      	movs	r3, #23
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	2200      	movs	r2, #0
 80071fa:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	001a      	movs	r2, r3
 8007202:	2360      	movs	r3, #96	; 0x60
 8007204:	4013      	ands	r3, r2
 8007206:	d043      	beq.n	8007290 <USBD_CUSTOM_HID_Setup+0xc4>
 8007208:	2b20      	cmp	r3, #32
 800720a:	d000      	beq.n	800720e <USBD_CUSTOM_HID_Setup+0x42>
 800720c:	e0d7      	b.n	80073be <USBD_CUSTOM_HID_Setup+0x1f2>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	785b      	ldrb	r3, [r3, #1]
 8007212:	2b0b      	cmp	r3, #11
 8007214:	d830      	bhi.n	8007278 <USBD_CUSTOM_HID_Setup+0xac>
 8007216:	009a      	lsls	r2, r3, #2
 8007218:	4b72      	ldr	r3, [pc, #456]	; (80073e4 <USBD_CUSTOM_HID_Setup+0x218>)
 800721a:	18d3      	adds	r3, r2, r3
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	469f      	mov	pc, r3
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	885b      	ldrh	r3, [r3, #2]
 8007224:	b2db      	uxtb	r3, r3
 8007226:	001a      	movs	r2, r3
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	605a      	str	r2, [r3, #4]
          break;
 800722c:	e02f      	b.n	800728e <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	1d19      	adds	r1, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2201      	movs	r2, #1
 8007236:	0018      	movs	r0, r3
 8007238:	f001 fb1e 	bl	8008878 <USBD_CtlSendData>
          break;
 800723c:	e027      	b.n	800728e <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	0a1b      	lsrs	r3, r3, #8
 8007244:	b29b      	uxth	r3, r3
 8007246:	b2db      	uxtb	r3, r3
 8007248:	001a      	movs	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	609a      	str	r2, [r3, #8]
          break;
 800724e:	e01e      	b.n	800728e <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	3308      	adds	r3, #8
 8007254:	0019      	movs	r1, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2201      	movs	r2, #1
 800725a:	0018      	movs	r0, r3
 800725c:	f001 fb0c 	bl	8008878 <USBD_CtlSendData>
          break;
 8007260:	e015      	b.n	800728e <USBD_CUSTOM_HID_Setup+0xc2>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	2201      	movs	r2, #1
 8007266:	611a      	str	r2, [r3, #16]
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007268:	6939      	ldr	r1, [r7, #16]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	88da      	ldrh	r2, [r3, #6]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	0018      	movs	r0, r3
 8007272:	f001 fb34 	bl	80088de <USBD_CtlPrepareRx>
          break;
 8007276:	e00a      	b.n	800728e <USBD_CUSTOM_HID_Setup+0xc2>

        default:
          USBD_CtlError(pdev, req);
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	0011      	movs	r1, r2
 800727e:	0018      	movs	r0, r3
 8007280:	f001 fa7c 	bl	800877c <USBD_CtlError>
          ret = USBD_FAIL;
 8007284:	2317      	movs	r3, #23
 8007286:	18fb      	adds	r3, r7, r3
 8007288:	2202      	movs	r2, #2
 800728a:	701a      	strb	r2, [r3, #0]
          break;
 800728c:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800728e:	e0a1      	b.n	80073d4 <USBD_CUSTOM_HID_Setup+0x208>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	785b      	ldrb	r3, [r3, #1]
 8007294:	2b0b      	cmp	r3, #11
 8007296:	d100      	bne.n	800729a <USBD_CUSTOM_HID_Setup+0xce>
 8007298:	e06d      	b.n	8007376 <USBD_CUSTOM_HID_Setup+0x1aa>
 800729a:	dd00      	ble.n	800729e <USBD_CUSTOM_HID_Setup+0xd2>
 800729c:	e083      	b.n	80073a6 <USBD_CUSTOM_HID_Setup+0x1da>
 800729e:	2b0a      	cmp	r3, #10
 80072a0:	d04f      	beq.n	8007342 <USBD_CUSTOM_HID_Setup+0x176>
 80072a2:	dd00      	ble.n	80072a6 <USBD_CUSTOM_HID_Setup+0xda>
 80072a4:	e07f      	b.n	80073a6 <USBD_CUSTOM_HID_Setup+0x1da>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <USBD_CUSTOM_HID_Setup+0xe4>
 80072aa:	2b06      	cmp	r3, #6
 80072ac:	d019      	beq.n	80072e2 <USBD_CUSTOM_HID_Setup+0x116>
 80072ae:	e07a      	b.n	80073a6 <USBD_CUSTOM_HID_Setup+0x1da>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	23a7      	movs	r3, #167	; 0xa7
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	5cd3      	ldrb	r3, [r2, r3]
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d107      	bne.n	80072cc <USBD_CUSTOM_HID_Setup+0x100>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80072bc:	230e      	movs	r3, #14
 80072be:	18f9      	adds	r1, r7, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	0018      	movs	r0, r3
 80072c6:	f001 fad7 	bl	8008878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072ca:	e077      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	0011      	movs	r1, r2
 80072d2:	0018      	movs	r0, r3
 80072d4:	f001 fa52 	bl	800877c <USBD_CtlError>
            ret = USBD_FAIL;
 80072d8:	2317      	movs	r3, #23
 80072da:	18fb      	adds	r3, r7, r3
 80072dc:	2202      	movs	r2, #2
 80072de:	701a      	strb	r2, [r3, #0]
          break;
 80072e0:	e06c      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	885b      	ldrh	r3, [r3, #2]
 80072e6:	0a1b      	lsrs	r3, r3, #8
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b22      	cmp	r3, #34	; 0x22
 80072ec:	d10f      	bne.n	800730e <USBD_CUSTOM_HID_Setup+0x142>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	88db      	ldrh	r3, [r3, #6]
 80072f2:	221e      	movs	r2, #30
 80072f4:	18ba      	adds	r2, r7, r2
 80072f6:	b299      	uxth	r1, r3
 80072f8:	2955      	cmp	r1, #85	; 0x55
 80072fa:	d900      	bls.n	80072fe <USBD_CUSTOM_HID_Setup+0x132>
 80072fc:	2355      	movs	r3, #85	; 0x55
 80072fe:	8013      	strh	r3, [r2, #0]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	23af      	movs	r3, #175	; 0xaf
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	58d3      	ldr	r3, [r2, r3]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	61bb      	str	r3, [r7, #24]
 800730c:	e010      	b.n	8007330 <USBD_CUSTOM_HID_Setup+0x164>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	2b21      	cmp	r3, #33	; 0x21
 8007318:	d10a      	bne.n	8007330 <USBD_CUSTOM_HID_Setup+0x164>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800731a:	4b33      	ldr	r3, [pc, #204]	; (80073e8 <USBD_CUSTOM_HID_Setup+0x21c>)
 800731c:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	88db      	ldrh	r3, [r3, #6]
 8007322:	221e      	movs	r2, #30
 8007324:	18ba      	adds	r2, r7, r2
 8007326:	b299      	uxth	r1, r3
 8007328:	2909      	cmp	r1, #9
 800732a:	d900      	bls.n	800732e <USBD_CUSTOM_HID_Setup+0x162>
 800732c:	2309      	movs	r3, #9
 800732e:	8013      	strh	r3, [r2, #0]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8007330:	231e      	movs	r3, #30
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	881a      	ldrh	r2, [r3, #0]
 8007336:	69b9      	ldr	r1, [r7, #24]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	0018      	movs	r0, r3
 800733c:	f001 fa9c 	bl	8008878 <USBD_CtlSendData>
          break;
 8007340:	e03c      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	23a7      	movs	r3, #167	; 0xa7
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	5cd3      	ldrb	r3, [r2, r3]
 800734a:	2b03      	cmp	r3, #3
 800734c:	d108      	bne.n	8007360 <USBD_CUSTOM_HID_Setup+0x194>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	330c      	adds	r3, #12
 8007352:	0019      	movs	r1, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	0018      	movs	r0, r3
 800735a:	f001 fa8d 	bl	8008878 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800735e:	e02d      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	0011      	movs	r1, r2
 8007366:	0018      	movs	r0, r3
 8007368:	f001 fa08 	bl	800877c <USBD_CtlError>
            ret = USBD_FAIL;
 800736c:	2317      	movs	r3, #23
 800736e:	18fb      	adds	r3, r7, r3
 8007370:	2202      	movs	r2, #2
 8007372:	701a      	strb	r2, [r3, #0]
          break;
 8007374:	e022      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	23a7      	movs	r3, #167	; 0xa7
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	5cd3      	ldrb	r3, [r2, r3]
 800737e:	2b03      	cmp	r3, #3
 8007380:	d106      	bne.n	8007390 <USBD_CUSTOM_HID_Setup+0x1c4>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	885b      	ldrh	r3, [r3, #2]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	001a      	movs	r2, r3
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	60da      	str	r2, [r3, #12]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800738e:	e015      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>
            USBD_CtlError(pdev, req);
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	0011      	movs	r1, r2
 8007396:	0018      	movs	r0, r3
 8007398:	f001 f9f0 	bl	800877c <USBD_CtlError>
            ret = USBD_FAIL;
 800739c:	2317      	movs	r3, #23
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	2202      	movs	r2, #2
 80073a2:	701a      	strb	r2, [r3, #0]
          break;
 80073a4:	e00a      	b.n	80073bc <USBD_CUSTOM_HID_Setup+0x1f0>

        default:
          USBD_CtlError(pdev, req);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0011      	movs	r1, r2
 80073ac:	0018      	movs	r0, r3
 80073ae:	f001 f9e5 	bl	800877c <USBD_CtlError>
          ret = USBD_FAIL;
 80073b2:	2317      	movs	r3, #23
 80073b4:	18fb      	adds	r3, r7, r3
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
          break;
 80073ba:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80073bc:	e00a      	b.n	80073d4 <USBD_CUSTOM_HID_Setup+0x208>

    default:
      USBD_CtlError(pdev, req);
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0011      	movs	r1, r2
 80073c4:	0018      	movs	r0, r3
 80073c6:	f001 f9d9 	bl	800877c <USBD_CtlError>
      ret = USBD_FAIL;
 80073ca:	2317      	movs	r3, #23
 80073cc:	18fb      	adds	r3, r7, r3
 80073ce:	2202      	movs	r2, #2
 80073d0:	701a      	strb	r2, [r3, #0]
      break;
 80073d2:	46c0      	nop			; (mov r8, r8)
  }
  return ret;
 80073d4:	2317      	movs	r3, #23
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	781b      	ldrb	r3, [r3, #0]
}
 80073da:	0018      	movs	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	b008      	add	sp, #32
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	080095dc 	.word	0x080095dc
 80073e8:	200000c8 	.word	0x200000c8

080073ec <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	1dbb      	adds	r3, r7, #6
 80073f8:	801a      	strh	r2, [r3, #0]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	23ae      	movs	r3, #174	; 0xae
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	58d3      	ldr	r3, [r2, r3]
 8007402:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	23a7      	movs	r3, #167	; 0xa7
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	5cd3      	ldrb	r3, [r2, r3]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d110      	bne.n	8007432 <USBD_CUSTOM_HID_SendReport+0x46>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	7d1b      	ldrb	r3, [r3, #20]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10a      	bne.n	800742e <USBD_CUSTOM_HID_SendReport+0x42>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2201      	movs	r2, #1
 800741c:	751a      	strb	r2, [r3, #20]
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800741e:	1dbb      	adds	r3, r7, #6
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	68ba      	ldr	r2, [r7, #8]
 8007424:	68f8      	ldr	r0, [r7, #12]
 8007426:	2181      	movs	r1, #129	; 0x81
 8007428:	f001 fea7 	bl	800917a <USBD_LL_Transmit>
 800742c:	e001      	b.n	8007432 <USBD_CUSTOM_HID_SendReport+0x46>
    }
    else
    {
      return USBD_BUSY;
 800742e:	2301      	movs	r3, #1
 8007430:	e000      	b.n	8007434 <USBD_CUSTOM_HID_SendReport+0x48>
    }
  }
  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	0018      	movs	r0, r3
 8007436:	46bd      	mov	sp, r7
 8007438:	b006      	add	sp, #24
 800743a:	bd80      	pop	{r7, pc}

0800743c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2229      	movs	r2, #41	; 0x29
 8007448:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800744a:	4b02      	ldr	r3, [pc, #8]	; (8007454 <USBD_CUSTOM_HID_GetFSCfgDesc+0x18>)
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b002      	add	sp, #8
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000044 	.word	0x20000044

08007458 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2229      	movs	r2, #41	; 0x29
 8007464:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8007466:	4b02      	ldr	r3, [pc, #8]	; (8007470 <USBD_CUSTOM_HID_GetHSCfgDesc+0x18>)
}
 8007468:	0018      	movs	r0, r3
 800746a:	46bd      	mov	sp, r7
 800746c:	b002      	add	sp, #8
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000070 	.word	0x20000070

08007474 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2229      	movs	r2, #41	; 0x29
 8007480:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007482:	4b02      	ldr	r3, [pc, #8]	; (800748c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007484:	0018      	movs	r0, r3
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}
 800748c:	2000009c 	.word	0x2000009c

08007490 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	000a      	movs	r2, r1
 800749a:	1cfb      	adds	r3, r7, #3
 800749c:	701a      	strb	r2, [r3, #0]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	23ae      	movs	r3, #174	; 0xae
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	58d3      	ldr	r3, [r2, r3]
 80074a6:	2200      	movs	r2, #0
 80074a8:	751a      	strb	r2, [r3, #20]

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	b002      	add	sp, #8
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	000a      	movs	r2, r1
 80074be:	1cfb      	adds	r3, r7, #3
 80074c0:	701a      	strb	r2, [r3, #0]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	23ae      	movs	r3, #174	; 0xae
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	58d3      	ldr	r3, [r2, r3]
 80074ca:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	23af      	movs	r3, #175	; 0xaf
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	58d3      	ldr	r3, [r2, r3]
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	0010      	movs	r0, r2
 80074da:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	2302      	movs	r3, #2
 80074e2:	2101      	movs	r1, #1
 80074e4:	f001 fe80 	bl	80091e8 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	0018      	movs	r0, r3
 80074ec:	46bd      	mov	sp, r7
 80074ee:	b004      	add	sp, #16
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	23ae      	movs	r3, #174	; 0xae
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	58d3      	ldr	r3, [r2, r3]
 8007502:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d10a      	bne.n	8007522 <USBD_CUSTOM_HID_EP0_RxReady+0x30>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf);
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	23af      	movs	r3, #175	; 0xaf
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	58d3      	ldr	r3, [r2, r3]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	0010      	movs	r0, r2
 800751a:	4798      	blx	r3
    hhid->IsReportAvailable = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	611a      	str	r2, [r3, #16]
  }

  return USBD_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	0018      	movs	r0, r3
 8007526:	46bd      	mov	sp, r7
 8007528:	b004      	add	sp, #16
 800752a:	bd80      	pop	{r7, pc}

0800752c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	220a      	movs	r2, #10
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800753a:	4b02      	ldr	r3, [pc, #8]	; (8007544 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x18>)
}
 800753c:	0018      	movs	r0, r3
 800753e:	46bd      	mov	sp, r7
 8007540:	b002      	add	sp, #8
 8007542:	bd80      	pop	{r7, pc}
 8007544:	200000d4 	.word	0x200000d4

08007548 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007552:	200f      	movs	r0, #15
 8007554:	183b      	adds	r3, r7, r0
 8007556:	2202      	movs	r2, #2
 8007558:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d007      	beq.n	8007570 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	23af      	movs	r3, #175	; 0xaf
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	6839      	ldr	r1, [r7, #0]
 8007568:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800756a:	183b      	adds	r3, r7, r0
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8007570:	230f      	movs	r3, #15
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	781b      	ldrb	r3, [r3, #0]
}
 8007576:	0018      	movs	r0, r3
 8007578:	46bd      	mov	sp, r7
 800757a:	b004      	add	sp, #16
 800757c:	bd80      	pop	{r7, pc}

0800757e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b084      	sub	sp, #16
 8007582:	af00      	add	r7, sp, #0
 8007584:	60f8      	str	r0, [r7, #12]
 8007586:	60b9      	str	r1, [r7, #8]
 8007588:	1dfb      	adds	r3, r7, #7
 800758a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007592:	2302      	movs	r3, #2
 8007594:	e020      	b.n	80075d8 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	23ad      	movs	r3, #173	; 0xad
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	58d3      	ldr	r3, [r2, r3]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	23ad      	movs	r3, #173	; 0xad
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	2100      	movs	r1, #0
 80075aa:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d004      	beq.n	80075bc <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	23ac      	movs	r3, #172	; 0xac
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	23a7      	movs	r3, #167	; 0xa7
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	2101      	movs	r1, #1
 80075c4:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1dfa      	adds	r2, r7, #7
 80075ca:	7812      	ldrb	r2, [r2, #0]
 80075cc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	0018      	movs	r0, r3
 80075d2:	f001 fc41 	bl	8008e58 <USBD_LL_Init>

  return USBD_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	0018      	movs	r0, r3
 80075da:	46bd      	mov	sp, r7
 80075dc:	b004      	add	sp, #16
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80075ea:	200f      	movs	r0, #15
 80075ec:	183b      	adds	r3, r7, r0
 80075ee:	2200      	movs	r2, #0
 80075f0:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d008      	beq.n	800760a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	23ad      	movs	r3, #173	; 0xad
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8007602:	183b      	adds	r3, r7, r0
 8007604:	2200      	movs	r2, #0
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e003      	b.n	8007612 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800760a:	230f      	movs	r3, #15
 800760c:	18fb      	adds	r3, r7, r3
 800760e:	2202      	movs	r2, #2
 8007610:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8007612:	230f      	movs	r3, #15
 8007614:	18fb      	adds	r3, r7, r3
 8007616:	781b      	ldrb	r3, [r3, #0]
}
 8007618:	0018      	movs	r0, r3
 800761a:	46bd      	mov	sp, r7
 800761c:	b004      	add	sp, #16
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0018      	movs	r0, r3
 800762c:	f001 fc6c 	bl	8008f08 <USBD_LL_Start>

  return USBD_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	0018      	movs	r0, r3
 8007634:	46bd      	mov	sp, r7
 8007636:	b002      	add	sp, #8
 8007638:	bd80      	pop	{r7, pc}

0800763a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	0018      	movs	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	b002      	add	sp, #8
 800764a:	bd80      	pop	{r7, pc}

0800764c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800764c:	b590      	push	{r4, r7, lr}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	000a      	movs	r2, r1
 8007656:	1cfb      	adds	r3, r7, #3
 8007658:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800765a:	240f      	movs	r4, #15
 800765c:	193b      	adds	r3, r7, r4
 800765e:	2202      	movs	r2, #2
 8007660:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	23ad      	movs	r3, #173	; 0xad
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	58d3      	ldr	r3, [r2, r3]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00e      	beq.n	800768c <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	23ad      	movs	r3, #173	; 0xad
 8007672:	009b      	lsls	r3, r3, #2
 8007674:	58d3      	ldr	r3, [r2, r3]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	1cfa      	adds	r2, r7, #3
 800767a:	7811      	ldrb	r1, [r2, #0]
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	0010      	movs	r0, r2
 8007680:	4798      	blx	r3
 8007682:	1e03      	subs	r3, r0, #0
 8007684:	d102      	bne.n	800768c <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8007686:	193b      	adds	r3, r7, r4
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800768c:	230f      	movs	r3, #15
 800768e:	18fb      	adds	r3, r7, r3
 8007690:	781b      	ldrb	r3, [r3, #0]
}
 8007692:	0018      	movs	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	b005      	add	sp, #20
 8007698:	bd90      	pop	{r4, r7, pc}

0800769a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	000a      	movs	r2, r1
 80076a4:	1cfb      	adds	r3, r7, #3
 80076a6:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	23ad      	movs	r3, #173	; 0xad
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	58d3      	ldr	r3, [r2, r3]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	1cfa      	adds	r2, r7, #3
 80076b4:	7811      	ldrb	r1, [r2, #0]
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	0010      	movs	r0, r2
 80076ba:	4798      	blx	r3

  return USBD_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	0018      	movs	r0, r3
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b002      	add	sp, #8
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b082      	sub	sp, #8
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	22aa      	movs	r2, #170	; 0xaa
 80076d6:	0092      	lsls	r2, r2, #2
 80076d8:	4694      	mov	ip, r2
 80076da:	4463      	add	r3, ip
 80076dc:	683a      	ldr	r2, [r7, #0]
 80076de:	0011      	movs	r1, r2
 80076e0:	0018      	movs	r0, r3
 80076e2:	f001 f810 	bl	8008706 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	23a5      	movs	r3, #165	; 0xa5
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	2101      	movs	r1, #1
 80076ee:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a23      	ldr	r2, [pc, #140]	; (8007780 <USBD_LL_SetupStage+0xb8>)
 80076f4:	5a9b      	ldrh	r3, [r3, r2]
 80076f6:	0019      	movs	r1, r3
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	23a6      	movs	r3, #166	; 0xa6
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	23aa      	movs	r3, #170	; 0xaa
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	5cd3      	ldrb	r3, [r2, r3]
 8007708:	001a      	movs	r2, r3
 800770a:	231f      	movs	r3, #31
 800770c:	4013      	ands	r3, r2
 800770e:	2b02      	cmp	r3, #2
 8007710:	d019      	beq.n	8007746 <USBD_LL_SetupStage+0x7e>
 8007712:	d822      	bhi.n	800775a <USBD_LL_SetupStage+0x92>
 8007714:	2b00      	cmp	r3, #0
 8007716:	d002      	beq.n	800771e <USBD_LL_SetupStage+0x56>
 8007718:	2b01      	cmp	r3, #1
 800771a:	d00a      	beq.n	8007732 <USBD_LL_SetupStage+0x6a>
 800771c:	e01d      	b.n	800775a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	22aa      	movs	r2, #170	; 0xaa
 8007722:	0092      	lsls	r2, r2, #2
 8007724:	189a      	adds	r2, r3, r2
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	0011      	movs	r1, r2
 800772a:	0018      	movs	r0, r3
 800772c:	f000 fa10 	bl	8007b50 <USBD_StdDevReq>
      break;
 8007730:	e020      	b.n	8007774 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	22aa      	movs	r2, #170	; 0xaa
 8007736:	0092      	lsls	r2, r2, #2
 8007738:	189a      	adds	r2, r3, r2
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	0011      	movs	r1, r2
 800773e:	0018      	movs	r0, r3
 8007740:	f000 fa78 	bl	8007c34 <USBD_StdItfReq>
      break;
 8007744:	e016      	b.n	8007774 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	22aa      	movs	r2, #170	; 0xaa
 800774a:	0092      	lsls	r2, r2, #2
 800774c:	189a      	adds	r2, r3, r2
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	0011      	movs	r1, r2
 8007752:	0018      	movs	r0, r3
 8007754:	f000 fac5 	bl	8007ce2 <USBD_StdEPReq>
      break;
 8007758:	e00c      	b.n	8007774 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	23aa      	movs	r3, #170	; 0xaa
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	5cd3      	ldrb	r3, [r2, r3]
 8007762:	227f      	movs	r2, #127	; 0x7f
 8007764:	4393      	bics	r3, r2
 8007766:	b2da      	uxtb	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	0011      	movs	r1, r2
 800776c:	0018      	movs	r0, r3
 800776e:	f001 fc52 	bl	8009016 <USBD_LL_StallEP>
      break;
 8007772:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	0018      	movs	r0, r3
 8007778:	46bd      	mov	sp, r7
 800777a:	b002      	add	sp, #8
 800777c:	bd80      	pop	{r7, pc}
 800777e:	46c0      	nop			; (mov r8, r8)
 8007780:	000002ae 	.word	0x000002ae

08007784 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	607a      	str	r2, [r7, #4]
 800778e:	200b      	movs	r0, #11
 8007790:	183b      	adds	r3, r7, r0
 8007792:	1c0a      	adds	r2, r1, #0
 8007794:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007796:	183b      	adds	r3, r7, r0
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d154      	bne.n	8007848 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3355      	adds	r3, #85	; 0x55
 80077a2:	33ff      	adds	r3, #255	; 0xff
 80077a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	23a5      	movs	r3, #165	; 0xa5
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	58d3      	ldr	r3, [r2, r3]
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d139      	bne.n	8007826 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d919      	bls.n	80077f2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d203      	bcs.n	80077e0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077dc:	b29b      	uxth	r3, r3
 80077de:	e002      	b.n	80077e6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	6879      	ldr	r1, [r7, #4]
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	001a      	movs	r2, r3
 80077ec:	f001 f89b 	bl	8008926 <USBD_CtlContinueRx>
 80077f0:	e045      	b.n	800787e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	23ad      	movs	r3, #173	; 0xad
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	58d3      	ldr	r3, [r2, r3]
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	23a7      	movs	r3, #167	; 0xa7
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007808:	2b03      	cmp	r3, #3
 800780a:	d107      	bne.n	800781c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	23ad      	movs	r3, #173	; 0xad
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	58d3      	ldr	r3, [r2, r3]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	0010      	movs	r0, r2
 800781a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	0018      	movs	r0, r3
 8007820:	f001 f894 	bl	800894c <USBD_CtlSendStatus>
 8007824:	e02b      	b.n	800787e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	23a5      	movs	r3, #165	; 0xa5
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	58d3      	ldr	r3, [r2, r3]
 800782e:	2b05      	cmp	r3, #5
 8007830:	d125      	bne.n	800787e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	23a5      	movs	r3, #165	; 0xa5
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	2100      	movs	r1, #0
 800783a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2100      	movs	r1, #0
 8007840:	0018      	movs	r0, r3
 8007842:	f001 fbe8 	bl	8009016 <USBD_LL_StallEP>
 8007846:	e01a      	b.n	800787e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	23ad      	movs	r3, #173	; 0xad
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	58d3      	ldr	r3, [r2, r3]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d011      	beq.n	800787a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	23a7      	movs	r3, #167	; 0xa7
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800785e:	2b03      	cmp	r3, #3
 8007860:	d10b      	bne.n	800787a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	23ad      	movs	r3, #173	; 0xad
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	58d3      	ldr	r3, [r2, r3]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	220b      	movs	r2, #11
 800786e:	18ba      	adds	r2, r7, r2
 8007870:	7811      	ldrb	r1, [r2, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	0010      	movs	r0, r2
 8007876:	4798      	blx	r3
 8007878:	e001      	b.n	800787e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800787a:	2302      	movs	r3, #2
 800787c:	e000      	b.n	8007880 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b006      	add	sp, #24
 8007886:	bd80      	pop	{r7, pc}

08007888 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	200b      	movs	r0, #11
 8007894:	183b      	adds	r3, r7, r0
 8007896:	1c0a      	adds	r2, r1, #0
 8007898:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800789a:	183b      	adds	r3, r7, r0
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d000      	beq.n	80078a4 <USBD_LL_DataInStage+0x1c>
 80078a2:	e08e      	b.n	80079c2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3314      	adds	r3, #20
 80078a8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	23a5      	movs	r3, #165	; 0xa5
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	58d3      	ldr	r3, [r2, r3]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d164      	bne.n	8007980 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d915      	bls.n	80078ee <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	1ad2      	subs	r2, r2, r3
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	0018      	movs	r0, r3
 80078dc:	f000 ffec 	bl	80088b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	2300      	movs	r3, #0
 80078e4:	2200      	movs	r2, #0
 80078e6:	2100      	movs	r1, #0
 80078e8:	f001 fc7e 	bl	80091e8 <USBD_LL_PrepareReceive>
 80078ec:	e059      	b.n	80079a2 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	689a      	ldr	r2, [r3, #8]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	0019      	movs	r1, r3
 80078f8:	0010      	movs	r0, r2
 80078fa:	f7f8 fc8b 	bl	8000214 <__aeabi_uidivmod>
 80078fe:	1e0b      	subs	r3, r1, #0
 8007900:	d11f      	bne.n	8007942 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	689a      	ldr	r2, [r3, #8]
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800790a:	429a      	cmp	r2, r3
 800790c:	d319      	bcc.n	8007942 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	23a6      	movs	r3, #166	; 0xa6
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800791a:	429a      	cmp	r2, r3
 800791c:	d211      	bcs.n	8007942 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	2100      	movs	r1, #0
 8007924:	0018      	movs	r0, r3
 8007926:	f000 ffc7 	bl	80088b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	23a6      	movs	r3, #166	; 0xa6
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	2100      	movs	r1, #0
 8007932:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007934:	68f8      	ldr	r0, [r7, #12]
 8007936:	2300      	movs	r3, #0
 8007938:	2200      	movs	r2, #0
 800793a:	2100      	movs	r1, #0
 800793c:	f001 fc54 	bl	80091e8 <USBD_LL_PrepareReceive>
 8007940:	e02f      	b.n	80079a2 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	23ad      	movs	r3, #173	; 0xad
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	58d3      	ldr	r3, [r2, r3]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00d      	beq.n	800796c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	23a7      	movs	r3, #167	; 0xa7
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007958:	2b03      	cmp	r3, #3
 800795a:	d107      	bne.n	800796c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	23ad      	movs	r3, #173	; 0xad
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	58d3      	ldr	r3, [r2, r3]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	0010      	movs	r0, r2
 800796a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2180      	movs	r1, #128	; 0x80
 8007970:	0018      	movs	r0, r3
 8007972:	f001 fb50 	bl	8009016 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	0018      	movs	r0, r3
 800797a:	f000 fffb 	bl	8008974 <USBD_CtlReceiveStatus>
 800797e:	e010      	b.n	80079a2 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	23a5      	movs	r3, #165	; 0xa5
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	58d3      	ldr	r3, [r2, r3]
 8007988:	2b04      	cmp	r3, #4
 800798a:	d005      	beq.n	8007998 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	23a5      	movs	r3, #165	; 0xa5
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007994:	2b00      	cmp	r3, #0
 8007996:	d104      	bne.n	80079a2 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2180      	movs	r1, #128	; 0x80
 800799c:	0018      	movs	r0, r3
 800799e:	f001 fb3a 	bl	8009016 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	23a8      	movs	r3, #168	; 0xa8
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	5cd3      	ldrb	r3, [r2, r3]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d124      	bne.n	80079f8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	0018      	movs	r0, r3
 80079b2:	f7ff fe42 	bl	800763a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	23a8      	movs	r3, #168	; 0xa8
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	2100      	movs	r1, #0
 80079be:	54d1      	strb	r1, [r2, r3]
 80079c0:	e01a      	b.n	80079f8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	23ad      	movs	r3, #173	; 0xad
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	58d3      	ldr	r3, [r2, r3]
 80079ca:	695b      	ldr	r3, [r3, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d011      	beq.n	80079f4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	23a7      	movs	r3, #167	; 0xa7
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80079d8:	2b03      	cmp	r3, #3
 80079da:	d10b      	bne.n	80079f4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80079dc:	68fa      	ldr	r2, [r7, #12]
 80079de:	23ad      	movs	r3, #173	; 0xad
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	58d3      	ldr	r3, [r2, r3]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	220b      	movs	r2, #11
 80079e8:	18ba      	adds	r2, r7, r2
 80079ea:	7811      	ldrb	r1, [r2, #0]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	0010      	movs	r0, r2
 80079f0:	4798      	blx	r3
 80079f2:	e001      	b.n	80079f8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079f4:	2302      	movs	r3, #2
 80079f6:	e000      	b.n	80079fa <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	0018      	movs	r0, r3
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b006      	add	sp, #24
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b082      	sub	sp, #8
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	2340      	movs	r3, #64	; 0x40
 8007a0e:	2200      	movs	r2, #0
 8007a10:	2100      	movs	r1, #0
 8007a12:	f001 fa9e 	bl	8008f52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	23ac      	movs	r3, #172	; 0xac
 8007a1a:	005b      	lsls	r3, r3, #1
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	23b2      	movs	r3, #178	; 0xb2
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	2140      	movs	r1, #64	; 0x40
 8007a28:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	2340      	movs	r3, #64	; 0x40
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2180      	movs	r1, #128	; 0x80
 8007a32:	f001 fa8e 	bl	8008f52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2240      	movs	r2, #64	; 0x40
 8007a40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	23a7      	movs	r3, #167	; 0xa7
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	2101      	movs	r1, #1
 8007a4a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	23a5      	movs	r3, #165	; 0xa5
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	2100      	movs	r1, #0
 8007a54:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	23a9      	movs	r3, #169	; 0xa9
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	2100      	movs	r1, #0
 8007a64:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	23ae      	movs	r3, #174	; 0xae
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	58d3      	ldr	r3, [r2, r3]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00a      	beq.n	8007a88 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a72:	687a      	ldr	r2, [r7, #4]
 8007a74:	23ad      	movs	r3, #173	; 0xad
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	58d3      	ldr	r3, [r2, r3]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	b2d9      	uxtb	r1, r3
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	0018      	movs	r0, r3
 8007a86:	4790      	blx	r2
  }

  return USBD_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b002      	add	sp, #8
 8007a90:	bd80      	pop	{r7, pc}

08007a92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b082      	sub	sp, #8
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	000a      	movs	r2, r1
 8007a9c:	1cfb      	adds	r3, r7, #3
 8007a9e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	1cfa      	adds	r2, r7, #3
 8007aa4:	7812      	ldrb	r2, [r2, #0]
 8007aa6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	0018      	movs	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b002      	add	sp, #8
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	23a7      	movs	r3, #167	; 0xa7
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	5cd1      	ldrb	r1, [r2, r3]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a06      	ldr	r2, [pc, #24]	; (8007ae0 <USBD_LL_Suspend+0x2c>)
 8007ac8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	23a7      	movs	r3, #167	; 0xa7
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	2104      	movs	r1, #4
 8007ad2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	0018      	movs	r0, r3
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	b002      	add	sp, #8
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	0000029d 	.word	0x0000029d

08007ae4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	23a7      	movs	r3, #167	; 0xa7
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d106      	bne.n	8007b06 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a05      	ldr	r2, [pc, #20]	; (8007b10 <USBD_LL_Resume+0x2c>)
 8007afc:	5c99      	ldrb	r1, [r3, r2]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	23a7      	movs	r3, #167	; 0xa7
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	0018      	movs	r0, r3
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	b002      	add	sp, #8
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	0000029d 	.word	0x0000029d

08007b14 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	23a7      	movs	r3, #167	; 0xa7
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	5cd3      	ldrb	r3, [r2, r3]
 8007b24:	2b03      	cmp	r3, #3
 8007b26:	d10e      	bne.n	8007b46 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	23ad      	movs	r3, #173	; 0xad
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	58d3      	ldr	r3, [r2, r3]
 8007b30:	69db      	ldr	r3, [r3, #28]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	23ad      	movs	r3, #173	; 0xad
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	58d3      	ldr	r3, [r2, r3]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	0010      	movs	r0, r2
 8007b44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b002      	add	sp, #8
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b5a:	230f      	movs	r3, #15
 8007b5c:	18fb      	adds	r3, r7, r3
 8007b5e:	2200      	movs	r2, #0
 8007b60:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	001a      	movs	r2, r3
 8007b68:	2360      	movs	r3, #96	; 0x60
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d004      	beq.n	8007b7a <USBD_StdDevReq+0x2a>
 8007b70:	d84f      	bhi.n	8007c12 <USBD_StdDevReq+0xc2>
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <USBD_StdDevReq+0x3e>
 8007b76:	2b20      	cmp	r3, #32
 8007b78:	d14b      	bne.n	8007c12 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	23ad      	movs	r3, #173	; 0xad
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	58d3      	ldr	r3, [r2, r3]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	0010      	movs	r0, r2
 8007b8a:	4798      	blx	r3
      break;
 8007b8c:	e048      	b.n	8007c20 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	785b      	ldrb	r3, [r3, #1]
 8007b92:	2b09      	cmp	r3, #9
 8007b94:	d835      	bhi.n	8007c02 <USBD_StdDevReq+0xb2>
 8007b96:	009a      	lsls	r2, r3, #2
 8007b98:	4b25      	ldr	r3, [pc, #148]	; (8007c30 <USBD_StdDevReq+0xe0>)
 8007b9a:	18d3      	adds	r3, r2, r3
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	0011      	movs	r1, r2
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f000 fa52 	bl	8008050 <USBD_GetDescriptor>
          break;
 8007bac:	e030      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	0011      	movs	r1, r2
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 fbfd 	bl	80083b4 <USBD_SetAddress>
          break;
 8007bba:	e029      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	0011      	movs	r1, r2
 8007bc2:	0018      	movs	r0, r3
 8007bc4:	f000 fc4a 	bl	800845c <USBD_SetConfig>
          break;
 8007bc8:	e022      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	0011      	movs	r1, r2
 8007bd0:	0018      	movs	r0, r3
 8007bd2:	f000 fce7 	bl	80085a4 <USBD_GetConfig>
          break;
 8007bd6:	e01b      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	0011      	movs	r1, r2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f000 fd1b 	bl	800861a <USBD_GetStatus>
          break;
 8007be4:	e014      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	0011      	movs	r1, r2
 8007bec:	0018      	movs	r0, r3
 8007bee:	f000 fd4e 	bl	800868e <USBD_SetFeature>
          break;
 8007bf2:	e00d      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	0011      	movs	r1, r2
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	f000 fd5d 	bl	80086ba <USBD_ClrFeature>
          break;
 8007c00:	e006      	b.n	8007c10 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	0011      	movs	r1, r2
 8007c08:	0018      	movs	r0, r3
 8007c0a:	f000 fdb7 	bl	800877c <USBD_CtlError>
          break;
 8007c0e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007c10:	e006      	b.n	8007c20 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	0011      	movs	r1, r2
 8007c18:	0018      	movs	r0, r3
 8007c1a:	f000 fdaf 	bl	800877c <USBD_CtlError>
      break;
 8007c1e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007c20:	230f      	movs	r3, #15
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	781b      	ldrb	r3, [r3, #0]
}
 8007c26:	0018      	movs	r0, r3
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	b004      	add	sp, #16
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	0800960c 	.word	0x0800960c

08007c34 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007c34:	b5b0      	push	{r4, r5, r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c3e:	230f      	movs	r3, #15
 8007c40:	18fb      	adds	r3, r7, r3
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	2360      	movs	r3, #96	; 0x60
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	d004      	beq.n	8007c5e <USBD_StdItfReq+0x2a>
 8007c54:	d839      	bhi.n	8007cca <USBD_StdItfReq+0x96>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d001      	beq.n	8007c5e <USBD_StdItfReq+0x2a>
 8007c5a:	2b20      	cmp	r3, #32
 8007c5c:	d135      	bne.n	8007cca <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	23a7      	movs	r3, #167	; 0xa7
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	5cd3      	ldrb	r3, [r2, r3]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d825      	bhi.n	8007cb8 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	889b      	ldrh	r3, [r3, #4]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d819      	bhi.n	8007caa <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	23ad      	movs	r3, #173	; 0xad
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	58d3      	ldr	r3, [r2, r3]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	250f      	movs	r5, #15
 8007c82:	197c      	adds	r4, r7, r5
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	0010      	movs	r0, r2
 8007c8a:	4798      	blx	r3
 8007c8c:	0003      	movs	r3, r0
 8007c8e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	88db      	ldrh	r3, [r3, #6]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d116      	bne.n	8007cc6 <USBD_StdItfReq+0x92>
 8007c98:	197b      	adds	r3, r7, r5
 8007c9a:	781b      	ldrb	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d112      	bne.n	8007cc6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	0018      	movs	r0, r3
 8007ca4:	f000 fe52 	bl	800894c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007ca8:	e00d      	b.n	8007cc6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	0011      	movs	r1, r2
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f000 fd63 	bl	800877c <USBD_CtlError>
          break;
 8007cb6:	e006      	b.n	8007cc6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	0011      	movs	r1, r2
 8007cbe:	0018      	movs	r0, r3
 8007cc0:	f000 fd5c 	bl	800877c <USBD_CtlError>
          break;
 8007cc4:	e000      	b.n	8007cc8 <USBD_StdItfReq+0x94>
          break;
 8007cc6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007cc8:	e006      	b.n	8007cd8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	0011      	movs	r1, r2
 8007cd0:	0018      	movs	r0, r3
 8007cd2:	f000 fd53 	bl	800877c <USBD_CtlError>
      break;
 8007cd6:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b004      	add	sp, #16
 8007ce0:	bdb0      	pop	{r4, r5, r7, pc}

08007ce2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007ce2:	b5b0      	push	{r4, r5, r7, lr}
 8007ce4:	b084      	sub	sp, #16
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
 8007cea:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cec:	230f      	movs	r3, #15
 8007cee:	18fb      	adds	r3, r7, r3
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	889a      	ldrh	r2, [r3, #4]
 8007cf8:	230e      	movs	r3, #14
 8007cfa:	18fb      	adds	r3, r7, r3
 8007cfc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	001a      	movs	r2, r3
 8007d04:	2360      	movs	r3, #96	; 0x60
 8007d06:	4013      	ands	r3, r2
 8007d08:	2b40      	cmp	r3, #64	; 0x40
 8007d0a:	d006      	beq.n	8007d1a <USBD_StdEPReq+0x38>
 8007d0c:	d900      	bls.n	8007d10 <USBD_StdEPReq+0x2e>
 8007d0e:	e190      	b.n	8008032 <USBD_StdEPReq+0x350>
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00c      	beq.n	8007d2e <USBD_StdEPReq+0x4c>
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d000      	beq.n	8007d1a <USBD_StdEPReq+0x38>
 8007d18:	e18b      	b.n	8008032 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	23ad      	movs	r3, #173	; 0xad
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	58d3      	ldr	r3, [r2, r3]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	0010      	movs	r0, r2
 8007d2a:	4798      	blx	r3
      break;
 8007d2c:	e188      	b.n	8008040 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	001a      	movs	r2, r3
 8007d34:	2360      	movs	r3, #96	; 0x60
 8007d36:	4013      	ands	r3, r2
 8007d38:	2b20      	cmp	r3, #32
 8007d3a:	d10f      	bne.n	8007d5c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	23ad      	movs	r3, #173	; 0xad
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	58d3      	ldr	r3, [r2, r3]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	250f      	movs	r5, #15
 8007d48:	197c      	adds	r4, r7, r5
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	0010      	movs	r0, r2
 8007d50:	4798      	blx	r3
 8007d52:	0003      	movs	r3, r0
 8007d54:	7023      	strb	r3, [r4, #0]

        return ret;
 8007d56:	197b      	adds	r3, r7, r5
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	e174      	b.n	8008046 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	2b03      	cmp	r3, #3
 8007d62:	d007      	beq.n	8007d74 <USBD_StdEPReq+0x92>
 8007d64:	dd00      	ble.n	8007d68 <USBD_StdEPReq+0x86>
 8007d66:	e15c      	b.n	8008022 <USBD_StdEPReq+0x340>
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d100      	bne.n	8007d6e <USBD_StdEPReq+0x8c>
 8007d6c:	e092      	b.n	8007e94 <USBD_StdEPReq+0x1b2>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d04b      	beq.n	8007e0a <USBD_StdEPReq+0x128>
 8007d72:	e156      	b.n	8008022 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	23a7      	movs	r3, #167	; 0xa7
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	5cd3      	ldrb	r3, [r2, r3]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d002      	beq.n	8007d86 <USBD_StdEPReq+0xa4>
 8007d80:	2b03      	cmp	r3, #3
 8007d82:	d01d      	beq.n	8007dc0 <USBD_StdEPReq+0xde>
 8007d84:	e039      	b.n	8007dfa <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d86:	220e      	movs	r2, #14
 8007d88:	18bb      	adds	r3, r7, r2
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d010      	beq.n	8007db2 <USBD_StdEPReq+0xd0>
 8007d90:	18bb      	adds	r3, r7, r2
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b80      	cmp	r3, #128	; 0x80
 8007d96:	d00c      	beq.n	8007db2 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d98:	18bb      	adds	r3, r7, r2
 8007d9a:	781a      	ldrb	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	0011      	movs	r1, r2
 8007da0:	0018      	movs	r0, r3
 8007da2:	f001 f938 	bl	8009016 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2180      	movs	r1, #128	; 0x80
 8007daa:	0018      	movs	r0, r3
 8007dac:	f001 f933 	bl	8009016 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007db0:	e02a      	b.n	8007e08 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	0011      	movs	r1, r2
 8007db8:	0018      	movs	r0, r3
 8007dba:	f000 fcdf 	bl	800877c <USBD_CtlError>
              break;
 8007dbe:	e023      	b.n	8007e08 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	885b      	ldrh	r3, [r3, #2]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d113      	bne.n	8007df0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8007dc8:	220e      	movs	r2, #14
 8007dca:	18bb      	adds	r3, r7, r2
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00e      	beq.n	8007df0 <USBD_StdEPReq+0x10e>
 8007dd2:	18bb      	adds	r3, r7, r2
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	2b80      	cmp	r3, #128	; 0x80
 8007dd8:	d00a      	beq.n	8007df0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	88db      	ldrh	r3, [r3, #6]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d106      	bne.n	8007df0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007de2:	18bb      	adds	r3, r7, r2
 8007de4:	781a      	ldrb	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	0011      	movs	r1, r2
 8007dea:	0018      	movs	r0, r3
 8007dec:	f001 f913 	bl	8009016 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	0018      	movs	r0, r3
 8007df4:	f000 fdaa 	bl	800894c <USBD_CtlSendStatus>

              break;
 8007df8:	e006      	b.n	8007e08 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8007dfa:	683a      	ldr	r2, [r7, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	0011      	movs	r1, r2
 8007e00:	0018      	movs	r0, r3
 8007e02:	f000 fcbb 	bl	800877c <USBD_CtlError>
              break;
 8007e06:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007e08:	e112      	b.n	8008030 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	23a7      	movs	r3, #167	; 0xa7
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	5cd3      	ldrb	r3, [r2, r3]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d002      	beq.n	8007e1c <USBD_StdEPReq+0x13a>
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d01d      	beq.n	8007e56 <USBD_StdEPReq+0x174>
 8007e1a:	e032      	b.n	8007e82 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e1c:	220e      	movs	r2, #14
 8007e1e:	18bb      	adds	r3, r7, r2
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d010      	beq.n	8007e48 <USBD_StdEPReq+0x166>
 8007e26:	18bb      	adds	r3, r7, r2
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	d00c      	beq.n	8007e48 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007e2e:	18bb      	adds	r3, r7, r2
 8007e30:	781a      	ldrb	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	0011      	movs	r1, r2
 8007e36:	0018      	movs	r0, r3
 8007e38:	f001 f8ed 	bl	8009016 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2180      	movs	r1, #128	; 0x80
 8007e40:	0018      	movs	r0, r3
 8007e42:	f001 f8e8 	bl	8009016 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007e46:	e024      	b.n	8007e92 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8007e48:	683a      	ldr	r2, [r7, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	0011      	movs	r1, r2
 8007e4e:	0018      	movs	r0, r3
 8007e50:	f000 fc94 	bl	800877c <USBD_CtlError>
              break;
 8007e54:	e01d      	b.n	8007e92 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	885b      	ldrh	r3, [r3, #2]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d118      	bne.n	8007e90 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e5e:	210e      	movs	r1, #14
 8007e60:	187b      	adds	r3, r7, r1
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	227f      	movs	r2, #127	; 0x7f
 8007e66:	4013      	ands	r3, r2
 8007e68:	d006      	beq.n	8007e78 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e6a:	187b      	adds	r3, r7, r1
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	0011      	movs	r1, r2
 8007e72:	0018      	movs	r0, r3
 8007e74:	f001 f8fa 	bl	800906c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f000 fd66 	bl	800894c <USBD_CtlSendStatus>
              }
              break;
 8007e80:	e006      	b.n	8007e90 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	0011      	movs	r1, r2
 8007e88:	0018      	movs	r0, r3
 8007e8a:	f000 fc77 	bl	800877c <USBD_CtlError>
              break;
 8007e8e:	e000      	b.n	8007e92 <USBD_StdEPReq+0x1b0>
              break;
 8007e90:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8007e92:	e0cd      	b.n	8008030 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	23a7      	movs	r3, #167	; 0xa7
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	5cd3      	ldrb	r3, [r2, r3]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d002      	beq.n	8007ea6 <USBD_StdEPReq+0x1c4>
 8007ea0:	2b03      	cmp	r3, #3
 8007ea2:	d03c      	beq.n	8007f1e <USBD_StdEPReq+0x23c>
 8007ea4:	e0b5      	b.n	8008012 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ea6:	220e      	movs	r2, #14
 8007ea8:	18bb      	adds	r3, r7, r2
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00a      	beq.n	8007ec6 <USBD_StdEPReq+0x1e4>
 8007eb0:	18bb      	adds	r3, r7, r2
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	2b80      	cmp	r3, #128	; 0x80
 8007eb6:	d006      	beq.n	8007ec6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8007eb8:	683a      	ldr	r2, [r7, #0]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	0011      	movs	r1, r2
 8007ebe:	0018      	movs	r0, r3
 8007ec0:	f000 fc5c 	bl	800877c <USBD_CtlError>
                break;
 8007ec4:	e0ac      	b.n	8008020 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ec6:	220e      	movs	r2, #14
 8007ec8:	18bb      	adds	r3, r7, r2
 8007eca:	781b      	ldrb	r3, [r3, #0]
 8007ecc:	b25b      	sxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	da0c      	bge.n	8007eec <USBD_StdEPReq+0x20a>
 8007ed2:	18bb      	adds	r3, r7, r2
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	227f      	movs	r2, #127	; 0x7f
 8007ed8:	401a      	ands	r2, r3
 8007eda:	0013      	movs	r3, r2
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	189b      	adds	r3, r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	3310      	adds	r3, #16
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	18d3      	adds	r3, r2, r3
 8007ee8:	3304      	adds	r3, #4
 8007eea:	e00d      	b.n	8007f08 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007eec:	230e      	movs	r3, #14
 8007eee:	18fb      	adds	r3, r7, r3
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	227f      	movs	r2, #127	; 0x7f
 8007ef4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ef6:	0013      	movs	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	189b      	adds	r3, r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	3351      	adds	r3, #81	; 0x51
 8007f00:	33ff      	adds	r3, #255	; 0xff
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	18d3      	adds	r3, r2, r3
 8007f06:	3304      	adds	r3, #4
 8007f08:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007f10:	68b9      	ldr	r1, [r7, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2202      	movs	r2, #2
 8007f16:	0018      	movs	r0, r3
 8007f18:	f000 fcae 	bl	8008878 <USBD_CtlSendData>
              break;
 8007f1c:	e080      	b.n	8008020 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007f1e:	220e      	movs	r2, #14
 8007f20:	18bb      	adds	r3, r7, r2
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	b25b      	sxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	da14      	bge.n	8007f54 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007f2a:	18bb      	adds	r3, r7, r2
 8007f2c:	781b      	ldrb	r3, [r3, #0]
 8007f2e:	220f      	movs	r2, #15
 8007f30:	401a      	ands	r2, r3
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	0013      	movs	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	189b      	adds	r3, r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	18cb      	adds	r3, r1, r3
 8007f3e:	3318      	adds	r3, #24
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d11e      	bne.n	8007f84 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007f46:	683a      	ldr	r2, [r7, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	0011      	movs	r1, r2
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f000 fc15 	bl	800877c <USBD_CtlError>
                  break;
 8007f52:	e065      	b.n	8008020 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007f54:	230e      	movs	r3, #14
 8007f56:	18fb      	adds	r3, r7, r3
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	220f      	movs	r2, #15
 8007f5c:	401a      	ands	r2, r3
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	23ac      	movs	r3, #172	; 0xac
 8007f62:	0059      	lsls	r1, r3, #1
 8007f64:	0013      	movs	r3, r2
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	189b      	adds	r3, r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	18c3      	adds	r3, r0, r3
 8007f6e:	185b      	adds	r3, r3, r1
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d106      	bne.n	8007f84 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8007f76:	683a      	ldr	r2, [r7, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	0011      	movs	r1, r2
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f000 fbfd 	bl	800877c <USBD_CtlError>
                  break;
 8007f82:	e04d      	b.n	8008020 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007f84:	220e      	movs	r2, #14
 8007f86:	18bb      	adds	r3, r7, r2
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	b25b      	sxtb	r3, r3
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da0c      	bge.n	8007faa <USBD_StdEPReq+0x2c8>
 8007f90:	18bb      	adds	r3, r7, r2
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	227f      	movs	r2, #127	; 0x7f
 8007f96:	401a      	ands	r2, r3
 8007f98:	0013      	movs	r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	189b      	adds	r3, r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	3310      	adds	r3, #16
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	e00d      	b.n	8007fc6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007faa:	230e      	movs	r3, #14
 8007fac:	18fb      	adds	r3, r7, r3
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	227f      	movs	r2, #127	; 0x7f
 8007fb2:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007fb4:	0013      	movs	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	189b      	adds	r3, r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	3351      	adds	r3, #81	; 0x51
 8007fbe:	33ff      	adds	r3, #255	; 0xff
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	18d3      	adds	r3, r2, r3
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007fc8:	220e      	movs	r2, #14
 8007fca:	18bb      	adds	r3, r7, r2
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <USBD_StdEPReq+0x2f8>
 8007fd2:	18bb      	adds	r3, r7, r2
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d103      	bne.n	8007fe2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e010      	b.n	8008004 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007fe2:	230e      	movs	r3, #14
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	781a      	ldrb	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	0011      	movs	r1, r2
 8007fec:	0018      	movs	r0, r3
 8007fee:	f001 f868 	bl	80090c2 <USBD_LL_IsStallEP>
 8007ff2:	1e03      	subs	r3, r0, #0
 8007ff4:	d003      	beq.n	8007ffe <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e002      	b.n	8008004 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008004:	68b9      	ldr	r1, [r7, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	0018      	movs	r0, r3
 800800c:	f000 fc34 	bl	8008878 <USBD_CtlSendData>
              break;
 8008010:	e006      	b.n	8008020 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	0011      	movs	r1, r2
 8008018:	0018      	movs	r0, r3
 800801a:	f000 fbaf 	bl	800877c <USBD_CtlError>
              break;
 800801e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8008020:	e006      	b.n	8008030 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	0011      	movs	r1, r2
 8008028:	0018      	movs	r0, r3
 800802a:	f000 fba7 	bl	800877c <USBD_CtlError>
          break;
 800802e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8008030:	e006      	b.n	8008040 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	0011      	movs	r1, r2
 8008038:	0018      	movs	r0, r3
 800803a:	f000 fb9f 	bl	800877c <USBD_CtlError>
      break;
 800803e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8008040:	230f      	movs	r3, #15
 8008042:	18fb      	adds	r3, r7, r3
 8008044:	781b      	ldrb	r3, [r3, #0]
}
 8008046:	0018      	movs	r0, r3
 8008048:	46bd      	mov	sp, r7
 800804a:	b004      	add	sp, #16
 800804c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008050 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800805a:	2308      	movs	r3, #8
 800805c:	18fb      	adds	r3, r7, r3
 800805e:	2200      	movs	r2, #0
 8008060:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008066:	230b      	movs	r3, #11
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	2200      	movs	r2, #0
 800806c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	885b      	ldrh	r3, [r3, #2]
 8008072:	0a1b      	lsrs	r3, r3, #8
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b07      	cmp	r3, #7
 8008078:	d900      	bls.n	800807c <USBD_GetDescriptor+0x2c>
 800807a:	e159      	b.n	8008330 <USBD_GetDescriptor+0x2e0>
 800807c:	009a      	lsls	r2, r3, #2
 800807e:	4bcb      	ldr	r3, [pc, #812]	; (80083ac <USBD_GetDescriptor+0x35c>)
 8008080:	18d3      	adds	r3, r2, r3
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	23ac      	movs	r3, #172	; 0xac
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	58d3      	ldr	r3, [r2, r3]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	7c12      	ldrb	r2, [r2, #16]
 8008094:	2108      	movs	r1, #8
 8008096:	1879      	adds	r1, r7, r1
 8008098:	0010      	movs	r0, r2
 800809a:	4798      	blx	r3
 800809c:	0003      	movs	r3, r0
 800809e:	60fb      	str	r3, [r7, #12]
      break;
 80080a0:	e153      	b.n	800834a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	7c1b      	ldrb	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10f      	bne.n	80080ca <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	23ad      	movs	r3, #173	; 0xad
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	58d3      	ldr	r3, [r2, r3]
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	2208      	movs	r2, #8
 80080b6:	18ba      	adds	r2, r7, r2
 80080b8:	0010      	movs	r0, r2
 80080ba:	4798      	blx	r3
 80080bc:	0003      	movs	r3, r0
 80080be:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	3301      	adds	r3, #1
 80080c4:	2202      	movs	r2, #2
 80080c6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80080c8:	e13f      	b.n	800834a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	23ad      	movs	r3, #173	; 0xad
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	58d3      	ldr	r3, [r2, r3]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	2208      	movs	r2, #8
 80080d6:	18ba      	adds	r2, r7, r2
 80080d8:	0010      	movs	r0, r2
 80080da:	4798      	blx	r3
 80080dc:	0003      	movs	r3, r0
 80080de:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	3301      	adds	r3, #1
 80080e4:	2202      	movs	r2, #2
 80080e6:	701a      	strb	r2, [r3, #0]
      break;
 80080e8:	e12f      	b.n	800834a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	885b      	ldrh	r3, [r3, #2]
 80080ee:	b2db      	uxtb	r3, r3
 80080f0:	2b05      	cmp	r3, #5
 80080f2:	d900      	bls.n	80080f6 <USBD_GetDescriptor+0xa6>
 80080f4:	e0d0      	b.n	8008298 <USBD_GetDescriptor+0x248>
 80080f6:	009a      	lsls	r2, r3, #2
 80080f8:	4bad      	ldr	r3, [pc, #692]	; (80083b0 <USBD_GetDescriptor+0x360>)
 80080fa:	18d3      	adds	r3, r2, r3
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	23ac      	movs	r3, #172	; 0xac
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	58d3      	ldr	r3, [r2, r3]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23ac      	movs	r3, #172	; 0xac
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58d3      	ldr	r3, [r2, r3]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	7c12      	ldrb	r2, [r2, #16]
 800811c:	2108      	movs	r1, #8
 800811e:	1879      	adds	r1, r7, r1
 8008120:	0010      	movs	r0, r2
 8008122:	4798      	blx	r3
 8008124:	0003      	movs	r3, r0
 8008126:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008128:	e0c3      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	0011      	movs	r1, r2
 8008130:	0018      	movs	r0, r3
 8008132:	f000 fb23 	bl	800877c <USBD_CtlError>
            err++;
 8008136:	210b      	movs	r1, #11
 8008138:	187b      	adds	r3, r7, r1
 800813a:	781a      	ldrb	r2, [r3, #0]
 800813c:	187b      	adds	r3, r7, r1
 800813e:	3201      	adds	r2, #1
 8008140:	701a      	strb	r2, [r3, #0]
          break;
 8008142:	e0b6      	b.n	80082b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008144:	687a      	ldr	r2, [r7, #4]
 8008146:	23ac      	movs	r3, #172	; 0xac
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	58d3      	ldr	r3, [r2, r3]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00d      	beq.n	800816e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	23ac      	movs	r3, #172	; 0xac
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	58d3      	ldr	r3, [r2, r3]
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	7c12      	ldrb	r2, [r2, #16]
 8008160:	2108      	movs	r1, #8
 8008162:	1879      	adds	r1, r7, r1
 8008164:	0010      	movs	r0, r2
 8008166:	4798      	blx	r3
 8008168:	0003      	movs	r3, r0
 800816a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800816c:	e0a1      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	0011      	movs	r1, r2
 8008174:	0018      	movs	r0, r3
 8008176:	f000 fb01 	bl	800877c <USBD_CtlError>
            err++;
 800817a:	210b      	movs	r1, #11
 800817c:	187b      	adds	r3, r7, r1
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	187b      	adds	r3, r7, r1
 8008182:	3201      	adds	r2, #1
 8008184:	701a      	strb	r2, [r3, #0]
          break;
 8008186:	e094      	b.n	80082b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	23ac      	movs	r3, #172	; 0xac
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	58d3      	ldr	r3, [r2, r3]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d00d      	beq.n	80081b2 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	23ac      	movs	r3, #172	; 0xac
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	58d3      	ldr	r3, [r2, r3]
 800819e:	68db      	ldr	r3, [r3, #12]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	7c12      	ldrb	r2, [r2, #16]
 80081a4:	2108      	movs	r1, #8
 80081a6:	1879      	adds	r1, r7, r1
 80081a8:	0010      	movs	r0, r2
 80081aa:	4798      	blx	r3
 80081ac:	0003      	movs	r3, r0
 80081ae:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081b0:	e07f      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	0011      	movs	r1, r2
 80081b8:	0018      	movs	r0, r3
 80081ba:	f000 fadf 	bl	800877c <USBD_CtlError>
            err++;
 80081be:	210b      	movs	r1, #11
 80081c0:	187b      	adds	r3, r7, r1
 80081c2:	781a      	ldrb	r2, [r3, #0]
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	3201      	adds	r2, #1
 80081c8:	701a      	strb	r2, [r3, #0]
          break;
 80081ca:	e072      	b.n	80082b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	23ac      	movs	r3, #172	; 0xac
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	58d3      	ldr	r3, [r2, r3]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00d      	beq.n	80081f6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	23ac      	movs	r3, #172	; 0xac
 80081de:	009b      	lsls	r3, r3, #2
 80081e0:	58d3      	ldr	r3, [r2, r3]
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	7c12      	ldrb	r2, [r2, #16]
 80081e8:	2108      	movs	r1, #8
 80081ea:	1879      	adds	r1, r7, r1
 80081ec:	0010      	movs	r0, r2
 80081ee:	4798      	blx	r3
 80081f0:	0003      	movs	r3, r0
 80081f2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80081f4:	e05d      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	0011      	movs	r1, r2
 80081fc:	0018      	movs	r0, r3
 80081fe:	f000 fabd 	bl	800877c <USBD_CtlError>
            err++;
 8008202:	210b      	movs	r1, #11
 8008204:	187b      	adds	r3, r7, r1
 8008206:	781a      	ldrb	r2, [r3, #0]
 8008208:	187b      	adds	r3, r7, r1
 800820a:	3201      	adds	r2, #1
 800820c:	701a      	strb	r2, [r3, #0]
          break;
 800820e:	e050      	b.n	80082b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	23ac      	movs	r3, #172	; 0xac
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	58d3      	ldr	r3, [r2, r3]
 8008218:	695b      	ldr	r3, [r3, #20]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00d      	beq.n	800823a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	23ac      	movs	r3, #172	; 0xac
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	58d3      	ldr	r3, [r2, r3]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	7c12      	ldrb	r2, [r2, #16]
 800822c:	2108      	movs	r1, #8
 800822e:	1879      	adds	r1, r7, r1
 8008230:	0010      	movs	r0, r2
 8008232:	4798      	blx	r3
 8008234:	0003      	movs	r3, r0
 8008236:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008238:	e03b      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	0011      	movs	r1, r2
 8008240:	0018      	movs	r0, r3
 8008242:	f000 fa9b 	bl	800877c <USBD_CtlError>
            err++;
 8008246:	210b      	movs	r1, #11
 8008248:	187b      	adds	r3, r7, r1
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	187b      	adds	r3, r7, r1
 800824e:	3201      	adds	r2, #1
 8008250:	701a      	strb	r2, [r3, #0]
          break;
 8008252:	e02e      	b.n	80082b2 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008254:	687a      	ldr	r2, [r7, #4]
 8008256:	23ac      	movs	r3, #172	; 0xac
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	58d3      	ldr	r3, [r2, r3]
 800825c:	699b      	ldr	r3, [r3, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	23ac      	movs	r3, #172	; 0xac
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	58d3      	ldr	r3, [r2, r3]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	7c12      	ldrb	r2, [r2, #16]
 8008270:	2108      	movs	r1, #8
 8008272:	1879      	adds	r1, r7, r1
 8008274:	0010      	movs	r0, r2
 8008276:	4798      	blx	r3
 8008278:	0003      	movs	r3, r0
 800827a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800827c:	e019      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800827e:	683a      	ldr	r2, [r7, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	0011      	movs	r1, r2
 8008284:	0018      	movs	r0, r3
 8008286:	f000 fa79 	bl	800877c <USBD_CtlError>
            err++;
 800828a:	210b      	movs	r1, #11
 800828c:	187b      	adds	r3, r7, r1
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	187b      	adds	r3, r7, r1
 8008292:	3201      	adds	r2, #1
 8008294:	701a      	strb	r2, [r3, #0]
          break;
 8008296:	e00c      	b.n	80082b2 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	0011      	movs	r1, r2
 800829e:	0018      	movs	r0, r3
 80082a0:	f000 fa6c 	bl	800877c <USBD_CtlError>
          err++;
 80082a4:	210b      	movs	r1, #11
 80082a6:	187b      	adds	r3, r7, r1
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	187b      	adds	r3, r7, r1
 80082ac:	3201      	adds	r2, #1
 80082ae:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80082b0:	e04b      	b.n	800834a <USBD_GetDescriptor+0x2fa>
 80082b2:	e04a      	b.n	800834a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	7c1b      	ldrb	r3, [r3, #16]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10b      	bne.n	80082d4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	23ad      	movs	r3, #173	; 0xad
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	58d3      	ldr	r3, [r2, r3]
 80082c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c6:	2208      	movs	r2, #8
 80082c8:	18ba      	adds	r2, r7, r2
 80082ca:	0010      	movs	r0, r2
 80082cc:	4798      	blx	r3
 80082ce:	0003      	movs	r3, r0
 80082d0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80082d2:	e03a      	b.n	800834a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	0011      	movs	r1, r2
 80082da:	0018      	movs	r0, r3
 80082dc:	f000 fa4e 	bl	800877c <USBD_CtlError>
        err++;
 80082e0:	210b      	movs	r1, #11
 80082e2:	187b      	adds	r3, r7, r1
 80082e4:	781a      	ldrb	r2, [r3, #0]
 80082e6:	187b      	adds	r3, r7, r1
 80082e8:	3201      	adds	r2, #1
 80082ea:	701a      	strb	r2, [r3, #0]
      break;
 80082ec:	e02d      	b.n	800834a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	7c1b      	ldrb	r3, [r3, #16]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d10f      	bne.n	8008316 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	23ad      	movs	r3, #173	; 0xad
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	58d3      	ldr	r3, [r2, r3]
 80082fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008300:	2208      	movs	r2, #8
 8008302:	18ba      	adds	r2, r7, r2
 8008304:	0010      	movs	r0, r2
 8008306:	4798      	blx	r3
 8008308:	0003      	movs	r3, r0
 800830a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	2207      	movs	r2, #7
 8008312:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008314:	e019      	b.n	800834a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8008316:	683a      	ldr	r2, [r7, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	0011      	movs	r1, r2
 800831c:	0018      	movs	r0, r3
 800831e:	f000 fa2d 	bl	800877c <USBD_CtlError>
        err++;
 8008322:	210b      	movs	r1, #11
 8008324:	187b      	adds	r3, r7, r1
 8008326:	781a      	ldrb	r2, [r3, #0]
 8008328:	187b      	adds	r3, r7, r1
 800832a:	3201      	adds	r2, #1
 800832c:	701a      	strb	r2, [r3, #0]
      break;
 800832e:	e00c      	b.n	800834a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8008330:	683a      	ldr	r2, [r7, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	0011      	movs	r1, r2
 8008336:	0018      	movs	r0, r3
 8008338:	f000 fa20 	bl	800877c <USBD_CtlError>
      err++;
 800833c:	210b      	movs	r1, #11
 800833e:	187b      	adds	r3, r7, r1
 8008340:	781a      	ldrb	r2, [r3, #0]
 8008342:	187b      	adds	r3, r7, r1
 8008344:	3201      	adds	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
      break;
 8008348:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800834a:	230b      	movs	r3, #11
 800834c:	18fb      	adds	r3, r7, r3
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d127      	bne.n	80083a4 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008354:	2108      	movs	r1, #8
 8008356:	187b      	adds	r3, r7, r1
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d019      	beq.n	8008392 <USBD_GetDescriptor+0x342>
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	88db      	ldrh	r3, [r3, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d015      	beq.n	8008392 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	88da      	ldrh	r2, [r3, #6]
 800836a:	187b      	adds	r3, r7, r1
 800836c:	881b      	ldrh	r3, [r3, #0]
 800836e:	1c18      	adds	r0, r3, #0
 8008370:	1c11      	adds	r1, r2, #0
 8008372:	b28a      	uxth	r2, r1
 8008374:	b283      	uxth	r3, r0
 8008376:	429a      	cmp	r2, r3
 8008378:	d900      	bls.n	800837c <USBD_GetDescriptor+0x32c>
 800837a:	1c01      	adds	r1, r0, #0
 800837c:	b28a      	uxth	r2, r1
 800837e:	2108      	movs	r1, #8
 8008380:	187b      	adds	r3, r7, r1
 8008382:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008384:	187b      	adds	r3, r7, r1
 8008386:	881a      	ldrh	r2, [r3, #0]
 8008388:	68f9      	ldr	r1, [r7, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	0018      	movs	r0, r3
 800838e:	f000 fa73 	bl	8008878 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	88db      	ldrh	r3, [r3, #6]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	0018      	movs	r0, r3
 800839e:	f000 fad5 	bl	800894c <USBD_CtlSendStatus>
 80083a2:	e000      	b.n	80083a6 <USBD_GetDescriptor+0x356>
    return;
 80083a4:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80083a6:	46bd      	mov	sp, r7
 80083a8:	b004      	add	sp, #16
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	08009634 	.word	0x08009634
 80083b0:	08009654 	.word	0x08009654

080083b4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80083b4:	b590      	push	{r4, r7, lr}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	889b      	ldrh	r3, [r3, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d13d      	bne.n	8008442 <USBD_SetAddress+0x8e>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d139      	bne.n	8008442 <USBD_SetAddress+0x8e>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	885b      	ldrh	r3, [r3, #2]
 80083d2:	2b7f      	cmp	r3, #127	; 0x7f
 80083d4:	d835      	bhi.n	8008442 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	885b      	ldrh	r3, [r3, #2]
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	230f      	movs	r3, #15
 80083de:	18fb      	adds	r3, r7, r3
 80083e0:	217f      	movs	r1, #127	; 0x7f
 80083e2:	400a      	ands	r2, r1
 80083e4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	23a7      	movs	r3, #167	; 0xa7
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	5cd3      	ldrb	r3, [r2, r3]
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d106      	bne.n	8008400 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	0011      	movs	r1, r2
 80083f8:	0018      	movs	r0, r3
 80083fa:	f000 f9bf 	bl	800877c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083fe:	e027      	b.n	8008450 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	240f      	movs	r4, #15
 8008404:	193a      	adds	r2, r7, r4
 8008406:	4914      	ldr	r1, [pc, #80]	; (8008458 <USBD_SetAddress+0xa4>)
 8008408:	7812      	ldrb	r2, [r2, #0]
 800840a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800840c:	193b      	adds	r3, r7, r4
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	0011      	movs	r1, r2
 8008414:	0018      	movs	r0, r3
 8008416:	f000 fe85 	bl	8009124 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	0018      	movs	r0, r3
 800841e:	f000 fa95 	bl	800894c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008422:	193b      	adds	r3, r7, r4
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d005      	beq.n	8008436 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	23a7      	movs	r3, #167	; 0xa7
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	2102      	movs	r1, #2
 8008432:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008434:	e00c      	b.n	8008450 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008436:	687a      	ldr	r2, [r7, #4]
 8008438:	23a7      	movs	r3, #167	; 0xa7
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	2101      	movs	r1, #1
 800843e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008440:	e006      	b.n	8008450 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	0011      	movs	r1, r2
 8008448:	0018      	movs	r0, r3
 800844a:	f000 f997 	bl	800877c <USBD_CtlError>
  }
}
 800844e:	46c0      	nop			; (mov r8, r8)
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b005      	add	sp, #20
 8008456:	bd90      	pop	{r4, r7, pc}
 8008458:	0000029e 	.word	0x0000029e

0800845c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b082      	sub	sp, #8
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	885b      	ldrh	r3, [r3, #2]
 800846a:	b2da      	uxtb	r2, r3
 800846c:	4b4c      	ldr	r3, [pc, #304]	; (80085a0 <USBD_SetConfig+0x144>)
 800846e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008470:	4b4b      	ldr	r3, [pc, #300]	; (80085a0 <USBD_SetConfig+0x144>)
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b01      	cmp	r3, #1
 8008476:	d906      	bls.n	8008486 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	0011      	movs	r1, r2
 800847e:	0018      	movs	r0, r3
 8008480:	f000 f97c 	bl	800877c <USBD_CtlError>
 8008484:	e088      	b.n	8008598 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	23a7      	movs	r3, #167	; 0xa7
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	5cd3      	ldrb	r3, [r2, r3]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d002      	beq.n	8008498 <USBD_SetConfig+0x3c>
 8008492:	2b03      	cmp	r3, #3
 8008494:	d029      	beq.n	80084ea <USBD_SetConfig+0x8e>
 8008496:	e071      	b.n	800857c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008498:	4b41      	ldr	r3, [pc, #260]	; (80085a0 <USBD_SetConfig+0x144>)
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d01f      	beq.n	80084e0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80084a0:	4b3f      	ldr	r3, [pc, #252]	; (80085a0 <USBD_SetConfig+0x144>)
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	001a      	movs	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	23a7      	movs	r3, #167	; 0xa7
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	2103      	movs	r1, #3
 80084b2:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80084b4:	4b3a      	ldr	r3, [pc, #232]	; (80085a0 <USBD_SetConfig+0x144>)
 80084b6:	781a      	ldrb	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	0011      	movs	r1, r2
 80084bc:	0018      	movs	r0, r3
 80084be:	f7ff f8c5 	bl	800764c <USBD_SetClassConfig>
 80084c2:	0003      	movs	r3, r0
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d106      	bne.n	80084d6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80084c8:	683a      	ldr	r2, [r7, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	0011      	movs	r1, r2
 80084ce:	0018      	movs	r0, r3
 80084d0:	f000 f954 	bl	800877c <USBD_CtlError>
            return;
 80084d4:	e060      	b.n	8008598 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	0018      	movs	r0, r3
 80084da:	f000 fa37 	bl	800894c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80084de:	e05b      	b.n	8008598 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	0018      	movs	r0, r3
 80084e4:	f000 fa32 	bl	800894c <USBD_CtlSendStatus>
        break;
 80084e8:	e056      	b.n	8008598 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80084ea:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <USBD_SetConfig+0x144>)
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d115      	bne.n	800851e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	23a7      	movs	r3, #167	; 0xa7
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	2102      	movs	r1, #2
 80084fa:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80084fc:	4b28      	ldr	r3, [pc, #160]	; (80085a0 <USBD_SetConfig+0x144>)
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	001a      	movs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008506:	4b26      	ldr	r3, [pc, #152]	; (80085a0 <USBD_SetConfig+0x144>)
 8008508:	781a      	ldrb	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	0011      	movs	r1, r2
 800850e:	0018      	movs	r0, r3
 8008510:	f7ff f8c3 	bl	800769a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	0018      	movs	r0, r3
 8008518:	f000 fa18 	bl	800894c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800851c:	e03c      	b.n	8008598 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800851e:	4b20      	ldr	r3, [pc, #128]	; (80085a0 <USBD_SetConfig+0x144>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	001a      	movs	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	685b      	ldr	r3, [r3, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d022      	beq.n	8008572 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	b2da      	uxtb	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	0011      	movs	r1, r2
 8008536:	0018      	movs	r0, r3
 8008538:	f7ff f8af 	bl	800769a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800853c:	4b18      	ldr	r3, [pc, #96]	; (80085a0 <USBD_SetConfig+0x144>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	001a      	movs	r2, r3
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008546:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <USBD_SetConfig+0x144>)
 8008548:	781a      	ldrb	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	0011      	movs	r1, r2
 800854e:	0018      	movs	r0, r3
 8008550:	f7ff f87c 	bl	800764c <USBD_SetClassConfig>
 8008554:	0003      	movs	r3, r0
 8008556:	2b02      	cmp	r3, #2
 8008558:	d106      	bne.n	8008568 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800855a:	683a      	ldr	r2, [r7, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	0011      	movs	r1, r2
 8008560:	0018      	movs	r0, r3
 8008562:	f000 f90b 	bl	800877c <USBD_CtlError>
            return;
 8008566:	e017      	b.n	8008598 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	0018      	movs	r0, r3
 800856c:	f000 f9ee 	bl	800894c <USBD_CtlSendStatus>
        break;
 8008570:	e012      	b.n	8008598 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	0018      	movs	r0, r3
 8008576:	f000 f9e9 	bl	800894c <USBD_CtlSendStatus>
        break;
 800857a:	e00d      	b.n	8008598 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	0011      	movs	r1, r2
 8008582:	0018      	movs	r0, r3
 8008584:	f000 f8fa 	bl	800877c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <USBD_SetConfig+0x144>)
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	0011      	movs	r1, r2
 8008590:	0018      	movs	r0, r3
 8008592:	f7ff f882 	bl	800769a <USBD_ClrClassConfig>
        break;
 8008596:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8008598:	46bd      	mov	sp, r7
 800859a:	b002      	add	sp, #8
 800859c:	bd80      	pop	{r7, pc}
 800859e:	46c0      	nop			; (mov r8, r8)
 80085a0:	2000021c 	.word	0x2000021c

080085a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	88db      	ldrh	r3, [r3, #6]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d006      	beq.n	80085c4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80085b6:	683a      	ldr	r2, [r7, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	0011      	movs	r1, r2
 80085bc:	0018      	movs	r0, r3
 80085be:	f000 f8dd 	bl	800877c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80085c2:	e026      	b.n	8008612 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80085c4:	687a      	ldr	r2, [r7, #4]
 80085c6:	23a7      	movs	r3, #167	; 0xa7
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	5cd3      	ldrb	r3, [r2, r3]
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	dc02      	bgt.n	80085d6 <USBD_GetConfig+0x32>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	dc03      	bgt.n	80085dc <USBD_GetConfig+0x38>
 80085d4:	e016      	b.n	8008604 <USBD_GetConfig+0x60>
 80085d6:	2b03      	cmp	r3, #3
 80085d8:	d00c      	beq.n	80085f4 <USBD_GetConfig+0x50>
 80085da:	e013      	b.n	8008604 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3308      	adds	r3, #8
 80085e6:	0019      	movs	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	0018      	movs	r0, r3
 80085ee:	f000 f943 	bl	8008878 <USBD_CtlSendData>
        break;
 80085f2:	e00e      	b.n	8008612 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	1d19      	adds	r1, r3, #4
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	0018      	movs	r0, r3
 80085fe:	f000 f93b 	bl	8008878 <USBD_CtlSendData>
        break;
 8008602:	e006      	b.n	8008612 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8008604:	683a      	ldr	r2, [r7, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	0011      	movs	r1, r2
 800860a:	0018      	movs	r0, r3
 800860c:	f000 f8b6 	bl	800877c <USBD_CtlError>
        break;
 8008610:	46c0      	nop			; (mov r8, r8)
}
 8008612:	46c0      	nop			; (mov r8, r8)
 8008614:	46bd      	mov	sp, r7
 8008616:	b002      	add	sp, #8
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b082      	sub	sp, #8
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	23a7      	movs	r3, #167	; 0xa7
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	5cd3      	ldrb	r3, [r2, r3]
 800862c:	3b01      	subs	r3, #1
 800862e:	2b02      	cmp	r3, #2
 8008630:	d822      	bhi.n	8008678 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	88db      	ldrh	r3, [r3, #6]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d006      	beq.n	8008648 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800863a:	683a      	ldr	r2, [r7, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	0011      	movs	r1, r2
 8008640:	0018      	movs	r0, r3
 8008642:	f000 f89b 	bl	800877c <USBD_CtlError>
        break;
 8008646:	e01e      	b.n	8008686 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	23a9      	movs	r3, #169	; 0xa9
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	58d3      	ldr	r3, [r2, r3]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d005      	beq.n	8008666 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	2202      	movs	r2, #2
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	330c      	adds	r3, #12
 800866a:	0019      	movs	r1, r3
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2202      	movs	r2, #2
 8008670:	0018      	movs	r0, r3
 8008672:	f000 f901 	bl	8008878 <USBD_CtlSendData>
      break;
 8008676:	e006      	b.n	8008686 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8008678:	683a      	ldr	r2, [r7, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	0011      	movs	r1, r2
 800867e:	0018      	movs	r0, r3
 8008680:	f000 f87c 	bl	800877c <USBD_CtlError>
      break;
 8008684:	46c0      	nop			; (mov r8, r8)
  }
}
 8008686:	46c0      	nop			; (mov r8, r8)
 8008688:	46bd      	mov	sp, r7
 800868a:	b002      	add	sp, #8
 800868c:	bd80      	pop	{r7, pc}

0800868e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b082      	sub	sp, #8
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	885b      	ldrh	r3, [r3, #2]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d108      	bne.n	80086b2 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	23a9      	movs	r3, #169	; 0xa9
 80086a4:	009b      	lsls	r3, r3, #2
 80086a6:	2101      	movs	r1, #1
 80086a8:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	0018      	movs	r0, r3
 80086ae:	f000 f94d 	bl	800894c <USBD_CtlSendStatus>
  }
}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	46bd      	mov	sp, r7
 80086b6:	b002      	add	sp, #8
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b082      	sub	sp, #8
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	23a7      	movs	r3, #167	; 0xa7
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	5cd3      	ldrb	r3, [r2, r3]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d80d      	bhi.n	80086ee <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	885b      	ldrh	r3, [r3, #2]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d110      	bne.n	80086fc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80086da:	687a      	ldr	r2, [r7, #4]
 80086dc:	23a9      	movs	r3, #169	; 0xa9
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	2100      	movs	r1, #0
 80086e2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	0018      	movs	r0, r3
 80086e8:	f000 f930 	bl	800894c <USBD_CtlSendStatus>
      }
      break;
 80086ec:	e006      	b.n	80086fc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80086ee:	683a      	ldr	r2, [r7, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	0011      	movs	r1, r2
 80086f4:	0018      	movs	r0, r3
 80086f6:	f000 f841 	bl	800877c <USBD_CtlError>
      break;
 80086fa:	e000      	b.n	80086fe <USBD_ClrFeature+0x44>
      break;
 80086fc:	46c0      	nop			; (mov r8, r8)
  }
}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	46bd      	mov	sp, r7
 8008702:	b002      	add	sp, #8
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781a      	ldrb	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	785a      	ldrb	r2, [r3, #1]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	3302      	adds	r3, #2
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	b29a      	uxth	r2, r3
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	3303      	adds	r3, #3
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b29b      	uxth	r3, r3
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	b29b      	uxth	r3, r3
 8008734:	18d3      	adds	r3, r2, r3
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	3304      	adds	r3, #4
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	3305      	adds	r3, #5
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	b29b      	uxth	r3, r3
 800874c:	021b      	lsls	r3, r3, #8
 800874e:	b29b      	uxth	r3, r3
 8008750:	18d3      	adds	r3, r2, r3
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	3306      	adds	r3, #6
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	b29a      	uxth	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	3307      	adds	r3, #7
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	b29b      	uxth	r3, r3
 800876c:	18d3      	adds	r3, r2, r3
 800876e:	b29a      	uxth	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	80da      	strh	r2, [r3, #6]

}
 8008774:	46c0      	nop			; (mov r8, r8)
 8008776:	46bd      	mov	sp, r7
 8008778:	b002      	add	sp, #8
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2180      	movs	r1, #128	; 0x80
 800878a:	0018      	movs	r0, r3
 800878c:	f000 fc43 	bl	8009016 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2100      	movs	r1, #0
 8008794:	0018      	movs	r0, r3
 8008796:	f000 fc3e 	bl	8009016 <USBD_LL_StallEP>
}
 800879a:	46c0      	nop			; (mov r8, r8)
 800879c:	46bd      	mov	sp, r7
 800879e:	b002      	add	sp, #8
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80087a2:	b590      	push	{r4, r7, lr}
 80087a4:	b087      	sub	sp, #28
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	60f8      	str	r0, [r7, #12]
 80087aa:	60b9      	str	r1, [r7, #8]
 80087ac:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80087ae:	2417      	movs	r4, #23
 80087b0:	193b      	adds	r3, r7, r4
 80087b2:	2200      	movs	r2, #0
 80087b4:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d03c      	beq.n	8008836 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	0018      	movs	r0, r3
 80087c0:	f000 f83d 	bl	800883e <USBD_GetLen>
 80087c4:	0003      	movs	r3, r0
 80087c6:	3301      	adds	r3, #1
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	18db      	adds	r3, r3, r3
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80087d2:	193b      	adds	r3, r7, r4
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	193a      	adds	r2, r7, r4
 80087d8:	1c59      	adds	r1, r3, #1
 80087da:	7011      	strb	r1, [r2, #0]
 80087dc:	001a      	movs	r2, r3
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	189b      	adds	r3, r3, r2
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	7812      	ldrb	r2, [r2, #0]
 80087e6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80087e8:	193b      	adds	r3, r7, r4
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	193a      	adds	r2, r7, r4
 80087ee:	1c59      	adds	r1, r3, #1
 80087f0:	7011      	strb	r1, [r2, #0]
 80087f2:	001a      	movs	r2, r3
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	189b      	adds	r3, r3, r2
 80087f8:	2203      	movs	r2, #3
 80087fa:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80087fc:	e017      	b.n	800882e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	1c5a      	adds	r2, r3, #1
 8008802:	60fa      	str	r2, [r7, #12]
 8008804:	2417      	movs	r4, #23
 8008806:	193a      	adds	r2, r7, r4
 8008808:	7812      	ldrb	r2, [r2, #0]
 800880a:	1939      	adds	r1, r7, r4
 800880c:	1c50      	adds	r0, r2, #1
 800880e:	7008      	strb	r0, [r1, #0]
 8008810:	0011      	movs	r1, r2
 8008812:	68ba      	ldr	r2, [r7, #8]
 8008814:	1852      	adds	r2, r2, r1
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800881a:	193b      	adds	r3, r7, r4
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	193a      	adds	r2, r7, r4
 8008820:	1c59      	adds	r1, r3, #1
 8008822:	7011      	strb	r1, [r2, #0]
 8008824:	001a      	movs	r2, r3
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	189b      	adds	r3, r3, r2
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e3      	bne.n	80087fe <USBD_GetString+0x5c>
    }
  }
}
 8008836:	46c0      	nop			; (mov r8, r8)
 8008838:	46bd      	mov	sp, r7
 800883a:	b007      	add	sp, #28
 800883c:	bd90      	pop	{r4, r7, pc}

0800883e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008846:	230f      	movs	r3, #15
 8008848:	18fb      	adds	r3, r7, r3
 800884a:	2200      	movs	r2, #0
 800884c:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800884e:	e008      	b.n	8008862 <USBD_GetLen+0x24>
  {
    len++;
 8008850:	210f      	movs	r1, #15
 8008852:	187b      	adds	r3, r7, r1
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	187b      	adds	r3, r7, r1
 8008858:	3201      	adds	r2, #1
 800885a:	701a      	strb	r2, [r3, #0]
    buf++;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	3301      	adds	r3, #1
 8008860:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1f2      	bne.n	8008850 <USBD_GetLen+0x12>
  }

  return len;
 800886a:	230f      	movs	r3, #15
 800886c:	18fb      	adds	r3, r7, r3
 800886e:	781b      	ldrb	r3, [r3, #0]
}
 8008870:	0018      	movs	r0, r3
 8008872:	46bd      	mov	sp, r7
 8008874:	b004      	add	sp, #16
 8008876:	bd80      	pop	{r7, pc}

08008878 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	1dbb      	adds	r3, r7, #6
 8008884:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	23a5      	movs	r3, #165	; 0xa5
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	2102      	movs	r1, #2
 800888e:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8008890:	1dbb      	adds	r3, r7, #6
 8008892:	881a      	ldrh	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008898:	1dbb      	adds	r3, r7, #6
 800889a:	881a      	ldrh	r2, [r3, #0]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088a0:	1dbb      	adds	r3, r7, #6
 80088a2:	881b      	ldrh	r3, [r3, #0]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	68f8      	ldr	r0, [r7, #12]
 80088a8:	2100      	movs	r1, #0
 80088aa:	f000 fc66 	bl	800917a <USBD_LL_Transmit>

  return USBD_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	0018      	movs	r0, r3
 80088b2:	46bd      	mov	sp, r7
 80088b4:	b004      	add	sp, #16
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	60f8      	str	r0, [r7, #12]
 80088c0:	60b9      	str	r1, [r7, #8]
 80088c2:	1dbb      	adds	r3, r7, #6
 80088c4:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80088c6:	1dbb      	adds	r3, r7, #6
 80088c8:	881b      	ldrh	r3, [r3, #0]
 80088ca:	68ba      	ldr	r2, [r7, #8]
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	2100      	movs	r1, #0
 80088d0:	f000 fc53 	bl	800917a <USBD_LL_Transmit>

  return USBD_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	0018      	movs	r0, r3
 80088d8:	46bd      	mov	sp, r7
 80088da:	b004      	add	sp, #16
 80088dc:	bd80      	pop	{r7, pc}

080088de <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	1dbb      	adds	r3, r7, #6
 80088ea:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	23a5      	movs	r3, #165	; 0xa5
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	2103      	movs	r1, #3
 80088f4:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 80088f6:	1dbb      	adds	r3, r7, #6
 80088f8:	8819      	ldrh	r1, [r3, #0]
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	23ae      	movs	r3, #174	; 0xae
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8008902:	1dbb      	adds	r3, r7, #6
 8008904:	8819      	ldrh	r1, [r3, #0]
 8008906:	68fa      	ldr	r2, [r7, #12]
 8008908:	23b0      	movs	r3, #176	; 0xb0
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800890e:	1dbb      	adds	r3, r7, #6
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	2100      	movs	r1, #0
 8008918:	f000 fc66 	bl	80091e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800891c:	2300      	movs	r3, #0
}
 800891e:	0018      	movs	r0, r3
 8008920:	46bd      	mov	sp, r7
 8008922:	b004      	add	sp, #16
 8008924:	bd80      	pop	{r7, pc}

08008926 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b084      	sub	sp, #16
 800892a:	af00      	add	r7, sp, #0
 800892c:	60f8      	str	r0, [r7, #12]
 800892e:	60b9      	str	r1, [r7, #8]
 8008930:	1dbb      	adds	r3, r7, #6
 8008932:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008934:	1dbb      	adds	r3, r7, #6
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	2100      	movs	r1, #0
 800893e:	f000 fc53 	bl	80091e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	0018      	movs	r0, r3
 8008946:	46bd      	mov	sp, r7
 8008948:	b004      	add	sp, #16
 800894a:	bd80      	pop	{r7, pc}

0800894c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	23a5      	movs	r3, #165	; 0xa5
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	2104      	movs	r1, #4
 800895c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	2300      	movs	r3, #0
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	f000 fc08 	bl	800917a <USBD_LL_Transmit>

  return USBD_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	0018      	movs	r0, r3
 800896e:	46bd      	mov	sp, r7
 8008970:	b002      	add	sp, #8
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b082      	sub	sp, #8
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	23a5      	movs	r3, #165	; 0xa5
 8008980:	009b      	lsls	r3, r3, #2
 8008982:	2105      	movs	r1, #5
 8008984:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	2300      	movs	r3, #0
 800898a:	2200      	movs	r2, #0
 800898c:	2100      	movs	r1, #0
 800898e:	f000 fc2b 	bl	80091e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	0018      	movs	r0, r3
 8008996:	46bd      	mov	sp, r7
 8008998:	b002      	add	sp, #8
 800899a:	bd80      	pop	{r7, pc}

0800899c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80089a0:	4914      	ldr	r1, [pc, #80]	; (80089f4 <MX_USB_DEVICE_Init+0x58>)
 80089a2:	4b15      	ldr	r3, [pc, #84]	; (80089f8 <MX_USB_DEVICE_Init+0x5c>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	0018      	movs	r0, r3
 80089a8:	f7fe fde9 	bl	800757e <USBD_Init>
 80089ac:	1e03      	subs	r3, r0, #0
 80089ae:	d001      	beq.n	80089b4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80089b0:	f7f8 f800 	bl	80009b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80089b4:	4a11      	ldr	r2, [pc, #68]	; (80089fc <MX_USB_DEVICE_Init+0x60>)
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <MX_USB_DEVICE_Init+0x5c>)
 80089b8:	0011      	movs	r1, r2
 80089ba:	0018      	movs	r0, r3
 80089bc:	f7fe fe10 	bl	80075e0 <USBD_RegisterClass>
 80089c0:	1e03      	subs	r3, r0, #0
 80089c2:	d001      	beq.n	80089c8 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80089c4:	f7f7 fff6 	bl	80009b4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80089c8:	4a0d      	ldr	r2, [pc, #52]	; (8008a00 <MX_USB_DEVICE_Init+0x64>)
 80089ca:	4b0b      	ldr	r3, [pc, #44]	; (80089f8 <MX_USB_DEVICE_Init+0x5c>)
 80089cc:	0011      	movs	r1, r2
 80089ce:	0018      	movs	r0, r3
 80089d0:	f7fe fdba 	bl	8007548 <USBD_CUSTOM_HID_RegisterInterface>
 80089d4:	1e03      	subs	r3, r0, #0
 80089d6:	d001      	beq.n	80089dc <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 80089d8:	f7f7 ffec 	bl	80009b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80089dc:	4b06      	ldr	r3, [pc, #24]	; (80089f8 <MX_USB_DEVICE_Init+0x5c>)
 80089de:	0018      	movs	r0, r3
 80089e0:	f7fe fe1e 	bl	8007620 <USBD_Start>
 80089e4:	1e03      	subs	r3, r0, #0
 80089e6:	d001      	beq.n	80089ec <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 80089e8:	f7f7 ffe4 	bl	80009b4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80089ec:	46c0      	nop			; (mov r8, r8)
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	46c0      	nop			; (mov r8, r8)
 80089f4:	20000148 	.word	0x20000148
 80089f8:	20000358 	.word	0x20000358
 80089fc:	2000000c 	.word	0x2000000c
 8008a00:	20000138 	.word	0x20000138

08008a04 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008a08:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008a0a:	0018      	movs	r0, r3
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008a14:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008a16:	0018      	movs	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	0002      	movs	r2, r0
 8008a24:	1dfb      	adds	r3, r7, #7
 8008a26:	701a      	strb	r2, [r3, #0]
 8008a28:	1dbb      	adds	r3, r7, #6
 8008a2a:	1c0a      	adds	r2, r1, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8008a2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008a30:	0018      	movs	r0, r3
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b002      	add	sp, #8
 8008a36:	bd80      	pop	{r7, pc}

08008a38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	0002      	movs	r2, r0
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	1dfb      	adds	r3, r7, #7
 8008a44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	2212      	movs	r2, #18
 8008a4a:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a4c:	4b02      	ldr	r3, [pc, #8]	; (8008a58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a4e:	0018      	movs	r0, r3
 8008a50:	46bd      	mov	sp, r7
 8008a52:	b002      	add	sp, #8
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	20000164 	.word	0x20000164

08008a5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	0002      	movs	r2, r0
 8008a64:	6039      	str	r1, [r7, #0]
 8008a66:	1dfb      	adds	r3, r7, #7
 8008a68:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	2204      	movs	r2, #4
 8008a6e:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a70:	4b02      	ldr	r3, [pc, #8]	; (8008a7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a72:	0018      	movs	r0, r3
 8008a74:	46bd      	mov	sp, r7
 8008a76:	b002      	add	sp, #8
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	46c0      	nop			; (mov r8, r8)
 8008a7c:	20000178 	.word	0x20000178

08008a80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	0002      	movs	r2, r0
 8008a88:	6039      	str	r1, [r7, #0]
 8008a8a:	1dfb      	adds	r3, r7, #7
 8008a8c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008a8e:	1dfb      	adds	r3, r7, #7
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d106      	bne.n	8008aa4 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008a96:	683a      	ldr	r2, [r7, #0]
 8008a98:	4908      	ldr	r1, [pc, #32]	; (8008abc <USBD_FS_ProductStrDescriptor+0x3c>)
 8008a9a:	4b09      	ldr	r3, [pc, #36]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x40>)
 8008a9c:	0018      	movs	r0, r3
 8008a9e:	f7ff fe80 	bl	80087a2 <USBD_GetString>
 8008aa2:	e005      	b.n	8008ab0 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	4905      	ldr	r1, [pc, #20]	; (8008abc <USBD_FS_ProductStrDescriptor+0x3c>)
 8008aa8:	4b05      	ldr	r3, [pc, #20]	; (8008ac0 <USBD_FS_ProductStrDescriptor+0x40>)
 8008aaa:	0018      	movs	r0, r3
 8008aac:	f7ff fe79 	bl	80087a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ab0:	4b02      	ldr	r3, [pc, #8]	; (8008abc <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8008ab2:	0018      	movs	r0, r3
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	b002      	add	sp, #8
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	46c0      	nop			; (mov r8, r8)
 8008abc:	2000061c 	.word	0x2000061c
 8008ac0:	08009510 	.word	0x08009510

08008ac4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	0002      	movs	r2, r0
 8008acc:	6039      	str	r1, [r7, #0]
 8008ace:	1dfb      	adds	r3, r7, #7
 8008ad0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ad2:	683a      	ldr	r2, [r7, #0]
 8008ad4:	4904      	ldr	r1, [pc, #16]	; (8008ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7ff fe62 	bl	80087a2 <USBD_GetString>
  return USBD_StrDesc;
 8008ade:	4b02      	ldr	r3, [pc, #8]	; (8008ae8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b002      	add	sp, #8
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	2000061c 	.word	0x2000061c
 8008aec:	08009530 	.word	0x08009530

08008af0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	0002      	movs	r2, r0
 8008af8:	6039      	str	r1, [r7, #0]
 8008afa:	1dfb      	adds	r3, r7, #7
 8008afc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	221a      	movs	r2, #26
 8008b02:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b04:	f000 f84c 	bl	8008ba0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b08:	4b02      	ldr	r3, [pc, #8]	; (8008b14 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8008b0a:	0018      	movs	r0, r3
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	b002      	add	sp, #8
 8008b10:	bd80      	pop	{r7, pc}
 8008b12:	46c0      	nop			; (mov r8, r8)
 8008b14:	2000017c 	.word	0x2000017c

08008b18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	0002      	movs	r2, r0
 8008b20:	6039      	str	r1, [r7, #0]
 8008b22:	1dfb      	adds	r3, r7, #7
 8008b24:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8008b26:	1dfb      	adds	r3, r7, #7
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d106      	bne.n	8008b3c <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4908      	ldr	r1, [pc, #32]	; (8008b54 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008b32:	4b09      	ldr	r3, [pc, #36]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008b34:	0018      	movs	r0, r3
 8008b36:	f7ff fe34 	bl	80087a2 <USBD_GetString>
 8008b3a:	e005      	b.n	8008b48 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b3c:	683a      	ldr	r2, [r7, #0]
 8008b3e:	4905      	ldr	r1, [pc, #20]	; (8008b54 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8008b40:	4b05      	ldr	r3, [pc, #20]	; (8008b58 <USBD_FS_ConfigStrDescriptor+0x40>)
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff fe2d 	bl	80087a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	b002      	add	sp, #8
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	2000061c 	.word	0x2000061c
 8008b58:	08009544 	.word	0x08009544

08008b5c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	0002      	movs	r2, r0
 8008b64:	6039      	str	r1, [r7, #0]
 8008b66:	1dfb      	adds	r3, r7, #7
 8008b68:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8008b6a:	1dfb      	adds	r3, r7, #7
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b72:	683a      	ldr	r2, [r7, #0]
 8008b74:	4908      	ldr	r1, [pc, #32]	; (8008b98 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008b76:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7ff fe12 	bl	80087a2 <USBD_GetString>
 8008b7e:	e005      	b.n	8008b8c <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	4905      	ldr	r1, [pc, #20]	; (8008b98 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8008b84:	4b05      	ldr	r3, [pc, #20]	; (8008b9c <USBD_FS_InterfaceStrDescriptor+0x40>)
 8008b86:	0018      	movs	r0, r3
 8008b88:	f7ff fe0b 	bl	80087a2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b8c:	4b02      	ldr	r3, [pc, #8]	; (8008b98 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8008b8e:	0018      	movs	r0, r3
 8008b90:	46bd      	mov	sp, r7
 8008b92:	b002      	add	sp, #8
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	46c0      	nop			; (mov r8, r8)
 8008b98:	2000061c 	.word	0x2000061c
 8008b9c:	08009558 	.word	0x08009558

08008ba0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008ba6:	4b10      	ldr	r3, [pc, #64]	; (8008be8 <Get_SerialNum+0x48>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <Get_SerialNum+0x4c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	; (8008bf0 <Get_SerialNum+0x50>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	18d3      	adds	r3, r2, r3
 8008bbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d00b      	beq.n	8008bde <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bc6:	490b      	ldr	r1, [pc, #44]	; (8008bf4 <Get_SerialNum+0x54>)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2208      	movs	r2, #8
 8008bcc:	0018      	movs	r0, r3
 8008bce:	f000 f815 	bl	8008bfc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bd2:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <Get_SerialNum+0x58>)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2204      	movs	r2, #4
 8008bd8:	0018      	movs	r0, r3
 8008bda:	f000 f80f 	bl	8008bfc <IntToUnicode>
  }
}
 8008bde:	46c0      	nop			; (mov r8, r8)
 8008be0:	46bd      	mov	sp, r7
 8008be2:	b004      	add	sp, #16
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	46c0      	nop			; (mov r8, r8)
 8008be8:	1ff80050 	.word	0x1ff80050
 8008bec:	1ff80054 	.word	0x1ff80054
 8008bf0:	1ff80058 	.word	0x1ff80058
 8008bf4:	2000017e 	.word	0x2000017e
 8008bf8:	2000018e 	.word	0x2000018e

08008bfc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b086      	sub	sp, #24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	1dfb      	adds	r3, r7, #7
 8008c08:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8008c0a:	2117      	movs	r1, #23
 8008c0c:	187b      	adds	r3, r7, r1
 8008c0e:	2200      	movs	r2, #0
 8008c10:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8008c12:	187b      	adds	r3, r7, r1
 8008c14:	2200      	movs	r2, #0
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e02f      	b.n	8008c7a <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	0f1b      	lsrs	r3, r3, #28
 8008c1e:	2b09      	cmp	r3, #9
 8008c20:	d80d      	bhi.n	8008c3e <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	0f1b      	lsrs	r3, r3, #28
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	2317      	movs	r3, #23
 8008c2a:	18fb      	adds	r3, r7, r3
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	005b      	lsls	r3, r3, #1
 8008c30:	0019      	movs	r1, r3
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	185b      	adds	r3, r3, r1
 8008c36:	3230      	adds	r2, #48	; 0x30
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	e00c      	b.n	8008c58 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	0f1b      	lsrs	r3, r3, #28
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	2317      	movs	r3, #23
 8008c46:	18fb      	adds	r3, r7, r3
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	005b      	lsls	r3, r3, #1
 8008c4c:	0019      	movs	r1, r3
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	185b      	adds	r3, r3, r1
 8008c52:	3237      	adds	r2, #55	; 0x37
 8008c54:	b2d2      	uxtb	r2, r2
 8008c56:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c5e:	2117      	movs	r1, #23
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	3301      	adds	r3, #1
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	18d3      	adds	r3, r2, r3
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c70:	187b      	adds	r3, r7, r1
 8008c72:	781a      	ldrb	r2, [r3, #0]
 8008c74:	187b      	adds	r3, r7, r1
 8008c76:	3201      	adds	r2, #1
 8008c78:	701a      	strb	r2, [r3, #0]
 8008c7a:	2317      	movs	r3, #23
 8008c7c:	18fa      	adds	r2, r7, r3
 8008c7e:	1dfb      	adds	r3, r7, #7
 8008c80:	7812      	ldrb	r2, [r2, #0]
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d3c8      	bcc.n	8008c1a <IntToUnicode+0x1e>
  }
}
 8008c88:	46c0      	nop			; (mov r8, r8)
 8008c8a:	46c0      	nop			; (mov r8, r8)
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	b006      	add	sp, #24
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a0a      	ldr	r2, [pc, #40]	; (8008ccc <HAL_PCD_MspInit+0x38>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d10e      	bne.n	8008cc4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008ca6:	4b0a      	ldr	r3, [pc, #40]	; (8008cd0 <HAL_PCD_MspInit+0x3c>)
 8008ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <HAL_PCD_MspInit+0x3c>)
 8008cac:	2180      	movs	r1, #128	; 0x80
 8008cae:	0409      	lsls	r1, r1, #16
 8008cb0:	430a      	orrs	r2, r1
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	201f      	movs	r0, #31
 8008cba:	f7f8 fd6b 	bl	8001794 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8008cbe:	201f      	movs	r0, #31
 8008cc0:	f7f8 fd7d 	bl	80017be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008cc4:	46c0      	nop			; (mov r8, r8)
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	b002      	add	sp, #8
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	40005c00 	.word	0x40005c00
 8008cd0:	40021000 	.word	0x40021000

08008cd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b082      	sub	sp, #8
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	23bc      	movs	r3, #188	; 0xbc
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	58d2      	ldr	r2, [r2, r3]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	21ac      	movs	r1, #172	; 0xac
 8008ce8:	0089      	lsls	r1, r1, #2
 8008cea:	468c      	mov	ip, r1
 8008cec:	4463      	add	r3, ip
 8008cee:	0019      	movs	r1, r3
 8008cf0:	0010      	movs	r0, r2
 8008cf2:	f7fe fce9 	bl	80076c8 <USBD_LL_SetupStage>
}
 8008cf6:	46c0      	nop			; (mov r8, r8)
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	b002      	add	sp, #8
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008cfe:	b590      	push	{r4, r7, lr}
 8008d00:	b083      	sub	sp, #12
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	000a      	movs	r2, r1
 8008d08:	1cfb      	adds	r3, r7, #3
 8008d0a:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	23bc      	movs	r3, #188	; 0xbc
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	58d4      	ldr	r4, [r2, r3]
 8008d14:	1cfb      	adds	r3, r7, #3
 8008d16:	781a      	ldrb	r2, [r3, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	23be      	movs	r3, #190	; 0xbe
 8008d1c:	0059      	lsls	r1, r3, #1
 8008d1e:	0013      	movs	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	18c3      	adds	r3, r0, r3
 8008d28:	185b      	adds	r3, r3, r1
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	1cfb      	adds	r3, r7, #3
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	0019      	movs	r1, r3
 8008d32:	0020      	movs	r0, r4
 8008d34:	f7fe fd26 	bl	8007784 <USBD_LL_DataOutStage>
}
 8008d38:	46c0      	nop			; (mov r8, r8)
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	b003      	add	sp, #12
 8008d3e:	bd90      	pop	{r4, r7, pc}

08008d40 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	000a      	movs	r2, r1
 8008d4a:	1cfb      	adds	r3, r7, #3
 8008d4c:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	23bc      	movs	r3, #188	; 0xbc
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	58d0      	ldr	r0, [r2, r3]
 8008d56:	1cfb      	adds	r3, r7, #3
 8008d58:	781a      	ldrb	r2, [r3, #0]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	0013      	movs	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	189b      	adds	r3, r3, r2
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	18cb      	adds	r3, r1, r3
 8008d66:	333c      	adds	r3, #60	; 0x3c
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	1cfb      	adds	r3, r7, #3
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	0019      	movs	r1, r3
 8008d70:	f7fe fd8a 	bl	8007888 <USBD_LL_DataInStage>
}
 8008d74:	46c0      	nop			; (mov r8, r8)
 8008d76:	46bd      	mov	sp, r7
 8008d78:	b002      	add	sp, #8
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	23bc      	movs	r3, #188	; 0xbc
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	58d3      	ldr	r3, [r2, r3]
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f7fe fec1 	bl	8007b14 <USBD_LL_SOF>
}
 8008d92:	46c0      	nop			; (mov r8, r8)
 8008d94:	46bd      	mov	sp, r7
 8008d96:	b002      	add	sp, #8
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d9a:	b580      	push	{r7, lr}
 8008d9c:	b084      	sub	sp, #16
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008da2:	230f      	movs	r3, #15
 8008da4:	18fb      	adds	r3, r7, r3
 8008da6:	2201      	movs	r2, #1
 8008da8:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d001      	beq.n	8008db6 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8008db2:	f7f7 fdff 	bl	80009b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	23bc      	movs	r3, #188	; 0xbc
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	58d2      	ldr	r2, [r2, r3]
 8008dbe:	230f      	movs	r3, #15
 8008dc0:	18fb      	adds	r3, r7, r3
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	0019      	movs	r1, r3
 8008dc6:	0010      	movs	r0, r2
 8008dc8:	f7fe fe63 	bl	8007a92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	23bc      	movs	r3, #188	; 0xbc
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	58d3      	ldr	r3, [r2, r3]
 8008dd4:	0018      	movs	r0, r3
 8008dd6:	f7fe fe14 	bl	8007a02 <USBD_LL_Reset>
}
 8008dda:	46c0      	nop			; (mov r8, r8)
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	b004      	add	sp, #16
 8008de0:	bd80      	pop	{r7, pc}
	...

08008de4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	23bc      	movs	r3, #188	; 0xbc
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	58d3      	ldr	r3, [r2, r3]
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7fe fe5d 	bl	8007ab4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <HAL_PCD_SuspendCallback+0x34>)
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	4b04      	ldr	r3, [pc, #16]	; (8008e18 <HAL_PCD_SuspendCallback+0x34>)
 8008e08:	2106      	movs	r1, #6
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008e0e:	46c0      	nop			; (mov r8, r8)
 8008e10:	46bd      	mov	sp, r7
 8008e12:	b002      	add	sp, #8
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	46c0      	nop			; (mov r8, r8)
 8008e18:	e000ed00 	.word	0xe000ed00

08008e1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d007      	beq.n	8008e3c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e2c:	4b09      	ldr	r3, [pc, #36]	; (8008e54 <HAL_PCD_ResumeCallback+0x38>)
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	4b08      	ldr	r3, [pc, #32]	; (8008e54 <HAL_PCD_ResumeCallback+0x38>)
 8008e32:	2106      	movs	r1, #6
 8008e34:	438a      	bics	r2, r1
 8008e36:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008e38:	f000 fa0d 	bl	8009256 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	23bc      	movs	r3, #188	; 0xbc
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	58d3      	ldr	r3, [r2, r3]
 8008e44:	0018      	movs	r0, r3
 8008e46:	f7fe fe4d 	bl	8007ae4 <USBD_LL_Resume>
}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	b002      	add	sp, #8
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	46c0      	nop			; (mov r8, r8)
 8008e54:	e000ed00 	.word	0xe000ed00

08008e58 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b082      	sub	sp, #8
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008e60:	4a27      	ldr	r2, [pc, #156]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e62:	23bc      	movs	r3, #188	; 0xbc
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	6879      	ldr	r1, [r7, #4]
 8008e68:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	23b0      	movs	r3, #176	; 0xb0
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	4923      	ldr	r1, [pc, #140]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e72:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008e74:	4b22      	ldr	r3, [pc, #136]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e76:	4a23      	ldr	r2, [pc, #140]	; (8008f04 <USBD_LL_Init+0xac>)
 8008e78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008e7a:	4b21      	ldr	r3, [pc, #132]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008e80:	4b1f      	ldr	r3, [pc, #124]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e82:	2202      	movs	r2, #2
 8008e84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008e86:	4b1e      	ldr	r3, [pc, #120]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e88:	2202      	movs	r2, #2
 8008e8a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008e8c:	4b1c      	ldr	r3, [pc, #112]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e8e:	2200      	movs	r2, #0
 8008e90:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008e92:	4b1b      	ldr	r3, [pc, #108]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e94:	2200      	movs	r2, #0
 8008e96:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008e98:	4b19      	ldr	r3, [pc, #100]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008e9e:	4b18      	ldr	r3, [pc, #96]	; (8008f00 <USBD_LL_Init+0xa8>)
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	f7f8 fe61 	bl	8001b68 <HAL_PCD_Init>
 8008ea6:	1e03      	subs	r3, r0, #0
 8008ea8:	d001      	beq.n	8008eae <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8008eaa:	f7f7 fd83 	bl	80009b4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	23b0      	movs	r3, #176	; 0xb0
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	58d0      	ldr	r0, [r2, r3]
 8008eb6:	2318      	movs	r3, #24
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f7fa fc2a 	bl	8003714 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	23b0      	movs	r3, #176	; 0xb0
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	58d0      	ldr	r0, [r2, r3]
 8008ec8:	2358      	movs	r3, #88	; 0x58
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2180      	movs	r1, #128	; 0x80
 8008ece:	f7fa fc21 	bl	8003714 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	23b0      	movs	r3, #176	; 0xb0
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	58d0      	ldr	r0, [r2, r3]
 8008eda:	2398      	movs	r3, #152	; 0x98
 8008edc:	2200      	movs	r2, #0
 8008ede:	2181      	movs	r1, #129	; 0x81
 8008ee0:	f7fa fc18 	bl	8003714 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	23b0      	movs	r3, #176	; 0xb0
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	58d0      	ldr	r0, [r2, r3]
 8008eec:	23d8      	movs	r3, #216	; 0xd8
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2101      	movs	r1, #1
 8008ef2:	f7fa fc0f 	bl	8003714 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	0018      	movs	r0, r3
 8008efa:	46bd      	mov	sp, r7
 8008efc:	b002      	add	sp, #8
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	2000081c 	.word	0x2000081c
 8008f04:	40005c00 	.word	0x40005c00

08008f08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	210f      	movs	r1, #15
 8008f12:	187b      	adds	r3, r7, r1
 8008f14:	2200      	movs	r2, #0
 8008f16:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f18:	260e      	movs	r6, #14
 8008f1a:	19bb      	adds	r3, r7, r6
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	23b0      	movs	r3, #176	; 0xb0
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	58d3      	ldr	r3, [r2, r3]
 8008f28:	000d      	movs	r5, r1
 8008f2a:	187c      	adds	r4, r7, r1
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	f7f8 ff2b 	bl	8001d88 <HAL_PCD_Start>
 8008f32:	0003      	movs	r3, r0
 8008f34:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f36:	19bc      	adds	r4, r7, r6
 8008f38:	197b      	adds	r3, r7, r5
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	0018      	movs	r0, r3
 8008f3e:	f000 f991 	bl	8009264 <USBD_Get_USB_Status>
 8008f42:	0003      	movs	r3, r0
 8008f44:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008f46:	19bb      	adds	r3, r7, r6
 8008f48:	781b      	ldrb	r3, [r3, #0]
}
 8008f4a:	0018      	movs	r0, r3
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	b005      	add	sp, #20
 8008f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008f52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f54:	b085      	sub	sp, #20
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	000c      	movs	r4, r1
 8008f5c:	0010      	movs	r0, r2
 8008f5e:	0019      	movs	r1, r3
 8008f60:	1cfb      	adds	r3, r7, #3
 8008f62:	1c22      	adds	r2, r4, #0
 8008f64:	701a      	strb	r2, [r3, #0]
 8008f66:	1cbb      	adds	r3, r7, #2
 8008f68:	1c02      	adds	r2, r0, #0
 8008f6a:	701a      	strb	r2, [r3, #0]
 8008f6c:	003b      	movs	r3, r7
 8008f6e:	1c0a      	adds	r2, r1, #0
 8008f70:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f72:	260f      	movs	r6, #15
 8008f74:	19bb      	adds	r3, r7, r6
 8008f76:	2200      	movs	r2, #0
 8008f78:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f7a:	250e      	movs	r5, #14
 8008f7c:	197b      	adds	r3, r7, r5
 8008f7e:	2200      	movs	r2, #0
 8008f80:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	23b0      	movs	r3, #176	; 0xb0
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	58d0      	ldr	r0, [r2, r3]
 8008f8a:	19bc      	adds	r4, r7, r6
 8008f8c:	1cbb      	adds	r3, r7, #2
 8008f8e:	781d      	ldrb	r5, [r3, #0]
 8008f90:	003b      	movs	r3, r7
 8008f92:	881a      	ldrh	r2, [r3, #0]
 8008f94:	1cfb      	adds	r3, r7, #3
 8008f96:	7819      	ldrb	r1, [r3, #0]
 8008f98:	002b      	movs	r3, r5
 8008f9a:	f7f9 f8c2 	bl	8002122 <HAL_PCD_EP_Open>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fa2:	250e      	movs	r5, #14
 8008fa4:	197c      	adds	r4, r7, r5
 8008fa6:	19bb      	adds	r3, r7, r6
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	0018      	movs	r0, r3
 8008fac:	f000 f95a 	bl	8009264 <USBD_Get_USB_Status>
 8008fb0:	0003      	movs	r3, r0
 8008fb2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008fb4:	197b      	adds	r3, r7, r5
 8008fb6:	781b      	ldrb	r3, [r3, #0]
}
 8008fb8:	0018      	movs	r0, r3
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	b005      	add	sp, #20
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fc0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	000a      	movs	r2, r1
 8008fca:	1cfb      	adds	r3, r7, #3
 8008fcc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fce:	210f      	movs	r1, #15
 8008fd0:	187b      	adds	r3, r7, r1
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fd6:	260e      	movs	r6, #14
 8008fd8:	19bb      	adds	r3, r7, r6
 8008fda:	2200      	movs	r2, #0
 8008fdc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	23b0      	movs	r3, #176	; 0xb0
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	58d2      	ldr	r2, [r2, r3]
 8008fe6:	000d      	movs	r5, r1
 8008fe8:	187c      	adds	r4, r7, r1
 8008fea:	1cfb      	adds	r3, r7, #3
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	0019      	movs	r1, r3
 8008ff0:	0010      	movs	r0, r2
 8008ff2:	f7f9 f90e 	bl	8002212 <HAL_PCD_EP_Close>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ffa:	19bc      	adds	r4, r7, r6
 8008ffc:	197b      	adds	r3, r7, r5
 8008ffe:	781b      	ldrb	r3, [r3, #0]
 8009000:	0018      	movs	r0, r3
 8009002:	f000 f92f 	bl	8009264 <USBD_Get_USB_Status>
 8009006:	0003      	movs	r3, r0
 8009008:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800900a:	19bb      	adds	r3, r7, r6
 800900c:	781b      	ldrb	r3, [r3, #0]
}
 800900e:	0018      	movs	r0, r3
 8009010:	46bd      	mov	sp, r7
 8009012:	b005      	add	sp, #20
 8009014:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009016 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009016:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009018:	b085      	sub	sp, #20
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	000a      	movs	r2, r1
 8009020:	1cfb      	adds	r3, r7, #3
 8009022:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009024:	210f      	movs	r1, #15
 8009026:	187b      	adds	r3, r7, r1
 8009028:	2200      	movs	r2, #0
 800902a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800902c:	260e      	movs	r6, #14
 800902e:	19bb      	adds	r3, r7, r6
 8009030:	2200      	movs	r2, #0
 8009032:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	23b0      	movs	r3, #176	; 0xb0
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	58d2      	ldr	r2, [r2, r3]
 800903c:	000d      	movs	r5, r1
 800903e:	187c      	adds	r4, r7, r1
 8009040:	1cfb      	adds	r3, r7, #3
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	0019      	movs	r1, r3
 8009046:	0010      	movs	r0, r2
 8009048:	f7f9 f9c1 	bl	80023ce <HAL_PCD_EP_SetStall>
 800904c:	0003      	movs	r3, r0
 800904e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009050:	19bc      	adds	r4, r7, r6
 8009052:	197b      	adds	r3, r7, r5
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	0018      	movs	r0, r3
 8009058:	f000 f904 	bl	8009264 <USBD_Get_USB_Status>
 800905c:	0003      	movs	r3, r0
 800905e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8009060:	19bb      	adds	r3, r7, r6
 8009062:	781b      	ldrb	r3, [r3, #0]
}
 8009064:	0018      	movs	r0, r3
 8009066:	46bd      	mov	sp, r7
 8009068:	b005      	add	sp, #20
 800906a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800906c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	000a      	movs	r2, r1
 8009076:	1cfb      	adds	r3, r7, #3
 8009078:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907a:	210f      	movs	r1, #15
 800907c:	187b      	adds	r3, r7, r1
 800907e:	2200      	movs	r2, #0
 8009080:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009082:	260e      	movs	r6, #14
 8009084:	19bb      	adds	r3, r7, r6
 8009086:	2200      	movs	r2, #0
 8009088:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	23b0      	movs	r3, #176	; 0xb0
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	58d2      	ldr	r2, [r2, r3]
 8009092:	000d      	movs	r5, r1
 8009094:	187c      	adds	r4, r7, r1
 8009096:	1cfb      	adds	r3, r7, #3
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	0019      	movs	r1, r3
 800909c:	0010      	movs	r0, r2
 800909e:	f7f9 f9f2 	bl	8002486 <HAL_PCD_EP_ClrStall>
 80090a2:	0003      	movs	r3, r0
 80090a4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090a6:	19bc      	adds	r4, r7, r6
 80090a8:	197b      	adds	r3, r7, r5
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	0018      	movs	r0, r3
 80090ae:	f000 f8d9 	bl	8009264 <USBD_Get_USB_Status>
 80090b2:	0003      	movs	r3, r0
 80090b4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80090b6:	19bb      	adds	r3, r7, r6
 80090b8:	781b      	ldrb	r3, [r3, #0]
}
 80090ba:	0018      	movs	r0, r3
 80090bc:	46bd      	mov	sp, r7
 80090be:	b005      	add	sp, #20
 80090c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080090c2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b084      	sub	sp, #16
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	000a      	movs	r2, r1
 80090cc:	1cfb      	adds	r3, r7, #3
 80090ce:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	23b0      	movs	r3, #176	; 0xb0
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	58d3      	ldr	r3, [r2, r3]
 80090d8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090da:	1cfb      	adds	r3, r7, #3
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	b25b      	sxtb	r3, r3
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	da0d      	bge.n	8009100 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80090e4:	1cfb      	adds	r3, r7, #3
 80090e6:	781b      	ldrb	r3, [r3, #0]
 80090e8:	227f      	movs	r2, #127	; 0x7f
 80090ea:	4013      	ands	r3, r2
 80090ec:	68f9      	ldr	r1, [r7, #12]
 80090ee:	1c5a      	adds	r2, r3, #1
 80090f0:	0013      	movs	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	189b      	adds	r3, r3, r2
 80090f6:	00db      	lsls	r3, r3, #3
 80090f8:	18cb      	adds	r3, r1, r3
 80090fa:	3302      	adds	r3, #2
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	e00d      	b.n	800911c <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009100:	1cfb      	adds	r3, r7, #3
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	227f      	movs	r2, #127	; 0x7f
 8009106:	401a      	ands	r2, r3
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	23b5      	movs	r3, #181	; 0xb5
 800910c:	0059      	lsls	r1, r3, #1
 800910e:	0013      	movs	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	189b      	adds	r3, r3, r2
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	18c3      	adds	r3, r0, r3
 8009118:	185b      	adds	r3, r3, r1
 800911a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800911c:	0018      	movs	r0, r3
 800911e:	46bd      	mov	sp, r7
 8009120:	b004      	add	sp, #16
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	000a      	movs	r2, r1
 800912e:	1cfb      	adds	r3, r7, #3
 8009130:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009132:	210f      	movs	r1, #15
 8009134:	187b      	adds	r3, r7, r1
 8009136:	2200      	movs	r2, #0
 8009138:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800913a:	260e      	movs	r6, #14
 800913c:	19bb      	adds	r3, r7, r6
 800913e:	2200      	movs	r2, #0
 8009140:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	23b0      	movs	r3, #176	; 0xb0
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	58d2      	ldr	r2, [r2, r3]
 800914a:	000d      	movs	r5, r1
 800914c:	187c      	adds	r4, r7, r1
 800914e:	1cfb      	adds	r3, r7, #3
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	0019      	movs	r1, r3
 8009154:	0010      	movs	r0, r2
 8009156:	f7f8 ffb9 	bl	80020cc <HAL_PCD_SetAddress>
 800915a:	0003      	movs	r3, r0
 800915c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800915e:	19bc      	adds	r4, r7, r6
 8009160:	197b      	adds	r3, r7, r5
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	0018      	movs	r0, r3
 8009166:	f000 f87d 	bl	8009264 <USBD_Get_USB_Status>
 800916a:	0003      	movs	r3, r0
 800916c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800916e:	19bb      	adds	r3, r7, r6
 8009170:	781b      	ldrb	r3, [r3, #0]
}
 8009172:	0018      	movs	r0, r3
 8009174:	46bd      	mov	sp, r7
 8009176:	b005      	add	sp, #20
 8009178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800917a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800917a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800917c:	b087      	sub	sp, #28
 800917e:	af00      	add	r7, sp, #0
 8009180:	60f8      	str	r0, [r7, #12]
 8009182:	0008      	movs	r0, r1
 8009184:	607a      	str	r2, [r7, #4]
 8009186:	0019      	movs	r1, r3
 8009188:	230b      	movs	r3, #11
 800918a:	18fb      	adds	r3, r7, r3
 800918c:	1c02      	adds	r2, r0, #0
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	2408      	movs	r4, #8
 8009192:	193b      	adds	r3, r7, r4
 8009194:	1c0a      	adds	r2, r1, #0
 8009196:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009198:	2117      	movs	r1, #23
 800919a:	187b      	adds	r3, r7, r1
 800919c:	2200      	movs	r2, #0
 800919e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091a0:	2516      	movs	r5, #22
 80091a2:	197b      	adds	r3, r7, r5
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	23b0      	movs	r3, #176	; 0xb0
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	58d0      	ldr	r0, [r2, r3]
 80091b0:	193b      	adds	r3, r7, r4
 80091b2:	881d      	ldrh	r5, [r3, #0]
 80091b4:	000e      	movs	r6, r1
 80091b6:	187c      	adds	r4, r7, r1
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	230b      	movs	r3, #11
 80091bc:	18fb      	adds	r3, r7, r3
 80091be:	7819      	ldrb	r1, [r3, #0]
 80091c0:	002b      	movs	r3, r5
 80091c2:	f7f9 f8bb 	bl	800233c <HAL_PCD_EP_Transmit>
 80091c6:	0003      	movs	r3, r0
 80091c8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ca:	2516      	movs	r5, #22
 80091cc:	197c      	adds	r4, r7, r5
 80091ce:	19bb      	adds	r3, r7, r6
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	0018      	movs	r0, r3
 80091d4:	f000 f846 	bl	8009264 <USBD_Get_USB_Status>
 80091d8:	0003      	movs	r3, r0
 80091da:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80091dc:	197b      	adds	r3, r7, r5
 80091de:	781b      	ldrb	r3, [r3, #0]
}
 80091e0:	0018      	movs	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	b007      	add	sp, #28
 80091e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080091e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80091e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	0008      	movs	r0, r1
 80091f2:	607a      	str	r2, [r7, #4]
 80091f4:	0019      	movs	r1, r3
 80091f6:	230b      	movs	r3, #11
 80091f8:	18fb      	adds	r3, r7, r3
 80091fa:	1c02      	adds	r2, r0, #0
 80091fc:	701a      	strb	r2, [r3, #0]
 80091fe:	2408      	movs	r4, #8
 8009200:	193b      	adds	r3, r7, r4
 8009202:	1c0a      	adds	r2, r1, #0
 8009204:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009206:	2117      	movs	r1, #23
 8009208:	187b      	adds	r3, r7, r1
 800920a:	2200      	movs	r2, #0
 800920c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800920e:	2516      	movs	r5, #22
 8009210:	197b      	adds	r3, r7, r5
 8009212:	2200      	movs	r2, #0
 8009214:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	23b0      	movs	r3, #176	; 0xb0
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	58d0      	ldr	r0, [r2, r3]
 800921e:	193b      	adds	r3, r7, r4
 8009220:	881d      	ldrh	r5, [r3, #0]
 8009222:	000e      	movs	r6, r1
 8009224:	187c      	adds	r4, r7, r1
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	230b      	movs	r3, #11
 800922a:	18fb      	adds	r3, r7, r3
 800922c:	7819      	ldrb	r1, [r3, #0]
 800922e:	002b      	movs	r3, r5
 8009230:	f7f9 f840 	bl	80022b4 <HAL_PCD_EP_Receive>
 8009234:	0003      	movs	r3, r0
 8009236:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009238:	2516      	movs	r5, #22
 800923a:	197c      	adds	r4, r7, r5
 800923c:	19bb      	adds	r3, r7, r6
 800923e:	781b      	ldrb	r3, [r3, #0]
 8009240:	0018      	movs	r0, r3
 8009242:	f000 f80f 	bl	8009264 <USBD_Get_USB_Status>
 8009246:	0003      	movs	r3, r0
 8009248:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800924a:	197b      	adds	r3, r7, r5
 800924c:	781b      	ldrb	r3, [r3, #0]
}
 800924e:	0018      	movs	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	b007      	add	sp, #28
 8009254:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009256 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800925a:	f7f7 f9c7 	bl	80005ec <SystemClock_Config>
}
 800925e:	46c0      	nop			; (mov r8, r8)
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	0002      	movs	r2, r0
 800926c:	1dfb      	adds	r3, r7, #7
 800926e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009270:	230f      	movs	r3, #15
 8009272:	18fb      	adds	r3, r7, r3
 8009274:	2200      	movs	r2, #0
 8009276:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8009278:	1dfb      	adds	r3, r7, #7
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b03      	cmp	r3, #3
 800927e:	d017      	beq.n	80092b0 <USBD_Get_USB_Status+0x4c>
 8009280:	dc1b      	bgt.n	80092ba <USBD_Get_USB_Status+0x56>
 8009282:	2b02      	cmp	r3, #2
 8009284:	d00f      	beq.n	80092a6 <USBD_Get_USB_Status+0x42>
 8009286:	dc18      	bgt.n	80092ba <USBD_Get_USB_Status+0x56>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <USBD_Get_USB_Status+0x2e>
 800928c:	2b01      	cmp	r3, #1
 800928e:	d005      	beq.n	800929c <USBD_Get_USB_Status+0x38>
 8009290:	e013      	b.n	80092ba <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009292:	230f      	movs	r3, #15
 8009294:	18fb      	adds	r3, r7, r3
 8009296:	2200      	movs	r2, #0
 8009298:	701a      	strb	r2, [r3, #0]
    break;
 800929a:	e013      	b.n	80092c4 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800929c:	230f      	movs	r3, #15
 800929e:	18fb      	adds	r3, r7, r3
 80092a0:	2202      	movs	r2, #2
 80092a2:	701a      	strb	r2, [r3, #0]
    break;
 80092a4:	e00e      	b.n	80092c4 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80092a6:	230f      	movs	r3, #15
 80092a8:	18fb      	adds	r3, r7, r3
 80092aa:	2201      	movs	r2, #1
 80092ac:	701a      	strb	r2, [r3, #0]
    break;
 80092ae:	e009      	b.n	80092c4 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80092b0:	230f      	movs	r3, #15
 80092b2:	18fb      	adds	r3, r7, r3
 80092b4:	2202      	movs	r2, #2
 80092b6:	701a      	strb	r2, [r3, #0]
    break;
 80092b8:	e004      	b.n	80092c4 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80092ba:	230f      	movs	r3, #15
 80092bc:	18fb      	adds	r3, r7, r3
 80092be:	2202      	movs	r2, #2
 80092c0:	701a      	strb	r2, [r3, #0]
    break;
 80092c2:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80092c4:	230f      	movs	r3, #15
 80092c6:	18fb      	adds	r3, r7, r3
 80092c8:	781b      	ldrb	r3, [r3, #0]
}
 80092ca:	0018      	movs	r0, r3
 80092cc:	46bd      	mov	sp, r7
 80092ce:	b004      	add	sp, #16
 80092d0:	bd80      	pop	{r7, pc}
	...

080092d4 <__errno>:
 80092d4:	4b01      	ldr	r3, [pc, #4]	; (80092dc <__errno+0x8>)
 80092d6:	6818      	ldr	r0, [r3, #0]
 80092d8:	4770      	bx	lr
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	20000198 	.word	0x20000198

080092e0 <__libc_init_array>:
 80092e0:	b570      	push	{r4, r5, r6, lr}
 80092e2:	2600      	movs	r6, #0
 80092e4:	4d0c      	ldr	r5, [pc, #48]	; (8009318 <__libc_init_array+0x38>)
 80092e6:	4c0d      	ldr	r4, [pc, #52]	; (800931c <__libc_init_array+0x3c>)
 80092e8:	1b64      	subs	r4, r4, r5
 80092ea:	10a4      	asrs	r4, r4, #2
 80092ec:	42a6      	cmp	r6, r4
 80092ee:	d109      	bne.n	8009304 <__libc_init_array+0x24>
 80092f0:	2600      	movs	r6, #0
 80092f2:	f000 f901 	bl	80094f8 <_init>
 80092f6:	4d0a      	ldr	r5, [pc, #40]	; (8009320 <__libc_init_array+0x40>)
 80092f8:	4c0a      	ldr	r4, [pc, #40]	; (8009324 <__libc_init_array+0x44>)
 80092fa:	1b64      	subs	r4, r4, r5
 80092fc:	10a4      	asrs	r4, r4, #2
 80092fe:	42a6      	cmp	r6, r4
 8009300:	d105      	bne.n	800930e <__libc_init_array+0x2e>
 8009302:	bd70      	pop	{r4, r5, r6, pc}
 8009304:	00b3      	lsls	r3, r6, #2
 8009306:	58eb      	ldr	r3, [r5, r3]
 8009308:	4798      	blx	r3
 800930a:	3601      	adds	r6, #1
 800930c:	e7ee      	b.n	80092ec <__libc_init_array+0xc>
 800930e:	00b3      	lsls	r3, r6, #2
 8009310:	58eb      	ldr	r3, [r5, r3]
 8009312:	4798      	blx	r3
 8009314:	3601      	adds	r6, #1
 8009316:	e7f2      	b.n	80092fe <__libc_init_array+0x1e>
 8009318:	08009674 	.word	0x08009674
 800931c:	08009674 	.word	0x08009674
 8009320:	08009674 	.word	0x08009674
 8009324:	08009678 	.word	0x08009678

08009328 <malloc>:
 8009328:	b510      	push	{r4, lr}
 800932a:	4b03      	ldr	r3, [pc, #12]	; (8009338 <malloc+0x10>)
 800932c:	0001      	movs	r1, r0
 800932e:	6818      	ldr	r0, [r3, #0]
 8009330:	f000 f860 	bl	80093f4 <_malloc_r>
 8009334:	bd10      	pop	{r4, pc}
 8009336:	46c0      	nop			; (mov r8, r8)
 8009338:	20000198 	.word	0x20000198

0800933c <free>:
 800933c:	b510      	push	{r4, lr}
 800933e:	4b03      	ldr	r3, [pc, #12]	; (800934c <free+0x10>)
 8009340:	0001      	movs	r1, r0
 8009342:	6818      	ldr	r0, [r3, #0]
 8009344:	f000 f80c 	bl	8009360 <_free_r>
 8009348:	bd10      	pop	{r4, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	20000198 	.word	0x20000198

08009350 <memset>:
 8009350:	0003      	movs	r3, r0
 8009352:	1882      	adds	r2, r0, r2
 8009354:	4293      	cmp	r3, r2
 8009356:	d100      	bne.n	800935a <memset+0xa>
 8009358:	4770      	bx	lr
 800935a:	7019      	strb	r1, [r3, #0]
 800935c:	3301      	adds	r3, #1
 800935e:	e7f9      	b.n	8009354 <memset+0x4>

08009360 <_free_r>:
 8009360:	b570      	push	{r4, r5, r6, lr}
 8009362:	0005      	movs	r5, r0
 8009364:	2900      	cmp	r1, #0
 8009366:	d010      	beq.n	800938a <_free_r+0x2a>
 8009368:	1f0c      	subs	r4, r1, #4
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	da00      	bge.n	8009372 <_free_r+0x12>
 8009370:	18e4      	adds	r4, r4, r3
 8009372:	0028      	movs	r0, r5
 8009374:	f000 f8ae 	bl	80094d4 <__malloc_lock>
 8009378:	4a1d      	ldr	r2, [pc, #116]	; (80093f0 <_free_r+0x90>)
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d105      	bne.n	800938c <_free_r+0x2c>
 8009380:	6063      	str	r3, [r4, #4]
 8009382:	6014      	str	r4, [r2, #0]
 8009384:	0028      	movs	r0, r5
 8009386:	f000 f8ad 	bl	80094e4 <__malloc_unlock>
 800938a:	bd70      	pop	{r4, r5, r6, pc}
 800938c:	42a3      	cmp	r3, r4
 800938e:	d908      	bls.n	80093a2 <_free_r+0x42>
 8009390:	6821      	ldr	r1, [r4, #0]
 8009392:	1860      	adds	r0, r4, r1
 8009394:	4283      	cmp	r3, r0
 8009396:	d1f3      	bne.n	8009380 <_free_r+0x20>
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	1841      	adds	r1, r0, r1
 800939e:	6021      	str	r1, [r4, #0]
 80093a0:	e7ee      	b.n	8009380 <_free_r+0x20>
 80093a2:	001a      	movs	r2, r3
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <_free_r+0x4e>
 80093aa:	42a3      	cmp	r3, r4
 80093ac:	d9f9      	bls.n	80093a2 <_free_r+0x42>
 80093ae:	6811      	ldr	r1, [r2, #0]
 80093b0:	1850      	adds	r0, r2, r1
 80093b2:	42a0      	cmp	r0, r4
 80093b4:	d10b      	bne.n	80093ce <_free_r+0x6e>
 80093b6:	6820      	ldr	r0, [r4, #0]
 80093b8:	1809      	adds	r1, r1, r0
 80093ba:	1850      	adds	r0, r2, r1
 80093bc:	6011      	str	r1, [r2, #0]
 80093be:	4283      	cmp	r3, r0
 80093c0:	d1e0      	bne.n	8009384 <_free_r+0x24>
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	1841      	adds	r1, r0, r1
 80093c8:	6011      	str	r1, [r2, #0]
 80093ca:	6053      	str	r3, [r2, #4]
 80093cc:	e7da      	b.n	8009384 <_free_r+0x24>
 80093ce:	42a0      	cmp	r0, r4
 80093d0:	d902      	bls.n	80093d8 <_free_r+0x78>
 80093d2:	230c      	movs	r3, #12
 80093d4:	602b      	str	r3, [r5, #0]
 80093d6:	e7d5      	b.n	8009384 <_free_r+0x24>
 80093d8:	6821      	ldr	r1, [r4, #0]
 80093da:	1860      	adds	r0, r4, r1
 80093dc:	4283      	cmp	r3, r0
 80093de:	d103      	bne.n	80093e8 <_free_r+0x88>
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	1841      	adds	r1, r0, r1
 80093e6:	6021      	str	r1, [r4, #0]
 80093e8:	6063      	str	r3, [r4, #4]
 80093ea:	6054      	str	r4, [r2, #4]
 80093ec:	e7ca      	b.n	8009384 <_free_r+0x24>
 80093ee:	46c0      	nop			; (mov r8, r8)
 80093f0:	20000220 	.word	0x20000220

080093f4 <_malloc_r>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	2303      	movs	r3, #3
 80093f8:	1ccd      	adds	r5, r1, #3
 80093fa:	439d      	bics	r5, r3
 80093fc:	3508      	adds	r5, #8
 80093fe:	0006      	movs	r6, r0
 8009400:	2d0c      	cmp	r5, #12
 8009402:	d21f      	bcs.n	8009444 <_malloc_r+0x50>
 8009404:	250c      	movs	r5, #12
 8009406:	42a9      	cmp	r1, r5
 8009408:	d81e      	bhi.n	8009448 <_malloc_r+0x54>
 800940a:	0030      	movs	r0, r6
 800940c:	f000 f862 	bl	80094d4 <__malloc_lock>
 8009410:	4925      	ldr	r1, [pc, #148]	; (80094a8 <_malloc_r+0xb4>)
 8009412:	680a      	ldr	r2, [r1, #0]
 8009414:	0014      	movs	r4, r2
 8009416:	2c00      	cmp	r4, #0
 8009418:	d11a      	bne.n	8009450 <_malloc_r+0x5c>
 800941a:	4f24      	ldr	r7, [pc, #144]	; (80094ac <_malloc_r+0xb8>)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d104      	bne.n	800942c <_malloc_r+0x38>
 8009422:	0021      	movs	r1, r4
 8009424:	0030      	movs	r0, r6
 8009426:	f000 f843 	bl	80094b0 <_sbrk_r>
 800942a:	6038      	str	r0, [r7, #0]
 800942c:	0029      	movs	r1, r5
 800942e:	0030      	movs	r0, r6
 8009430:	f000 f83e 	bl	80094b0 <_sbrk_r>
 8009434:	1c43      	adds	r3, r0, #1
 8009436:	d12b      	bne.n	8009490 <_malloc_r+0x9c>
 8009438:	230c      	movs	r3, #12
 800943a:	0030      	movs	r0, r6
 800943c:	6033      	str	r3, [r6, #0]
 800943e:	f000 f851 	bl	80094e4 <__malloc_unlock>
 8009442:	e003      	b.n	800944c <_malloc_r+0x58>
 8009444:	2d00      	cmp	r5, #0
 8009446:	dade      	bge.n	8009406 <_malloc_r+0x12>
 8009448:	230c      	movs	r3, #12
 800944a:	6033      	str	r3, [r6, #0]
 800944c:	2000      	movs	r0, #0
 800944e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009450:	6823      	ldr	r3, [r4, #0]
 8009452:	1b5b      	subs	r3, r3, r5
 8009454:	d419      	bmi.n	800948a <_malloc_r+0x96>
 8009456:	2b0b      	cmp	r3, #11
 8009458:	d903      	bls.n	8009462 <_malloc_r+0x6e>
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	18e4      	adds	r4, r4, r3
 800945e:	6025      	str	r5, [r4, #0]
 8009460:	e003      	b.n	800946a <_malloc_r+0x76>
 8009462:	6863      	ldr	r3, [r4, #4]
 8009464:	42a2      	cmp	r2, r4
 8009466:	d10e      	bne.n	8009486 <_malloc_r+0x92>
 8009468:	600b      	str	r3, [r1, #0]
 800946a:	0030      	movs	r0, r6
 800946c:	f000 f83a 	bl	80094e4 <__malloc_unlock>
 8009470:	0020      	movs	r0, r4
 8009472:	2207      	movs	r2, #7
 8009474:	300b      	adds	r0, #11
 8009476:	1d23      	adds	r3, r4, #4
 8009478:	4390      	bics	r0, r2
 800947a:	1ac2      	subs	r2, r0, r3
 800947c:	4298      	cmp	r0, r3
 800947e:	d0e6      	beq.n	800944e <_malloc_r+0x5a>
 8009480:	1a1b      	subs	r3, r3, r0
 8009482:	50a3      	str	r3, [r4, r2]
 8009484:	e7e3      	b.n	800944e <_malloc_r+0x5a>
 8009486:	6053      	str	r3, [r2, #4]
 8009488:	e7ef      	b.n	800946a <_malloc_r+0x76>
 800948a:	0022      	movs	r2, r4
 800948c:	6864      	ldr	r4, [r4, #4]
 800948e:	e7c2      	b.n	8009416 <_malloc_r+0x22>
 8009490:	2303      	movs	r3, #3
 8009492:	1cc4      	adds	r4, r0, #3
 8009494:	439c      	bics	r4, r3
 8009496:	42a0      	cmp	r0, r4
 8009498:	d0e1      	beq.n	800945e <_malloc_r+0x6a>
 800949a:	1a21      	subs	r1, r4, r0
 800949c:	0030      	movs	r0, r6
 800949e:	f000 f807 	bl	80094b0 <_sbrk_r>
 80094a2:	1c43      	adds	r3, r0, #1
 80094a4:	d1db      	bne.n	800945e <_malloc_r+0x6a>
 80094a6:	e7c7      	b.n	8009438 <_malloc_r+0x44>
 80094a8:	20000220 	.word	0x20000220
 80094ac:	20000224 	.word	0x20000224

080094b0 <_sbrk_r>:
 80094b0:	2300      	movs	r3, #0
 80094b2:	b570      	push	{r4, r5, r6, lr}
 80094b4:	4d06      	ldr	r5, [pc, #24]	; (80094d0 <_sbrk_r+0x20>)
 80094b6:	0004      	movs	r4, r0
 80094b8:	0008      	movs	r0, r1
 80094ba:	602b      	str	r3, [r5, #0]
 80094bc:	f7f7 fb38 	bl	8000b30 <_sbrk>
 80094c0:	1c43      	adds	r3, r0, #1
 80094c2:	d103      	bne.n	80094cc <_sbrk_r+0x1c>
 80094c4:	682b      	ldr	r3, [r5, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d000      	beq.n	80094cc <_sbrk_r+0x1c>
 80094ca:	6023      	str	r3, [r4, #0]
 80094cc:	bd70      	pop	{r4, r5, r6, pc}
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	20000b10 	.word	0x20000b10

080094d4 <__malloc_lock>:
 80094d4:	b510      	push	{r4, lr}
 80094d6:	4802      	ldr	r0, [pc, #8]	; (80094e0 <__malloc_lock+0xc>)
 80094d8:	f000 f80c 	bl	80094f4 <__retarget_lock_acquire_recursive>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	46c0      	nop			; (mov r8, r8)
 80094e0:	20000b18 	.word	0x20000b18

080094e4 <__malloc_unlock>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	4802      	ldr	r0, [pc, #8]	; (80094f0 <__malloc_unlock+0xc>)
 80094e8:	f000 f805 	bl	80094f6 <__retarget_lock_release_recursive>
 80094ec:	bd10      	pop	{r4, pc}
 80094ee:	46c0      	nop			; (mov r8, r8)
 80094f0:	20000b18 	.word	0x20000b18

080094f4 <__retarget_lock_acquire_recursive>:
 80094f4:	4770      	bx	lr

080094f6 <__retarget_lock_release_recursive>:
 80094f6:	4770      	bx	lr

080094f8 <_init>:
 80094f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094fa:	46c0      	nop			; (mov r8, r8)
 80094fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094fe:	bc08      	pop	{r3}
 8009500:	469e      	mov	lr, r3
 8009502:	4770      	bx	lr

08009504 <_fini>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	46c0      	nop			; (mov r8, r8)
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr
