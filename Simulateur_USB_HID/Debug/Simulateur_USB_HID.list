
Simulateur_USB_HID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008624  08008624  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800862c  0800862c  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800862c  0800862c  0001862c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08008634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  20000170  080087a4  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009f4  080087a4  000209f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012408  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e41  00000000  00000000  000325a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b48  00000000  00000000  000353e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00035f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f5c  00000000  00000000  00036930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114bd  00000000  00000000  0004d88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000816cb  00000000  00000000  0005ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e0414  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000e0468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000170 	.word	0x20000170
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008548 	.word	0x08008548

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000174 	.word	0x20000174
 8000104:	08008548 	.word	0x08008548

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b094      	sub	sp, #80	; 0x50
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[80];

	pumahid.hat0 = 0x00;
 80004a2:	4b20      	ldr	r3, [pc, #128]	; (8000524 <main+0x88>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	pumahid.hat1 = 0x00;
 80004a8:	4b1e      	ldr	r3, [pc, #120]	; (8000524 <main+0x88>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	705a      	strb	r2, [r3, #1]
	pumahid.hat2 = 0x00;
 80004ae:	4b1d      	ldr	r3, [pc, #116]	; (8000524 <main+0x88>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	709a      	strb	r2, [r3, #2]
	pumahid.key3 = 0x00;
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <main+0x88>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	70da      	strb	r2, [r3, #3]
	pumahid.but0 = 0x00;
 80004ba:	4b1a      	ldr	r3, [pc, #104]	; (8000524 <main+0x88>)
 80004bc:	2200      	movs	r2, #0
 80004be:	711a      	strb	r2, [r3, #4]
	pumahid.but1 = 0x00;
 80004c0:	4b18      	ldr	r3, [pc, #96]	; (8000524 <main+0x88>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	715a      	strb	r2, [r3, #5]
	pumahid.but2 = 0x00;
 80004c6:	4b17      	ldr	r3, [pc, #92]	; (8000524 <main+0x88>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	719a      	strb	r2, [r3, #6]
	pumahid.but3 = 0x00;
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <main+0x88>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	71da      	strb	r2, [r3, #7]
	pumahid.x = 0x0000;
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <main+0x88>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	811a      	strh	r2, [r3, #8]
	pumahid.y = 0x0000;
 80004d8:	4b12      	ldr	r3, [pc, #72]	; (8000524 <main+0x88>)
 80004da:	2200      	movs	r2, #0
 80004dc:	815a      	strh	r2, [r3, #10]
	pumahid.z = 0x0000;
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <main+0x88>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	819a      	strh	r2, [r3, #12]
	pumahid.rx = 0x0000;
 80004e4:	4b0f      	ldr	r3, [pc, #60]	; (8000524 <main+0x88>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	81da      	strh	r2, [r3, #14]
	pumahid.ry = 0x0000;
 80004ea:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <main+0x88>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	821a      	strh	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 faa4 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f81a 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f92e 	bl	8000758 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004fc:	f007 fb76 	bl	8007bec <MX_USB_DEVICE_Init>
  MX_ADC_Init();
 8000500:	f000 f88a 	bl	8000618 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	00d9      	lsls	r1, r3, #3
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2201      	movs	r2, #1
 800050e:	0018      	movs	r0, r3
 8000510:	f001 f9ec 	bl	80018ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4803      	ldr	r0, [pc, #12]	; (8000528 <main+0x8c>)
 800051a:	2200      	movs	r2, #0
 800051c:	0019      	movs	r1, r3
 800051e:	f001 f9e5 	bl	80018ec <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000522:	e7fe      	b.n	8000522 <main+0x86>
 8000524:	200001c8 	.word	0x200001c8
 8000528:	50000400 	.word	0x50000400

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b09f      	sub	sp, #124	; 0x7c
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	2440      	movs	r4, #64	; 0x40
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2338      	movs	r3, #56	; 0x38
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f007 fffb 	bl	8008538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	232c      	movs	r3, #44	; 0x2c
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	0018      	movs	r0, r3
 8000548:	2314      	movs	r3, #20
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f007 fff3 	bl	8008538 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	0018      	movs	r0, r3
 8000556:	2328      	movs	r3, #40	; 0x28
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f007 ffec 	bl	8008538 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <SystemClock_Config+0xe4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a2b      	ldr	r2, [pc, #172]	; (8000614 <SystemClock_Config+0xe8>)
 8000566:	401a      	ands	r2, r3
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <SystemClock_Config+0xe4>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0109      	lsls	r1, r1, #4
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2222      	movs	r2, #34	; 0x22
 8000578:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2210      	movs	r2, #16
 8000584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2201      	movs	r2, #1
 800058a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2202      	movs	r2, #2
 8000590:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	02d2      	lsls	r2, r2, #11
 800059e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	03d2      	lsls	r2, r2, #15
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 f816 	bl	80035dc <HAL_RCC_OscConfig>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f996 	bl	80008e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	212c      	movs	r1, #44	; 0x2c
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	220f      	movs	r2, #15
 80005be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2203      	movs	r2, #3
 80005c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2101      	movs	r1, #1
 80005dc:	0018      	movs	r0, r3
 80005de:	f003 fbd1 	bl	8003d84 <HAL_RCC_ClockConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005e6:	f000 f97d 	bl	80008e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2240      	movs	r2, #64	; 0x40
 80005ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	04d2      	lsls	r2, r2, #19
 80005f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	0018      	movs	r0, r3
 80005fc:	f003 fdb0 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000604:	f000 f96e 	bl	80008e4 <Error_Handler>
  }
}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b01f      	add	sp, #124	; 0x7c
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40007000 	.word	0x40007000
 8000614:	ffffe7ff 	.word	0xffffe7ff

08000618 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	003b      	movs	r3, r7
 8000620:	0018      	movs	r0, r3
 8000622:	2308      	movs	r3, #8
 8000624:	001a      	movs	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f007 ff86 	bl	8008538 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800062c:	4b44      	ldr	r3, [pc, #272]	; (8000740 <MX_ADC_Init+0x128>)
 800062e:	4a45      	ldr	r2, [pc, #276]	; (8000744 <MX_ADC_Init+0x12c>)
 8000630:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <MX_ADC_Init+0x128>)
 8000634:	2200      	movs	r2, #0
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000638:	4b41      	ldr	r3, [pc, #260]	; (8000740 <MX_ADC_Init+0x128>)
 800063a:	2280      	movs	r2, #128	; 0x80
 800063c:	05d2      	lsls	r2, r2, #23
 800063e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000640:	4b3f      	ldr	r3, [pc, #252]	; (8000740 <MX_ADC_Init+0x128>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000646:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <MX_ADC_Init+0x128>)
 8000648:	2200      	movs	r2, #0
 800064a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800064c:	4b3c      	ldr	r3, [pc, #240]	; (8000740 <MX_ADC_Init+0x128>)
 800064e:	2201      	movs	r2, #1
 8000650:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b3b      	ldr	r3, [pc, #236]	; (8000740 <MX_ADC_Init+0x128>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000658:	4b39      	ldr	r3, [pc, #228]	; (8000740 <MX_ADC_Init+0x128>)
 800065a:	2220      	movs	r2, #32
 800065c:	2101      	movs	r1, #1
 800065e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b37      	ldr	r3, [pc, #220]	; (8000740 <MX_ADC_Init+0x128>)
 8000662:	2221      	movs	r2, #33	; 0x21
 8000664:	2100      	movs	r1, #0
 8000666:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b35      	ldr	r3, [pc, #212]	; (8000740 <MX_ADC_Init+0x128>)
 800066a:	2200      	movs	r2, #0
 800066c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b34      	ldr	r3, [pc, #208]	; (8000740 <MX_ADC_Init+0x128>)
 8000670:	22c2      	movs	r2, #194	; 0xc2
 8000672:	32ff      	adds	r2, #255	; 0xff
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000676:	4b32      	ldr	r3, [pc, #200]	; (8000740 <MX_ADC_Init+0x128>)
 8000678:	222c      	movs	r2, #44	; 0x2c
 800067a:	2100      	movs	r1, #0
 800067c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <MX_ADC_Init+0x128>)
 8000680:	2204      	movs	r2, #4
 8000682:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <MX_ADC_Init+0x128>)
 8000686:	2200      	movs	r2, #0
 8000688:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800068a:	4b2d      	ldr	r3, [pc, #180]	; (8000740 <MX_ADC_Init+0x128>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000690:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_ADC_Init+0x128>)
 8000692:	2200      	movs	r2, #0
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_ADC_Init+0x128>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800069c:	4b28      	ldr	r3, [pc, #160]	; (8000740 <MX_ADC_Init+0x128>)
 800069e:	0018      	movs	r0, r3
 80006a0:	f000 fa3c 	bl	8000b1c <HAL_ADC_Init>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80006a8:	f000 f91c 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006ac:	003b      	movs	r3, r7
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80006b2:	003b      	movs	r3, r7
 80006b4:	2280      	movs	r2, #128	; 0x80
 80006b6:	0152      	lsls	r2, r2, #5
 80006b8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ba:	003a      	movs	r2, r7
 80006bc:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_ADC_Init+0x128>)
 80006be:	0011      	movs	r1, r2
 80006c0:	0018      	movs	r0, r3
 80006c2:	f000 fcdb 	bl	800107c <HAL_ADC_ConfigChannel>
 80006c6:	1e03      	subs	r3, r0, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80006ca:	f000 f90b 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ce:	003b      	movs	r3, r7
 80006d0:	4a1d      	ldr	r2, [pc, #116]	; (8000748 <MX_ADC_Init+0x130>)
 80006d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006d4:	003a      	movs	r2, r7
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_ADC_Init+0x128>)
 80006d8:	0011      	movs	r1, r2
 80006da:	0018      	movs	r0, r3
 80006dc:	f000 fcce 	bl	800107c <HAL_ADC_ConfigChannel>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80006e4:	f000 f8fe 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006e8:	003b      	movs	r3, r7
 80006ea:	4a18      	ldr	r2, [pc, #96]	; (800074c <MX_ADC_Init+0x134>)
 80006ec:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80006ee:	003a      	movs	r2, r7
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <MX_ADC_Init+0x128>)
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 fcc1 	bl	800107c <HAL_ADC_ConfigChannel>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 80006fe:	f000 f8f1 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000702:	003b      	movs	r3, r7
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_ADC_Init+0x138>)
 8000706:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000708:	003a      	movs	r2, r7
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <MX_ADC_Init+0x128>)
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f000 fcb4 	bl	800107c <HAL_ADC_ConfigChannel>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_ADC_Init+0x104>
  {
    Error_Handler();
 8000718:	f000 f8e4 	bl	80008e4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800071c:	003b      	movs	r3, r7
 800071e:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <MX_ADC_Init+0x13c>)
 8000720:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000722:	003a      	movs	r2, r7
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <MX_ADC_Init+0x128>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fca7 	bl	800107c <HAL_ADC_ConfigChannel>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC_Init+0x11e>
  {
    Error_Handler();
 8000732:	f000 f8d7 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	b002      	add	sp, #8
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	200001dc 	.word	0x200001dc
 8000744:	40012400 	.word	0x40012400
 8000748:	04000002 	.word	0x04000002
 800074c:	10000010 	.word	0x10000010
 8000750:	14000020 	.word	0x14000020
 8000754:	18000040 	.word	0x18000040

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	240c      	movs	r4, #12
 8000760:	193b      	adds	r3, r7, r4
 8000762:	0018      	movs	r0, r3
 8000764:	2314      	movs	r3, #20
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f007 fee5 	bl	8008538 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	4b43      	ldr	r3, [pc, #268]	; (800087c <MX_GPIO_Init+0x124>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b42      	ldr	r3, [pc, #264]	; (800087c <MX_GPIO_Init+0x124>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b40      	ldr	r3, [pc, #256]	; (800087c <MX_GPIO_Init+0x124>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	4b3d      	ldr	r3, [pc, #244]	; (800087c <MX_GPIO_Init+0x124>)
 8000788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800078a:	4b3c      	ldr	r3, [pc, #240]	; (800087c <MX_GPIO_Init+0x124>)
 800078c:	2102      	movs	r1, #2
 800078e:	430a      	orrs	r2, r1
 8000790:	62da      	str	r2, [r3, #44]	; 0x2c
 8000792:	4b3a      	ldr	r3, [pc, #232]	; (800087c <MX_GPIO_Init+0x124>)
 8000794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000796:	2202      	movs	r2, #2
 8000798:	4013      	ands	r3, r2
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	00d9      	lsls	r1, r3, #3
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	0018      	movs	r0, r3
 80007aa:	f001 f89f 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4833      	ldr	r0, [pc, #204]	; (8000880 <MX_GPIO_Init+0x128>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	0019      	movs	r1, r3
 80007b8:	f001 f898 	bl	80018ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	4a31      	ldr	r2, [pc, #196]	; (8000884 <MX_GPIO_Init+0x12c>)
 80007c0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2201      	movs	r2, #1
 80007cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4a2b      	ldr	r2, [pc, #172]	; (8000880 <MX_GPIO_Init+0x128>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	0010      	movs	r0, r2
 80007d6:	f000 ff0b 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_15;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	2283      	movs	r2, #131	; 0x83
 80007de:	0212      	lsls	r2, r2, #8
 80007e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2201      	movs	r2, #1
 80007ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	193a      	adds	r2, r7, r4
 80007f0:	23a0      	movs	r3, #160	; 0xa0
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	0011      	movs	r1, r2
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 fefa 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007fc:	0021      	movs	r1, r4
 80007fe:	187b      	adds	r3, r7, r1
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	00d2      	lsls	r2, r2, #3
 8000804:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	000c      	movs	r4, r1
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2201      	movs	r2, #1
 800080c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	193b      	adds	r3, r7, r4
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	193a      	adds	r2, r7, r4
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f000 fee4 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CH_Pin */
  GPIO_InitStruct.Pin = CH_Pin;
 8000828:	0021      	movs	r1, r4
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	000c      	movs	r4, r1
 8000834:	193b      	adds	r3, r7, r4
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2202      	movs	r2, #2
 800083e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CH_GPIO_Port, &GPIO_InitStruct);
 8000840:	193b      	adds	r3, r7, r4
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <MX_GPIO_Init+0x128>)
 8000844:	0019      	movs	r1, r3
 8000846:	0010      	movs	r0, r2
 8000848:	f000 fed2 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_Pin */
  GPIO_InitStruct.Pin = EN_Pin;
 800084c:	0021      	movs	r1, r4
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2280      	movs	r2, #128	; 0x80
 8000852:	0092      	lsls	r2, r2, #2
 8000854:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2201      	movs	r2, #1
 800085a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2202      	movs	r2, #2
 8000860:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(EN_GPIO_Port, &GPIO_InitStruct);
 8000868:	187b      	adds	r3, r7, r1
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <MX_GPIO_Init+0x128>)
 800086c:	0019      	movs	r1, r3
 800086e:	0010      	movs	r0, r2
 8000870:	f000 febe 	bl	80015f0 <HAL_GPIO_Init>

}
 8000874:	46c0      	nop			; (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	b009      	add	sp, #36	; 0x24
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	40021000 	.word	0x40021000
 8000880:	50000400 	.word	0x50000400
 8000884:	0000e078 	.word	0x0000e078

08000888 <envoi>:

/* USER CODE BEGIN 4 */
void envoi(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc);
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <envoi+0x4c>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fab8 	bl	8000e04 <HAL_ADC_Start>
	ADC_VAL[0] = HAL_ADC_GetValue(&hadc);
 8000894:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <envoi+0x4c>)
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fbe4 	bl	8001064 <HAL_ADC_GetValue>
 800089c:	0002      	movs	r2, r0
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <envoi+0x50>)
 80008a0:	601a      	str	r2, [r3, #0]
	HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80008a2:	2301      	movs	r3, #1
 80008a4:	425a      	negs	r2, r3
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <envoi+0x4c>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f000 fb3e 	bl	8000f2c <HAL_ADC_PollForConversion>
	HAL_ADC_Stop(&hadc);
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <envoi+0x4c>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 fafa 	bl	8000eac <HAL_ADC_Stop>

	pumahid.x = ADC_VAL[0];
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <envoi+0x50>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b07      	ldr	r3, [pc, #28]	; (80008dc <envoi+0x54>)
 80008c0:	811a      	strh	r2, [r3, #8]

	USBD_HID_SendReport(&hUsbDeviceFS, &pumahid, sizeof(pumahid));
 80008c2:	4906      	ldr	r1, [pc, #24]	; (80008dc <envoi+0x54>)
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <envoi+0x58>)
 80008c6:	2212      	movs	r2, #18
 80008c8:	0018      	movs	r0, r3
 80008ca:	f007 f8b1 	bl	8007a30 <USBD_HID_SendReport>
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200001dc 	.word	0x200001dc
 80008d8:	200001b0 	.word	0x200001b0
 80008dc:	200001c8 	.word	0x200001c8
 80008e0:	2000023c 	.word	0x2000023c

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f4:	4b07      	ldr	r3, [pc, #28]	; (8000914 <HAL_MspInit+0x24>)
 80008f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_MspInit+0x24>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	430a      	orrs	r2, r1
 80008fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <HAL_MspInit+0x24>)
 8000902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_MspInit+0x24>)
 8000906:	2180      	movs	r1, #128	; 0x80
 8000908:	0549      	lsls	r1, r1, #21
 800090a:	430a      	orrs	r2, r1
 800090c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090e:	46c0      	nop			; (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000

08000918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000918:	b590      	push	{r4, r7, lr}
 800091a:	b089      	sub	sp, #36	; 0x24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	240c      	movs	r4, #12
 8000922:	193b      	adds	r3, r7, r4
 8000924:	0018      	movs	r0, r3
 8000926:	2314      	movs	r3, #20
 8000928:	001a      	movs	r2, r3
 800092a:	2100      	movs	r1, #0
 800092c:	f007 fe04 	bl	8008538 <memset>
  if(hadc->Instance==ADC1)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <HAL_ADC_MspInit+0x70>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d122      	bne.n	8000980 <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x74>)
 800093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093e:	4b13      	ldr	r3, [pc, #76]	; (800098c <HAL_ADC_MspInit+0x74>)
 8000940:	2180      	movs	r1, #128	; 0x80
 8000942:	0089      	lsls	r1, r1, #2
 8000944:	430a      	orrs	r2, r1
 8000946:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_ADC_MspInit+0x74>)
 800094a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800094c:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_ADC_MspInit+0x74>)
 800094e:	2101      	movs	r1, #1
 8000950:	430a      	orrs	r2, r1
 8000952:	62da      	str	r2, [r3, #44]	; 0x2c
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_ADC_MspInit+0x74>)
 8000956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000958:	2201      	movs	r2, #1
 800095a:	4013      	ands	r3, r2
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000960:	193b      	adds	r3, r7, r4
 8000962:	2273      	movs	r2, #115	; 0x73
 8000964:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	193b      	adds	r3, r7, r4
 8000968:	2203      	movs	r2, #3
 800096a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	193b      	adds	r3, r7, r4
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	193a      	adds	r2, r7, r4
 8000974:	23a0      	movs	r3, #160	; 0xa0
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fe38 	bl	80015f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b009      	add	sp, #36	; 0x24
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40012400 	.word	0x40012400
 800098c:	40021000 	.word	0x40021000

08000990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <NMI_Handler+0x4>

08000996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000996:	b580      	push	{r7, lr}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f896 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80009c4:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <USB_IRQHandler+0x18>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 f8e4 	bl	8001b94 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */
  envoi();
 80009cc:	f7ff ff5c 	bl	8000888 <envoi>
  /* USER CODE END USB_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000700 	.word	0x20000700

080009dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009ea:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480d      	ldr	r0, [pc, #52]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490e      	ldr	r1, [pc, #56]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0e      	ldr	r2, [pc, #56]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0b      	ldr	r4, [pc, #44]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a12:	f7ff ffe3 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f007 fd6b 	bl	80084f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a1a:	f7ff fd3f 	bl	800049c <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
   ldr   r0, =_estack
 8000a20:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000a2c:	08008634 	.word	0x08008634
  ldr r2, =_sbss
 8000a30:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000a34:	200009f4 	.word	0x200009f4

08000a38 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_COMP_IRQHandler>
	...

08000a3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	2200      	movs	r2, #0
 8000a46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_Init+0x3c>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_Init+0x3c>)
 8000a4e:	2140      	movs	r1, #64	; 0x40
 8000a50:	430a      	orrs	r2, r1
 8000a52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f811 	bl	8000a7c <HAL_InitTick>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	2201      	movs	r2, #1
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	e001      	b.n	8000a6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a66:	f7ff ff43 	bl	80008f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
}
 8000a6e:	0018      	movs	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000a86:	681c      	ldr	r4, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	; (8000adc <HAL_InitTick+0x60>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	23fa      	movs	r3, #250	; 0xfa
 8000a90:	0098      	lsls	r0, r3, #2
 8000a92:	f7ff fb39 	bl	8000108 <__udivsi3>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	0020      	movs	r0, r4
 8000a9c:	f7ff fb34 	bl	8000108 <__udivsi3>
 8000aa0:	0003      	movs	r3, r0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fd97 	bl	80015d6 <HAL_SYSTICK_Config>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e00f      	b.n	8000ad0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	d80b      	bhi.n	8000ace <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2301      	movs	r3, #1
 8000aba:	425b      	negs	r3, r3
 8000abc:	2200      	movs	r2, #0
 8000abe:	0018      	movs	r0, r3
 8000ac0:	f000 fd64 	bl	800158c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_InitTick+0x64>)
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b003      	add	sp, #12
 8000ad6:	bd90      	pop	{r4, r7, pc}
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x1c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	001a      	movs	r2, r3
 8000aee:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x20>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	18d2      	adds	r2, r2, r3
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_IncTick+0x20>)
 8000af6:	601a      	str	r2, [r3, #0]
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	20000008 	.word	0x20000008
 8000b04:	20000238 	.word	0x20000238

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <HAL_GetTick+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	20000238 	.word	0x20000238

08000b1c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e159      	b.n	8000de2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d10a      	bne.n	8000b4c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2250      	movs	r2, #80	; 0x50
 8000b40:	2100      	movs	r1, #0
 8000b42:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fee6 	bl	8000918 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b50:	2210      	movs	r2, #16
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b10      	cmp	r3, #16
 8000b56:	d005      	beq.n	8000b64 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000b62:	d00b      	beq.n	8000b7c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b68:	2210      	movs	r2, #16
 8000b6a:	431a      	orrs	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2250      	movs	r2, #80	; 0x50
 8000b74:	2100      	movs	r1, #0
 8000b76:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e132      	b.n	8000de2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b80:	4a9a      	ldr	r2, [pc, #616]	; (8000dec <HAL_ADC_Init+0x2d0>)
 8000b82:	4013      	ands	r3, r2
 8000b84:	2202      	movs	r2, #2
 8000b86:	431a      	orrs	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	689b      	ldr	r3, [r3, #8]
 8000b92:	2203      	movs	r2, #3
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d108      	bne.n	8000bac <HAL_ADC_Init+0x90>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d101      	bne.n	8000bac <HAL_ADC_Init+0x90>
 8000ba8:	2301      	movs	r3, #1
 8000baa:	e000      	b.n	8000bae <HAL_ADC_Init+0x92>
 8000bac:	2300      	movs	r3, #0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d149      	bne.n	8000c46 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	23c0      	movs	r3, #192	; 0xc0
 8000bb8:	061b      	lsls	r3, r3, #24
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_ADC_Init+0xba>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	05db      	lsls	r3, r3, #23
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d005      	beq.n	8000bd6 <HAL_ADC_Init+0xba>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	2380      	movs	r3, #128	; 0x80
 8000bd0:	061b      	lsls	r3, r3, #24
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d111      	bne.n	8000bfa <HAL_ADC_Init+0xde>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	691a      	ldr	r2, [r3, #16]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	0892      	lsrs	r2, r2, #2
 8000be4:	611a      	str	r2, [r3, #16]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6919      	ldr	r1, [r3, #16]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	611a      	str	r2, [r3, #16]
 8000bf8:	e014      	b.n	8000c24 <HAL_ADC_Init+0x108>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	691a      	ldr	r2, [r3, #16]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	0892      	lsrs	r2, r2, #2
 8000c08:	611a      	str	r2, [r3, #16]
 8000c0a:	4b79      	ldr	r3, [pc, #484]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b78      	ldr	r3, [pc, #480]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c10:	4978      	ldr	r1, [pc, #480]	; (8000df4 <HAL_ADC_Init+0x2d8>)
 8000c12:	400a      	ands	r2, r1
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	4b76      	ldr	r3, [pc, #472]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c18:	6819      	ldr	r1, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	4b74      	ldr	r3, [pc, #464]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c20:	430a      	orrs	r2, r1
 8000c22:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	68da      	ldr	r2, [r3, #12]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2118      	movs	r1, #24
 8000c30:	438a      	bics	r2, r1
 8000c32:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	68d9      	ldr	r1, [r3, #12]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	689a      	ldr	r2, [r3, #8]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000c46:	4b6a      	ldr	r3, [pc, #424]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b69      	ldr	r3, [pc, #420]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c4c:	496a      	ldr	r1, [pc, #424]	; (8000df8 <HAL_ADC_Init+0x2dc>)
 8000c4e:	400a      	ands	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000c52:	4b67      	ldr	r3, [pc, #412]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c54:	6819      	ldr	r1, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c5a:	065a      	lsls	r2, r3, #25
 8000c5c:	4b64      	ldr	r3, [pc, #400]	; (8000df0 <HAL_ADC_Init+0x2d4>)
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	055b      	lsls	r3, r3, #21
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	d108      	bne.n	8000c82 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689a      	ldr	r2, [r3, #8]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	0549      	lsls	r1, r1, #21
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	68da      	ldr	r2, [r3, #12]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	495b      	ldr	r1, [pc, #364]	; (8000dfc <HAL_ADC_Init+0x2e0>)
 8000c8e:	400a      	ands	r2, r1
 8000c90:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	68d9      	ldr	r1, [r3, #12]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	691b      	ldr	r3, [r3, #16]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d101      	bne.n	8000ca8 <HAL_ADC_Init+0x18c>
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	e000      	b.n	8000caa <HAL_ADC_Init+0x18e>
 8000ca8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000caa:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2020      	movs	r0, #32
 8000cb0:	5c1b      	ldrb	r3, [r3, r0]
 8000cb2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000cb4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	202c      	movs	r0, #44	; 0x2c
 8000cba:	5c1b      	ldrb	r3, [r3, r0]
 8000cbc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000cbe:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000cc4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8000ccc:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000cd4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ce2:	23c2      	movs	r3, #194	; 0xc2
 8000ce4:	33ff      	adds	r3, #255	; 0xff
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d00b      	beq.n	8000d02 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68d9      	ldr	r1, [r3, #12]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2221      	movs	r2, #33	; 0x21
 8000d06:	5c9b      	ldrb	r3, [r3, r2]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d11a      	bne.n	8000d42 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2220      	movs	r2, #32
 8000d10:	5c9b      	ldrb	r3, [r3, r2]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d109      	bne.n	8000d2a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68da      	ldr	r2, [r3, #12]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2180      	movs	r1, #128	; 0x80
 8000d22:	0249      	lsls	r1, r1, #9
 8000d24:	430a      	orrs	r2, r1
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	e00b      	b.n	8000d42 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d2e:	2220      	movs	r2, #32
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d11f      	bne.n	8000d8a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	492a      	ldr	r1, [pc, #168]	; (8000e00 <HAL_ADC_Init+0x2e4>)
 8000d56:	400a      	ands	r2, r1
 8000d58:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	6919      	ldr	r1, [r3, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d68:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8000d6e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2101      	movs	r1, #1
 8000d84:	430a      	orrs	r2, r1
 8000d86:	611a      	str	r2, [r3, #16]
 8000d88:	e00e      	b.n	8000da8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	691b      	ldr	r3, [r3, #16]
 8000d90:	2201      	movs	r2, #1
 8000d92:	4013      	ands	r3, r2
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d107      	bne.n	8000da8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	691a      	ldr	r2, [r3, #16]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2101      	movs	r1, #1
 8000da4:	438a      	bics	r2, r1
 8000da6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	695a      	ldr	r2, [r3, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2107      	movs	r1, #7
 8000db4:	438a      	bics	r2, r1
 8000db6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6959      	ldr	r1, [r3, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	4393      	bics	r3, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b002      	add	sp, #8
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	fffffefd 	.word	0xfffffefd
 8000df0:	40012708 	.word	0x40012708
 8000df4:	ffc3ffff 	.word	0xffc3ffff
 8000df8:	fdffffff 	.word	0xfdffffff
 8000dfc:	fffe0219 	.word	0xfffe0219
 8000e00:	fffffc03 	.word	0xfffffc03

08000e04 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e04:	b590      	push	{r4, r7, lr}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	2204      	movs	r2, #4
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	d138      	bne.n	8000e92 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2250      	movs	r2, #80	; 0x50
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_ADC_Start+0x2a>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e038      	b.n	8000ea0 <HAL_ADC_Start+0x9c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2250      	movs	r2, #80	; 0x50
 8000e32:	2101      	movs	r1, #1
 8000e34:	5499      	strb	r1, [r3, r2]
    
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d007      	beq.n	8000e4e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000e3e:	230f      	movs	r3, #15
 8000e40:	18fc      	adds	r4, r7, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	0018      	movs	r0, r3
 8000e46:	f000 f9b9 	bl	80011bc <ADC_Enable>
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d120      	bne.n	8000e9a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <HAL_ADC_Start+0xa4>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0052      	lsls	r2, r2, #1
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	659a      	str	r2, [r3, #88]	; 0x58
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2250      	movs	r2, #80	; 0x50
 8000e74:	2100      	movs	r1, #0
 8000e76:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	221c      	movs	r2, #28
 8000e7e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2104      	movs	r1, #4
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	e003      	b.n	8000e9a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000e92:	230f      	movs	r3, #15
 8000e94:	18fb      	adds	r3, r7, r3
 8000e96:	2202      	movs	r2, #2
 8000e98:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e9a:	230f      	movs	r3, #15
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b005      	add	sp, #20
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	fffff0fe 	.word	0xfffff0fe

08000eac <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000eb4:	230f      	movs	r3, #15
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2250      	movs	r2, #80	; 0x50
 8000ec0:	5c9b      	ldrb	r3, [r3, r2]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Stop+0x1e>
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e029      	b.n	8000f1e <HAL_ADC_Stop+0x72>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2250      	movs	r2, #80	; 0x50
 8000ece:	2101      	movs	r1, #1
 8000ed0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000ed2:	250f      	movs	r5, #15
 8000ed4:	197c      	adds	r4, r7, r5
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 fa3e 	bl	800135a <ADC_ConversionStop>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000ee2:	197b      	adds	r3, r7, r5
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d112      	bne.n	8000f10 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000eea:	197c      	adds	r4, r7, r5
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 f9cc 	bl	800128c <ADC_Disable>
 8000ef4:	0003      	movs	r3, r0
 8000ef6:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8000ef8:	197b      	adds	r3, r7, r5
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d107      	bne.n	8000f10 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f04:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_ADC_Stop+0x7c>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	2201      	movs	r2, #1
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2250      	movs	r2, #80	; 0x50
 8000f14:	2100      	movs	r1, #0
 8000f16:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f18:	230f      	movs	r3, #15
 8000f1a:	18fb      	adds	r3, r7, r3
 8000f1c:	781b      	ldrb	r3, [r3, #0]
}
 8000f1e:	0018      	movs	r0, r3
 8000f20:	46bd      	mov	sp, r7
 8000f22:	b004      	add	sp, #16
 8000f24:	bdb0      	pop	{r4, r5, r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	fffffefe 	.word	0xfffffefe

08000f2c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d102      	bne.n	8000f4c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000f46:	2308      	movs	r3, #8
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e014      	b.n	8000f76 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d10b      	bne.n	8000f72 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f5e:	2220      	movs	r2, #32
 8000f60:	431a      	orrs	r2, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2250      	movs	r2, #80	; 0x50
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e072      	b.n	8001058 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000f72:	230c      	movs	r3, #12
 8000f74:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000f76:	f7ff fdc7 	bl	8000b08 <HAL_GetTick>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f7e:	e01f      	b.n	8000fc0 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	3301      	adds	r3, #1
 8000f84:	d01c      	beq.n	8000fc0 <HAL_ADC_PollForConversion+0x94>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <HAL_ADC_PollForConversion+0x70>
 8000f8c:	f7ff fdbc 	bl	8000b08 <HAL_GetTick>
 8000f90:	0002      	movs	r2, r0
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d211      	bcs.n	8000fc0 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68fa      	ldr	r2, [r7, #12]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fac:	2204      	movs	r2, #4
 8000fae:	431a      	orrs	r2, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2250      	movs	r2, #80	; 0x50
 8000fb8:	2100      	movs	r1, #0
 8000fba:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e04b      	b.n	8001058 <HAL_ADC_PollForConversion+0x12c>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d0d9      	beq.n	8000f80 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	68da      	ldr	r2, [r3, #12]
 8000fe0:	23c0      	movs	r3, #192	; 0xc0
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d12e      	bne.n	8001046 <HAL_ADC_PollForConversion+0x11a>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2220      	movs	r2, #32
 8000fec:	5c9b      	ldrb	r3, [r3, r2]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d129      	bne.n	8001046 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2208      	movs	r2, #8
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d122      	bne.n	8001046 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	2204      	movs	r2, #4
 8001008:	4013      	ands	r3, r2
 800100a:	d110      	bne.n	800102e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	210c      	movs	r1, #12
 8001018:	438a      	bics	r2, r1
 800101a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_ADC_PollForConversion+0x134>)
 8001022:	4013      	ands	r3, r2
 8001024:	2201      	movs	r2, #1
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	655a      	str	r2, [r3, #84]	; 0x54
 800102c:	e00b      	b.n	8001046 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001032:	2220      	movs	r2, #32
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103e:	2201      	movs	r2, #1
 8001040:	431a      	orrs	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	659a      	str	r2, [r3, #88]	; 0x58
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	220c      	movs	r2, #12
 8001054:	601a      	str	r2, [r3, #0]
  }
  
  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	0018      	movs	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	b004      	add	sp, #16
 800105e:	bd80      	pop	{r7, pc}
 8001060:	fffffefe 	.word	0xfffffefe

08001064 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001072:	0018      	movs	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2250      	movs	r2, #80	; 0x50
 800108a:	5c9b      	ldrb	r3, [r3, r2]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x18>
 8001090:	2302      	movs	r3, #2
 8001092:	e085      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x124>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2250      	movs	r2, #80	; 0x50
 8001098:	2101      	movs	r1, #1
 800109a:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	2204      	movs	r2, #4
 80010a4:	4013      	ands	r3, r2
 80010a6:	d00b      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ac:	2220      	movs	r2, #32
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2250      	movs	r2, #80	; 0x50
 80010b8:	2100      	movs	r1, #0
 80010ba:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e06f      	b.n	80011a0 <HAL_ADC_ConfigChannel+0x124>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_ADC_ConfigChannel+0x12c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d035      	beq.n	8001136 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	035b      	lsls	r3, r3, #13
 80010d6:	0b5a      	lsrs	r2, r3, #13
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	02db      	lsls	r3, r3, #11
 80010e8:	4013      	ands	r3, r2
 80010ea:	d009      	beq.n	8001100 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80010ec:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 80010f2:	2180      	movs	r1, #128	; 0x80
 80010f4:	0409      	lsls	r1, r1, #16
 80010f6:	430a      	orrs	r2, r1
 80010f8:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80010fa:	200a      	movs	r0, #10
 80010fc:	f000 f97a 	bl	80013f4 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	029b      	lsls	r3, r3, #10
 8001108:	4013      	ands	r3, r2
 800110a:	d006      	beq.n	800111a <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b26      	ldr	r3, [pc, #152]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 8001112:	2180      	movs	r1, #128	; 0x80
 8001114:	03c9      	lsls	r1, r1, #15
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	4013      	ands	r3, r2
 8001124:	d037      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;   
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0449      	lsls	r1, r1, #17
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e02f      	b.n	8001196 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	035b      	lsls	r3, r3, #13
 8001142:	0b5b      	lsrs	r3, r3, #13
 8001144:	43d9      	mvns	r1, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	400a      	ands	r2, r1
 800114c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	02db      	lsls	r3, r3, #11
 8001156:	4013      	ands	r3, r2
 8001158:	d005      	beq.n	8001166 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 8001160:	4913      	ldr	r1, [pc, #76]	; (80011b0 <HAL_ADC_ConfigChannel+0x134>)
 8001162:	400a      	ands	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	029b      	lsls	r3, r3, #10
 800116e:	4013      	ands	r3, r2
 8001170:	d005      	beq.n	800117e <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 8001178:	490e      	ldr	r1, [pc, #56]	; (80011b4 <HAL_ADC_ConfigChannel+0x138>)
 800117a:	400a      	ands	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
    }
    
#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	2380      	movs	r3, #128	; 0x80
 8001184:	025b      	lsls	r3, r3, #9
 8001186:	4013      	ands	r3, r2
 8001188:	d005      	beq.n	8001196 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;   
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_ADC_ConfigChannel+0x130>)
 8001190:	4909      	ldr	r1, [pc, #36]	; (80011b8 <HAL_ADC_ConfigChannel+0x13c>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2250      	movs	r2, #80	; 0x50
 800119a:	2100      	movs	r1, #0
 800119c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	00001001 	.word	0x00001001
 80011ac:	40012708 	.word	0x40012708
 80011b0:	ff7fffff 	.word	0xff7fffff
 80011b4:	ffbfffff 	.word	0xffbfffff
 80011b8:	feffffff 	.word	0xfeffffff

080011bc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2203      	movs	r2, #3
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d108      	bne.n	80011e8 <ADC_Enable+0x2c>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2201      	movs	r2, #1
 80011de:	4013      	ands	r3, r2
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d101      	bne.n	80011e8 <ADC_Enable+0x2c>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <ADC_Enable+0x2e>
 80011e8:	2300      	movs	r3, #0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d146      	bne.n	800127c <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a24      	ldr	r2, [pc, #144]	; (8001288 <ADC_Enable+0xcc>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	d00d      	beq.n	8001216 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fe:	2210      	movs	r2, #16
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	2201      	movs	r2, #1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	659a      	str	r2, [r3, #88]	; 0x58
      
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e033      	b.n	800127e <ADC_Enable+0xc2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8001226:	2001      	movs	r0, #1
 8001228:	f000 f8e4 	bl	80013f4 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800122c:	f7ff fc6c 	bl	8000b08 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001234:	e01b      	b.n	800126e <ADC_Enable+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001236:	f7ff fc67 	bl	8000b08 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b0a      	cmp	r3, #10
 8001242:	d914      	bls.n	800126e <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2201      	movs	r2, #1
 800124c:	4013      	ands	r3, r2
 800124e:	2b01      	cmp	r3, #1
 8001250:	d00d      	beq.n	800126e <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001256:	2210      	movs	r2, #16
 8001258:	431a      	orrs	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	2201      	movs	r2, #1
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e007      	b.n	800127e <ADC_Enable+0xc2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	2b01      	cmp	r3, #1
 800127a:	d1dc      	bne.n	8001236 <ADC_Enable+0x7a>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b004      	add	sp, #16
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			; (mov r8, r8)
 8001288:	80000017 	.word	0x80000017

0800128c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2203      	movs	r2, #3
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d108      	bne.n	80012b8 <ADC_Disable+0x2c>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2201      	movs	r2, #1
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <ADC_Disable+0x2c>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <ADC_Disable+0x2e>
 80012b8:	2300      	movs	r3, #0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d048      	beq.n	8001350 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	2205      	movs	r2, #5
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d110      	bne.n	80012ee <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2102      	movs	r1, #2
 80012d8:	430a      	orrs	r2, r1
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2203      	movs	r2, #3
 80012e2:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012e4:	f7ff fc10 	bl	8000b08 <HAL_GetTick>
 80012e8:	0003      	movs	r3, r0
 80012ea:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80012ec:	e029      	b.n	8001342 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	2210      	movs	r2, #16
 80012f4:	431a      	orrs	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	2201      	movs	r2, #1
 8001300:	431a      	orrs	r2, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e023      	b.n	8001352 <ADC_Disable+0xc6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800130a:	f7ff fbfd 	bl	8000b08 <HAL_GetTick>
 800130e:	0002      	movs	r2, r0
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b0a      	cmp	r3, #10
 8001316:	d914      	bls.n	8001342 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	2201      	movs	r2, #1
 8001320:	4013      	ands	r3, r2
 8001322:	2b01      	cmp	r3, #1
 8001324:	d10d      	bne.n	8001342 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800132a:	2210      	movs	r2, #16
 800132c:	431a      	orrs	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001336:	2201      	movs	r2, #1
 8001338:	431a      	orrs	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e007      	b.n	8001352 <ADC_Disable+0xc6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2201      	movs	r2, #1
 800134a:	4013      	ands	r3, r2
 800134c:	2b01      	cmp	r3, #1
 800134e:	d0dc      	beq.n	800130a <ADC_Disable+0x7e>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	2204      	movs	r2, #4
 800136e:	4013      	ands	r3, r2
 8001370:	d03a      	beq.n	80013e8 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	2204      	movs	r2, #4
 800137a:	4013      	ands	r3, r2
 800137c:	2b04      	cmp	r3, #4
 800137e:	d10d      	bne.n	800139c <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800138a:	d107      	bne.n	800139c <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2110      	movs	r1, #16
 8001398:	430a      	orrs	r2, r1
 800139a:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800139c:	f7ff fbb4 	bl	8000b08 <HAL_GetTick>
 80013a0:	0003      	movs	r3, r0
 80013a2:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013a4:	e01a      	b.n	80013dc <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80013a6:	f7ff fbaf 	bl	8000b08 <HAL_GetTick>
 80013aa:	0002      	movs	r2, r0
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b0a      	cmp	r3, #10
 80013b2:	d913      	bls.n	80013dc <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2204      	movs	r2, #4
 80013bc:	4013      	ands	r3, r2
 80013be:	d00d      	beq.n	80013dc <ADC_ConversionStop+0x82>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	2210      	movs	r2, #16
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	655a      	str	r2, [r3, #84]	; 0x54
      
        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	2201      	movs	r2, #1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	659a      	str	r2, [r3, #88]	; 0x58
        
        return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e006      	b.n	80013ea <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2204      	movs	r2, #4
 80013e4:	4013      	ands	r3, r2
 80013e6:	d1de      	bne.n	80013a6 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	0018      	movs	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <ADC_DelayMicroSecond+0x38>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	490b      	ldr	r1, [pc, #44]	; (8001430 <ADC_DelayMicroSecond+0x3c>)
 8001402:	0018      	movs	r0, r3
 8001404:	f7fe fe80 	bl	8000108 <__udivsi3>
 8001408:	0003      	movs	r3, r0
 800140a:	001a      	movs	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4353      	muls	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001412:	e002      	b.n	800141a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3b01      	subs	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1f9      	bne.n	8001414 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001420:	46c0      	nop			; (mov r8, r8)
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	20000000 	.word	0x20000000
 8001430:	000f4240 	.word	0x000f4240

08001434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	0002      	movs	r2, r0
 800143c:	1dfb      	adds	r3, r7, #7
 800143e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b7f      	cmp	r3, #127	; 0x7f
 8001446:	d809      	bhi.n	800145c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	001a      	movs	r2, r3
 800144e:	231f      	movs	r3, #31
 8001450:	401a      	ands	r2, r3
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_EnableIRQ+0x30>)
 8001454:	2101      	movs	r1, #1
 8001456:	4091      	lsls	r1, r2
 8001458:	000a      	movs	r2, r1
 800145a:	601a      	str	r2, [r3, #0]
  }
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	0002      	movs	r2, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b7f      	cmp	r3, #127	; 0x7f
 800147c:	d828      	bhi.n	80014d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147e:	4a2f      	ldr	r2, [pc, #188]	; (800153c <__NVIC_SetPriority+0xd4>)
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	33c0      	adds	r3, #192	; 0xc0
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	589b      	ldr	r3, [r3, r2]
 800148e:	1dfa      	adds	r2, r7, #7
 8001490:	7812      	ldrb	r2, [r2, #0]
 8001492:	0011      	movs	r1, r2
 8001494:	2203      	movs	r2, #3
 8001496:	400a      	ands	r2, r1
 8001498:	00d2      	lsls	r2, r2, #3
 800149a:	21ff      	movs	r1, #255	; 0xff
 800149c:	4091      	lsls	r1, r2
 800149e:	000a      	movs	r2, r1
 80014a0:	43d2      	mvns	r2, r2
 80014a2:	401a      	ands	r2, r3
 80014a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	019b      	lsls	r3, r3, #6
 80014aa:	22ff      	movs	r2, #255	; 0xff
 80014ac:	401a      	ands	r2, r3
 80014ae:	1dfb      	adds	r3, r7, #7
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	0018      	movs	r0, r3
 80014b4:	2303      	movs	r3, #3
 80014b6:	4003      	ands	r3, r0
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014bc:	481f      	ldr	r0, [pc, #124]	; (800153c <__NVIC_SetPriority+0xd4>)
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	b25b      	sxtb	r3, r3
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	430a      	orrs	r2, r1
 80014c8:	33c0      	adds	r3, #192	; 0xc0
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014ce:	e031      	b.n	8001534 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d0:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <__NVIC_SetPriority+0xd8>)
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	0019      	movs	r1, r3
 80014d8:	230f      	movs	r3, #15
 80014da:	400b      	ands	r3, r1
 80014dc:	3b08      	subs	r3, #8
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3306      	adds	r3, #6
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	18d3      	adds	r3, r2, r3
 80014e6:	3304      	adds	r3, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	1dfa      	adds	r2, r7, #7
 80014ec:	7812      	ldrb	r2, [r2, #0]
 80014ee:	0011      	movs	r1, r2
 80014f0:	2203      	movs	r2, #3
 80014f2:	400a      	ands	r2, r1
 80014f4:	00d2      	lsls	r2, r2, #3
 80014f6:	21ff      	movs	r1, #255	; 0xff
 80014f8:	4091      	lsls	r1, r2
 80014fa:	000a      	movs	r2, r1
 80014fc:	43d2      	mvns	r2, r2
 80014fe:	401a      	ands	r2, r3
 8001500:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	019b      	lsls	r3, r3, #6
 8001506:	22ff      	movs	r2, #255	; 0xff
 8001508:	401a      	ands	r2, r3
 800150a:	1dfb      	adds	r3, r7, #7
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	0018      	movs	r0, r3
 8001510:	2303      	movs	r3, #3
 8001512:	4003      	ands	r3, r0
 8001514:	00db      	lsls	r3, r3, #3
 8001516:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <__NVIC_SetPriority+0xd8>)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	001c      	movs	r4, r3
 8001520:	230f      	movs	r3, #15
 8001522:	4023      	ands	r3, r4
 8001524:	3b08      	subs	r3, #8
 8001526:	089b      	lsrs	r3, r3, #2
 8001528:	430a      	orrs	r2, r1
 800152a:	3306      	adds	r3, #6
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	18c3      	adds	r3, r0, r3
 8001530:	3304      	adds	r3, #4
 8001532:	601a      	str	r2, [r3, #0]
}
 8001534:	46c0      	nop			; (mov r8, r8)
 8001536:	46bd      	mov	sp, r7
 8001538:	b003      	add	sp, #12
 800153a:	bd90      	pop	{r4, r7, pc}
 800153c:	e000e100 	.word	0xe000e100
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	1e5a      	subs	r2, r3, #1
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	045b      	lsls	r3, r3, #17
 8001554:	429a      	cmp	r2, r3
 8001556:	d301      	bcc.n	800155c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001558:	2301      	movs	r3, #1
 800155a:	e010      	b.n	800157e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <SysTick_Config+0x44>)
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	3a01      	subs	r2, #1
 8001562:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001564:	2301      	movs	r3, #1
 8001566:	425b      	negs	r3, r3
 8001568:	2103      	movs	r1, #3
 800156a:	0018      	movs	r0, r3
 800156c:	f7ff ff7c 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <SysTick_Config+0x44>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001576:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SysTick_Config+0x44>)
 8001578:	2207      	movs	r2, #7
 800157a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800157c:	2300      	movs	r3, #0
}
 800157e:	0018      	movs	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	b002      	add	sp, #8
 8001584:	bd80      	pop	{r7, pc}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	e000e010 	.word	0xe000e010

0800158c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	60b9      	str	r1, [r7, #8]
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	210f      	movs	r1, #15
 8001598:	187b      	adds	r3, r7, r1
 800159a:	1c02      	adds	r2, r0, #0
 800159c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	0011      	movs	r1, r2
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	0002      	movs	r2, r0
 80015be:	1dfb      	adds	r3, r7, #7
 80015c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ff33 	bl	8001434 <__NVIC_EnableIRQ>
}
 80015ce:	46c0      	nop			; (mov r8, r8)
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b002      	add	sp, #8
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	0018      	movs	r0, r3
 80015e2:	f7ff ffaf 	bl	8001544 <SysTick_Config>
 80015e6:	0003      	movs	r3, r0
}
 80015e8:	0018      	movs	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	b002      	add	sp, #8
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001606:	e155      	b.n	80018b4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	4091      	lsls	r1, r2
 8001612:	000a      	movs	r2, r1
 8001614:	4013      	ands	r3, r2
 8001616:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d100      	bne.n	8001620 <HAL_GPIO_Init+0x30>
 800161e:	e146      	b.n	80018ae <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	2203      	movs	r2, #3
 8001626:	4013      	ands	r3, r2
 8001628:	2b01      	cmp	r3, #1
 800162a:	d005      	beq.n	8001638 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2203      	movs	r2, #3
 8001632:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001634:	2b02      	cmp	r3, #2
 8001636:	d130      	bne.n	800169a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	409a      	lsls	r2, r3
 8001646:	0013      	movs	r3, r2
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	409a      	lsls	r2, r3
 800165a:	0013      	movs	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800166e:	2201      	movs	r2, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
 8001674:	0013      	movs	r3, r2
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	2201      	movs	r2, #1
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
 800168c:	0013      	movs	r3, r2
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b03      	cmp	r3, #3
 80016a4:	d017      	beq.n	80016d6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	2203      	movs	r2, #3
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	43da      	mvns	r2, r3
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	409a      	lsls	r2, r3
 80016c8:	0013      	movs	r3, r2
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2203      	movs	r2, #3
 80016dc:	4013      	ands	r3, r2
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d123      	bne.n	800172a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	08da      	lsrs	r2, r3, #3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3208      	adds	r2, #8
 80016ea:	0092      	lsls	r2, r2, #2
 80016ec:	58d3      	ldr	r3, [r2, r3]
 80016ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	2207      	movs	r2, #7
 80016f4:	4013      	ands	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	220f      	movs	r2, #15
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2107      	movs	r1, #7
 800170e:	400b      	ands	r3, r1
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	409a      	lsls	r2, r3
 8001714:	0013      	movs	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	08da      	lsrs	r2, r3, #3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3208      	adds	r2, #8
 8001724:	0092      	lsls	r2, r2, #2
 8001726:	6939      	ldr	r1, [r7, #16]
 8001728:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	2203      	movs	r2, #3
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	43da      	mvns	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2203      	movs	r2, #3
 8001748:	401a      	ands	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	23c0      	movs	r3, #192	; 0xc0
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d100      	bne.n	800176c <HAL_GPIO_Init+0x17c>
 800176a:	e0a0      	b.n	80018ae <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176c:	4b57      	ldr	r3, [pc, #348]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 800176e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001770:	4b56      	ldr	r3, [pc, #344]	; (80018cc <HAL_GPIO_Init+0x2dc>)
 8001772:	2101      	movs	r1, #1
 8001774:	430a      	orrs	r2, r1
 8001776:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001778:	4a55      	ldr	r2, [pc, #340]	; (80018d0 <HAL_GPIO_Init+0x2e0>)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	089b      	lsrs	r3, r3, #2
 800177e:	3302      	adds	r3, #2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	589b      	ldr	r3, [r3, r2]
 8001784:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2203      	movs	r2, #3
 800178a:	4013      	ands	r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	409a      	lsls	r2, r3
 8001792:	0013      	movs	r3, r2
 8001794:	43da      	mvns	r2, r3
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	23a0      	movs	r3, #160	; 0xa0
 80017a0:	05db      	lsls	r3, r3, #23
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d01f      	beq.n	80017e6 <HAL_GPIO_Init+0x1f6>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4a      	ldr	r2, [pc, #296]	; (80018d4 <HAL_GPIO_Init+0x2e4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d019      	beq.n	80017e2 <HAL_GPIO_Init+0x1f2>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a49      	ldr	r2, [pc, #292]	; (80018d8 <HAL_GPIO_Init+0x2e8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d013      	beq.n	80017de <HAL_GPIO_Init+0x1ee>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a48      	ldr	r2, [pc, #288]	; (80018dc <HAL_GPIO_Init+0x2ec>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00d      	beq.n	80017da <HAL_GPIO_Init+0x1ea>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a47      	ldr	r2, [pc, #284]	; (80018e0 <HAL_GPIO_Init+0x2f0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d007      	beq.n	80017d6 <HAL_GPIO_Init+0x1e6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <HAL_GPIO_Init+0x2f4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_GPIO_Init+0x1e2>
 80017ce:	2305      	movs	r3, #5
 80017d0:	e00a      	b.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017d2:	2306      	movs	r3, #6
 80017d4:	e008      	b.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017d6:	2304      	movs	r3, #4
 80017d8:	e006      	b.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017da:	2303      	movs	r3, #3
 80017dc:	e004      	b.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017de:	2302      	movs	r3, #2
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_GPIO_Init+0x1f8>
 80017e6:	2300      	movs	r3, #0
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	2103      	movs	r1, #3
 80017ec:	400a      	ands	r2, r1
 80017ee:	0092      	lsls	r2, r2, #2
 80017f0:	4093      	lsls	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017f8:	4935      	ldr	r1, [pc, #212]	; (80018d0 <HAL_GPIO_Init+0x2e0>)
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	089b      	lsrs	r3, r3, #2
 80017fe:	3302      	adds	r3, #2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001806:	4b38      	ldr	r3, [pc, #224]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43da      	mvns	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4013      	ands	r3, r2
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001830:	4b2d      	ldr	r3, [pc, #180]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	43da      	mvns	r2, r3
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	029b      	lsls	r3, r3, #10
 8001848:	4013      	ands	r3, r2
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4313      	orrs	r3, r2
 8001852:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	43da      	mvns	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4013      	ands	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	035b      	lsls	r3, r3, #13
 8001872:	4013      	ands	r3, r2
 8001874:	d003      	beq.n	800187e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	4313      	orrs	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	43da      	mvns	r2, r3
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	2380      	movs	r3, #128	; 0x80
 800189a:	039b      	lsls	r3, r3, #14
 800189c:	4013      	ands	r3, r2
 800189e:	d003      	beq.n	80018a8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <HAL_GPIO_Init+0x2f8>)
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	40da      	lsrs	r2, r3
 80018bc:	1e13      	subs	r3, r2, #0
 80018be:	d000      	beq.n	80018c2 <HAL_GPIO_Init+0x2d2>
 80018c0:	e6a2      	b.n	8001608 <HAL_GPIO_Init+0x18>
  }
}
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	46c0      	nop			; (mov r8, r8)
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b006      	add	sp, #24
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40010000 	.word	0x40010000
 80018d4:	50000400 	.word	0x50000400
 80018d8:	50000800 	.word	0x50000800
 80018dc:	50000c00 	.word	0x50000c00
 80018e0:	50001000 	.word	0x50001000
 80018e4:	50001c00 	.word	0x50001c00
 80018e8:	40010400 	.word	0x40010400

080018ec <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	0008      	movs	r0, r1
 80018f6:	0011      	movs	r1, r2
 80018f8:	1cbb      	adds	r3, r7, #2
 80018fa:	1c02      	adds	r2, r0, #0
 80018fc:	801a      	strh	r2, [r3, #0]
 80018fe:	1c7b      	adds	r3, r7, #1
 8001900:	1c0a      	adds	r2, r1, #0
 8001902:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001904:	1c7b      	adds	r3, r7, #1
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d004      	beq.n	8001916 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190c:	1cbb      	adds	r3, r7, #2
 800190e:	881a      	ldrh	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001916:	1cbb      	adds	r3, r7, #2
 8001918:	881a      	ldrh	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	b08b      	sub	sp, #44	; 0x2c
 800192c:	af06      	add	r7, sp, #24
 800192e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0ff      	b.n	8001b3a <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a81      	ldr	r2, [pc, #516]	; (8001b44 <HAL_PCD_Init+0x21c>)
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d108      	bne.n	8001958 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	23aa      	movs	r3, #170	; 0xaa
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	2100      	movs	r1, #0
 800194e:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	0018      	movs	r0, r3
 8001954:	f006 faa0 	bl	8007e98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a7a      	ldr	r2, [pc, #488]	; (8001b44 <HAL_PCD_Init+0x21c>)
 800195c:	2103      	movs	r1, #3
 800195e:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	0018      	movs	r0, r3
 8001966:	f002 fd85 	bl	8004474 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196a:	230f      	movs	r3, #15
 800196c:	18fb      	adds	r3, r7, r3
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
 8001972:	e058      	b.n	8001a26 <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001974:	200f      	movs	r0, #15
 8001976:	183b      	adds	r3, r7, r0
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	0013      	movs	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	189b      	adds	r3, r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	18cb      	adds	r3, r1, r3
 8001988:	3301      	adds	r3, #1
 800198a:	2201      	movs	r2, #1
 800198c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800198e:	183b      	adds	r3, r7, r0
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	0013      	movs	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	189b      	adds	r3, r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	183a      	adds	r2, r7, r0
 80019a0:	7812      	ldrb	r2, [r2, #0]
 80019a2:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019a4:	0004      	movs	r4, r0
 80019a6:	183b      	adds	r3, r7, r0
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	193b      	adds	r3, r7, r4
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	b298      	uxth	r0, r3
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	0013      	movs	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	189b      	adds	r3, r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	18cb      	adds	r3, r1, r3
 80019bc:	3336      	adds	r3, #54	; 0x36
 80019be:	1c02      	adds	r2, r0, #0
 80019c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019c2:	193b      	adds	r3, r7, r4
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	1c5a      	adds	r2, r3, #1
 80019ca:	0013      	movs	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	189b      	adds	r3, r3, r2
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	18cb      	adds	r3, r1, r3
 80019d4:	3303      	adds	r3, #3
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019da:	193b      	adds	r3, r7, r4
 80019dc:	781a      	ldrb	r2, [r3, #0]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	0013      	movs	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	189b      	adds	r3, r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	18cb      	adds	r3, r1, r3
 80019ea:	3338      	adds	r3, #56	; 0x38
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019f0:	193b      	adds	r3, r7, r4
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	0013      	movs	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	189b      	adds	r3, r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	18cb      	adds	r3, r1, r3
 8001a00:	333c      	adds	r3, #60	; 0x3c
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a06:	193b      	adds	r3, r7, r4
 8001a08:	781a      	ldrb	r2, [r3, #0]
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	0013      	movs	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	189b      	adds	r3, r3, r2
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	18cb      	adds	r3, r1, r3
 8001a16:	3340      	adds	r3, #64	; 0x40
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	781a      	ldrb	r2, [r3, #0]
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	3201      	adds	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	210f      	movs	r1, #15
 8001a28:	187b      	adds	r3, r7, r1
 8001a2a:	781a      	ldrb	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d39f      	bcc.n	8001974 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a34:	187b      	adds	r3, r7, r1
 8001a36:	2200      	movs	r2, #0
 8001a38:	701a      	strb	r2, [r3, #0]
 8001a3a:	e056      	b.n	8001aea <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a3c:	240f      	movs	r4, #15
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	781a      	ldrb	r2, [r3, #0]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	236a      	movs	r3, #106	; 0x6a
 8001a46:	33ff      	adds	r3, #255	; 0xff
 8001a48:	0019      	movs	r1, r3
 8001a4a:	0013      	movs	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	18c3      	adds	r3, r0, r3
 8001a54:	185b      	adds	r3, r3, r1
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	781a      	ldrb	r2, [r3, #0]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	23b4      	movs	r3, #180	; 0xb4
 8001a62:	0059      	lsls	r1, r3, #1
 8001a64:	0013      	movs	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	189b      	adds	r3, r3, r2
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	18c3      	adds	r3, r0, r3
 8001a6e:	185b      	adds	r3, r3, r1
 8001a70:	193a      	adds	r2, r7, r4
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a76:	193b      	adds	r3, r7, r4
 8001a78:	781a      	ldrb	r2, [r3, #0]
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	236c      	movs	r3, #108	; 0x6c
 8001a7e:	33ff      	adds	r3, #255	; 0xff
 8001a80:	0019      	movs	r1, r3
 8001a82:	0013      	movs	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	189b      	adds	r3, r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	18c3      	adds	r3, r0, r3
 8001a8c:	185b      	adds	r3, r3, r1
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a92:	193b      	adds	r3, r7, r4
 8001a94:	781a      	ldrb	r2, [r3, #0]
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	23bc      	movs	r3, #188	; 0xbc
 8001a9a:	0059      	lsls	r1, r3, #1
 8001a9c:	0013      	movs	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	189b      	adds	r3, r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	18c3      	adds	r3, r0, r3
 8001aa6:	185b      	adds	r3, r3, r1
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001aac:	193b      	adds	r3, r7, r4
 8001aae:	781a      	ldrb	r2, [r3, #0]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	23be      	movs	r3, #190	; 0xbe
 8001ab4:	0059      	lsls	r1, r3, #1
 8001ab6:	0013      	movs	r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	189b      	adds	r3, r3, r2
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	18c3      	adds	r3, r0, r3
 8001ac0:	185b      	adds	r3, r3, r1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	781a      	ldrb	r2, [r3, #0]
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	23c0      	movs	r3, #192	; 0xc0
 8001ace:	0059      	lsls	r1, r3, #1
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	189b      	adds	r3, r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	18c3      	adds	r3, r0, r3
 8001ada:	185b      	adds	r3, r3, r1
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae0:	193b      	adds	r3, r7, r4
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	3201      	adds	r2, #1
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	230f      	movs	r3, #15
 8001aec:	18fb      	adds	r3, r7, r3
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3a1      	bcc.n	8001a3c <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	466a      	mov	r2, sp
 8001b00:	0011      	movs	r1, r2
 8001b02:	001a      	movs	r2, r3
 8001b04:	3210      	adds	r2, #16
 8001b06:	ca70      	ldmia	r2!, {r4, r5, r6}
 8001b08:	c170      	stmia	r1!, {r4, r5, r6}
 8001b0a:	ca30      	ldmia	r2!, {r4, r5}
 8001b0c:	c130      	stmia	r1!, {r4, r5}
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f002 fcc8 	bl	80044a8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_PCD_Init+0x21c>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d103      	bne.n	8001b38 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f001 fd1c 	bl	8003570 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b005      	add	sp, #20
 8001b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	000002a9 	.word	0x000002a9

08001b48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	23aa      	movs	r3, #170	; 0xaa
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	5cd3      	ldrb	r3, [r2, r3]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_PCD_Start+0x18>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e014      	b.n	8001b8a <HAL_PCD_Start+0x42>
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	23aa      	movs	r3, #170	; 0xaa
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	2101      	movs	r1, #1
 8001b68:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f002 fc6a 	bl	8004448 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0018      	movs	r0, r3
 8001b7a:	f004 fbc5 	bl	8006308 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	23aa      	movs	r3, #170	; 0xaa
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	2100      	movs	r1, #0
 8001b86:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f004 fbc7 	bl	8006334 <USB_ReadInterrupts>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	021b      	lsls	r3, r3, #8
 8001bac:	401a      	ands	r2, r3
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	021b      	lsls	r3, r3, #8
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d103      	bne.n	8001bbe <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f000 fba3 	bl	8002304 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f004 fbb6 	bl	8006334 <USB_ReadInterrupts>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	401a      	ands	r2, r3
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d114      	bne.n	8001c02 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2244      	movs	r2, #68	; 0x44
 8001bde:	5a9b      	ldrh	r3, [r3, r2]
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	49a2      	ldr	r1, [pc, #648]	; (8001e70 <HAL_PCD_IRQHandler+0x2dc>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	b291      	uxth	r1, r2
 8001bec:	2244      	movs	r2, #68	; 0x44
 8001bee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f006 f9d3 	bl	8007f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f000 f945 	bl	8001e8c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f004 fb94 	bl	8006334 <USB_ReadInterrupts>
 8001c0c:	0002      	movs	r2, r0
 8001c0e:	2380      	movs	r3, #128	; 0x80
 8001c10:	01db      	lsls	r3, r3, #7
 8001c12:	401a      	ands	r2, r3
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	01db      	lsls	r3, r3, #7
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10b      	bne.n	8001c34 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2244      	movs	r2, #68	; 0x44
 8001c22:	5a9b      	ldrh	r3, [r3, r2]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4992      	ldr	r1, [pc, #584]	; (8001e74 <HAL_PCD_IRQHandler+0x2e0>)
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	b291      	uxth	r1, r2
 8001c30:	2244      	movs	r2, #68	; 0x44
 8001c32:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f004 fb7b 	bl	8006334 <USB_ReadInterrupts>
 8001c3e:	0002      	movs	r2, r0
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	019b      	lsls	r3, r3, #6
 8001c44:	401a      	ands	r2, r3
 8001c46:	2380      	movs	r3, #128	; 0x80
 8001c48:	019b      	lsls	r3, r3, #6
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d10b      	bne.n	8001c66 <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2244      	movs	r2, #68	; 0x44
 8001c54:	5a9b      	ldrh	r3, [r3, r2]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4986      	ldr	r1, [pc, #536]	; (8001e78 <HAL_PCD_IRQHandler+0x2e4>)
 8001c5e:	400a      	ands	r2, r1
 8001c60:	b291      	uxth	r1, r2
 8001c62:	2244      	movs	r2, #68	; 0x44
 8001c64:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f004 fb62 	bl	8006334 <USB_ReadInterrupts>
 8001c70:	0002      	movs	r2, r0
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	015b      	lsls	r3, r3, #5
 8001c76:	401a      	ands	r2, r3
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d137      	bne.n	8001cf0 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	5a9b      	ldrh	r3, [r3, r2]
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2104      	movs	r1, #4
 8001c90:	438a      	bics	r2, r1
 8001c92:	b291      	uxth	r1, r2
 8001c94:	2240      	movs	r2, #64	; 0x40
 8001c96:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2240      	movs	r2, #64	; 0x40
 8001c9e:	5a9b      	ldrh	r3, [r3, r2]
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2108      	movs	r1, #8
 8001ca8:	438a      	bics	r2, r1
 8001caa:	b291      	uxth	r1, r2
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	23b8      	movs	r3, #184	; 0xb8
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	5cd3      	ldrb	r3, [r2, r3]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d109      	bne.n	8001cd0 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	23b8      	movs	r3, #184	; 0xb8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2100      	movs	r1, #0
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f001 fc7a 	bl	80035c4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	0018      	movs	r0, r3
 8001cd4:	f006 f9a4 	bl	8008020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2244      	movs	r2, #68	; 0x44
 8001cde:	5a9b      	ldrh	r3, [r3, r2]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4965      	ldr	r1, [pc, #404]	; (8001e7c <HAL_PCD_IRQHandler+0x2e8>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	b291      	uxth	r1, r2
 8001cec:	2244      	movs	r2, #68	; 0x44
 8001cee:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f004 fb1d 	bl	8006334 <USB_ReadInterrupts>
 8001cfa:	0002      	movs	r2, r0
 8001cfc:	2380      	movs	r3, #128	; 0x80
 8001cfe:	011b      	lsls	r3, r3, #4
 8001d00:	401a      	ands	r2, r3
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d127      	bne.n	8001d5a <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2240      	movs	r2, #64	; 0x40
 8001d10:	5a9b      	ldrh	r3, [r3, r2]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2108      	movs	r1, #8
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	b291      	uxth	r1, r2
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2244      	movs	r2, #68	; 0x44
 8001d28:	5a9b      	ldrh	r3, [r3, r2]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4953      	ldr	r1, [pc, #332]	; (8001e80 <HAL_PCD_IRQHandler+0x2ec>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	b291      	uxth	r1, r2
 8001d36:	2244      	movs	r2, #68	; 0x44
 8001d38:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	5a9b      	ldrh	r3, [r3, r2]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2104      	movs	r1, #4
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	b291      	uxth	r1, r2
 8001d4e:	2240      	movs	r2, #64	; 0x40
 8001d50:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f006 f947 	bl	8007fe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f004 fae8 	bl	8006334 <USB_ReadInterrupts>
 8001d64:	0003      	movs	r3, r0
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b80      	cmp	r3, #128	; 0x80
 8001d6c:	d145      	bne.n	8001dfa <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2244      	movs	r2, #68	; 0x44
 8001d74:	5a9b      	ldrh	r3, [r3, r2]
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2180      	movs	r1, #128	; 0x80
 8001d7e:	438a      	bics	r2, r1
 8001d80:	b291      	uxth	r1, r2
 8001d82:	2244      	movs	r2, #68	; 0x44
 8001d84:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	23b8      	movs	r3, #184	; 0xb8
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	5cd3      	ldrb	r3, [r2, r3]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12f      	bne.n	8001df2 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2240      	movs	r2, #64	; 0x40
 8001d98:	5a9b      	ldrh	r3, [r3, r2]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2104      	movs	r1, #4
 8001da2:	430a      	orrs	r2, r1
 8001da4:	b291      	uxth	r1, r2
 8001da6:	2240      	movs	r2, #64	; 0x40
 8001da8:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2240      	movs	r2, #64	; 0x40
 8001db0:	5a9b      	ldrh	r3, [r3, r2]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2108      	movs	r1, #8
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	b291      	uxth	r1, r2
 8001dbe:	2240      	movs	r2, #64	; 0x40
 8001dc0:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	23b8      	movs	r3, #184	; 0xb8
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	2101      	movs	r1, #1
 8001dca:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2254      	movs	r2, #84	; 0x54
 8001dd2:	5a9b      	ldrh	r3, [r3, r2]
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	089b      	lsrs	r3, r3, #2
 8001dd8:	223c      	movs	r2, #60	; 0x3c
 8001dda:	4013      	ands	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	23b9      	movs	r3, #185	; 0xb9
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2101      	movs	r1, #1
 8001dea:	0018      	movs	r0, r3
 8001dec:	f001 fbea 	bl	80035c4 <HAL_PCDEx_LPM_Callback>
 8001df0:	e003      	b.n	8001dfa <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f006 f8f7 	bl	8007fe8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f004 fa98 	bl	8006334 <USB_ReadInterrupts>
 8001e04:	0002      	movs	r2, r0
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d10f      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2244      	movs	r2, #68	; 0x44
 8001e1a:	5a9b      	ldrh	r3, [r3, r2]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4918      	ldr	r1, [pc, #96]	; (8001e84 <HAL_PCD_IRQHandler+0x2f0>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	b291      	uxth	r1, r2
 8001e28:	2244      	movs	r2, #68	; 0x44
 8001e2a:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f006 f8a6 	bl	8007f80 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f004 fa7b 	bl	8006334 <USB_ReadInterrupts>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	401a      	ands	r2, r3
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d10b      	bne.n	8001e66 <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2244      	movs	r2, #68	; 0x44
 8001e54:	5a9b      	ldrh	r3, [r3, r2]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	490a      	ldr	r1, [pc, #40]	; (8001e88 <HAL_PCD_IRQHandler+0x2f4>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	b291      	uxth	r1, r2
 8001e62:	2244      	movs	r2, #68	; 0x44
 8001e64:	5299      	strh	r1, [r3, r2]
  }
}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	fffffbff 	.word	0xfffffbff
 8001e74:	ffffbfff 	.word	0xffffbfff
 8001e78:	ffffdfff 	.word	0xffffdfff
 8001e7c:	ffffefff 	.word	0xffffefff
 8001e80:	fffff7ff 	.word	0xfffff7ff
 8001e84:	fffffdff 	.word	0xfffffdff
 8001e88:	fffffeff 	.word	0xfffffeff

08001e8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	000a      	movs	r2, r1
 8001e96:	1cfb      	adds	r3, r7, #3
 8001e98:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	23aa      	movs	r3, #170	; 0xaa
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	5cd3      	ldrb	r3, [r2, r3]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_PCD_SetAddress+0x1e>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e017      	b.n	8001eda <HAL_PCD_SetAddress+0x4e>
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	23aa      	movs	r3, #170	; 0xaa
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	1cfa      	adds	r2, r7, #3
 8001eb8:	2124      	movs	r1, #36	; 0x24
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	1cfb      	adds	r3, r7, #3
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	0010      	movs	r0, r2
 8001eca:	f004 fa09 	bl	80062e0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	23aa      	movs	r3, #170	; 0xaa
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b002      	add	sp, #8
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ee2:	b590      	push	{r4, r7, lr}
 8001ee4:	b085      	sub	sp, #20
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	000c      	movs	r4, r1
 8001eec:	0010      	movs	r0, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	1cfb      	adds	r3, r7, #3
 8001ef2:	1c22      	adds	r2, r4, #0
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	003b      	movs	r3, r7
 8001ef8:	1c02      	adds	r2, r0, #0
 8001efa:	801a      	strh	r2, [r3, #0]
 8001efc:	1cbb      	adds	r3, r7, #2
 8001efe:	1c0a      	adds	r2, r1, #0
 8001f00:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f02:	230b      	movs	r3, #11
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	2200      	movs	r2, #0
 8001f08:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f0a:	1cfb      	adds	r3, r7, #3
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	b25b      	sxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da0f      	bge.n	8001f34 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f14:	1cfb      	adds	r3, r7, #3
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	2207      	movs	r2, #7
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	0013      	movs	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	189b      	adds	r3, r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	18d3      	adds	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	705a      	strb	r2, [r3, #1]
 8001f32:	e00f      	b.n	8001f54 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	1cfb      	adds	r3, r7, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2207      	movs	r2, #7
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	0013      	movs	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	189b      	adds	r3, r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	3369      	adds	r3, #105	; 0x69
 8001f46:	33ff      	adds	r3, #255	; 0xff
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	18d3      	adds	r3, r2, r3
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f54:	1cfb      	adds	r3, r7, #3
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f62:	003b      	movs	r3, r7
 8001f64:	881a      	ldrh	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	1cba      	adds	r2, r7, #2
 8001f6e:	7812      	ldrb	r2, [r2, #0]
 8001f70:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	785b      	ldrb	r3, [r3, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f84:	1cbb      	adds	r3, r7, #2
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	23aa      	movs	r3, #170	; 0xaa
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	5cd3      	ldrb	r3, [r2, r3]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_PCD_EP_Open+0xc0>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e013      	b.n	8001fca <HAL_PCD_EP_Open+0xe8>
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	23aa      	movs	r3, #170	; 0xaa
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	2101      	movs	r1, #1
 8001faa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68fa      	ldr	r2, [r7, #12]
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f002 faa3 	bl	8004500 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	23aa      	movs	r3, #170	; 0xaa
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
}
 8001fca:	0018      	movs	r0, r3
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	b005      	add	sp, #20
 8001fd0:	bd90      	pop	{r4, r7, pc}

08001fd2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	000a      	movs	r2, r1
 8001fdc:	1cfb      	adds	r3, r7, #3
 8001fde:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe0:	1cfb      	adds	r3, r7, #3
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	da0f      	bge.n	800200a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fea:	1cfb      	adds	r3, r7, #3
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2207      	movs	r2, #7
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	0013      	movs	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	189b      	adds	r3, r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	18d3      	adds	r3, r2, r3
 8002000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	705a      	strb	r2, [r3, #1]
 8002008:	e00f      	b.n	800202a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	1cfb      	adds	r3, r7, #3
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2207      	movs	r2, #7
 8002010:	401a      	ands	r2, r3
 8002012:	0013      	movs	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	189b      	adds	r3, r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	3369      	adds	r3, #105	; 0x69
 800201c:	33ff      	adds	r3, #255	; 0xff
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	18d3      	adds	r3, r2, r3
 8002022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2200      	movs	r2, #0
 8002028:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800202a:	1cfb      	adds	r3, r7, #3
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2207      	movs	r2, #7
 8002030:	4013      	ands	r3, r2
 8002032:	b2da      	uxtb	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	23aa      	movs	r3, #170	; 0xaa
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	5cd3      	ldrb	r3, [r2, r3]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d101      	bne.n	8002048 <HAL_PCD_EP_Close+0x76>
 8002044:	2302      	movs	r3, #2
 8002046:	e011      	b.n	800206c <HAL_PCD_EP_Close+0x9a>
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	23aa      	movs	r3, #170	; 0xaa
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	2101      	movs	r1, #1
 8002050:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	0011      	movs	r1, r2
 800205a:	0018      	movs	r0, r3
 800205c:	f002 fdc4 	bl	8004be8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	23aa      	movs	r3, #170	; 0xaa
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	2100      	movs	r1, #0
 8002068:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	0018      	movs	r0, r3
 800206e:	46bd      	mov	sp, r7
 8002070:	b004      	add	sp, #16
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	200b      	movs	r0, #11
 8002082:	183b      	adds	r3, r7, r0
 8002084:	1c0a      	adds	r2, r1, #0
 8002086:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002088:	0001      	movs	r1, r0
 800208a:	187b      	adds	r3, r7, r1
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2207      	movs	r2, #7
 8002090:	401a      	ands	r2, r3
 8002092:	0013      	movs	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	189b      	adds	r3, r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	3369      	adds	r3, #105	; 0x69
 800209c:	33ff      	adds	r3, #255	; 0xff
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	18d3      	adds	r3, r2, r3
 80020a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	2200      	movs	r2, #0
 80020ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020bc:	187b      	adds	r3, r7, r1
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2207      	movs	r2, #7
 80020c2:	4013      	ands	r3, r2
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	d107      	bne.n	80020e4 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	0011      	movs	r1, r2
 80020dc:	0018      	movs	r0, r3
 80020de:	f002 ff43 	bl	8004f68 <USB_EPStartXfer>
 80020e2:	e006      	b.n	80020f2 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	0011      	movs	r1, r2
 80020ec:	0018      	movs	r0, r3
 80020ee:	f002 ff3b 	bl	8004f68 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b006      	add	sp, #24
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	200b      	movs	r0, #11
 800210a:	183b      	adds	r3, r7, r0
 800210c:	1c0a      	adds	r2, r1, #0
 800210e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002110:	183b      	adds	r3, r7, r0
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2207      	movs	r2, #7
 8002116:	4013      	ands	r3, r2
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	0013      	movs	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	189b      	adds	r3, r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	18d3      	adds	r3, r2, r3
 8002126:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2224      	movs	r2, #36	; 0x24
 8002138:	2101      	movs	r1, #1
 800213a:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2200      	movs	r2, #0
 8002146:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	2201      	movs	r2, #1
 800214c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800214e:	183b      	adds	r3, r7, r0
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2207      	movs	r2, #7
 8002154:	4013      	ands	r3, r2
 8002156:	b2da      	uxtb	r2, r3
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800215c:	183b      	adds	r3, r7, r0
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2207      	movs	r2, #7
 8002162:	4013      	ands	r3, r2
 8002164:	d107      	bne.n	8002176 <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	0011      	movs	r1, r2
 800216e:	0018      	movs	r0, r3
 8002170:	f002 fefa 	bl	8004f68 <USB_EPStartXfer>
 8002174:	e006      	b.n	8002184 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	0011      	movs	r1, r2
 800217e:	0018      	movs	r0, r3
 8002180:	f002 fef2 	bl	8004f68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b006      	add	sp, #24
 800218c:	bd80      	pop	{r7, pc}

0800218e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b084      	sub	sp, #16
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	000a      	movs	r2, r1
 8002198:	1cfb      	adds	r3, r7, #3
 800219a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800219c:	1cfb      	adds	r3, r7, #3
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2207      	movs	r2, #7
 80021a2:	401a      	ands	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d901      	bls.n	80021b0 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e046      	b.n	800223e <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b0:	1cfb      	adds	r3, r7, #3
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da0f      	bge.n	80021da <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021ba:	1cfb      	adds	r3, r7, #3
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2207      	movs	r2, #7
 80021c0:	4013      	ands	r3, r2
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	0013      	movs	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	189b      	adds	r3, r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	18d3      	adds	r3, r2, r3
 80021d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	705a      	strb	r2, [r3, #1]
 80021d8:	e00d      	b.n	80021f6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021da:	1cfb      	adds	r3, r7, #3
 80021dc:	781a      	ldrb	r2, [r3, #0]
 80021de:	0013      	movs	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	189b      	adds	r3, r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	3369      	adds	r3, #105	; 0x69
 80021e8:	33ff      	adds	r3, #255	; 0xff
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	18d3      	adds	r3, r2, r3
 80021ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2201      	movs	r2, #1
 80021fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fc:	1cfb      	adds	r3, r7, #3
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2207      	movs	r2, #7
 8002202:	4013      	ands	r3, r2
 8002204:	b2da      	uxtb	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	23aa      	movs	r3, #170	; 0xaa
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	5cd3      	ldrb	r3, [r2, r3]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_EP_SetStall+0x8c>
 8002216:	2302      	movs	r3, #2
 8002218:	e011      	b.n	800223e <HAL_PCD_EP_SetStall+0xb0>
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	23aa      	movs	r3, #170	; 0xaa
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	2101      	movs	r1, #1
 8002222:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f003 ff55 	bl	80060dc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	23aa      	movs	r3, #170	; 0xaa
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	2100      	movs	r1, #0
 800223a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}

08002246 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b084      	sub	sp, #16
 800224a:	af00      	add	r7, sp, #0
 800224c:	6078      	str	r0, [r7, #4]
 800224e:	000a      	movs	r2, r1
 8002250:	1cfb      	adds	r3, r7, #3
 8002252:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002254:	1cfb      	adds	r3, r7, #3
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	220f      	movs	r2, #15
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	429a      	cmp	r2, r3
 8002262:	d901      	bls.n	8002268 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e048      	b.n	80022fa <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002268:	1cfb      	adds	r3, r7, #3
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	b25b      	sxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	da0f      	bge.n	8002292 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002272:	1cfb      	adds	r3, r7, #3
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2207      	movs	r2, #7
 8002278:	4013      	ands	r3, r2
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	0013      	movs	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	189b      	adds	r3, r3, r2
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	18d3      	adds	r3, r2, r3
 8002288:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	705a      	strb	r2, [r3, #1]
 8002290:	e00f      	b.n	80022b2 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002292:	1cfb      	adds	r3, r7, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2207      	movs	r2, #7
 8002298:	401a      	ands	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	189b      	adds	r3, r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	3369      	adds	r3, #105	; 0x69
 80022a4:	33ff      	adds	r3, #255	; 0xff
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	18d3      	adds	r3, r2, r3
 80022aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2200      	movs	r2, #0
 80022b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022b8:	1cfb      	adds	r3, r7, #3
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2207      	movs	r2, #7
 80022be:	4013      	ands	r3, r2
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	23aa      	movs	r3, #170	; 0xaa
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_PCD_EP_ClrStall+0x90>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e011      	b.n	80022fa <HAL_PCD_EP_ClrStall+0xb4>
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	23aa      	movs	r3, #170	; 0xaa
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	2101      	movs	r1, #1
 80022de:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	0011      	movs	r1, r2
 80022e8:	0018      	movs	r0, r3
 80022ea:	f003 ff47 	bl	800617c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	23aa      	movs	r3, #170	; 0xaa
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	2100      	movs	r1, #0
 80022f6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	0018      	movs	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	b004      	add	sp, #16
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002304:	b5b0      	push	{r4, r5, r7, lr}
 8002306:	b096      	sub	sp, #88	; 0x58
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800230c:	f000 fbd8 	bl	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2056      	movs	r0, #86	; 0x56
 8002316:	183b      	adds	r3, r7, r0
 8002318:	2144      	movs	r1, #68	; 0x44
 800231a:	5a52      	ldrh	r2, [r2, r1]
 800231c:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800231e:	183b      	adds	r3, r7, r0
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	2455      	movs	r4, #85	; 0x55
 8002326:	193b      	adds	r3, r7, r4
 8002328:	210f      	movs	r1, #15
 800232a:	400a      	ands	r2, r1
 800232c:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800232e:	193b      	adds	r3, r7, r4
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d000      	beq.n	8002338 <PCD_EP_ISR_Handler+0x34>
 8002336:	e179      	b.n	800262c <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002338:	183b      	adds	r3, r7, r0
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	2210      	movs	r2, #16
 800233e:	4013      	ands	r3, r2
 8002340:	d154      	bne.n	80023ec <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b29a      	uxth	r2, r3
 800234a:	200e      	movs	r0, #14
 800234c:	183b      	adds	r3, r7, r0
 800234e:	49af      	ldr	r1, [pc, #700]	; (800260c <PCD_EP_ISR_Handler+0x308>)
 8002350:	400a      	ands	r2, r1
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	183a      	adds	r2, r7, r0
 800235a:	8812      	ldrh	r2, [r2, #0]
 800235c:	49ac      	ldr	r1, [pc, #688]	; (8002610 <PCD_EP_ISR_Handler+0x30c>)
 800235e:	430a      	orrs	r2, r1
 8002360:	b292      	uxth	r2, r2
 8002362:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3328      	adds	r3, #40	; 0x28
 8002368:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2250      	movs	r2, #80	; 0x50
 8002370:	5a9b      	ldrh	r3, [r3, r2]
 8002372:	b29b      	uxth	r3, r3
 8002374:	001a      	movs	r2, r3
 8002376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	18d2      	adds	r2, r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	18d3      	adds	r3, r2, r3
 8002384:	4aa3      	ldr	r2, [pc, #652]	; (8002614 <PCD_EP_ISR_Handler+0x310>)
 8002386:	4694      	mov	ip, r2
 8002388:	4463      	add	r3, ip
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	059b      	lsls	r3, r3, #22
 800238e:	0d9a      	lsrs	r2, r3, #22
 8002390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002392:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	18d2      	adds	r2, r2, r3
 800239e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2100      	movs	r1, #0
 80023a6:	0018      	movs	r0, r3
 80023a8:	f005 fdcc 	bl	8007f44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2224      	movs	r2, #36	; 0x24
 80023b0:	5c9b      	ldrb	r3, [r3, r2]
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <PCD_EP_ISR_Handler+0xb8>
 80023b8:	f000 fb82 	bl	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
 80023bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <PCD_EP_ISR_Handler+0xc4>
 80023c4:	f000 fb7c 	bl	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	5c9b      	ldrb	r3, [r3, r2]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	4252      	negs	r2, r2
 80023d4:	4313      	orrs	r3, r2
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b291      	uxth	r1, r2
 80023de:	224c      	movs	r2, #76	; 0x4c
 80023e0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2224      	movs	r2, #36	; 0x24
 80023e6:	2100      	movs	r1, #0
 80023e8:	5499      	strb	r1, [r3, r2]
 80023ea:	e369      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3369      	adds	r3, #105	; 0x69
 80023f0:	33ff      	adds	r3, #255	; 0xff
 80023f2:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2152      	movs	r1, #82	; 0x52
 80023fa:	187b      	adds	r3, r7, r1
 80023fc:	8812      	ldrh	r2, [r2, #0]
 80023fe:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002400:	187b      	adds	r3, r7, r1
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4013      	ands	r3, r2
 800240a:	d037      	beq.n	800247c <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2250      	movs	r2, #80	; 0x50
 8002412:	5a9b      	ldrh	r3, [r3, r2]
 8002414:	b29b      	uxth	r3, r3
 8002416:	001a      	movs	r2, r3
 8002418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	18d2      	adds	r2, r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	18d3      	adds	r3, r2, r3
 8002426:	4a7c      	ldr	r2, [pc, #496]	; (8002618 <PCD_EP_ISR_Handler+0x314>)
 8002428:	4694      	mov	ip, r2
 800242a:	4463      	add	r3, ip
 800242c:	881b      	ldrh	r3, [r3, #0]
 800242e:	059b      	lsls	r3, r3, #22
 8002430:	0d9a      	lsrs	r2, r3, #22
 8002432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002434:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	22ac      	movs	r2, #172	; 0xac
 800243e:	0092      	lsls	r2, r2, #2
 8002440:	1899      	adds	r1, r3, r2
 8002442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002444:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002448:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800244a:	b29b      	uxth	r3, r3
 800244c:	f003 ffc4 	bl	80063d8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29a      	uxth	r2, r3
 8002458:	2010      	movs	r0, #16
 800245a:	183b      	adds	r3, r7, r0
 800245c:	496f      	ldr	r1, [pc, #444]	; (800261c <PCD_EP_ISR_Handler+0x318>)
 800245e:	400a      	ands	r2, r1
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	183a      	adds	r2, r7, r0
 8002468:	8812      	ldrh	r2, [r2, #0]
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	430a      	orrs	r2, r1
 800246e:	b292      	uxth	r2, r2
 8002470:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	0018      	movs	r0, r3
 8002476:	f005 fd2f 	bl	8007ed8 <HAL_PCD_SetupStageCallback>
 800247a:	e321      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800247c:	2352      	movs	r3, #82	; 0x52
 800247e:	18fb      	adds	r3, r7, r3
 8002480:	2200      	movs	r2, #0
 8002482:	5e9b      	ldrsh	r3, [r3, r2]
 8002484:	2b00      	cmp	r3, #0
 8002486:	db00      	blt.n	800248a <PCD_EP_ISR_Handler+0x186>
 8002488:	e31a      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	881b      	ldrh	r3, [r3, #0]
 8002490:	b29a      	uxth	r2, r3
 8002492:	201e      	movs	r0, #30
 8002494:	183b      	adds	r3, r7, r0
 8002496:	4961      	ldr	r1, [pc, #388]	; (800261c <PCD_EP_ISR_Handler+0x318>)
 8002498:	400a      	ands	r2, r1
 800249a:	801a      	strh	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	183a      	adds	r2, r7, r0
 80024a2:	8812      	ldrh	r2, [r2, #0]
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	430a      	orrs	r2, r1
 80024a8:	b292      	uxth	r2, r2
 80024aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2250      	movs	r2, #80	; 0x50
 80024b2:	5a9b      	ldrh	r3, [r3, r2]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	001a      	movs	r2, r3
 80024b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	18d2      	adds	r2, r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	18d3      	adds	r3, r2, r3
 80024c6:	4a54      	ldr	r2, [pc, #336]	; (8002618 <PCD_EP_ISR_Handler+0x314>)
 80024c8:	4694      	mov	ip, r2
 80024ca:	4463      	add	r3, ip
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	059b      	lsls	r3, r3, #22
 80024d0:	0d9a      	lsrs	r2, r3, #22
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01a      	beq.n	8002514 <PCD_EP_ISR_Handler+0x210>
 80024de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	6959      	ldr	r1, [r3, #20]
 80024ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f003 ff6e 	bl	80063d8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	18d2      	adds	r2, r2, r3
 8002506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002508:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2100      	movs	r1, #0
 800250e:	0018      	movs	r0, r3
 8002510:	f005 fcf7 	bl	8007f02 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b29b      	uxth	r3, r3
 800251c:	001a      	movs	r2, r3
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	4013      	ands	r3, r2
 8002524:	d000      	beq.n	8002528 <PCD_EP_ISR_Handler+0x224>
 8002526:	e2cb      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2250      	movs	r2, #80	; 0x50
 8002534:	5a9b      	ldrh	r3, [r3, r2]
 8002536:	b29b      	uxth	r3, r3
 8002538:	001a      	movs	r2, r3
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	189b      	adds	r3, r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	4a35      	ldr	r2, [pc, #212]	; (8002618 <PCD_EP_ISR_Handler+0x314>)
 8002544:	4694      	mov	ip, r2
 8002546:	4463      	add	r3, ip
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d110      	bne.n	8002574 <PCD_EP_ISR_Handler+0x270>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4a31      	ldr	r2, [pc, #196]	; (8002620 <PCD_EP_ISR_Handler+0x31c>)
 800255a:	4013      	ands	r3, r2
 800255c:	b29a      	uxth	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	b29b      	uxth	r3, r3
 8002568:	4a29      	ldr	r2, [pc, #164]	; (8002610 <PCD_EP_ISR_Handler+0x30c>)
 800256a:	4313      	orrs	r3, r2
 800256c:	b29a      	uxth	r2, r3
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	e02b      	b.n	80025cc <PCD_EP_ISR_Handler+0x2c8>
 8002574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	2b3e      	cmp	r3, #62	; 0x3e
 800257a:	d812      	bhi.n	80025a2 <PCD_EP_ISR_Handler+0x29e>
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	085b      	lsrs	r3, r3, #1
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
 8002584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	d002      	beq.n	8002594 <PCD_EP_ISR_Handler+0x290>
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	3301      	adds	r3, #1
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
 8002594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002596:	b29b      	uxth	r3, r3
 8002598:	029b      	lsls	r3, r3, #10
 800259a:	b29a      	uxth	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	801a      	strh	r2, [r3, #0]
 80025a0:	e014      	b.n	80025cc <PCD_EP_ISR_Handler+0x2c8>
 80025a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	647b      	str	r3, [r7, #68]	; 0x44
 80025aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	221f      	movs	r2, #31
 80025b0:	4013      	ands	r3, r2
 80025b2:	d102      	bne.n	80025ba <PCD_EP_ISR_Handler+0x2b6>
 80025b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025b6:	3b01      	subs	r3, #1
 80025b8:	647b      	str	r3, [r7, #68]	; 0x44
 80025ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025bc:	b29b      	uxth	r3, r3
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4a13      	ldr	r2, [pc, #76]	; (8002610 <PCD_EP_ISR_Handler+0x30c>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	2012      	movs	r0, #18
 80025d6:	183b      	adds	r3, r7, r0
 80025d8:	4912      	ldr	r1, [pc, #72]	; (8002624 <PCD_EP_ISR_Handler+0x320>)
 80025da:	400a      	ands	r2, r1
 80025dc:	801a      	strh	r2, [r3, #0]
 80025de:	183b      	adds	r3, r7, r0
 80025e0:	183a      	adds	r2, r7, r0
 80025e2:	8812      	ldrh	r2, [r2, #0]
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	0149      	lsls	r1, r1, #5
 80025e8:	404a      	eors	r2, r1
 80025ea:	801a      	strh	r2, [r3, #0]
 80025ec:	183b      	adds	r3, r7, r0
 80025ee:	183a      	adds	r2, r7, r0
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	2180      	movs	r1, #128	; 0x80
 80025f4:	0189      	lsls	r1, r1, #6
 80025f6:	404a      	eors	r2, r1
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	183a      	adds	r2, r7, r0
 8002600:	8812      	ldrh	r2, [r2, #0]
 8002602:	4909      	ldr	r1, [pc, #36]	; (8002628 <PCD_EP_ISR_Handler+0x324>)
 8002604:	430a      	orrs	r2, r1
 8002606:	b292      	uxth	r2, r2
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e259      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
 800260c:	ffff8f0f 	.word	0xffff8f0f
 8002610:	ffff8000 	.word	0xffff8000
 8002614:	00000402 	.word	0x00000402
 8002618:	00000406 	.word	0x00000406
 800261c:	00000f8f 	.word	0x00000f8f
 8002620:	ffff83ff 	.word	0xffff83ff
 8002624:	ffffbf8f 	.word	0xffffbf8f
 8002628:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	001a      	movs	r2, r3
 8002632:	2055      	movs	r0, #85	; 0x55
 8002634:	183b      	adds	r3, r7, r0
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	18d2      	adds	r2, r2, r3
 800263c:	2152      	movs	r1, #82	; 0x52
 800263e:	187b      	adds	r3, r7, r1
 8002640:	8812      	ldrh	r2, [r2, #0]
 8002642:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002644:	187b      	adds	r3, r7, r1
 8002646:	2200      	movs	r2, #0
 8002648:	5e9b      	ldrsh	r3, [r3, r2]
 800264a:	2b00      	cmp	r3, #0
 800264c:	db00      	blt.n	8002650 <PCD_EP_ISR_Handler+0x34c>
 800264e:	e0fa      	b.n	8002846 <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	001a      	movs	r2, r3
 8002656:	183b      	adds	r3, r7, r0
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	18d3      	adds	r3, r2, r3
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	b29a      	uxth	r2, r3
 8002662:	2450      	movs	r4, #80	; 0x50
 8002664:	193b      	adds	r3, r7, r4
 8002666:	49cf      	ldr	r1, [pc, #828]	; (80029a4 <PCD_EP_ISR_Handler+0x6a0>)
 8002668:	400a      	ands	r2, r1
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	001a      	movs	r2, r3
 8002672:	183b      	adds	r3, r7, r0
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	18d3      	adds	r3, r2, r3
 800267a:	193a      	adds	r2, r7, r4
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	430a      	orrs	r2, r1
 8002682:	b292      	uxth	r2, r2
 8002684:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002686:	183b      	adds	r3, r7, r0
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	0013      	movs	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	189b      	adds	r3, r3, r2
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	3369      	adds	r3, #105	; 0x69
 8002694:	33ff      	adds	r3, #255	; 0xff
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	18d3      	adds	r3, r2, r3
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800269e:	7b1b      	ldrb	r3, [r3, #12]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d125      	bne.n	80026f0 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2250      	movs	r2, #80	; 0x50
 80026aa:	5a9b      	ldrh	r3, [r3, r2]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	001a      	movs	r2, r3
 80026b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	18d2      	adds	r2, r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	4aba      	ldr	r2, [pc, #744]	; (80029a8 <PCD_EP_ISR_Handler+0x6a4>)
 80026c0:	4694      	mov	ip, r2
 80026c2:	4463      	add	r3, ip
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	2448      	movs	r4, #72	; 0x48
 80026c8:	193b      	adds	r3, r7, r4
 80026ca:	0592      	lsls	r2, r2, #22
 80026cc:	0d92      	lsrs	r2, r2, #22
 80026ce:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80026d0:	193b      	adds	r3, r7, r4
 80026d2:	881b      	ldrh	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d100      	bne.n	80026da <PCD_EP_ISR_Handler+0x3d6>
 80026d8:	e08d      	b.n	80027f6 <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6818      	ldr	r0, [r3, #0]
 80026de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e0:	6959      	ldr	r1, [r3, #20]
 80026e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e4:	88da      	ldrh	r2, [r3, #6]
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	881b      	ldrh	r3, [r3, #0]
 80026ea:	f003 fe75 	bl	80063d8 <USB_ReadPMA>
 80026ee:	e082      	b.n	80027f6 <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f2:	78db      	ldrb	r3, [r3, #3]
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d10c      	bne.n	8002712 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026f8:	2348      	movs	r3, #72	; 0x48
 80026fa:	18fc      	adds	r4, r7, r3
 80026fc:	2352      	movs	r3, #82	; 0x52
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	881a      	ldrh	r2, [r3, #0]
 8002702:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	0018      	movs	r0, r3
 8002708:	f000 f9ee 	bl	8002ae8 <HAL_PCD_EP_DB_Receive>
 800270c:	0003      	movs	r3, r0
 800270e:	8023      	strh	r3, [r4, #0]
 8002710:	e071      	b.n	80027f6 <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	001a      	movs	r2, r3
 8002718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	18d3      	adds	r3, r2, r3
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	b29a      	uxth	r2, r3
 8002724:	204a      	movs	r0, #74	; 0x4a
 8002726:	183b      	adds	r3, r7, r0
 8002728:	49a0      	ldr	r1, [pc, #640]	; (80029ac <PCD_EP_ISR_Handler+0x6a8>)
 800272a:	400a      	ands	r2, r1
 800272c:	801a      	strh	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	001a      	movs	r2, r3
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	18d3      	adds	r3, r2, r3
 800273c:	183a      	adds	r2, r7, r0
 800273e:	8812      	ldrh	r2, [r2, #0]
 8002740:	499b      	ldr	r1, [pc, #620]	; (80029b0 <PCD_EP_ISR_Handler+0x6ac>)
 8002742:	430a      	orrs	r2, r1
 8002744:	b292      	uxth	r2, r2
 8002746:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	001a      	movs	r2, r3
 800274e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	18d3      	adds	r3, r2, r3
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	001a      	movs	r2, r3
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	01db      	lsls	r3, r3, #7
 8002760:	4013      	ands	r3, r2
 8002762:	d024      	beq.n	80027ae <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2250      	movs	r2, #80	; 0x50
 800276a:	5a9b      	ldrh	r3, [r3, r2]
 800276c:	b29b      	uxth	r3, r3
 800276e:	001a      	movs	r2, r3
 8002770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	18d2      	adds	r2, r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	18d3      	adds	r3, r2, r3
 800277e:	4a8d      	ldr	r2, [pc, #564]	; (80029b4 <PCD_EP_ISR_Handler+0x6b0>)
 8002780:	4694      	mov	ip, r2
 8002782:	4463      	add	r3, ip
 8002784:	881a      	ldrh	r2, [r3, #0]
 8002786:	2448      	movs	r4, #72	; 0x48
 8002788:	193b      	adds	r3, r7, r4
 800278a:	0592      	lsls	r2, r2, #22
 800278c:	0d92      	lsrs	r2, r2, #22
 800278e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8002790:	193b      	adds	r3, r7, r4
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d02e      	beq.n	80027f6 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6818      	ldr	r0, [r3, #0]
 800279c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800279e:	6959      	ldr	r1, [r3, #20]
 80027a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a2:	891a      	ldrh	r2, [r3, #8]
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	f003 fe16 	bl	80063d8 <USB_ReadPMA>
 80027ac:	e023      	b.n	80027f6 <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2250      	movs	r2, #80	; 0x50
 80027b4:	5a9b      	ldrh	r3, [r3, r2]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	001a      	movs	r2, r3
 80027ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	00db      	lsls	r3, r3, #3
 80027c0:	18d2      	adds	r2, r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	18d3      	adds	r3, r2, r3
 80027c8:	4a77      	ldr	r2, [pc, #476]	; (80029a8 <PCD_EP_ISR_Handler+0x6a4>)
 80027ca:	4694      	mov	ip, r2
 80027cc:	4463      	add	r3, ip
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	2448      	movs	r4, #72	; 0x48
 80027d2:	193b      	adds	r3, r7, r4
 80027d4:	0592      	lsls	r2, r2, #22
 80027d6:	0d92      	lsrs	r2, r2, #22
 80027d8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80027da:	193b      	adds	r3, r7, r4
 80027dc:	881b      	ldrh	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027e8:	6959      	ldr	r1, [r3, #20]
 80027ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ec:	895a      	ldrh	r2, [r3, #10]
 80027ee:	193b      	adds	r3, r7, r4
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	f003 fdf1 	bl	80063d8 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	2148      	movs	r1, #72	; 0x48
 80027fc:	187b      	adds	r3, r7, r1
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	18d2      	adds	r2, r2, r3
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	187b      	adds	r3, r7, r1
 800280c:	881b      	ldrh	r3, [r3, #0]
 800280e:	18d2      	adds	r2, r2, r3
 8002810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002812:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <PCD_EP_ISR_Handler+0x524>
 800281c:	187b      	adds	r3, r7, r1
 800281e:	881a      	ldrh	r2, [r3, #0]
 8002820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d207      	bcs.n	8002838 <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	781a      	ldrb	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	0011      	movs	r1, r2
 8002830:	0018      	movs	r0, r3
 8002832:	f005 fb66 	bl	8007f02 <HAL_PCD_DataOutStageCallback>
 8002836:	e006      	b.n	8002846 <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800283e:	0011      	movs	r1, r2
 8002840:	0018      	movs	r0, r3
 8002842:	f002 fb91 	bl	8004f68 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002846:	2452      	movs	r4, #82	; 0x52
 8002848:	193b      	adds	r3, r7, r4
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	2280      	movs	r2, #128	; 0x80
 800284e:	4013      	ands	r3, r2
 8002850:	d100      	bne.n	8002854 <PCD_EP_ISR_Handler+0x550>
 8002852:	e135      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8002854:	2055      	movs	r0, #85	; 0x55
 8002856:	183b      	adds	r3, r7, r0
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	0013      	movs	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	189b      	adds	r3, r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	18d3      	adds	r3, r2, r3
 8002868:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	001a      	movs	r2, r3
 8002870:	183b      	adds	r3, r7, r0
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	18d3      	adds	r3, r2, r3
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	b29a      	uxth	r2, r3
 800287c:	2542      	movs	r5, #66	; 0x42
 800287e:	197b      	adds	r3, r7, r5
 8002880:	494d      	ldr	r1, [pc, #308]	; (80029b8 <PCD_EP_ISR_Handler+0x6b4>)
 8002882:	400a      	ands	r2, r1
 8002884:	801a      	strh	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	001a      	movs	r2, r3
 800288c:	183b      	adds	r3, r7, r0
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	18d3      	adds	r3, r2, r3
 8002894:	197a      	adds	r2, r7, r5
 8002896:	8812      	ldrh	r2, [r2, #0]
 8002898:	4948      	ldr	r1, [pc, #288]	; (80029bc <PCD_EP_ISR_Handler+0x6b8>)
 800289a:	430a      	orrs	r2, r1
 800289c:	b292      	uxth	r2, r2
 800289e:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d100      	bne.n	80028aa <PCD_EP_ISR_Handler+0x5a6>
 80028a8:	e0ad      	b.n	8002a06 <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 80028aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028b0:	193b      	adds	r3, r7, r4
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	2240      	movs	r2, #64	; 0x40
 80028b6:	4013      	ands	r3, r2
 80028b8:	d046      	beq.n	8002948 <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028bc:	785b      	ldrb	r3, [r3, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d125      	bne.n	800290e <PCD_EP_ISR_Handler+0x60a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2250      	movs	r2, #80	; 0x50
 80028ce:	5a9b      	ldrh	r3, [r3, r2]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	001a      	movs	r2, r3
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	189b      	adds	r3, r3, r2
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
 80028da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	18d3      	adds	r3, r2, r3
 80028e4:	4a33      	ldr	r2, [pc, #204]	; (80029b4 <PCD_EP_ISR_Handler+0x6b0>)
 80028e6:	4694      	mov	ip, r2
 80028e8:	4463      	add	r3, ip
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4a33      	ldr	r2, [pc, #204]	; (80029c0 <PCD_EP_ISR_Handler+0x6bc>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	801a      	strh	r2, [r3, #0]
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	881b      	ldrh	r3, [r3, #0]
 8002900:	b29b      	uxth	r3, r3
 8002902:	4a2e      	ldr	r2, [pc, #184]	; (80029bc <PCD_EP_ISR_Handler+0x6b8>)
 8002904:	4313      	orrs	r3, r2
 8002906:	b29a      	uxth	r2, r3
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	801a      	strh	r2, [r3, #0]
 800290c:	e073      	b.n	80029f6 <PCD_EP_ISR_Handler+0x6f2>
 800290e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002910:	785b      	ldrb	r3, [r3, #1]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d16f      	bne.n	80029f6 <PCD_EP_ISR_Handler+0x6f2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2250      	movs	r2, #80	; 0x50
 8002922:	5a9b      	ldrh	r3, [r3, r2]
 8002924:	b29b      	uxth	r3, r3
 8002926:	001a      	movs	r2, r3
 8002928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292a:	189b      	adds	r3, r3, r2
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	00da      	lsls	r2, r3, #3
 8002934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002936:	18d3      	adds	r3, r2, r3
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <PCD_EP_ISR_Handler+0x6b0>)
 800293a:	4694      	mov	ip, r2
 800293c:	4463      	add	r3, ip
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002942:	2200      	movs	r2, #0
 8002944:	801a      	strh	r2, [r3, #0]
 8002946:	e056      	b.n	80029f6 <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d136      	bne.n	80029c4 <PCD_EP_ISR_Handler+0x6c0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	637b      	str	r3, [r7, #52]	; 0x34
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2250      	movs	r2, #80	; 0x50
 8002962:	5a9b      	ldrh	r3, [r3, r2]
 8002964:	b29b      	uxth	r3, r3
 8002966:	001a      	movs	r2, r3
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	189b      	adds	r3, r3, r2
 800296c:	637b      	str	r3, [r7, #52]	; 0x34
 800296e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	00da      	lsls	r2, r3, #3
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	18d3      	adds	r3, r2, r3
 8002978:	4a0b      	ldr	r2, [pc, #44]	; (80029a8 <PCD_EP_ISR_Handler+0x6a4>)
 800297a:	4694      	mov	ip, r2
 800297c:	4463      	add	r3, ip
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	b29b      	uxth	r3, r3
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <PCD_EP_ISR_Handler+0x6bc>)
 8002988:	4013      	ands	r3, r2
 800298a:	b29a      	uxth	r2, r3
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29b      	uxth	r3, r3
 8002996:	4a09      	ldr	r2, [pc, #36]	; (80029bc <PCD_EP_ISR_Handler+0x6b8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	b29a      	uxth	r2, r3
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	e029      	b.n	80029f6 <PCD_EP_ISR_Handler+0x6f2>
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	00000f8f 	.word	0x00000f8f
 80029a8:	00000406 	.word	0x00000406
 80029ac:	ffff8f8f 	.word	0xffff8f8f
 80029b0:	ffff80c0 	.word	0xffff80c0
 80029b4:	00000402 	.word	0x00000402
 80029b8:	ffff8f0f 	.word	0xffff8f0f
 80029bc:	ffff8000 	.word	0xffff8000
 80029c0:	ffff83ff 	.word	0xffff83ff
 80029c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029c6:	785b      	ldrb	r3, [r3, #1]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d114      	bne.n	80029f6 <PCD_EP_ISR_Handler+0x6f2>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2250      	movs	r2, #80	; 0x50
 80029d2:	5a9b      	ldrh	r3, [r3, r2]
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	001a      	movs	r2, r3
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	189b      	adds	r3, r3, r2
 80029dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	00da      	lsls	r2, r3, #3
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	18d3      	adds	r3, r2, r3
 80029e8:	4a3d      	ldr	r2, [pc, #244]	; (8002ae0 <PCD_EP_ISR_Handler+0x7dc>)
 80029ea:	4694      	mov	ip, r2
 80029ec:	4463      	add	r3, ip
 80029ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	2200      	movs	r2, #0
 80029f4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0011      	movs	r1, r2
 80029fe:	0018      	movs	r0, r3
 8002a00:	f005 faa0 	bl	8007f44 <HAL_PCD_DataInStageCallback>
 8002a04:	e05c      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	78db      	ldrb	r3, [r3, #3]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d150      	bne.n	8002ab0 <PCD_EP_ISR_Handler+0x7ac>
 8002a0e:	2352      	movs	r3, #82	; 0x52
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d149      	bne.n	8002ab0 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2250      	movs	r2, #80	; 0x50
 8002a22:	5a9b      	ldrh	r3, [r3, r2]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	001a      	movs	r2, r3
 8002a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	00db      	lsls	r3, r3, #3
 8002a2e:	18d2      	adds	r2, r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	18d3      	adds	r3, r2, r3
 8002a36:	4a2b      	ldr	r2, [pc, #172]	; (8002ae4 <PCD_EP_ISR_Handler+0x7e0>)
 8002a38:	4694      	mov	ip, r2
 8002a3a:	4463      	add	r3, ip
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	2140      	movs	r1, #64	; 0x40
 8002a40:	187b      	adds	r3, r7, r1
 8002a42:	0592      	lsls	r2, r2, #22
 8002a44:	0d92      	lsrs	r2, r2, #22
 8002a46:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8002a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d907      	bls.n	8002a64 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8002a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a56:	699a      	ldr	r2, [r3, #24]
 8002a58:	187b      	adds	r3, r7, r1
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a60:	619a      	str	r2, [r3, #24]
 8002a62:	e002      	b.n	8002a6a <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a74:	781a      	ldrb	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f005 fa62 	bl	8007f44 <HAL_PCD_DataInStageCallback>
 8002a80:	e01e      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002a82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	2140      	movs	r1, #64	; 0x40
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	18d2      	adds	r2, r2, r3
 8002a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a90:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	187b      	adds	r3, r7, r1
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	18d2      	adds	r2, r2, r3
 8002a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a9e:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f002 fa5d 	bl	8004f68 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002aae:	e007      	b.n	8002ac0 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002ab0:	2352      	movs	r3, #82	; 0x52
 8002ab2:	18fb      	adds	r3, r7, r3
 8002ab4:	881a      	ldrh	r2, [r3, #0]
 8002ab6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f930 	bl	8002d20 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2244      	movs	r2, #68	; 0x44
 8002ac6:	5a9b      	ldrh	r3, [r3, r2]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	b21b      	sxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	da01      	bge.n	8002ad4 <PCD_EP_ISR_Handler+0x7d0>
 8002ad0:	f7ff fc1e 	bl	8002310 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b016      	add	sp, #88	; 0x58
 8002adc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	00000406 	.word	0x00000406
 8002ae4:	00000402 	.word	0x00000402

08002ae8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	1dbb      	adds	r3, r7, #6
 8002af4:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002af6:	1dbb      	adds	r3, r7, #6
 8002af8:	881a      	ldrh	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	01db      	lsls	r3, r3, #7
 8002afe:	4013      	ands	r3, r2
 8002b00:	d100      	bne.n	8002b04 <HAL_PCD_EP_DB_Receive+0x1c>
 8002b02:	e07d      	b.n	8002c00 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2250      	movs	r2, #80	; 0x50
 8002b0a:	5a9b      	ldrh	r3, [r3, r2]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	001a      	movs	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	18d2      	adds	r2, r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	4a7a      	ldr	r2, [pc, #488]	; (8002d08 <HAL_PCD_EP_DB_Receive+0x220>)
 8002b20:	4694      	mov	ip, r2
 8002b22:	4463      	add	r3, ip
 8002b24:	881a      	ldrh	r2, [r3, #0]
 8002b26:	211a      	movs	r1, #26
 8002b28:	187b      	adds	r3, r7, r1
 8002b2a:	0592      	lsls	r2, r2, #22
 8002b2c:	0d92      	lsrs	r2, r2, #22
 8002b2e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	699a      	ldr	r2, [r3, #24]
 8002b34:	187b      	adds	r3, r7, r1
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d307      	bcc.n	8002b4c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	699a      	ldr	r2, [r3, #24]
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	1ad2      	subs	r2, r2, r3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	619a      	str	r2, [r3, #24]
 8002b4a:	e002      	b.n	8002b52 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d121      	bne.n	8002b9e <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	001a      	movs	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	18d3      	adds	r3, r2, r3
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	2018      	movs	r0, #24
 8002b6e:	183b      	adds	r3, r7, r0
 8002b70:	4966      	ldr	r1, [pc, #408]	; (8002d0c <HAL_PCD_EP_DB_Receive+0x224>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	801a      	strh	r2, [r3, #0]
 8002b76:	183b      	adds	r3, r7, r0
 8002b78:	183a      	adds	r2, r7, r0
 8002b7a:	8812      	ldrh	r2, [r2, #0]
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	0189      	lsls	r1, r1, #6
 8002b80:	404a      	eors	r2, r1
 8002b82:	801a      	strh	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	001a      	movs	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	183a      	adds	r2, r7, r0
 8002b94:	8812      	ldrh	r2, [r2, #0]
 8002b96:	495e      	ldr	r1, [pc, #376]	; (8002d10 <HAL_PCD_EP_DB_Receive+0x228>)
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	b292      	uxth	r2, r2
 8002b9c:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b9e:	1dbb      	adds	r3, r7, #6
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	2240      	movs	r2, #64	; 0x40
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	d01a      	beq.n	8002bde <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	001a      	movs	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	18d3      	adds	r3, r2, r3
 8002bb6:	881b      	ldrh	r3, [r3, #0]
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	2016      	movs	r0, #22
 8002bbc:	183b      	adds	r3, r7, r0
 8002bbe:	4955      	ldr	r1, [pc, #340]	; (8002d14 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	801a      	strh	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	001a      	movs	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	18d3      	adds	r3, r2, r3
 8002bd2:	183a      	adds	r2, r7, r0
 8002bd4:	8812      	ldrh	r2, [r2, #0]
 8002bd6:	4950      	ldr	r1, [pc, #320]	; (8002d18 <HAL_PCD_EP_DB_Receive+0x230>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	b292      	uxth	r2, r2
 8002bdc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002bde:	241a      	movs	r4, #26
 8002be0:	193b      	adds	r3, r7, r4
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d100      	bne.n	8002bea <HAL_PCD_EP_DB_Receive+0x102>
 8002be8:	e086      	b.n	8002cf8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	6959      	ldr	r1, [r3, #20]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	891a      	ldrh	r2, [r3, #8]
 8002bf6:	193b      	adds	r3, r7, r4
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	f003 fbed 	bl	80063d8 <USB_ReadPMA>
 8002bfe:	e07b      	b.n	8002cf8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2250      	movs	r2, #80	; 0x50
 8002c06:	5a9b      	ldrh	r3, [r3, r2]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	00db      	lsls	r3, r3, #3
 8002c12:	18d2      	adds	r2, r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	18d3      	adds	r3, r2, r3
 8002c1a:	4a40      	ldr	r2, [pc, #256]	; (8002d1c <HAL_PCD_EP_DB_Receive+0x234>)
 8002c1c:	4694      	mov	ip, r2
 8002c1e:	4463      	add	r3, ip
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	211a      	movs	r1, #26
 8002c24:	187b      	adds	r3, r7, r1
 8002c26:	0592      	lsls	r2, r2, #22
 8002c28:	0d92      	lsrs	r2, r2, #22
 8002c2a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	699a      	ldr	r2, [r3, #24]
 8002c30:	187b      	adds	r3, r7, r1
 8002c32:	881b      	ldrh	r3, [r3, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d307      	bcc.n	8002c48 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	699a      	ldr	r2, [r3, #24]
 8002c3c:	187b      	adds	r3, r7, r1
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	1ad2      	subs	r2, r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	619a      	str	r2, [r3, #24]
 8002c46:	e002      	b.n	8002c4e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d121      	bne.n	8002c9a <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	001a      	movs	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	18d3      	adds	r3, r2, r3
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29a      	uxth	r2, r3
 8002c68:	201e      	movs	r0, #30
 8002c6a:	183b      	adds	r3, r7, r0
 8002c6c:	4927      	ldr	r1, [pc, #156]	; (8002d0c <HAL_PCD_EP_DB_Receive+0x224>)
 8002c6e:	400a      	ands	r2, r1
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	183b      	adds	r3, r7, r0
 8002c74:	183a      	adds	r2, r7, r0
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	2180      	movs	r1, #128	; 0x80
 8002c7a:	0189      	lsls	r1, r1, #6
 8002c7c:	404a      	eors	r2, r1
 8002c7e:	801a      	strh	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	001a      	movs	r2, r3
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	18d3      	adds	r3, r2, r3
 8002c8e:	183a      	adds	r2, r7, r0
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	491f      	ldr	r1, [pc, #124]	; (8002d10 <HAL_PCD_EP_DB_Receive+0x228>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	b292      	uxth	r2, r2
 8002c98:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c9a:	1dbb      	adds	r3, r7, #6
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	2240      	movs	r2, #64	; 0x40
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	d11a      	bne.n	8002cda <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	001a      	movs	r2, r3
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	201c      	movs	r0, #28
 8002cb8:	183b      	adds	r3, r7, r0
 8002cba:	4916      	ldr	r1, [pc, #88]	; (8002d14 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002cbc:	400a      	ands	r2, r1
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	001a      	movs	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	18d3      	adds	r3, r2, r3
 8002cce:	183a      	adds	r2, r7, r0
 8002cd0:	8812      	ldrh	r2, [r2, #0]
 8002cd2:	4911      	ldr	r1, [pc, #68]	; (8002d18 <HAL_PCD_EP_DB_Receive+0x230>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	b292      	uxth	r2, r2
 8002cd8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002cda:	241a      	movs	r4, #26
 8002cdc:	193b      	adds	r3, r7, r4
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6818      	ldr	r0, [r3, #0]
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	6959      	ldr	r1, [r3, #20]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	895a      	ldrh	r2, [r3, #10]
 8002cf0:	193b      	adds	r3, r7, r4
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	f003 fb70 	bl	80063d8 <USB_ReadPMA>
    }
  }

  return count;
 8002cf8:	231a      	movs	r3, #26
 8002cfa:	18fb      	adds	r3, r7, r3
 8002cfc:	881b      	ldrh	r3, [r3, #0]
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b009      	add	sp, #36	; 0x24
 8002d04:	bd90      	pop	{r4, r7, pc}
 8002d06:	46c0      	nop			; (mov r8, r8)
 8002d08:	00000402 	.word	0x00000402
 8002d0c:	ffffbf8f 	.word	0xffffbf8f
 8002d10:	ffff8080 	.word	0xffff8080
 8002d14:	ffff8f8f 	.word	0xffff8f8f
 8002d18:	ffff80c0 	.word	0xffff80c0
 8002d1c:	00000406 	.word	0x00000406

08002d20 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b0a2      	sub	sp, #136	; 0x88
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	1dbb      	adds	r3, r7, #6
 8002d2c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d2e:	1dbb      	adds	r3, r7, #6
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	2240      	movs	r2, #64	; 0x40
 8002d34:	4013      	ands	r3, r2
 8002d36:	d100      	bne.n	8002d3a <HAL_PCD_EP_DB_Transmit+0x1a>
 8002d38:	e1c8      	b.n	80030cc <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2250      	movs	r2, #80	; 0x50
 8002d40:	5a9b      	ldrh	r3, [r3, r2]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	001a      	movs	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	18d2      	adds	r2, r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	18d3      	adds	r3, r2, r3
 8002d54:	4ad7      	ldr	r2, [pc, #860]	; (80030b4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002d56:	4694      	mov	ip, r2
 8002d58:	4463      	add	r3, ip
 8002d5a:	881a      	ldrh	r2, [r3, #0]
 8002d5c:	214e      	movs	r1, #78	; 0x4e
 8002d5e:	187b      	adds	r3, r7, r1
 8002d60:	0592      	lsls	r2, r2, #22
 8002d62:	0d92      	lsrs	r2, r2, #22
 8002d64:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	699a      	ldr	r2, [r3, #24]
 8002d6a:	187b      	adds	r3, r7, r1
 8002d6c:	881b      	ldrh	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d907      	bls.n	8002d82 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	187b      	adds	r3, r7, r1
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	1ad2      	subs	r2, r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	619a      	str	r2, [r3, #24]
 8002d80:	e002      	b.n	8002d88 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2200      	movs	r2, #0
 8002d86:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d000      	beq.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x72>
 8002d90:	e0b5      	b.n	8002efe <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	785b      	ldrb	r3, [r3, #1]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d125      	bne.n	8002de6 <HAL_PCD_EP_DB_Transmit+0xc6>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2250      	movs	r2, #80	; 0x50
 8002da6:	5a9b      	ldrh	r3, [r3, r2]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	001a      	movs	r2, r3
 8002dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dae:	189b      	adds	r3, r3, r2
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	00da      	lsls	r2, r3, #3
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	18d3      	adds	r3, r2, r3
 8002dbc:	4abd      	ldr	r2, [pc, #756]	; (80030b4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002dbe:	4694      	mov	ip, r2
 8002dc0:	4463      	add	r3, ip
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4abb      	ldr	r2, [pc, #748]	; (80030b8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002dcc:	4013      	ands	r3, r2
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	801a      	strh	r2, [r3, #0]
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	881b      	ldrh	r3, [r3, #0]
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	4ab8      	ldr	r2, [pc, #736]	; (80030bc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	801a      	strh	r2, [r3, #0]
 8002de4:	e01b      	b.n	8002e1e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	785b      	ldrb	r3, [r3, #1]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d117      	bne.n	8002e1e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	633b      	str	r3, [r7, #48]	; 0x30
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2250      	movs	r2, #80	; 0x50
 8002dfa:	5a9b      	ldrh	r3, [r3, r2]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	001a      	movs	r2, r3
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	189b      	adds	r3, r3, r2
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	00da      	lsls	r2, r3, #3
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e0e:	18d3      	adds	r3, r2, r3
 8002e10:	4aa8      	ldr	r2, [pc, #672]	; (80030b4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002e12:	4694      	mov	ip, r2
 8002e14:	4463      	add	r3, ip
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	623b      	str	r3, [r7, #32]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	785b      	ldrb	r3, [r3, #1]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d125      	bne.n	8002e78 <HAL_PCD_EP_DB_Transmit+0x158>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2250      	movs	r2, #80	; 0x50
 8002e38:	5a9b      	ldrh	r3, [r3, r2]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	189b      	adds	r3, r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	00da      	lsls	r2, r3, #3
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	18d3      	adds	r3, r2, r3
 8002e4e:	4a9c      	ldr	r2, [pc, #624]	; (80030c0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002e50:	4694      	mov	ip, r2
 8002e52:	4463      	add	r3, ip
 8002e54:	617b      	str	r3, [r7, #20]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4a96      	ldr	r2, [pc, #600]	; (80030b8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	881b      	ldrh	r3, [r3, #0]
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	4a93      	ldr	r2, [pc, #588]	; (80030bc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	801a      	strh	r2, [r3, #0]
 8002e76:	e018      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	785b      	ldrb	r3, [r3, #1]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d114      	bne.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x18a>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2250      	movs	r2, #80	; 0x50
 8002e86:	5a9b      	ldrh	r3, [r3, r2]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	623b      	str	r3, [r7, #32]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	00da      	lsls	r2, r3, #3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	18d3      	adds	r3, r2, r3
 8002e9c:	4a88      	ldr	r2, [pc, #544]	; (80030c0 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002e9e:	4694      	mov	ip, r2
 8002ea0:	4463      	add	r3, ip
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	781a      	ldrb	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0011      	movs	r1, r2
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f005 f846 	bl	8007f44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002eb8:	1dbb      	adds	r3, r7, #6
 8002eba:	881a      	ldrh	r2, [r3, #0]
 8002ebc:	2380      	movs	r3, #128	; 0x80
 8002ebe:	01db      	lsls	r3, r3, #7
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002ec4:	e2d4      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	001a      	movs	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	18d3      	adds	r3, r2, r3
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	2012      	movs	r0, #18
 8002eda:	183b      	adds	r3, r7, r0
 8002edc:	4979      	ldr	r1, [pc, #484]	; (80030c4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002ede:	400a      	ands	r2, r1
 8002ee0:	801a      	strh	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	001a      	movs	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	18d3      	adds	r3, r2, r3
 8002ef0:	183a      	adds	r2, r7, r0
 8002ef2:	8812      	ldrh	r2, [r2, #0]
 8002ef4:	4974      	ldr	r1, [pc, #464]	; (80030c8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	b292      	uxth	r2, r2
 8002efa:	801a      	strh	r2, [r3, #0]
 8002efc:	e2b8      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	; 0x80
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	4013      	ands	r3, r2
 8002f08:	d01a      	beq.n	8002f40 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	001a      	movs	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	18d3      	adds	r3, r2, r3
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	2044      	movs	r0, #68	; 0x44
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	4968      	ldr	r1, [pc, #416]	; (80030c4 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	801a      	strh	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	001a      	movs	r2, r3
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	18d3      	adds	r3, r2, r3
 8002f34:	183a      	adds	r2, r7, r0
 8002f36:	8812      	ldrh	r2, [r2, #0]
 8002f38:	4963      	ldr	r1, [pc, #396]	; (80030c8 <HAL_PCD_EP_DB_Transmit+0x3a8>)
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	b292      	uxth	r2, r2
 8002f3e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2224      	movs	r2, #36	; 0x24
 8002f44:	5c9b      	ldrb	r3, [r3, r2]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d000      	beq.n	8002f4c <HAL_PCD_EP_DB_Transmit+0x22c>
 8002f4a:	e291      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	695a      	ldr	r2, [r3, #20]
 8002f50:	214e      	movs	r1, #78	; 0x4e
 8002f52:	187b      	adds	r3, r7, r1
 8002f54:	881b      	ldrh	r3, [r3, #0]
 8002f56:	18d2      	adds	r2, r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	69da      	ldr	r2, [r3, #28]
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	18d2      	adds	r2, r2, r3
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d309      	bcc.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	1ad2      	subs	r2, r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	621a      	str	r2, [r3, #32]
 8002f88:	e016      	b.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d108      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 8002f92:	234e      	movs	r3, #78	; 0x4e
 8002f94:	18fb      	adds	r3, r7, r3
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2224      	movs	r2, #36	; 0x24
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]
 8002fa2:	e009      	b.n	8002fb8 <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2224      	movs	r2, #36	; 0x24
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	785b      	ldrb	r3, [r3, #1]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d150      	bne.n	8003062 <HAL_PCD_EP_DB_Transmit+0x342>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2250      	movs	r2, #80	; 0x50
 8002fcc:	5a9b      	ldrh	r3, [r3, r2]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	001a      	movs	r2, r3
 8002fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd4:	189b      	adds	r3, r3, r2
 8002fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	00da      	lsls	r2, r3, #3
 8002fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe0:	18d3      	adds	r3, r2, r3
 8002fe2:	4a34      	ldr	r2, [pc, #208]	; (80030b4 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002fe4:	4694      	mov	ip, r2
 8002fe6:	4463      	add	r3, ip
 8002fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8002fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d110      	bne.n	8003012 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	4a30      	ldr	r2, [pc, #192]	; (80030b8 <HAL_PCD_EP_DB_Transmit+0x398>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ffe:	801a      	strh	r2, [r3, #0]
 8003000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	4a2d      	ldr	r2, [pc, #180]	; (80030bc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003008:	4313      	orrs	r3, r2
 800300a:	b29a      	uxth	r2, r3
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	e044      	b.n	800309c <HAL_PCD_EP_DB_Transmit+0x37c>
 8003012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003014:	2b3e      	cmp	r3, #62	; 0x3e
 8003016:	d810      	bhi.n	800303a <HAL_PCD_EP_DB_Transmit+0x31a>
 8003018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800301a:	085b      	lsrs	r3, r3, #1
 800301c:	64bb      	str	r3, [r7, #72]	; 0x48
 800301e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003020:	2201      	movs	r2, #1
 8003022:	4013      	ands	r3, r2
 8003024:	d002      	beq.n	800302c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003028:	3301      	adds	r3, #1
 800302a:	64bb      	str	r3, [r7, #72]	; 0x48
 800302c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800302e:	b29b      	uxth	r3, r3
 8003030:	029b      	lsls	r3, r3, #10
 8003032:	b29a      	uxth	r2, r3
 8003034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003036:	801a      	strh	r2, [r3, #0]
 8003038:	e030      	b.n	800309c <HAL_PCD_EP_DB_Transmit+0x37c>
 800303a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303c:	095b      	lsrs	r3, r3, #5
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003042:	221f      	movs	r2, #31
 8003044:	4013      	ands	r3, r2
 8003046:	d102      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003048:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800304a:	3b01      	subs	r3, #1
 800304c:	64bb      	str	r3, [r7, #72]	; 0x48
 800304e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003050:	b29b      	uxth	r3, r3
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	b29b      	uxth	r3, r3
 8003056:	4a19      	ldr	r2, [pc, #100]	; (80030bc <HAL_PCD_EP_DB_Transmit+0x39c>)
 8003058:	4313      	orrs	r3, r2
 800305a:	b29a      	uxth	r2, r3
 800305c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800305e:	801a      	strh	r2, [r3, #0]
 8003060:	e01c      	b.n	800309c <HAL_PCD_EP_DB_Transmit+0x37c>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d118      	bne.n	800309c <HAL_PCD_EP_DB_Transmit+0x37c>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2250      	movs	r2, #80	; 0x50
 8003076:	5a9b      	ldrh	r3, [r3, r2]
 8003078:	b29b      	uxth	r3, r3
 800307a:	001a      	movs	r2, r3
 800307c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800307e:	189b      	adds	r3, r3, r2
 8003080:	643b      	str	r3, [r7, #64]	; 0x40
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	00da      	lsls	r2, r3, #3
 8003088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800308a:	18d3      	adds	r3, r2, r3
 800308c:	4a09      	ldr	r2, [pc, #36]	; (80030b4 <HAL_PCD_EP_DB_Transmit+0x394>)
 800308e:	4694      	mov	ip, r2
 8003090:	4463      	add	r3, ip
 8003092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003096:	b29a      	uxth	r2, r3
 8003098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800309a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6959      	ldr	r1, [r3, #20]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	891a      	ldrh	r2, [r3, #8]
 80030a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f003 f950 	bl	8006350 <USB_WritePMA>
 80030b0:	e1de      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	00000402 	.word	0x00000402
 80030b8:	ffff83ff 	.word	0xffff83ff
 80030bc:	ffff8000 	.word	0xffff8000
 80030c0:	00000406 	.word	0x00000406
 80030c4:	ffff8f8f 	.word	0xffff8f8f
 80030c8:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2250      	movs	r2, #80	; 0x50
 80030d2:	5a9b      	ldrh	r3, [r3, r2]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	001a      	movs	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	18d2      	adds	r2, r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	18d3      	adds	r3, r2, r3
 80030e6:	4aca      	ldr	r2, [pc, #808]	; (8003410 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80030e8:	4694      	mov	ip, r2
 80030ea:	4463      	add	r3, ip
 80030ec:	881a      	ldrh	r2, [r3, #0]
 80030ee:	214e      	movs	r1, #78	; 0x4e
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	0592      	lsls	r2, r2, #22
 80030f4:	0d92      	lsrs	r2, r2, #22
 80030f6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	187b      	adds	r3, r7, r1
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d307      	bcc.n	8003114 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	699a      	ldr	r2, [r3, #24]
 8003108:	187b      	adds	r3, r7, r1
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	1ad2      	subs	r2, r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	619a      	str	r2, [r3, #24]
 8003112:	e002      	b.n	800311a <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2200      	movs	r2, #0
 8003118:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d000      	beq.n	8003124 <HAL_PCD_EP_DB_Transmit+0x404>
 8003122:	e0c0      	b.n	80032a6 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d125      	bne.n	8003178 <HAL_PCD_EP_DB_Transmit+0x458>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2250      	movs	r2, #80	; 0x50
 8003138:	5a9b      	ldrh	r3, [r3, r2]
 800313a:	b29b      	uxth	r3, r3
 800313c:	001a      	movs	r2, r3
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	189b      	adds	r3, r3, r2
 8003142:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	00da      	lsls	r2, r3, #3
 800314a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800314c:	18d3      	adds	r3, r2, r3
 800314e:	4ab1      	ldr	r2, [pc, #708]	; (8003414 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8003150:	4694      	mov	ip, r2
 8003152:	4463      	add	r3, ip
 8003154:	66bb      	str	r3, [r7, #104]	; 0x68
 8003156:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	4aae      	ldr	r2, [pc, #696]	; (8003418 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 800315e:	4013      	ands	r3, r2
 8003160:	b29a      	uxth	r2, r3
 8003162:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003164:	801a      	strh	r2, [r3, #0]
 8003166:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	b29b      	uxth	r3, r3
 800316c:	4aab      	ldr	r2, [pc, #684]	; (800341c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800316e:	4313      	orrs	r3, r2
 8003170:	b29a      	uxth	r2, r3
 8003172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003174:	801a      	strh	r2, [r3, #0]
 8003176:	e01b      	b.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x490>
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	785b      	ldrb	r3, [r3, #1]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d117      	bne.n	80031b0 <HAL_PCD_EP_DB_Transmit+0x490>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	677b      	str	r3, [r7, #116]	; 0x74
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2250      	movs	r2, #80	; 0x50
 800318c:	5a9b      	ldrh	r3, [r3, r2]
 800318e:	b29b      	uxth	r3, r3
 8003190:	001a      	movs	r2, r3
 8003192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003194:	189b      	adds	r3, r3, r2
 8003196:	677b      	str	r3, [r7, #116]	; 0x74
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00da      	lsls	r2, r3, #3
 800319e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031a0:	18d3      	adds	r3, r2, r3
 80031a2:	4a9c      	ldr	r2, [pc, #624]	; (8003414 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80031a4:	4694      	mov	ip, r2
 80031a6:	4463      	add	r3, ip
 80031a8:	673b      	str	r3, [r7, #112]	; 0x70
 80031aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ac:	2200      	movs	r2, #0
 80031ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	785b      	ldrb	r3, [r3, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d130      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x500>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2180      	movs	r1, #128	; 0x80
 80031c4:	187a      	adds	r2, r7, r1
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2250      	movs	r2, #80	; 0x50
 80031ce:	5a9b      	ldrh	r3, [r3, r2]
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	001a      	movs	r2, r3
 80031d4:	187b      	adds	r3, r7, r1
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	189b      	adds	r3, r3, r2
 80031da:	187a      	adds	r2, r7, r1
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	00da      	lsls	r2, r3, #3
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	4a89      	ldr	r2, [pc, #548]	; (8003410 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80031ec:	4694      	mov	ip, r2
 80031ee:	4463      	add	r3, ip
 80031f0:	2184      	movs	r1, #132	; 0x84
 80031f2:	187a      	adds	r2, r7, r1
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	4a86      	ldr	r2, [pc, #536]	; (8003418 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8003200:	4013      	ands	r3, r2
 8003202:	b29a      	uxth	r2, r3
 8003204:	187b      	adds	r3, r7, r1
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	801a      	strh	r2, [r3, #0]
 800320a:	187b      	adds	r3, r7, r1
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4a82      	ldr	r2, [pc, #520]	; (800341c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	b29a      	uxth	r2, r3
 8003218:	187b      	adds	r3, r7, r1
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	801a      	strh	r2, [r3, #0]
 800321e:	e018      	b.n	8003252 <HAL_PCD_EP_DB_Transmit+0x532>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	785b      	ldrb	r3, [r3, #1]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d114      	bne.n	8003252 <HAL_PCD_EP_DB_Transmit+0x532>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2250      	movs	r2, #80	; 0x50
 800322e:	5a9b      	ldrh	r3, [r3, r2]
 8003230:	b29b      	uxth	r3, r3
 8003232:	001a      	movs	r2, r3
 8003234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003236:	189b      	adds	r3, r3, r2
 8003238:	67bb      	str	r3, [r7, #120]	; 0x78
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	00da      	lsls	r2, r3, #3
 8003240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003242:	18d3      	adds	r3, r2, r3
 8003244:	4a72      	ldr	r2, [pc, #456]	; (8003410 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003246:	4694      	mov	ip, r2
 8003248:	4463      	add	r3, ip
 800324a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800324c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800324e:	2200      	movs	r2, #0
 8003250:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	0011      	movs	r1, r2
 800325a:	0018      	movs	r0, r3
 800325c:	f004 fe72 	bl	8007f44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003260:	1dbb      	adds	r3, r7, #6
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	01db      	lsls	r3, r3, #7
 8003268:	4013      	ands	r3, r2
 800326a:	d000      	beq.n	800326e <HAL_PCD_EP_DB_Transmit+0x54e>
 800326c:	e100      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	001a      	movs	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	18d3      	adds	r3, r2, r3
 800327c:	881b      	ldrh	r3, [r3, #0]
 800327e:	b29a      	uxth	r2, r3
 8003280:	2046      	movs	r0, #70	; 0x46
 8003282:	183b      	adds	r3, r7, r0
 8003284:	4966      	ldr	r1, [pc, #408]	; (8003420 <HAL_PCD_EP_DB_Transmit+0x700>)
 8003286:	400a      	ands	r2, r1
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	001a      	movs	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	18d3      	adds	r3, r2, r3
 8003298:	183a      	adds	r2, r7, r0
 800329a:	8812      	ldrh	r2, [r2, #0]
 800329c:	4961      	ldr	r1, [pc, #388]	; (8003424 <HAL_PCD_EP_DB_Transmit+0x704>)
 800329e:	430a      	orrs	r2, r1
 80032a0:	b292      	uxth	r2, r2
 80032a2:	801a      	strh	r2, [r3, #0]
 80032a4:	e0e4      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032a6:	1dbb      	adds	r3, r7, #6
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	01db      	lsls	r3, r3, #7
 80032ae:	4013      	ands	r3, r2
 80032b0:	d11a      	bne.n	80032e8 <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	001a      	movs	r2, r3
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	18d3      	adds	r3, r2, r3
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	204c      	movs	r0, #76	; 0x4c
 80032c6:	183b      	adds	r3, r7, r0
 80032c8:	4955      	ldr	r1, [pc, #340]	; (8003420 <HAL_PCD_EP_DB_Transmit+0x700>)
 80032ca:	400a      	ands	r2, r1
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	001a      	movs	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	18d3      	adds	r3, r2, r3
 80032dc:	183a      	adds	r2, r7, r0
 80032de:	8812      	ldrh	r2, [r2, #0]
 80032e0:	4950      	ldr	r1, [pc, #320]	; (8003424 <HAL_PCD_EP_DB_Transmit+0x704>)
 80032e2:	430a      	orrs	r2, r1
 80032e4:	b292      	uxth	r2, r2
 80032e6:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	5c9b      	ldrb	r3, [r3, r2]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d000      	beq.n	80032f4 <HAL_PCD_EP_DB_Transmit+0x5d4>
 80032f2:	e0bd      	b.n	8003470 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	214e      	movs	r1, #78	; 0x4e
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	18d2      	adds	r2, r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	69da      	ldr	r2, [r3, #28]
 8003308:	187b      	adds	r3, r7, r1
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	18d2      	adds	r2, r2, r3
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	6a1a      	ldr	r2, [r3, #32]
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d309      	bcc.n	8003332 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332a:	1ad2      	subs	r2, r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	621a      	str	r2, [r3, #32]
 8003330:	e016      	b.n	8003360 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 800333a:	234e      	movs	r3, #78	; 0x4e
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2224      	movs	r2, #36	; 0x24
 8003346:	2100      	movs	r1, #0
 8003348:	5499      	strb	r1, [r3, r2]
 800334a:	e009      	b.n	8003360 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	667b      	str	r3, [r7, #100]	; 0x64
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	785b      	ldrb	r3, [r3, #1]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d15c      	bne.n	8003428 <HAL_PCD_EP_DB_Transmit+0x708>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2250      	movs	r2, #80	; 0x50
 800337a:	5a9b      	ldrh	r3, [r3, r2]
 800337c:	b29b      	uxth	r3, r3
 800337e:	001a      	movs	r2, r3
 8003380:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003382:	189b      	adds	r3, r3, r2
 8003384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	00da      	lsls	r2, r3, #3
 800338c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800338e:	18d3      	adds	r3, r2, r3
 8003390:	4a1f      	ldr	r2, [pc, #124]	; (8003410 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8003392:	4694      	mov	ip, r2
 8003394:	4463      	add	r3, ip
 8003396:	65bb      	str	r3, [r7, #88]	; 0x58
 8003398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339a:	2b00      	cmp	r3, #0
 800339c:	d110      	bne.n	80033c0 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800339e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4a1c      	ldr	r2, [pc, #112]	; (8003418 <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ac:	801a      	strh	r2, [r3, #0]
 80033ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	4a19      	ldr	r2, [pc, #100]	; (800341c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033bc:	801a      	strh	r2, [r3, #0]
 80033be:	e04d      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x73c>
 80033c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c2:	2b3e      	cmp	r3, #62	; 0x3e
 80033c4:	d810      	bhi.n	80033e8 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80033c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	657b      	str	r3, [r7, #84]	; 0x54
 80033cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ce:	2201      	movs	r2, #1
 80033d0:	4013      	ands	r3, r2
 80033d2:	d002      	beq.n	80033da <HAL_PCD_EP_DB_Transmit+0x6ba>
 80033d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d6:	3301      	adds	r3, #1
 80033d8:	657b      	str	r3, [r7, #84]	; 0x54
 80033da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033dc:	b29b      	uxth	r3, r3
 80033de:	029b      	lsls	r3, r3, #10
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033e4:	801a      	strh	r2, [r3, #0]
 80033e6:	e039      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x73c>
 80033e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	657b      	str	r3, [r7, #84]	; 0x54
 80033ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033f0:	221f      	movs	r2, #31
 80033f2:	4013      	ands	r3, r2
 80033f4:	d102      	bne.n	80033fc <HAL_PCD_EP_DB_Transmit+0x6dc>
 80033f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f8:	3b01      	subs	r3, #1
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
 80033fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fe:	b29b      	uxth	r3, r3
 8003400:	029b      	lsls	r3, r3, #10
 8003402:	b29b      	uxth	r3, r3
 8003404:	4a05      	ldr	r2, [pc, #20]	; (800341c <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8003406:	4313      	orrs	r3, r2
 8003408:	b29a      	uxth	r2, r3
 800340a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800340c:	801a      	strh	r2, [r3, #0]
 800340e:	e025      	b.n	800345c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003410:	00000406 	.word	0x00000406
 8003414:	00000402 	.word	0x00000402
 8003418:	ffff83ff 	.word	0xffff83ff
 800341c:	ffff8000 	.word	0xffff8000
 8003420:	ffff8f8f 	.word	0xffff8f8f
 8003424:	ffffc080 	.word	0xffffc080
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d115      	bne.n	800345c <HAL_PCD_EP_DB_Transmit+0x73c>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2250      	movs	r2, #80	; 0x50
 8003436:	5a9b      	ldrh	r3, [r3, r2]
 8003438:	b29b      	uxth	r3, r3
 800343a:	001a      	movs	r2, r3
 800343c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800343e:	189b      	adds	r3, r3, r2
 8003440:	667b      	str	r3, [r7, #100]	; 0x64
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00da      	lsls	r2, r3, #3
 8003448:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800344a:	18d3      	adds	r3, r2, r3
 800344c:	4a1e      	ldr	r2, [pc, #120]	; (80034c8 <HAL_PCD_EP_DB_Transmit+0x7a8>)
 800344e:	4694      	mov	ip, r2
 8003450:	4463      	add	r3, ip
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
 8003454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003456:	b29a      	uxth	r2, r3
 8003458:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800345a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6818      	ldr	r0, [r3, #0]
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6959      	ldr	r1, [r3, #20]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	895a      	ldrh	r2, [r3, #10]
 8003468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800346a:	b29b      	uxth	r3, r3
 800346c:	f002 ff70 	bl	8006350 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	001a      	movs	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	18d3      	adds	r3, r2, r3
 800347e:	881b      	ldrh	r3, [r3, #0]
 8003480:	b29a      	uxth	r2, r3
 8003482:	2010      	movs	r0, #16
 8003484:	183b      	adds	r3, r7, r0
 8003486:	4911      	ldr	r1, [pc, #68]	; (80034cc <HAL_PCD_EP_DB_Transmit+0x7ac>)
 8003488:	400a      	ands	r2, r1
 800348a:	801a      	strh	r2, [r3, #0]
 800348c:	183b      	adds	r3, r7, r0
 800348e:	183a      	adds	r2, r7, r0
 8003490:	8812      	ldrh	r2, [r2, #0]
 8003492:	2110      	movs	r1, #16
 8003494:	404a      	eors	r2, r1
 8003496:	801a      	strh	r2, [r3, #0]
 8003498:	183b      	adds	r3, r7, r0
 800349a:	183a      	adds	r2, r7, r0
 800349c:	8812      	ldrh	r2, [r2, #0]
 800349e:	2120      	movs	r1, #32
 80034a0:	404a      	eors	r2, r1
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	001a      	movs	r2, r3
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	18d3      	adds	r3, r2, r3
 80034b2:	183a      	adds	r2, r7, r0
 80034b4:	8812      	ldrh	r2, [r2, #0]
 80034b6:	4906      	ldr	r1, [pc, #24]	; (80034d0 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	b292      	uxth	r2, r2
 80034bc:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b022      	add	sp, #136	; 0x88
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	00000406 	.word	0x00000406
 80034cc:	ffff8fbf 	.word	0xffff8fbf
 80034d0:	ffff8080 	.word	0xffff8080

080034d4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	0008      	movs	r0, r1
 80034de:	0011      	movs	r1, r2
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	240a      	movs	r4, #10
 80034e4:	193b      	adds	r3, r7, r4
 80034e6:	1c02      	adds	r2, r0, #0
 80034e8:	801a      	strh	r2, [r3, #0]
 80034ea:	2308      	movs	r3, #8
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	1c0a      	adds	r2, r1, #0
 80034f0:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80034f2:	0021      	movs	r1, r4
 80034f4:	187b      	adds	r3, r7, r1
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	2280      	movs	r2, #128	; 0x80
 80034fa:	4013      	ands	r3, r2
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003502:	187b      	adds	r3, r7, r1
 8003504:	881b      	ldrh	r3, [r3, #0]
 8003506:	2207      	movs	r2, #7
 8003508:	4013      	ands	r3, r2
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	0013      	movs	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	189b      	adds	r3, r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	18d3      	adds	r3, r2, r3
 8003518:	617b      	str	r3, [r7, #20]
 800351a:	e00b      	b.n	8003534 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800351c:	230a      	movs	r3, #10
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	881a      	ldrh	r2, [r3, #0]
 8003522:	0013      	movs	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	189b      	adds	r3, r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	3369      	adds	r3, #105	; 0x69
 800352c:	33ff      	adds	r3, #255	; 0xff
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	18d3      	adds	r3, r2, r3
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003534:	2308      	movs	r3, #8
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d107      	bne.n	800354e <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2200      	movs	r2, #0
 8003542:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	b29a      	uxth	r2, r3
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	80da      	strh	r2, [r3, #6]
 800354c:	e00b      	b.n	8003566 <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	2201      	movs	r2, #1
 8003552:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	b29a      	uxth	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	0c1b      	lsrs	r3, r3, #16
 8003560:	b29a      	uxth	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b007      	add	sp, #28
 800356e:	bd90      	pop	{r4, r7, pc}

08003570 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	23ba      	movs	r3, #186	; 0xba
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	2101      	movs	r1, #1
 8003586:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	23b8      	movs	r3, #184	; 0xb8
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	2100      	movs	r1, #0
 8003590:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2254      	movs	r2, #84	; 0x54
 8003596:	5a9b      	ldrh	r3, [r3, r2]
 8003598:	b29b      	uxth	r3, r3
 800359a:	2201      	movs	r2, #1
 800359c:	4313      	orrs	r3, r2
 800359e:	b299      	uxth	r1, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2254      	movs	r2, #84	; 0x54
 80035a4:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2254      	movs	r2, #84	; 0x54
 80035aa:	5a9b      	ldrh	r3, [r3, r2]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2202      	movs	r2, #2
 80035b0:	4313      	orrs	r3, r2
 80035b2:	b299      	uxth	r1, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2254      	movs	r2, #84	; 0x54
 80035b8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	0018      	movs	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	000a      	movs	r2, r1
 80035ce:	1cfb      	adds	r3, r7, #3
 80035d0:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80035d2:	46c0      	nop			; (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b002      	add	sp, #8
 80035d8:	bd80      	pop	{r7, pc}
	...

080035dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035dc:	b5b0      	push	{r4, r5, r7, lr}
 80035de:	b08a      	sub	sp, #40	; 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f000 fbbf 	bl	8003d6e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035f0:	4bc9      	ldr	r3, [pc, #804]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	220c      	movs	r2, #12
 80035f6:	4013      	ands	r3, r2
 80035f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035fa:	4bc7      	ldr	r3, [pc, #796]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	025b      	lsls	r3, r3, #9
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	d100      	bne.n	8003612 <HAL_RCC_OscConfig+0x36>
 8003610:	e07e      	b.n	8003710 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b08      	cmp	r3, #8
 8003616:	d007      	beq.n	8003628 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d112      	bne.n	8003644 <HAL_RCC_OscConfig+0x68>
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	025b      	lsls	r3, r3, #9
 8003624:	429a      	cmp	r2, r3
 8003626:	d10d      	bne.n	8003644 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4bbb      	ldr	r3, [pc, #748]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	029b      	lsls	r3, r3, #10
 8003630:	4013      	ands	r3, r2
 8003632:	d100      	bne.n	8003636 <HAL_RCC_OscConfig+0x5a>
 8003634:	e06b      	b.n	800370e <HAL_RCC_OscConfig+0x132>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d167      	bne.n	800370e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	f000 fb95 	bl	8003d6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	025b      	lsls	r3, r3, #9
 800364c:	429a      	cmp	r2, r3
 800364e:	d107      	bne.n	8003660 <HAL_RCC_OscConfig+0x84>
 8003650:	4bb1      	ldr	r3, [pc, #708]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4bb0      	ldr	r3, [pc, #704]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003656:	2180      	movs	r1, #128	; 0x80
 8003658:	0249      	lsls	r1, r1, #9
 800365a:	430a      	orrs	r2, r1
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e027      	b.n	80036b0 <HAL_RCC_OscConfig+0xd4>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	23a0      	movs	r3, #160	; 0xa0
 8003666:	02db      	lsls	r3, r3, #11
 8003668:	429a      	cmp	r2, r3
 800366a:	d10e      	bne.n	800368a <HAL_RCC_OscConfig+0xae>
 800366c:	4baa      	ldr	r3, [pc, #680]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4ba9      	ldr	r3, [pc, #676]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003672:	2180      	movs	r1, #128	; 0x80
 8003674:	02c9      	lsls	r1, r1, #11
 8003676:	430a      	orrs	r2, r1
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	4ba7      	ldr	r3, [pc, #668]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	4ba6      	ldr	r3, [pc, #664]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	0249      	lsls	r1, r1, #9
 8003684:	430a      	orrs	r2, r1
 8003686:	601a      	str	r2, [r3, #0]
 8003688:	e012      	b.n	80036b0 <HAL_RCC_OscConfig+0xd4>
 800368a:	4ba3      	ldr	r3, [pc, #652]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	4ba2      	ldr	r3, [pc, #648]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003690:	49a2      	ldr	r1, [pc, #648]	; (800391c <HAL_RCC_OscConfig+0x340>)
 8003692:	400a      	ands	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	4ba0      	ldr	r3, [pc, #640]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	025b      	lsls	r3, r3, #9
 800369e:	4013      	ands	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	4b9c      	ldr	r3, [pc, #624]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	4b9b      	ldr	r3, [pc, #620]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80036aa:	499d      	ldr	r1, [pc, #628]	; (8003920 <HAL_RCC_OscConfig+0x344>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d015      	beq.n	80036e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b8:	f7fd fa26 	bl	8000b08 <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
 80036be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036c0:	e009      	b.n	80036d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c2:	f7fd fa21 	bl	8000b08 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b64      	cmp	r3, #100	; 0x64
 80036ce:	d902      	bls.n	80036d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	f000 fb4c 	bl	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036d6:	4b90      	ldr	r3, [pc, #576]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	2380      	movs	r3, #128	; 0x80
 80036dc:	029b      	lsls	r3, r3, #10
 80036de:	4013      	ands	r3, r2
 80036e0:	d0ef      	beq.n	80036c2 <HAL_RCC_OscConfig+0xe6>
 80036e2:	e015      	b.n	8003710 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fd fa10 	bl	8000b08 <HAL_GetTick>
 80036e8:	0003      	movs	r3, r0
 80036ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ee:	f7fd fa0b 	bl	8000b08 <HAL_GetTick>
 80036f2:	0002      	movs	r2, r0
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b64      	cmp	r3, #100	; 0x64
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e336      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003700:	4b85      	ldr	r3, [pc, #532]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	2380      	movs	r3, #128	; 0x80
 8003706:	029b      	lsls	r3, r3, #10
 8003708:	4013      	ands	r3, r2
 800370a:	d1f0      	bne.n	80036ee <HAL_RCC_OscConfig+0x112>
 800370c:	e000      	b.n	8003710 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2202      	movs	r2, #2
 8003716:	4013      	ands	r3, r2
 8003718:	d100      	bne.n	800371c <HAL_RCC_OscConfig+0x140>
 800371a:	e099      	b.n	8003850 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	2220      	movs	r2, #32
 8003726:	4013      	ands	r3, r2
 8003728:	d009      	beq.n	800373e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800372a:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	4b7a      	ldr	r3, [pc, #488]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003730:	2120      	movs	r1, #32
 8003732:	430a      	orrs	r2, r1
 8003734:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	2220      	movs	r2, #32
 800373a:	4393      	bics	r3, r2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d005      	beq.n	8003750 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b0c      	cmp	r3, #12
 8003748:	d13e      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1ec>
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d13b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003750:	4b71      	ldr	r3, [pc, #452]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2204      	movs	r2, #4
 8003756:	4013      	ands	r3, r2
 8003758:	d004      	beq.n	8003764 <HAL_RCC_OscConfig+0x188>
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e304      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_RCC_OscConfig+0x348>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	021a      	lsls	r2, r3, #8
 8003774:	4b68      	ldr	r3, [pc, #416]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800377a:	4b67      	ldr	r3, [pc, #412]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2209      	movs	r2, #9
 8003780:	4393      	bics	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	4b64      	ldr	r3, [pc, #400]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003788:	430a      	orrs	r2, r1
 800378a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800378c:	f000 fc42 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003790:	0001      	movs	r1, r0
 8003792:	4b61      	ldr	r3, [pc, #388]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	220f      	movs	r2, #15
 800379a:	4013      	ands	r3, r2
 800379c:	4a62      	ldr	r2, [pc, #392]	; (8003928 <HAL_RCC_OscConfig+0x34c>)
 800379e:	5cd3      	ldrb	r3, [r2, r3]
 80037a0:	000a      	movs	r2, r1
 80037a2:	40da      	lsrs	r2, r3
 80037a4:	4b61      	ldr	r3, [pc, #388]	; (800392c <HAL_RCC_OscConfig+0x350>)
 80037a6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80037a8:	4b61      	ldr	r3, [pc, #388]	; (8003930 <HAL_RCC_OscConfig+0x354>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2513      	movs	r5, #19
 80037ae:	197c      	adds	r4, r7, r5
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7fd f963 	bl	8000a7c <HAL_InitTick>
 80037b6:	0003      	movs	r3, r0
 80037b8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80037ba:	197b      	adds	r3, r7, r5
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d046      	beq.n	8003850 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80037c2:	197b      	adds	r3, r7, r5
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	e2d2      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d027      	beq.n	800381e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80037ce:	4b52      	ldr	r3, [pc, #328]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2209      	movs	r2, #9
 80037d4:	4393      	bics	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	4b4f      	ldr	r3, [pc, #316]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	430a      	orrs	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e0:	f7fd f992 	bl	8000b08 <HAL_GetTick>
 80037e4:	0003      	movs	r3, r0
 80037e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037e8:	e008      	b.n	80037fc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ea:	f7fd f98d 	bl	8000b08 <HAL_GetTick>
 80037ee:	0002      	movs	r2, r0
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e2b8      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2204      	movs	r2, #4
 8003802:	4013      	ands	r3, r2
 8003804:	d0f1      	beq.n	80037ea <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003806:	4b44      	ldr	r3, [pc, #272]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a46      	ldr	r2, [pc, #280]	; (8003924 <HAL_RCC_OscConfig+0x348>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	021a      	lsls	r2, r3, #8
 8003816:	4b40      	ldr	r3, [pc, #256]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
 800381c:	e018      	b.n	8003850 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800381e:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003824:	2101      	movs	r1, #1
 8003826:	438a      	bics	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fd f96d 	bl	8000b08 <HAL_GetTick>
 800382e:	0003      	movs	r3, r0
 8003830:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003834:	f7fd f968 	bl	8000b08 <HAL_GetTick>
 8003838:	0002      	movs	r2, r0
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e293      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003846:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2204      	movs	r2, #4
 800384c:	4013      	ands	r3, r2
 800384e:	d1f1      	bne.n	8003834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	d100      	bne.n	800385c <HAL_RCC_OscConfig+0x280>
 800385a:	e0a2      	b.n	80039a2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d140      	bne.n	80038e4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4013      	ands	r3, r2
 800386c:	d005      	beq.n	800387a <HAL_RCC_OscConfig+0x29e>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e279      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_RCC_OscConfig+0x358>)
 8003880:	4013      	ands	r3, r2
 8003882:	0019      	movs	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003888:	4b23      	ldr	r3, [pc, #140]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388e:	4b22      	ldr	r3, [pc, #136]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	0a19      	lsrs	r1, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	061a      	lsls	r2, r3, #24
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a6:	0b5b      	lsrs	r3, r3, #13
 80038a8:	3301      	adds	r3, #1
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	0212      	lsls	r2, r2, #8
 80038ae:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038b0:	4b19      	ldr	r3, [pc, #100]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	091b      	lsrs	r3, r3, #4
 80038b6:	210f      	movs	r1, #15
 80038b8:	400b      	ands	r3, r1
 80038ba:	491b      	ldr	r1, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x34c>)
 80038bc:	5ccb      	ldrb	r3, [r1, r3]
 80038be:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038c0:	4b1a      	ldr	r3, [pc, #104]	; (800392c <HAL_RCC_OscConfig+0x350>)
 80038c2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <HAL_RCC_OscConfig+0x354>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2513      	movs	r5, #19
 80038ca:	197c      	adds	r4, r7, r5
 80038cc:	0018      	movs	r0, r3
 80038ce:	f7fd f8d5 	bl	8000a7c <HAL_InitTick>
 80038d2:	0003      	movs	r3, r0
 80038d4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80038d6:	197b      	adds	r3, r7, r5
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d061      	beq.n	80039a2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80038de:	197b      	adds	r3, r7, r5
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	e244      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	69db      	ldr	r3, [r3, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d040      	beq.n	800396e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <HAL_RCC_OscConfig+0x33c>)
 80038f2:	2180      	movs	r1, #128	; 0x80
 80038f4:	0049      	lsls	r1, r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7fd f905 	bl	8000b08 <HAL_GetTick>
 80038fe:	0003      	movs	r3, r0
 8003900:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003902:	e019      	b.n	8003938 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003904:	f7fd f900 	bl	8000b08 <HAL_GetTick>
 8003908:	0002      	movs	r2, r0
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d912      	bls.n	8003938 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e22b      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40021000 	.word	0x40021000
 800391c:	fffeffff 	.word	0xfffeffff
 8003920:	fffbffff 	.word	0xfffbffff
 8003924:	ffffe0ff 	.word	0xffffe0ff
 8003928:	080085a8 	.word	0x080085a8
 800392c:	20000000 	.word	0x20000000
 8003930:	20000004 	.word	0x20000004
 8003934:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003938:	4bca      	ldr	r3, [pc, #808]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d0df      	beq.n	8003904 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003944:	4bc7      	ldr	r3, [pc, #796]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4ac7      	ldr	r2, [pc, #796]	; (8003c68 <HAL_RCC_OscConfig+0x68c>)
 800394a:	4013      	ands	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003952:	4bc4      	ldr	r3, [pc, #784]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003954:	430a      	orrs	r2, r1
 8003956:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003958:	4bc2      	ldr	r3, [pc, #776]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	0a19      	lsrs	r1, r3, #8
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	061a      	lsls	r2, r3, #24
 8003966:	4bbf      	ldr	r3, [pc, #764]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	e019      	b.n	80039a2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800396e:	4bbd      	ldr	r3, [pc, #756]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	4bbc      	ldr	r3, [pc, #752]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003974:	49bd      	ldr	r1, [pc, #756]	; (8003c6c <HAL_RCC_OscConfig+0x690>)
 8003976:	400a      	ands	r2, r1
 8003978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397a:	f7fd f8c5 	bl	8000b08 <HAL_GetTick>
 800397e:	0003      	movs	r3, r0
 8003980:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003984:	f7fd f8c0 	bl	8000b08 <HAL_GetTick>
 8003988:	0002      	movs	r2, r0
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e1eb      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003996:	4bb3      	ldr	r3, [pc, #716]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2208      	movs	r2, #8
 80039a8:	4013      	ands	r3, r2
 80039aa:	d036      	beq.n	8003a1a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d019      	beq.n	80039e8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b4:	4bab      	ldr	r3, [pc, #684]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 80039b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039b8:	4baa      	ldr	r3, [pc, #680]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 80039ba:	2101      	movs	r1, #1
 80039bc:	430a      	orrs	r2, r1
 80039be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fd f8a2 	bl	8000b08 <HAL_GetTick>
 80039c4:	0003      	movs	r3, r0
 80039c6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ca:	f7fd f89d 	bl	8000b08 <HAL_GetTick>
 80039ce:	0002      	movs	r2, r0
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e1c8      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039dc:	4ba1      	ldr	r3, [pc, #644]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 80039de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e0:	2202      	movs	r2, #2
 80039e2:	4013      	ands	r3, r2
 80039e4:	d0f1      	beq.n	80039ca <HAL_RCC_OscConfig+0x3ee>
 80039e6:	e018      	b.n	8003a1a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e8:	4b9e      	ldr	r3, [pc, #632]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 80039ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039ec:	4b9d      	ldr	r3, [pc, #628]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 80039ee:	2101      	movs	r1, #1
 80039f0:	438a      	bics	r2, r1
 80039f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039f4:	f7fd f888 	bl	8000b08 <HAL_GetTick>
 80039f8:	0003      	movs	r3, r0
 80039fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039fe:	f7fd f883 	bl	8000b08 <HAL_GetTick>
 8003a02:	0002      	movs	r2, r0
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e1ae      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a10:	4b94      	ldr	r3, [pc, #592]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a14:	2202      	movs	r2, #2
 8003a16:	4013      	ands	r3, r2
 8003a18:	d1f1      	bne.n	80039fe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4013      	ands	r3, r2
 8003a22:	d100      	bne.n	8003a26 <HAL_RCC_OscConfig+0x44a>
 8003a24:	e0ae      	b.n	8003b84 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2023      	movs	r0, #35	; 0x23
 8003a28:	183b      	adds	r3, r7, r0
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2e:	4b8d      	ldr	r3, [pc, #564]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	055b      	lsls	r3, r3, #21
 8003a36:	4013      	ands	r3, r2
 8003a38:	d109      	bne.n	8003a4e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3a:	4b8a      	ldr	r3, [pc, #552]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a3e:	4b89      	ldr	r3, [pc, #548]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003a40:	2180      	movs	r1, #128	; 0x80
 8003a42:	0549      	lsls	r1, r1, #21
 8003a44:	430a      	orrs	r2, r1
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003a48:	183b      	adds	r3, r7, r0
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4e:	4b88      	ldr	r3, [pc, #544]	; (8003c70 <HAL_RCC_OscConfig+0x694>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	4013      	ands	r3, r2
 8003a58:	d11a      	bne.n	8003a90 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5a:	4b85      	ldr	r3, [pc, #532]	; (8003c70 <HAL_RCC_OscConfig+0x694>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b84      	ldr	r3, [pc, #528]	; (8003c70 <HAL_RCC_OscConfig+0x694>)
 8003a60:	2180      	movs	r1, #128	; 0x80
 8003a62:	0049      	lsls	r1, r1, #1
 8003a64:	430a      	orrs	r2, r1
 8003a66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a68:	f7fd f84e 	bl	8000b08 <HAL_GetTick>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7fd f849 	bl	8000b08 <HAL_GetTick>
 8003a76:	0002      	movs	r2, r0
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e174      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b7a      	ldr	r3, [pc, #488]	; (8003c70 <HAL_RCC_OscConfig+0x694>)
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	2380      	movs	r3, #128	; 0x80
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	2380      	movs	r3, #128	; 0x80
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x4d0>
 8003a9c:	4b71      	ldr	r3, [pc, #452]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003a9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aa0:	4b70      	ldr	r3, [pc, #448]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003aa2:	2180      	movs	r1, #128	; 0x80
 8003aa4:	0049      	lsls	r1, r1, #1
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	651a      	str	r2, [r3, #80]	; 0x50
 8003aaa:	e031      	b.n	8003b10 <HAL_RCC_OscConfig+0x534>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10c      	bne.n	8003ace <HAL_RCC_OscConfig+0x4f2>
 8003ab4:	4b6b      	ldr	r3, [pc, #428]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003ab6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ab8:	4b6a      	ldr	r3, [pc, #424]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003aba:	496c      	ldr	r1, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x690>)
 8003abc:	400a      	ands	r2, r1
 8003abe:	651a      	str	r2, [r3, #80]	; 0x50
 8003ac0:	4b68      	ldr	r3, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003ac2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ac4:	4b67      	ldr	r3, [pc, #412]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003ac6:	496b      	ldr	r1, [pc, #428]	; (8003c74 <HAL_RCC_OscConfig+0x698>)
 8003ac8:	400a      	ands	r2, r1
 8003aca:	651a      	str	r2, [r3, #80]	; 0x50
 8003acc:	e020      	b.n	8003b10 <HAL_RCC_OscConfig+0x534>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	23a0      	movs	r3, #160	; 0xa0
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d10e      	bne.n	8003af8 <HAL_RCC_OscConfig+0x51c>
 8003ada:	4b62      	ldr	r3, [pc, #392]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003adc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ade:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003ae0:	2180      	movs	r1, #128	; 0x80
 8003ae2:	00c9      	lsls	r1, r1, #3
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	651a      	str	r2, [r3, #80]	; 0x50
 8003ae8:	4b5e      	ldr	r3, [pc, #376]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003aea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003aec:	4b5d      	ldr	r3, [pc, #372]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	0049      	lsls	r1, r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	651a      	str	r2, [r3, #80]	; 0x50
 8003af6:	e00b      	b.n	8003b10 <HAL_RCC_OscConfig+0x534>
 8003af8:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003afc:	4b59      	ldr	r3, [pc, #356]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003afe:	495b      	ldr	r1, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x690>)
 8003b00:	400a      	ands	r2, r1
 8003b02:	651a      	str	r2, [r3, #80]	; 0x50
 8003b04:	4b57      	ldr	r3, [pc, #348]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b08:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b0a:	495a      	ldr	r1, [pc, #360]	; (8003c74 <HAL_RCC_OscConfig+0x698>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fc fff6 	bl	8000b08 <HAL_GetTick>
 8003b1c:	0003      	movs	r3, r0
 8003b1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b20:	e009      	b.n	8003b36 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fc fff1 	bl	8000b08 <HAL_GetTick>
 8003b26:	0002      	movs	r2, r0
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	4a52      	ldr	r2, [pc, #328]	; (8003c78 <HAL_RCC_OscConfig+0x69c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e11b      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b36:	4b4b      	ldr	r3, [pc, #300]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4013      	ands	r3, r2
 8003b40:	d0ef      	beq.n	8003b22 <HAL_RCC_OscConfig+0x546>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b44:	f7fc ffe0 	bl	8000b08 <HAL_GetTick>
 8003b48:	0003      	movs	r3, r0
 8003b4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b4c:	e009      	b.n	8003b62 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b4e:	f7fc ffdb 	bl	8000b08 <HAL_GetTick>
 8003b52:	0002      	movs	r2, r0
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	4a47      	ldr	r2, [pc, #284]	; (8003c78 <HAL_RCC_OscConfig+0x69c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e105      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b62:	4b40      	ldr	r3, [pc, #256]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d1ef      	bne.n	8003b4e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b6e:	2323      	movs	r3, #35	; 0x23
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d105      	bne.n	8003b84 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b78:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b7c:	4b39      	ldr	r3, [pc, #228]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b7e:	493f      	ldr	r1, [pc, #252]	; (8003c7c <HAL_RCC_OscConfig+0x6a0>)
 8003b80:	400a      	ands	r2, r1
 8003b82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	d049      	beq.n	8003c22 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d026      	beq.n	8003be4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003b96:	4b33      	ldr	r3, [pc, #204]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	4b32      	ldr	r3, [pc, #200]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba6:	4b2f      	ldr	r3, [pc, #188]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003ba8:	2101      	movs	r1, #1
 8003baa:	430a      	orrs	r2, r1
 8003bac:	635a      	str	r2, [r3, #52]	; 0x34
 8003bae:	4b34      	ldr	r3, [pc, #208]	; (8003c80 <HAL_RCC_OscConfig+0x6a4>)
 8003bb0:	6a1a      	ldr	r2, [r3, #32]
 8003bb2:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <HAL_RCC_OscConfig+0x6a4>)
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	0189      	lsls	r1, r1, #6
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbc:	f7fc ffa4 	bl	8000b08 <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc6:	f7fc ff9f 	bl	8000b08 <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e0ca      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003bd8:	4b22      	ldr	r3, [pc, #136]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2202      	movs	r2, #2
 8003bde:	4013      	ands	r3, r2
 8003be0:	d0f1      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x5ea>
 8003be2:	e01e      	b.n	8003c22 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003be4:	4b1f      	ldr	r3, [pc, #124]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b1e      	ldr	r3, [pc, #120]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RCC_OscConfig+0x6a4>)
 8003bf2:	6a1a      	ldr	r2, [r3, #32]
 8003bf4:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RCC_OscConfig+0x6a4>)
 8003bf6:	4923      	ldr	r1, [pc, #140]	; (8003c84 <HAL_RCC_OscConfig+0x6a8>)
 8003bf8:	400a      	ands	r2, r1
 8003bfa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fc ff84 	bl	8000b08 <HAL_GetTick>
 8003c00:	0003      	movs	r3, r0
 8003c02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c04:	e008      	b.n	8003c18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c06:	f7fc ff7f 	bl	8000b08 <HAL_GetTick>
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0aa      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d1f1      	bne.n	8003c06 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d100      	bne.n	8003c2c <HAL_RCC_OscConfig+0x650>
 8003c2a:	e09f      	b.n	8003d6c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d100      	bne.n	8003c34 <HAL_RCC_OscConfig+0x658>
 8003c32:	e078      	b.n	8003d26 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d159      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b08      	ldr	r3, [pc, #32]	; (8003c64 <HAL_RCC_OscConfig+0x688>)
 8003c42:	4911      	ldr	r1, [pc, #68]	; (8003c88 <HAL_RCC_OscConfig+0x6ac>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fc ff5e 	bl	8000b08 <HAL_GetTick>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c50:	e01c      	b.n	8003c8c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c52:	f7fc ff59 	bl	8000b08 <HAL_GetTick>
 8003c56:	0002      	movs	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d915      	bls.n	8003c8c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e084      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
 8003c64:	40021000 	.word	0x40021000
 8003c68:	ffff1fff 	.word	0xffff1fff
 8003c6c:	fffffeff 	.word	0xfffffeff
 8003c70:	40007000 	.word	0x40007000
 8003c74:	fffffbff 	.word	0xfffffbff
 8003c78:	00001388 	.word	0x00001388
 8003c7c:	efffffff 	.word	0xefffffff
 8003c80:	40010000 	.word	0x40010000
 8003c84:	ffffdfff 	.word	0xffffdfff
 8003c88:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003c8c:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	049b      	lsls	r3, r3, #18
 8003c94:	4013      	ands	r3, r2
 8003c96:	d1dc      	bne.n	8003c52 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c98:	4b37      	ldr	r3, [pc, #220]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	4a37      	ldr	r2, [pc, #220]	; (8003d7c <HAL_RCC_OscConfig+0x7a0>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	0019      	movs	r1, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb8:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b2e      	ldr	r3, [pc, #184]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003cbe:	2180      	movs	r1, #128	; 0x80
 8003cc0:	0449      	lsls	r1, r1, #17
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fc ff1f 	bl	8000b08 <HAL_GetTick>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fc ff1a 	bl	8000b08 <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e045      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ce2:	4b25      	ldr	r3, [pc, #148]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2380      	movs	r3, #128	; 0x80
 8003ce8:	049b      	lsls	r3, r3, #18
 8003cea:	4013      	ands	r3, r2
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x6f4>
 8003cee:	e03d      	b.n	8003d6c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	4b21      	ldr	r3, [pc, #132]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003cf6:	4922      	ldr	r1, [pc, #136]	; (8003d80 <HAL_RCC_OscConfig+0x7a4>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfc:	f7fc ff04 	bl	8000b08 <HAL_GetTick>
 8003d00:	0003      	movs	r3, r0
 8003d02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d06:	f7fc feff 	bl	8000b08 <HAL_GetTick>
 8003d0a:	0002      	movs	r2, r0
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e02a      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003d18:	4b17      	ldr	r3, [pc, #92]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	049b      	lsls	r3, r3, #18
 8003d20:	4013      	ands	r3, r2
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x72a>
 8003d24:	e022      	b.n	8003d6c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e01d      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <HAL_RCC_OscConfig+0x79c>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	2380      	movs	r3, #128	; 0x80
 8003d3c:	025b      	lsls	r3, r3, #9
 8003d3e:	401a      	ands	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d10f      	bne.n	8003d68 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	23f0      	movs	r3, #240	; 0xf0
 8003d4c:	039b      	lsls	r3, r3, #14
 8003d4e:	401a      	ands	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	23c0      	movs	r3, #192	; 0xc0
 8003d5c:	041b      	lsls	r3, r3, #16
 8003d5e:	401a      	ands	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	0018      	movs	r0, r3
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b00a      	add	sp, #40	; 0x28
 8003d74:	bdb0      	pop	{r4, r5, r7, pc}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	ff02ffff 	.word	0xff02ffff
 8003d80:	feffffff 	.word	0xfeffffff

08003d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d84:	b5b0      	push	{r4, r5, r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e128      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d98:	4b96      	ldr	r3, [pc, #600]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	4013      	ands	r3, r2
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d91e      	bls.n	8003de4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da6:	4b93      	ldr	r3, [pc, #588]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	4393      	bics	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	4b90      	ldr	r3, [pc, #576]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003db8:	f7fc fea6 	bl	8000b08 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc0:	e009      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc2:	f7fc fea1 	bl	8000b08 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	4a8a      	ldr	r2, [pc, #552]	; (8003ff8 <HAL_RCC_ClockConfig+0x274>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e109      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	4013      	ands	r3, r2
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d1ee      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2202      	movs	r2, #2
 8003dea:	4013      	ands	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dee:	4b83      	ldr	r3, [pc, #524]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	22f0      	movs	r2, #240	; 0xf0
 8003df4:	4393      	bics	r3, r2
 8003df6:	0019      	movs	r1, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	4b7f      	ldr	r3, [pc, #508]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <HAL_RCC_ClockConfig+0x8a>
 8003e0c:	e089      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d107      	bne.n	8003e26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e16:	4b79      	ldr	r3, [pc, #484]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	2380      	movs	r3, #128	; 0x80
 8003e1c:	029b      	lsls	r3, r3, #10
 8003e1e:	4013      	ands	r3, r2
 8003e20:	d120      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e0e1      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d107      	bne.n	8003e3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e2e:	4b73      	ldr	r3, [pc, #460]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	; 0x80
 8003e34:	049b      	lsls	r3, r3, #18
 8003e36:	4013      	ands	r3, r2
 8003e38:	d114      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0d5      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d106      	bne.n	8003e54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e46:	4b6d      	ldr	r3, [pc, #436]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2204      	movs	r2, #4
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d109      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0ca      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003e54:	4b69      	ldr	r3, [pc, #420]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0c2      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e64:	4b65      	ldr	r3, [pc, #404]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2203      	movs	r2, #3
 8003e6a:	4393      	bics	r3, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003e74:	430a      	orrs	r2, r1
 8003e76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e78:	f7fc fe46 	bl	8000b08 <HAL_GetTick>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d111      	bne.n	8003eac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e88:	e009      	b.n	8003e9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8a:	f7fc fe3d 	bl	8000b08 <HAL_GetTick>
 8003e8e:	0002      	movs	r2, r0
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	4a58      	ldr	r2, [pc, #352]	; (8003ff8 <HAL_RCC_ClockConfig+0x274>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e0a5      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e9e:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	220c      	movs	r2, #12
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d1ef      	bne.n	8003e8a <HAL_RCC_ClockConfig+0x106>
 8003eaa:	e03a      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d111      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eb4:	e009      	b.n	8003eca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eb6:	f7fc fe27 	bl	8000b08 <HAL_GetTick>
 8003eba:	0002      	movs	r2, r0
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	4a4d      	ldr	r2, [pc, #308]	; (8003ff8 <HAL_RCC_ClockConfig+0x274>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e08f      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eca:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	220c      	movs	r2, #12
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d1ef      	bne.n	8003eb6 <HAL_RCC_ClockConfig+0x132>
 8003ed6:	e024      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d11b      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ee0:	e009      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee2:	f7fc fe11 	bl	8000b08 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	4a42      	ldr	r2, [pc, #264]	; (8003ff8 <HAL_RCC_ClockConfig+0x274>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e079      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	220c      	movs	r2, #12
 8003efc:	4013      	ands	r3, r2
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d1ef      	bne.n	8003ee2 <HAL_RCC_ClockConfig+0x15e>
 8003f02:	e00e      	b.n	8003f22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f04:	f7fc fe00 	bl	8000b08 <HAL_GetTick>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	4a3a      	ldr	r2, [pc, #232]	; (8003ff8 <HAL_RCC_ClockConfig+0x274>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e068      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003f18:	4b38      	ldr	r3, [pc, #224]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	220c      	movs	r2, #12
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d1f0      	bne.n	8003f04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2201      	movs	r2, #1
 8003f28:	4013      	ands	r3, r2
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d21e      	bcs.n	8003f6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f30:	4b30      	ldr	r3, [pc, #192]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2201      	movs	r2, #1
 8003f36:	4393      	bics	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	4b2e      	ldr	r3, [pc, #184]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f42:	f7fc fde1 	bl	8000b08 <HAL_GetTick>
 8003f46:	0003      	movs	r3, r0
 8003f48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f4a:	e009      	b.n	8003f60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f4c:	f7fc fddc 	bl	8000b08 <HAL_GetTick>
 8003f50:	0002      	movs	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	4a28      	ldr	r2, [pc, #160]	; (8003ff8 <HAL_RCC_ClockConfig+0x274>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e044      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f60:	4b24      	ldr	r3, [pc, #144]	; (8003ff4 <HAL_RCC_ClockConfig+0x270>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2201      	movs	r2, #1
 8003f66:	4013      	ands	r3, r2
 8003f68:	683a      	ldr	r2, [r7, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d1ee      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2204      	movs	r2, #4
 8003f74:	4013      	ands	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f78:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a20      	ldr	r2, [pc, #128]	; (8004000 <HAL_RCC_ClockConfig+0x27c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68da      	ldr	r2, [r3, #12]
 8003f86:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2208      	movs	r2, #8
 8003f92:	4013      	ands	r3, r2
 8003f94:	d00a      	beq.n	8003fac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	4a1a      	ldr	r2, [pc, #104]	; (8004004 <HAL_RCC_ClockConfig+0x280>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	0019      	movs	r1, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	00da      	lsls	r2, r3, #3
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fac:	f000 f832 	bl	8004014 <HAL_RCC_GetSysClockFreq>
 8003fb0:	0001      	movs	r1, r0
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_RCC_ClockConfig+0x278>)
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	220f      	movs	r2, #15
 8003fba:	4013      	ands	r3, r2
 8003fbc:	4a12      	ldr	r2, [pc, #72]	; (8004008 <HAL_RCC_ClockConfig+0x284>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	000a      	movs	r2, r1
 8003fc2:	40da      	lsrs	r2, r3
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <HAL_RCC_ClockConfig+0x288>)
 8003fc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fc8:	4b11      	ldr	r3, [pc, #68]	; (8004010 <HAL_RCC_ClockConfig+0x28c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	250b      	movs	r5, #11
 8003fce:	197c      	adds	r4, r7, r5
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	f7fc fd53 	bl	8000a7c <HAL_InitTick>
 8003fd6:	0003      	movs	r3, r0
 8003fd8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003fda:	197b      	adds	r3, r7, r5
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003fe2:	197b      	adds	r3, r7, r5
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	e000      	b.n	8003fea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	0018      	movs	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b004      	add	sp, #16
 8003ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	00001388 	.word	0x00001388
 8003ffc:	40021000 	.word	0x40021000
 8004000:	fffff8ff 	.word	0xfffff8ff
 8004004:	ffffc7ff 	.word	0xffffc7ff
 8004008:	080085a8 	.word	0x080085a8
 800400c:	20000000 	.word	0x20000000
 8004010:	20000004 	.word	0x20000004

08004014 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004014:	b5b0      	push	{r4, r5, r7, lr}
 8004016:	b08e      	sub	sp, #56	; 0x38
 8004018:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800401a:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_GetSysClockFreq+0x138>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004022:	230c      	movs	r3, #12
 8004024:	4013      	ands	r3, r2
 8004026:	2b0c      	cmp	r3, #12
 8004028:	d014      	beq.n	8004054 <HAL_RCC_GetSysClockFreq+0x40>
 800402a:	d900      	bls.n	800402e <HAL_RCC_GetSysClockFreq+0x1a>
 800402c:	e07b      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x112>
 800402e:	2b04      	cmp	r3, #4
 8004030:	d002      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x24>
 8004032:	2b08      	cmp	r3, #8
 8004034:	d00b      	beq.n	800404e <HAL_RCC_GetSysClockFreq+0x3a>
 8004036:	e076      	b.n	8004126 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004038:	4b44      	ldr	r3, [pc, #272]	; (800414c <HAL_RCC_GetSysClockFreq+0x138>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2210      	movs	r2, #16
 800403e:	4013      	ands	r3, r2
 8004040:	d002      	beq.n	8004048 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004042:	4b43      	ldr	r3, [pc, #268]	; (8004150 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004044:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004046:	e07c      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004048:	4b42      	ldr	r3, [pc, #264]	; (8004154 <HAL_RCC_GetSysClockFreq+0x140>)
 800404a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800404c:	e079      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800404e:	4b42      	ldr	r3, [pc, #264]	; (8004158 <HAL_RCC_GetSysClockFreq+0x144>)
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004052:	e076      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004056:	0c9a      	lsrs	r2, r3, #18
 8004058:	230f      	movs	r3, #15
 800405a:	401a      	ands	r2, r3
 800405c:	4b3f      	ldr	r3, [pc, #252]	; (800415c <HAL_RCC_GetSysClockFreq+0x148>)
 800405e:	5c9b      	ldrb	r3, [r3, r2]
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004064:	0d9a      	lsrs	r2, r3, #22
 8004066:	2303      	movs	r3, #3
 8004068:	4013      	ands	r3, r2
 800406a:	3301      	adds	r3, #1
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_GetSysClockFreq+0x138>)
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	025b      	lsls	r3, r3, #9
 8004076:	4013      	ands	r3, r2
 8004078:	d01a      	beq.n	80040b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800407a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800407c:	61bb      	str	r3, [r7, #24]
 800407e:	2300      	movs	r3, #0
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	4a35      	ldr	r2, [pc, #212]	; (8004158 <HAL_RCC_GetSysClockFreq+0x144>)
 8004084:	2300      	movs	r3, #0
 8004086:	69b8      	ldr	r0, [r7, #24]
 8004088:	69f9      	ldr	r1, [r7, #28]
 800408a:	f7fc f8e9 	bl	8000260 <__aeabi_lmul>
 800408e:	0002      	movs	r2, r0
 8004090:	000b      	movs	r3, r1
 8004092:	0010      	movs	r0, r2
 8004094:	0019      	movs	r1, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f7fc f8bd 	bl	8000220 <__aeabi_uldivmod>
 80040a6:	0002      	movs	r2, r0
 80040a8:	000b      	movs	r3, r1
 80040aa:	0013      	movs	r3, r2
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
 80040ae:	e037      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80040b0:	4b26      	ldr	r3, [pc, #152]	; (800414c <HAL_RCC_GetSysClockFreq+0x138>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2210      	movs	r2, #16
 80040b6:	4013      	ands	r3, r2
 80040b8:	d01a      	beq.n	80040f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	4a23      	ldr	r2, [pc, #140]	; (8004150 <HAL_RCC_GetSysClockFreq+0x13c>)
 80040c4:	2300      	movs	r3, #0
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	f7fc f8c9 	bl	8000260 <__aeabi_lmul>
 80040ce:	0002      	movs	r2, r0
 80040d0:	000b      	movs	r3, r1
 80040d2:	0010      	movs	r0, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f7fc f89d 	bl	8000220 <__aeabi_uldivmod>
 80040e6:	0002      	movs	r2, r0
 80040e8:	000b      	movs	r3, r1
 80040ea:	0013      	movs	r3, r2
 80040ec:	637b      	str	r3, [r7, #52]	; 0x34
 80040ee:	e017      	b.n	8004120 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80040f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f2:	0018      	movs	r0, r3
 80040f4:	2300      	movs	r3, #0
 80040f6:	0019      	movs	r1, r3
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <HAL_RCC_GetSysClockFreq+0x140>)
 80040fa:	2300      	movs	r3, #0
 80040fc:	f7fc f8b0 	bl	8000260 <__aeabi_lmul>
 8004100:	0002      	movs	r2, r0
 8004102:	000b      	movs	r3, r1
 8004104:	0010      	movs	r0, r2
 8004106:	0019      	movs	r1, r3
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	001c      	movs	r4, r3
 800410c:	2300      	movs	r3, #0
 800410e:	001d      	movs	r5, r3
 8004110:	0022      	movs	r2, r4
 8004112:	002b      	movs	r3, r5
 8004114:	f7fc f884 	bl	8000220 <__aeabi_uldivmod>
 8004118:	0002      	movs	r2, r0
 800411a:	000b      	movs	r3, r1
 800411c:	0013      	movs	r3, r2
 800411e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004122:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004124:	e00d      	b.n	8004142 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <HAL_RCC_GetSysClockFreq+0x138>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	0b5b      	lsrs	r3, r3, #13
 800412c:	2207      	movs	r2, #7
 800412e:	4013      	ands	r3, r2
 8004130:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	3301      	adds	r3, #1
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	0212      	lsls	r2, r2, #8
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004140:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004144:	0018      	movs	r0, r3
 8004146:	46bd      	mov	sp, r7
 8004148:	b00e      	add	sp, #56	; 0x38
 800414a:	bdb0      	pop	{r4, r5, r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	003d0900 	.word	0x003d0900
 8004154:	00f42400 	.word	0x00f42400
 8004158:	007a1200 	.word	0x007a1200
 800415c:	080085b8 	.word	0x080085b8

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004168:	2317      	movs	r3, #23
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2220      	movs	r2, #32
 8004176:	4013      	ands	r3, r2
 8004178:	d106      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	2380      	movs	r3, #128	; 0x80
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	4013      	ands	r3, r2
 8004184:	d100      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004186:	e0d9      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004188:	4ba4      	ldr	r3, [pc, #656]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800418a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	055b      	lsls	r3, r3, #21
 8004190:	4013      	ands	r3, r2
 8004192:	d10a      	bne.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004194:	4ba1      	ldr	r3, [pc, #644]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004198:	4ba0      	ldr	r3, [pc, #640]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800419a:	2180      	movs	r1, #128	; 0x80
 800419c:	0549      	lsls	r1, r1, #21
 800419e:	430a      	orrs	r2, r1
 80041a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80041a2:	2317      	movs	r3, #23
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041aa:	4b9d      	ldr	r3, [pc, #628]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	2380      	movs	r3, #128	; 0x80
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4013      	ands	r3, r2
 80041b4:	d11a      	bne.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b6:	4b9a      	ldr	r3, [pc, #616]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b99      	ldr	r3, [pc, #612]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80041bc:	2180      	movs	r1, #128	; 0x80
 80041be:	0049      	lsls	r1, r1, #1
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c4:	f7fc fca0 	bl	8000b08 <HAL_GetTick>
 80041c8:	0003      	movs	r3, r0
 80041ca:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	e008      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fc fc9b 	bl	8000b08 <HAL_GetTick>
 80041d2:	0002      	movs	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b64      	cmp	r3, #100	; 0x64
 80041da:	d901      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e118      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	4b8f      	ldr	r3, [pc, #572]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4013      	ands	r3, r2
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80041ec:	4b8b      	ldr	r3, [pc, #556]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	23c0      	movs	r3, #192	; 0xc0
 80041f2:	039b      	lsls	r3, r3, #14
 80041f4:	4013      	ands	r3, r2
 80041f6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	23c0      	movs	r3, #192	; 0xc0
 80041fe:	039b      	lsls	r3, r3, #14
 8004200:	4013      	ands	r3, r2
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	429a      	cmp	r2, r3
 8004206:	d107      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	23c0      	movs	r3, #192	; 0xc0
 800420e:	039b      	lsls	r3, r3, #14
 8004210:	4013      	ands	r3, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	429a      	cmp	r2, r3
 8004216:	d013      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	23c0      	movs	r3, #192	; 0xc0
 800421e:	029b      	lsls	r3, r3, #10
 8004220:	401a      	ands	r2, r3
 8004222:	23c0      	movs	r3, #192	; 0xc0
 8004224:	029b      	lsls	r3, r3, #10
 8004226:	429a      	cmp	r2, r3
 8004228:	d10a      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800422a:	4b7c      	ldr	r3, [pc, #496]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	2380      	movs	r3, #128	; 0x80
 8004230:	029b      	lsls	r3, r3, #10
 8004232:	401a      	ands	r2, r3
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	029b      	lsls	r3, r3, #10
 8004238:	429a      	cmp	r2, r3
 800423a:	d101      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0e8      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004240:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004242:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004244:	23c0      	movs	r3, #192	; 0xc0
 8004246:	029b      	lsls	r3, r3, #10
 8004248:	4013      	ands	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d049      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	23c0      	movs	r3, #192	; 0xc0
 8004258:	029b      	lsls	r3, r3, #10
 800425a:	4013      	ands	r3, r2
 800425c:	68fa      	ldr	r2, [r7, #12]
 800425e:	429a      	cmp	r2, r3
 8004260:	d004      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2220      	movs	r2, #32
 8004268:	4013      	ands	r3, r2
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	23c0      	movs	r3, #192	; 0xc0
 8004272:	029b      	lsls	r3, r3, #10
 8004274:	4013      	ands	r3, r2
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	429a      	cmp	r2, r3
 800427a:	d034      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	4013      	ands	r3, r2
 8004286:	d02e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004288:	4b64      	ldr	r3, [pc, #400]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800428a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800428c:	4a65      	ldr	r2, [pc, #404]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800428e:	4013      	ands	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004292:	4b62      	ldr	r3, [pc, #392]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004296:	4b61      	ldr	r3, [pc, #388]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004298:	2180      	movs	r1, #128	; 0x80
 800429a:	0309      	lsls	r1, r1, #12
 800429c:	430a      	orrs	r2, r1
 800429e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a0:	4b5e      	ldr	r3, [pc, #376]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042a4:	4b5d      	ldr	r3, [pc, #372]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042a6:	4960      	ldr	r1, [pc, #384]	; (8004428 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80042ac:	4b5b      	ldr	r3, [pc, #364]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	005b      	lsls	r3, r3, #1
 80042b8:	4013      	ands	r3, r2
 80042ba:	d014      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042bc:	f7fc fc24 	bl	8000b08 <HAL_GetTick>
 80042c0:	0003      	movs	r3, r0
 80042c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042c4:	e009      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042c6:	f7fc fc1f 	bl	8000b08 <HAL_GetTick>
 80042ca:	0002      	movs	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	4a56      	ldr	r2, [pc, #344]	; (800442c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e09b      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042da:	4b50      	ldr	r3, [pc, #320]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80042de:	2380      	movs	r3, #128	; 0x80
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4013      	ands	r3, r2
 80042e4:	d0ef      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	401a      	ands	r2, r3
 80042f0:	23c0      	movs	r3, #192	; 0xc0
 80042f2:	029b      	lsls	r3, r3, #10
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d10c      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a4c      	ldr	r2, [pc, #304]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	23c0      	movs	r3, #192	; 0xc0
 8004308:	039b      	lsls	r3, r3, #14
 800430a:	401a      	ands	r2, r3
 800430c:	4b43      	ldr	r3, [pc, #268]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800430e:	430a      	orrs	r2, r1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	4b42      	ldr	r3, [pc, #264]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004314:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	23c0      	movs	r3, #192	; 0xc0
 800431c:	029b      	lsls	r3, r3, #10
 800431e:	401a      	ands	r2, r3
 8004320:	4b3e      	ldr	r3, [pc, #248]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004322:	430a      	orrs	r2, r1
 8004324:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004326:	2317      	movs	r3, #23
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d105      	bne.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004330:	4b3a      	ldr	r3, [pc, #232]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004336:	493f      	ldr	r1, [pc, #252]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004338:	400a      	ands	r2, r1
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004346:	4b35      	ldr	r3, [pc, #212]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800434a:	2203      	movs	r2, #3
 800434c:	4393      	bics	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	4b31      	ldr	r3, [pc, #196]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004356:	430a      	orrs	r2, r1
 8004358:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2202      	movs	r2, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d009      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004364:	4b2d      	ldr	r3, [pc, #180]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004368:	220c      	movs	r2, #12
 800436a:	4393      	bics	r3, r2
 800436c:	0019      	movs	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691a      	ldr	r2, [r3, #16]
 8004372:	4b2a      	ldr	r3, [pc, #168]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004374:	430a      	orrs	r2, r1
 8004376:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2204      	movs	r2, #4
 800437e:	4013      	ands	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004382:	4b26      	ldr	r3, [pc, #152]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004388:	4013      	ands	r3, r2
 800438a:	0019      	movs	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	4b22      	ldr	r3, [pc, #136]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8004392:	430a      	orrs	r2, r1
 8004394:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2208      	movs	r2, #8
 800439c:	4013      	ands	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043a0:	4b1e      	ldr	r3, [pc, #120]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a4:	4a25      	ldr	r2, [pc, #148]	; (800443c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	0019      	movs	r1, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	4b1b      	ldr	r3, [pc, #108]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043b0:	430a      	orrs	r2, r1
 80043b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	2380      	movs	r3, #128	; 0x80
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4013      	ands	r3, r2
 80043be:	d009      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	4a17      	ldr	r2, [pc, #92]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	0019      	movs	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	4b13      	ldr	r3, [pc, #76]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043d0:	430a      	orrs	r2, r1
 80043d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2240      	movs	r2, #64	; 0x40
 80043da:	4013      	ands	r3, r2
 80043dc:	d009      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043de:	4b0f      	ldr	r3, [pc, #60]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	0019      	movs	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043ec:	4b0b      	ldr	r3, [pc, #44]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043ee:	430a      	orrs	r2, r1
 80043f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2280      	movs	r2, #128	; 0x80
 80043f8:	4013      	ands	r3, r2
 80043fa:	d009      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80043fc:	4b07      	ldr	r3, [pc, #28]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80043fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004400:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004402:	4013      	ands	r3, r2
 8004404:	0019      	movs	r1, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a1a      	ldr	r2, [r3, #32]
 800440a:	4b04      	ldr	r3, [pc, #16]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800440c:	430a      	orrs	r2, r1
 800440e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	0018      	movs	r0, r3
 8004414:	46bd      	mov	sp, r7
 8004416:	b006      	add	sp, #24
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	fffcffff 	.word	0xfffcffff
 8004428:	fff7ffff 	.word	0xfff7ffff
 800442c:	00001388 	.word	0x00001388
 8004430:	ffcfffff 	.word	0xffcfffff
 8004434:	efffffff 	.word	0xefffffff
 8004438:	fffff3ff 	.word	0xfffff3ff
 800443c:	ffffcfff 	.word	0xffffcfff
 8004440:	fbffffff 	.word	0xfbffffff
 8004444:	fff3ffff 	.word	0xfff3ffff

08004448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2244      	movs	r2, #68	; 0x44
 8004454:	2100      	movs	r1, #0
 8004456:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004458:	4b05      	ldr	r3, [pc, #20]	; (8004470 <USB_EnableGlobalInt+0x28>)
 800445a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	b299      	uxth	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	0018      	movs	r0, r3
 800446a:	46bd      	mov	sp, r7
 800446c:	b004      	add	sp, #16
 800446e:	bd80      	pop	{r7, pc}
 8004470:	0000bf80 	.word	0x0000bf80

08004474 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <USB_DisableGlobalInt+0x30>)
 800447e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2240      	movs	r2, #64	; 0x40
 8004484:	5a9b      	ldrh	r3, [r3, r2]
 8004486:	b29b      	uxth	r3, r3
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	b292      	uxth	r2, r2
 800448c:	43d2      	mvns	r2, r2
 800448e:	b292      	uxth	r2, r2
 8004490:	4013      	ands	r3, r2
 8004492:	b299      	uxth	r1, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2240      	movs	r2, #64	; 0x40
 8004498:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	0018      	movs	r0, r3
 800449e:	46bd      	mov	sp, r7
 80044a0:	b004      	add	sp, #16
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	0000bf80 	.word	0x0000bf80

080044a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80044a8:	b084      	sub	sp, #16
 80044aa:	b590      	push	{r4, r7, lr}
 80044ac:	46c6      	mov	lr, r8
 80044ae:	b500      	push	{lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
 80044b6:	2004      	movs	r0, #4
 80044b8:	2410      	movs	r4, #16
 80044ba:	46a4      	mov	ip, r4
 80044bc:	2408      	movs	r4, #8
 80044be:	46a0      	mov	r8, r4
 80044c0:	44b8      	add	r8, r7
 80044c2:	44c4      	add	ip, r8
 80044c4:	4460      	add	r0, ip
 80044c6:	6001      	str	r1, [r0, #0]
 80044c8:	6042      	str	r2, [r0, #4]
 80044ca:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2240      	movs	r2, #64	; 0x40
 80044d0:	2101      	movs	r1, #1
 80044d2:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2240      	movs	r2, #64	; 0x40
 80044d8:	2100      	movs	r1, #0
 80044da:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2244      	movs	r2, #68	; 0x44
 80044e0:	2100      	movs	r1, #0
 80044e2:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2250      	movs	r2, #80	; 0x50
 80044e8:	2100      	movs	r1, #0
 80044ea:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	0018      	movs	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bc80      	pop	{r7}
 80044f6:	46b8      	mov	r8, r7
 80044f8:	bc90      	pop	{r4, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	b004      	add	sp, #16
 80044fe:	4718      	bx	r3

08004500 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b09c      	sub	sp, #112	; 0x70
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800450a:	236f      	movs	r3, #111	; 0x6f
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29a      	uxth	r2, r3
 8004520:	236c      	movs	r3, #108	; 0x6c
 8004522:	18fb      	adds	r3, r7, r3
 8004524:	49cf      	ldr	r1, [pc, #828]	; (8004864 <USB_ActivateEndpoint+0x364>)
 8004526:	400a      	ands	r2, r1
 8004528:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	78db      	ldrb	r3, [r3, #3]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d017      	beq.n	8004562 <USB_ActivateEndpoint+0x62>
 8004532:	dc28      	bgt.n	8004586 <USB_ActivateEndpoint+0x86>
 8004534:	2b02      	cmp	r3, #2
 8004536:	d00e      	beq.n	8004556 <USB_ActivateEndpoint+0x56>
 8004538:	dc25      	bgt.n	8004586 <USB_ActivateEndpoint+0x86>
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <USB_ActivateEndpoint+0x44>
 800453e:	2b01      	cmp	r3, #1
 8004540:	d018      	beq.n	8004574 <USB_ActivateEndpoint+0x74>
 8004542:	e020      	b.n	8004586 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004544:	226c      	movs	r2, #108	; 0x6c
 8004546:	18bb      	adds	r3, r7, r2
 8004548:	18ba      	adds	r2, r7, r2
 800454a:	8812      	ldrh	r2, [r2, #0]
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	0089      	lsls	r1, r1, #2
 8004550:	430a      	orrs	r2, r1
 8004552:	801a      	strh	r2, [r3, #0]
      break;
 8004554:	e01c      	b.n	8004590 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 8004556:	226c      	movs	r2, #108	; 0x6c
 8004558:	18bb      	adds	r3, r7, r2
 800455a:	18ba      	adds	r2, r7, r2
 800455c:	8812      	ldrh	r2, [r2, #0]
 800455e:	801a      	strh	r2, [r3, #0]
      break;
 8004560:	e016      	b.n	8004590 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004562:	226c      	movs	r2, #108	; 0x6c
 8004564:	18bb      	adds	r3, r7, r2
 8004566:	18ba      	adds	r2, r7, r2
 8004568:	8812      	ldrh	r2, [r2, #0]
 800456a:	21c0      	movs	r1, #192	; 0xc0
 800456c:	00c9      	lsls	r1, r1, #3
 800456e:	430a      	orrs	r2, r1
 8004570:	801a      	strh	r2, [r3, #0]
      break;
 8004572:	e00d      	b.n	8004590 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004574:	226c      	movs	r2, #108	; 0x6c
 8004576:	18bb      	adds	r3, r7, r2
 8004578:	18ba      	adds	r2, r7, r2
 800457a:	8812      	ldrh	r2, [r2, #0]
 800457c:	2180      	movs	r1, #128	; 0x80
 800457e:	00c9      	lsls	r1, r1, #3
 8004580:	430a      	orrs	r2, r1
 8004582:	801a      	strh	r2, [r3, #0]
      break;
 8004584:	e004      	b.n	8004590 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 8004586:	236f      	movs	r3, #111	; 0x6f
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	2201      	movs	r2, #1
 800458c:	701a      	strb	r2, [r3, #0]
      break;
 800458e:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	18d3      	adds	r3, r2, r3
 800459a:	226c      	movs	r2, #108	; 0x6c
 800459c:	18ba      	adds	r2, r7, r2
 800459e:	8812      	ldrh	r2, [r2, #0]
 80045a0:	49b1      	ldr	r1, [pc, #708]	; (8004868 <USB_ActivateEndpoint+0x368>)
 80045a2:	430a      	orrs	r2, r1
 80045a4:	b292      	uxth	r2, r2
 80045a6:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	b21b      	sxth	r3, r3
 80045b8:	4aac      	ldr	r2, [pc, #688]	; (800486c <USB_ActivateEndpoint+0x36c>)
 80045ba:	4013      	ands	r3, r2
 80045bc:	b21a      	sxth	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b21b      	sxth	r3, r3
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b21a      	sxth	r2, r3
 80045c8:	2166      	movs	r1, #102	; 0x66
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	801a      	strh	r2, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	18d3      	adds	r3, r2, r3
 80045d8:	187a      	adds	r2, r7, r1
 80045da:	8812      	ldrh	r2, [r2, #0]
 80045dc:	49a2      	ldr	r1, [pc, #648]	; (8004868 <USB_ActivateEndpoint+0x368>)
 80045de:	430a      	orrs	r2, r1
 80045e0:	b292      	uxth	r2, r2
 80045e2:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	7b1b      	ldrb	r3, [r3, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d000      	beq.n	80045ee <USB_ActivateEndpoint+0xee>
 80045ec:	e150      	b.n	8004890 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	785b      	ldrb	r3, [r3, #1]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d100      	bne.n	80045f8 <USB_ActivateEndpoint+0xf8>
 80045f6:	e07a      	b.n	80046ee <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	61bb      	str	r3, [r7, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2250      	movs	r2, #80	; 0x50
 8004600:	5a9b      	ldrh	r3, [r3, r2]
 8004602:	b29b      	uxth	r3, r3
 8004604:	001a      	movs	r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	189b      	adds	r3, r3, r2
 800460a:	61bb      	str	r3, [r7, #24]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	00da      	lsls	r2, r3, #3
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	18d3      	adds	r3, r2, r3
 8004616:	2280      	movs	r2, #128	; 0x80
 8004618:	00d2      	lsls	r2, r2, #3
 800461a:	4694      	mov	ip, r2
 800461c:	4463      	add	r3, ip
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	88db      	ldrh	r3, [r3, #6]
 8004624:	085b      	lsrs	r3, r3, #1
 8004626:	b29b      	uxth	r3, r3
 8004628:	18db      	adds	r3, r3, r3
 800462a:	b29a      	uxth	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	18d2      	adds	r2, r2, r3
 800463a:	2112      	movs	r1, #18
 800463c:	187b      	adds	r3, r7, r1
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	801a      	strh	r2, [r3, #0]
 8004642:	187b      	adds	r3, r7, r1
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	2240      	movs	r2, #64	; 0x40
 8004648:	4013      	ands	r3, r2
 800464a:	d016      	beq.n	800467a <USB_ActivateEndpoint+0x17a>
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	18d3      	adds	r3, r2, r3
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29a      	uxth	r2, r3
 800465a:	2010      	movs	r0, #16
 800465c:	183b      	adds	r3, r7, r0
 800465e:	4983      	ldr	r1, [pc, #524]	; (800486c <USB_ActivateEndpoint+0x36c>)
 8004660:	400a      	ands	r2, r1
 8004662:	801a      	strh	r2, [r3, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	18d3      	adds	r3, r2, r3
 800466e:	183a      	adds	r2, r7, r0
 8004670:	8812      	ldrh	r2, [r2, #0]
 8004672:	497f      	ldr	r1, [pc, #508]	; (8004870 <USB_ActivateEndpoint+0x370>)
 8004674:	430a      	orrs	r2, r1
 8004676:	b292      	uxth	r2, r2
 8004678:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	78db      	ldrb	r3, [r3, #3]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d01d      	beq.n	80046be <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	18d3      	adds	r3, r2, r3
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	b29a      	uxth	r2, r3
 8004690:	200c      	movs	r0, #12
 8004692:	183b      	adds	r3, r7, r0
 8004694:	4977      	ldr	r1, [pc, #476]	; (8004874 <USB_ActivateEndpoint+0x374>)
 8004696:	400a      	ands	r2, r1
 8004698:	801a      	strh	r2, [r3, #0]
 800469a:	183b      	adds	r3, r7, r0
 800469c:	183a      	adds	r2, r7, r0
 800469e:	8812      	ldrh	r2, [r2, #0]
 80046a0:	2120      	movs	r1, #32
 80046a2:	404a      	eors	r2, r1
 80046a4:	801a      	strh	r2, [r3, #0]
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	18d3      	adds	r3, r2, r3
 80046b0:	183a      	adds	r2, r7, r0
 80046b2:	8812      	ldrh	r2, [r2, #0]
 80046b4:	496c      	ldr	r1, [pc, #432]	; (8004868 <USB_ActivateEndpoint+0x368>)
 80046b6:	430a      	orrs	r2, r1
 80046b8:	b292      	uxth	r2, r2
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	e27a      	b.n	8004bb4 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	18d3      	adds	r3, r2, r3
 80046c8:	881b      	ldrh	r3, [r3, #0]
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	200e      	movs	r0, #14
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	4968      	ldr	r1, [pc, #416]	; (8004874 <USB_ActivateEndpoint+0x374>)
 80046d2:	400a      	ands	r2, r1
 80046d4:	801a      	strh	r2, [r3, #0]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	18d3      	adds	r3, r2, r3
 80046e0:	183a      	adds	r2, r7, r0
 80046e2:	8812      	ldrh	r2, [r2, #0]
 80046e4:	4960      	ldr	r1, [pc, #384]	; (8004868 <USB_ActivateEndpoint+0x368>)
 80046e6:	430a      	orrs	r2, r1
 80046e8:	b292      	uxth	r2, r2
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	e262      	b.n	8004bb4 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2250      	movs	r2, #80	; 0x50
 80046f6:	5a9b      	ldrh	r3, [r3, r2]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	001a      	movs	r2, r3
 80046fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	633b      	str	r3, [r7, #48]	; 0x30
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	00da      	lsls	r2, r3, #3
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	18d3      	adds	r3, r2, r3
 800470c:	4a5a      	ldr	r2, [pc, #360]	; (8004878 <USB_ActivateEndpoint+0x378>)
 800470e:	4694      	mov	ip, r2
 8004710:	4463      	add	r3, ip
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	88db      	ldrh	r3, [r3, #6]
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	b29b      	uxth	r3, r3
 800471c:	18db      	adds	r3, r3, r3
 800471e:	b29a      	uxth	r2, r3
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	62bb      	str	r3, [r7, #40]	; 0x28
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2250      	movs	r2, #80	; 0x50
 800472c:	5a9b      	ldrh	r3, [r3, r2]
 800472e:	b29b      	uxth	r3, r3
 8004730:	001a      	movs	r2, r3
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	189b      	adds	r3, r3, r2
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	00da      	lsls	r2, r3, #3
 800473e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004740:	18d3      	adds	r3, r2, r3
 8004742:	4a4e      	ldr	r2, [pc, #312]	; (800487c <USB_ActivateEndpoint+0x37c>)
 8004744:	4694      	mov	ip, r2
 8004746:	4463      	add	r3, ip
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d110      	bne.n	8004774 <USB_ActivateEndpoint+0x274>
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	b29b      	uxth	r3, r3
 8004758:	4a49      	ldr	r2, [pc, #292]	; (8004880 <USB_ActivateEndpoint+0x380>)
 800475a:	4013      	ands	r3, r2
 800475c:	b29a      	uxth	r2, r3
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	4a46      	ldr	r2, [pc, #280]	; (8004884 <USB_ActivateEndpoint+0x384>)
 800476a:	4313      	orrs	r3, r2
 800476c:	b29a      	uxth	r2, r3
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	801a      	strh	r2, [r3, #0]
 8004772:	e02b      	b.n	80047cc <USB_ActivateEndpoint+0x2cc>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b3e      	cmp	r3, #62	; 0x3e
 800477a:	d812      	bhi.n	80047a2 <USB_ActivateEndpoint+0x2a2>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	085b      	lsrs	r3, r3, #1
 8004782:	66bb      	str	r3, [r7, #104]	; 0x68
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2201      	movs	r2, #1
 800478a:	4013      	ands	r3, r2
 800478c:	d002      	beq.n	8004794 <USB_ActivateEndpoint+0x294>
 800478e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004790:	3301      	adds	r3, #1
 8004792:	66bb      	str	r3, [r7, #104]	; 0x68
 8004794:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004796:	b29b      	uxth	r3, r3
 8004798:	029b      	lsls	r3, r3, #10
 800479a:	b29a      	uxth	r2, r3
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	e014      	b.n	80047cc <USB_ActivateEndpoint+0x2cc>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	221f      	movs	r2, #31
 80047b0:	4013      	ands	r3, r2
 80047b2:	d102      	bne.n	80047ba <USB_ActivateEndpoint+0x2ba>
 80047b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b6:	3b01      	subs	r3, #1
 80047b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047bc:	b29b      	uxth	r3, r3
 80047be:	029b      	lsls	r3, r3, #10
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	4a30      	ldr	r2, [pc, #192]	; (8004884 <USB_ActivateEndpoint+0x384>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ca:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	18d2      	adds	r2, r2, r3
 80047d6:	2122      	movs	r1, #34	; 0x22
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	187b      	adds	r3, r7, r1
 80047e0:	881a      	ldrh	r2, [r3, #0]
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	01db      	lsls	r3, r3, #7
 80047e6:	4013      	ands	r3, r2
 80047e8:	d016      	beq.n	8004818 <USB_ActivateEndpoint+0x318>
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	18d3      	adds	r3, r2, r3
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	2020      	movs	r0, #32
 80047fa:	183b      	adds	r3, r7, r0
 80047fc:	491b      	ldr	r1, [pc, #108]	; (800486c <USB_ActivateEndpoint+0x36c>)
 80047fe:	400a      	ands	r2, r1
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	18d3      	adds	r3, r2, r3
 800480c:	183a      	adds	r2, r7, r0
 800480e:	8812      	ldrh	r2, [r2, #0]
 8004810:	491d      	ldr	r1, [pc, #116]	; (8004888 <USB_ActivateEndpoint+0x388>)
 8004812:	430a      	orrs	r2, r1
 8004814:	b292      	uxth	r2, r2
 8004816:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	18d3      	adds	r3, r2, r3
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	b29a      	uxth	r2, r3
 8004826:	201e      	movs	r0, #30
 8004828:	183b      	adds	r3, r7, r0
 800482a:	4918      	ldr	r1, [pc, #96]	; (800488c <USB_ActivateEndpoint+0x38c>)
 800482c:	400a      	ands	r2, r1
 800482e:	801a      	strh	r2, [r3, #0]
 8004830:	183b      	adds	r3, r7, r0
 8004832:	183a      	adds	r2, r7, r0
 8004834:	8812      	ldrh	r2, [r2, #0]
 8004836:	2180      	movs	r1, #128	; 0x80
 8004838:	0149      	lsls	r1, r1, #5
 800483a:	404a      	eors	r2, r1
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	183b      	adds	r3, r7, r0
 8004840:	183a      	adds	r2, r7, r0
 8004842:	8812      	ldrh	r2, [r2, #0]
 8004844:	2180      	movs	r1, #128	; 0x80
 8004846:	0189      	lsls	r1, r1, #6
 8004848:	404a      	eors	r2, r1
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	18d3      	adds	r3, r2, r3
 8004856:	183a      	adds	r2, r7, r0
 8004858:	8812      	ldrh	r2, [r2, #0]
 800485a:	4903      	ldr	r1, [pc, #12]	; (8004868 <USB_ActivateEndpoint+0x368>)
 800485c:	430a      	orrs	r2, r1
 800485e:	b292      	uxth	r2, r2
 8004860:	801a      	strh	r2, [r3, #0]
 8004862:	e1a7      	b.n	8004bb4 <USB_ActivateEndpoint+0x6b4>
 8004864:	ffff898f 	.word	0xffff898f
 8004868:	ffff8080 	.word	0xffff8080
 800486c:	ffff8f8f 	.word	0xffff8f8f
 8004870:	ffff80c0 	.word	0xffff80c0
 8004874:	ffff8fbf 	.word	0xffff8fbf
 8004878:	00000404 	.word	0x00000404
 800487c:	00000406 	.word	0x00000406
 8004880:	ffff83ff 	.word	0xffff83ff
 8004884:	ffff8000 	.word	0xffff8000
 8004888:	ffffc080 	.word	0xffffc080
 800488c:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	78db      	ldrb	r3, [r3, #3]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d117      	bne.n	80048c8 <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	18d3      	adds	r3, r2, r3
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	2062      	movs	r0, #98	; 0x62
 80048a8:	183b      	adds	r3, r7, r0
 80048aa:	49c6      	ldr	r1, [pc, #792]	; (8004bc4 <USB_ActivateEndpoint+0x6c4>)
 80048ac:	400a      	ands	r2, r1
 80048ae:	801a      	strh	r2, [r3, #0]
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	18d3      	adds	r3, r2, r3
 80048ba:	183a      	adds	r2, r7, r0
 80048bc:	8812      	ldrh	r2, [r2, #0]
 80048be:	49c2      	ldr	r1, [pc, #776]	; (8004bc8 <USB_ActivateEndpoint+0x6c8>)
 80048c0:	430a      	orrs	r2, r1
 80048c2:	b292      	uxth	r2, r2
 80048c4:	801a      	strh	r2, [r3, #0]
 80048c6:	e016      	b.n	80048f6 <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	18d3      	adds	r3, r2, r3
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	2064      	movs	r0, #100	; 0x64
 80048d8:	183b      	adds	r3, r7, r0
 80048da:	49bc      	ldr	r1, [pc, #752]	; (8004bcc <USB_ActivateEndpoint+0x6cc>)
 80048dc:	400a      	ands	r2, r1
 80048de:	801a      	strh	r2, [r3, #0]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	18d3      	adds	r3, r2, r3
 80048ea:	183a      	adds	r2, r7, r0
 80048ec:	8812      	ldrh	r2, [r2, #0]
 80048ee:	49b8      	ldr	r1, [pc, #736]	; (8004bd0 <USB_ActivateEndpoint+0x6d0>)
 80048f0:	430a      	orrs	r2, r1
 80048f2:	b292      	uxth	r2, r2
 80048f4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2250      	movs	r2, #80	; 0x50
 80048fe:	5a9b      	ldrh	r3, [r3, r2]
 8004900:	b29b      	uxth	r3, r3
 8004902:	001a      	movs	r2, r3
 8004904:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004906:	189b      	adds	r3, r3, r2
 8004908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	00da      	lsls	r2, r3, #3
 8004910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004912:	18d3      	adds	r3, r2, r3
 8004914:	2280      	movs	r2, #128	; 0x80
 8004916:	00d2      	lsls	r2, r2, #3
 8004918:	4694      	mov	ip, r2
 800491a:	4463      	add	r3, ip
 800491c:	65bb      	str	r3, [r7, #88]	; 0x58
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	891b      	ldrh	r3, [r3, #8]
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	b29b      	uxth	r3, r3
 8004926:	18db      	adds	r3, r3, r3
 8004928:	b29a      	uxth	r2, r3
 800492a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	657b      	str	r3, [r7, #84]	; 0x54
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2250      	movs	r2, #80	; 0x50
 8004936:	5a9b      	ldrh	r3, [r3, r2]
 8004938:	b29b      	uxth	r3, r3
 800493a:	001a      	movs	r2, r3
 800493c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800493e:	189b      	adds	r3, r3, r2
 8004940:	657b      	str	r3, [r7, #84]	; 0x54
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	00da      	lsls	r2, r3, #3
 8004948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800494a:	18d3      	adds	r3, r2, r3
 800494c:	4aa1      	ldr	r2, [pc, #644]	; (8004bd4 <USB_ActivateEndpoint+0x6d4>)
 800494e:	4694      	mov	ip, r2
 8004950:	4463      	add	r3, ip
 8004952:	653b      	str	r3, [r7, #80]	; 0x50
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	895b      	ldrh	r3, [r3, #10]
 8004958:	085b      	lsrs	r3, r3, #1
 800495a:	b29b      	uxth	r3, r3
 800495c:	18db      	adds	r3, r3, r3
 800495e:	b29a      	uxth	r2, r3
 8004960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004962:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d000      	beq.n	800496e <USB_ActivateEndpoint+0x46e>
 800496c:	e087      	b.n	8004a7e <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	18d2      	adds	r2, r2, r3
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	187b      	adds	r3, r7, r1
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	801a      	strh	r2, [r3, #0]
 8004980:	187b      	adds	r3, r7, r1
 8004982:	881a      	ldrh	r2, [r3, #0]
 8004984:	2380      	movs	r3, #128	; 0x80
 8004986:	01db      	lsls	r3, r3, #7
 8004988:	4013      	ands	r3, r2
 800498a:	d016      	beq.n	80049ba <USB_ActivateEndpoint+0x4ba>
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	18d3      	adds	r3, r2, r3
 8004996:	881b      	ldrh	r3, [r3, #0]
 8004998:	b29a      	uxth	r2, r3
 800499a:	203e      	movs	r0, #62	; 0x3e
 800499c:	183b      	adds	r3, r7, r0
 800499e:	4989      	ldr	r1, [pc, #548]	; (8004bc4 <USB_ActivateEndpoint+0x6c4>)
 80049a0:	400a      	ands	r2, r1
 80049a2:	801a      	strh	r2, [r3, #0]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	18d3      	adds	r3, r2, r3
 80049ae:	183a      	adds	r2, r7, r0
 80049b0:	8812      	ldrh	r2, [r2, #0]
 80049b2:	4989      	ldr	r1, [pc, #548]	; (8004bd8 <USB_ActivateEndpoint+0x6d8>)
 80049b4:	430a      	orrs	r2, r1
 80049b6:	b292      	uxth	r2, r2
 80049b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	18d2      	adds	r2, r2, r3
 80049c4:	213c      	movs	r1, #60	; 0x3c
 80049c6:	187b      	adds	r3, r7, r1
 80049c8:	8812      	ldrh	r2, [r2, #0]
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	187b      	adds	r3, r7, r1
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	2240      	movs	r2, #64	; 0x40
 80049d2:	4013      	ands	r3, r2
 80049d4:	d016      	beq.n	8004a04 <USB_ActivateEndpoint+0x504>
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	18d3      	adds	r3, r2, r3
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	203a      	movs	r0, #58	; 0x3a
 80049e6:	183b      	adds	r3, r7, r0
 80049e8:	4976      	ldr	r1, [pc, #472]	; (8004bc4 <USB_ActivateEndpoint+0x6c4>)
 80049ea:	400a      	ands	r2, r1
 80049ec:	801a      	strh	r2, [r3, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	18d3      	adds	r3, r2, r3
 80049f8:	183a      	adds	r2, r7, r0
 80049fa:	8812      	ldrh	r2, [r2, #0]
 80049fc:	4977      	ldr	r1, [pc, #476]	; (8004bdc <USB_ActivateEndpoint+0x6dc>)
 80049fe:	430a      	orrs	r2, r1
 8004a00:	b292      	uxth	r2, r2
 8004a02:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	18d3      	adds	r3, r2, r3
 8004a0e:	881b      	ldrh	r3, [r3, #0]
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	2038      	movs	r0, #56	; 0x38
 8004a14:	183b      	adds	r3, r7, r0
 8004a16:	4972      	ldr	r1, [pc, #456]	; (8004be0 <USB_ActivateEndpoint+0x6e0>)
 8004a18:	400a      	ands	r2, r1
 8004a1a:	801a      	strh	r2, [r3, #0]
 8004a1c:	183b      	adds	r3, r7, r0
 8004a1e:	183a      	adds	r2, r7, r0
 8004a20:	8812      	ldrh	r2, [r2, #0]
 8004a22:	2180      	movs	r1, #128	; 0x80
 8004a24:	0149      	lsls	r1, r1, #5
 8004a26:	404a      	eors	r2, r1
 8004a28:	801a      	strh	r2, [r3, #0]
 8004a2a:	183b      	adds	r3, r7, r0
 8004a2c:	183a      	adds	r2, r7, r0
 8004a2e:	8812      	ldrh	r2, [r2, #0]
 8004a30:	2180      	movs	r1, #128	; 0x80
 8004a32:	0189      	lsls	r1, r1, #6
 8004a34:	404a      	eors	r2, r1
 8004a36:	801a      	strh	r2, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	18d3      	adds	r3, r2, r3
 8004a42:	183a      	adds	r2, r7, r0
 8004a44:	8812      	ldrh	r2, [r2, #0]
 8004a46:	4962      	ldr	r1, [pc, #392]	; (8004bd0 <USB_ActivateEndpoint+0x6d0>)
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	18d3      	adds	r3, r2, r3
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	2036      	movs	r0, #54	; 0x36
 8004a5e:	183b      	adds	r3, r7, r0
 8004a60:	4960      	ldr	r1, [pc, #384]	; (8004be4 <USB_ActivateEndpoint+0x6e4>)
 8004a62:	400a      	ands	r2, r1
 8004a64:	801a      	strh	r2, [r3, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18d3      	adds	r3, r2, r3
 8004a70:	183a      	adds	r2, r7, r0
 8004a72:	8812      	ldrh	r2, [r2, #0]
 8004a74:	4956      	ldr	r1, [pc, #344]	; (8004bd0 <USB_ActivateEndpoint+0x6d0>)
 8004a76:	430a      	orrs	r2, r1
 8004a78:	b292      	uxth	r2, r2
 8004a7a:	801a      	strh	r2, [r3, #0]
 8004a7c:	e09a      	b.n	8004bb4 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	18d2      	adds	r2, r2, r3
 8004a88:	214e      	movs	r1, #78	; 0x4e
 8004a8a:	187b      	adds	r3, r7, r1
 8004a8c:	8812      	ldrh	r2, [r2, #0]
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	881a      	ldrh	r2, [r3, #0]
 8004a94:	2380      	movs	r3, #128	; 0x80
 8004a96:	01db      	lsls	r3, r3, #7
 8004a98:	4013      	ands	r3, r2
 8004a9a:	d016      	beq.n	8004aca <USB_ActivateEndpoint+0x5ca>
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	18d3      	adds	r3, r2, r3
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	204c      	movs	r0, #76	; 0x4c
 8004aac:	183b      	adds	r3, r7, r0
 8004aae:	4945      	ldr	r1, [pc, #276]	; (8004bc4 <USB_ActivateEndpoint+0x6c4>)
 8004ab0:	400a      	ands	r2, r1
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	18d3      	adds	r3, r2, r3
 8004abe:	183a      	adds	r2, r7, r0
 8004ac0:	8812      	ldrh	r2, [r2, #0]
 8004ac2:	4945      	ldr	r1, [pc, #276]	; (8004bd8 <USB_ActivateEndpoint+0x6d8>)
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	b292      	uxth	r2, r2
 8004ac8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	18d2      	adds	r2, r2, r3
 8004ad4:	214a      	movs	r1, #74	; 0x4a
 8004ad6:	187b      	adds	r3, r7, r1
 8004ad8:	8812      	ldrh	r2, [r2, #0]
 8004ada:	801a      	strh	r2, [r3, #0]
 8004adc:	187b      	adds	r3, r7, r1
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	2240      	movs	r2, #64	; 0x40
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d016      	beq.n	8004b14 <USB_ActivateEndpoint+0x614>
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	18d3      	adds	r3, r2, r3
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	2048      	movs	r0, #72	; 0x48
 8004af6:	183b      	adds	r3, r7, r0
 8004af8:	4932      	ldr	r1, [pc, #200]	; (8004bc4 <USB_ActivateEndpoint+0x6c4>)
 8004afa:	400a      	ands	r2, r1
 8004afc:	801a      	strh	r2, [r3, #0]
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	18d3      	adds	r3, r2, r3
 8004b08:	183a      	adds	r2, r7, r0
 8004b0a:	8812      	ldrh	r2, [r2, #0]
 8004b0c:	4933      	ldr	r1, [pc, #204]	; (8004bdc <USB_ActivateEndpoint+0x6dc>)
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	b292      	uxth	r2, r2
 8004b12:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	78db      	ldrb	r3, [r3, #3]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d01d      	beq.n	8004b58 <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	18d3      	adds	r3, r2, r3
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	2044      	movs	r0, #68	; 0x44
 8004b2c:	183b      	adds	r3, r7, r0
 8004b2e:	492d      	ldr	r1, [pc, #180]	; (8004be4 <USB_ActivateEndpoint+0x6e4>)
 8004b30:	400a      	ands	r2, r1
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	183b      	adds	r3, r7, r0
 8004b36:	183a      	adds	r2, r7, r0
 8004b38:	8812      	ldrh	r2, [r2, #0]
 8004b3a:	2120      	movs	r1, #32
 8004b3c:	404a      	eors	r2, r1
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	18d3      	adds	r3, r2, r3
 8004b4a:	183a      	adds	r2, r7, r0
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	4920      	ldr	r1, [pc, #128]	; (8004bd0 <USB_ActivateEndpoint+0x6d0>)
 8004b50:	430a      	orrs	r2, r1
 8004b52:	b292      	uxth	r2, r2
 8004b54:	801a      	strh	r2, [r3, #0]
 8004b56:	e016      	b.n	8004b86 <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	2046      	movs	r0, #70	; 0x46
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	491e      	ldr	r1, [pc, #120]	; (8004be4 <USB_ActivateEndpoint+0x6e4>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	18d3      	adds	r3, r2, r3
 8004b7a:	183a      	adds	r2, r7, r0
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	4914      	ldr	r1, [pc, #80]	; (8004bd0 <USB_ActivateEndpoint+0x6d0>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	b292      	uxth	r2, r2
 8004b84:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	18d3      	adds	r3, r2, r3
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	2042      	movs	r0, #66	; 0x42
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	4911      	ldr	r1, [pc, #68]	; (8004be0 <USB_ActivateEndpoint+0x6e0>)
 8004b9a:	400a      	ands	r2, r1
 8004b9c:	801a      	strh	r2, [r3, #0]
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	18d3      	adds	r3, r2, r3
 8004ba8:	183a      	adds	r2, r7, r0
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	4908      	ldr	r1, [pc, #32]	; (8004bd0 <USB_ActivateEndpoint+0x6d0>)
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	b292      	uxth	r2, r2
 8004bb2:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 8004bb4:	236f      	movs	r3, #111	; 0x6f
 8004bb6:	18fb      	adds	r3, r7, r3
 8004bb8:	781b      	ldrb	r3, [r3, #0]
}
 8004bba:	0018      	movs	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	b01c      	add	sp, #112	; 0x70
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	46c0      	nop			; (mov r8, r8)
 8004bc4:	ffff8f8f 	.word	0xffff8f8f
 8004bc8:	ffff8180 	.word	0xffff8180
 8004bcc:	ffff8e8f 	.word	0xffff8e8f
 8004bd0:	ffff8080 	.word	0xffff8080
 8004bd4:	00000404 	.word	0x00000404
 8004bd8:	ffffc080 	.word	0xffffc080
 8004bdc:	ffff80c0 	.word	0xffff80c0
 8004be0:	ffffbf8f 	.word	0xffffbf8f
 8004be4:	ffff8fbf 	.word	0xffff8fbf

08004be8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b08c      	sub	sp, #48	; 0x30
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	7b1b      	ldrb	r3, [r3, #12]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d000      	beq.n	8004bfc <USB_DeactivateEndpoint+0x14>
 8004bfa:	e07e      	b.n	8004cfa <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	785b      	ldrb	r3, [r3, #1]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d03c      	beq.n	8004c7e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	18d2      	adds	r2, r2, r3
 8004c0e:	210c      	movs	r1, #12
 8004c10:	187b      	adds	r3, r7, r1
 8004c12:	8812      	ldrh	r2, [r2, #0]
 8004c14:	801a      	strh	r2, [r3, #0]
 8004c16:	187b      	adds	r3, r7, r1
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	2240      	movs	r2, #64	; 0x40
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d016      	beq.n	8004c4e <USB_DeactivateEndpoint+0x66>
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	18d3      	adds	r3, r2, r3
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	200a      	movs	r0, #10
 8004c30:	183b      	adds	r3, r7, r0
 8004c32:	49c7      	ldr	r1, [pc, #796]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004c34:	400a      	ands	r2, r1
 8004c36:	801a      	strh	r2, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	18d3      	adds	r3, r2, r3
 8004c42:	183a      	adds	r2, r7, r0
 8004c44:	8812      	ldrh	r2, [r2, #0]
 8004c46:	49c3      	ldr	r1, [pc, #780]	; (8004f54 <USB_DeactivateEndpoint+0x36c>)
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	b292      	uxth	r2, r2
 8004c4c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	18d3      	adds	r3, r2, r3
 8004c58:	881b      	ldrh	r3, [r3, #0]
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	2008      	movs	r0, #8
 8004c5e:	183b      	adds	r3, r7, r0
 8004c60:	49bd      	ldr	r1, [pc, #756]	; (8004f58 <USB_DeactivateEndpoint+0x370>)
 8004c62:	400a      	ands	r2, r1
 8004c64:	801a      	strh	r2, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	18d3      	adds	r3, r2, r3
 8004c70:	183a      	adds	r2, r7, r0
 8004c72:	8812      	ldrh	r2, [r2, #0]
 8004c74:	49b9      	ldr	r1, [pc, #740]	; (8004f5c <USB_DeactivateEndpoint+0x374>)
 8004c76:	430a      	orrs	r2, r1
 8004c78:	b292      	uxth	r2, r2
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e163      	b.n	8004f46 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	18d2      	adds	r2, r2, r3
 8004c88:	2112      	movs	r1, #18
 8004c8a:	187b      	adds	r3, r7, r1
 8004c8c:	8812      	ldrh	r2, [r2, #0]
 8004c8e:	801a      	strh	r2, [r3, #0]
 8004c90:	187b      	adds	r3, r7, r1
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	2380      	movs	r3, #128	; 0x80
 8004c96:	01db      	lsls	r3, r3, #7
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d016      	beq.n	8004cca <USB_DeactivateEndpoint+0xe2>
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	18d3      	adds	r3, r2, r3
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	2010      	movs	r0, #16
 8004cac:	183b      	adds	r3, r7, r0
 8004cae:	49a8      	ldr	r1, [pc, #672]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004cb0:	400a      	ands	r2, r1
 8004cb2:	801a      	strh	r2, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	18d3      	adds	r3, r2, r3
 8004cbe:	183a      	adds	r2, r7, r0
 8004cc0:	8812      	ldrh	r2, [r2, #0]
 8004cc2:	49a7      	ldr	r1, [pc, #668]	; (8004f60 <USB_DeactivateEndpoint+0x378>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	b292      	uxth	r2, r2
 8004cc8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	200e      	movs	r0, #14
 8004cda:	183b      	adds	r3, r7, r0
 8004cdc:	49a1      	ldr	r1, [pc, #644]	; (8004f64 <USB_DeactivateEndpoint+0x37c>)
 8004cde:	400a      	ands	r2, r1
 8004ce0:	801a      	strh	r2, [r3, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	18d3      	adds	r3, r2, r3
 8004cec:	183a      	adds	r2, r7, r0
 8004cee:	8812      	ldrh	r2, [r2, #0]
 8004cf0:	499a      	ldr	r1, [pc, #616]	; (8004f5c <USB_DeactivateEndpoint+0x374>)
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	b292      	uxth	r2, r2
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e125      	b.n	8004f46 <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d000      	beq.n	8004d04 <USB_DeactivateEndpoint+0x11c>
 8004d02:	e090      	b.n	8004e26 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	18d2      	adds	r2, r2, r3
 8004d0e:	2120      	movs	r1, #32
 8004d10:	187b      	adds	r3, r7, r1
 8004d12:	8812      	ldrh	r2, [r2, #0]
 8004d14:	801a      	strh	r2, [r3, #0]
 8004d16:	187b      	adds	r3, r7, r1
 8004d18:	881a      	ldrh	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	01db      	lsls	r3, r3, #7
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d016      	beq.n	8004d50 <USB_DeactivateEndpoint+0x168>
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	18d3      	adds	r3, r2, r3
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	201e      	movs	r0, #30
 8004d32:	183b      	adds	r3, r7, r0
 8004d34:	4986      	ldr	r1, [pc, #536]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004d36:	400a      	ands	r2, r1
 8004d38:	801a      	strh	r2, [r3, #0]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	18d3      	adds	r3, r2, r3
 8004d44:	183a      	adds	r2, r7, r0
 8004d46:	8812      	ldrh	r2, [r2, #0]
 8004d48:	4985      	ldr	r1, [pc, #532]	; (8004f60 <USB_DeactivateEndpoint+0x378>)
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	b292      	uxth	r2, r2
 8004d4e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	18d2      	adds	r2, r2, r3
 8004d5a:	211c      	movs	r1, #28
 8004d5c:	187b      	adds	r3, r7, r1
 8004d5e:	8812      	ldrh	r2, [r2, #0]
 8004d60:	801a      	strh	r2, [r3, #0]
 8004d62:	187b      	adds	r3, r7, r1
 8004d64:	881b      	ldrh	r3, [r3, #0]
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	4013      	ands	r3, r2
 8004d6a:	d016      	beq.n	8004d9a <USB_DeactivateEndpoint+0x1b2>
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	18d3      	adds	r3, r2, r3
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	201a      	movs	r0, #26
 8004d7c:	183b      	adds	r3, r7, r0
 8004d7e:	4974      	ldr	r1, [pc, #464]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	801a      	strh	r2, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	18d3      	adds	r3, r2, r3
 8004d8e:	183a      	adds	r2, r7, r0
 8004d90:	8812      	ldrh	r2, [r2, #0]
 8004d92:	4970      	ldr	r1, [pc, #448]	; (8004f54 <USB_DeactivateEndpoint+0x36c>)
 8004d94:	430a      	orrs	r2, r1
 8004d96:	b292      	uxth	r2, r2
 8004d98:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	18d3      	adds	r3, r2, r3
 8004da4:	881b      	ldrh	r3, [r3, #0]
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	2018      	movs	r0, #24
 8004daa:	183b      	adds	r3, r7, r0
 8004dac:	4968      	ldr	r1, [pc, #416]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004dae:	400a      	ands	r2, r1
 8004db0:	801a      	strh	r2, [r3, #0]
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	18d3      	adds	r3, r2, r3
 8004dbc:	183a      	adds	r2, r7, r0
 8004dbe:	8812      	ldrh	r2, [r2, #0]
 8004dc0:	4964      	ldr	r1, [pc, #400]	; (8004f54 <USB_DeactivateEndpoint+0x36c>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	b292      	uxth	r2, r2
 8004dc6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	781b      	ldrb	r3, [r3, #0]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	18d3      	adds	r3, r2, r3
 8004dd2:	881b      	ldrh	r3, [r3, #0]
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	2016      	movs	r0, #22
 8004dd8:	183b      	adds	r3, r7, r0
 8004dda:	4962      	ldr	r1, [pc, #392]	; (8004f64 <USB_DeactivateEndpoint+0x37c>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	801a      	strh	r2, [r3, #0]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	18d3      	adds	r3, r2, r3
 8004dea:	183a      	adds	r2, r7, r0
 8004dec:	8812      	ldrh	r2, [r2, #0]
 8004dee:	495b      	ldr	r1, [pc, #364]	; (8004f5c <USB_DeactivateEndpoint+0x374>)
 8004df0:	430a      	orrs	r2, r1
 8004df2:	b292      	uxth	r2, r2
 8004df4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	18d3      	adds	r3, r2, r3
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	2014      	movs	r0, #20
 8004e06:	183b      	adds	r3, r7, r0
 8004e08:	4953      	ldr	r1, [pc, #332]	; (8004f58 <USB_DeactivateEndpoint+0x370>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18d3      	adds	r3, r2, r3
 8004e18:	183a      	adds	r2, r7, r0
 8004e1a:	8812      	ldrh	r2, [r2, #0]
 8004e1c:	494f      	ldr	r1, [pc, #316]	; (8004f5c <USB_DeactivateEndpoint+0x374>)
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	b292      	uxth	r2, r2
 8004e22:	801a      	strh	r2, [r3, #0]
 8004e24:	e08f      	b.n	8004f46 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	18d2      	adds	r2, r2, r3
 8004e30:	212e      	movs	r1, #46	; 0x2e
 8004e32:	187b      	adds	r3, r7, r1
 8004e34:	8812      	ldrh	r2, [r2, #0]
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	187b      	adds	r3, r7, r1
 8004e3a:	881a      	ldrh	r2, [r3, #0]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	01db      	lsls	r3, r3, #7
 8004e40:	4013      	ands	r3, r2
 8004e42:	d016      	beq.n	8004e72 <USB_DeactivateEndpoint+0x28a>
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	18d3      	adds	r3, r2, r3
 8004e4e:	881b      	ldrh	r3, [r3, #0]
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	202c      	movs	r0, #44	; 0x2c
 8004e54:	183b      	adds	r3, r7, r0
 8004e56:	493e      	ldr	r1, [pc, #248]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004e58:	400a      	ands	r2, r1
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	18d3      	adds	r3, r2, r3
 8004e66:	183a      	adds	r2, r7, r0
 8004e68:	8812      	ldrh	r2, [r2, #0]
 8004e6a:	493d      	ldr	r1, [pc, #244]	; (8004f60 <USB_DeactivateEndpoint+0x378>)
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	b292      	uxth	r2, r2
 8004e70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	18d2      	adds	r2, r2, r3
 8004e7c:	212a      	movs	r1, #42	; 0x2a
 8004e7e:	187b      	adds	r3, r7, r1
 8004e80:	8812      	ldrh	r2, [r2, #0]
 8004e82:	801a      	strh	r2, [r3, #0]
 8004e84:	187b      	adds	r3, r7, r1
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	2240      	movs	r2, #64	; 0x40
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d016      	beq.n	8004ebc <USB_DeactivateEndpoint+0x2d4>
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	18d3      	adds	r3, r2, r3
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	2028      	movs	r0, #40	; 0x28
 8004e9e:	183b      	adds	r3, r7, r0
 8004ea0:	492b      	ldr	r1, [pc, #172]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004ea2:	400a      	ands	r2, r1
 8004ea4:	801a      	strh	r2, [r3, #0]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	183a      	adds	r2, r7, r0
 8004eb2:	8812      	ldrh	r2, [r2, #0]
 8004eb4:	4927      	ldr	r1, [pc, #156]	; (8004f54 <USB_DeactivateEndpoint+0x36c>)
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	b292      	uxth	r2, r2
 8004eba:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	18d3      	adds	r3, r2, r3
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	2026      	movs	r0, #38	; 0x26
 8004ecc:	183b      	adds	r3, r7, r0
 8004ece:	4920      	ldr	r1, [pc, #128]	; (8004f50 <USB_DeactivateEndpoint+0x368>)
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	801a      	strh	r2, [r3, #0]
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	183a      	adds	r2, r7, r0
 8004ee0:	8812      	ldrh	r2, [r2, #0]
 8004ee2:	491f      	ldr	r1, [pc, #124]	; (8004f60 <USB_DeactivateEndpoint+0x378>)
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	b292      	uxth	r2, r2
 8004ee8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	18d3      	adds	r3, r2, r3
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	2024      	movs	r0, #36	; 0x24
 8004efa:	183b      	adds	r3, r7, r0
 8004efc:	4916      	ldr	r1, [pc, #88]	; (8004f58 <USB_DeactivateEndpoint+0x370>)
 8004efe:	400a      	ands	r2, r1
 8004f00:	801a      	strh	r2, [r3, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	18d3      	adds	r3, r2, r3
 8004f0c:	183a      	adds	r2, r7, r0
 8004f0e:	8812      	ldrh	r2, [r2, #0]
 8004f10:	4912      	ldr	r1, [pc, #72]	; (8004f5c <USB_DeactivateEndpoint+0x374>)
 8004f12:	430a      	orrs	r2, r1
 8004f14:	b292      	uxth	r2, r2
 8004f16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	18d3      	adds	r3, r2, r3
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	2022      	movs	r0, #34	; 0x22
 8004f28:	183b      	adds	r3, r7, r0
 8004f2a:	490e      	ldr	r1, [pc, #56]	; (8004f64 <USB_DeactivateEndpoint+0x37c>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	18d3      	adds	r3, r2, r3
 8004f3a:	183a      	adds	r2, r7, r0
 8004f3c:	8812      	ldrh	r2, [r2, #0]
 8004f3e:	4907      	ldr	r1, [pc, #28]	; (8004f5c <USB_DeactivateEndpoint+0x374>)
 8004f40:	430a      	orrs	r2, r1
 8004f42:	b292      	uxth	r2, r2
 8004f44:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	0018      	movs	r0, r3
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	b00c      	add	sp, #48	; 0x30
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	ffff8f8f 	.word	0xffff8f8f
 8004f54:	ffff80c0 	.word	0xffff80c0
 8004f58:	ffff8fbf 	.word	0xffff8fbf
 8004f5c:	ffff8080 	.word	0xffff8080
 8004f60:	ffffc080 	.word	0xffffc080
 8004f64:	ffffbf8f 	.word	0xffffbf8f

08004f68 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b0c3      	sub	sp, #268	; 0x10c
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <USB_EPStartXfer+0x16>
 8004f7a:	f000 fcef 	bl	800595c <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	699a      	ldr	r2, [r3, #24]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d905      	bls.n	8004f96 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	1d7a      	adds	r2, r7, #5
 8004f90:	32ff      	adds	r2, #255	; 0xff
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	e004      	b.n	8004fa0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	1d7a      	adds	r2, r7, #5
 8004f9c:	32ff      	adds	r2, #255	; 0xff
 8004f9e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	7b1b      	ldrb	r3, [r3, #12]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d125      	bne.n	8004ff4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6959      	ldr	r1, [r3, #20]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	88da      	ldrh	r2, [r3, #6]
 8004fb0:	1d7b      	adds	r3, r7, #5
 8004fb2:	33ff      	adds	r3, #255	; 0xff
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f001 f9c9 	bl	8006350 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2250      	movs	r2, #80	; 0x50
 8004fc6:	5a9b      	ldrh	r3, [r3, r2]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	001a      	movs	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	189b      	adds	r3, r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	18d3      	adds	r3, r2, r3
 8004fdc:	4acc      	ldr	r2, [pc, #816]	; (8005310 <USB_EPStartXfer+0x3a8>)
 8004fde:	4694      	mov	ip, r2
 8004fe0:	4463      	add	r3, ip
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	1d7b      	adds	r3, r7, #5
 8004fe6:	33ff      	adds	r3, #255	; 0xff
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	801a      	strh	r2, [r3, #0]
 8004ff0:	f000 fc8f 	bl	8005912 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	78db      	ldrb	r3, [r3, #3]
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d000      	beq.n	8004ffe <USB_EPStartXfer+0x96>
 8004ffc:	e33a      	b.n	8005674 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6a1a      	ldr	r2, [r3, #32]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d800      	bhi.n	800500c <USB_EPStartXfer+0xa4>
 800500a:	e2df      	b.n	80055cc <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	18d3      	adds	r3, r2, r3
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29a      	uxth	r2, r3
 800501a:	2056      	movs	r0, #86	; 0x56
 800501c:	183b      	adds	r3, r7, r0
 800501e:	49bd      	ldr	r1, [pc, #756]	; (8005314 <USB_EPStartXfer+0x3ac>)
 8005020:	400a      	ands	r2, r1
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	18d3      	adds	r3, r2, r3
 800502e:	183a      	adds	r2, r7, r0
 8005030:	8812      	ldrh	r2, [r2, #0]
 8005032:	49b9      	ldr	r1, [pc, #740]	; (8005318 <USB_EPStartXfer+0x3b0>)
 8005034:	430a      	orrs	r2, r1
 8005036:	b292      	uxth	r2, r2
 8005038:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	1d7b      	adds	r3, r7, #5
 8005040:	33ff      	adds	r3, #255	; 0xff
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1ad2      	subs	r2, r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	18d3      	adds	r3, r2, r3
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	001a      	movs	r2, r3
 800505a:	2340      	movs	r3, #64	; 0x40
 800505c:	4013      	ands	r3, r2
 800505e:	d100      	bne.n	8005062 <USB_EPStartXfer+0xfa>
 8005060:	e162      	b.n	8005328 <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	633b      	str	r3, [r7, #48]	; 0x30
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	785b      	ldrb	r3, [r3, #1]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d16a      	bne.n	8005144 <USB_EPStartXfer+0x1dc>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2250      	movs	r2, #80	; 0x50
 8005076:	5a9b      	ldrh	r3, [r3, r2]
 8005078:	b29b      	uxth	r3, r3
 800507a:	001a      	movs	r2, r3
 800507c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507e:	189b      	adds	r3, r3, r2
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	00da      	lsls	r2, r3, #3
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	18d3      	adds	r3, r2, r3
 800508c:	4aa3      	ldr	r2, [pc, #652]	; (800531c <USB_EPStartXfer+0x3b4>)
 800508e:	4694      	mov	ip, r2
 8005090:	4463      	add	r3, ip
 8005092:	627b      	str	r3, [r7, #36]	; 0x24
 8005094:	1d7b      	adds	r3, r7, #5
 8005096:	33ff      	adds	r3, #255	; 0xff
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d110      	bne.n	80050c0 <USB_EPStartXfer+0x158>
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	881b      	ldrh	r3, [r3, #0]
 80050a2:	b29b      	uxth	r3, r3
 80050a4:	4a9e      	ldr	r2, [pc, #632]	; (8005320 <USB_EPStartXfer+0x3b8>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	b29a      	uxth	r2, r3
 80050aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ac:	801a      	strh	r2, [r3, #0]
 80050ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b0:	881b      	ldrh	r3, [r3, #0]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	4a9b      	ldr	r2, [pc, #620]	; (8005324 <USB_EPStartXfer+0x3bc>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	801a      	strh	r2, [r3, #0]
 80050be:	e05c      	b.n	800517a <USB_EPStartXfer+0x212>
 80050c0:	1d7b      	adds	r3, r7, #5
 80050c2:	33ff      	adds	r3, #255	; 0xff
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2b3e      	cmp	r3, #62	; 0x3e
 80050c8:	d81c      	bhi.n	8005104 <USB_EPStartXfer+0x19c>
 80050ca:	1d7b      	adds	r3, r7, #5
 80050cc:	33ff      	adds	r3, #255	; 0xff
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	085b      	lsrs	r3, r3, #1
 80050d2:	1c7a      	adds	r2, r7, #1
 80050d4:	32ff      	adds	r2, #255	; 0xff
 80050d6:	6013      	str	r3, [r2, #0]
 80050d8:	1d7b      	adds	r3, r7, #5
 80050da:	33ff      	adds	r3, #255	; 0xff
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2201      	movs	r2, #1
 80050e0:	4013      	ands	r3, r2
 80050e2:	d006      	beq.n	80050f2 <USB_EPStartXfer+0x18a>
 80050e4:	1c7b      	adds	r3, r7, #1
 80050e6:	33ff      	adds	r3, #255	; 0xff
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	3301      	adds	r3, #1
 80050ec:	1c7a      	adds	r2, r7, #1
 80050ee:	32ff      	adds	r2, #255	; 0xff
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	1c7b      	adds	r3, r7, #1
 80050f4:	33ff      	adds	r3, #255	; 0xff
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	029b      	lsls	r3, r3, #10
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	e03a      	b.n	800517a <USB_EPStartXfer+0x212>
 8005104:	1d7b      	adds	r3, r7, #5
 8005106:	33ff      	adds	r3, #255	; 0xff
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	1c7a      	adds	r2, r7, #1
 800510e:	32ff      	adds	r2, #255	; 0xff
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	1d7b      	adds	r3, r7, #5
 8005114:	33ff      	adds	r3, #255	; 0xff
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	221f      	movs	r2, #31
 800511a:	4013      	ands	r3, r2
 800511c:	d106      	bne.n	800512c <USB_EPStartXfer+0x1c4>
 800511e:	1c7b      	adds	r3, r7, #1
 8005120:	33ff      	adds	r3, #255	; 0xff
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3b01      	subs	r3, #1
 8005126:	1c7a      	adds	r2, r7, #1
 8005128:	32ff      	adds	r2, #255	; 0xff
 800512a:	6013      	str	r3, [r2, #0]
 800512c:	1c7b      	adds	r3, r7, #1
 800512e:	33ff      	adds	r3, #255	; 0xff
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	029b      	lsls	r3, r3, #10
 8005136:	b29b      	uxth	r3, r3
 8005138:	4a7a      	ldr	r2, [pc, #488]	; (8005324 <USB_EPStartXfer+0x3bc>)
 800513a:	4313      	orrs	r3, r2
 800513c:	b29a      	uxth	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e01a      	b.n	800517a <USB_EPStartXfer+0x212>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	785b      	ldrb	r3, [r3, #1]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d116      	bne.n	800517a <USB_EPStartXfer+0x212>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2250      	movs	r2, #80	; 0x50
 8005150:	5a9b      	ldrh	r3, [r3, r2]
 8005152:	b29b      	uxth	r3, r3
 8005154:	001a      	movs	r2, r3
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	189b      	adds	r3, r3, r2
 800515a:	633b      	str	r3, [r7, #48]	; 0x30
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	00da      	lsls	r2, r3, #3
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	18d3      	adds	r3, r2, r3
 8005166:	4a6d      	ldr	r2, [pc, #436]	; (800531c <USB_EPStartXfer+0x3b4>)
 8005168:	4694      	mov	ip, r2
 800516a:	4463      	add	r3, ip
 800516c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516e:	1d7b      	adds	r3, r7, #5
 8005170:	33ff      	adds	r3, #255	; 0xff
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	b29a      	uxth	r2, r3
 8005176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005178:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800517a:	2076      	movs	r0, #118	; 0x76
 800517c:	183b      	adds	r3, r7, r0
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	8952      	ldrh	r2, [r2, #10]
 8005182:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	6959      	ldr	r1, [r3, #20]
 8005188:	1d7b      	adds	r3, r7, #5
 800518a:	33ff      	adds	r3, #255	; 0xff
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	b29c      	uxth	r4, r3
 8005190:	183b      	adds	r3, r7, r0
 8005192:	881a      	ldrh	r2, [r3, #0]
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	0023      	movs	r3, r4
 8005198:	f001 f8da 	bl	8006350 <USB_WritePMA>
            ep->xfer_buff += len;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	1d7b      	adds	r3, r7, #5
 80051a2:	33ff      	adds	r3, #255	; 0xff
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	18d2      	adds	r2, r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d908      	bls.n	80051ca <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	1d7b      	adds	r3, r7, #5
 80051be:	33ff      	adds	r3, #255	; 0xff
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	621a      	str	r2, [r3, #32]
 80051c8:	e007      	b.n	80051da <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	1d7a      	adds	r2, r7, #5
 80051d0:	32ff      	adds	r2, #255	; 0xff
 80051d2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d166      	bne.n	80052b0 <USB_EPStartXfer+0x348>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2250      	movs	r2, #80	; 0x50
 80051ea:	5a9b      	ldrh	r3, [r3, r2]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	001a      	movs	r2, r3
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	189b      	adds	r3, r3, r2
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	00da      	lsls	r2, r3, #3
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	18d3      	adds	r3, r2, r3
 8005200:	4a43      	ldr	r2, [pc, #268]	; (8005310 <USB_EPStartXfer+0x3a8>)
 8005202:	4694      	mov	ip, r2
 8005204:	4463      	add	r3, ip
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	1d7b      	adds	r3, r7, #5
 800520a:	33ff      	adds	r3, #255	; 0xff
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d110      	bne.n	8005234 <USB_EPStartXfer+0x2cc>
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	b29b      	uxth	r3, r3
 8005218:	4a41      	ldr	r2, [pc, #260]	; (8005320 <USB_EPStartXfer+0x3b8>)
 800521a:	4013      	ands	r3, r2
 800521c:	b29a      	uxth	r2, r3
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	801a      	strh	r2, [r3, #0]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b29b      	uxth	r3, r3
 8005228:	4a3e      	ldr	r2, [pc, #248]	; (8005324 <USB_EPStartXfer+0x3bc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	b29a      	uxth	r2, r3
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e05a      	b.n	80052ea <USB_EPStartXfer+0x382>
 8005234:	1d7b      	adds	r3, r7, #5
 8005236:	33ff      	adds	r3, #255	; 0xff
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b3e      	cmp	r3, #62	; 0x3e
 800523c:	d81a      	bhi.n	8005274 <USB_EPStartXfer+0x30c>
 800523e:	1d7b      	adds	r3, r7, #5
 8005240:	33ff      	adds	r3, #255	; 0xff
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	21fc      	movs	r1, #252	; 0xfc
 8005248:	187a      	adds	r2, r7, r1
 800524a:	6013      	str	r3, [r2, #0]
 800524c:	1d7b      	adds	r3, r7, #5
 800524e:	33ff      	adds	r3, #255	; 0xff
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2201      	movs	r2, #1
 8005254:	4013      	ands	r3, r2
 8005256:	d004      	beq.n	8005262 <USB_EPStartXfer+0x2fa>
 8005258:	187b      	adds	r3, r7, r1
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	187a      	adds	r2, r7, r1
 8005260:	6013      	str	r3, [r2, #0]
 8005262:	23fc      	movs	r3, #252	; 0xfc
 8005264:	18fb      	adds	r3, r7, r3
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	b29b      	uxth	r3, r3
 800526a:	029b      	lsls	r3, r3, #10
 800526c:	b29a      	uxth	r2, r3
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	e03a      	b.n	80052ea <USB_EPStartXfer+0x382>
 8005274:	1d7b      	adds	r3, r7, #5
 8005276:	33ff      	adds	r3, #255	; 0xff
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	21fc      	movs	r1, #252	; 0xfc
 800527e:	187a      	adds	r2, r7, r1
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	1d7b      	adds	r3, r7, #5
 8005284:	33ff      	adds	r3, #255	; 0xff
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	221f      	movs	r2, #31
 800528a:	4013      	ands	r3, r2
 800528c:	d104      	bne.n	8005298 <USB_EPStartXfer+0x330>
 800528e:	187b      	adds	r3, r7, r1
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3b01      	subs	r3, #1
 8005294:	187a      	adds	r2, r7, r1
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	23fc      	movs	r3, #252	; 0xfc
 800529a:	18fb      	adds	r3, r7, r3
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	b29b      	uxth	r3, r3
 80052a0:	029b      	lsls	r3, r3, #10
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	4a1f      	ldr	r2, [pc, #124]	; (8005324 <USB_EPStartXfer+0x3bc>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	801a      	strh	r2, [r3, #0]
 80052ae:	e01c      	b.n	80052ea <USB_EPStartXfer+0x382>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	785b      	ldrb	r3, [r3, #1]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d118      	bne.n	80052ea <USB_EPStartXfer+0x382>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2250      	movs	r2, #80	; 0x50
 80052c0:	5a9b      	ldrh	r3, [r3, r2]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	001a      	movs	r2, r3
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	189b      	adds	r3, r3, r2
 80052ca:	623b      	str	r3, [r7, #32]
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	00da      	lsls	r2, r3, #3
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	18d3      	adds	r3, r2, r3
 80052d6:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <USB_EPStartXfer+0x3a8>)
 80052d8:	4694      	mov	ip, r2
 80052da:	4463      	add	r3, ip
 80052dc:	61fb      	str	r3, [r7, #28]
 80052de:	1d7b      	adds	r3, r7, #5
 80052e0:	33ff      	adds	r3, #255	; 0xff
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052ea:	2076      	movs	r0, #118	; 0x76
 80052ec:	183b      	adds	r3, r7, r0
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	8912      	ldrh	r2, [r2, #8]
 80052f2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	6959      	ldr	r1, [r3, #20]
 80052f8:	1d7b      	adds	r3, r7, #5
 80052fa:	33ff      	adds	r3, #255	; 0xff
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	b29c      	uxth	r4, r3
 8005300:	183b      	adds	r3, r7, r0
 8005302:	881a      	ldrh	r2, [r3, #0]
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	0023      	movs	r3, r4
 8005308:	f001 f822 	bl	8006350 <USB_WritePMA>
 800530c:	e301      	b.n	8005912 <USB_EPStartXfer+0x9aa>
 800530e:	46c0      	nop			; (mov r8, r8)
 8005310:	00000402 	.word	0x00000402
 8005314:	ffff8f8f 	.word	0xffff8f8f
 8005318:	ffff8180 	.word	0xffff8180
 800531c:	00000406 	.word	0x00000406
 8005320:	ffff83ff 	.word	0xffff83ff
 8005324:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	785b      	ldrb	r3, [r3, #1]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d166      	bne.n	80053fe <USB_EPStartXfer+0x496>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	64bb      	str	r3, [r7, #72]	; 0x48
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2250      	movs	r2, #80	; 0x50
 8005338:	5a9b      	ldrh	r3, [r3, r2]
 800533a:	b29b      	uxth	r3, r3
 800533c:	001a      	movs	r2, r3
 800533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005340:	189b      	adds	r3, r3, r2
 8005342:	64bb      	str	r3, [r7, #72]	; 0x48
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	00da      	lsls	r2, r3, #3
 800534a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800534c:	18d3      	adds	r3, r2, r3
 800534e:	4ac3      	ldr	r2, [pc, #780]	; (800565c <USB_EPStartXfer+0x6f4>)
 8005350:	4694      	mov	ip, r2
 8005352:	4463      	add	r3, ip
 8005354:	647b      	str	r3, [r7, #68]	; 0x44
 8005356:	1d7b      	adds	r3, r7, #5
 8005358:	33ff      	adds	r3, #255	; 0xff
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d110      	bne.n	8005382 <USB_EPStartXfer+0x41a>
 8005360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	4abe      	ldr	r2, [pc, #760]	; (8005660 <USB_EPStartXfer+0x6f8>)
 8005368:	4013      	ands	r3, r2
 800536a:	b29a      	uxth	r2, r3
 800536c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	4abb      	ldr	r2, [pc, #748]	; (8005664 <USB_EPStartXfer+0x6fc>)
 8005378:	4313      	orrs	r3, r2
 800537a:	b29a      	uxth	r2, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537e:	801a      	strh	r2, [r3, #0]
 8005380:	e05a      	b.n	8005438 <USB_EPStartXfer+0x4d0>
 8005382:	1d7b      	adds	r3, r7, #5
 8005384:	33ff      	adds	r3, #255	; 0xff
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b3e      	cmp	r3, #62	; 0x3e
 800538a:	d81a      	bhi.n	80053c2 <USB_EPStartXfer+0x45a>
 800538c:	1d7b      	adds	r3, r7, #5
 800538e:	33ff      	adds	r3, #255	; 0xff
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	085b      	lsrs	r3, r3, #1
 8005394:	21f8      	movs	r1, #248	; 0xf8
 8005396:	187a      	adds	r2, r7, r1
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	1d7b      	adds	r3, r7, #5
 800539c:	33ff      	adds	r3, #255	; 0xff
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2201      	movs	r2, #1
 80053a2:	4013      	ands	r3, r2
 80053a4:	d004      	beq.n	80053b0 <USB_EPStartXfer+0x448>
 80053a6:	187b      	adds	r3, r7, r1
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3301      	adds	r3, #1
 80053ac:	187a      	adds	r2, r7, r1
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	23f8      	movs	r3, #248	; 0xf8
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	029b      	lsls	r3, r3, #10
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	e03a      	b.n	8005438 <USB_EPStartXfer+0x4d0>
 80053c2:	1d7b      	adds	r3, r7, #5
 80053c4:	33ff      	adds	r3, #255	; 0xff
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	095b      	lsrs	r3, r3, #5
 80053ca:	21f8      	movs	r1, #248	; 0xf8
 80053cc:	187a      	adds	r2, r7, r1
 80053ce:	6013      	str	r3, [r2, #0]
 80053d0:	1d7b      	adds	r3, r7, #5
 80053d2:	33ff      	adds	r3, #255	; 0xff
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	221f      	movs	r2, #31
 80053d8:	4013      	ands	r3, r2
 80053da:	d104      	bne.n	80053e6 <USB_EPStartXfer+0x47e>
 80053dc:	187b      	adds	r3, r7, r1
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	187a      	adds	r2, r7, r1
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	23f8      	movs	r3, #248	; 0xf8
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	029b      	lsls	r3, r3, #10
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	4a9c      	ldr	r2, [pc, #624]	; (8005664 <USB_EPStartXfer+0x6fc>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053fa:	801a      	strh	r2, [r3, #0]
 80053fc:	e01c      	b.n	8005438 <USB_EPStartXfer+0x4d0>
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d118      	bne.n	8005438 <USB_EPStartXfer+0x4d0>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	653b      	str	r3, [r7, #80]	; 0x50
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2250      	movs	r2, #80	; 0x50
 800540e:	5a9b      	ldrh	r3, [r3, r2]
 8005410:	b29b      	uxth	r3, r3
 8005412:	001a      	movs	r2, r3
 8005414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005416:	189b      	adds	r3, r3, r2
 8005418:	653b      	str	r3, [r7, #80]	; 0x50
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	00da      	lsls	r2, r3, #3
 8005420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005422:	18d3      	adds	r3, r2, r3
 8005424:	4a8d      	ldr	r2, [pc, #564]	; (800565c <USB_EPStartXfer+0x6f4>)
 8005426:	4694      	mov	ip, r2
 8005428:	4463      	add	r3, ip
 800542a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800542c:	1d7b      	adds	r3, r7, #5
 800542e:	33ff      	adds	r3, #255	; 0xff
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	b29a      	uxth	r2, r3
 8005434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005436:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005438:	2076      	movs	r0, #118	; 0x76
 800543a:	183b      	adds	r3, r7, r0
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	8912      	ldrh	r2, [r2, #8]
 8005440:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6959      	ldr	r1, [r3, #20]
 8005446:	1d7b      	adds	r3, r7, #5
 8005448:	33ff      	adds	r3, #255	; 0xff
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	b29c      	uxth	r4, r3
 800544e:	183b      	adds	r3, r7, r0
 8005450:	881a      	ldrh	r2, [r3, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	0023      	movs	r3, r4
 8005456:	f000 ff7b 	bl	8006350 <USB_WritePMA>
            ep->xfer_buff += len;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695a      	ldr	r2, [r3, #20]
 800545e:	1d7b      	adds	r3, r7, #5
 8005460:	33ff      	adds	r3, #255	; 0xff
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	18d2      	adds	r2, r2, r3
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	429a      	cmp	r2, r3
 8005474:	d908      	bls.n	8005488 <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	1d7b      	adds	r3, r7, #5
 800547c:	33ff      	adds	r3, #255	; 0xff
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	621a      	str	r2, [r3, #32]
 8005486:	e007      	b.n	8005498 <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	1d7a      	adds	r2, r7, #5
 800548e:	32ff      	adds	r2, #255	; 0xff
 8005490:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2200      	movs	r2, #0
 8005496:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	643b      	str	r3, [r7, #64]	; 0x40
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	785b      	ldrb	r3, [r3, #1]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d166      	bne.n	8005572 <USB_EPStartXfer+0x60a>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2250      	movs	r2, #80	; 0x50
 80054ac:	5a9b      	ldrh	r3, [r3, r2]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	001a      	movs	r2, r3
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	189b      	adds	r3, r3, r2
 80054b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	00da      	lsls	r2, r3, #3
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	18d3      	adds	r3, r2, r3
 80054c2:	4a69      	ldr	r2, [pc, #420]	; (8005668 <USB_EPStartXfer+0x700>)
 80054c4:	4694      	mov	ip, r2
 80054c6:	4463      	add	r3, ip
 80054c8:	637b      	str	r3, [r7, #52]	; 0x34
 80054ca:	1d7b      	adds	r3, r7, #5
 80054cc:	33ff      	adds	r3, #255	; 0xff
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d110      	bne.n	80054f6 <USB_EPStartXfer+0x58e>
 80054d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d6:	881b      	ldrh	r3, [r3, #0]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	4a61      	ldr	r2, [pc, #388]	; (8005660 <USB_EPStartXfer+0x6f8>)
 80054dc:	4013      	ands	r3, r2
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e2:	801a      	strh	r2, [r3, #0]
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4a5e      	ldr	r2, [pc, #376]	; (8005664 <USB_EPStartXfer+0x6fc>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	801a      	strh	r2, [r3, #0]
 80054f4:	e058      	b.n	80055a8 <USB_EPStartXfer+0x640>
 80054f6:	1d7b      	adds	r3, r7, #5
 80054f8:	33ff      	adds	r3, #255	; 0xff
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b3e      	cmp	r3, #62	; 0x3e
 80054fe:	d81a      	bhi.n	8005536 <USB_EPStartXfer+0x5ce>
 8005500:	1d7b      	adds	r3, r7, #5
 8005502:	33ff      	adds	r3, #255	; 0xff
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	085b      	lsrs	r3, r3, #1
 8005508:	21f4      	movs	r1, #244	; 0xf4
 800550a:	187a      	adds	r2, r7, r1
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	1d7b      	adds	r3, r7, #5
 8005510:	33ff      	adds	r3, #255	; 0xff
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2201      	movs	r2, #1
 8005516:	4013      	ands	r3, r2
 8005518:	d004      	beq.n	8005524 <USB_EPStartXfer+0x5bc>
 800551a:	187b      	adds	r3, r7, r1
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3301      	adds	r3, #1
 8005520:	187a      	adds	r2, r7, r1
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	23f4      	movs	r3, #244	; 0xf4
 8005526:	18fb      	adds	r3, r7, r3
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	b29b      	uxth	r3, r3
 800552c:	029b      	lsls	r3, r3, #10
 800552e:	b29a      	uxth	r2, r3
 8005530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005532:	801a      	strh	r2, [r3, #0]
 8005534:	e038      	b.n	80055a8 <USB_EPStartXfer+0x640>
 8005536:	1d7b      	adds	r3, r7, #5
 8005538:	33ff      	adds	r3, #255	; 0xff
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	21f4      	movs	r1, #244	; 0xf4
 8005540:	187a      	adds	r2, r7, r1
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	1d7b      	adds	r3, r7, #5
 8005546:	33ff      	adds	r3, #255	; 0xff
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	221f      	movs	r2, #31
 800554c:	4013      	ands	r3, r2
 800554e:	d104      	bne.n	800555a <USB_EPStartXfer+0x5f2>
 8005550:	187b      	adds	r3, r7, r1
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3b01      	subs	r3, #1
 8005556:	187a      	adds	r2, r7, r1
 8005558:	6013      	str	r3, [r2, #0]
 800555a:	23f4      	movs	r3, #244	; 0xf4
 800555c:	18fb      	adds	r3, r7, r3
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	b29b      	uxth	r3, r3
 8005562:	029b      	lsls	r3, r3, #10
 8005564:	b29b      	uxth	r3, r3
 8005566:	4a3f      	ldr	r2, [pc, #252]	; (8005664 <USB_EPStartXfer+0x6fc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	b29a      	uxth	r2, r3
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e01a      	b.n	80055a8 <USB_EPStartXfer+0x640>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	785b      	ldrb	r3, [r3, #1]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d116      	bne.n	80055a8 <USB_EPStartXfer+0x640>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2250      	movs	r2, #80	; 0x50
 800557e:	5a9b      	ldrh	r3, [r3, r2]
 8005580:	b29b      	uxth	r3, r3
 8005582:	001a      	movs	r2, r3
 8005584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005586:	189b      	adds	r3, r3, r2
 8005588:	643b      	str	r3, [r7, #64]	; 0x40
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	00da      	lsls	r2, r3, #3
 8005590:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005592:	18d3      	adds	r3, r2, r3
 8005594:	4a34      	ldr	r2, [pc, #208]	; (8005668 <USB_EPStartXfer+0x700>)
 8005596:	4694      	mov	ip, r2
 8005598:	4463      	add	r3, ip
 800559a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800559c:	1d7b      	adds	r3, r7, #5
 800559e:	33ff      	adds	r3, #255	; 0xff
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055a8:	2076      	movs	r0, #118	; 0x76
 80055aa:	183b      	adds	r3, r7, r0
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	8952      	ldrh	r2, [r2, #10]
 80055b0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6959      	ldr	r1, [r3, #20]
 80055b6:	1d7b      	adds	r3, r7, #5
 80055b8:	33ff      	adds	r3, #255	; 0xff
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b29c      	uxth	r4, r3
 80055be:	183b      	adds	r3, r7, r0
 80055c0:	881a      	ldrh	r2, [r3, #0]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	0023      	movs	r3, r4
 80055c6:	f000 fec3 	bl	8006350 <USB_WritePMA>
 80055ca:	e1a2      	b.n	8005912 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	1d7a      	adds	r2, r7, #5
 80055d2:	32ff      	adds	r2, #255	; 0xff
 80055d4:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	18d3      	adds	r3, r2, r3
 80055e0:	881b      	ldrh	r3, [r3, #0]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	2062      	movs	r0, #98	; 0x62
 80055e6:	183b      	adds	r3, r7, r0
 80055e8:	4920      	ldr	r1, [pc, #128]	; (800566c <USB_EPStartXfer+0x704>)
 80055ea:	400a      	ands	r2, r1
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	183a      	adds	r2, r7, r0
 80055fa:	8812      	ldrh	r2, [r2, #0]
 80055fc:	491c      	ldr	r1, [pc, #112]	; (8005670 <USB_EPStartXfer+0x708>)
 80055fe:	430a      	orrs	r2, r1
 8005600:	b292      	uxth	r2, r2
 8005602:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2250      	movs	r2, #80	; 0x50
 800560c:	5a9b      	ldrh	r3, [r3, r2]
 800560e:	b29b      	uxth	r3, r3
 8005610:	001a      	movs	r2, r3
 8005612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005614:	189b      	adds	r3, r3, r2
 8005616:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005620:	18d3      	adds	r3, r2, r3
 8005622:	4a0e      	ldr	r2, [pc, #56]	; (800565c <USB_EPStartXfer+0x6f4>)
 8005624:	4694      	mov	ip, r2
 8005626:	4463      	add	r3, ip
 8005628:	65bb      	str	r3, [r7, #88]	; 0x58
 800562a:	1d7b      	adds	r3, r7, #5
 800562c:	33ff      	adds	r3, #255	; 0xff
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	b29a      	uxth	r2, r3
 8005632:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005634:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005636:	2076      	movs	r0, #118	; 0x76
 8005638:	183b      	adds	r3, r7, r0
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	8912      	ldrh	r2, [r2, #8]
 800563e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6959      	ldr	r1, [r3, #20]
 8005644:	1d7b      	adds	r3, r7, #5
 8005646:	33ff      	adds	r3, #255	; 0xff
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	b29c      	uxth	r4, r3
 800564c:	183b      	adds	r3, r7, r0
 800564e:	881a      	ldrh	r2, [r3, #0]
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	0023      	movs	r3, r4
 8005654:	f000 fe7c 	bl	8006350 <USB_WritePMA>
 8005658:	e15b      	b.n	8005912 <USB_EPStartXfer+0x9aa>
 800565a:	46c0      	nop			; (mov r8, r8)
 800565c:	00000402 	.word	0x00000402
 8005660:	ffff83ff 	.word	0xffff83ff
 8005664:	ffff8000 	.word	0xffff8000
 8005668:	00000406 	.word	0x00000406
 800566c:	ffff8e8f 	.word	0xffff8e8f
 8005670:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6a1a      	ldr	r2, [r3, #32]
 8005678:	1d7b      	adds	r3, r7, #5
 800567a:	33ff      	adds	r3, #255	; 0xff
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	1ad2      	subs	r2, r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	18d3      	adds	r3, r2, r3
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	001a      	movs	r2, r3
 8005694:	2340      	movs	r3, #64	; 0x40
 8005696:	4013      	ands	r3, r2
 8005698:	d100      	bne.n	800569c <USB_EPStartXfer+0x734>
 800569a:	e099      	b.n	80057d0 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	673b      	str	r3, [r7, #112]	; 0x70
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	785b      	ldrb	r3, [r3, #1]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d166      	bne.n	8005776 <USB_EPStartXfer+0x80e>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2250      	movs	r2, #80	; 0x50
 80056b0:	5a9b      	ldrh	r3, [r3, r2]
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	001a      	movs	r2, r3
 80056b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056b8:	189b      	adds	r3, r3, r2
 80056ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	00da      	lsls	r2, r3, #3
 80056c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80056c4:	18d3      	adds	r3, r2, r3
 80056c6:	4ad0      	ldr	r2, [pc, #832]	; (8005a08 <USB_EPStartXfer+0xaa0>)
 80056c8:	4694      	mov	ip, r2
 80056ca:	4463      	add	r3, ip
 80056cc:	667b      	str	r3, [r7, #100]	; 0x64
 80056ce:	1d7b      	adds	r3, r7, #5
 80056d0:	33ff      	adds	r3, #255	; 0xff
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d110      	bne.n	80056fa <USB_EPStartXfer+0x792>
 80056d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056da:	881b      	ldrh	r3, [r3, #0]
 80056dc:	b29b      	uxth	r3, r3
 80056de:	4acb      	ldr	r2, [pc, #812]	; (8005a0c <USB_EPStartXfer+0xaa4>)
 80056e0:	4013      	ands	r3, r2
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056e6:	801a      	strh	r2, [r3, #0]
 80056e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	4ac8      	ldr	r2, [pc, #800]	; (8005a10 <USB_EPStartXfer+0xaa8>)
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f6:	801a      	strh	r2, [r3, #0]
 80056f8:	e058      	b.n	80057ac <USB_EPStartXfer+0x844>
 80056fa:	1d7b      	adds	r3, r7, #5
 80056fc:	33ff      	adds	r3, #255	; 0xff
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b3e      	cmp	r3, #62	; 0x3e
 8005702:	d81a      	bhi.n	800573a <USB_EPStartXfer+0x7d2>
 8005704:	1d7b      	adds	r3, r7, #5
 8005706:	33ff      	adds	r3, #255	; 0xff
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	085b      	lsrs	r3, r3, #1
 800570c:	21f0      	movs	r1, #240	; 0xf0
 800570e:	187a      	adds	r2, r7, r1
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	1d7b      	adds	r3, r7, #5
 8005714:	33ff      	adds	r3, #255	; 0xff
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	4013      	ands	r3, r2
 800571c:	d004      	beq.n	8005728 <USB_EPStartXfer+0x7c0>
 800571e:	187b      	adds	r3, r7, r1
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	187a      	adds	r2, r7, r1
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	23f0      	movs	r3, #240	; 0xf0
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	029b      	lsls	r3, r3, #10
 8005732:	b29a      	uxth	r2, r3
 8005734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005736:	801a      	strh	r2, [r3, #0]
 8005738:	e038      	b.n	80057ac <USB_EPStartXfer+0x844>
 800573a:	1d7b      	adds	r3, r7, #5
 800573c:	33ff      	adds	r3, #255	; 0xff
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	21f0      	movs	r1, #240	; 0xf0
 8005744:	187a      	adds	r2, r7, r1
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	1d7b      	adds	r3, r7, #5
 800574a:	33ff      	adds	r3, #255	; 0xff
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	221f      	movs	r2, #31
 8005750:	4013      	ands	r3, r2
 8005752:	d104      	bne.n	800575e <USB_EPStartXfer+0x7f6>
 8005754:	187b      	adds	r3, r7, r1
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3b01      	subs	r3, #1
 800575a:	187a      	adds	r2, r7, r1
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	23f0      	movs	r3, #240	; 0xf0
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	b29b      	uxth	r3, r3
 8005766:	029b      	lsls	r3, r3, #10
 8005768:	b29b      	uxth	r3, r3
 800576a:	4aa9      	ldr	r2, [pc, #676]	; (8005a10 <USB_EPStartXfer+0xaa8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	b29a      	uxth	r2, r3
 8005770:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e01a      	b.n	80057ac <USB_EPStartXfer+0x844>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	785b      	ldrb	r3, [r3, #1]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d116      	bne.n	80057ac <USB_EPStartXfer+0x844>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2250      	movs	r2, #80	; 0x50
 8005782:	5a9b      	ldrh	r3, [r3, r2]
 8005784:	b29b      	uxth	r3, r3
 8005786:	001a      	movs	r2, r3
 8005788:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800578a:	189b      	adds	r3, r3, r2
 800578c:	673b      	str	r3, [r7, #112]	; 0x70
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	00da      	lsls	r2, r3, #3
 8005794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005796:	18d3      	adds	r3, r2, r3
 8005798:	4a9b      	ldr	r2, [pc, #620]	; (8005a08 <USB_EPStartXfer+0xaa0>)
 800579a:	4694      	mov	ip, r2
 800579c:	4463      	add	r3, ip
 800579e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a0:	1d7b      	adds	r3, r7, #5
 80057a2:	33ff      	adds	r3, #255	; 0xff
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057ac:	2076      	movs	r0, #118	; 0x76
 80057ae:	183b      	adds	r3, r7, r0
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	8952      	ldrh	r2, [r2, #10]
 80057b4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	6959      	ldr	r1, [r3, #20]
 80057ba:	1d7b      	adds	r3, r7, #5
 80057bc:	33ff      	adds	r3, #255	; 0xff
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	b29c      	uxth	r4, r3
 80057c2:	183b      	adds	r3, r7, r0
 80057c4:	881a      	ldrh	r2, [r3, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	0023      	movs	r3, r4
 80057ca:	f000 fdc1 	bl	8006350 <USB_WritePMA>
 80057ce:	e0a0      	b.n	8005912 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	785b      	ldrb	r3, [r3, #1]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d166      	bne.n	80058a6 <USB_EPStartXfer+0x93e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2250      	movs	r2, #80	; 0x50
 80057e0:	5a9b      	ldrh	r3, [r3, r2]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	001a      	movs	r2, r3
 80057e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	00da      	lsls	r2, r3, #3
 80057f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057f4:	18d3      	adds	r3, r2, r3
 80057f6:	4a87      	ldr	r2, [pc, #540]	; (8005a14 <USB_EPStartXfer+0xaac>)
 80057f8:	4694      	mov	ip, r2
 80057fa:	4463      	add	r3, ip
 80057fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80057fe:	1d7b      	adds	r3, r7, #5
 8005800:	33ff      	adds	r3, #255	; 0xff
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d110      	bne.n	800582a <USB_EPStartXfer+0x8c2>
 8005808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580a:	881b      	ldrh	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	4a7f      	ldr	r2, [pc, #508]	; (8005a0c <USB_EPStartXfer+0xaa4>)
 8005810:	4013      	ands	r3, r2
 8005812:	b29a      	uxth	r2, r3
 8005814:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005816:	801a      	strh	r2, [r3, #0]
 8005818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	4a7c      	ldr	r2, [pc, #496]	; (8005a10 <USB_EPStartXfer+0xaa8>)
 8005820:	4313      	orrs	r3, r2
 8005822:	b29a      	uxth	r2, r3
 8005824:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e062      	b.n	80058f0 <USB_EPStartXfer+0x988>
 800582a:	1d7b      	adds	r3, r7, #5
 800582c:	33ff      	adds	r3, #255	; 0xff
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b3e      	cmp	r3, #62	; 0x3e
 8005832:	d81a      	bhi.n	800586a <USB_EPStartXfer+0x902>
 8005834:	1d7b      	adds	r3, r7, #5
 8005836:	33ff      	adds	r3, #255	; 0xff
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	21ec      	movs	r1, #236	; 0xec
 800583e:	187a      	adds	r2, r7, r1
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	1d7b      	adds	r3, r7, #5
 8005844:	33ff      	adds	r3, #255	; 0xff
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2201      	movs	r2, #1
 800584a:	4013      	ands	r3, r2
 800584c:	d004      	beq.n	8005858 <USB_EPStartXfer+0x8f0>
 800584e:	187b      	adds	r3, r7, r1
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3301      	adds	r3, #1
 8005854:	187a      	adds	r2, r7, r1
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	23ec      	movs	r3, #236	; 0xec
 800585a:	18fb      	adds	r3, r7, r3
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	b29b      	uxth	r3, r3
 8005860:	029b      	lsls	r3, r3, #10
 8005862:	b29a      	uxth	r2, r3
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e042      	b.n	80058f0 <USB_EPStartXfer+0x988>
 800586a:	1d7b      	adds	r3, r7, #5
 800586c:	33ff      	adds	r3, #255	; 0xff
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	095b      	lsrs	r3, r3, #5
 8005872:	21ec      	movs	r1, #236	; 0xec
 8005874:	187a      	adds	r2, r7, r1
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	1d7b      	adds	r3, r7, #5
 800587a:	33ff      	adds	r3, #255	; 0xff
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	221f      	movs	r2, #31
 8005880:	4013      	ands	r3, r2
 8005882:	d104      	bne.n	800588e <USB_EPStartXfer+0x926>
 8005884:	187b      	adds	r3, r7, r1
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3b01      	subs	r3, #1
 800588a:	187a      	adds	r2, r7, r1
 800588c:	6013      	str	r3, [r2, #0]
 800588e:	23ec      	movs	r3, #236	; 0xec
 8005890:	18fb      	adds	r3, r7, r3
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	b29b      	uxth	r3, r3
 8005896:	029b      	lsls	r3, r3, #10
 8005898:	b29b      	uxth	r3, r3
 800589a:	4a5d      	ldr	r2, [pc, #372]	; (8005a10 <USB_EPStartXfer+0xaa8>)
 800589c:	4313      	orrs	r3, r2
 800589e:	b29a      	uxth	r2, r3
 80058a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a2:	801a      	strh	r2, [r3, #0]
 80058a4:	e024      	b.n	80058f0 <USB_EPStartXfer+0x988>
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	785b      	ldrb	r3, [r3, #1]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d120      	bne.n	80058f0 <USB_EPStartXfer+0x988>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2184      	movs	r1, #132	; 0x84
 80058b2:	187a      	adds	r2, r7, r1
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2250      	movs	r2, #80	; 0x50
 80058ba:	5a9b      	ldrh	r3, [r3, r2]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	001a      	movs	r2, r3
 80058c0:	187b      	adds	r3, r7, r1
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	187a      	adds	r2, r7, r1
 80058c8:	6013      	str	r3, [r2, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	00da      	lsls	r2, r3, #3
 80058d0:	187b      	adds	r3, r7, r1
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	18d3      	adds	r3, r2, r3
 80058d6:	4a4f      	ldr	r2, [pc, #316]	; (8005a14 <USB_EPStartXfer+0xaac>)
 80058d8:	4694      	mov	ip, r2
 80058da:	4463      	add	r3, ip
 80058dc:	2180      	movs	r1, #128	; 0x80
 80058de:	187a      	adds	r2, r7, r1
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	1d7b      	adds	r3, r7, #5
 80058e4:	33ff      	adds	r3, #255	; 0xff
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	187b      	adds	r3, r7, r1
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058f0:	2076      	movs	r0, #118	; 0x76
 80058f2:	183b      	adds	r3, r7, r0
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	8912      	ldrh	r2, [r2, #8]
 80058f8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6959      	ldr	r1, [r3, #20]
 80058fe:	1d7b      	adds	r3, r7, #5
 8005900:	33ff      	adds	r3, #255	; 0xff
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b29c      	uxth	r4, r3
 8005906:	183b      	adds	r3, r7, r0
 8005908:	881a      	ldrh	r2, [r3, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	0023      	movs	r3, r4
 800590e:	f000 fd1f 	bl	8006350 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	18d3      	adds	r3, r2, r3
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	b29a      	uxth	r2, r3
 8005920:	200a      	movs	r0, #10
 8005922:	183b      	adds	r3, r7, r0
 8005924:	493c      	ldr	r1, [pc, #240]	; (8005a18 <USB_EPStartXfer+0xab0>)
 8005926:	400a      	ands	r2, r1
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	183b      	adds	r3, r7, r0
 800592c:	183a      	adds	r2, r7, r0
 800592e:	8812      	ldrh	r2, [r2, #0]
 8005930:	2110      	movs	r1, #16
 8005932:	404a      	eors	r2, r1
 8005934:	801a      	strh	r2, [r3, #0]
 8005936:	183b      	adds	r3, r7, r0
 8005938:	183a      	adds	r2, r7, r0
 800593a:	8812      	ldrh	r2, [r2, #0]
 800593c:	2120      	movs	r1, #32
 800593e:	404a      	eors	r2, r1
 8005940:	801a      	strh	r2, [r3, #0]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	18d3      	adds	r3, r2, r3
 800594c:	183a      	adds	r2, r7, r0
 800594e:	8812      	ldrh	r2, [r2, #0]
 8005950:	4932      	ldr	r1, [pc, #200]	; (8005a1c <USB_EPStartXfer+0xab4>)
 8005952:	430a      	orrs	r2, r1
 8005954:	b292      	uxth	r2, r2
 8005956:	801a      	strh	r2, [r3, #0]
 8005958:	f000 fbaf 	bl	80060ba <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	7b1b      	ldrb	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d000      	beq.n	8005966 <USB_EPStartXfer+0x9fe>
 8005964:	e09e      	b.n	8005aa4 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	429a      	cmp	r2, r3
 8005970:	d90d      	bls.n	800598e <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	1d7a      	adds	r2, r7, #5
 8005978:	32ff      	adds	r2, #255	; 0xff
 800597a:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699a      	ldr	r2, [r3, #24]
 8005980:	1d7b      	adds	r3, r7, #5
 8005982:	33ff      	adds	r3, #255	; 0xff
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	1ad2      	subs	r2, r2, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	619a      	str	r2, [r3, #24]
 800598c:	e007      	b.n	800599e <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
 8005992:	1d7a      	adds	r2, r7, #5
 8005994:	32ff      	adds	r2, #255	; 0xff
 8005996:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2200      	movs	r2, #0
 800599c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2190      	movs	r1, #144	; 0x90
 80059a2:	187a      	adds	r2, r7, r1
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2250      	movs	r2, #80	; 0x50
 80059aa:	5a9b      	ldrh	r3, [r3, r2]
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	001a      	movs	r2, r3
 80059b0:	187b      	adds	r3, r7, r1
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	189b      	adds	r3, r3, r2
 80059b6:	187a      	adds	r2, r7, r1
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	00da      	lsls	r2, r3, #3
 80059c0:	187b      	adds	r3, r7, r1
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	18d3      	adds	r3, r2, r3
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <USB_EPStartXfer+0xaa0>)
 80059c8:	4694      	mov	ip, r2
 80059ca:	4463      	add	r3, ip
 80059cc:	218c      	movs	r1, #140	; 0x8c
 80059ce:	187a      	adds	r2, r7, r1
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	1d7b      	adds	r3, r7, #5
 80059d4:	33ff      	adds	r3, #255	; 0xff
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d121      	bne.n	8005a20 <USB_EPStartXfer+0xab8>
 80059dc:	187b      	adds	r3, r7, r1
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <USB_EPStartXfer+0xaa4>)
 80059e6:	4013      	ands	r3, r2
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	187b      	adds	r3, r7, r1
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	187b      	adds	r3, r7, r1
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4a05      	ldr	r2, [pc, #20]	; (8005a10 <USB_EPStartXfer+0xaa8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	187b      	adds	r3, r7, r1
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	801a      	strh	r2, [r3, #0]
 8005a04:	e334      	b.n	8006070 <USB_EPStartXfer+0x1108>
 8005a06:	46c0      	nop			; (mov r8, r8)
 8005a08:	00000406 	.word	0x00000406
 8005a0c:	ffff83ff 	.word	0xffff83ff
 8005a10:	ffff8000 	.word	0xffff8000
 8005a14:	00000402 	.word	0x00000402
 8005a18:	ffff8fbf 	.word	0xffff8fbf
 8005a1c:	ffff8080 	.word	0xffff8080
 8005a20:	1d7b      	adds	r3, r7, #5
 8005a22:	33ff      	adds	r3, #255	; 0xff
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b3e      	cmp	r3, #62	; 0x3e
 8005a28:	d81c      	bhi.n	8005a64 <USB_EPStartXfer+0xafc>
 8005a2a:	1d7b      	adds	r3, r7, #5
 8005a2c:	33ff      	adds	r3, #255	; 0xff
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	085b      	lsrs	r3, r3, #1
 8005a32:	21e8      	movs	r1, #232	; 0xe8
 8005a34:	187a      	adds	r2, r7, r1
 8005a36:	6013      	str	r3, [r2, #0]
 8005a38:	1d7b      	adds	r3, r7, #5
 8005a3a:	33ff      	adds	r3, #255	; 0xff
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	4013      	ands	r3, r2
 8005a42:	d004      	beq.n	8005a4e <USB_EPStartXfer+0xae6>
 8005a44:	187b      	adds	r3, r7, r1
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	3301      	adds	r3, #1
 8005a4a:	187a      	adds	r2, r7, r1
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	23e8      	movs	r3, #232	; 0xe8
 8005a50:	18fb      	adds	r3, r7, r3
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	029b      	lsls	r3, r3, #10
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	238c      	movs	r3, #140	; 0x8c
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	e305      	b.n	8006070 <USB_EPStartXfer+0x1108>
 8005a64:	1d7b      	adds	r3, r7, #5
 8005a66:	33ff      	adds	r3, #255	; 0xff
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	21e8      	movs	r1, #232	; 0xe8
 8005a6e:	187a      	adds	r2, r7, r1
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	1d7b      	adds	r3, r7, #5
 8005a74:	33ff      	adds	r3, #255	; 0xff
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	221f      	movs	r2, #31
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d104      	bne.n	8005a88 <USB_EPStartXfer+0xb20>
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	187a      	adds	r2, r7, r1
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	23e8      	movs	r3, #232	; 0xe8
 8005a8a:	18fb      	adds	r3, r7, r3
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	029b      	lsls	r3, r3, #10
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	4aca      	ldr	r2, [pc, #808]	; (8005dc0 <USB_EPStartXfer+0xe58>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	238c      	movs	r3, #140	; 0x8c
 8005a9c:	18fb      	adds	r3, r7, r3
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	801a      	strh	r2, [r3, #0]
 8005aa2:	e2e5      	b.n	8006070 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	78db      	ldrb	r3, [r3, #3]
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d000      	beq.n	8005aae <USB_EPStartXfer+0xb46>
 8005aac:	e16f      	b.n	8005d8e <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	785b      	ldrb	r3, [r3, #1]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d16f      	bne.n	8005b96 <USB_EPStartXfer+0xc2e>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	21ac      	movs	r1, #172	; 0xac
 8005aba:	187a      	adds	r2, r7, r1
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2250      	movs	r2, #80	; 0x50
 8005ac2:	5a9b      	ldrh	r3, [r3, r2]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	001a      	movs	r2, r3
 8005ac8:	187b      	adds	r3, r7, r1
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	189b      	adds	r3, r3, r2
 8005ace:	187a      	adds	r2, r7, r1
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	00da      	lsls	r2, r3, #3
 8005ad8:	187b      	adds	r3, r7, r1
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	18d3      	adds	r3, r2, r3
 8005ade:	4ab9      	ldr	r2, [pc, #740]	; (8005dc4 <USB_EPStartXfer+0xe5c>)
 8005ae0:	4694      	mov	ip, r2
 8005ae2:	4463      	add	r3, ip
 8005ae4:	21a8      	movs	r1, #168	; 0xa8
 8005ae6:	187a      	adds	r2, r7, r1
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d114      	bne.n	8005b1c <USB_EPStartXfer+0xbb4>
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	881b      	ldrh	r3, [r3, #0]
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	4ab3      	ldr	r2, [pc, #716]	; (8005dc8 <USB_EPStartXfer+0xe60>)
 8005afc:	4013      	ands	r3, r2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	187b      	adds	r3, r7, r1
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	4aac      	ldr	r2, [pc, #688]	; (8005dc0 <USB_EPStartXfer+0xe58>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	187b      	adds	r3, r7, r1
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	801a      	strh	r2, [r3, #0]
 8005b1a:	e060      	b.n	8005bde <USB_EPStartXfer+0xc76>
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b3e      	cmp	r3, #62	; 0x3e
 8005b22:	d81a      	bhi.n	8005b5a <USB_EPStartXfer+0xbf2>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	21e4      	movs	r1, #228	; 0xe4
 8005b2c:	187a      	adds	r2, r7, r1
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	2201      	movs	r2, #1
 8005b36:	4013      	ands	r3, r2
 8005b38:	d004      	beq.n	8005b44 <USB_EPStartXfer+0xbdc>
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	187a      	adds	r2, r7, r1
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	23e4      	movs	r3, #228	; 0xe4
 8005b46:	18fb      	adds	r3, r7, r3
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	23a8      	movs	r3, #168	; 0xa8
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	801a      	strh	r2, [r3, #0]
 8005b58:	e041      	b.n	8005bde <USB_EPStartXfer+0xc76>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	095b      	lsrs	r3, r3, #5
 8005b60:	21e4      	movs	r1, #228	; 0xe4
 8005b62:	187a      	adds	r2, r7, r1
 8005b64:	6013      	str	r3, [r2, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	221f      	movs	r2, #31
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d104      	bne.n	8005b7a <USB_EPStartXfer+0xc12>
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	187a      	adds	r2, r7, r1
 8005b78:	6013      	str	r3, [r2, #0]
 8005b7a:	23e4      	movs	r3, #228	; 0xe4
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	029b      	lsls	r3, r3, #10
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4a8e      	ldr	r2, [pc, #568]	; (8005dc0 <USB_EPStartXfer+0xe58>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	23a8      	movs	r3, #168	; 0xa8
 8005b8e:	18fb      	adds	r3, r7, r3
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e023      	b.n	8005bde <USB_EPStartXfer+0xc76>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d11f      	bne.n	8005bde <USB_EPStartXfer+0xc76>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	21b4      	movs	r1, #180	; 0xb4
 8005ba2:	187a      	adds	r2, r7, r1
 8005ba4:	6013      	str	r3, [r2, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2250      	movs	r2, #80	; 0x50
 8005baa:	5a9b      	ldrh	r3, [r3, r2]
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	001a      	movs	r2, r3
 8005bb0:	187b      	adds	r3, r7, r1
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	189b      	adds	r3, r3, r2
 8005bb6:	187a      	adds	r2, r7, r1
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	00da      	lsls	r2, r3, #3
 8005bc0:	187b      	adds	r3, r7, r1
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	18d3      	adds	r3, r2, r3
 8005bc6:	4a7f      	ldr	r2, [pc, #508]	; (8005dc4 <USB_EPStartXfer+0xe5c>)
 8005bc8:	4694      	mov	ip, r2
 8005bca:	4463      	add	r3, ip
 8005bcc:	21b0      	movs	r1, #176	; 0xb0
 8005bce:	187a      	adds	r2, r7, r1
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	187b      	adds	r3, r7, r1
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	22a4      	movs	r2, #164	; 0xa4
 8005be2:	18ba      	adds	r2, r7, r2
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d16f      	bne.n	8005cce <USB_EPStartXfer+0xd66>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	219c      	movs	r1, #156	; 0x9c
 8005bf2:	187a      	adds	r2, r7, r1
 8005bf4:	6013      	str	r3, [r2, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2250      	movs	r2, #80	; 0x50
 8005bfa:	5a9b      	ldrh	r3, [r3, r2]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	001a      	movs	r2, r3
 8005c00:	187b      	adds	r3, r7, r1
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	189b      	adds	r3, r3, r2
 8005c06:	187a      	adds	r2, r7, r1
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	00da      	lsls	r2, r3, #3
 8005c10:	187b      	adds	r3, r7, r1
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	18d3      	adds	r3, r2, r3
 8005c16:	4a6d      	ldr	r2, [pc, #436]	; (8005dcc <USB_EPStartXfer+0xe64>)
 8005c18:	4694      	mov	ip, r2
 8005c1a:	4463      	add	r3, ip
 8005c1c:	2198      	movs	r1, #152	; 0x98
 8005c1e:	187a      	adds	r2, r7, r1
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d114      	bne.n	8005c54 <USB_EPStartXfer+0xcec>
 8005c2a:	187b      	adds	r3, r7, r1
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	4a65      	ldr	r2, [pc, #404]	; (8005dc8 <USB_EPStartXfer+0xe60>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	187b      	adds	r3, r7, r1
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	801a      	strh	r2, [r3, #0]
 8005c3e:	187b      	adds	r3, r7, r1
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	4a5e      	ldr	r2, [pc, #376]	; (8005dc0 <USB_EPStartXfer+0xe58>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	187b      	adds	r3, r7, r1
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	801a      	strh	r2, [r3, #0]
 8005c52:	e05d      	b.n	8005d10 <USB_EPStartXfer+0xda8>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	2b3e      	cmp	r3, #62	; 0x3e
 8005c5a:	d81a      	bhi.n	8005c92 <USB_EPStartXfer+0xd2a>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	085b      	lsrs	r3, r3, #1
 8005c62:	21e0      	movs	r1, #224	; 0xe0
 8005c64:	187a      	adds	r2, r7, r1
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	4013      	ands	r3, r2
 8005c70:	d004      	beq.n	8005c7c <USB_EPStartXfer+0xd14>
 8005c72:	187b      	adds	r3, r7, r1
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	187a      	adds	r2, r7, r1
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	23e0      	movs	r3, #224	; 0xe0
 8005c7e:	18fb      	adds	r3, r7, r3
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	029b      	lsls	r3, r3, #10
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	2398      	movs	r3, #152	; 0x98
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	801a      	strh	r2, [r3, #0]
 8005c90:	e03e      	b.n	8005d10 <USB_EPStartXfer+0xda8>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	21e0      	movs	r1, #224	; 0xe0
 8005c9a:	187a      	adds	r2, r7, r1
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	221f      	movs	r2, #31
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d104      	bne.n	8005cb2 <USB_EPStartXfer+0xd4a>
 8005ca8:	187b      	adds	r3, r7, r1
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3b01      	subs	r3, #1
 8005cae:	187a      	adds	r2, r7, r1
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	23e0      	movs	r3, #224	; 0xe0
 8005cb4:	18fb      	adds	r3, r7, r3
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	029b      	lsls	r3, r3, #10
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	4a40      	ldr	r2, [pc, #256]	; (8005dc0 <USB_EPStartXfer+0xe58>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	2398      	movs	r3, #152	; 0x98
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	e020      	b.n	8005d10 <USB_EPStartXfer+0xda8>
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d11c      	bne.n	8005d10 <USB_EPStartXfer+0xda8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2250      	movs	r2, #80	; 0x50
 8005cda:	5a9b      	ldrh	r3, [r3, r2]
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	001a      	movs	r2, r3
 8005ce0:	21a4      	movs	r1, #164	; 0xa4
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	189b      	adds	r3, r3, r2
 8005ce8:	187a      	adds	r2, r7, r1
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	00da      	lsls	r2, r3, #3
 8005cf2:	187b      	adds	r3, r7, r1
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	18d3      	adds	r3, r2, r3
 8005cf8:	4a34      	ldr	r2, [pc, #208]	; (8005dcc <USB_EPStartXfer+0xe64>)
 8005cfa:	4694      	mov	ip, r2
 8005cfc:	4463      	add	r3, ip
 8005cfe:	21a0      	movs	r1, #160	; 0xa0
 8005d00:	187a      	adds	r2, r7, r1
 8005d02:	6013      	str	r3, [r2, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	187b      	adds	r3, r7, r1
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d100      	bne.n	8005d1a <USB_EPStartXfer+0xdb2>
 8005d18:	e1aa      	b.n	8006070 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	18d2      	adds	r2, r2, r3
 8005d24:	2196      	movs	r1, #150	; 0x96
 8005d26:	187b      	adds	r3, r7, r1
 8005d28:	8812      	ldrh	r2, [r2, #0]
 8005d2a:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	2380      	movs	r3, #128	; 0x80
 8005d32:	01db      	lsls	r3, r3, #7
 8005d34:	4013      	ands	r3, r2
 8005d36:	d004      	beq.n	8005d42 <USB_EPStartXfer+0xdda>
 8005d38:	187b      	adds	r3, r7, r1
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	2240      	movs	r2, #64	; 0x40
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d10d      	bne.n	8005d5e <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d42:	2196      	movs	r1, #150	; 0x96
 8005d44:	187b      	adds	r3, r7, r1
 8005d46:	881a      	ldrh	r2, [r3, #0]
 8005d48:	2380      	movs	r3, #128	; 0x80
 8005d4a:	01db      	lsls	r3, r3, #7
 8005d4c:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005d4e:	d000      	beq.n	8005d52 <USB_EPStartXfer+0xdea>
 8005d50:	e18e      	b.n	8006070 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	2240      	movs	r2, #64	; 0x40
 8005d58:	4013      	ands	r3, r2
 8005d5a:	d000      	beq.n	8005d5e <USB_EPStartXfer+0xdf6>
 8005d5c:	e188      	b.n	8006070 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	18d3      	adds	r3, r2, r3
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	2094      	movs	r0, #148	; 0x94
 8005d6e:	183b      	adds	r3, r7, r0
 8005d70:	4917      	ldr	r1, [pc, #92]	; (8005dd0 <USB_EPStartXfer+0xe68>)
 8005d72:	400a      	ands	r2, r1
 8005d74:	801a      	strh	r2, [r3, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	18d3      	adds	r3, r2, r3
 8005d80:	183a      	adds	r2, r7, r0
 8005d82:	8812      	ldrh	r2, [r2, #0]
 8005d84:	4913      	ldr	r1, [pc, #76]	; (8005dd4 <USB_EPStartXfer+0xe6c>)
 8005d86:	430a      	orrs	r2, r1
 8005d88:	b292      	uxth	r2, r2
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	e170      	b.n	8006070 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	78db      	ldrb	r3, [r3, #3]
 8005d92:	2b01      	cmp	r3, #1
 8005d94:	d000      	beq.n	8005d98 <USB_EPStartXfer+0xe30>
 8005d96:	e169      	b.n	800606c <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	699a      	ldr	r2, [r3, #24]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d919      	bls.n	8005dd8 <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	1d7a      	adds	r2, r7, #5
 8005daa:	32ff      	adds	r2, #255	; 0xff
 8005dac:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	1d7b      	adds	r3, r7, #5
 8005db4:	33ff      	adds	r3, #255	; 0xff
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	1ad2      	subs	r2, r2, r3
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	619a      	str	r2, [r3, #24]
 8005dbe:	e013      	b.n	8005de8 <USB_EPStartXfer+0xe80>
 8005dc0:	ffff8000 	.word	0xffff8000
 8005dc4:	00000402 	.word	0x00000402
 8005dc8:	ffff83ff 	.word	0xffff83ff
 8005dcc:	00000406 	.word	0x00000406
 8005dd0:	ffff8f8f 	.word	0xffff8f8f
 8005dd4:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	1d7a      	adds	r2, r7, #5
 8005dde:	32ff      	adds	r2, #255	; 0xff
 8005de0:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2200      	movs	r2, #0
 8005de6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	785b      	ldrb	r3, [r3, #1]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d000      	beq.n	8005df2 <USB_EPStartXfer+0xe8a>
 8005df0:	e075      	b.n	8005ede <USB_EPStartXfer+0xf76>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	21cc      	movs	r1, #204	; 0xcc
 8005df6:	187a      	adds	r2, r7, r1
 8005df8:	6013      	str	r3, [r2, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2250      	movs	r2, #80	; 0x50
 8005dfe:	5a9b      	ldrh	r3, [r3, r2]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	001a      	movs	r2, r3
 8005e04:	187b      	adds	r3, r7, r1
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	189b      	adds	r3, r3, r2
 8005e0a:	187a      	adds	r2, r7, r1
 8005e0c:	6013      	str	r3, [r2, #0]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	00da      	lsls	r2, r3, #3
 8005e14:	187b      	adds	r3, r7, r1
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	18d3      	adds	r3, r2, r3
 8005e1a:	4aaa      	ldr	r2, [pc, #680]	; (80060c4 <USB_EPStartXfer+0x115c>)
 8005e1c:	4694      	mov	ip, r2
 8005e1e:	4463      	add	r3, ip
 8005e20:	21c8      	movs	r1, #200	; 0xc8
 8005e22:	187a      	adds	r2, r7, r1
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	1d7b      	adds	r3, r7, #5
 8005e28:	33ff      	adds	r3, #255	; 0xff
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d114      	bne.n	8005e5a <USB_EPStartXfer+0xef2>
 8005e30:	187b      	adds	r3, r7, r1
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	881b      	ldrh	r3, [r3, #0]
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	4aa3      	ldr	r2, [pc, #652]	; (80060c8 <USB_EPStartXfer+0x1160>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	187b      	adds	r3, r7, r1
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	187b      	adds	r3, r7, r1
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	4a9f      	ldr	r2, [pc, #636]	; (80060cc <USB_EPStartXfer+0x1164>)
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b29a      	uxth	r2, r3
 8005e52:	187b      	adds	r3, r7, r1
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	801a      	strh	r2, [r3, #0]
 8005e58:	e066      	b.n	8005f28 <USB_EPStartXfer+0xfc0>
 8005e5a:	1d7b      	adds	r3, r7, #5
 8005e5c:	33ff      	adds	r3, #255	; 0xff
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b3e      	cmp	r3, #62	; 0x3e
 8005e62:	d81c      	bhi.n	8005e9e <USB_EPStartXfer+0xf36>
 8005e64:	1d7b      	adds	r3, r7, #5
 8005e66:	33ff      	adds	r3, #255	; 0xff
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	085b      	lsrs	r3, r3, #1
 8005e6c:	21dc      	movs	r1, #220	; 0xdc
 8005e6e:	187a      	adds	r2, r7, r1
 8005e70:	6013      	str	r3, [r2, #0]
 8005e72:	1d7b      	adds	r3, r7, #5
 8005e74:	33ff      	adds	r3, #255	; 0xff
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <USB_EPStartXfer+0xf20>
 8005e7e:	187b      	adds	r3, r7, r1
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	187a      	adds	r2, r7, r1
 8005e86:	6013      	str	r3, [r2, #0]
 8005e88:	23dc      	movs	r3, #220	; 0xdc
 8005e8a:	18fb      	adds	r3, r7, r3
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	029b      	lsls	r3, r3, #10
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	23c8      	movs	r3, #200	; 0xc8
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	801a      	strh	r2, [r3, #0]
 8005e9c:	e044      	b.n	8005f28 <USB_EPStartXfer+0xfc0>
 8005e9e:	1d7b      	adds	r3, r7, #5
 8005ea0:	33ff      	adds	r3, #255	; 0xff
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	21dc      	movs	r1, #220	; 0xdc
 8005ea8:	187a      	adds	r2, r7, r1
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	1d7b      	adds	r3, r7, #5
 8005eae:	33ff      	adds	r3, #255	; 0xff
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	221f      	movs	r2, #31
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d104      	bne.n	8005ec2 <USB_EPStartXfer+0xf5a>
 8005eb8:	187b      	adds	r3, r7, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	187a      	adds	r2, r7, r1
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	23dc      	movs	r3, #220	; 0xdc
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	029b      	lsls	r3, r3, #10
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	4a7f      	ldr	r2, [pc, #508]	; (80060cc <USB_EPStartXfer+0x1164>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	23c8      	movs	r3, #200	; 0xc8
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e024      	b.n	8005f28 <USB_EPStartXfer+0xfc0>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	785b      	ldrb	r3, [r3, #1]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d120      	bne.n	8005f28 <USB_EPStartXfer+0xfc0>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	21d4      	movs	r1, #212	; 0xd4
 8005eea:	187a      	adds	r2, r7, r1
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2250      	movs	r2, #80	; 0x50
 8005ef2:	5a9b      	ldrh	r3, [r3, r2]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	001a      	movs	r2, r3
 8005ef8:	187b      	adds	r3, r7, r1
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	189b      	adds	r3, r3, r2
 8005efe:	187a      	adds	r2, r7, r1
 8005f00:	6013      	str	r3, [r2, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	00da      	lsls	r2, r3, #3
 8005f08:	187b      	adds	r3, r7, r1
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	18d3      	adds	r3, r2, r3
 8005f0e:	4a6d      	ldr	r2, [pc, #436]	; (80060c4 <USB_EPStartXfer+0x115c>)
 8005f10:	4694      	mov	ip, r2
 8005f12:	4463      	add	r3, ip
 8005f14:	21d0      	movs	r1, #208	; 0xd0
 8005f16:	187a      	adds	r2, r7, r1
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	1d7b      	adds	r3, r7, #5
 8005f1c:	33ff      	adds	r3, #255	; 0xff
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	187b      	adds	r3, r7, r1
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	801a      	strh	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	22c4      	movs	r2, #196	; 0xc4
 8005f2c:	18ba      	adds	r2, r7, r2
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	785b      	ldrb	r3, [r3, #1]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d000      	beq.n	8005f3a <USB_EPStartXfer+0xfd2>
 8005f38:	e075      	b.n	8006026 <USB_EPStartXfer+0x10be>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	21bc      	movs	r1, #188	; 0xbc
 8005f3e:	187a      	adds	r2, r7, r1
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2250      	movs	r2, #80	; 0x50
 8005f46:	5a9b      	ldrh	r3, [r3, r2]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	187b      	adds	r3, r7, r1
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	189b      	adds	r3, r3, r2
 8005f52:	187a      	adds	r2, r7, r1
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	00da      	lsls	r2, r3, #3
 8005f5c:	187b      	adds	r3, r7, r1
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	18d3      	adds	r3, r2, r3
 8005f62:	4a5b      	ldr	r2, [pc, #364]	; (80060d0 <USB_EPStartXfer+0x1168>)
 8005f64:	4694      	mov	ip, r2
 8005f66:	4463      	add	r3, ip
 8005f68:	21b8      	movs	r1, #184	; 0xb8
 8005f6a:	187a      	adds	r2, r7, r1
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	1d7b      	adds	r3, r7, #5
 8005f70:	33ff      	adds	r3, #255	; 0xff
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d114      	bne.n	8005fa2 <USB_EPStartXfer+0x103a>
 8005f78:	187b      	adds	r3, r7, r1
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	4a51      	ldr	r2, [pc, #324]	; (80060c8 <USB_EPStartXfer+0x1160>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	187b      	adds	r3, r7, r1
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	187b      	adds	r3, r7, r1
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	4a4d      	ldr	r2, [pc, #308]	; (80060cc <USB_EPStartXfer+0x1164>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	b29a      	uxth	r2, r3
 8005f9a:	187b      	adds	r3, r7, r1
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	801a      	strh	r2, [r3, #0]
 8005fa0:	e066      	b.n	8006070 <USB_EPStartXfer+0x1108>
 8005fa2:	1d7b      	adds	r3, r7, #5
 8005fa4:	33ff      	adds	r3, #255	; 0xff
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005faa:	d81c      	bhi.n	8005fe6 <USB_EPStartXfer+0x107e>
 8005fac:	1d7b      	adds	r3, r7, #5
 8005fae:	33ff      	adds	r3, #255	; 0xff
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	085b      	lsrs	r3, r3, #1
 8005fb4:	21d8      	movs	r1, #216	; 0xd8
 8005fb6:	187a      	adds	r2, r7, r1
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	1d7b      	adds	r3, r7, #5
 8005fbc:	33ff      	adds	r3, #255	; 0xff
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d004      	beq.n	8005fd0 <USB_EPStartXfer+0x1068>
 8005fc6:	187b      	adds	r3, r7, r1
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	187a      	adds	r2, r7, r1
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	23d8      	movs	r3, #216	; 0xd8
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	029b      	lsls	r3, r3, #10
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	23b8      	movs	r3, #184	; 0xb8
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	801a      	strh	r2, [r3, #0]
 8005fe4:	e044      	b.n	8006070 <USB_EPStartXfer+0x1108>
 8005fe6:	1d7b      	adds	r3, r7, #5
 8005fe8:	33ff      	adds	r3, #255	; 0xff
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	21d8      	movs	r1, #216	; 0xd8
 8005ff0:	187a      	adds	r2, r7, r1
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	1d7b      	adds	r3, r7, #5
 8005ff6:	33ff      	adds	r3, #255	; 0xff
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	221f      	movs	r2, #31
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	d104      	bne.n	800600a <USB_EPStartXfer+0x10a2>
 8006000:	187b      	adds	r3, r7, r1
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3b01      	subs	r3, #1
 8006006:	187a      	adds	r2, r7, r1
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	23d8      	movs	r3, #216	; 0xd8
 800600c:	18fb      	adds	r3, r7, r3
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	029b      	lsls	r3, r3, #10
 8006014:	b29b      	uxth	r3, r3
 8006016:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <USB_EPStartXfer+0x1164>)
 8006018:	4313      	orrs	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	23b8      	movs	r3, #184	; 0xb8
 800601e:	18fb      	adds	r3, r7, r3
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e024      	b.n	8006070 <USB_EPStartXfer+0x1108>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d120      	bne.n	8006070 <USB_EPStartXfer+0x1108>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2250      	movs	r2, #80	; 0x50
 8006032:	5a9b      	ldrh	r3, [r3, r2]
 8006034:	b29b      	uxth	r3, r3
 8006036:	001a      	movs	r2, r3
 8006038:	21c4      	movs	r1, #196	; 0xc4
 800603a:	187b      	adds	r3, r7, r1
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	189b      	adds	r3, r3, r2
 8006040:	187a      	adds	r2, r7, r1
 8006042:	6013      	str	r3, [r2, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	00da      	lsls	r2, r3, #3
 800604a:	187b      	adds	r3, r7, r1
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	18d3      	adds	r3, r2, r3
 8006050:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <USB_EPStartXfer+0x1168>)
 8006052:	4694      	mov	ip, r2
 8006054:	4463      	add	r3, ip
 8006056:	21c0      	movs	r1, #192	; 0xc0
 8006058:	187a      	adds	r2, r7, r1
 800605a:	6013      	str	r3, [r2, #0]
 800605c:	1d7b      	adds	r3, r7, #5
 800605e:	33ff      	adds	r3, #255	; 0xff
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	b29a      	uxth	r2, r3
 8006064:	187b      	adds	r3, r7, r1
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	801a      	strh	r2, [r3, #0]
 800606a:	e001      	b.n	8006070 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e025      	b.n	80060bc <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	18d3      	adds	r3, r2, r3
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29a      	uxth	r2, r3
 800607e:	208a      	movs	r0, #138	; 0x8a
 8006080:	183b      	adds	r3, r7, r0
 8006082:	4914      	ldr	r1, [pc, #80]	; (80060d4 <USB_EPStartXfer+0x116c>)
 8006084:	400a      	ands	r2, r1
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	183b      	adds	r3, r7, r0
 800608a:	183a      	adds	r2, r7, r0
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	2180      	movs	r1, #128	; 0x80
 8006090:	0149      	lsls	r1, r1, #5
 8006092:	404a      	eors	r2, r1
 8006094:	801a      	strh	r2, [r3, #0]
 8006096:	183b      	adds	r3, r7, r0
 8006098:	183a      	adds	r2, r7, r0
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	2180      	movs	r1, #128	; 0x80
 800609e:	0189      	lsls	r1, r1, #6
 80060a0:	404a      	eors	r2, r1
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	18d3      	adds	r3, r2, r3
 80060ae:	183a      	adds	r2, r7, r0
 80060b0:	8812      	ldrh	r2, [r2, #0]
 80060b2:	4909      	ldr	r1, [pc, #36]	; (80060d8 <USB_EPStartXfer+0x1170>)
 80060b4:	430a      	orrs	r2, r1
 80060b6:	b292      	uxth	r2, r2
 80060b8:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	0018      	movs	r0, r3
 80060be:	46bd      	mov	sp, r7
 80060c0:	b043      	add	sp, #268	; 0x10c
 80060c2:	bd90      	pop	{r4, r7, pc}
 80060c4:	00000402 	.word	0x00000402
 80060c8:	ffff83ff 	.word	0xffff83ff
 80060cc:	ffff8000 	.word	0xffff8000
 80060d0:	00000406 	.word	0x00000406
 80060d4:	ffffbf8f 	.word	0xffffbf8f
 80060d8:	ffff8080 	.word	0xffff8080

080060dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01d      	beq.n	800612a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	18d3      	adds	r3, r2, r3
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	200c      	movs	r0, #12
 80060fe:	183b      	adds	r3, r7, r0
 8006100:	491b      	ldr	r1, [pc, #108]	; (8006170 <USB_EPSetStall+0x94>)
 8006102:	400a      	ands	r2, r1
 8006104:	801a      	strh	r2, [r3, #0]
 8006106:	183b      	adds	r3, r7, r0
 8006108:	183a      	adds	r2, r7, r0
 800610a:	8812      	ldrh	r2, [r2, #0]
 800610c:	2110      	movs	r1, #16
 800610e:	404a      	eors	r2, r1
 8006110:	801a      	strh	r2, [r3, #0]
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	18d3      	adds	r3, r2, r3
 800611c:	183a      	adds	r2, r7, r0
 800611e:	8812      	ldrh	r2, [r2, #0]
 8006120:	4914      	ldr	r1, [pc, #80]	; (8006174 <USB_EPSetStall+0x98>)
 8006122:	430a      	orrs	r2, r1
 8006124:	b292      	uxth	r2, r2
 8006126:	801a      	strh	r2, [r3, #0]
 8006128:	e01d      	b.n	8006166 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	18d3      	adds	r3, r2, r3
 8006134:	881b      	ldrh	r3, [r3, #0]
 8006136:	b29a      	uxth	r2, r3
 8006138:	200e      	movs	r0, #14
 800613a:	183b      	adds	r3, r7, r0
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <USB_EPSetStall+0x9c>)
 800613e:	400a      	ands	r2, r1
 8006140:	801a      	strh	r2, [r3, #0]
 8006142:	183b      	adds	r3, r7, r0
 8006144:	183a      	adds	r2, r7, r0
 8006146:	8812      	ldrh	r2, [r2, #0]
 8006148:	2180      	movs	r1, #128	; 0x80
 800614a:	0149      	lsls	r1, r1, #5
 800614c:	404a      	eors	r2, r1
 800614e:	801a      	strh	r2, [r3, #0]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	18d3      	adds	r3, r2, r3
 800615a:	183a      	adds	r2, r7, r0
 800615c:	8812      	ldrh	r2, [r2, #0]
 800615e:	4905      	ldr	r1, [pc, #20]	; (8006174 <USB_EPSetStall+0x98>)
 8006160:	430a      	orrs	r2, r1
 8006162:	b292      	uxth	r2, r2
 8006164:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	0018      	movs	r0, r3
 800616a:	46bd      	mov	sp, r7
 800616c:	b004      	add	sp, #16
 800616e:	bd80      	pop	{r7, pc}
 8006170:	ffff8fbf 	.word	0xffff8fbf
 8006174:	ffff8080 	.word	0xffff8080
 8006178:	ffffbf8f 	.word	0xffffbf8f

0800617c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	7b1b      	ldrb	r3, [r3, #12]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d000      	beq.n	8006190 <USB_EPClearStall+0x14>
 800618e:	e095      	b.n	80062bc <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d046      	beq.n	8006226 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	18d2      	adds	r2, r2, r3
 80061a2:	2110      	movs	r1, #16
 80061a4:	187b      	adds	r3, r7, r1
 80061a6:	8812      	ldrh	r2, [r2, #0]
 80061a8:	801a      	strh	r2, [r3, #0]
 80061aa:	187b      	adds	r3, r7, r1
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	2240      	movs	r2, #64	; 0x40
 80061b0:	4013      	ands	r3, r2
 80061b2:	d016      	beq.n	80061e2 <USB_EPClearStall+0x66>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	18d3      	adds	r3, r2, r3
 80061be:	881b      	ldrh	r3, [r3, #0]
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	200e      	movs	r0, #14
 80061c4:	183b      	adds	r3, r7, r0
 80061c6:	4940      	ldr	r1, [pc, #256]	; (80062c8 <USB_EPClearStall+0x14c>)
 80061c8:	400a      	ands	r2, r1
 80061ca:	801a      	strh	r2, [r3, #0]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	18d3      	adds	r3, r2, r3
 80061d6:	183a      	adds	r2, r7, r0
 80061d8:	8812      	ldrh	r2, [r2, #0]
 80061da:	493c      	ldr	r1, [pc, #240]	; (80062cc <USB_EPClearStall+0x150>)
 80061dc:	430a      	orrs	r2, r1
 80061de:	b292      	uxth	r2, r2
 80061e0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	78db      	ldrb	r3, [r3, #3]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d068      	beq.n	80062bc <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	18d3      	adds	r3, r2, r3
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	200c      	movs	r0, #12
 80061fa:	183b      	adds	r3, r7, r0
 80061fc:	4934      	ldr	r1, [pc, #208]	; (80062d0 <USB_EPClearStall+0x154>)
 80061fe:	400a      	ands	r2, r1
 8006200:	801a      	strh	r2, [r3, #0]
 8006202:	183b      	adds	r3, r7, r0
 8006204:	183a      	adds	r2, r7, r0
 8006206:	8812      	ldrh	r2, [r2, #0]
 8006208:	2120      	movs	r1, #32
 800620a:	404a      	eors	r2, r1
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	18d3      	adds	r3, r2, r3
 8006218:	183a      	adds	r2, r7, r0
 800621a:	8812      	ldrh	r2, [r2, #0]
 800621c:	492d      	ldr	r1, [pc, #180]	; (80062d4 <USB_EPClearStall+0x158>)
 800621e:	430a      	orrs	r2, r1
 8006220:	b292      	uxth	r2, r2
 8006222:	801a      	strh	r2, [r3, #0]
 8006224:	e04a      	b.n	80062bc <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	18d2      	adds	r2, r2, r3
 8006230:	2116      	movs	r1, #22
 8006232:	187b      	adds	r3, r7, r1
 8006234:	8812      	ldrh	r2, [r2, #0]
 8006236:	801a      	strh	r2, [r3, #0]
 8006238:	187b      	adds	r3, r7, r1
 800623a:	881a      	ldrh	r2, [r3, #0]
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	01db      	lsls	r3, r3, #7
 8006240:	4013      	ands	r3, r2
 8006242:	d016      	beq.n	8006272 <USB_EPClearStall+0xf6>
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	18d3      	adds	r3, r2, r3
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29a      	uxth	r2, r3
 8006252:	2014      	movs	r0, #20
 8006254:	183b      	adds	r3, r7, r0
 8006256:	491c      	ldr	r1, [pc, #112]	; (80062c8 <USB_EPClearStall+0x14c>)
 8006258:	400a      	ands	r2, r1
 800625a:	801a      	strh	r2, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	18d3      	adds	r3, r2, r3
 8006266:	183a      	adds	r2, r7, r0
 8006268:	8812      	ldrh	r2, [r2, #0]
 800626a:	491b      	ldr	r1, [pc, #108]	; (80062d8 <USB_EPClearStall+0x15c>)
 800626c:	430a      	orrs	r2, r1
 800626e:	b292      	uxth	r2, r2
 8006270:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	18d3      	adds	r3, r2, r3
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29a      	uxth	r2, r3
 8006280:	2012      	movs	r0, #18
 8006282:	183b      	adds	r3, r7, r0
 8006284:	4915      	ldr	r1, [pc, #84]	; (80062dc <USB_EPClearStall+0x160>)
 8006286:	400a      	ands	r2, r1
 8006288:	801a      	strh	r2, [r3, #0]
 800628a:	183b      	adds	r3, r7, r0
 800628c:	183a      	adds	r2, r7, r0
 800628e:	8812      	ldrh	r2, [r2, #0]
 8006290:	2180      	movs	r1, #128	; 0x80
 8006292:	0149      	lsls	r1, r1, #5
 8006294:	404a      	eors	r2, r1
 8006296:	801a      	strh	r2, [r3, #0]
 8006298:	183b      	adds	r3, r7, r0
 800629a:	183a      	adds	r2, r7, r0
 800629c:	8812      	ldrh	r2, [r2, #0]
 800629e:	2180      	movs	r1, #128	; 0x80
 80062a0:	0189      	lsls	r1, r1, #6
 80062a2:	404a      	eors	r2, r1
 80062a4:	801a      	strh	r2, [r3, #0]
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	18d3      	adds	r3, r2, r3
 80062b0:	183a      	adds	r2, r7, r0
 80062b2:	8812      	ldrh	r2, [r2, #0]
 80062b4:	4907      	ldr	r1, [pc, #28]	; (80062d4 <USB_EPClearStall+0x158>)
 80062b6:	430a      	orrs	r2, r1
 80062b8:	b292      	uxth	r2, r2
 80062ba:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	0018      	movs	r0, r3
 80062c0:	46bd      	mov	sp, r7
 80062c2:	b006      	add	sp, #24
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			; (mov r8, r8)
 80062c8:	ffff8f8f 	.word	0xffff8f8f
 80062cc:	ffff80c0 	.word	0xffff80c0
 80062d0:	ffff8fbf 	.word	0xffff8fbf
 80062d4:	ffff8080 	.word	0xffff8080
 80062d8:	ffffc080 	.word	0xffffc080
 80062dc:	ffffbf8f 	.word	0xffffbf8f

080062e0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	000a      	movs	r2, r1
 80062ea:	1cfb      	adds	r3, r7, #3
 80062ec:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80062ee:	1cfb      	adds	r3, r7, #3
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d103      	bne.n	80062fe <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	224c      	movs	r2, #76	; 0x4c
 80062fa:	2180      	movs	r1, #128	; 0x80
 80062fc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80062fe:	2300      	movs	r3, #0
}
 8006300:	0018      	movs	r0, r3
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2258      	movs	r2, #88	; 0x58
 8006314:	5a9b      	ldrh	r3, [r3, r2]
 8006316:	b29b      	uxth	r3, r3
 8006318:	4a05      	ldr	r2, [pc, #20]	; (8006330 <USB_DevConnect+0x28>)
 800631a:	4313      	orrs	r3, r2
 800631c:	b299      	uxth	r1, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2258      	movs	r2, #88	; 0x58
 8006322:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	0018      	movs	r0, r3
 8006328:	46bd      	mov	sp, r7
 800632a:	b002      	add	sp, #8
 800632c:	bd80      	pop	{r7, pc}
 800632e:	46c0      	nop			; (mov r8, r8)
 8006330:	ffff8000 	.word	0xffff8000

08006334 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2244      	movs	r2, #68	; 0x44
 8006340:	5a9b      	ldrh	r3, [r3, r2]
 8006342:	b29b      	uxth	r3, r3
 8006344:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006346:	68fb      	ldr	r3, [r7, #12]
}
 8006348:	0018      	movs	r0, r3
 800634a:	46bd      	mov	sp, r7
 800634c:	b004      	add	sp, #16
 800634e:	bd80      	pop	{r7, pc}

08006350 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	; 0x30
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	0019      	movs	r1, r3
 800635c:	1dbb      	adds	r3, r7, #6
 800635e:	801a      	strh	r2, [r3, #0]
 8006360:	1d3b      	adds	r3, r7, #4
 8006362:	1c0a      	adds	r2, r1, #0
 8006364:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	085b      	lsrs	r3, r3, #1
 800636e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006378:	1dbb      	adds	r3, r7, #6
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	18d3      	adds	r3, r2, r3
 8006380:	2280      	movs	r2, #128	; 0x80
 8006382:	00d2      	lsls	r2, r2, #3
 8006384:	4694      	mov	ip, r2
 8006386:	4463      	add	r3, ip
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800638e:	e01b      	b.n	80063c8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	3301      	adds	r3, #1
 800639a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	021b      	lsls	r3, r3, #8
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	001a      	movs	r2, r3
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b4:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	3302      	adds	r3, #2
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	3301      	adds	r3, #1
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80063c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c4:	3b01      	subs	r3, #1
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1e0      	bne.n	8006390 <USB_WritePMA+0x40>
  }
}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	46c0      	nop			; (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b00c      	add	sp, #48	; 0x30
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08a      	sub	sp, #40	; 0x28
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	0019      	movs	r1, r3
 80063e4:	1dbb      	adds	r3, r7, #6
 80063e6:	801a      	strh	r2, [r3, #0]
 80063e8:	1d3b      	adds	r3, r7, #4
 80063ea:	1c0a      	adds	r2, r1, #0
 80063ec:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80063ee:	1d3b      	adds	r3, r7, #4
 80063f0:	881b      	ldrh	r3, [r3, #0]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006400:	1dbb      	adds	r3, r7, #6
 8006402:	881a      	ldrh	r2, [r3, #0]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	18d3      	adds	r3, r2, r3
 8006408:	2280      	movs	r2, #128	; 0x80
 800640a:	00d2      	lsls	r2, r2, #3
 800640c:	4694      	mov	ip, r2
 800640e:	4463      	add	r3, ip
 8006410:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	e018      	b.n	800644a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	3302      	adds	r3, #2
 8006424:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	b2da      	uxtb	r2, r3
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	3301      	adds	r3, #1
 8006432:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	0a1b      	lsrs	r3, r3, #8
 8006438:	b2da      	uxtb	r2, r3
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	3b01      	subs	r3, #1
 8006448:	627b      	str	r3, [r7, #36]	; 0x24
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e3      	bne.n	8006418 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006450:	1d3b      	adds	r3, r7, #4
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	2201      	movs	r2, #1
 8006456:	4013      	ands	r3, r2
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	701a      	strb	r2, [r3, #0]
  }
}
 800646e:	46c0      	nop			; (mov r8, r8)
 8006470:	46bd      	mov	sp, r7
 8006472:	b00a      	add	sp, #40	; 0x28
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	1dfb      	adds	r3, r7, #7
 8006482:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800648a:	2302      	movs	r3, #2
 800648c:	e020      	b.n	80064d0 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	23ad      	movs	r3, #173	; 0xad
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	58d3      	ldr	r3, [r2, r3]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d004      	beq.n	80064a4 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	23ad      	movs	r3, #173	; 0xad
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	2100      	movs	r1, #0
 80064a2:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d004      	beq.n	80064b4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	23ac      	movs	r3, #172	; 0xac
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	68b9      	ldr	r1, [r7, #8]
 80064b2:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	23a7      	movs	r3, #167	; 0xa7
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	2101      	movs	r1, #1
 80064bc:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1dfa      	adds	r2, r7, #7
 80064c2:	7812      	ldrb	r2, [r2, #0]
 80064c4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	0018      	movs	r0, r3
 80064ca:	f001 fdc7 	bl	800805c <USBD_LL_Init>

  return USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	0018      	movs	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b004      	add	sp, #16
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064e2:	200f      	movs	r0, #15
 80064e4:	183b      	adds	r3, r7, r0
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d008      	beq.n	8006502 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	23ad      	movs	r3, #173	; 0xad
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	6839      	ldr	r1, [r7, #0]
 80064f8:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 80064fa:	183b      	adds	r3, r7, r0
 80064fc:	2200      	movs	r2, #0
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e003      	b.n	800650a <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006502:	230f      	movs	r3, #15
 8006504:	18fb      	adds	r3, r7, r3
 8006506:	2202      	movs	r2, #2
 8006508:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800650a:	230f      	movs	r3, #15
 800650c:	18fb      	adds	r3, r7, r3
 800650e:	781b      	ldrb	r3, [r3, #0]
}
 8006510:	0018      	movs	r0, r3
 8006512:	46bd      	mov	sp, r7
 8006514:	b004      	add	sp, #16
 8006516:	bd80      	pop	{r7, pc}

08006518 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	0018      	movs	r0, r3
 8006524:	f001 fdea 	bl	80080fc <USBD_LL_Start>

  return USBD_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	0018      	movs	r0, r3
 800652c:	46bd      	mov	sp, r7
 800652e:	b002      	add	sp, #8
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b082      	sub	sp, #8
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	0018      	movs	r0, r3
 800653e:	46bd      	mov	sp, r7
 8006540:	b002      	add	sp, #8
 8006542:	bd80      	pop	{r7, pc}

08006544 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006544:	b590      	push	{r4, r7, lr}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	000a      	movs	r2, r1
 800654e:	1cfb      	adds	r3, r7, #3
 8006550:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006552:	240f      	movs	r4, #15
 8006554:	193b      	adds	r3, r7, r4
 8006556:	2202      	movs	r2, #2
 8006558:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	23ad      	movs	r3, #173	; 0xad
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	58d3      	ldr	r3, [r2, r3]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00e      	beq.n	8006584 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	23ad      	movs	r3, #173	; 0xad
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	58d3      	ldr	r3, [r2, r3]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	1cfa      	adds	r2, r7, #3
 8006572:	7811      	ldrb	r1, [r2, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	0010      	movs	r0, r2
 8006578:	4798      	blx	r3
 800657a:	1e03      	subs	r3, r0, #0
 800657c:	d102      	bne.n	8006584 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800657e:	193b      	adds	r3, r7, r4
 8006580:	2200      	movs	r2, #0
 8006582:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006584:	230f      	movs	r3, #15
 8006586:	18fb      	adds	r3, r7, r3
 8006588:	781b      	ldrb	r3, [r3, #0]
}
 800658a:	0018      	movs	r0, r3
 800658c:	46bd      	mov	sp, r7
 800658e:	b005      	add	sp, #20
 8006590:	bd90      	pop	{r4, r7, pc}

08006592 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b082      	sub	sp, #8
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	000a      	movs	r2, r1
 800659c:	1cfb      	adds	r3, r7, #3
 800659e:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	23ad      	movs	r3, #173	; 0xad
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	58d3      	ldr	r3, [r2, r3]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	1cfa      	adds	r2, r7, #3
 80065ac:	7811      	ldrb	r1, [r2, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	0010      	movs	r0, r2
 80065b2:	4798      	blx	r3

  return USBD_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	0018      	movs	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	b002      	add	sp, #8
 80065bc:	bd80      	pop	{r7, pc}
	...

080065c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	22aa      	movs	r2, #170	; 0xaa
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	4694      	mov	ip, r2
 80065d2:	4463      	add	r3, ip
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	0011      	movs	r1, r2
 80065d8:	0018      	movs	r0, r3
 80065da:	f001 f810 	bl	80075fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	23a5      	movs	r3, #165	; 0xa5
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	2101      	movs	r1, #1
 80065e6:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a23      	ldr	r2, [pc, #140]	; (8006678 <USBD_LL_SetupStage+0xb8>)
 80065ec:	5a9b      	ldrh	r3, [r3, r2]
 80065ee:	0019      	movs	r1, r3
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	23a6      	movs	r3, #166	; 0xa6
 80065f4:	009b      	lsls	r3, r3, #2
 80065f6:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	23aa      	movs	r3, #170	; 0xaa
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	5cd3      	ldrb	r3, [r2, r3]
 8006600:	001a      	movs	r2, r3
 8006602:	231f      	movs	r3, #31
 8006604:	4013      	ands	r3, r2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d019      	beq.n	800663e <USBD_LL_SetupStage+0x7e>
 800660a:	d822      	bhi.n	8006652 <USBD_LL_SetupStage+0x92>
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <USBD_LL_SetupStage+0x56>
 8006610:	2b01      	cmp	r3, #1
 8006612:	d00a      	beq.n	800662a <USBD_LL_SetupStage+0x6a>
 8006614:	e01d      	b.n	8006652 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	22aa      	movs	r2, #170	; 0xaa
 800661a:	0092      	lsls	r2, r2, #2
 800661c:	189a      	adds	r2, r3, r2
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	0011      	movs	r1, r2
 8006622:	0018      	movs	r0, r3
 8006624:	f000 fa10 	bl	8006a48 <USBD_StdDevReq>
      break;
 8006628:	e020      	b.n	800666c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	22aa      	movs	r2, #170	; 0xaa
 800662e:	0092      	lsls	r2, r2, #2
 8006630:	189a      	adds	r2, r3, r2
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	0011      	movs	r1, r2
 8006636:	0018      	movs	r0, r3
 8006638:	f000 fa78 	bl	8006b2c <USBD_StdItfReq>
      break;
 800663c:	e016      	b.n	800666c <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	22aa      	movs	r2, #170	; 0xaa
 8006642:	0092      	lsls	r2, r2, #2
 8006644:	189a      	adds	r2, r3, r2
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	0011      	movs	r1, r2
 800664a:	0018      	movs	r0, r3
 800664c:	f000 fac5 	bl	8006bda <USBD_StdEPReq>
      break;
 8006650:	e00c      	b.n	800666c <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	23aa      	movs	r3, #170	; 0xaa
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	5cd3      	ldrb	r3, [r2, r3]
 800665a:	227f      	movs	r2, #127	; 0x7f
 800665c:	4393      	bics	r3, r2
 800665e:	b2da      	uxtb	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	0011      	movs	r1, r2
 8006664:	0018      	movs	r0, r3
 8006666:	f001 fdd0 	bl	800820a <USBD_LL_StallEP>
      break;
 800666a:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	0018      	movs	r0, r3
 8006670:	46bd      	mov	sp, r7
 8006672:	b002      	add	sp, #8
 8006674:	bd80      	pop	{r7, pc}
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	000002ae 	.word	0x000002ae

0800667c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	607a      	str	r2, [r7, #4]
 8006686:	200b      	movs	r0, #11
 8006688:	183b      	adds	r3, r7, r0
 800668a:	1c0a      	adds	r2, r1, #0
 800668c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800668e:	183b      	adds	r3, r7, r0
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d154      	bne.n	8006740 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3355      	adds	r3, #85	; 0x55
 800669a:	33ff      	adds	r3, #255	; 0xff
 800669c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	23a5      	movs	r3, #165	; 0xa5
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	58d3      	ldr	r3, [r2, r3]
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d139      	bne.n	800671e <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d919      	bls.n	80066ea <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	1ad2      	subs	r2, r2, r3
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d203      	bcs.n	80066d8 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	e002      	b.n	80066de <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066dc:	b29b      	uxth	r3, r3
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	001a      	movs	r2, r3
 80066e4:	f001 fa47 	bl	8007b76 <USBD_CtlContinueRx>
 80066e8:	e045      	b.n	8006776 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	23ad      	movs	r3, #173	; 0xad
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	58d3      	ldr	r3, [r2, r3]
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d00d      	beq.n	8006714 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	23a7      	movs	r3, #167	; 0xa7
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006700:	2b03      	cmp	r3, #3
 8006702:	d107      	bne.n	8006714 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	23ad      	movs	r3, #173	; 0xad
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	58d3      	ldr	r3, [r2, r3]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	0010      	movs	r0, r2
 8006712:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	0018      	movs	r0, r3
 8006718:	f001 fa40 	bl	8007b9c <USBD_CtlSendStatus>
 800671c:	e02b      	b.n	8006776 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800671e:	68fa      	ldr	r2, [r7, #12]
 8006720:	23a5      	movs	r3, #165	; 0xa5
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	58d3      	ldr	r3, [r2, r3]
 8006726:	2b05      	cmp	r3, #5
 8006728:	d125      	bne.n	8006776 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	23a5      	movs	r3, #165	; 0xa5
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	2100      	movs	r1, #0
 8006732:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2100      	movs	r1, #0
 8006738:	0018      	movs	r0, r3
 800673a:	f001 fd66 	bl	800820a <USBD_LL_StallEP>
 800673e:	e01a      	b.n	8006776 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	23ad      	movs	r3, #173	; 0xad
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	58d3      	ldr	r3, [r2, r3]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d011      	beq.n	8006772 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	23a7      	movs	r3, #167	; 0xa7
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006756:	2b03      	cmp	r3, #3
 8006758:	d10b      	bne.n	8006772 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800675a:	68fa      	ldr	r2, [r7, #12]
 800675c:	23ad      	movs	r3, #173	; 0xad
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	58d3      	ldr	r3, [r2, r3]
 8006762:	699b      	ldr	r3, [r3, #24]
 8006764:	220b      	movs	r2, #11
 8006766:	18ba      	adds	r2, r7, r2
 8006768:	7811      	ldrb	r1, [r2, #0]
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	0010      	movs	r0, r2
 800676e:	4798      	blx	r3
 8006770:	e001      	b.n	8006776 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006772:	2302      	movs	r3, #2
 8006774:	e000      	b.n	8006778 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	0018      	movs	r0, r3
 800677a:	46bd      	mov	sp, r7
 800677c:	b006      	add	sp, #24
 800677e:	bd80      	pop	{r7, pc}

08006780 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b086      	sub	sp, #24
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	607a      	str	r2, [r7, #4]
 800678a:	200b      	movs	r0, #11
 800678c:	183b      	adds	r3, r7, r0
 800678e:	1c0a      	adds	r2, r1, #0
 8006790:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006792:	183b      	adds	r3, r7, r0
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d000      	beq.n	800679c <USBD_LL_DataInStage+0x1c>
 800679a:	e08e      	b.n	80068ba <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3314      	adds	r3, #20
 80067a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	23a5      	movs	r3, #165	; 0xa5
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	58d3      	ldr	r3, [r2, r3]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d164      	bne.n	8006878 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d915      	bls.n	80067e6 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	1ad2      	subs	r2, r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	0018      	movs	r0, r3
 80067d4:	f001 f9bc 	bl	8007b50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	2300      	movs	r3, #0
 80067dc:	2200      	movs	r2, #0
 80067de:	2100      	movs	r1, #0
 80067e0:	f001 fdfc 	bl	80083dc <USBD_LL_PrepareReceive>
 80067e4:	e059      	b.n	800689a <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	0019      	movs	r1, r3
 80067f0:	0010      	movs	r0, r2
 80067f2:	f7f9 fd0f 	bl	8000214 <__aeabi_uidivmod>
 80067f6:	1e0b      	subs	r3, r1, #0
 80067f8:	d11f      	bne.n	800683a <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006802:	429a      	cmp	r2, r3
 8006804:	d319      	bcc.n	800683a <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	23a6      	movs	r3, #166	; 0xa6
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006812:	429a      	cmp	r2, r3
 8006814:	d211      	bcs.n	800683a <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	2100      	movs	r1, #0
 800681c:	0018      	movs	r0, r3
 800681e:	f001 f997 	bl	8007b50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	23a6      	movs	r3, #166	; 0xa6
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	2100      	movs	r1, #0
 800682a:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	2300      	movs	r3, #0
 8006830:	2200      	movs	r2, #0
 8006832:	2100      	movs	r1, #0
 8006834:	f001 fdd2 	bl	80083dc <USBD_LL_PrepareReceive>
 8006838:	e02f      	b.n	800689a <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	23ad      	movs	r3, #173	; 0xad
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	58d3      	ldr	r3, [r2, r3]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00d      	beq.n	8006864 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	23a7      	movs	r3, #167	; 0xa7
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006850:	2b03      	cmp	r3, #3
 8006852:	d107      	bne.n	8006864 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	23ad      	movs	r3, #173	; 0xad
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	58d3      	ldr	r3, [r2, r3]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	0010      	movs	r0, r2
 8006862:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	0018      	movs	r0, r3
 800686a:	f001 fcce 	bl	800820a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	0018      	movs	r0, r3
 8006872:	f001 f9a7 	bl	8007bc4 <USBD_CtlReceiveStatus>
 8006876:	e010      	b.n	800689a <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	23a5      	movs	r3, #165	; 0xa5
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	58d3      	ldr	r3, [r2, r3]
 8006880:	2b04      	cmp	r3, #4
 8006882:	d005      	beq.n	8006890 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	23a5      	movs	r3, #165	; 0xa5
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2180      	movs	r1, #128	; 0x80
 8006894:	0018      	movs	r0, r3
 8006896:	f001 fcb8 	bl	800820a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	23a8      	movs	r3, #168	; 0xa8
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	5cd3      	ldrb	r3, [r2, r3]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d124      	bne.n	80068f0 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	0018      	movs	r0, r3
 80068aa:	f7ff fe42 	bl	8006532 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	23a8      	movs	r3, #168	; 0xa8
 80068b2:	009b      	lsls	r3, r3, #2
 80068b4:	2100      	movs	r1, #0
 80068b6:	54d1      	strb	r1, [r2, r3]
 80068b8:	e01a      	b.n	80068f0 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	23ad      	movs	r3, #173	; 0xad
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	58d3      	ldr	r3, [r2, r3]
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d011      	beq.n	80068ec <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	23a7      	movs	r3, #167	; 0xa7
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d10b      	bne.n	80068ec <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	23ad      	movs	r3, #173	; 0xad
 80068d8:	009b      	lsls	r3, r3, #2
 80068da:	58d3      	ldr	r3, [r2, r3]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	220b      	movs	r2, #11
 80068e0:	18ba      	adds	r2, r7, r2
 80068e2:	7811      	ldrb	r1, [r2, #0]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	0010      	movs	r0, r2
 80068e8:	4798      	blx	r3
 80068ea:	e001      	b.n	80068f0 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068ec:	2302      	movs	r3, #2
 80068ee:	e000      	b.n	80068f2 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	0018      	movs	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	b006      	add	sp, #24
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b082      	sub	sp, #8
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	2340      	movs	r3, #64	; 0x40
 8006906:	2200      	movs	r2, #0
 8006908:	2100      	movs	r1, #0
 800690a:	f001 fc1c 	bl	8008146 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	23ac      	movs	r3, #172	; 0xac
 8006912:	005b      	lsls	r3, r3, #1
 8006914:	2101      	movs	r1, #1
 8006916:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	23b2      	movs	r3, #178	; 0xb2
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	2140      	movs	r1, #64	; 0x40
 8006920:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	2340      	movs	r3, #64	; 0x40
 8006926:	2200      	movs	r2, #0
 8006928:	2180      	movs	r1, #128	; 0x80
 800692a:	f001 fc0c 	bl	8008146 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2240      	movs	r2, #64	; 0x40
 8006938:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	23a7      	movs	r3, #167	; 0xa7
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	2101      	movs	r1, #1
 8006942:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	23a5      	movs	r3, #165	; 0xa5
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	2100      	movs	r1, #0
 800694c:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	23a9      	movs	r3, #169	; 0xa9
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	2100      	movs	r1, #0
 800695c:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	23ae      	movs	r3, #174	; 0xae
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	58d3      	ldr	r3, [r2, r3]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00a      	beq.n	8006980 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	23ad      	movs	r3, #173	; 0xad
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	58d3      	ldr	r3, [r2, r3]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	b2d9      	uxtb	r1, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	4790      	blx	r2
  }

  return USBD_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	0018      	movs	r0, r3
 8006984:	46bd      	mov	sp, r7
 8006986:	b002      	add	sp, #8
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	000a      	movs	r2, r1
 8006994:	1cfb      	adds	r3, r7, #3
 8006996:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	1cfa      	adds	r2, r7, #3
 800699c:	7812      	ldrb	r2, [r2, #0]
 800699e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	0018      	movs	r0, r3
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b002      	add	sp, #8
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	23a7      	movs	r3, #167	; 0xa7
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	5cd1      	ldrb	r1, [r2, r3]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a06      	ldr	r2, [pc, #24]	; (80069d8 <USBD_LL_Suspend+0x2c>)
 80069c0:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	23a7      	movs	r3, #167	; 0xa7
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	2104      	movs	r1, #4
 80069ca:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	0018      	movs	r0, r3
 80069d0:	46bd      	mov	sp, r7
 80069d2:	b002      	add	sp, #8
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	0000029d 	.word	0x0000029d

080069dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	23a7      	movs	r3, #167	; 0xa7
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	5cd3      	ldrb	r3, [r2, r3]
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d106      	bne.n	80069fe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a05      	ldr	r2, [pc, #20]	; (8006a08 <USBD_LL_Resume+0x2c>)
 80069f4:	5c99      	ldrb	r1, [r3, r2]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	23a7      	movs	r3, #167	; 0xa7
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	0018      	movs	r0, r3
 8006a02:	46bd      	mov	sp, r7
 8006a04:	b002      	add	sp, #8
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	0000029d 	.word	0x0000029d

08006a0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	23a7      	movs	r3, #167	; 0xa7
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	5cd3      	ldrb	r3, [r2, r3]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d10e      	bne.n	8006a3e <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	23ad      	movs	r3, #173	; 0xad
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	58d3      	ldr	r3, [r2, r3]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d007      	beq.n	8006a3e <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	23ad      	movs	r3, #173	; 0xad
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	58d3      	ldr	r3, [r2, r3]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	0010      	movs	r0, r2
 8006a3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	0018      	movs	r0, r3
 8006a42:	46bd      	mov	sp, r7
 8006a44:	b002      	add	sp, #8
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a52:	230f      	movs	r3, #15
 8006a54:	18fb      	adds	r3, r7, r3
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	001a      	movs	r2, r3
 8006a60:	2360      	movs	r3, #96	; 0x60
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b40      	cmp	r3, #64	; 0x40
 8006a66:	d004      	beq.n	8006a72 <USBD_StdDevReq+0x2a>
 8006a68:	d84f      	bhi.n	8006b0a <USBD_StdDevReq+0xc2>
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <USBD_StdDevReq+0x3e>
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	d14b      	bne.n	8006b0a <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	23ad      	movs	r3, #173	; 0xad
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	58d3      	ldr	r3, [r2, r3]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	6839      	ldr	r1, [r7, #0]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	0010      	movs	r0, r2
 8006a82:	4798      	blx	r3
      break;
 8006a84:	e048      	b.n	8006b18 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	785b      	ldrb	r3, [r3, #1]
 8006a8a:	2b09      	cmp	r3, #9
 8006a8c:	d835      	bhi.n	8006afa <USBD_StdDevReq+0xb2>
 8006a8e:	009a      	lsls	r2, r3, #2
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <USBD_StdDevReq+0xe0>)
 8006a92:	18d3      	adds	r3, r2, r3
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	0011      	movs	r1, r2
 8006a9e:	0018      	movs	r0, r3
 8006aa0:	f000 fa52 	bl	8006f48 <USBD_GetDescriptor>
          break;
 8006aa4:	e030      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	0011      	movs	r1, r2
 8006aac:	0018      	movs	r0, r3
 8006aae:	f000 fbfd 	bl	80072ac <USBD_SetAddress>
          break;
 8006ab2:	e029      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	0011      	movs	r1, r2
 8006aba:	0018      	movs	r0, r3
 8006abc:	f000 fc4a 	bl	8007354 <USBD_SetConfig>
          break;
 8006ac0:	e022      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	0011      	movs	r1, r2
 8006ac8:	0018      	movs	r0, r3
 8006aca:	f000 fce7 	bl	800749c <USBD_GetConfig>
          break;
 8006ace:	e01b      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	0011      	movs	r1, r2
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 fd1b 	bl	8007512 <USBD_GetStatus>
          break;
 8006adc:	e014      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	0011      	movs	r1, r2
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 fd4e 	bl	8007586 <USBD_SetFeature>
          break;
 8006aea:	e00d      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0011      	movs	r1, r2
 8006af2:	0018      	movs	r0, r3
 8006af4:	f000 fd5d 	bl	80075b2 <USBD_ClrFeature>
          break;
 8006af8:	e006      	b.n	8006b08 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0011      	movs	r1, r2
 8006b00:	0018      	movs	r0, r3
 8006b02:	f000 fdb7 	bl	8007674 <USBD_CtlError>
          break;
 8006b06:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006b08:	e006      	b.n	8006b18 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006b0a:	683a      	ldr	r2, [r7, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0011      	movs	r1, r2
 8006b10:	0018      	movs	r0, r3
 8006b12:	f000 fdaf 	bl	8007674 <USBD_CtlError>
      break;
 8006b16:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006b18:	230f      	movs	r3, #15
 8006b1a:	18fb      	adds	r3, r7, r3
 8006b1c:	781b      	ldrb	r3, [r3, #0]
}
 8006b1e:	0018      	movs	r0, r3
 8006b20:	46bd      	mov	sp, r7
 8006b22:	b004      	add	sp, #16
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	46c0      	nop			; (mov r8, r8)
 8006b28:	080085c4 	.word	0x080085c4

08006b2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006b2c:	b5b0      	push	{r4, r5, r7, lr}
 8006b2e:	b084      	sub	sp, #16
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
 8006b34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b36:	230f      	movs	r3, #15
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	001a      	movs	r2, r3
 8006b44:	2360      	movs	r3, #96	; 0x60
 8006b46:	4013      	ands	r3, r2
 8006b48:	2b40      	cmp	r3, #64	; 0x40
 8006b4a:	d004      	beq.n	8006b56 <USBD_StdItfReq+0x2a>
 8006b4c:	d839      	bhi.n	8006bc2 <USBD_StdItfReq+0x96>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <USBD_StdItfReq+0x2a>
 8006b52:	2b20      	cmp	r3, #32
 8006b54:	d135      	bne.n	8006bc2 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	23a7      	movs	r3, #167	; 0xa7
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	5cd3      	ldrb	r3, [r2, r3]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	d825      	bhi.n	8006bb0 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	889b      	ldrh	r3, [r3, #4]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d819      	bhi.n	8006ba2 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	23ad      	movs	r3, #173	; 0xad
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	58d3      	ldr	r3, [r2, r3]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	250f      	movs	r5, #15
 8006b7a:	197c      	adds	r4, r7, r5
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	0010      	movs	r0, r2
 8006b82:	4798      	blx	r3
 8006b84:	0003      	movs	r3, r0
 8006b86:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	88db      	ldrh	r3, [r3, #6]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d116      	bne.n	8006bbe <USBD_StdItfReq+0x92>
 8006b90:	197b      	adds	r3, r7, r5
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d112      	bne.n	8006bbe <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	0018      	movs	r0, r3
 8006b9c:	f000 fffe 	bl	8007b9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ba0:	e00d      	b.n	8006bbe <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 8006ba2:	683a      	ldr	r2, [r7, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	0011      	movs	r1, r2
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f000 fd63 	bl	8007674 <USBD_CtlError>
          break;
 8006bae:	e006      	b.n	8006bbe <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8006bb0:	683a      	ldr	r2, [r7, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	0011      	movs	r1, r2
 8006bb6:	0018      	movs	r0, r3
 8006bb8:	f000 fd5c 	bl	8007674 <USBD_CtlError>
          break;
 8006bbc:	e000      	b.n	8006bc0 <USBD_StdItfReq+0x94>
          break;
 8006bbe:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006bc0:	e006      	b.n	8006bd0 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0011      	movs	r1, r2
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f000 fd53 	bl	8007674 <USBD_CtlError>
      break;
 8006bce:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	0018      	movs	r0, r3
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	b004      	add	sp, #16
 8006bd8:	bdb0      	pop	{r4, r5, r7, pc}

08006bda <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006bda:	b5b0      	push	{r4, r5, r7, lr}
 8006bdc:	b084      	sub	sp, #16
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006be4:	230f      	movs	r3, #15
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	889a      	ldrh	r2, [r3, #4]
 8006bf0:	230e      	movs	r3, #14
 8006bf2:	18fb      	adds	r3, r7, r3
 8006bf4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	001a      	movs	r2, r3
 8006bfc:	2360      	movs	r3, #96	; 0x60
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d006      	beq.n	8006c12 <USBD_StdEPReq+0x38>
 8006c04:	d900      	bls.n	8006c08 <USBD_StdEPReq+0x2e>
 8006c06:	e190      	b.n	8006f2a <USBD_StdEPReq+0x350>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00c      	beq.n	8006c26 <USBD_StdEPReq+0x4c>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d000      	beq.n	8006c12 <USBD_StdEPReq+0x38>
 8006c10:	e18b      	b.n	8006f2a <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	23ad      	movs	r3, #173	; 0xad
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	58d3      	ldr	r3, [r2, r3]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	6839      	ldr	r1, [r7, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	0010      	movs	r0, r2
 8006c22:	4798      	blx	r3
      break;
 8006c24:	e188      	b.n	8006f38 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	001a      	movs	r2, r3
 8006c2c:	2360      	movs	r3, #96	; 0x60
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d10f      	bne.n	8006c54 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	23ad      	movs	r3, #173	; 0xad
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	58d3      	ldr	r3, [r2, r3]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	250f      	movs	r5, #15
 8006c40:	197c      	adds	r4, r7, r5
 8006c42:	6839      	ldr	r1, [r7, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	0010      	movs	r0, r2
 8006c48:	4798      	blx	r3
 8006c4a:	0003      	movs	r3, r0
 8006c4c:	7023      	strb	r3, [r4, #0]

        return ret;
 8006c4e:	197b      	adds	r3, r7, r5
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	e174      	b.n	8006f3e <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	785b      	ldrb	r3, [r3, #1]
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d007      	beq.n	8006c6c <USBD_StdEPReq+0x92>
 8006c5c:	dd00      	ble.n	8006c60 <USBD_StdEPReq+0x86>
 8006c5e:	e15c      	b.n	8006f1a <USBD_StdEPReq+0x340>
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d100      	bne.n	8006c66 <USBD_StdEPReq+0x8c>
 8006c64:	e092      	b.n	8006d8c <USBD_StdEPReq+0x1b2>
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d04b      	beq.n	8006d02 <USBD_StdEPReq+0x128>
 8006c6a:	e156      	b.n	8006f1a <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	23a7      	movs	r3, #167	; 0xa7
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	5cd3      	ldrb	r3, [r2, r3]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d002      	beq.n	8006c7e <USBD_StdEPReq+0xa4>
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d01d      	beq.n	8006cb8 <USBD_StdEPReq+0xde>
 8006c7c:	e039      	b.n	8006cf2 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c7e:	220e      	movs	r2, #14
 8006c80:	18bb      	adds	r3, r7, r2
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d010      	beq.n	8006caa <USBD_StdEPReq+0xd0>
 8006c88:	18bb      	adds	r3, r7, r2
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b80      	cmp	r3, #128	; 0x80
 8006c8e:	d00c      	beq.n	8006caa <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c90:	18bb      	adds	r3, r7, r2
 8006c92:	781a      	ldrb	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f001 fab6 	bl	800820a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2180      	movs	r1, #128	; 0x80
 8006ca2:	0018      	movs	r0, r3
 8006ca4:	f001 fab1 	bl	800820a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca8:	e02a      	b.n	8006d00 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 fcdf 	bl	8007674 <USBD_CtlError>
              break;
 8006cb6:	e023      	b.n	8006d00 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	885b      	ldrh	r3, [r3, #2]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d113      	bne.n	8006ce8 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006cc0:	220e      	movs	r2, #14
 8006cc2:	18bb      	adds	r3, r7, r2
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00e      	beq.n	8006ce8 <USBD_StdEPReq+0x10e>
 8006cca:	18bb      	adds	r3, r7, r2
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d00a      	beq.n	8006ce8 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	88db      	ldrh	r3, [r3, #6]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d106      	bne.n	8006ce8 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006cda:	18bb      	adds	r3, r7, r2
 8006cdc:	781a      	ldrb	r2, [r3, #0]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0011      	movs	r1, r2
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f001 fa91 	bl	800820a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	0018      	movs	r0, r3
 8006cec:	f000 ff56 	bl	8007b9c <USBD_CtlSendStatus>

              break;
 8006cf0:	e006      	b.n	8006d00 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006cf2:	683a      	ldr	r2, [r7, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	0011      	movs	r1, r2
 8006cf8:	0018      	movs	r0, r3
 8006cfa:	f000 fcbb 	bl	8007674 <USBD_CtlError>
              break;
 8006cfe:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006d00:	e112      	b.n	8006f28 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	23a7      	movs	r3, #167	; 0xa7
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	5cd3      	ldrb	r3, [r2, r3]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d002      	beq.n	8006d14 <USBD_StdEPReq+0x13a>
 8006d0e:	2b03      	cmp	r3, #3
 8006d10:	d01d      	beq.n	8006d4e <USBD_StdEPReq+0x174>
 8006d12:	e032      	b.n	8006d7a <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d14:	220e      	movs	r2, #14
 8006d16:	18bb      	adds	r3, r7, r2
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d010      	beq.n	8006d40 <USBD_StdEPReq+0x166>
 8006d1e:	18bb      	adds	r3, r7, r2
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d00c      	beq.n	8006d40 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d26:	18bb      	adds	r3, r7, r2
 8006d28:	781a      	ldrb	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0011      	movs	r1, r2
 8006d2e:	0018      	movs	r0, r3
 8006d30:	f001 fa6b 	bl	800820a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2180      	movs	r1, #128	; 0x80
 8006d38:	0018      	movs	r0, r3
 8006d3a:	f001 fa66 	bl	800820a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d3e:	e024      	b.n	8006d8a <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	0011      	movs	r1, r2
 8006d46:	0018      	movs	r0, r3
 8006d48:	f000 fc94 	bl	8007674 <USBD_CtlError>
              break;
 8006d4c:	e01d      	b.n	8006d8a <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d118      	bne.n	8006d88 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006d56:	210e      	movs	r1, #14
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	227f      	movs	r2, #127	; 0x7f
 8006d5e:	4013      	ands	r3, r2
 8006d60:	d006      	beq.n	8006d70 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006d62:	187b      	adds	r3, r7, r1
 8006d64:	781a      	ldrb	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	0011      	movs	r1, r2
 8006d6a:	0018      	movs	r0, r3
 8006d6c:	f001 fa78 	bl	8008260 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	0018      	movs	r0, r3
 8006d74:	f000 ff12 	bl	8007b9c <USBD_CtlSendStatus>
              }
              break;
 8006d78:	e006      	b.n	8006d88 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	0011      	movs	r1, r2
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 fc77 	bl	8007674 <USBD_CtlError>
              break;
 8006d86:	e000      	b.n	8006d8a <USBD_StdEPReq+0x1b0>
              break;
 8006d88:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006d8a:	e0cd      	b.n	8006f28 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	23a7      	movs	r3, #167	; 0xa7
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	5cd3      	ldrb	r3, [r2, r3]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d002      	beq.n	8006d9e <USBD_StdEPReq+0x1c4>
 8006d98:	2b03      	cmp	r3, #3
 8006d9a:	d03c      	beq.n	8006e16 <USBD_StdEPReq+0x23c>
 8006d9c:	e0b5      	b.n	8006f0a <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d9e:	220e      	movs	r2, #14
 8006da0:	18bb      	adds	r3, r7, r2
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00a      	beq.n	8006dbe <USBD_StdEPReq+0x1e4>
 8006da8:	18bb      	adds	r3, r7, r2
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	2b80      	cmp	r3, #128	; 0x80
 8006dae:	d006      	beq.n	8006dbe <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0011      	movs	r1, r2
 8006db6:	0018      	movs	r0, r3
 8006db8:	f000 fc5c 	bl	8007674 <USBD_CtlError>
                break;
 8006dbc:	e0ac      	b.n	8006f18 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dbe:	220e      	movs	r2, #14
 8006dc0:	18bb      	adds	r3, r7, r2
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	da0c      	bge.n	8006de4 <USBD_StdEPReq+0x20a>
 8006dca:	18bb      	adds	r3, r7, r2
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	227f      	movs	r2, #127	; 0x7f
 8006dd0:	401a      	ands	r2, r3
 8006dd2:	0013      	movs	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	189b      	adds	r3, r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	3310      	adds	r3, #16
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	18d3      	adds	r3, r2, r3
 8006de0:	3304      	adds	r3, #4
 8006de2:	e00d      	b.n	8006e00 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006de4:	230e      	movs	r3, #14
 8006de6:	18fb      	adds	r3, r7, r3
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	227f      	movs	r2, #127	; 0x7f
 8006dec:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dee:	0013      	movs	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	189b      	adds	r3, r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	3351      	adds	r3, #81	; 0x51
 8006df8:	33ff      	adds	r3, #255	; 0xff
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	18d3      	adds	r3, r2, r3
 8006dfe:	3304      	adds	r3, #4
 8006e00:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e08:	68b9      	ldr	r1, [r7, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2202      	movs	r2, #2
 8006e0e:	0018      	movs	r0, r3
 8006e10:	f000 fe7e 	bl	8007b10 <USBD_CtlSendData>
              break;
 8006e14:	e080      	b.n	8006f18 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e16:	220e      	movs	r2, #14
 8006e18:	18bb      	adds	r3, r7, r2
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	b25b      	sxtb	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	da14      	bge.n	8006e4c <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e22:	18bb      	adds	r3, r7, r2
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	220f      	movs	r2, #15
 8006e28:	401a      	ands	r2, r3
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	0013      	movs	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	189b      	adds	r3, r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	18cb      	adds	r3, r1, r3
 8006e36:	3318      	adds	r3, #24
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d11e      	bne.n	8006e7c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	0011      	movs	r1, r2
 8006e44:	0018      	movs	r0, r3
 8006e46:	f000 fc15 	bl	8007674 <USBD_CtlError>
                  break;
 8006e4a:	e065      	b.n	8006f18 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006e4c:	230e      	movs	r3, #14
 8006e4e:	18fb      	adds	r3, r7, r3
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	220f      	movs	r2, #15
 8006e54:	401a      	ands	r2, r3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	23ac      	movs	r3, #172	; 0xac
 8006e5a:	0059      	lsls	r1, r3, #1
 8006e5c:	0013      	movs	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	189b      	adds	r3, r3, r2
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	18c3      	adds	r3, r0, r3
 8006e66:	185b      	adds	r3, r3, r1
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d106      	bne.n	8006e7c <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	0011      	movs	r1, r2
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 fbfd 	bl	8007674 <USBD_CtlError>
                  break;
 8006e7a:	e04d      	b.n	8006f18 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e7c:	220e      	movs	r2, #14
 8006e7e:	18bb      	adds	r3, r7, r2
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	b25b      	sxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	da0c      	bge.n	8006ea2 <USBD_StdEPReq+0x2c8>
 8006e88:	18bb      	adds	r3, r7, r2
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	227f      	movs	r2, #127	; 0x7f
 8006e8e:	401a      	ands	r2, r3
 8006e90:	0013      	movs	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	189b      	adds	r3, r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	3310      	adds	r3, #16
 8006e9a:	687a      	ldr	r2, [r7, #4]
 8006e9c:	18d3      	adds	r3, r2, r3
 8006e9e:	3304      	adds	r3, #4
 8006ea0:	e00d      	b.n	8006ebe <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ea2:	230e      	movs	r3, #14
 8006ea4:	18fb      	adds	r3, r7, r3
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	227f      	movs	r2, #127	; 0x7f
 8006eaa:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006eac:	0013      	movs	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	189b      	adds	r3, r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3351      	adds	r3, #81	; 0x51
 8006eb6:	33ff      	adds	r3, #255	; 0xff
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	18d3      	adds	r3, r2, r3
 8006ebc:	3304      	adds	r3, #4
 8006ebe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ec0:	220e      	movs	r2, #14
 8006ec2:	18bb      	adds	r3, r7, r2
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <USBD_StdEPReq+0x2f8>
 8006eca:	18bb      	adds	r3, r7, r2
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b80      	cmp	r3, #128	; 0x80
 8006ed0:	d103      	bne.n	8006eda <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	e010      	b.n	8006efc <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006eda:	230e      	movs	r3, #14
 8006edc:	18fb      	adds	r3, r7, r3
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	0011      	movs	r1, r2
 8006ee4:	0018      	movs	r0, r3
 8006ee6:	f001 f9e6 	bl	80082b6 <USBD_LL_IsStallEP>
 8006eea:	1e03      	subs	r3, r0, #0
 8006eec:	d003      	beq.n	8006ef6 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	e002      	b.n	8006efc <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2202      	movs	r2, #2
 8006f02:	0018      	movs	r0, r3
 8006f04:	f000 fe04 	bl	8007b10 <USBD_CtlSendData>
              break;
 8006f08:	e006      	b.n	8006f18 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	0011      	movs	r1, r2
 8006f10:	0018      	movs	r0, r3
 8006f12:	f000 fbaf 	bl	8007674 <USBD_CtlError>
              break;
 8006f16:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006f18:	e006      	b.n	8006f28 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006f1a:	683a      	ldr	r2, [r7, #0]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	0011      	movs	r1, r2
 8006f20:	0018      	movs	r0, r3
 8006f22:	f000 fba7 	bl	8007674 <USBD_CtlError>
          break;
 8006f26:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006f28:	e006      	b.n	8006f38 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f000 fb9f 	bl	8007674 <USBD_CtlError>
      break;
 8006f36:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006f38:	230f      	movs	r3, #15
 8006f3a:	18fb      	adds	r3, r7, r3
 8006f3c:	781b      	ldrb	r3, [r3, #0]
}
 8006f3e:	0018      	movs	r0, r3
 8006f40:	46bd      	mov	sp, r7
 8006f42:	b004      	add	sp, #16
 8006f44:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006f48 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f52:	2308      	movs	r3, #8
 8006f54:	18fb      	adds	r3, r7, r3
 8006f56:	2200      	movs	r2, #0
 8006f58:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006f5e:	230b      	movs	r3, #11
 8006f60:	18fb      	adds	r3, r7, r3
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	885b      	ldrh	r3, [r3, #2]
 8006f6a:	0a1b      	lsrs	r3, r3, #8
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	2b07      	cmp	r3, #7
 8006f70:	d900      	bls.n	8006f74 <USBD_GetDescriptor+0x2c>
 8006f72:	e159      	b.n	8007228 <USBD_GetDescriptor+0x2e0>
 8006f74:	009a      	lsls	r2, r3, #2
 8006f76:	4bcb      	ldr	r3, [pc, #812]	; (80072a4 <USBD_GetDescriptor+0x35c>)
 8006f78:	18d3      	adds	r3, r2, r3
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	23ac      	movs	r3, #172	; 0xac
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	58d3      	ldr	r3, [r2, r3]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	2108      	movs	r1, #8
 8006f8e:	1879      	adds	r1, r7, r1
 8006f90:	0010      	movs	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	0003      	movs	r3, r0
 8006f96:	60fb      	str	r3, [r7, #12]
      break;
 8006f98:	e153      	b.n	8007242 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	7c1b      	ldrb	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10f      	bne.n	8006fc2 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	23ad      	movs	r3, #173	; 0xad
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	58d3      	ldr	r3, [r2, r3]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fac:	2208      	movs	r2, #8
 8006fae:	18ba      	adds	r2, r7, r2
 8006fb0:	0010      	movs	r0, r2
 8006fb2:	4798      	blx	r3
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006fc0:	e13f      	b.n	8007242 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	23ad      	movs	r3, #173	; 0xad
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	58d3      	ldr	r3, [r2, r3]
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	2208      	movs	r2, #8
 8006fce:	18ba      	adds	r2, r7, r2
 8006fd0:	0010      	movs	r0, r2
 8006fd2:	4798      	blx	r3
 8006fd4:	0003      	movs	r3, r0
 8006fd6:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	2202      	movs	r2, #2
 8006fde:	701a      	strb	r2, [r3, #0]
      break;
 8006fe0:	e12f      	b.n	8007242 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	885b      	ldrh	r3, [r3, #2]
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b05      	cmp	r3, #5
 8006fea:	d900      	bls.n	8006fee <USBD_GetDescriptor+0xa6>
 8006fec:	e0d0      	b.n	8007190 <USBD_GetDescriptor+0x248>
 8006fee:	009a      	lsls	r2, r3, #2
 8006ff0:	4bad      	ldr	r3, [pc, #692]	; (80072a8 <USBD_GetDescriptor+0x360>)
 8006ff2:	18d3      	adds	r3, r2, r3
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	23ac      	movs	r3, #172	; 0xac
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	58d3      	ldr	r3, [r2, r3]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00d      	beq.n	8007022 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	23ac      	movs	r3, #172	; 0xac
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	58d3      	ldr	r3, [r2, r3]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	7c12      	ldrb	r2, [r2, #16]
 8007014:	2108      	movs	r1, #8
 8007016:	1879      	adds	r1, r7, r1
 8007018:	0010      	movs	r0, r2
 800701a:	4798      	blx	r3
 800701c:	0003      	movs	r3, r0
 800701e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007020:	e0c3      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	0011      	movs	r1, r2
 8007028:	0018      	movs	r0, r3
 800702a:	f000 fb23 	bl	8007674 <USBD_CtlError>
            err++;
 800702e:	210b      	movs	r1, #11
 8007030:	187b      	adds	r3, r7, r1
 8007032:	781a      	ldrb	r2, [r3, #0]
 8007034:	187b      	adds	r3, r7, r1
 8007036:	3201      	adds	r2, #1
 8007038:	701a      	strb	r2, [r3, #0]
          break;
 800703a:	e0b6      	b.n	80071aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	23ac      	movs	r3, #172	; 0xac
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	58d3      	ldr	r3, [r2, r3]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00d      	beq.n	8007066 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	23ac      	movs	r3, #172	; 0xac
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	58d3      	ldr	r3, [r2, r3]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	7c12      	ldrb	r2, [r2, #16]
 8007058:	2108      	movs	r1, #8
 800705a:	1879      	adds	r1, r7, r1
 800705c:	0010      	movs	r0, r2
 800705e:	4798      	blx	r3
 8007060:	0003      	movs	r3, r0
 8007062:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007064:	e0a1      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	0011      	movs	r1, r2
 800706c:	0018      	movs	r0, r3
 800706e:	f000 fb01 	bl	8007674 <USBD_CtlError>
            err++;
 8007072:	210b      	movs	r1, #11
 8007074:	187b      	adds	r3, r7, r1
 8007076:	781a      	ldrb	r2, [r3, #0]
 8007078:	187b      	adds	r3, r7, r1
 800707a:	3201      	adds	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
          break;
 800707e:	e094      	b.n	80071aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	23ac      	movs	r3, #172	; 0xac
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	58d3      	ldr	r3, [r2, r3]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00d      	beq.n	80070aa <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	23ac      	movs	r3, #172	; 0xac
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	58d3      	ldr	r3, [r2, r3]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	2108      	movs	r1, #8
 800709e:	1879      	adds	r1, r7, r1
 80070a0:	0010      	movs	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	0003      	movs	r3, r0
 80070a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a8:	e07f      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	0011      	movs	r1, r2
 80070b0:	0018      	movs	r0, r3
 80070b2:	f000 fadf 	bl	8007674 <USBD_CtlError>
            err++;
 80070b6:	210b      	movs	r1, #11
 80070b8:	187b      	adds	r3, r7, r1
 80070ba:	781a      	ldrb	r2, [r3, #0]
 80070bc:	187b      	adds	r3, r7, r1
 80070be:	3201      	adds	r2, #1
 80070c0:	701a      	strb	r2, [r3, #0]
          break;
 80070c2:	e072      	b.n	80071aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	23ac      	movs	r3, #172	; 0xac
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	58d3      	ldr	r3, [r2, r3]
 80070cc:	691b      	ldr	r3, [r3, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00d      	beq.n	80070ee <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	23ac      	movs	r3, #172	; 0xac
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	58d3      	ldr	r3, [r2, r3]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	7c12      	ldrb	r2, [r2, #16]
 80070e0:	2108      	movs	r1, #8
 80070e2:	1879      	adds	r1, r7, r1
 80070e4:	0010      	movs	r0, r2
 80070e6:	4798      	blx	r3
 80070e8:	0003      	movs	r3, r0
 80070ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070ec:	e05d      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80070ee:	683a      	ldr	r2, [r7, #0]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	0011      	movs	r1, r2
 80070f4:	0018      	movs	r0, r3
 80070f6:	f000 fabd 	bl	8007674 <USBD_CtlError>
            err++;
 80070fa:	210b      	movs	r1, #11
 80070fc:	187b      	adds	r3, r7, r1
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	187b      	adds	r3, r7, r1
 8007102:	3201      	adds	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
          break;
 8007106:	e050      	b.n	80071aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	23ac      	movs	r3, #172	; 0xac
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	58d3      	ldr	r3, [r2, r3]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	23ac      	movs	r3, #172	; 0xac
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	58d3      	ldr	r3, [r2, r3]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7c12      	ldrb	r2, [r2, #16]
 8007124:	2108      	movs	r1, #8
 8007126:	1879      	adds	r1, r7, r1
 8007128:	0010      	movs	r0, r2
 800712a:	4798      	blx	r3
 800712c:	0003      	movs	r3, r0
 800712e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007130:	e03b      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	0011      	movs	r1, r2
 8007138:	0018      	movs	r0, r3
 800713a:	f000 fa9b 	bl	8007674 <USBD_CtlError>
            err++;
 800713e:	210b      	movs	r1, #11
 8007140:	187b      	adds	r3, r7, r1
 8007142:	781a      	ldrb	r2, [r3, #0]
 8007144:	187b      	adds	r3, r7, r1
 8007146:	3201      	adds	r2, #1
 8007148:	701a      	strb	r2, [r3, #0]
          break;
 800714a:	e02e      	b.n	80071aa <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	23ac      	movs	r3, #172	; 0xac
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	58d3      	ldr	r3, [r2, r3]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	23ac      	movs	r3, #172	; 0xac
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	58d3      	ldr	r3, [r2, r3]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	2108      	movs	r1, #8
 800716a:	1879      	adds	r1, r7, r1
 800716c:	0010      	movs	r0, r2
 800716e:	4798      	blx	r3
 8007170:	0003      	movs	r3, r0
 8007172:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007174:	e019      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007176:	683a      	ldr	r2, [r7, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	0011      	movs	r1, r2
 800717c:	0018      	movs	r0, r3
 800717e:	f000 fa79 	bl	8007674 <USBD_CtlError>
            err++;
 8007182:	210b      	movs	r1, #11
 8007184:	187b      	adds	r3, r7, r1
 8007186:	781a      	ldrb	r2, [r3, #0]
 8007188:	187b      	adds	r3, r7, r1
 800718a:	3201      	adds	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
          break;
 800718e:	e00c      	b.n	80071aa <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	0011      	movs	r1, r2
 8007196:	0018      	movs	r0, r3
 8007198:	f000 fa6c 	bl	8007674 <USBD_CtlError>
          err++;
 800719c:	210b      	movs	r1, #11
 800719e:	187b      	adds	r3, r7, r1
 80071a0:	781a      	ldrb	r2, [r3, #0]
 80071a2:	187b      	adds	r3, r7, r1
 80071a4:	3201      	adds	r2, #1
 80071a6:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80071a8:	e04b      	b.n	8007242 <USBD_GetDescriptor+0x2fa>
 80071aa:	e04a      	b.n	8007242 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	7c1b      	ldrb	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10b      	bne.n	80071cc <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	23ad      	movs	r3, #173	; 0xad
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	58d3      	ldr	r3, [r2, r3]
 80071bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071be:	2208      	movs	r2, #8
 80071c0:	18ba      	adds	r2, r7, r2
 80071c2:	0010      	movs	r0, r2
 80071c4:	4798      	blx	r3
 80071c6:	0003      	movs	r3, r0
 80071c8:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071ca:	e03a      	b.n	8007242 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0011      	movs	r1, r2
 80071d2:	0018      	movs	r0, r3
 80071d4:	f000 fa4e 	bl	8007674 <USBD_CtlError>
        err++;
 80071d8:	210b      	movs	r1, #11
 80071da:	187b      	adds	r3, r7, r1
 80071dc:	781a      	ldrb	r2, [r3, #0]
 80071de:	187b      	adds	r3, r7, r1
 80071e0:	3201      	adds	r2, #1
 80071e2:	701a      	strb	r2, [r3, #0]
      break;
 80071e4:	e02d      	b.n	8007242 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	7c1b      	ldrb	r3, [r3, #16]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10f      	bne.n	800720e <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	23ad      	movs	r3, #173	; 0xad
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	58d3      	ldr	r3, [r2, r3]
 80071f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f8:	2208      	movs	r2, #8
 80071fa:	18ba      	adds	r2, r7, r2
 80071fc:	0010      	movs	r0, r2
 80071fe:	4798      	blx	r3
 8007200:	0003      	movs	r3, r0
 8007202:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3301      	adds	r3, #1
 8007208:	2207      	movs	r2, #7
 800720a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800720c:	e019      	b.n	8007242 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	0011      	movs	r1, r2
 8007214:	0018      	movs	r0, r3
 8007216:	f000 fa2d 	bl	8007674 <USBD_CtlError>
        err++;
 800721a:	210b      	movs	r1, #11
 800721c:	187b      	adds	r3, r7, r1
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	187b      	adds	r3, r7, r1
 8007222:	3201      	adds	r2, #1
 8007224:	701a      	strb	r2, [r3, #0]
      break;
 8007226:	e00c      	b.n	8007242 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8007228:	683a      	ldr	r2, [r7, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	0011      	movs	r1, r2
 800722e:	0018      	movs	r0, r3
 8007230:	f000 fa20 	bl	8007674 <USBD_CtlError>
      err++;
 8007234:	210b      	movs	r1, #11
 8007236:	187b      	adds	r3, r7, r1
 8007238:	781a      	ldrb	r2, [r3, #0]
 800723a:	187b      	adds	r3, r7, r1
 800723c:	3201      	adds	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
      break;
 8007240:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8007242:	230b      	movs	r3, #11
 8007244:	18fb      	adds	r3, r7, r3
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d127      	bne.n	800729c <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800724c:	2108      	movs	r1, #8
 800724e:	187b      	adds	r3, r7, r1
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d019      	beq.n	800728a <USBD_GetDescriptor+0x342>
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	88db      	ldrh	r3, [r3, #6]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d015      	beq.n	800728a <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	88da      	ldrh	r2, [r3, #6]
 8007262:	187b      	adds	r3, r7, r1
 8007264:	881b      	ldrh	r3, [r3, #0]
 8007266:	1c18      	adds	r0, r3, #0
 8007268:	1c11      	adds	r1, r2, #0
 800726a:	b28a      	uxth	r2, r1
 800726c:	b283      	uxth	r3, r0
 800726e:	429a      	cmp	r2, r3
 8007270:	d900      	bls.n	8007274 <USBD_GetDescriptor+0x32c>
 8007272:	1c01      	adds	r1, r0, #0
 8007274:	b28a      	uxth	r2, r1
 8007276:	2108      	movs	r1, #8
 8007278:	187b      	adds	r3, r7, r1
 800727a:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800727c:	187b      	adds	r3, r7, r1
 800727e:	881a      	ldrh	r2, [r3, #0]
 8007280:	68f9      	ldr	r1, [r7, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	0018      	movs	r0, r3
 8007286:	f000 fc43 	bl	8007b10 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d105      	bne.n	800729e <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	0018      	movs	r0, r3
 8007296:	f000 fc81 	bl	8007b9c <USBD_CtlSendStatus>
 800729a:	e000      	b.n	800729e <USBD_GetDescriptor+0x356>
    return;
 800729c:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800729e:	46bd      	mov	sp, r7
 80072a0:	b004      	add	sp, #16
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	080085ec 	.word	0x080085ec
 80072a8:	0800860c 	.word	0x0800860c

080072ac <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072ac:	b590      	push	{r4, r7, lr}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	889b      	ldrh	r3, [r3, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d13d      	bne.n	800733a <USBD_SetAddress+0x8e>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	88db      	ldrh	r3, [r3, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d139      	bne.n	800733a <USBD_SetAddress+0x8e>
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	885b      	ldrh	r3, [r3, #2]
 80072ca:	2b7f      	cmp	r3, #127	; 0x7f
 80072cc:	d835      	bhi.n	800733a <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	885b      	ldrh	r3, [r3, #2]
 80072d2:	b2da      	uxtb	r2, r3
 80072d4:	230f      	movs	r3, #15
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	217f      	movs	r1, #127	; 0x7f
 80072da:	400a      	ands	r2, r1
 80072dc:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	23a7      	movs	r3, #167	; 0xa7
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	5cd3      	ldrb	r3, [r2, r3]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d106      	bne.n	80072f8 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	0011      	movs	r1, r2
 80072f0:	0018      	movs	r0, r3
 80072f2:	f000 f9bf 	bl	8007674 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	e027      	b.n	8007348 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	240f      	movs	r4, #15
 80072fc:	193a      	adds	r2, r7, r4
 80072fe:	4914      	ldr	r1, [pc, #80]	; (8007350 <USBD_SetAddress+0xa4>)
 8007300:	7812      	ldrb	r2, [r2, #0]
 8007302:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007304:	193b      	adds	r3, r7, r4
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	0011      	movs	r1, r2
 800730c:	0018      	movs	r0, r3
 800730e:	f001 f803 	bl	8008318 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	0018      	movs	r0, r3
 8007316:	f000 fc41 	bl	8007b9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800731a:	193b      	adds	r3, r7, r4
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d005      	beq.n	800732e <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	23a7      	movs	r3, #167	; 0xa7
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	2102      	movs	r1, #2
 800732a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732c:	e00c      	b.n	8007348 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	23a7      	movs	r3, #167	; 0xa7
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	2101      	movs	r1, #1
 8007336:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007338:	e006      	b.n	8007348 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	0011      	movs	r1, r2
 8007340:	0018      	movs	r0, r3
 8007342:	f000 f997 	bl	8007674 <USBD_CtlError>
  }
}
 8007346:	46c0      	nop			; (mov r8, r8)
 8007348:	46c0      	nop			; (mov r8, r8)
 800734a:	46bd      	mov	sp, r7
 800734c:	b005      	add	sp, #20
 800734e:	bd90      	pop	{r4, r7, pc}
 8007350:	0000029e 	.word	0x0000029e

08007354 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	885b      	ldrh	r3, [r3, #2]
 8007362:	b2da      	uxtb	r2, r3
 8007364:	4b4c      	ldr	r3, [pc, #304]	; (8007498 <USBD_SetConfig+0x144>)
 8007366:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007368:	4b4b      	ldr	r3, [pc, #300]	; (8007498 <USBD_SetConfig+0x144>)
 800736a:	781b      	ldrb	r3, [r3, #0]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d906      	bls.n	800737e <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	0011      	movs	r1, r2
 8007376:	0018      	movs	r0, r3
 8007378:	f000 f97c 	bl	8007674 <USBD_CtlError>
 800737c:	e088      	b.n	8007490 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	23a7      	movs	r3, #167	; 0xa7
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	5cd3      	ldrb	r3, [r2, r3]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d002      	beq.n	8007390 <USBD_SetConfig+0x3c>
 800738a:	2b03      	cmp	r3, #3
 800738c:	d029      	beq.n	80073e2 <USBD_SetConfig+0x8e>
 800738e:	e071      	b.n	8007474 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007390:	4b41      	ldr	r3, [pc, #260]	; (8007498 <USBD_SetConfig+0x144>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01f      	beq.n	80073d8 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007398:	4b3f      	ldr	r3, [pc, #252]	; (8007498 <USBD_SetConfig+0x144>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	001a      	movs	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	23a7      	movs	r3, #167	; 0xa7
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	2103      	movs	r1, #3
 80073aa:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073ac:	4b3a      	ldr	r3, [pc, #232]	; (8007498 <USBD_SetConfig+0x144>)
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	0011      	movs	r1, r2
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7ff f8c5 	bl	8006544 <USBD_SetClassConfig>
 80073ba:	0003      	movs	r3, r0
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d106      	bne.n	80073ce <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	0011      	movs	r1, r2
 80073c6:	0018      	movs	r0, r3
 80073c8:	f000 f954 	bl	8007674 <USBD_CtlError>
            return;
 80073cc:	e060      	b.n	8007490 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	0018      	movs	r0, r3
 80073d2:	f000 fbe3 	bl	8007b9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80073d6:	e05b      	b.n	8007490 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	0018      	movs	r0, r3
 80073dc:	f000 fbde 	bl	8007b9c <USBD_CtlSendStatus>
        break;
 80073e0:	e056      	b.n	8007490 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80073e2:	4b2d      	ldr	r3, [pc, #180]	; (8007498 <USBD_SetConfig+0x144>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d115      	bne.n	8007416 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	23a7      	movs	r3, #167	; 0xa7
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	2102      	movs	r1, #2
 80073f2:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 80073f4:	4b28      	ldr	r3, [pc, #160]	; (8007498 <USBD_SetConfig+0x144>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	001a      	movs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80073fe:	4b26      	ldr	r3, [pc, #152]	; (8007498 <USBD_SetConfig+0x144>)
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff f8c3 	bl	8006592 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	0018      	movs	r0, r3
 8007410:	f000 fbc4 	bl	8007b9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007414:	e03c      	b.n	8007490 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8007416:	4b20      	ldr	r3, [pc, #128]	; (8007498 <USBD_SetConfig+0x144>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	001a      	movs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	429a      	cmp	r2, r3
 8007422:	d022      	beq.n	800746a <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	0011      	movs	r1, r2
 800742e:	0018      	movs	r0, r3
 8007430:	f7ff f8af 	bl	8006592 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007434:	4b18      	ldr	r3, [pc, #96]	; (8007498 <USBD_SetConfig+0x144>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	001a      	movs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800743e:	4b16      	ldr	r3, [pc, #88]	; (8007498 <USBD_SetConfig+0x144>)
 8007440:	781a      	ldrb	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	0011      	movs	r1, r2
 8007446:	0018      	movs	r0, r3
 8007448:	f7ff f87c 	bl	8006544 <USBD_SetClassConfig>
 800744c:	0003      	movs	r3, r0
 800744e:	2b02      	cmp	r3, #2
 8007450:	d106      	bne.n	8007460 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007452:	683a      	ldr	r2, [r7, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	0011      	movs	r1, r2
 8007458:	0018      	movs	r0, r3
 800745a:	f000 f90b 	bl	8007674 <USBD_CtlError>
            return;
 800745e:	e017      	b.n	8007490 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	0018      	movs	r0, r3
 8007464:	f000 fb9a 	bl	8007b9c <USBD_CtlSendStatus>
        break;
 8007468:	e012      	b.n	8007490 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0018      	movs	r0, r3
 800746e:	f000 fb95 	bl	8007b9c <USBD_CtlSendStatus>
        break;
 8007472:	e00d      	b.n	8007490 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0011      	movs	r1, r2
 800747a:	0018      	movs	r0, r3
 800747c:	f000 f8fa 	bl	8007674 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <USBD_SetConfig+0x144>)
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	0011      	movs	r1, r2
 8007488:	0018      	movs	r0, r3
 800748a:	f7ff f882 	bl	8006592 <USBD_ClrClassConfig>
        break;
 800748e:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 8007490:	46bd      	mov	sp, r7
 8007492:	b002      	add	sp, #8
 8007494:	bd80      	pop	{r7, pc}
 8007496:	46c0      	nop			; (mov r8, r8)
 8007498:	2000018c 	.word	0x2000018c

0800749c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	88db      	ldrh	r3, [r3, #6]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d006      	beq.n	80074bc <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	0011      	movs	r1, r2
 80074b4:	0018      	movs	r0, r3
 80074b6:	f000 f8dd 	bl	8007674 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074ba:	e026      	b.n	800750a <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80074bc:	687a      	ldr	r2, [r7, #4]
 80074be:	23a7      	movs	r3, #167	; 0xa7
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	5cd3      	ldrb	r3, [r2, r3]
 80074c4:	2b02      	cmp	r3, #2
 80074c6:	dc02      	bgt.n	80074ce <USBD_GetConfig+0x32>
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dc03      	bgt.n	80074d4 <USBD_GetConfig+0x38>
 80074cc:	e016      	b.n	80074fc <USBD_GetConfig+0x60>
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d00c      	beq.n	80074ec <USBD_GetConfig+0x50>
 80074d2:	e013      	b.n	80074fc <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3308      	adds	r3, #8
 80074de:	0019      	movs	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	0018      	movs	r0, r3
 80074e6:	f000 fb13 	bl	8007b10 <USBD_CtlSendData>
        break;
 80074ea:	e00e      	b.n	800750a <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	1d19      	adds	r1, r3, #4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	0018      	movs	r0, r3
 80074f6:	f000 fb0b 	bl	8007b10 <USBD_CtlSendData>
        break;
 80074fa:	e006      	b.n	800750a <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	0011      	movs	r1, r2
 8007502:	0018      	movs	r0, r3
 8007504:	f000 f8b6 	bl	8007674 <USBD_CtlError>
        break;
 8007508:	46c0      	nop			; (mov r8, r8)
}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b002      	add	sp, #8
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
 800751a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	23a7      	movs	r3, #167	; 0xa7
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	5cd3      	ldrb	r3, [r2, r3]
 8007524:	3b01      	subs	r3, #1
 8007526:	2b02      	cmp	r3, #2
 8007528:	d822      	bhi.n	8007570 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	88db      	ldrh	r3, [r3, #6]
 800752e:	2b02      	cmp	r3, #2
 8007530:	d006      	beq.n	8007540 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	0011      	movs	r1, r2
 8007538:	0018      	movs	r0, r3
 800753a:	f000 f89b 	bl	8007674 <USBD_CtlError>
        break;
 800753e:	e01e      	b.n	800757e <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	23a9      	movs	r3, #169	; 0xa9
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	58d3      	ldr	r3, [r2, r3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d005      	beq.n	800755e <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	2202      	movs	r2, #2
 8007558:	431a      	orrs	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	330c      	adds	r3, #12
 8007562:	0019      	movs	r1, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	0018      	movs	r0, r3
 800756a:	f000 fad1 	bl	8007b10 <USBD_CtlSendData>
      break;
 800756e:	e006      	b.n	800757e <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007570:	683a      	ldr	r2, [r7, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	0011      	movs	r1, r2
 8007576:	0018      	movs	r0, r3
 8007578:	f000 f87c 	bl	8007674 <USBD_CtlError>
      break;
 800757c:	46c0      	nop			; (mov r8, r8)
  }
}
 800757e:	46c0      	nop			; (mov r8, r8)
 8007580:	46bd      	mov	sp, r7
 8007582:	b002      	add	sp, #8
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	885b      	ldrh	r3, [r3, #2]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d108      	bne.n	80075aa <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	23a9      	movs	r3, #169	; 0xa9
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	2101      	movs	r1, #1
 80075a0:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	0018      	movs	r0, r3
 80075a6:	f000 faf9 	bl	8007b9c <USBD_CtlSendStatus>
  }
}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b002      	add	sp, #8
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b082      	sub	sp, #8
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	23a7      	movs	r3, #167	; 0xa7
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	5cd3      	ldrb	r3, [r2, r3]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d80d      	bhi.n	80075e6 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	885b      	ldrh	r3, [r3, #2]
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d110      	bne.n	80075f4 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	23a9      	movs	r3, #169	; 0xa9
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	2100      	movs	r1, #0
 80075da:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	0018      	movs	r0, r3
 80075e0:	f000 fadc 	bl	8007b9c <USBD_CtlSendStatus>
      }
      break;
 80075e4:	e006      	b.n	80075f4 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	0011      	movs	r1, r2
 80075ec:	0018      	movs	r0, r3
 80075ee:	f000 f841 	bl	8007674 <USBD_CtlError>
      break;
 80075f2:	e000      	b.n	80075f6 <USBD_ClrFeature+0x44>
      break;
 80075f4:	46c0      	nop			; (mov r8, r8)
  }
}
 80075f6:	46c0      	nop			; (mov r8, r8)
 80075f8:	46bd      	mov	sp, r7
 80075fa:	b002      	add	sp, #8
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	781a      	ldrb	r2, [r3, #0]
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	785a      	ldrb	r2, [r3, #1]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	3302      	adds	r3, #2
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	b29a      	uxth	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	3303      	adds	r3, #3
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	b29b      	uxth	r3, r3
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	b29b      	uxth	r3, r3
 800762c:	18d3      	adds	r3, r2, r3
 800762e:	b29a      	uxth	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	3304      	adds	r3, #4
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b29a      	uxth	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	3305      	adds	r3, #5
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	b29b      	uxth	r3, r3
 8007648:	18d3      	adds	r3, r2, r3
 800764a:	b29a      	uxth	r2, r3
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	3306      	adds	r3, #6
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	b29a      	uxth	r2, r3
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	3307      	adds	r3, #7
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	b29b      	uxth	r3, r3
 8007660:	021b      	lsls	r3, r3, #8
 8007662:	b29b      	uxth	r3, r3
 8007664:	18d3      	adds	r3, r2, r3
 8007666:	b29a      	uxth	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	80da      	strh	r2, [r3, #6]

}
 800766c:	46c0      	nop			; (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b002      	add	sp, #8
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2180      	movs	r1, #128	; 0x80
 8007682:	0018      	movs	r0, r3
 8007684:	f000 fdc1 	bl	800820a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2100      	movs	r1, #0
 800768c:	0018      	movs	r0, r3
 800768e:	f000 fdbc 	bl	800820a <USBD_LL_StallEP>
}
 8007692:	46c0      	nop			; (mov r8, r8)
 8007694:	46bd      	mov	sp, r7
 8007696:	b002      	add	sp, #8
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800769a:	b590      	push	{r4, r7, lr}
 800769c:	b087      	sub	sp, #28
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076a6:	2417      	movs	r4, #23
 80076a8:	193b      	adds	r3, r7, r4
 80076aa:	2200      	movs	r2, #0
 80076ac:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d03c      	beq.n	800772e <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	0018      	movs	r0, r3
 80076b8:	f000 f83d 	bl	8007736 <USBD_GetLen>
 80076bc:	0003      	movs	r3, r0
 80076be:	3301      	adds	r3, #1
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	18db      	adds	r3, r3, r3
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80076ca:	193b      	adds	r3, r7, r4
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	193a      	adds	r2, r7, r4
 80076d0:	1c59      	adds	r1, r3, #1
 80076d2:	7011      	strb	r1, [r2, #0]
 80076d4:	001a      	movs	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	189b      	adds	r3, r3, r2
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80076e0:	193b      	adds	r3, r7, r4
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	193a      	adds	r2, r7, r4
 80076e6:	1c59      	adds	r1, r3, #1
 80076e8:	7011      	strb	r1, [r2, #0]
 80076ea:	001a      	movs	r2, r3
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	2203      	movs	r2, #3
 80076f2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80076f4:	e017      	b.n	8007726 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	1c5a      	adds	r2, r3, #1
 80076fa:	60fa      	str	r2, [r7, #12]
 80076fc:	2417      	movs	r4, #23
 80076fe:	193a      	adds	r2, r7, r4
 8007700:	7812      	ldrb	r2, [r2, #0]
 8007702:	1939      	adds	r1, r7, r4
 8007704:	1c50      	adds	r0, r2, #1
 8007706:	7008      	strb	r0, [r1, #0]
 8007708:	0011      	movs	r1, r2
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	1852      	adds	r2, r2, r1
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007712:	193b      	adds	r3, r7, r4
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	193a      	adds	r2, r7, r4
 8007718:	1c59      	adds	r1, r3, #1
 800771a:	7011      	strb	r1, [r2, #0]
 800771c:	001a      	movs	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	189b      	adds	r3, r3, r2
 8007722:	2200      	movs	r2, #0
 8007724:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1e3      	bne.n	80076f6 <USBD_GetString+0x5c>
    }
  }
}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b007      	add	sp, #28
 8007734:	bd90      	pop	{r4, r7, pc}

08007736 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800773e:	230f      	movs	r3, #15
 8007740:	18fb      	adds	r3, r7, r3
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007746:	e008      	b.n	800775a <USBD_GetLen+0x24>
  {
    len++;
 8007748:	210f      	movs	r1, #15
 800774a:	187b      	adds	r3, r7, r1
 800774c:	781a      	ldrb	r2, [r3, #0]
 800774e:	187b      	adds	r3, r7, r1
 8007750:	3201      	adds	r2, #1
 8007752:	701a      	strb	r2, [r3, #0]
    buf++;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	3301      	adds	r3, #1
 8007758:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f2      	bne.n	8007748 <USBD_GetLen+0x12>
  }

  return len;
 8007762:	230f      	movs	r3, #15
 8007764:	18fb      	adds	r3, r7, r3
 8007766:	781b      	ldrb	r3, [r3, #0]
}
 8007768:	0018      	movs	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	b004      	add	sp, #16
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	000a      	movs	r2, r1
 800777a:	1cfb      	adds	r3, r7, #3
 800777c:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	2304      	movs	r3, #4
 8007782:	2203      	movs	r2, #3
 8007784:	2181      	movs	r1, #129	; 0x81
 8007786:	f000 fcde 	bl	8008146 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2201      	movs	r2, #1
 800778e:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007790:	2010      	movs	r0, #16
 8007792:	f000 fe5b 	bl	800844c <USBD_static_malloc>
 8007796:	0001      	movs	r1, r0
 8007798:	687a      	ldr	r2, [r7, #4]
 800779a:	23ae      	movs	r3, #174	; 0xae
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	23ae      	movs	r3, #174	; 0xae
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	58d3      	ldr	r3, [r2, r3]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80077ac:	2302      	movs	r3, #2
 80077ae:	e006      	b.n	80077be <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80077b0:	687a      	ldr	r2, [r7, #4]
 80077b2:	23ae      	movs	r3, #174	; 0xae
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	58d3      	ldr	r3, [r2, r3]
 80077b8:	2200      	movs	r2, #0
 80077ba:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	0018      	movs	r0, r3
 80077c0:	46bd      	mov	sp, r7
 80077c2:	b002      	add	sp, #8
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
 80077ce:	000a      	movs	r2, r1
 80077d0:	1cfb      	adds	r3, r7, #3
 80077d2:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2181      	movs	r1, #129	; 0x81
 80077d8:	0018      	movs	r0, r3
 80077da:	f000 fceb 	bl	80081b4 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	23ae      	movs	r3, #174	; 0xae
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	58d3      	ldr	r3, [r2, r3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00b      	beq.n	8007808 <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	23ae      	movs	r3, #174	; 0xae
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	58d3      	ldr	r3, [r2, r3]
 80077f8:	0018      	movs	r0, r3
 80077fa:	f000 fe33 	bl	8008464 <USBD_static_free>
    pdev->pClassData = NULL;
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	23ae      	movs	r3, #174	; 0xae
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	2100      	movs	r1, #0
 8007806:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 8007808:	2300      	movs	r3, #0
}
 800780a:	0018      	movs	r0, r3
 800780c:	46bd      	mov	sp, r7
 800780e:	b002      	add	sp, #8
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	23ae      	movs	r3, #174	; 0xae
 8007822:	009b      	lsls	r3, r3, #2
 8007824:	58d3      	ldr	r3, [r2, r3]
 8007826:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007828:	231e      	movs	r3, #30
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	2200      	movs	r2, #0
 800782e:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007830:	2300      	movs	r3, #0
 8007832:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007834:	230e      	movs	r3, #14
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2200      	movs	r2, #0
 800783a:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800783c:	2317      	movs	r3, #23
 800783e:	18fb      	adds	r3, r7, r3
 8007840:	2200      	movs	r2, #0
 8007842:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	001a      	movs	r2, r3
 800784a:	2360      	movs	r3, #96	; 0x60
 800784c:	4013      	ands	r3, r2
 800784e:	d03a      	beq.n	80078c6 <USBD_HID_Setup+0xb2>
 8007850:	2b20      	cmp	r3, #32
 8007852:	d000      	beq.n	8007856 <USBD_HID_Setup+0x42>
 8007854:	e0d6      	b.n	8007a04 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	785b      	ldrb	r3, [r3, #1]
 800785a:	2b0b      	cmp	r3, #11
 800785c:	d008      	beq.n	8007870 <USBD_HID_Setup+0x5c>
 800785e:	dc26      	bgt.n	80078ae <USBD_HID_Setup+0x9a>
 8007860:	2b0a      	cmp	r3, #10
 8007862:	d013      	beq.n	800788c <USBD_HID_Setup+0x78>
 8007864:	dc23      	bgt.n	80078ae <USBD_HID_Setup+0x9a>
 8007866:	2b02      	cmp	r3, #2
 8007868:	d019      	beq.n	800789e <USBD_HID_Setup+0x8a>
 800786a:	2b03      	cmp	r3, #3
 800786c:	d007      	beq.n	800787e <USBD_HID_Setup+0x6a>
 800786e:	e01e      	b.n	80078ae <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	885b      	ldrh	r3, [r3, #2]
 8007874:	b2db      	uxtb	r3, r3
 8007876:	001a      	movs	r2, r3
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	601a      	str	r2, [r3, #0]
          break;
 800787c:	e022      	b.n	80078c4 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800787e:	6939      	ldr	r1, [r7, #16]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2201      	movs	r2, #1
 8007884:	0018      	movs	r0, r3
 8007886:	f000 f943 	bl	8007b10 <USBD_CtlSendData>
          break;
 800788a:	e01b      	b.n	80078c4 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	885b      	ldrh	r3, [r3, #2]
 8007890:	0a1b      	lsrs	r3, r3, #8
 8007892:	b29b      	uxth	r3, r3
 8007894:	b2db      	uxtb	r3, r3
 8007896:	001a      	movs	r2, r3
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	605a      	str	r2, [r3, #4]
          break;
 800789c:	e012      	b.n	80078c4 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1d19      	adds	r1, r3, #4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	0018      	movs	r0, r3
 80078a8:	f000 f932 	bl	8007b10 <USBD_CtlSendData>
          break;
 80078ac:	e00a      	b.n	80078c4 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 80078ae:	683a      	ldr	r2, [r7, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	0011      	movs	r1, r2
 80078b4:	0018      	movs	r0, r3
 80078b6:	f7ff fedd 	bl	8007674 <USBD_CtlError>
          ret = USBD_FAIL;
 80078ba:	2317      	movs	r3, #23
 80078bc:	18fb      	adds	r3, r7, r3
 80078be:	2202      	movs	r2, #2
 80078c0:	701a      	strb	r2, [r3, #0]
          break;
 80078c2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80078c4:	e0a9      	b.n	8007a1a <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	785b      	ldrb	r3, [r3, #1]
 80078ca:	2b0b      	cmp	r3, #11
 80078cc:	d100      	bne.n	80078d0 <USBD_HID_Setup+0xbc>
 80078ce:	e075      	b.n	80079bc <USBD_HID_Setup+0x1a8>
 80078d0:	dd00      	ble.n	80078d4 <USBD_HID_Setup+0xc0>
 80078d2:	e08b      	b.n	80079ec <USBD_HID_Setup+0x1d8>
 80078d4:	2b0a      	cmp	r3, #10
 80078d6:	d057      	beq.n	8007988 <USBD_HID_Setup+0x174>
 80078d8:	dd00      	ble.n	80078dc <USBD_HID_Setup+0xc8>
 80078da:	e087      	b.n	80079ec <USBD_HID_Setup+0x1d8>
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <USBD_HID_Setup+0xd2>
 80078e0:	2b06      	cmp	r3, #6
 80078e2:	d019      	beq.n	8007918 <USBD_HID_Setup+0x104>
 80078e4:	e082      	b.n	80079ec <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	23a7      	movs	r3, #167	; 0xa7
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	5cd3      	ldrb	r3, [r2, r3]
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d107      	bne.n	8007902 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80078f2:	230e      	movs	r3, #14
 80078f4:	18f9      	adds	r1, r7, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2202      	movs	r2, #2
 80078fa:	0018      	movs	r0, r3
 80078fc:	f000 f908 	bl	8007b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007900:	e07f      	b.n	8007a02 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	0011      	movs	r1, r2
 8007908:	0018      	movs	r0, r3
 800790a:	f7ff feb3 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 800790e:	2317      	movs	r3, #23
 8007910:	18fb      	adds	r3, r7, r3
 8007912:	2202      	movs	r2, #2
 8007914:	701a      	strb	r2, [r3, #0]
          break;
 8007916:	e074      	b.n	8007a02 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	885b      	ldrh	r3, [r3, #2]
 800791c:	0a1b      	lsrs	r3, r3, #8
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b22      	cmp	r3, #34	; 0x22
 8007922:	d10b      	bne.n	800793c <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	88db      	ldrh	r3, [r3, #6]
 8007928:	221e      	movs	r2, #30
 800792a:	18ba      	adds	r2, r7, r2
 800792c:	b299      	uxth	r1, r3
 800792e:	2955      	cmp	r1, #85	; 0x55
 8007930:	d900      	bls.n	8007934 <USBD_HID_Setup+0x120>
 8007932:	2355      	movs	r3, #85	; 0x55
 8007934:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 8007936:	4b3c      	ldr	r3, [pc, #240]	; (8007a28 <USBD_HID_Setup+0x214>)
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e01c      	b.n	8007976 <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	885b      	ldrh	r3, [r3, #2]
 8007940:	0a1b      	lsrs	r3, r3, #8
 8007942:	b29b      	uxth	r3, r3
 8007944:	2b21      	cmp	r3, #33	; 0x21
 8007946:	d10b      	bne.n	8007960 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 8007948:	4b38      	ldr	r3, [pc, #224]	; (8007a2c <USBD_HID_Setup+0x218>)
 800794a:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	88db      	ldrh	r3, [r3, #6]
 8007950:	221e      	movs	r2, #30
 8007952:	18ba      	adds	r2, r7, r2
 8007954:	b299      	uxth	r1, r3
 8007956:	2909      	cmp	r1, #9
 8007958:	d900      	bls.n	800795c <USBD_HID_Setup+0x148>
 800795a:	2309      	movs	r3, #9
 800795c:	8013      	strh	r3, [r2, #0]
 800795e:	e00a      	b.n	8007976 <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	0011      	movs	r1, r2
 8007966:	0018      	movs	r0, r3
 8007968:	f7ff fe84 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 800796c:	2317      	movs	r3, #23
 800796e:	18fb      	adds	r3, r7, r3
 8007970:	2202      	movs	r2, #2
 8007972:	701a      	strb	r2, [r3, #0]
            break;
 8007974:	e045      	b.n	8007a02 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007976:	231e      	movs	r3, #30
 8007978:	18fb      	adds	r3, r7, r3
 800797a:	881a      	ldrh	r2, [r3, #0]
 800797c:	69b9      	ldr	r1, [r7, #24]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	0018      	movs	r0, r3
 8007982:	f000 f8c5 	bl	8007b10 <USBD_CtlSendData>
          break;
 8007986:	e03c      	b.n	8007a02 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	23a7      	movs	r3, #167	; 0xa7
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	5cd3      	ldrb	r3, [r2, r3]
 8007990:	2b03      	cmp	r3, #3
 8007992:	d108      	bne.n	80079a6 <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	3308      	adds	r3, #8
 8007998:	0019      	movs	r1, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	0018      	movs	r0, r3
 80079a0:	f000 f8b6 	bl	8007b10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079a4:	e02d      	b.n	8007a02 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	0011      	movs	r1, r2
 80079ac:	0018      	movs	r0, r3
 80079ae:	f7ff fe61 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 80079b2:	2317      	movs	r3, #23
 80079b4:	18fb      	adds	r3, r7, r3
 80079b6:	2202      	movs	r2, #2
 80079b8:	701a      	strb	r2, [r3, #0]
          break;
 80079ba:	e022      	b.n	8007a02 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	23a7      	movs	r3, #167	; 0xa7
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	5cd3      	ldrb	r3, [r2, r3]
 80079c4:	2b03      	cmp	r3, #3
 80079c6:	d106      	bne.n	80079d6 <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	885b      	ldrh	r3, [r3, #2]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	001a      	movs	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80079d4:	e015      	b.n	8007a02 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	0011      	movs	r1, r2
 80079dc:	0018      	movs	r0, r3
 80079de:	f7ff fe49 	bl	8007674 <USBD_CtlError>
            ret = USBD_FAIL;
 80079e2:	2317      	movs	r3, #23
 80079e4:	18fb      	adds	r3, r7, r3
 80079e6:	2202      	movs	r2, #2
 80079e8:	701a      	strb	r2, [r3, #0]
          break;
 80079ea:	e00a      	b.n	8007a02 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	0011      	movs	r1, r2
 80079f2:	0018      	movs	r0, r3
 80079f4:	f7ff fe3e 	bl	8007674 <USBD_CtlError>
          ret = USBD_FAIL;
 80079f8:	2317      	movs	r3, #23
 80079fa:	18fb      	adds	r3, r7, r3
 80079fc:	2202      	movs	r2, #2
 80079fe:	701a      	strb	r2, [r3, #0]
          break;
 8007a00:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007a02:	e00a      	b.n	8007a1a <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	0011      	movs	r1, r2
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f7ff fe32 	bl	8007674 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a10:	2317      	movs	r3, #23
 8007a12:	18fb      	adds	r3, r7, r3
 8007a14:	2202      	movs	r2, #2
 8007a16:	701a      	strb	r2, [r3, #0]
      break;
 8007a18:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8007a1a:	2317      	movs	r3, #23
 8007a1c:	18fb      	adds	r3, r7, r3
 8007a1e:	781b      	ldrb	r3, [r3, #0]
}
 8007a20:	0018      	movs	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b008      	add	sp, #32
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	200000c8 	.word	0x200000c8
 8007a2c:	200000b0 	.word	0x200000b0

08007a30 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	1dbb      	adds	r3, r7, #6
 8007a3c:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	23ae      	movs	r3, #174	; 0xae
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	58d3      	ldr	r3, [r2, r3]
 8007a46:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	23a7      	movs	r3, #167	; 0xa7
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	5cd3      	ldrb	r3, [r2, r3]
 8007a50:	2b03      	cmp	r3, #3
 8007a52:	d10d      	bne.n	8007a70 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	7b1b      	ldrb	r3, [r3, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8007a5c:	697b      	ldr	r3, [r7, #20]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8007a62:	1dbb      	adds	r3, r7, #6
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	2181      	movs	r1, #129	; 0x81
 8007a6c:	f000 fc7f 	bl	800836e <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	0018      	movs	r0, r3
 8007a74:	46bd      	mov	sp, r7
 8007a76:	b006      	add	sp, #24
 8007a78:	bd80      	pop	{r7, pc}
	...

08007a7c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2222      	movs	r2, #34	; 0x22
 8007a88:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007a8a:	4b02      	ldr	r3, [pc, #8]	; (8007a94 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	b002      	add	sp, #8
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20000044 	.word	0x20000044

08007a98 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2222      	movs	r2, #34	; 0x22
 8007aa4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007aa6:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8007aa8:	0018      	movs	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	b002      	add	sp, #8
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	20000068 	.word	0x20000068

08007ab4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2222      	movs	r2, #34	; 0x22
 8007ac0:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007ac2:	4b02      	ldr	r3, [pc, #8]	; (8007acc <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 8007ac4:	0018      	movs	r0, r3
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	2000008c 	.word	0x2000008c

08007ad0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	000a      	movs	r2, r1
 8007ada:	1cfb      	adds	r3, r7, #3
 8007adc:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	23ae      	movs	r3, #174	; 0xae
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	58d3      	ldr	r3, [r2, r3]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007aea:	2300      	movs	r3, #0
}
 8007aec:	0018      	movs	r0, r3
 8007aee:	46bd      	mov	sp, r7
 8007af0:	b002      	add	sp, #8
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	220a      	movs	r2, #10
 8007b00:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007b02:	4b02      	ldr	r3, [pc, #8]	; (8007b0c <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8007b04:	0018      	movs	r0, r3
 8007b06:	46bd      	mov	sp, r7
 8007b08:	b002      	add	sp, #8
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	200000bc 	.word	0x200000bc

08007b10 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	60b9      	str	r1, [r7, #8]
 8007b1a:	1dbb      	adds	r3, r7, #6
 8007b1c:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	23a5      	movs	r3, #165	; 0xa5
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	2102      	movs	r1, #2
 8007b26:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007b28:	1dbb      	adds	r3, r7, #6
 8007b2a:	881a      	ldrh	r2, [r3, #0]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007b30:	1dbb      	adds	r3, r7, #6
 8007b32:	881a      	ldrh	r2, [r3, #0]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b38:	1dbb      	adds	r3, r7, #6
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	2100      	movs	r1, #0
 8007b42:	f000 fc14 	bl	800836e <USBD_LL_Transmit>

  return USBD_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	0018      	movs	r0, r3
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	b004      	add	sp, #16
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	1dbb      	adds	r3, r7, #6
 8007b5c:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007b5e:	1dbb      	adds	r3, r7, #6
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	2100      	movs	r1, #0
 8007b68:	f000 fc01 	bl	800836e <USBD_LL_Transmit>

  return USBD_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	0018      	movs	r0, r3
 8007b70:	46bd      	mov	sp, r7
 8007b72:	b004      	add	sp, #16
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	1dbb      	adds	r3, r7, #6
 8007b82:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b84:	1dbb      	adds	r3, r7, #6
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	68ba      	ldr	r2, [r7, #8]
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f000 fc25 	bl	80083dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	0018      	movs	r0, r3
 8007b96:	46bd      	mov	sp, r7
 8007b98:	b004      	add	sp, #16
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	23a5      	movs	r3, #165	; 0xa5
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	2104      	movs	r1, #4
 8007bac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	f000 fbda 	bl	800836e <USBD_LL_Transmit>

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	b002      	add	sp, #8
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007bcc:	687a      	ldr	r2, [r7, #4]
 8007bce:	23a5      	movs	r3, #165	; 0xa5
 8007bd0:	009b      	lsls	r3, r3, #2
 8007bd2:	2105      	movs	r1, #5
 8007bd4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2100      	movs	r1, #0
 8007bde:	f000 fbfd 	bl	80083dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	0018      	movs	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	b002      	add	sp, #8
 8007bea:	bd80      	pop	{r7, pc}

08007bec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007bf0:	490f      	ldr	r1, [pc, #60]	; (8007c30 <MX_USB_DEVICE_Init+0x44>)
 8007bf2:	4b10      	ldr	r3, [pc, #64]	; (8007c34 <MX_USB_DEVICE_Init+0x48>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7fe fc3d 	bl	8006476 <USBD_Init>
 8007bfc:	1e03      	subs	r3, r0, #0
 8007bfe:	d001      	beq.n	8007c04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c00:	f7f8 fe70 	bl	80008e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007c04:	4a0c      	ldr	r2, [pc, #48]	; (8007c38 <MX_USB_DEVICE_Init+0x4c>)
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <MX_USB_DEVICE_Init+0x48>)
 8007c08:	0011      	movs	r1, r2
 8007c0a:	0018      	movs	r0, r3
 8007c0c:	f7fe fc64 	bl	80064d8 <USBD_RegisterClass>
 8007c10:	1e03      	subs	r3, r0, #0
 8007c12:	d001      	beq.n	8007c18 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007c14:	f7f8 fe66 	bl	80008e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007c18:	4b06      	ldr	r3, [pc, #24]	; (8007c34 <MX_USB_DEVICE_Init+0x48>)
 8007c1a:	0018      	movs	r0, r3
 8007c1c:	f7fe fc7c 	bl	8006518 <USBD_Start>
 8007c20:	1e03      	subs	r3, r0, #0
 8007c22:	d001      	beq.n	8007c28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007c24:	f7f8 fe5e 	bl	80008e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007c28:	46c0      	nop			; (mov r8, r8)
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	46c0      	nop			; (mov r8, r8)
 8007c30:	20000120 	.word	0x20000120
 8007c34:	2000023c 	.word	0x2000023c
 8007c38:	2000000c 	.word	0x2000000c

08007c3c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	0002      	movs	r2, r0
 8007c44:	6039      	str	r1, [r7, #0]
 8007c46:	1dfb      	adds	r3, r7, #7
 8007c48:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	2212      	movs	r2, #18
 8007c4e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c50:	4b02      	ldr	r3, [pc, #8]	; (8007c5c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c52:	0018      	movs	r0, r3
 8007c54:	46bd      	mov	sp, r7
 8007c56:	b002      	add	sp, #8
 8007c58:	bd80      	pop	{r7, pc}
 8007c5a:	46c0      	nop			; (mov r8, r8)
 8007c5c:	2000013c 	.word	0x2000013c

08007c60 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	0002      	movs	r2, r0
 8007c68:	6039      	str	r1, [r7, #0]
 8007c6a:	1dfb      	adds	r3, r7, #7
 8007c6c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2204      	movs	r2, #4
 8007c72:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007c74:	4b02      	ldr	r3, [pc, #8]	; (8007c80 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007c76:	0018      	movs	r0, r3
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	b002      	add	sp, #8
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	46c0      	nop			; (mov r8, r8)
 8007c80:	20000150 	.word	0x20000150

08007c84 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	0002      	movs	r2, r0
 8007c8c:	6039      	str	r1, [r7, #0]
 8007c8e:	1dfb      	adds	r3, r7, #7
 8007c90:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007c92:	1dfb      	adds	r3, r7, #7
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d106      	bne.n	8007ca8 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	4908      	ldr	r1, [pc, #32]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007c9e:	4b09      	ldr	r3, [pc, #36]	; (8007cc4 <USBD_FS_ProductStrDescriptor+0x40>)
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	f7ff fcfa 	bl	800769a <USBD_GetString>
 8007ca6:	e005      	b.n	8007cb4 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	4905      	ldr	r1, [pc, #20]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <USBD_FS_ProductStrDescriptor+0x40>)
 8007cae:	0018      	movs	r0, r3
 8007cb0:	f7ff fcf3 	bl	800769a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007cb6:	0018      	movs	r0, r3
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	b002      	add	sp, #8
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	46c0      	nop			; (mov r8, r8)
 8007cc0:	20000500 	.word	0x20000500
 8007cc4:	08008560 	.word	0x08008560

08007cc8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	0002      	movs	r2, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	1dfb      	adds	r3, r7, #7
 8007cd4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	4904      	ldr	r1, [pc, #16]	; (8007cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007cda:	4b05      	ldr	r3, [pc, #20]	; (8007cf0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007cdc:	0018      	movs	r0, r3
 8007cde:	f7ff fcdc 	bl	800769a <USBD_GetString>
  return USBD_StrDesc;
 8007ce2:	4b02      	ldr	r3, [pc, #8]	; (8007cec <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	b002      	add	sp, #8
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20000500 	.word	0x20000500
 8007cf0:	08008578 	.word	0x08008578

08007cf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	0002      	movs	r2, r0
 8007cfc:	6039      	str	r1, [r7, #0]
 8007cfe:	1dfb      	adds	r3, r7, #7
 8007d00:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	221a      	movs	r2, #26
 8007d06:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d08:	f000 f84c 	bl	8007da4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d0c:	4b02      	ldr	r3, [pc, #8]	; (8007d18 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007d0e:	0018      	movs	r0, r3
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b002      	add	sp, #8
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	20000154 	.word	0x20000154

08007d1c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	0002      	movs	r2, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	1dfb      	adds	r3, r7, #7
 8007d28:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007d2a:	1dfb      	adds	r3, r7, #7
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d106      	bne.n	8007d40 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	4908      	ldr	r1, [pc, #32]	; (8007d58 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007d36:	4b09      	ldr	r3, [pc, #36]	; (8007d5c <USBD_FS_ConfigStrDescriptor+0x40>)
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7ff fcae 	bl	800769a <USBD_GetString>
 8007d3e:	e005      	b.n	8007d4c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d40:	683a      	ldr	r2, [r7, #0]
 8007d42:	4905      	ldr	r1, [pc, #20]	; (8007d58 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007d44:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <USBD_FS_ConfigStrDescriptor+0x40>)
 8007d46:	0018      	movs	r0, r3
 8007d48:	f7ff fca7 	bl	800769a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d4c:	4b02      	ldr	r3, [pc, #8]	; (8007d58 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007d4e:	0018      	movs	r0, r3
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b002      	add	sp, #8
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	46c0      	nop			; (mov r8, r8)
 8007d58:	20000500 	.word	0x20000500
 8007d5c:	0800858c 	.word	0x0800858c

08007d60 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	0002      	movs	r2, r0
 8007d68:	6039      	str	r1, [r7, #0]
 8007d6a:	1dfb      	adds	r3, r7, #7
 8007d6c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007d6e:	1dfb      	adds	r3, r7, #7
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	4908      	ldr	r1, [pc, #32]	; (8007d9c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007d7a:	4b09      	ldr	r3, [pc, #36]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007d7c:	0018      	movs	r0, r3
 8007d7e:	f7ff fc8c 	bl	800769a <USBD_GetString>
 8007d82:	e005      	b.n	8007d90 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d84:	683a      	ldr	r2, [r7, #0]
 8007d86:	4905      	ldr	r1, [pc, #20]	; (8007d9c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007d88:	4b05      	ldr	r3, [pc, #20]	; (8007da0 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007d8a:	0018      	movs	r0, r3
 8007d8c:	f7ff fc85 	bl	800769a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d90:	4b02      	ldr	r3, [pc, #8]	; (8007d9c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007d92:	0018      	movs	r0, r3
 8007d94:	46bd      	mov	sp, r7
 8007d96:	b002      	add	sp, #8
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	46c0      	nop			; (mov r8, r8)
 8007d9c:	20000500 	.word	0x20000500
 8007da0:	08008598 	.word	0x08008598

08007da4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007daa:	4b10      	ldr	r3, [pc, #64]	; (8007dec <Get_SerialNum+0x48>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007db0:	4b0f      	ldr	r3, [pc, #60]	; (8007df0 <Get_SerialNum+0x4c>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <Get_SerialNum+0x50>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	18d3      	adds	r3, r2, r3
 8007dc2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00b      	beq.n	8007de2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007dca:	490b      	ldr	r1, [pc, #44]	; (8007df8 <Get_SerialNum+0x54>)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2208      	movs	r2, #8
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f000 f815 	bl	8007e00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007dd6:	4909      	ldr	r1, [pc, #36]	; (8007dfc <Get_SerialNum+0x58>)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	2204      	movs	r2, #4
 8007ddc:	0018      	movs	r0, r3
 8007dde:	f000 f80f 	bl	8007e00 <IntToUnicode>
  }
}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	1ff80050 	.word	0x1ff80050
 8007df0:	1ff80054 	.word	0x1ff80054
 8007df4:	1ff80058 	.word	0x1ff80058
 8007df8:	20000156 	.word	0x20000156
 8007dfc:	20000166 	.word	0x20000166

08007e00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	1dfb      	adds	r3, r7, #7
 8007e0c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007e0e:	2117      	movs	r1, #23
 8007e10:	187b      	adds	r3, r7, r1
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007e16:	187b      	adds	r3, r7, r1
 8007e18:	2200      	movs	r2, #0
 8007e1a:	701a      	strb	r2, [r3, #0]
 8007e1c:	e02f      	b.n	8007e7e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	0f1b      	lsrs	r3, r3, #28
 8007e22:	2b09      	cmp	r3, #9
 8007e24:	d80d      	bhi.n	8007e42 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	0f1b      	lsrs	r3, r3, #28
 8007e2a:	b2da      	uxtb	r2, r3
 8007e2c:	2317      	movs	r3, #23
 8007e2e:	18fb      	adds	r3, r7, r3
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	0019      	movs	r1, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	185b      	adds	r3, r3, r1
 8007e3a:	3230      	adds	r2, #48	; 0x30
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e00c      	b.n	8007e5c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	0f1b      	lsrs	r3, r3, #28
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	2317      	movs	r3, #23
 8007e4a:	18fb      	adds	r3, r7, r3
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	0019      	movs	r1, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	185b      	adds	r3, r3, r1
 8007e56:	3237      	adds	r2, #55	; 0x37
 8007e58:	b2d2      	uxtb	r2, r2
 8007e5a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	011b      	lsls	r3, r3, #4
 8007e60:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e62:	2117      	movs	r1, #23
 8007e64:	187b      	adds	r3, r7, r1
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	18d3      	adds	r3, r2, r3
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e74:	187b      	adds	r3, r7, r1
 8007e76:	781a      	ldrb	r2, [r3, #0]
 8007e78:	187b      	adds	r3, r7, r1
 8007e7a:	3201      	adds	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
 8007e7e:	2317      	movs	r3, #23
 8007e80:	18fa      	adds	r2, r7, r3
 8007e82:	1dfb      	adds	r3, r7, #7
 8007e84:	7812      	ldrb	r2, [r2, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3c8      	bcc.n	8007e1e <IntToUnicode+0x1e>
  }
}
 8007e8c:	46c0      	nop			; (mov r8, r8)
 8007e8e:	46c0      	nop			; (mov r8, r8)
 8007e90:	46bd      	mov	sp, r7
 8007e92:	b006      	add	sp, #24
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a0a      	ldr	r2, [pc, #40]	; (8007ed0 <HAL_PCD_MspInit+0x38>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d10e      	bne.n	8007ec8 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007eaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <HAL_PCD_MspInit+0x3c>)
 8007eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <HAL_PCD_MspInit+0x3c>)
 8007eb0:	2180      	movs	r1, #128	; 0x80
 8007eb2:	0409      	lsls	r1, r1, #16
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	201f      	movs	r0, #31
 8007ebe:	f7f9 fb65 	bl	800158c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007ec2:	201f      	movs	r0, #31
 8007ec4:	f7f9 fb77 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ec8:	46c0      	nop			; (mov r8, r8)
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	b002      	add	sp, #8
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40005c00 	.word	0x40005c00
 8007ed4:	40021000 	.word	0x40021000

08007ed8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	23bc      	movs	r3, #188	; 0xbc
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	58d2      	ldr	r2, [r2, r3]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	21ac      	movs	r1, #172	; 0xac
 8007eec:	0089      	lsls	r1, r1, #2
 8007eee:	468c      	mov	ip, r1
 8007ef0:	4463      	add	r3, ip
 8007ef2:	0019      	movs	r1, r3
 8007ef4:	0010      	movs	r0, r2
 8007ef6:	f7fe fb63 	bl	80065c0 <USBD_LL_SetupStage>
}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	46bd      	mov	sp, r7
 8007efe:	b002      	add	sp, #8
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f02:	b590      	push	{r4, r7, lr}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
 8007f0a:	000a      	movs	r2, r1
 8007f0c:	1cfb      	adds	r3, r7, #3
 8007f0e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f10:	687a      	ldr	r2, [r7, #4]
 8007f12:	23bc      	movs	r3, #188	; 0xbc
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	58d4      	ldr	r4, [r2, r3]
 8007f18:	1cfb      	adds	r3, r7, #3
 8007f1a:	781a      	ldrb	r2, [r3, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	23be      	movs	r3, #190	; 0xbe
 8007f20:	0059      	lsls	r1, r3, #1
 8007f22:	0013      	movs	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	00db      	lsls	r3, r3, #3
 8007f2a:	18c3      	adds	r3, r0, r3
 8007f2c:	185b      	adds	r3, r3, r1
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	1cfb      	adds	r3, r7, #3
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	0019      	movs	r1, r3
 8007f36:	0020      	movs	r0, r4
 8007f38:	f7fe fba0 	bl	800667c <USBD_LL_DataOutStage>
}
 8007f3c:	46c0      	nop			; (mov r8, r8)
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b003      	add	sp, #12
 8007f42:	bd90      	pop	{r4, r7, pc}

08007f44 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	000a      	movs	r2, r1
 8007f4e:	1cfb      	adds	r3, r7, #3
 8007f50:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	23bc      	movs	r3, #188	; 0xbc
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	58d0      	ldr	r0, [r2, r3]
 8007f5a:	1cfb      	adds	r3, r7, #3
 8007f5c:	781a      	ldrb	r2, [r3, #0]
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	0013      	movs	r3, r2
 8007f62:	009b      	lsls	r3, r3, #2
 8007f64:	189b      	adds	r3, r3, r2
 8007f66:	00db      	lsls	r3, r3, #3
 8007f68:	18cb      	adds	r3, r1, r3
 8007f6a:	333c      	adds	r3, #60	; 0x3c
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	1cfb      	adds	r3, r7, #3
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	0019      	movs	r1, r3
 8007f74:	f7fe fc04 	bl	8006780 <USBD_LL_DataInStage>
}
 8007f78:	46c0      	nop			; (mov r8, r8)
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	23bc      	movs	r3, #188	; 0xbc
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	58d3      	ldr	r3, [r2, r3]
 8007f90:	0018      	movs	r0, r3
 8007f92:	f7fe fd3b 	bl	8006a0c <USBD_LL_SOF>
}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	b002      	add	sp, #8
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b084      	sub	sp, #16
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007fa6:	230f      	movs	r3, #15
 8007fa8:	18fb      	adds	r3, r7, r3
 8007faa:	2201      	movs	r2, #1
 8007fac:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d001      	beq.n	8007fba <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007fb6:	f7f8 fc95 	bl	80008e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	23bc      	movs	r3, #188	; 0xbc
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	58d2      	ldr	r2, [r2, r3]
 8007fc2:	230f      	movs	r3, #15
 8007fc4:	18fb      	adds	r3, r7, r3
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	0019      	movs	r1, r3
 8007fca:	0010      	movs	r0, r2
 8007fcc:	f7fe fcdd 	bl	800698a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	23bc      	movs	r3, #188	; 0xbc
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	58d3      	ldr	r3, [r2, r3]
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7fe fc8e 	bl	80068fa <USBD_LL_Reset>
}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b004      	add	sp, #16
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	23bc      	movs	r3, #188	; 0xbc
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	58d3      	ldr	r3, [r2, r3]
 8007ff8:	0018      	movs	r0, r3
 8007ffa:	f7fe fcd7 	bl	80069ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	699b      	ldr	r3, [r3, #24]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d005      	beq.n	8008012 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008006:	4b05      	ldr	r3, [pc, #20]	; (800801c <HAL_PCD_SuspendCallback+0x34>)
 8008008:	691a      	ldr	r2, [r3, #16]
 800800a:	4b04      	ldr	r3, [pc, #16]	; (800801c <HAL_PCD_SuspendCallback+0x34>)
 800800c:	2106      	movs	r1, #6
 800800e:	430a      	orrs	r2, r1
 8008010:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	46bd      	mov	sp, r7
 8008016:	b002      	add	sp, #8
 8008018:	bd80      	pop	{r7, pc}
 800801a:	46c0      	nop			; (mov r8, r8)
 800801c:	e000ed00 	.word	0xe000ed00

08008020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008030:	4b09      	ldr	r3, [pc, #36]	; (8008058 <HAL_PCD_ResumeCallback+0x38>)
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	4b08      	ldr	r3, [pc, #32]	; (8008058 <HAL_PCD_ResumeCallback+0x38>)
 8008036:	2106      	movs	r1, #6
 8008038:	438a      	bics	r2, r1
 800803a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800803c:	f000 fa1a 	bl	8008474 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008040:	687a      	ldr	r2, [r7, #4]
 8008042:	23bc      	movs	r3, #188	; 0xbc
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	58d3      	ldr	r3, [r2, r3]
 8008048:	0018      	movs	r0, r3
 800804a:	f7fe fcc7 	bl	80069dc <USBD_LL_Resume>
}
 800804e:	46c0      	nop			; (mov r8, r8)
 8008050:	46bd      	mov	sp, r7
 8008052:	b002      	add	sp, #8
 8008054:	bd80      	pop	{r7, pc}
 8008056:	46c0      	nop			; (mov r8, r8)
 8008058:	e000ed00 	.word	0xe000ed00

0800805c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008064:	4a23      	ldr	r2, [pc, #140]	; (80080f4 <USBD_LL_Init+0x98>)
 8008066:	23bc      	movs	r3, #188	; 0xbc
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	6879      	ldr	r1, [r7, #4]
 800806c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	23b0      	movs	r3, #176	; 0xb0
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	491f      	ldr	r1, [pc, #124]	; (80080f4 <USBD_LL_Init+0x98>)
 8008076:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008078:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <USBD_LL_Init+0x98>)
 800807a:	4a1f      	ldr	r2, [pc, #124]	; (80080f8 <USBD_LL_Init+0x9c>)
 800807c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800807e:	4b1d      	ldr	r3, [pc, #116]	; (80080f4 <USBD_LL_Init+0x98>)
 8008080:	2208      	movs	r2, #8
 8008082:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008084:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <USBD_LL_Init+0x98>)
 8008086:	2202      	movs	r2, #2
 8008088:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800808a:	4b1a      	ldr	r3, [pc, #104]	; (80080f4 <USBD_LL_Init+0x98>)
 800808c:	2202      	movs	r2, #2
 800808e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008090:	4b18      	ldr	r3, [pc, #96]	; (80080f4 <USBD_LL_Init+0x98>)
 8008092:	2200      	movs	r2, #0
 8008094:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008096:	4b17      	ldr	r3, [pc, #92]	; (80080f4 <USBD_LL_Init+0x98>)
 8008098:	2200      	movs	r2, #0
 800809a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800809c:	4b15      	ldr	r3, [pc, #84]	; (80080f4 <USBD_LL_Init+0x98>)
 800809e:	2200      	movs	r2, #0
 80080a0:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80080a2:	4b14      	ldr	r3, [pc, #80]	; (80080f4 <USBD_LL_Init+0x98>)
 80080a4:	0018      	movs	r0, r3
 80080a6:	f7f9 fc3f 	bl	8001928 <HAL_PCD_Init>
 80080aa:	1e03      	subs	r3, r0, #0
 80080ac:	d001      	beq.n	80080b2 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80080ae:	f7f8 fc19 	bl	80008e4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	23b0      	movs	r3, #176	; 0xb0
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	58d0      	ldr	r0, [r2, r3]
 80080ba:	2318      	movs	r3, #24
 80080bc:	2200      	movs	r2, #0
 80080be:	2100      	movs	r1, #0
 80080c0:	f7fb fa08 	bl	80034d4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	23b0      	movs	r3, #176	; 0xb0
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	58d0      	ldr	r0, [r2, r3]
 80080cc:	2358      	movs	r3, #88	; 0x58
 80080ce:	2200      	movs	r2, #0
 80080d0:	2180      	movs	r1, #128	; 0x80
 80080d2:	f7fb f9ff 	bl	80034d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	23b0      	movs	r3, #176	; 0xb0
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	58d0      	ldr	r0, [r2, r3]
 80080de:	2380      	movs	r3, #128	; 0x80
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	2200      	movs	r2, #0
 80080e4:	2181      	movs	r1, #129	; 0x81
 80080e6:	f7fb f9f5 	bl	80034d4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	0018      	movs	r0, r3
 80080ee:	46bd      	mov	sp, r7
 80080f0:	b002      	add	sp, #8
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	20000700 	.word	0x20000700
 80080f8:	40005c00 	.word	0x40005c00

080080fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80080fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008104:	210f      	movs	r1, #15
 8008106:	187b      	adds	r3, r7, r1
 8008108:	2200      	movs	r2, #0
 800810a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800810c:	260e      	movs	r6, #14
 800810e:	19bb      	adds	r3, r7, r6
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	23b0      	movs	r3, #176	; 0xb0
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	58d3      	ldr	r3, [r2, r3]
 800811c:	000d      	movs	r5, r1
 800811e:	187c      	adds	r4, r7, r1
 8008120:	0018      	movs	r0, r3
 8008122:	f7f9 fd11 	bl	8001b48 <HAL_PCD_Start>
 8008126:	0003      	movs	r3, r0
 8008128:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812a:	19bc      	adds	r4, r7, r6
 800812c:	197b      	adds	r3, r7, r5
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	0018      	movs	r0, r3
 8008132:	f000 f9a6 	bl	8008482 <USBD_Get_USB_Status>
 8008136:	0003      	movs	r3, r0
 8008138:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800813a:	19bb      	adds	r3, r7, r6
 800813c:	781b      	ldrb	r3, [r3, #0]
}
 800813e:	0018      	movs	r0, r3
 8008140:	46bd      	mov	sp, r7
 8008142:	b005      	add	sp, #20
 8008144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008146 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
 800814e:	000c      	movs	r4, r1
 8008150:	0010      	movs	r0, r2
 8008152:	0019      	movs	r1, r3
 8008154:	1cfb      	adds	r3, r7, #3
 8008156:	1c22      	adds	r2, r4, #0
 8008158:	701a      	strb	r2, [r3, #0]
 800815a:	1cbb      	adds	r3, r7, #2
 800815c:	1c02      	adds	r2, r0, #0
 800815e:	701a      	strb	r2, [r3, #0]
 8008160:	003b      	movs	r3, r7
 8008162:	1c0a      	adds	r2, r1, #0
 8008164:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008166:	260f      	movs	r6, #15
 8008168:	19bb      	adds	r3, r7, r6
 800816a:	2200      	movs	r2, #0
 800816c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816e:	250e      	movs	r5, #14
 8008170:	197b      	adds	r3, r7, r5
 8008172:	2200      	movs	r2, #0
 8008174:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	23b0      	movs	r3, #176	; 0xb0
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	58d0      	ldr	r0, [r2, r3]
 800817e:	19bc      	adds	r4, r7, r6
 8008180:	1cbb      	adds	r3, r7, #2
 8008182:	781d      	ldrb	r5, [r3, #0]
 8008184:	003b      	movs	r3, r7
 8008186:	881a      	ldrh	r2, [r3, #0]
 8008188:	1cfb      	adds	r3, r7, #3
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	002b      	movs	r3, r5
 800818e:	f7f9 fea8 	bl	8001ee2 <HAL_PCD_EP_Open>
 8008192:	0003      	movs	r3, r0
 8008194:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008196:	250e      	movs	r5, #14
 8008198:	197c      	adds	r4, r7, r5
 800819a:	19bb      	adds	r3, r7, r6
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 f96f 	bl	8008482 <USBD_Get_USB_Status>
 80081a4:	0003      	movs	r3, r0
 80081a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80081a8:	197b      	adds	r3, r7, r5
 80081aa:	781b      	ldrb	r3, [r3, #0]
}
 80081ac:	0018      	movs	r0, r3
 80081ae:	46bd      	mov	sp, r7
 80081b0:	b005      	add	sp, #20
 80081b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081b4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	000a      	movs	r2, r1
 80081be:	1cfb      	adds	r3, r7, #3
 80081c0:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c2:	210f      	movs	r1, #15
 80081c4:	187b      	adds	r3, r7, r1
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081ca:	260e      	movs	r6, #14
 80081cc:	19bb      	adds	r3, r7, r6
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	23b0      	movs	r3, #176	; 0xb0
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	58d2      	ldr	r2, [r2, r3]
 80081da:	000d      	movs	r5, r1
 80081dc:	187c      	adds	r4, r7, r1
 80081de:	1cfb      	adds	r3, r7, #3
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	0019      	movs	r1, r3
 80081e4:	0010      	movs	r0, r2
 80081e6:	f7f9 fef4 	bl	8001fd2 <HAL_PCD_EP_Close>
 80081ea:	0003      	movs	r3, r0
 80081ec:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081ee:	19bc      	adds	r4, r7, r6
 80081f0:	197b      	adds	r3, r7, r5
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	0018      	movs	r0, r3
 80081f6:	f000 f944 	bl	8008482 <USBD_Get_USB_Status>
 80081fa:	0003      	movs	r3, r0
 80081fc:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80081fe:	19bb      	adds	r3, r7, r6
 8008200:	781b      	ldrb	r3, [r3, #0]
}
 8008202:	0018      	movs	r0, r3
 8008204:	46bd      	mov	sp, r7
 8008206:	b005      	add	sp, #20
 8008208:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800820a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800820a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	000a      	movs	r2, r1
 8008214:	1cfb      	adds	r3, r7, #3
 8008216:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008218:	210f      	movs	r1, #15
 800821a:	187b      	adds	r3, r7, r1
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008220:	260e      	movs	r6, #14
 8008222:	19bb      	adds	r3, r7, r6
 8008224:	2200      	movs	r2, #0
 8008226:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	23b0      	movs	r3, #176	; 0xb0
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	58d2      	ldr	r2, [r2, r3]
 8008230:	000d      	movs	r5, r1
 8008232:	187c      	adds	r4, r7, r1
 8008234:	1cfb      	adds	r3, r7, #3
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	0019      	movs	r1, r3
 800823a:	0010      	movs	r0, r2
 800823c:	f7f9 ffa7 	bl	800218e <HAL_PCD_EP_SetStall>
 8008240:	0003      	movs	r3, r0
 8008242:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008244:	19bc      	adds	r4, r7, r6
 8008246:	197b      	adds	r3, r7, r5
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	0018      	movs	r0, r3
 800824c:	f000 f919 	bl	8008482 <USBD_Get_USB_Status>
 8008250:	0003      	movs	r3, r0
 8008252:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008254:	19bb      	adds	r3, r7, r6
 8008256:	781b      	ldrb	r3, [r3, #0]
}
 8008258:	0018      	movs	r0, r3
 800825a:	46bd      	mov	sp, r7
 800825c:	b005      	add	sp, #20
 800825e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008260 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	000a      	movs	r2, r1
 800826a:	1cfb      	adds	r3, r7, #3
 800826c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826e:	210f      	movs	r1, #15
 8008270:	187b      	adds	r3, r7, r1
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008276:	260e      	movs	r6, #14
 8008278:	19bb      	adds	r3, r7, r6
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	23b0      	movs	r3, #176	; 0xb0
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	58d2      	ldr	r2, [r2, r3]
 8008286:	000d      	movs	r5, r1
 8008288:	187c      	adds	r4, r7, r1
 800828a:	1cfb      	adds	r3, r7, #3
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	0019      	movs	r1, r3
 8008290:	0010      	movs	r0, r2
 8008292:	f7f9 ffd8 	bl	8002246 <HAL_PCD_EP_ClrStall>
 8008296:	0003      	movs	r3, r0
 8008298:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829a:	19bc      	adds	r4, r7, r6
 800829c:	197b      	adds	r3, r7, r5
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	0018      	movs	r0, r3
 80082a2:	f000 f8ee 	bl	8008482 <USBD_Get_USB_Status>
 80082a6:	0003      	movs	r3, r0
 80082a8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80082aa:	19bb      	adds	r3, r7, r6
 80082ac:	781b      	ldrb	r3, [r3, #0]
}
 80082ae:	0018      	movs	r0, r3
 80082b0:	46bd      	mov	sp, r7
 80082b2:	b005      	add	sp, #20
 80082b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082b6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
 80082be:	000a      	movs	r2, r1
 80082c0:	1cfb      	adds	r3, r7, #3
 80082c2:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	23b0      	movs	r3, #176	; 0xb0
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	58d3      	ldr	r3, [r2, r3]
 80082cc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082ce:	1cfb      	adds	r3, r7, #3
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	da0d      	bge.n	80082f4 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80082d8:	1cfb      	adds	r3, r7, #3
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	227f      	movs	r2, #127	; 0x7f
 80082de:	4013      	ands	r3, r2
 80082e0:	68f9      	ldr	r1, [r7, #12]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	0013      	movs	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	18cb      	adds	r3, r1, r3
 80082ee:	3302      	adds	r3, #2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	e00d      	b.n	8008310 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80082f4:	1cfb      	adds	r3, r7, #3
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	227f      	movs	r2, #127	; 0x7f
 80082fa:	401a      	ands	r2, r3
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	23b5      	movs	r3, #181	; 0xb5
 8008300:	0059      	lsls	r1, r3, #1
 8008302:	0013      	movs	r3, r2
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	189b      	adds	r3, r3, r2
 8008308:	00db      	lsls	r3, r3, #3
 800830a:	18c3      	adds	r3, r0, r3
 800830c:	185b      	adds	r3, r3, r1
 800830e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008310:	0018      	movs	r0, r3
 8008312:	46bd      	mov	sp, r7
 8008314:	b004      	add	sp, #16
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	000a      	movs	r2, r1
 8008322:	1cfb      	adds	r3, r7, #3
 8008324:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008326:	210f      	movs	r1, #15
 8008328:	187b      	adds	r3, r7, r1
 800832a:	2200      	movs	r2, #0
 800832c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800832e:	260e      	movs	r6, #14
 8008330:	19bb      	adds	r3, r7, r6
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	23b0      	movs	r3, #176	; 0xb0
 800833a:	009b      	lsls	r3, r3, #2
 800833c:	58d2      	ldr	r2, [r2, r3]
 800833e:	000d      	movs	r5, r1
 8008340:	187c      	adds	r4, r7, r1
 8008342:	1cfb      	adds	r3, r7, #3
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	0019      	movs	r1, r3
 8008348:	0010      	movs	r0, r2
 800834a:	f7f9 fd9f 	bl	8001e8c <HAL_PCD_SetAddress>
 800834e:	0003      	movs	r3, r0
 8008350:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008352:	19bc      	adds	r4, r7, r6
 8008354:	197b      	adds	r3, r7, r5
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	0018      	movs	r0, r3
 800835a:	f000 f892 	bl	8008482 <USBD_Get_USB_Status>
 800835e:	0003      	movs	r3, r0
 8008360:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008362:	19bb      	adds	r3, r7, r6
 8008364:	781b      	ldrb	r3, [r3, #0]
}
 8008366:	0018      	movs	r0, r3
 8008368:	46bd      	mov	sp, r7
 800836a:	b005      	add	sp, #20
 800836c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800836e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800836e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008370:	b087      	sub	sp, #28
 8008372:	af00      	add	r7, sp, #0
 8008374:	60f8      	str	r0, [r7, #12]
 8008376:	0008      	movs	r0, r1
 8008378:	607a      	str	r2, [r7, #4]
 800837a:	0019      	movs	r1, r3
 800837c:	230b      	movs	r3, #11
 800837e:	18fb      	adds	r3, r7, r3
 8008380:	1c02      	adds	r2, r0, #0
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	2408      	movs	r4, #8
 8008386:	193b      	adds	r3, r7, r4
 8008388:	1c0a      	adds	r2, r1, #0
 800838a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838c:	2117      	movs	r1, #23
 800838e:	187b      	adds	r3, r7, r1
 8008390:	2200      	movs	r2, #0
 8008392:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008394:	2516      	movs	r5, #22
 8008396:	197b      	adds	r3, r7, r5
 8008398:	2200      	movs	r2, #0
 800839a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800839c:	68fa      	ldr	r2, [r7, #12]
 800839e:	23b0      	movs	r3, #176	; 0xb0
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	58d0      	ldr	r0, [r2, r3]
 80083a4:	193b      	adds	r3, r7, r4
 80083a6:	881d      	ldrh	r5, [r3, #0]
 80083a8:	000e      	movs	r6, r1
 80083aa:	187c      	adds	r4, r7, r1
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	230b      	movs	r3, #11
 80083b0:	18fb      	adds	r3, r7, r3
 80083b2:	7819      	ldrb	r1, [r3, #0]
 80083b4:	002b      	movs	r3, r5
 80083b6:	f7f9 fea1 	bl	80020fc <HAL_PCD_EP_Transmit>
 80083ba:	0003      	movs	r3, r0
 80083bc:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083be:	2516      	movs	r5, #22
 80083c0:	197c      	adds	r4, r7, r5
 80083c2:	19bb      	adds	r3, r7, r6
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	0018      	movs	r0, r3
 80083c8:	f000 f85b 	bl	8008482 <USBD_Get_USB_Status>
 80083cc:	0003      	movs	r3, r0
 80083ce:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80083d0:	197b      	adds	r3, r7, r5
 80083d2:	781b      	ldrb	r3, [r3, #0]
}
 80083d4:	0018      	movs	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	b007      	add	sp, #28
 80083da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80083dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083de:	b087      	sub	sp, #28
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	0008      	movs	r0, r1
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	0019      	movs	r1, r3
 80083ea:	230b      	movs	r3, #11
 80083ec:	18fb      	adds	r3, r7, r3
 80083ee:	1c02      	adds	r2, r0, #0
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	2408      	movs	r4, #8
 80083f4:	193b      	adds	r3, r7, r4
 80083f6:	1c0a      	adds	r2, r1, #0
 80083f8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fa:	2117      	movs	r1, #23
 80083fc:	187b      	adds	r3, r7, r1
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008402:	2516      	movs	r5, #22
 8008404:	197b      	adds	r3, r7, r5
 8008406:	2200      	movs	r2, #0
 8008408:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	23b0      	movs	r3, #176	; 0xb0
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	58d0      	ldr	r0, [r2, r3]
 8008412:	193b      	adds	r3, r7, r4
 8008414:	881d      	ldrh	r5, [r3, #0]
 8008416:	000e      	movs	r6, r1
 8008418:	187c      	adds	r4, r7, r1
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	230b      	movs	r3, #11
 800841e:	18fb      	adds	r3, r7, r3
 8008420:	7819      	ldrb	r1, [r3, #0]
 8008422:	002b      	movs	r3, r5
 8008424:	f7f9 fe26 	bl	8002074 <HAL_PCD_EP_Receive>
 8008428:	0003      	movs	r3, r0
 800842a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800842c:	2516      	movs	r5, #22
 800842e:	197c      	adds	r4, r7, r5
 8008430:	19bb      	adds	r3, r7, r6
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	0018      	movs	r0, r3
 8008436:	f000 f824 	bl	8008482 <USBD_Get_USB_Status>
 800843a:	0003      	movs	r3, r0
 800843c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800843e:	197b      	adds	r3, r7, r5
 8008440:	781b      	ldrb	r3, [r3, #0]
}
 8008442:	0018      	movs	r0, r3
 8008444:	46bd      	mov	sp, r7
 8008446:	b007      	add	sp, #28
 8008448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800844c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008454:	4b02      	ldr	r3, [pc, #8]	; (8008460 <USBD_static_malloc+0x14>)
}
 8008456:	0018      	movs	r0, r3
 8008458:	46bd      	mov	sp, r7
 800845a:	b002      	add	sp, #8
 800845c:	bd80      	pop	{r7, pc}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	20000190 	.word	0x20000190

08008464 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]

}
 800846c:	46c0      	nop			; (mov r8, r8)
 800846e:	46bd      	mov	sp, r7
 8008470:	b002      	add	sp, #8
 8008472:	bd80      	pop	{r7, pc}

08008474 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008478:	f7f8 f858 	bl	800052c <SystemClock_Config>
}
 800847c:	46c0      	nop			; (mov r8, r8)
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	0002      	movs	r2, r0
 800848a:	1dfb      	adds	r3, r7, #7
 800848c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848e:	230f      	movs	r3, #15
 8008490:	18fb      	adds	r3, r7, r3
 8008492:	2200      	movs	r2, #0
 8008494:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8008496:	1dfb      	adds	r3, r7, #7
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d017      	beq.n	80084ce <USBD_Get_USB_Status+0x4c>
 800849e:	dc1b      	bgt.n	80084d8 <USBD_Get_USB_Status+0x56>
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d00f      	beq.n	80084c4 <USBD_Get_USB_Status+0x42>
 80084a4:	dc18      	bgt.n	80084d8 <USBD_Get_USB_Status+0x56>
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d002      	beq.n	80084b0 <USBD_Get_USB_Status+0x2e>
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d005      	beq.n	80084ba <USBD_Get_USB_Status+0x38>
 80084ae:	e013      	b.n	80084d8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80084b0:	230f      	movs	r3, #15
 80084b2:	18fb      	adds	r3, r7, r3
 80084b4:	2200      	movs	r2, #0
 80084b6:	701a      	strb	r2, [r3, #0]
    break;
 80084b8:	e013      	b.n	80084e2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80084ba:	230f      	movs	r3, #15
 80084bc:	18fb      	adds	r3, r7, r3
 80084be:	2202      	movs	r2, #2
 80084c0:	701a      	strb	r2, [r3, #0]
    break;
 80084c2:	e00e      	b.n	80084e2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80084c4:	230f      	movs	r3, #15
 80084c6:	18fb      	adds	r3, r7, r3
 80084c8:	2201      	movs	r2, #1
 80084ca:	701a      	strb	r2, [r3, #0]
    break;
 80084cc:	e009      	b.n	80084e2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80084ce:	230f      	movs	r3, #15
 80084d0:	18fb      	adds	r3, r7, r3
 80084d2:	2202      	movs	r2, #2
 80084d4:	701a      	strb	r2, [r3, #0]
    break;
 80084d6:	e004      	b.n	80084e2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80084d8:	230f      	movs	r3, #15
 80084da:	18fb      	adds	r3, r7, r3
 80084dc:	2202      	movs	r2, #2
 80084de:	701a      	strb	r2, [r3, #0]
    break;
 80084e0:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80084e2:	230f      	movs	r3, #15
 80084e4:	18fb      	adds	r3, r7, r3
 80084e6:	781b      	ldrb	r3, [r3, #0]
}
 80084e8:	0018      	movs	r0, r3
 80084ea:	46bd      	mov	sp, r7
 80084ec:	b004      	add	sp, #16
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <__libc_init_array>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	2600      	movs	r6, #0
 80084f4:	4d0c      	ldr	r5, [pc, #48]	; (8008528 <__libc_init_array+0x38>)
 80084f6:	4c0d      	ldr	r4, [pc, #52]	; (800852c <__libc_init_array+0x3c>)
 80084f8:	1b64      	subs	r4, r4, r5
 80084fa:	10a4      	asrs	r4, r4, #2
 80084fc:	42a6      	cmp	r6, r4
 80084fe:	d109      	bne.n	8008514 <__libc_init_array+0x24>
 8008500:	2600      	movs	r6, #0
 8008502:	f000 f821 	bl	8008548 <_init>
 8008506:	4d0a      	ldr	r5, [pc, #40]	; (8008530 <__libc_init_array+0x40>)
 8008508:	4c0a      	ldr	r4, [pc, #40]	; (8008534 <__libc_init_array+0x44>)
 800850a:	1b64      	subs	r4, r4, r5
 800850c:	10a4      	asrs	r4, r4, #2
 800850e:	42a6      	cmp	r6, r4
 8008510:	d105      	bne.n	800851e <__libc_init_array+0x2e>
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	00b3      	lsls	r3, r6, #2
 8008516:	58eb      	ldr	r3, [r5, r3]
 8008518:	4798      	blx	r3
 800851a:	3601      	adds	r6, #1
 800851c:	e7ee      	b.n	80084fc <__libc_init_array+0xc>
 800851e:	00b3      	lsls	r3, r6, #2
 8008520:	58eb      	ldr	r3, [r5, r3]
 8008522:	4798      	blx	r3
 8008524:	3601      	adds	r6, #1
 8008526:	e7f2      	b.n	800850e <__libc_init_array+0x1e>
 8008528:	0800862c 	.word	0x0800862c
 800852c:	0800862c 	.word	0x0800862c
 8008530:	0800862c 	.word	0x0800862c
 8008534:	08008630 	.word	0x08008630

08008538 <memset>:
 8008538:	0003      	movs	r3, r0
 800853a:	1882      	adds	r2, r0, r2
 800853c:	4293      	cmp	r3, r2
 800853e:	d100      	bne.n	8008542 <memset+0xa>
 8008540:	4770      	bx	lr
 8008542:	7019      	strb	r1, [r3, #0]
 8008544:	3301      	adds	r3, #1
 8008546:	e7f9      	b.n	800853c <memset+0x4>

08008548 <_init>:
 8008548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854e:	bc08      	pop	{r3}
 8008550:	469e      	mov	lr, r3
 8008552:	4770      	bx	lr

08008554 <_fini>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr
