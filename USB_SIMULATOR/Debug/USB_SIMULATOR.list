
USB_SIMULATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008278  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800844c  0800844c  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008454  08008454  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800845c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000874  20000170  080085cc  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009e4  080085cc  000209e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fd1  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e3e  00000000  00000000  00035169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00037fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00038c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fb8  00000000  00000000  00039760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013069  00000000  00000000  00050718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008220c  00000000  00000000  00063781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e598d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b14  00000000  00000000  000e59e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000170 	.word	0x20000170
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008320 	.word	0x08008320

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000174 	.word	0x20000174
 8000104:	08008320 	.word	0x08008320

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 f980 	bl	80007a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f808 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 f8b4 	bl	8000614 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ac:	f000 f882 	bl	80005b4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80004b0:	f007 fa88 	bl	80079c4 <MX_USB_DEVICE_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <main+0x18>
	...

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b09f      	sub	sp, #124	; 0x7c
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	2440      	movs	r4, #64	; 0x40
 80004c0:	193b      	adds	r3, r7, r4
 80004c2:	0018      	movs	r0, r3
 80004c4:	2338      	movs	r3, #56	; 0x38
 80004c6:	001a      	movs	r2, r3
 80004c8:	2100      	movs	r1, #0
 80004ca:	f007 ff21 	bl	8008310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ce:	232c      	movs	r3, #44	; 0x2c
 80004d0:	18fb      	adds	r3, r7, r3
 80004d2:	0018      	movs	r0, r3
 80004d4:	2314      	movs	r3, #20
 80004d6:	001a      	movs	r2, r3
 80004d8:	2100      	movs	r1, #0
 80004da:	f007 ff19 	bl	8008310 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	0018      	movs	r0, r3
 80004e2:	2328      	movs	r3, #40	; 0x28
 80004e4:	001a      	movs	r2, r3
 80004e6:	2100      	movs	r1, #0
 80004e8:	f007 ff12 	bl	8008310 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ec:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <SystemClock_Config+0xf4>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a2f      	ldr	r2, [pc, #188]	; (80005b0 <SystemClock_Config+0xf8>)
 80004f2:	401a      	ands	r2, r3
 80004f4:	4b2d      	ldr	r3, [pc, #180]	; (80005ac <SystemClock_Config+0xf4>)
 80004f6:	2180      	movs	r1, #128	; 0x80
 80004f8:	0109      	lsls	r1, r1, #4
 80004fa:	430a      	orrs	r2, r1
 80004fc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80004fe:	0021      	movs	r1, r4
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2212      	movs	r2, #18
 8000504:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2201      	movs	r2, #1
 800050a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2210      	movs	r2, #16
 8000510:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000512:	187b      	adds	r3, r7, r1
 8000514:	2201      	movs	r2, #1
 8000516:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2200      	movs	r2, #0
 800051c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800051e:	187b      	adds	r3, r7, r1
 8000520:	22a0      	movs	r2, #160	; 0xa0
 8000522:	0212      	lsls	r2, r2, #8
 8000524:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2202      	movs	r2, #2
 800052a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	03d2      	lsls	r2, r2, #15
 800053e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	187b      	adds	r3, r7, r1
 8000542:	0018      	movs	r0, r3
 8000544:	f002 fa54 	bl	80029f0 <HAL_RCC_OscConfig>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800054c:	f000 f878 	bl	8000640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000550:	212c      	movs	r1, #44	; 0x2c
 8000552:	187b      	adds	r3, r7, r1
 8000554:	220f      	movs	r2, #15
 8000556:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2100      	movs	r1, #0
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fe0f 	bl	8003198 <HAL_RCC_ClockConfig>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800057e:	f000 f85f 	bl	8000640 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USB;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2242      	movs	r2, #66	; 0x42
 8000586:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	0018      	movs	r0, r3
 8000598:	f003 f822 	bl	80035e0 <HAL_RCCEx_PeriphCLKConfig>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80005a0:	f000 f84e 	bl	8000640 <Error_Handler>
  }
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b01f      	add	sp, #124	; 0x7c
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	40007000 	.word	0x40007000
 80005b0:	ffffe7ff 	.word	0xffffe7ff

080005b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005b8:	4b14      	ldr	r3, [pc, #80]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005ba:	4a15      	ldr	r2, [pc, #84]	; (8000610 <MX_USART2_UART_Init+0x5c>)
 80005bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005c0:	22e1      	movs	r2, #225	; 0xe1
 80005c2:	0252      	lsls	r2, r2, #9
 80005c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005da:	220c      	movs	r2, #12
 80005dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_USART2_UART_Init+0x58>)
 80005f8:	0018      	movs	r0, r3
 80005fa:	f003 f965 	bl	80038c8 <HAL_UART_Init>
 80005fe:	1e03      	subs	r3, r0, #0
 8000600:	d001      	beq.n	8000606 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000602:	f000 f81d 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200001a4 	.word	0x200001a4
 8000610:	40004400 	.word	0x40004400

08000614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <MX_GPIO_Init+0x28>)
 800061c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061e:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_GPIO_Init+0x28>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	62da      	str	r2, [r3, #44]	; 0x2c
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <MX_GPIO_Init+0x28>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	687b      	ldr	r3, [r7, #4]

}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	40021000 	.word	0x40021000

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <HAL_MspInit+0x24>)
 8000652:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000654:	4b06      	ldr	r3, [pc, #24]	; (8000670 <HAL_MspInit+0x24>)
 8000656:	2101      	movs	r1, #1
 8000658:	430a      	orrs	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	4b04      	ldr	r3, [pc, #16]	; (8000670 <HAL_MspInit+0x24>)
 800065e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_MspInit+0x24>)
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0549      	lsls	r1, r1, #21
 8000666:	430a      	orrs	r2, r1
 8000668:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000

08000674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b089      	sub	sp, #36	; 0x24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067c:	240c      	movs	r4, #12
 800067e:	193b      	adds	r3, r7, r4
 8000680:	0018      	movs	r0, r3
 8000682:	2314      	movs	r3, #20
 8000684:	001a      	movs	r2, r3
 8000686:	2100      	movs	r1, #0
 8000688:	f007 fe42 	bl	8008310 <memset>
  if(huart->Instance==USART2)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <HAL_UART_MspInit+0x80>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d129      	bne.n	80006ea <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <HAL_UART_MspInit+0x84>)
 8000698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <HAL_UART_MspInit+0x84>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <HAL_UART_MspInit+0x84>)
 80006a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <HAL_UART_MspInit+0x84>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_UART_MspInit+0x84>)
 80006b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006b4:	2201      	movs	r2, #1
 80006b6:	4013      	ands	r3, r2
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006bc:	0021      	movs	r1, r4
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	220c      	movs	r2, #12
 80006c2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2202      	movs	r2, #2
 80006c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2203      	movs	r2, #3
 80006d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2204      	movs	r2, #4
 80006da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006dc:	187a      	adds	r2, r7, r1
 80006de:	23a0      	movs	r3, #160	; 0xa0
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 f9ab 	bl	8000a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b009      	add	sp, #36	; 0x24
 80006f0:	bd90      	pop	{r4, r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	40004400 	.word	0x40004400
 80006f8:	40021000 	.word	0x40021000

080006fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000700:	e7fe      	b.n	8000700 <NMI_Handler+0x4>

08000702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000706:	e7fe      	b.n	8000706 <HardFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800070c:	46c0      	nop			; (mov r8, r8)
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000720:	f000 f894 	bl	800084c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000730:	4b03      	ldr	r3, [pc, #12]	; (8000740 <USB_IRQHandler+0x14>)
 8000732:	0018      	movs	r0, r3
 8000734:	f000 fc38 	bl	8000fa8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			; (mov r8, r8)
 8000740:	200006f0 	.word	0x200006f0

08000744 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000750:	480d      	ldr	r0, [pc, #52]	; (8000788 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000752:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0b      	ldr	r4, [pc, #44]	; (800079c <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077a:	f7ff ffe3 	bl	8000744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800077e:	f007 fda3 	bl	80082c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000782:	f7ff fe8b 	bl	800049c <main>

08000786 <LoopForever>:

LoopForever:
    b LoopForever
 8000786:	e7fe      	b.n	8000786 <LoopForever>
   ldr   r0, =_estack
 8000788:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800078c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000790:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000794:	0800845c 	.word	0x0800845c
  ldr r2, =_sbss
 8000798:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 800079c:	200009e4 	.word	0x200009e4

080007a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80007a0:	e7fe      	b.n	80007a0 <ADC1_COMP_IRQHandler>
	...

080007a4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007aa:	1dfb      	adds	r3, r7, #7
 80007ac:	2200      	movs	r2, #0
 80007ae:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80007b0:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <HAL_Init+0x3c>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <HAL_Init+0x3c>)
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	430a      	orrs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007bc:	2003      	movs	r0, #3
 80007be:	f000 f811 	bl	80007e4 <HAL_InitTick>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d003      	beq.n	80007ce <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	2201      	movs	r2, #1
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e001      	b.n	80007d2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007ce:	f7ff ff3d 	bl	800064c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007d2:	1dfb      	adds	r3, r7, #7
 80007d4:	781b      	ldrb	r3, [r3, #0]
}
 80007d6:	0018      	movs	r0, r3
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40022000 	.word	0x40022000

080007e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_InitTick+0x5c>)
 80007ee:	681c      	ldr	r4, [r3, #0]
 80007f0:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_InitTick+0x60>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	0019      	movs	r1, r3
 80007f6:	23fa      	movs	r3, #250	; 0xfa
 80007f8:	0098      	lsls	r0, r3, #2
 80007fa:	f7ff fc85 	bl	8000108 <__udivsi3>
 80007fe:	0003      	movs	r3, r0
 8000800:	0019      	movs	r1, r3
 8000802:	0020      	movs	r0, r4
 8000804:	f7ff fc80 	bl	8000108 <__udivsi3>
 8000808:	0003      	movs	r3, r0
 800080a:	0018      	movs	r0, r3
 800080c:	f000 f90b 	bl	8000a26 <HAL_SYSTICK_Config>
 8000810:	1e03      	subs	r3, r0, #0
 8000812:	d001      	beq.n	8000818 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000814:	2301      	movs	r3, #1
 8000816:	e00f      	b.n	8000838 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b03      	cmp	r3, #3
 800081c:	d80b      	bhi.n	8000836 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800081e:	6879      	ldr	r1, [r7, #4]
 8000820:	2301      	movs	r3, #1
 8000822:	425b      	negs	r3, r3
 8000824:	2200      	movs	r2, #0
 8000826:	0018      	movs	r0, r3
 8000828:	f000 f8d8 	bl	80009dc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_InitTick+0x64>)
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	e000      	b.n	8000838 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000836:	2301      	movs	r3, #1
}
 8000838:	0018      	movs	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	b003      	add	sp, #12
 800083e:	bd90      	pop	{r4, r7, pc}
 8000840:	20000000 	.word	0x20000000
 8000844:	20000008 	.word	0x20000008
 8000848:	20000004 	.word	0x20000004

0800084c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <HAL_IncTick+0x1c>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	001a      	movs	r2, r3
 8000856:	4b05      	ldr	r3, [pc, #20]	; (800086c <HAL_IncTick+0x20>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	18d2      	adds	r2, r2, r3
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <HAL_IncTick+0x20>)
 800085e:	601a      	str	r2, [r3, #0]
}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000008 	.word	0x20000008
 800086c:	20000228 	.word	0x20000228

08000870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  return uwTick;
 8000874:	4b02      	ldr	r3, [pc, #8]	; (8000880 <HAL_GetTick+0x10>)
 8000876:	681b      	ldr	r3, [r3, #0]
}
 8000878:	0018      	movs	r0, r3
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	20000228 	.word	0x20000228

08000884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	0002      	movs	r2, r0
 800088c:	1dfb      	adds	r3, r7, #7
 800088e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b7f      	cmp	r3, #127	; 0x7f
 8000896:	d809      	bhi.n	80008ac <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	001a      	movs	r2, r3
 800089e:	231f      	movs	r3, #31
 80008a0:	401a      	ands	r2, r3
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <__NVIC_EnableIRQ+0x30>)
 80008a4:	2101      	movs	r1, #1
 80008a6:	4091      	lsls	r1, r2
 80008a8:	000a      	movs	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
  }
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	e000e100 	.word	0xe000e100

080008b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	0002      	movs	r2, r0
 80008c0:	6039      	str	r1, [r7, #0]
 80008c2:	1dfb      	adds	r3, r7, #7
 80008c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b7f      	cmp	r3, #127	; 0x7f
 80008cc:	d828      	bhi.n	8000920 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <__NVIC_SetPriority+0xd4>)
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	089b      	lsrs	r3, r3, #2
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	589b      	ldr	r3, [r3, r2]
 80008de:	1dfa      	adds	r2, r7, #7
 80008e0:	7812      	ldrb	r2, [r2, #0]
 80008e2:	0011      	movs	r1, r2
 80008e4:	2203      	movs	r2, #3
 80008e6:	400a      	ands	r2, r1
 80008e8:	00d2      	lsls	r2, r2, #3
 80008ea:	21ff      	movs	r1, #255	; 0xff
 80008ec:	4091      	lsls	r1, r2
 80008ee:	000a      	movs	r2, r1
 80008f0:	43d2      	mvns	r2, r2
 80008f2:	401a      	ands	r2, r3
 80008f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	019b      	lsls	r3, r3, #6
 80008fa:	22ff      	movs	r2, #255	; 0xff
 80008fc:	401a      	ands	r2, r3
 80008fe:	1dfb      	adds	r3, r7, #7
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	0018      	movs	r0, r3
 8000904:	2303      	movs	r3, #3
 8000906:	4003      	ands	r3, r0
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800090c:	481f      	ldr	r0, [pc, #124]	; (800098c <__NVIC_SetPriority+0xd4>)
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	b25b      	sxtb	r3, r3
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	430a      	orrs	r2, r1
 8000918:	33c0      	adds	r3, #192	; 0xc0
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800091e:	e031      	b.n	8000984 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <__NVIC_SetPriority+0xd8>)
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	0019      	movs	r1, r3
 8000928:	230f      	movs	r3, #15
 800092a:	400b      	ands	r3, r1
 800092c:	3b08      	subs	r3, #8
 800092e:	089b      	lsrs	r3, r3, #2
 8000930:	3306      	adds	r3, #6
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	18d3      	adds	r3, r2, r3
 8000936:	3304      	adds	r3, #4
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	1dfa      	adds	r2, r7, #7
 800093c:	7812      	ldrb	r2, [r2, #0]
 800093e:	0011      	movs	r1, r2
 8000940:	2203      	movs	r2, #3
 8000942:	400a      	ands	r2, r1
 8000944:	00d2      	lsls	r2, r2, #3
 8000946:	21ff      	movs	r1, #255	; 0xff
 8000948:	4091      	lsls	r1, r2
 800094a:	000a      	movs	r2, r1
 800094c:	43d2      	mvns	r2, r2
 800094e:	401a      	ands	r2, r3
 8000950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	401a      	ands	r2, r3
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	0018      	movs	r0, r3
 8000960:	2303      	movs	r3, #3
 8000962:	4003      	ands	r3, r0
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000968:	4809      	ldr	r0, [pc, #36]	; (8000990 <__NVIC_SetPriority+0xd8>)
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	001c      	movs	r4, r3
 8000970:	230f      	movs	r3, #15
 8000972:	4023      	ands	r3, r4
 8000974:	3b08      	subs	r3, #8
 8000976:	089b      	lsrs	r3, r3, #2
 8000978:	430a      	orrs	r2, r1
 800097a:	3306      	adds	r3, #6
 800097c:	009b      	lsls	r3, r3, #2
 800097e:	18c3      	adds	r3, r0, r3
 8000980:	3304      	adds	r3, #4
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	b003      	add	sp, #12
 800098a:	bd90      	pop	{r4, r7, pc}
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	1e5a      	subs	r2, r3, #1
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	045b      	lsls	r3, r3, #17
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d301      	bcc.n	80009ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a8:	2301      	movs	r3, #1
 80009aa:	e010      	b.n	80009ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ac:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <SysTick_Config+0x44>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	3a01      	subs	r2, #1
 80009b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b4:	2301      	movs	r3, #1
 80009b6:	425b      	negs	r3, r3
 80009b8:	2103      	movs	r1, #3
 80009ba:	0018      	movs	r0, r3
 80009bc:	f7ff ff7c 	bl	80008b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <SysTick_Config+0x44>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <SysTick_Config+0x44>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	0018      	movs	r0, r3
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b002      	add	sp, #8
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	210f      	movs	r1, #15
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	1c02      	adds	r2, r0, #0
 80009ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b25b      	sxtb	r3, r3
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ff5d 	bl	80008b8 <__NVIC_SetPriority>
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b004      	add	sp, #16
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	1dfb      	adds	r3, r7, #7
 8000a10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f7ff ff33 	bl	8000884 <__NVIC_EnableIRQ>
}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b082      	sub	sp, #8
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff ffaf 	bl	8000994 <SysTick_Config>
 8000a36:	0003      	movs	r3, r0
}
 8000a38:	0018      	movs	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	b002      	add	sp, #8
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a56:	e155      	b.n	8000d04 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	4091      	lsls	r1, r2
 8000a62:	000a      	movs	r2, r1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d100      	bne.n	8000a70 <HAL_GPIO_Init+0x30>
 8000a6e:	e146      	b.n	8000cfe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2203      	movs	r2, #3
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d005      	beq.n	8000a88 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	2203      	movs	r2, #3
 8000a82:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d130      	bne.n	8000aea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	005b      	lsls	r3, r3, #1
 8000a92:	2203      	movs	r2, #3
 8000a94:	409a      	lsls	r2, r3
 8000a96:	0013      	movs	r3, r2
 8000a98:	43da      	mvns	r2, r3
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	68da      	ldr	r2, [r3, #12]
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	0013      	movs	r3, r2
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000abe:	2201      	movs	r2, #1
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	409a      	lsls	r2, r3
 8000ac4:	0013      	movs	r3, r2
 8000ac6:	43da      	mvns	r2, r3
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	4013      	ands	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	091b      	lsrs	r3, r3, #4
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	401a      	ands	r2, r3
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4313      	orrs	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	2203      	movs	r2, #3
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d017      	beq.n	8000b26 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	2203      	movs	r2, #3
 8000b02:	409a      	lsls	r2, r3
 8000b04:	0013      	movs	r3, r2
 8000b06:	43da      	mvns	r2, r3
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	409a      	lsls	r2, r3
 8000b18:	0013      	movs	r3, r2
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	693a      	ldr	r2, [r7, #16]
 8000b24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d123      	bne.n	8000b7a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	08da      	lsrs	r2, r3, #3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	3208      	adds	r2, #8
 8000b3a:	0092      	lsls	r2, r2, #2
 8000b3c:	58d3      	ldr	r3, [r2, r3]
 8000b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	2207      	movs	r2, #7
 8000b44:	4013      	ands	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	409a      	lsls	r2, r3
 8000b4c:	0013      	movs	r3, r2
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	691a      	ldr	r2, [r3, #16]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	400b      	ands	r3, r1
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	693a      	ldr	r2, [r7, #16]
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	08da      	lsrs	r2, r3, #3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3208      	adds	r2, #8
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	6939      	ldr	r1, [r7, #16]
 8000b78:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	2203      	movs	r2, #3
 8000b86:	409a      	lsls	r2, r3
 8000b88:	0013      	movs	r3, r2
 8000b8a:	43da      	mvns	r2, r3
 8000b8c:	693b      	ldr	r3, [r7, #16]
 8000b8e:	4013      	ands	r3, r2
 8000b90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2203      	movs	r2, #3
 8000b98:	401a      	ands	r2, r3
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685a      	ldr	r2, [r3, #4]
 8000bb2:	23c0      	movs	r3, #192	; 0xc0
 8000bb4:	029b      	lsls	r3, r3, #10
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	d100      	bne.n	8000bbc <HAL_GPIO_Init+0x17c>
 8000bba:	e0a0      	b.n	8000cfe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbc:	4b57      	ldr	r3, [pc, #348]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc0:	4b56      	ldr	r3, [pc, #344]	; (8000d1c <HAL_GPIO_Init+0x2dc>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc8:	4a55      	ldr	r2, [pc, #340]	; (8000d20 <HAL_GPIO_Init+0x2e0>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	3302      	adds	r3, #2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	589b      	ldr	r3, [r3, r2]
 8000bd4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2203      	movs	r2, #3
 8000bda:	4013      	ands	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	220f      	movs	r2, #15
 8000be0:	409a      	lsls	r2, r3
 8000be2:	0013      	movs	r3, r2
 8000be4:	43da      	mvns	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	23a0      	movs	r3, #160	; 0xa0
 8000bf0:	05db      	lsls	r3, r3, #23
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d01f      	beq.n	8000c36 <HAL_GPIO_Init+0x1f6>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4a      	ldr	r2, [pc, #296]	; (8000d24 <HAL_GPIO_Init+0x2e4>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d019      	beq.n	8000c32 <HAL_GPIO_Init+0x1f2>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a49      	ldr	r2, [pc, #292]	; (8000d28 <HAL_GPIO_Init+0x2e8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d013      	beq.n	8000c2e <HAL_GPIO_Init+0x1ee>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a48      	ldr	r2, [pc, #288]	; (8000d2c <HAL_GPIO_Init+0x2ec>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d00d      	beq.n	8000c2a <HAL_GPIO_Init+0x1ea>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a47      	ldr	r2, [pc, #284]	; (8000d30 <HAL_GPIO_Init+0x2f0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d007      	beq.n	8000c26 <HAL_GPIO_Init+0x1e6>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a46      	ldr	r2, [pc, #280]	; (8000d34 <HAL_GPIO_Init+0x2f4>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d101      	bne.n	8000c22 <HAL_GPIO_Init+0x1e2>
 8000c1e:	2305      	movs	r3, #5
 8000c20:	e00a      	b.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c22:	2306      	movs	r3, #6
 8000c24:	e008      	b.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c26:	2304      	movs	r3, #4
 8000c28:	e006      	b.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e004      	b.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	e002      	b.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c32:	2301      	movs	r3, #1
 8000c34:	e000      	b.n	8000c38 <HAL_GPIO_Init+0x1f8>
 8000c36:	2300      	movs	r3, #0
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	2103      	movs	r1, #3
 8000c3c:	400a      	ands	r2, r1
 8000c3e:	0092      	lsls	r2, r2, #2
 8000c40:	4093      	lsls	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c48:	4935      	ldr	r1, [pc, #212]	; (8000d20 <HAL_GPIO_Init+0x2e0>)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	089b      	lsrs	r3, r3, #2
 8000c4e:	3302      	adds	r3, #2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c7a:	4b2f      	ldr	r3, [pc, #188]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c80:	4b2d      	ldr	r3, [pc, #180]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685a      	ldr	r2, [r3, #4]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	d003      	beq.n	8000ca4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000caa:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	035b      	lsls	r3, r3, #13
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cd4:	4b18      	ldr	r3, [pc, #96]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	43da      	mvns	r2, r3
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	039b      	lsls	r3, r3, #14
 8000cec:	4013      	ands	r3, r2
 8000cee:	d003      	beq.n	8000cf8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf8:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <HAL_GPIO_Init+0x2f8>)
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	40da      	lsrs	r2, r3
 8000d0c:	1e13      	subs	r3, r2, #0
 8000d0e:	d000      	beq.n	8000d12 <HAL_GPIO_Init+0x2d2>
 8000d10:	e6a2      	b.n	8000a58 <HAL_GPIO_Init+0x18>
  }
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b006      	add	sp, #24
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010000 	.word	0x40010000
 8000d24:	50000400 	.word	0x50000400
 8000d28:	50000800 	.word	0x50000800
 8000d2c:	50000c00 	.word	0x50000c00
 8000d30:	50001000 	.word	0x50001000
 8000d34:	50001c00 	.word	0x50001c00
 8000d38:	40010400 	.word	0x40010400

08000d3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d3e:	b08b      	sub	sp, #44	; 0x2c
 8000d40:	af06      	add	r7, sp, #24
 8000d42:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d101      	bne.n	8000d4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0ff      	b.n	8000f4e <HAL_PCD_Init+0x212>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a81      	ldr	r2, [pc, #516]	; (8000f58 <HAL_PCD_Init+0x21c>)
 8000d52:	5c9b      	ldrb	r3, [r3, r2]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d108      	bne.n	8000d6c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	23aa      	movs	r3, #170	; 0xaa
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	2100      	movs	r1, #0
 8000d62:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	0018      	movs	r0, r3
 8000d68:	f006 ff82 	bl	8007c70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a7a      	ldr	r2, [pc, #488]	; (8000f58 <HAL_PCD_Init+0x21c>)
 8000d70:	2103      	movs	r1, #3
 8000d72:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f003 fa8d 	bl	8004298 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d7e:	230f      	movs	r3, #15
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	2200      	movs	r2, #0
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e058      	b.n	8000e3a <HAL_PCD_Init+0xfe>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000d88:	200f      	movs	r0, #15
 8000d8a:	183b      	adds	r3, r7, r0
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	0013      	movs	r3, r2
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	189b      	adds	r3, r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	18cb      	adds	r3, r1, r3
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	0013      	movs	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	189b      	adds	r3, r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	183a      	adds	r2, r7, r0
 8000db4:	7812      	ldrb	r2, [r2, #0]
 8000db6:	545a      	strb	r2, [r3, r1]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000db8:	0004      	movs	r4, r0
 8000dba:	183b      	adds	r3, r7, r0
 8000dbc:	781a      	ldrb	r2, [r3, #0]
 8000dbe:	193b      	adds	r3, r7, r4
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	189b      	adds	r3, r3, r2
 8000dcc:	00db      	lsls	r3, r3, #3
 8000dce:	18cb      	adds	r3, r1, r3
 8000dd0:	3336      	adds	r3, #54	; 0x36
 8000dd2:	1c02      	adds	r2, r0, #0
 8000dd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	1c5a      	adds	r2, r3, #1
 8000dde:	0013      	movs	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	189b      	adds	r3, r3, r2
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	18cb      	adds	r3, r1, r3
 8000de8:	3303      	adds	r3, #3
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	781a      	ldrb	r2, [r3, #0]
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	0013      	movs	r3, r2
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	189b      	adds	r3, r3, r2
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	18cb      	adds	r3, r1, r3
 8000dfe:	3338      	adds	r3, #56	; 0x38
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	781a      	ldrb	r2, [r3, #0]
 8000e08:	6879      	ldr	r1, [r7, #4]
 8000e0a:	0013      	movs	r3, r2
 8000e0c:	009b      	lsls	r3, r3, #2
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	18cb      	adds	r3, r1, r3
 8000e14:	333c      	adds	r3, #60	; 0x3c
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000e1a:	193b      	adds	r3, r7, r4
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	0013      	movs	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	189b      	adds	r3, r3, r2
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	18cb      	adds	r3, r1, r3
 8000e2a:	3340      	adds	r3, #64	; 0x40
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e30:	193b      	adds	r3, r7, r4
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	193b      	adds	r3, r7, r4
 8000e36:	3201      	adds	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d39f      	bcc.n	8000d88 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e056      	b.n	8000efe <HAL_PCD_Init+0x1c2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000e50:	240f      	movs	r4, #15
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	236a      	movs	r3, #106	; 0x6a
 8000e5a:	33ff      	adds	r3, #255	; 0xff
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	189b      	adds	r3, r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	18c3      	adds	r3, r0, r3
 8000e68:	185b      	adds	r3, r3, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	23b4      	movs	r3, #180	; 0xb4
 8000e76:	0059      	lsls	r1, r3, #1
 8000e78:	0013      	movs	r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	189b      	adds	r3, r3, r2
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	18c3      	adds	r3, r0, r3
 8000e82:	185b      	adds	r3, r3, r1
 8000e84:	193a      	adds	r2, r7, r4
 8000e86:	7812      	ldrb	r2, [r2, #0]
 8000e88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	781a      	ldrb	r2, [r3, #0]
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	236c      	movs	r3, #108	; 0x6c
 8000e92:	33ff      	adds	r3, #255	; 0xff
 8000e94:	0019      	movs	r1, r3
 8000e96:	0013      	movs	r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	189b      	adds	r3, r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	18c3      	adds	r3, r0, r3
 8000ea0:	185b      	adds	r3, r3, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	23bc      	movs	r3, #188	; 0xbc
 8000eae:	0059      	lsls	r1, r3, #1
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	189b      	adds	r3, r3, r2
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	18c3      	adds	r3, r0, r3
 8000eba:	185b      	adds	r3, r3, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	23be      	movs	r3, #190	; 0xbe
 8000ec8:	0059      	lsls	r1, r3, #1
 8000eca:	0013      	movs	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	189b      	adds	r3, r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	18c3      	adds	r3, r0, r3
 8000ed4:	185b      	adds	r3, r3, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	23c0      	movs	r3, #192	; 0xc0
 8000ee2:	0059      	lsls	r1, r3, #1
 8000ee4:	0013      	movs	r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	189b      	adds	r3, r3, r2
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	18c3      	adds	r3, r0, r3
 8000eee:	185b      	adds	r3, r3, r1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	781a      	ldrb	r2, [r3, #0]
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	3201      	adds	r2, #1
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	230f      	movs	r3, #15
 8000f00:	18fb      	adds	r3, r7, r3
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d3a1      	bcc.n	8000e50 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	466a      	mov	r2, sp
 8000f14:	0011      	movs	r1, r2
 8000f16:	001a      	movs	r2, r3
 8000f18:	3210      	adds	r2, #16
 8000f1a:	ca70      	ldmia	r2!, {r4, r5, r6}
 8000f1c:	c170      	stmia	r1!, {r4, r5, r6}
 8000f1e:	ca30      	ldmia	r2!, {r4, r5}
 8000f20:	c130      	stmia	r1!, {r4, r5}
 8000f22:	6859      	ldr	r1, [r3, #4]
 8000f24:	689a      	ldr	r2, [r3, #8]
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	f003 f9d0 	bl	80042cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	2100      	movs	r1, #0
 8000f32:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_PCD_Init+0x21c>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d103      	bne.n	8000f4c <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	0018      	movs	r0, r3
 8000f48:	f001 fd1c 	bl	8002984 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	0018      	movs	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b005      	add	sp, #20
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	000002a9 	.word	0x000002a9

08000f5c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	23aa      	movs	r3, #170	; 0xaa
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	5cd3      	ldrb	r3, [r2, r3]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d101      	bne.n	8000f74 <HAL_PCD_Start+0x18>
 8000f70:	2302      	movs	r3, #2
 8000f72:	e014      	b.n	8000f9e <HAL_PCD_Start+0x42>
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	23aa      	movs	r3, #170	; 0xaa
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	0018      	movs	r0, r3
 8000f84:	f003 f972 	bl	800426c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f005 f8cd 	bl	800612c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	23aa      	movs	r3, #170	; 0xaa
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	2100      	movs	r1, #0
 8000f9a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f005 f8cf 	bl	8006158 <USB_ReadInterrupts>
 8000fba:	0002      	movs	r2, r0
 8000fbc:	2380      	movs	r3, #128	; 0x80
 8000fbe:	021b      	lsls	r3, r3, #8
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d103      	bne.n	8000fd2 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f000 fba3 	bl	8001718 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f005 f8be 	bl	8006158 <USB_ReadInterrupts>
 8000fdc:	0002      	movs	r2, r0
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	2380      	movs	r3, #128	; 0x80
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d114      	bne.n	8001016 <HAL_PCD_IRQHandler+0x6e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2244      	movs	r2, #68	; 0x44
 8000ff2:	5a9b      	ldrh	r3, [r3, r2]
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	49a2      	ldr	r1, [pc, #648]	; (8001284 <HAL_PCD_IRQHandler+0x2dc>)
 8000ffc:	400a      	ands	r2, r1
 8000ffe:	b291      	uxth	r1, r2
 8001000:	2244      	movs	r2, #68	; 0x44
 8001002:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	0018      	movs	r0, r3
 8001008:	f006 feb5 	bl	8007d76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2100      	movs	r1, #0
 8001010:	0018      	movs	r0, r3
 8001012:	f000 f945 	bl	80012a0 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	f005 f89c 	bl	8006158 <USB_ReadInterrupts>
 8001020:	0002      	movs	r2, r0
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	01db      	lsls	r3, r3, #7
 8001026:	401a      	ands	r2, r3
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	01db      	lsls	r3, r3, #7
 800102c:	429a      	cmp	r2, r3
 800102e:	d10b      	bne.n	8001048 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2244      	movs	r2, #68	; 0x44
 8001036:	5a9b      	ldrh	r3, [r3, r2]
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4992      	ldr	r1, [pc, #584]	; (8001288 <HAL_PCD_IRQHandler+0x2e0>)
 8001040:	400a      	ands	r2, r1
 8001042:	b291      	uxth	r1, r2
 8001044:	2244      	movs	r2, #68	; 0x44
 8001046:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0018      	movs	r0, r3
 800104e:	f005 f883 	bl	8006158 <USB_ReadInterrupts>
 8001052:	0002      	movs	r2, r0
 8001054:	2380      	movs	r3, #128	; 0x80
 8001056:	019b      	lsls	r3, r3, #6
 8001058:	401a      	ands	r2, r3
 800105a:	2380      	movs	r3, #128	; 0x80
 800105c:	019b      	lsls	r3, r3, #6
 800105e:	429a      	cmp	r2, r3
 8001060:	d10b      	bne.n	800107a <HAL_PCD_IRQHandler+0xd2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2244      	movs	r2, #68	; 0x44
 8001068:	5a9b      	ldrh	r3, [r3, r2]
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4986      	ldr	r1, [pc, #536]	; (800128c <HAL_PCD_IRQHandler+0x2e4>)
 8001072:	400a      	ands	r2, r1
 8001074:	b291      	uxth	r1, r2
 8001076:	2244      	movs	r2, #68	; 0x44
 8001078:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	f005 f86a 	bl	8006158 <USB_ReadInterrupts>
 8001084:	0002      	movs	r2, r0
 8001086:	2380      	movs	r3, #128	; 0x80
 8001088:	015b      	lsls	r3, r3, #5
 800108a:	401a      	ands	r2, r3
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	015b      	lsls	r3, r3, #5
 8001090:	429a      	cmp	r2, r3
 8001092:	d137      	bne.n	8001104 <HAL_PCD_IRQHandler+0x15c>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	5a9b      	ldrh	r3, [r3, r2]
 800109c:	b29a      	uxth	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2104      	movs	r1, #4
 80010a4:	438a      	bics	r2, r1
 80010a6:	b291      	uxth	r1, r2
 80010a8:	2240      	movs	r2, #64	; 0x40
 80010aa:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	5a9b      	ldrh	r3, [r3, r2]
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2108      	movs	r1, #8
 80010bc:	438a      	bics	r2, r1
 80010be:	b291      	uxth	r1, r2
 80010c0:	2240      	movs	r2, #64	; 0x40
 80010c2:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	23b8      	movs	r3, #184	; 0xb8
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	5cd3      	ldrb	r3, [r2, r3]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d109      	bne.n	80010e4 <HAL_PCD_IRQHandler+0x13c>
    {
      hpcd->LPM_State = LPM_L0;
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	23b8      	movs	r3, #184	; 0xb8
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	2100      	movs	r1, #0
 80010d8:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2100      	movs	r1, #0
 80010de:	0018      	movs	r0, r3
 80010e0:	f001 fc7a 	bl	80029d8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f006 fe86 	bl	8007df8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2244      	movs	r2, #68	; 0x44
 80010f2:	5a9b      	ldrh	r3, [r3, r2]
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4965      	ldr	r1, [pc, #404]	; (8001290 <HAL_PCD_IRQHandler+0x2e8>)
 80010fc:	400a      	ands	r2, r1
 80010fe:	b291      	uxth	r1, r2
 8001100:	2244      	movs	r2, #68	; 0x44
 8001102:	5299      	strh	r1, [r3, r2]
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	0018      	movs	r0, r3
 800110a:	f005 f825 	bl	8006158 <USB_ReadInterrupts>
 800110e:	0002      	movs	r2, r0
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	401a      	ands	r2, r3
 8001116:	2380      	movs	r3, #128	; 0x80
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	429a      	cmp	r2, r3
 800111c:	d127      	bne.n	800116e <HAL_PCD_IRQHandler+0x1c6>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2240      	movs	r2, #64	; 0x40
 8001124:	5a9b      	ldrh	r3, [r3, r2]
 8001126:	b29a      	uxth	r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2108      	movs	r1, #8
 800112e:	430a      	orrs	r2, r1
 8001130:	b291      	uxth	r1, r2
 8001132:	2240      	movs	r2, #64	; 0x40
 8001134:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2244      	movs	r2, #68	; 0x44
 800113c:	5a9b      	ldrh	r3, [r3, r2]
 800113e:	b29a      	uxth	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4953      	ldr	r1, [pc, #332]	; (8001294 <HAL_PCD_IRQHandler+0x2ec>)
 8001146:	400a      	ands	r2, r1
 8001148:	b291      	uxth	r1, r2
 800114a:	2244      	movs	r2, #68	; 0x44
 800114c:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	5a9b      	ldrh	r3, [r3, r2]
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2104      	movs	r1, #4
 800115e:	430a      	orrs	r2, r1
 8001160:	b291      	uxth	r1, r2
 8001162:	2240      	movs	r2, #64	; 0x40
 8001164:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	0018      	movs	r0, r3
 800116a:	f006 fe29 	bl	8007dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	f004 fff0 	bl	8006158 <USB_ReadInterrupts>
 8001178:	0003      	movs	r3, r0
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	4013      	ands	r3, r2
 800117e:	2b80      	cmp	r3, #128	; 0x80
 8001180:	d145      	bne.n	800120e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2244      	movs	r2, #68	; 0x44
 8001188:	5a9b      	ldrh	r3, [r3, r2]
 800118a:	b29a      	uxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	438a      	bics	r2, r1
 8001194:	b291      	uxth	r1, r2
 8001196:	2244      	movs	r2, #68	; 0x44
 8001198:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	23b8      	movs	r3, #184	; 0xb8
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	5cd3      	ldrb	r3, [r2, r3]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d12f      	bne.n	8001206 <HAL_PCD_IRQHandler+0x25e>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	5a9b      	ldrh	r3, [r3, r2]
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2104      	movs	r1, #4
 80011b6:	430a      	orrs	r2, r1
 80011b8:	b291      	uxth	r1, r2
 80011ba:	2240      	movs	r2, #64	; 0x40
 80011bc:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	5a9b      	ldrh	r3, [r3, r2]
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2108      	movs	r1, #8
 80011ce:	430a      	orrs	r2, r1
 80011d0:	b291      	uxth	r1, r2
 80011d2:	2240      	movs	r2, #64	; 0x40
 80011d4:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	23b8      	movs	r3, #184	; 0xb8
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	2101      	movs	r1, #1
 80011de:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2254      	movs	r2, #84	; 0x54
 80011e6:	5a9b      	ldrh	r3, [r3, r2]
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	223c      	movs	r2, #60	; 0x3c
 80011ee:	4013      	ands	r3, r2
 80011f0:	0019      	movs	r1, r3
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	23b9      	movs	r3, #185	; 0xb9
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2101      	movs	r1, #1
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 fbea 	bl	80029d8 <HAL_PCDEx_LPM_Callback>
 8001204:	e003      	b.n	800120e <HAL_PCD_IRQHandler+0x266>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f006 fdd9 	bl	8007dc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	0018      	movs	r0, r3
 8001214:	f004 ffa0 	bl	8006158 <USB_ReadInterrupts>
 8001218:	0002      	movs	r2, r0
 800121a:	2380      	movs	r3, #128	; 0x80
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	401a      	ands	r2, r3
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	429a      	cmp	r2, r3
 8001226:	d10f      	bne.n	8001248 <HAL_PCD_IRQHandler+0x2a0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2244      	movs	r2, #68	; 0x44
 800122e:	5a9b      	ldrh	r3, [r3, r2]
 8001230:	b29a      	uxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4918      	ldr	r1, [pc, #96]	; (8001298 <HAL_PCD_IRQHandler+0x2f0>)
 8001238:	400a      	ands	r2, r1
 800123a:	b291      	uxth	r1, r2
 800123c:	2244      	movs	r2, #68	; 0x44
 800123e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	0018      	movs	r0, r3
 8001244:	f006 fd88 	bl	8007d58 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	0018      	movs	r0, r3
 800124e:	f004 ff83 	bl	8006158 <USB_ReadInterrupts>
 8001252:	0002      	movs	r2, r0
 8001254:	2380      	movs	r3, #128	; 0x80
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	401a      	ands	r2, r3
 800125a:	2380      	movs	r3, #128	; 0x80
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	429a      	cmp	r2, r3
 8001260:	d10b      	bne.n	800127a <HAL_PCD_IRQHandler+0x2d2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2244      	movs	r2, #68	; 0x44
 8001268:	5a9b      	ldrh	r3, [r3, r2]
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	490a      	ldr	r1, [pc, #40]	; (800129c <HAL_PCD_IRQHandler+0x2f4>)
 8001272:	400a      	ands	r2, r1
 8001274:	b291      	uxth	r1, r2
 8001276:	2244      	movs	r2, #68	; 0x44
 8001278:	5299      	strh	r1, [r3, r2]
  }
}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b002      	add	sp, #8
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	fffffbff 	.word	0xfffffbff
 8001288:	ffffbfff 	.word	0xffffbfff
 800128c:	ffffdfff 	.word	0xffffdfff
 8001290:	ffffefff 	.word	0xffffefff
 8001294:	fffff7ff 	.word	0xfffff7ff
 8001298:	fffffdff 	.word	0xfffffdff
 800129c:	fffffeff 	.word	0xfffffeff

080012a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	000a      	movs	r2, r1
 80012aa:	1cfb      	adds	r3, r7, #3
 80012ac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	23aa      	movs	r3, #170	; 0xaa
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	5cd3      	ldrb	r3, [r2, r3]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d101      	bne.n	80012be <HAL_PCD_SetAddress+0x1e>
 80012ba:	2302      	movs	r3, #2
 80012bc:	e017      	b.n	80012ee <HAL_PCD_SetAddress+0x4e>
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	23aa      	movs	r3, #170	; 0xaa
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	2101      	movs	r1, #1
 80012c6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	1cfa      	adds	r2, r7, #3
 80012cc:	2124      	movs	r1, #36	; 0x24
 80012ce:	7812      	ldrb	r2, [r2, #0]
 80012d0:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	1cfb      	adds	r3, r7, #3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	0019      	movs	r1, r3
 80012dc:	0010      	movs	r0, r2
 80012de:	f004 ff11 	bl	8006104 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	23aa      	movs	r3, #170	; 0xaa
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	2100      	movs	r1, #0
 80012ea:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	0018      	movs	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80012f6:	b590      	push	{r4, r7, lr}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	000c      	movs	r4, r1
 8001300:	0010      	movs	r0, r2
 8001302:	0019      	movs	r1, r3
 8001304:	1cfb      	adds	r3, r7, #3
 8001306:	1c22      	adds	r2, r4, #0
 8001308:	701a      	strb	r2, [r3, #0]
 800130a:	003b      	movs	r3, r7
 800130c:	1c02      	adds	r2, r0, #0
 800130e:	801a      	strh	r2, [r3, #0]
 8001310:	1cbb      	adds	r3, r7, #2
 8001312:	1c0a      	adds	r2, r1, #0
 8001314:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001316:	230b      	movs	r3, #11
 8001318:	18fb      	adds	r3, r7, r3
 800131a:	2200      	movs	r2, #0
 800131c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800131e:	1cfb      	adds	r3, r7, #3
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	da0f      	bge.n	8001348 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001328:	1cfb      	adds	r3, r7, #3
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2207      	movs	r2, #7
 800132e:	4013      	ands	r3, r2
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	0013      	movs	r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	189b      	adds	r3, r3, r2
 8001338:	00db      	lsls	r3, r3, #3
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	18d3      	adds	r3, r2, r3
 800133e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2201      	movs	r2, #1
 8001344:	705a      	strb	r2, [r3, #1]
 8001346:	e00f      	b.n	8001368 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001348:	1cfb      	adds	r3, r7, #3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2207      	movs	r2, #7
 800134e:	401a      	ands	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	189b      	adds	r3, r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	3369      	adds	r3, #105	; 0x69
 800135a:	33ff      	adds	r3, #255	; 0xff
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	18d3      	adds	r3, r2, r3
 8001360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001368:	1cfb      	adds	r3, r7, #3
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2207      	movs	r2, #7
 800136e:	4013      	ands	r3, r2
 8001370:	b2da      	uxtb	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001376:	003b      	movs	r3, r7
 8001378:	881a      	ldrh	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	1cba      	adds	r2, r7, #2
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_PCD_EP_Open+0xa2>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	b29a      	uxth	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001398:	1cbb      	adds	r3, r7, #2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d102      	bne.n	80013a6 <HAL_PCD_EP_Open+0xb0>
  {
    ep->data_pid_start = 0U;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2200      	movs	r2, #0
 80013a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	23aa      	movs	r3, #170	; 0xaa
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_PCD_EP_Open+0xc0>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e013      	b.n	80013de <HAL_PCD_EP_Open+0xe8>
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	23aa      	movs	r3, #170	; 0xaa
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	2101      	movs	r1, #1
 80013be:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f002 ffab 	bl	8004324 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	23aa      	movs	r3, #170	; 0xaa
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	2100      	movs	r1, #0
 80013d6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80013d8:	230b      	movs	r3, #11
 80013da:	18fb      	adds	r3, r7, r3
 80013dc:	781b      	ldrb	r3, [r3, #0]
}
 80013de:	0018      	movs	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b005      	add	sp, #20
 80013e4:	bd90      	pop	{r4, r7, pc}

080013e6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b084      	sub	sp, #16
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	000a      	movs	r2, r1
 80013f0:	1cfb      	adds	r3, r7, #3
 80013f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80013f4:	1cfb      	adds	r3, r7, #3
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b25b      	sxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	da0f      	bge.n	800141e <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013fe:	1cfb      	adds	r3, r7, #3
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2207      	movs	r2, #7
 8001404:	4013      	ands	r3, r2
 8001406:	1c5a      	adds	r2, r3, #1
 8001408:	0013      	movs	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	189b      	adds	r3, r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	18d3      	adds	r3, r2, r3
 8001414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2201      	movs	r2, #1
 800141a:	705a      	strb	r2, [r3, #1]
 800141c:	e00f      	b.n	800143e <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800141e:	1cfb      	adds	r3, r7, #3
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2207      	movs	r2, #7
 8001424:	401a      	ands	r2, r3
 8001426:	0013      	movs	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	189b      	adds	r3, r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	3369      	adds	r3, #105	; 0x69
 8001430:	33ff      	adds	r3, #255	; 0xff
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	18d3      	adds	r3, r2, r3
 8001436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	2200      	movs	r2, #0
 800143c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800143e:	1cfb      	adds	r3, r7, #3
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2207      	movs	r2, #7
 8001444:	4013      	ands	r3, r2
 8001446:	b2da      	uxtb	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	23aa      	movs	r3, #170	; 0xaa
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_PCD_EP_Close+0x76>
 8001458:	2302      	movs	r3, #2
 800145a:	e011      	b.n	8001480 <HAL_PCD_EP_Close+0x9a>
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	23aa      	movs	r3, #170	; 0xaa
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	2101      	movs	r1, #1
 8001464:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f003 facc 	bl	8004a0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	23aa      	movs	r3, #170	; 0xaa
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	2100      	movs	r1, #0
 800147c:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	0018      	movs	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	b004      	add	sp, #16
 8001486:	bd80      	pop	{r7, pc}

08001488 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	60f8      	str	r0, [r7, #12]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	200b      	movs	r0, #11
 8001496:	183b      	adds	r3, r7, r0
 8001498:	1c0a      	adds	r2, r1, #0
 800149a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800149c:	0001      	movs	r1, r0
 800149e:	187b      	adds	r3, r7, r1
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2207      	movs	r2, #7
 80014a4:	401a      	ands	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	189b      	adds	r3, r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	3369      	adds	r3, #105	; 0x69
 80014b0:	33ff      	adds	r3, #255	; 0xff
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	18d3      	adds	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	2200      	movs	r2, #0
 80014ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2207      	movs	r2, #7
 80014d6:	4013      	ands	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2207      	movs	r2, #7
 80014e4:	4013      	ands	r3, r2
 80014e6:	d107      	bne.n	80014f8 <HAL_PCD_EP_Receive+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f003 fc4b 	bl	8004d8c <USB_EPStartXfer>
 80014f6:	e006      	b.n	8001506 <HAL_PCD_EP_Receive+0x7e>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	697a      	ldr	r2, [r7, #20]
 80014fe:	0011      	movs	r1, r2
 8001500:	0018      	movs	r0, r3
 8001502:	f003 fc43 	bl	8004d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	0018      	movs	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	b006      	add	sp, #24
 800150e:	bd80      	pop	{r7, pc}

08001510 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	200b      	movs	r0, #11
 800151e:	183b      	adds	r3, r7, r0
 8001520:	1c0a      	adds	r2, r1, #0
 8001522:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001524:	183b      	adds	r3, r7, r0
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2207      	movs	r2, #7
 800152a:	4013      	ands	r3, r2
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	0013      	movs	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	189b      	adds	r3, r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	2224      	movs	r2, #36	; 0x24
 800154c:	2101      	movs	r1, #1
 800154e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	683a      	ldr	r2, [r7, #0]
 8001554:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2201      	movs	r2, #1
 8001560:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001562:	183b      	adds	r3, r7, r0
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2207      	movs	r2, #7
 8001568:	4013      	ands	r3, r2
 800156a:	b2da      	uxtb	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001570:	183b      	adds	r3, r7, r0
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2207      	movs	r2, #7
 8001576:	4013      	ands	r3, r2
 8001578:	d107      	bne.n	800158a <HAL_PCD_EP_Transmit+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	0011      	movs	r1, r2
 8001582:	0018      	movs	r0, r3
 8001584:	f003 fc02 	bl	8004d8c <USB_EPStartXfer>
 8001588:	e006      	b.n	8001598 <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	0011      	movs	r1, r2
 8001592:	0018      	movs	r0, r3
 8001594:	f003 fbfa 	bl	8004d8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b006      	add	sp, #24
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
 80015aa:	000a      	movs	r2, r1
 80015ac:	1cfb      	adds	r3, r7, #3
 80015ae:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80015b0:	1cfb      	adds	r3, r7, #3
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2207      	movs	r2, #7
 80015b6:	401a      	ands	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d901      	bls.n	80015c4 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e046      	b.n	8001652 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80015c4:	1cfb      	adds	r3, r7, #3
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da0f      	bge.n	80015ee <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015ce:	1cfb      	adds	r3, r7, #3
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	1c5a      	adds	r2, r3, #1
 80015d8:	0013      	movs	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	189b      	adds	r3, r3, r2
 80015de:	00db      	lsls	r3, r3, #3
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	18d3      	adds	r3, r2, r3
 80015e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	2201      	movs	r2, #1
 80015ea:	705a      	strb	r2, [r3, #1]
 80015ec:	e00d      	b.n	800160a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80015ee:	1cfb      	adds	r3, r7, #3
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	0013      	movs	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	189b      	adds	r3, r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	3369      	adds	r3, #105	; 0x69
 80015fc:	33ff      	adds	r3, #255	; 0xff
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2201      	movs	r2, #1
 800160e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001610:	1cfb      	adds	r3, r7, #3
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2207      	movs	r2, #7
 8001616:	4013      	ands	r3, r2
 8001618:	b2da      	uxtb	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	23aa      	movs	r3, #170	; 0xaa
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	5cd3      	ldrb	r3, [r2, r3]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d101      	bne.n	800162e <HAL_PCD_EP_SetStall+0x8c>
 800162a:	2302      	movs	r3, #2
 800162c:	e011      	b.n	8001652 <HAL_PCD_EP_SetStall+0xb0>
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	23aa      	movs	r3, #170	; 0xaa
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	2101      	movs	r1, #1
 8001636:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	0011      	movs	r1, r2
 8001640:	0018      	movs	r0, r3
 8001642:	f004 fc5d 	bl	8005f00 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	23aa      	movs	r3, #170	; 0xaa
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	2100      	movs	r1, #0
 800164e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	0018      	movs	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	b004      	add	sp, #16
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b084      	sub	sp, #16
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	000a      	movs	r2, r1
 8001664:	1cfb      	adds	r3, r7, #3
 8001666:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001668:	1cfb      	adds	r3, r7, #3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	220f      	movs	r2, #15
 800166e:	401a      	ands	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	d901      	bls.n	800167c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e048      	b.n	800170e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800167c:	1cfb      	adds	r3, r7, #3
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	b25b      	sxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	da0f      	bge.n	80016a6 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001686:	1cfb      	adds	r3, r7, #3
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2207      	movs	r2, #7
 800168c:	4013      	ands	r3, r2
 800168e:	1c5a      	adds	r2, r3, #1
 8001690:	0013      	movs	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	189b      	adds	r3, r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	18d3      	adds	r3, r2, r3
 800169c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	705a      	strb	r2, [r3, #1]
 80016a4:	e00f      	b.n	80016c6 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a6:	1cfb      	adds	r3, r7, #3
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2207      	movs	r2, #7
 80016ac:	401a      	ands	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	189b      	adds	r3, r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	3369      	adds	r3, #105	; 0x69
 80016b8:	33ff      	adds	r3, #255	; 0xff
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	18d3      	adds	r3, r2, r3
 80016be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2200      	movs	r2, #0
 80016ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80016cc:	1cfb      	adds	r3, r7, #3
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2207      	movs	r2, #7
 80016d2:	4013      	ands	r3, r2
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	23aa      	movs	r3, #170	; 0xaa
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d101      	bne.n	80016ea <HAL_PCD_EP_ClrStall+0x90>
 80016e6:	2302      	movs	r3, #2
 80016e8:	e011      	b.n	800170e <HAL_PCD_EP_ClrStall+0xb4>
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	23aa      	movs	r3, #170	; 0xaa
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	2101      	movs	r1, #1
 80016f2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68fa      	ldr	r2, [r7, #12]
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f004 fc4f 	bl	8005fa0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	23aa      	movs	r3, #170	; 0xaa
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	2100      	movs	r1, #0
 800170a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b004      	add	sp, #16
 8001714:	bd80      	pop	{r7, pc}
	...

08001718 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001718:	b5b0      	push	{r4, r5, r7, lr}
 800171a:	b096      	sub	sp, #88	; 0x58
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001720:	f000 fbd8 	bl	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
  {
    wIstr = hpcd->Instance->ISTR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	2056      	movs	r0, #86	; 0x56
 800172a:	183b      	adds	r3, r7, r0
 800172c:	2144      	movs	r1, #68	; 0x44
 800172e:	5a52      	ldrh	r2, [r2, r1]
 8001730:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001732:	183b      	adds	r3, r7, r0
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	2455      	movs	r4, #85	; 0x55
 800173a:	193b      	adds	r3, r7, r4
 800173c:	210f      	movs	r1, #15
 800173e:	400a      	ands	r2, r1
 8001740:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001742:	193b      	adds	r3, r7, r4
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d000      	beq.n	800174c <PCD_EP_ISR_Handler+0x34>
 800174a:	e179      	b.n	8001a40 <PCD_EP_ISR_Handler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800174c:	183b      	adds	r3, r7, r0
 800174e:	881b      	ldrh	r3, [r3, #0]
 8001750:	2210      	movs	r2, #16
 8001752:	4013      	ands	r3, r2
 8001754:	d154      	bne.n	8001800 <PCD_EP_ISR_Handler+0xe8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	b29a      	uxth	r2, r3
 800175e:	200e      	movs	r0, #14
 8001760:	183b      	adds	r3, r7, r0
 8001762:	49af      	ldr	r1, [pc, #700]	; (8001a20 <PCD_EP_ISR_Handler+0x308>)
 8001764:	400a      	ands	r2, r1
 8001766:	801a      	strh	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	183a      	adds	r2, r7, r0
 800176e:	8812      	ldrh	r2, [r2, #0]
 8001770:	49ac      	ldr	r1, [pc, #688]	; (8001a24 <PCD_EP_ISR_Handler+0x30c>)
 8001772:	430a      	orrs	r2, r1
 8001774:	b292      	uxth	r2, r2
 8001776:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3328      	adds	r3, #40	; 0x28
 800177c:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2250      	movs	r2, #80	; 0x50
 8001784:	5a9b      	ldrh	r3, [r3, r2]
 8001786:	b29b      	uxth	r3, r3
 8001788:	001a      	movs	r2, r3
 800178a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	18d2      	adds	r2, r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	18d3      	adds	r3, r2, r3
 8001798:	4aa3      	ldr	r2, [pc, #652]	; (8001a28 <PCD_EP_ISR_Handler+0x310>)
 800179a:	4694      	mov	ip, r2
 800179c:	4463      	add	r3, ip
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	059b      	lsls	r3, r3, #22
 80017a2:	0d9a      	lsrs	r2, r3, #22
 80017a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017a6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80017a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	18d2      	adds	r2, r2, r3
 80017b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017b4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2100      	movs	r1, #0
 80017ba:	0018      	movs	r0, r3
 80017bc:	f006 faae 	bl	8007d1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2224      	movs	r2, #36	; 0x24
 80017c4:	5c9b      	ldrb	r3, [r3, r2]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <PCD_EP_ISR_Handler+0xb8>
 80017cc:	f000 fb82 	bl	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
 80017d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <PCD_EP_ISR_Handler+0xc4>
 80017d8:	f000 fb7c 	bl	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2224      	movs	r2, #36	; 0x24
 80017e0:	5c9b      	ldrb	r3, [r3, r2]
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2280      	movs	r2, #128	; 0x80
 80017e6:	4252      	negs	r2, r2
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b291      	uxth	r1, r2
 80017f2:	224c      	movs	r2, #76	; 0x4c
 80017f4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2224      	movs	r2, #36	; 0x24
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
 80017fe:	e369      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3369      	adds	r3, #105	; 0x69
 8001804:	33ff      	adds	r3, #255	; 0xff
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2152      	movs	r1, #82	; 0x52
 800180e:	187b      	adds	r3, r7, r1
 8001810:	8812      	ldrh	r2, [r2, #0]
 8001812:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001814:	187b      	adds	r3, r7, r1
 8001816:	881a      	ldrh	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4013      	ands	r3, r2
 800181e:	d037      	beq.n	8001890 <PCD_EP_ISR_Handler+0x178>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2250      	movs	r2, #80	; 0x50
 8001826:	5a9b      	ldrh	r3, [r3, r2]
 8001828:	b29b      	uxth	r3, r3
 800182a:	001a      	movs	r2, r3
 800182c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	18d2      	adds	r2, r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	18d3      	adds	r3, r2, r3
 800183a:	4a7c      	ldr	r2, [pc, #496]	; (8001a2c <PCD_EP_ISR_Handler+0x314>)
 800183c:	4694      	mov	ip, r2
 800183e:	4463      	add	r3, ip
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	059b      	lsls	r3, r3, #22
 8001844:	0d9a      	lsrs	r2, r3, #22
 8001846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001848:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	22ac      	movs	r2, #172	; 0xac
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	1899      	adds	r1, r3, r2
 8001856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001858:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800185a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800185c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800185e:	b29b      	uxth	r3, r3
 8001860:	f004 fccc 	bl	80061fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	881b      	ldrh	r3, [r3, #0]
 800186a:	b29a      	uxth	r2, r3
 800186c:	2010      	movs	r0, #16
 800186e:	183b      	adds	r3, r7, r0
 8001870:	496f      	ldr	r1, [pc, #444]	; (8001a30 <PCD_EP_ISR_Handler+0x318>)
 8001872:	400a      	ands	r2, r1
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	183a      	adds	r2, r7, r0
 800187c:	8812      	ldrh	r2, [r2, #0]
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	430a      	orrs	r2, r1
 8001882:	b292      	uxth	r2, r2
 8001884:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	0018      	movs	r0, r3
 800188a:	f006 fa11 	bl	8007cb0 <HAL_PCD_SetupStageCallback>
 800188e:	e321      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001890:	2352      	movs	r3, #82	; 0x52
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	2200      	movs	r2, #0
 8001896:	5e9b      	ldrsh	r3, [r3, r2]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db00      	blt.n	800189e <PCD_EP_ISR_Handler+0x186>
 800189c:	e31a      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	201e      	movs	r0, #30
 80018a8:	183b      	adds	r3, r7, r0
 80018aa:	4961      	ldr	r1, [pc, #388]	; (8001a30 <PCD_EP_ISR_Handler+0x318>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	801a      	strh	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	183a      	adds	r2, r7, r0
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	430a      	orrs	r2, r1
 80018bc:	b292      	uxth	r2, r2
 80018be:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2250      	movs	r2, #80	; 0x50
 80018c6:	5a9b      	ldrh	r3, [r3, r2]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	001a      	movs	r2, r3
 80018cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	18d2      	adds	r2, r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	18d3      	adds	r3, r2, r3
 80018da:	4a54      	ldr	r2, [pc, #336]	; (8001a2c <PCD_EP_ISR_Handler+0x314>)
 80018dc:	4694      	mov	ip, r2
 80018de:	4463      	add	r3, ip
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	059b      	lsls	r3, r3, #22
 80018e4:	0d9a      	lsrs	r2, r3, #22
 80018e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018e8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80018ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01a      	beq.n	8001928 <PCD_EP_ISR_Handler+0x210>
 80018f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d016      	beq.n	8001928 <PCD_EP_ISR_Handler+0x210>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6818      	ldr	r0, [r3, #0]
 80018fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001900:	6959      	ldr	r1, [r3, #20]
 8001902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001904:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001908:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800190a:	b29b      	uxth	r3, r3
 800190c:	f004 fc76 	bl	80061fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001912:	695a      	ldr	r2, [r3, #20]
 8001914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	18d2      	adds	r2, r2, r3
 800191a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800191c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2100      	movs	r1, #0
 8001922:	0018      	movs	r0, r3
 8001924:	f006 f9d9 	bl	8007cda <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	001a      	movs	r2, r3
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	011b      	lsls	r3, r3, #4
 8001936:	4013      	ands	r3, r2
 8001938:	d000      	beq.n	800193c <PCD_EP_ISR_Handler+0x224>
 800193a:	e2cb      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2250      	movs	r2, #80	; 0x50
 8001948:	5a9b      	ldrh	r3, [r3, r2]
 800194a:	b29b      	uxth	r3, r3
 800194c:	001a      	movs	r2, r3
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	189b      	adds	r3, r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	4a35      	ldr	r2, [pc, #212]	; (8001a2c <PCD_EP_ISR_Handler+0x314>)
 8001958:	4694      	mov	ip, r2
 800195a:	4463      	add	r3, ip
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d110      	bne.n	8001988 <PCD_EP_ISR_Handler+0x270>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	881b      	ldrh	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4a31      	ldr	r2, [pc, #196]	; (8001a34 <PCD_EP_ISR_Handler+0x31c>)
 800196e:	4013      	ands	r3, r2
 8001970:	b29a      	uxth	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	801a      	strh	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <PCD_EP_ISR_Handler+0x30c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	b29a      	uxth	r2, r3
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	801a      	strh	r2, [r3, #0]
 8001986:	e02b      	b.n	80019e0 <PCD_EP_ISR_Handler+0x2c8>
 8001988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	2b3e      	cmp	r3, #62	; 0x3e
 800198e:	d812      	bhi.n	80019b6 <PCD_EP_ISR_Handler+0x29e>
 8001990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	085b      	lsrs	r3, r3, #1
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
 8001998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	d002      	beq.n	80019a8 <PCD_EP_ISR_Handler+0x290>
 80019a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019a4:	3301      	adds	r3, #1
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
 80019a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	801a      	strh	r2, [r3, #0]
 80019b4:	e014      	b.n	80019e0 <PCD_EP_ISR_Handler+0x2c8>
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	647b      	str	r3, [r7, #68]	; 0x44
 80019be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	221f      	movs	r2, #31
 80019c4:	4013      	ands	r3, r2
 80019c6:	d102      	bne.n	80019ce <PCD_EP_ISR_Handler+0x2b6>
 80019c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ca:	3b01      	subs	r3, #1
 80019cc:	647b      	str	r3, [r7, #68]	; 0x44
 80019ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	029b      	lsls	r3, r3, #10
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <PCD_EP_ISR_Handler+0x30c>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	b29a      	uxth	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	881b      	ldrh	r3, [r3, #0]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	2012      	movs	r0, #18
 80019ea:	183b      	adds	r3, r7, r0
 80019ec:	4912      	ldr	r1, [pc, #72]	; (8001a38 <PCD_EP_ISR_Handler+0x320>)
 80019ee:	400a      	ands	r2, r1
 80019f0:	801a      	strh	r2, [r3, #0]
 80019f2:	183b      	adds	r3, r7, r0
 80019f4:	183a      	adds	r2, r7, r0
 80019f6:	8812      	ldrh	r2, [r2, #0]
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0149      	lsls	r1, r1, #5
 80019fc:	404a      	eors	r2, r1
 80019fe:	801a      	strh	r2, [r3, #0]
 8001a00:	183b      	adds	r3, r7, r0
 8001a02:	183a      	adds	r2, r7, r0
 8001a04:	8812      	ldrh	r2, [r2, #0]
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0189      	lsls	r1, r1, #6
 8001a0a:	404a      	eors	r2, r1
 8001a0c:	801a      	strh	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	183a      	adds	r2, r7, r0
 8001a14:	8812      	ldrh	r2, [r2, #0]
 8001a16:	4909      	ldr	r1, [pc, #36]	; (8001a3c <PCD_EP_ISR_Handler+0x324>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	b292      	uxth	r2, r2
 8001a1c:	801a      	strh	r2, [r3, #0]
 8001a1e:	e259      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
 8001a20:	ffff8f0f 	.word	0xffff8f0f
 8001a24:	ffff8000 	.word	0xffff8000
 8001a28:	00000402 	.word	0x00000402
 8001a2c:	00000406 	.word	0x00000406
 8001a30:	00000f8f 	.word	0x00000f8f
 8001a34:	ffff83ff 	.word	0xffff83ff
 8001a38:	ffffbf8f 	.word	0xffffbf8f
 8001a3c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	001a      	movs	r2, r3
 8001a46:	2055      	movs	r0, #85	; 0x55
 8001a48:	183b      	adds	r3, r7, r0
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	18d2      	adds	r2, r2, r3
 8001a50:	2152      	movs	r1, #82	; 0x52
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	8812      	ldrh	r2, [r2, #0]
 8001a56:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a58:	187b      	adds	r3, r7, r1
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	db00      	blt.n	8001a64 <PCD_EP_ISR_Handler+0x34c>
 8001a62:	e0fa      	b.n	8001c5a <PCD_EP_ISR_Handler+0x542>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	001a      	movs	r2, r3
 8001a6a:	183b      	adds	r3, r7, r0
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	18d3      	adds	r3, r2, r3
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	2450      	movs	r4, #80	; 0x50
 8001a78:	193b      	adds	r3, r7, r4
 8001a7a:	49cf      	ldr	r1, [pc, #828]	; (8001db8 <PCD_EP_ISR_Handler+0x6a0>)
 8001a7c:	400a      	ands	r2, r1
 8001a7e:	801a      	strh	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	001a      	movs	r2, r3
 8001a86:	183b      	adds	r3, r7, r0
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	18d3      	adds	r3, r2, r3
 8001a8e:	193a      	adds	r2, r7, r4
 8001a90:	8812      	ldrh	r2, [r2, #0]
 8001a92:	2180      	movs	r1, #128	; 0x80
 8001a94:	430a      	orrs	r2, r1
 8001a96:	b292      	uxth	r2, r2
 8001a98:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001a9a:	183b      	adds	r3, r7, r0
 8001a9c:	781a      	ldrb	r2, [r3, #0]
 8001a9e:	0013      	movs	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	3369      	adds	r3, #105	; 0x69
 8001aa8:	33ff      	adds	r3, #255	; 0xff
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	18d3      	adds	r3, r2, r3
 8001aae:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ab2:	7b1b      	ldrb	r3, [r3, #12]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d125      	bne.n	8001b04 <PCD_EP_ISR_Handler+0x3ec>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2250      	movs	r2, #80	; 0x50
 8001abe:	5a9b      	ldrh	r3, [r3, r2]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	001a      	movs	r2, r3
 8001ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	18d2      	adds	r2, r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	18d3      	adds	r3, r2, r3
 8001ad2:	4aba      	ldr	r2, [pc, #744]	; (8001dbc <PCD_EP_ISR_Handler+0x6a4>)
 8001ad4:	4694      	mov	ip, r2
 8001ad6:	4463      	add	r3, ip
 8001ad8:	881a      	ldrh	r2, [r3, #0]
 8001ada:	2448      	movs	r4, #72	; 0x48
 8001adc:	193b      	adds	r3, r7, r4
 8001ade:	0592      	lsls	r2, r2, #22
 8001ae0:	0d92      	lsrs	r2, r2, #22
 8001ae2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001ae4:	193b      	adds	r3, r7, r4
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d100      	bne.n	8001aee <PCD_EP_ISR_Handler+0x3d6>
 8001aec:	e08d      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6818      	ldr	r0, [r3, #0]
 8001af2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af4:	6959      	ldr	r1, [r3, #20]
 8001af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001af8:	88da      	ldrh	r2, [r3, #6]
 8001afa:	193b      	adds	r3, r7, r4
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	f004 fb7d 	bl	80061fc <USB_ReadPMA>
 8001b02:	e082      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4f2>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d10c      	bne.n	8001b26 <PCD_EP_ISR_Handler+0x40e>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001b0c:	2348      	movs	r3, #72	; 0x48
 8001b0e:	18fc      	adds	r4, r7, r3
 8001b10:	2352      	movs	r3, #82	; 0x52
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	881a      	ldrh	r2, [r3, #0]
 8001b16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f000 f9ee 	bl	8001efc <HAL_PCD_EP_DB_Receive>
 8001b20:	0003      	movs	r3, r0
 8001b22:	8023      	strh	r3, [r4, #0]
 8001b24:	e071      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4f2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	001a      	movs	r2, r3
 8001b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	18d3      	adds	r3, r2, r3
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	204a      	movs	r0, #74	; 0x4a
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	49a0      	ldr	r1, [pc, #640]	; (8001dc0 <PCD_EP_ISR_Handler+0x6a8>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	801a      	strh	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	001a      	movs	r2, r3
 8001b48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	18d3      	adds	r3, r2, r3
 8001b50:	183a      	adds	r2, r7, r0
 8001b52:	8812      	ldrh	r2, [r2, #0]
 8001b54:	499b      	ldr	r1, [pc, #620]	; (8001dc4 <PCD_EP_ISR_Handler+0x6ac>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	b292      	uxth	r2, r2
 8001b5a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	001a      	movs	r2, r3
 8001b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	18d3      	adds	r3, r2, r3
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	001a      	movs	r2, r3
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	01db      	lsls	r3, r3, #7
 8001b74:	4013      	ands	r3, r2
 8001b76:	d024      	beq.n	8001bc2 <PCD_EP_ISR_Handler+0x4aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2250      	movs	r2, #80	; 0x50
 8001b7e:	5a9b      	ldrh	r3, [r3, r2]
 8001b80:	b29b      	uxth	r3, r3
 8001b82:	001a      	movs	r2, r3
 8001b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	18d2      	adds	r2, r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	18d3      	adds	r3, r2, r3
 8001b92:	4a8d      	ldr	r2, [pc, #564]	; (8001dc8 <PCD_EP_ISR_Handler+0x6b0>)
 8001b94:	4694      	mov	ip, r2
 8001b96:	4463      	add	r3, ip
 8001b98:	881a      	ldrh	r2, [r3, #0]
 8001b9a:	2448      	movs	r4, #72	; 0x48
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	0592      	lsls	r2, r2, #22
 8001ba0:	0d92      	lsrs	r2, r2, #22
 8001ba2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001ba4:	193b      	adds	r3, r7, r4
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d02e      	beq.n	8001c0a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb2:	6959      	ldr	r1, [r3, #20]
 8001bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bb6:	891a      	ldrh	r2, [r3, #8]
 8001bb8:	193b      	adds	r3, r7, r4
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	f004 fb1e 	bl	80061fc <USB_ReadPMA>
 8001bc0:	e023      	b.n	8001c0a <PCD_EP_ISR_Handler+0x4f2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2250      	movs	r2, #80	; 0x50
 8001bc8:	5a9b      	ldrh	r3, [r3, r2]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	001a      	movs	r2, r3
 8001bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	18d2      	adds	r2, r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	18d3      	adds	r3, r2, r3
 8001bdc:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <PCD_EP_ISR_Handler+0x6a4>)
 8001bde:	4694      	mov	ip, r2
 8001be0:	4463      	add	r3, ip
 8001be2:	881a      	ldrh	r2, [r3, #0]
 8001be4:	2448      	movs	r4, #72	; 0x48
 8001be6:	193b      	adds	r3, r7, r4
 8001be8:	0592      	lsls	r2, r2, #22
 8001bea:	0d92      	lsrs	r2, r2, #22
 8001bec:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001bee:	193b      	adds	r3, r7, r4
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d009      	beq.n	8001c0a <PCD_EP_ISR_Handler+0x4f2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6818      	ldr	r0, [r3, #0]
 8001bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001bfc:	6959      	ldr	r1, [r3, #20]
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c00:	895a      	ldrh	r2, [r3, #10]
 8001c02:	193b      	adds	r3, r7, r4
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	f004 faf9 	bl	80061fc <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	2148      	movs	r1, #72	; 0x48
 8001c10:	187b      	adds	r3, r7, r1
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	18d2      	adds	r2, r2, r3
 8001c16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c18:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	187b      	adds	r3, r7, r1
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	18d2      	adds	r2, r2, r3
 8001c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c26:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <PCD_EP_ISR_Handler+0x524>
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	881a      	ldrh	r2, [r3, #0]
 8001c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <PCD_EP_ISR_Handler+0x534>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0011      	movs	r1, r2
 8001c44:	0018      	movs	r0, r3
 8001c46:	f006 f848 	bl	8007cda <HAL_PCD_DataOutStageCallback>
 8001c4a:	e006      	b.n	8001c5a <PCD_EP_ISR_Handler+0x542>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c52:	0011      	movs	r1, r2
 8001c54:	0018      	movs	r0, r3
 8001c56:	f003 f899 	bl	8004d8c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001c5a:	2452      	movs	r4, #82	; 0x52
 8001c5c:	193b      	adds	r3, r7, r4
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	4013      	ands	r3, r2
 8001c64:	d100      	bne.n	8001c68 <PCD_EP_ISR_Handler+0x550>
 8001c66:	e135      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
      {
        ep = &hpcd->IN_ep[epindex];
 8001c68:	2055      	movs	r0, #85	; 0x55
 8001c6a:	183b      	adds	r3, r7, r0
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	0013      	movs	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	189b      	adds	r3, r3, r2
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	18d3      	adds	r3, r2, r3
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	001a      	movs	r2, r3
 8001c84:	183b      	adds	r3, r7, r0
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	18d3      	adds	r3, r2, r3
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2542      	movs	r5, #66	; 0x42
 8001c92:	197b      	adds	r3, r7, r5
 8001c94:	494d      	ldr	r1, [pc, #308]	; (8001dcc <PCD_EP_ISR_Handler+0x6b4>)
 8001c96:	400a      	ands	r2, r1
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	001a      	movs	r2, r3
 8001ca0:	183b      	adds	r3, r7, r0
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	18d3      	adds	r3, r2, r3
 8001ca8:	197a      	adds	r2, r7, r5
 8001caa:	8812      	ldrh	r2, [r2, #0]
 8001cac:	4948      	ldr	r1, [pc, #288]	; (8001dd0 <PCD_EP_ISR_Handler+0x6b8>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	b292      	uxth	r2, r2
 8001cb2:	801a      	strh	r2, [r3, #0]

        if (ep->type != EP_TYPE_BULK)
 8001cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cb6:	78db      	ldrb	r3, [r3, #3]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d100      	bne.n	8001cbe <PCD_EP_ISR_Handler+0x5a6>
 8001cbc:	e0ad      	b.n	8001e1a <PCD_EP_ISR_Handler+0x702>
        {
          ep->xfer_len = 0U;
 8001cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]

          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cc4:	193b      	adds	r3, r7, r4
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	2240      	movs	r2, #64	; 0x40
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d046      	beq.n	8001d5c <PCD_EP_ISR_Handler+0x644>
          {
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cd0:	785b      	ldrb	r3, [r3, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d125      	bne.n	8001d22 <PCD_EP_ISR_Handler+0x60a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2250      	movs	r2, #80	; 0x50
 8001ce2:	5a9b      	ldrh	r3, [r3, r2]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	001a      	movs	r2, r3
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	189b      	adds	r3, r3, r2
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
 8001cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	00da      	lsls	r2, r3, #3
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	18d3      	adds	r3, r2, r3
 8001cf8:	4a33      	ldr	r2, [pc, #204]	; (8001dc8 <PCD_EP_ISR_Handler+0x6b0>)
 8001cfa:	4694      	mov	ip, r2
 8001cfc:	4463      	add	r3, ip
 8001cfe:	623b      	str	r3, [r7, #32]
 8001d00:	6a3b      	ldr	r3, [r7, #32]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4a33      	ldr	r2, [pc, #204]	; (8001dd4 <PCD_EP_ISR_Handler+0x6bc>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	801a      	strh	r2, [r3, #0]
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	881b      	ldrh	r3, [r3, #0]
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	4a2e      	ldr	r2, [pc, #184]	; (8001dd0 <PCD_EP_ISR_Handler+0x6b8>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	801a      	strh	r2, [r3, #0]
 8001d20:	e073      	b.n	8001e0a <PCD_EP_ISR_Handler+0x6f2>
 8001d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d24:	785b      	ldrb	r3, [r3, #1]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d16f      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x6f2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2250      	movs	r2, #80	; 0x50
 8001d36:	5a9b      	ldrh	r3, [r3, r2]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	001a      	movs	r2, r3
 8001d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3e:	189b      	adds	r3, r3, r2
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	00da      	lsls	r2, r3, #3
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	18d3      	adds	r3, r2, r3
 8001d4c:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <PCD_EP_ISR_Handler+0x6b0>)
 8001d4e:	4694      	mov	ip, r2
 8001d50:	4463      	add	r3, ip
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	e056      	b.n	8001e0a <PCD_EP_ISR_Handler+0x6f2>
          }
          else
          {
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d64:	785b      	ldrb	r3, [r3, #1]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d136      	bne.n	8001dd8 <PCD_EP_ISR_Handler+0x6c0>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2250      	movs	r2, #80	; 0x50
 8001d76:	5a9b      	ldrh	r3, [r3, r2]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	001a      	movs	r2, r3
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	189b      	adds	r3, r3, r2
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
 8001d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	00da      	lsls	r2, r3, #3
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	18d3      	adds	r3, r2, r3
 8001d8c:	4a0b      	ldr	r2, [pc, #44]	; (8001dbc <PCD_EP_ISR_Handler+0x6a4>)
 8001d8e:	4694      	mov	ip, r2
 8001d90:	4463      	add	r3, ip
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <PCD_EP_ISR_Handler+0x6bc>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da2:	801a      	strh	r2, [r3, #0]
 8001da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4a09      	ldr	r2, [pc, #36]	; (8001dd0 <PCD_EP_ISR_Handler+0x6b8>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	e029      	b.n	8001e0a <PCD_EP_ISR_Handler+0x6f2>
 8001db6:	46c0      	nop			; (mov r8, r8)
 8001db8:	00000f8f 	.word	0x00000f8f
 8001dbc:	00000406 	.word	0x00000406
 8001dc0:	ffff8f8f 	.word	0xffff8f8f
 8001dc4:	ffff80c0 	.word	0xffff80c0
 8001dc8:	00000402 	.word	0x00000402
 8001dcc:	ffff8f0f 	.word	0xffff8f0f
 8001dd0:	ffff8000 	.word	0xffff8000
 8001dd4:	ffff83ff 	.word	0xffff83ff
 8001dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d114      	bne.n	8001e0a <PCD_EP_ISR_Handler+0x6f2>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2250      	movs	r2, #80	; 0x50
 8001de6:	5a9b      	ldrh	r3, [r3, r2]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	001a      	movs	r2, r3
 8001dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dee:	189b      	adds	r3, r3, r2
 8001df0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	00da      	lsls	r2, r3, #3
 8001df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dfa:	18d3      	adds	r3, r2, r3
 8001dfc:	4a3d      	ldr	r2, [pc, #244]	; (8001ef4 <PCD_EP_ISR_Handler+0x7dc>)
 8001dfe:	4694      	mov	ip, r2
 8001e00:	4463      	add	r3, ip
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e06:	2200      	movs	r2, #0
 8001e08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	0011      	movs	r1, r2
 8001e12:	0018      	movs	r0, r3
 8001e14:	f005 ff82 	bl	8007d1c <HAL_PCD_DataInStageCallback>
 8001e18:	e05c      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8001e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e1c:	78db      	ldrb	r3, [r3, #3]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d150      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x7ac>
 8001e22:	2352      	movs	r3, #82	; 0x52
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	881a      	ldrh	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d149      	bne.n	8001ec4 <PCD_EP_ISR_Handler+0x7ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2250      	movs	r2, #80	; 0x50
 8001e36:	5a9b      	ldrh	r3, [r3, r2]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	18d2      	adds	r2, r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	18d3      	adds	r3, r2, r3
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <PCD_EP_ISR_Handler+0x7e0>)
 8001e4c:	4694      	mov	ip, r2
 8001e4e:	4463      	add	r3, ip
 8001e50:	881a      	ldrh	r2, [r3, #0]
 8001e52:	2140      	movs	r1, #64	; 0x40
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	0592      	lsls	r2, r2, #22
 8001e58:	0d92      	lsrs	r2, r2, #22
 8001e5a:	801a      	strh	r2, [r3, #0]

          if (ep->xfer_len > TxByteNbre)
 8001e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e5e:	699a      	ldr	r2, [r3, #24]
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d907      	bls.n	8001e78 <PCD_EP_ISR_Handler+0x760>
          {
            ep->xfer_len -= TxByteNbre;
 8001e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e6a:	699a      	ldr	r2, [r3, #24]
 8001e6c:	187b      	adds	r3, r7, r1
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	1ad2      	subs	r2, r2, r3
 8001e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e74:	619a      	str	r2, [r3, #24]
 8001e76:	e002      	b.n	8001e7e <PCD_EP_ISR_Handler+0x766>
          }
          else
          {
            ep->xfer_len = 0U;
 8001e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <PCD_EP_ISR_Handler+0x77e>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0011      	movs	r1, r2
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f005 ff44 	bl	8007d1c <HAL_PCD_DataInStageCallback>
 8001e94:	e01e      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	2140      	movs	r1, #64	; 0x40
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	18d2      	adds	r2, r2, r3
 8001ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	18d2      	adds	r2, r2, r3
 8001eb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eb2:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001eba:	0011      	movs	r1, r2
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f002 ff65 	bl	8004d8c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001ec2:	e007      	b.n	8001ed4 <PCD_EP_ISR_Handler+0x7bc>
          }
        }
        /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001ec4:	2352      	movs	r3, #82	; 0x52
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	881a      	ldrh	r2, [r3, #0]
 8001eca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f930 	bl	8002134 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2244      	movs	r2, #68	; 0x44
 8001eda:	5a9b      	ldrh	r3, [r3, r2]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da01      	bge.n	8001ee8 <PCD_EP_ISR_Handler+0x7d0>
 8001ee4:	f7ff fc1e 	bl	8001724 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b016      	add	sp, #88	; 0x58
 8001ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	00000406 	.word	0x00000406
 8001ef8:	00000402 	.word	0x00000402

08001efc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	1dbb      	adds	r3, r7, #6
 8001f08:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f0a:	1dbb      	adds	r3, r7, #6
 8001f0c:	881a      	ldrh	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	01db      	lsls	r3, r3, #7
 8001f12:	4013      	ands	r3, r2
 8001f14:	d100      	bne.n	8001f18 <HAL_PCD_EP_DB_Receive+0x1c>
 8001f16:	e07d      	b.n	8002014 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2250      	movs	r2, #80	; 0x50
 8001f1e:	5a9b      	ldrh	r3, [r3, r2]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	001a      	movs	r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	00db      	lsls	r3, r3, #3
 8001f2a:	18d2      	adds	r2, r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	18d3      	adds	r3, r2, r3
 8001f32:	4a7a      	ldr	r2, [pc, #488]	; (800211c <HAL_PCD_EP_DB_Receive+0x220>)
 8001f34:	4694      	mov	ip, r2
 8001f36:	4463      	add	r3, ip
 8001f38:	881a      	ldrh	r2, [r3, #0]
 8001f3a:	211a      	movs	r1, #26
 8001f3c:	187b      	adds	r3, r7, r1
 8001f3e:	0592      	lsls	r2, r2, #22
 8001f40:	0d92      	lsrs	r2, r2, #22
 8001f42:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	699a      	ldr	r2, [r3, #24]
 8001f48:	187b      	adds	r3, r7, r1
 8001f4a:	881b      	ldrh	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d307      	bcc.n	8001f60 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	699a      	ldr	r2, [r3, #24]
 8001f54:	187b      	adds	r3, r7, r1
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	1ad2      	subs	r2, r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	619a      	str	r2, [r3, #24]
 8001f5e:	e002      	b.n	8001f66 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2200      	movs	r2, #0
 8001f64:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d121      	bne.n	8001fb2 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	001a      	movs	r2, r3
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	18d3      	adds	r3, r2, r3
 8001f7c:	881b      	ldrh	r3, [r3, #0]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	2018      	movs	r0, #24
 8001f82:	183b      	adds	r3, r7, r0
 8001f84:	4966      	ldr	r1, [pc, #408]	; (8002120 <HAL_PCD_EP_DB_Receive+0x224>)
 8001f86:	400a      	ands	r2, r1
 8001f88:	801a      	strh	r2, [r3, #0]
 8001f8a:	183b      	adds	r3, r7, r0
 8001f8c:	183a      	adds	r2, r7, r0
 8001f8e:	8812      	ldrh	r2, [r2, #0]
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	0189      	lsls	r1, r1, #6
 8001f94:	404a      	eors	r2, r1
 8001f96:	801a      	strh	r2, [r3, #0]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	18d3      	adds	r3, r2, r3
 8001fa6:	183a      	adds	r2, r7, r0
 8001fa8:	8812      	ldrh	r2, [r2, #0]
 8001faa:	495e      	ldr	r1, [pc, #376]	; (8002124 <HAL_PCD_EP_DB_Receive+0x228>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	b292      	uxth	r2, r2
 8001fb0:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001fb2:	1dbb      	adds	r3, r7, #6
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d01a      	beq.n	8001ff2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	001a      	movs	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	18d3      	adds	r3, r2, r3
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	2016      	movs	r0, #22
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	4955      	ldr	r1, [pc, #340]	; (8002128 <HAL_PCD_EP_DB_Receive+0x22c>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	801a      	strh	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	001a      	movs	r2, r3
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	183a      	adds	r2, r7, r0
 8001fe8:	8812      	ldrh	r2, [r2, #0]
 8001fea:	4950      	ldr	r1, [pc, #320]	; (800212c <HAL_PCD_EP_DB_Receive+0x230>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	b292      	uxth	r2, r2
 8001ff0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8001ff2:	241a      	movs	r4, #26
 8001ff4:	193b      	adds	r3, r7, r4
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d100      	bne.n	8001ffe <HAL_PCD_EP_DB_Receive+0x102>
 8001ffc:	e086      	b.n	800210c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	6959      	ldr	r1, [r3, #20]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	891a      	ldrh	r2, [r3, #8]
 800200a:	193b      	adds	r3, r7, r4
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	f004 f8f5 	bl	80061fc <USB_ReadPMA>
 8002012:	e07b      	b.n	800210c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2250      	movs	r2, #80	; 0x50
 800201a:	5a9b      	ldrh	r3, [r3, r2]
 800201c:	b29b      	uxth	r3, r3
 800201e:	001a      	movs	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	18d2      	adds	r2, r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	18d3      	adds	r3, r2, r3
 800202e:	4a40      	ldr	r2, [pc, #256]	; (8002130 <HAL_PCD_EP_DB_Receive+0x234>)
 8002030:	4694      	mov	ip, r2
 8002032:	4463      	add	r3, ip
 8002034:	881a      	ldrh	r2, [r3, #0]
 8002036:	211a      	movs	r1, #26
 8002038:	187b      	adds	r3, r7, r1
 800203a:	0592      	lsls	r2, r2, #22
 800203c:	0d92      	lsrs	r2, r2, #22
 800203e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	699a      	ldr	r2, [r3, #24]
 8002044:	187b      	adds	r3, r7, r1
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d307      	bcc.n	800205c <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	187b      	adds	r3, r7, r1
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	1ad2      	subs	r2, r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	619a      	str	r2, [r3, #24]
 800205a:	e002      	b.n	8002062 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d121      	bne.n	80020ae <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	001a      	movs	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	18d3      	adds	r3, r2, r3
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29a      	uxth	r2, r3
 800207c:	201e      	movs	r0, #30
 800207e:	183b      	adds	r3, r7, r0
 8002080:	4927      	ldr	r1, [pc, #156]	; (8002120 <HAL_PCD_EP_DB_Receive+0x224>)
 8002082:	400a      	ands	r2, r1
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	183b      	adds	r3, r7, r0
 8002088:	183a      	adds	r2, r7, r0
 800208a:	8812      	ldrh	r2, [r2, #0]
 800208c:	2180      	movs	r1, #128	; 0x80
 800208e:	0189      	lsls	r1, r1, #6
 8002090:	404a      	eors	r2, r1
 8002092:	801a      	strh	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	001a      	movs	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	18d3      	adds	r3, r2, r3
 80020a2:	183a      	adds	r2, r7, r0
 80020a4:	8812      	ldrh	r2, [r2, #0]
 80020a6:	491f      	ldr	r1, [pc, #124]	; (8002124 <HAL_PCD_EP_DB_Receive+0x228>)
 80020a8:	430a      	orrs	r2, r1
 80020aa:	b292      	uxth	r2, r2
 80020ac:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80020ae:	1dbb      	adds	r3, r7, #6
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	4013      	ands	r3, r2
 80020b6:	d11a      	bne.n	80020ee <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	001a      	movs	r2, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	201c      	movs	r0, #28
 80020cc:	183b      	adds	r3, r7, r0
 80020ce:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_PCD_EP_DB_Receive+0x22c>)
 80020d0:	400a      	ands	r2, r1
 80020d2:	801a      	strh	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	001a      	movs	r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	183a      	adds	r2, r7, r0
 80020e4:	8812      	ldrh	r2, [r2, #0]
 80020e6:	4911      	ldr	r1, [pc, #68]	; (800212c <HAL_PCD_EP_DB_Receive+0x230>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	b292      	uxth	r2, r2
 80020ec:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80020ee:	241a      	movs	r4, #26
 80020f0:	193b      	adds	r3, r7, r4
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d009      	beq.n	800210c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6818      	ldr	r0, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6959      	ldr	r1, [r3, #20]
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	895a      	ldrh	r2, [r3, #10]
 8002104:	193b      	adds	r3, r7, r4
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	f004 f878 	bl	80061fc <USB_ReadPMA>
    }
  }

  return count;
 800210c:	231a      	movs	r3, #26
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	881b      	ldrh	r3, [r3, #0]
}
 8002112:	0018      	movs	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	b009      	add	sp, #36	; 0x24
 8002118:	bd90      	pop	{r4, r7, pc}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	00000402 	.word	0x00000402
 8002120:	ffffbf8f 	.word	0xffffbf8f
 8002124:	ffff8080 	.word	0xffff8080
 8002128:	ffff8f8f 	.word	0xffff8f8f
 800212c:	ffff80c0 	.word	0xffff80c0
 8002130:	00000406 	.word	0x00000406

08002134 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b0a2      	sub	sp, #136	; 0x88
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	1dbb      	adds	r3, r7, #6
 8002140:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002142:	1dbb      	adds	r3, r7, #6
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	2240      	movs	r2, #64	; 0x40
 8002148:	4013      	ands	r3, r2
 800214a:	d100      	bne.n	800214e <HAL_PCD_EP_DB_Transmit+0x1a>
 800214c:	e1c8      	b.n	80024e0 <HAL_PCD_EP_DB_Transmit+0x3ac>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2250      	movs	r2, #80	; 0x50
 8002154:	5a9b      	ldrh	r3, [r3, r2]
 8002156:	b29b      	uxth	r3, r3
 8002158:	001a      	movs	r2, r3
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	18d2      	adds	r2, r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	18d3      	adds	r3, r2, r3
 8002168:	4ad7      	ldr	r2, [pc, #860]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 800216a:	4694      	mov	ip, r2
 800216c:	4463      	add	r3, ip
 800216e:	881a      	ldrh	r2, [r3, #0]
 8002170:	214e      	movs	r1, #78	; 0x4e
 8002172:	187b      	adds	r3, r7, r1
 8002174:	0592      	lsls	r2, r2, #22
 8002176:	0d92      	lsrs	r2, r2, #22
 8002178:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxByteNbre)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	699a      	ldr	r2, [r3, #24]
 800217e:	187b      	adds	r3, r7, r1
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d907      	bls.n	8002196 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	187b      	adds	r3, r7, r1
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	619a      	str	r2, [r3, #24]
 8002194:	e002      	b.n	800219c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d000      	beq.n	80021a6 <HAL_PCD_EP_DB_Transmit+0x72>
 80021a4:	e0b5      	b.n	8002312 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	785b      	ldrb	r3, [r3, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d125      	bne.n	80021fa <HAL_PCD_EP_DB_Transmit+0xc6>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2250      	movs	r2, #80	; 0x50
 80021ba:	5a9b      	ldrh	r3, [r3, r2]
 80021bc:	b29b      	uxth	r3, r3
 80021be:	001a      	movs	r2, r3
 80021c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	00da      	lsls	r2, r3, #3
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	18d3      	adds	r3, r2, r3
 80021d0:	4abd      	ldr	r2, [pc, #756]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80021d2:	4694      	mov	ip, r2
 80021d4:	4463      	add	r3, ip
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	4abb      	ldr	r2, [pc, #748]	; (80024cc <HAL_PCD_EP_DB_Transmit+0x398>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	801a      	strh	r2, [r3, #0]
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	4ab8      	ldr	r2, [pc, #736]	; (80024d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	b29a      	uxth	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	801a      	strh	r2, [r3, #0]
 80021f8:	e01b      	b.n	8002232 <HAL_PCD_EP_DB_Transmit+0xfe>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	785b      	ldrb	r3, [r3, #1]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d117      	bne.n	8002232 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2250      	movs	r2, #80	; 0x50
 800220e:	5a9b      	ldrh	r3, [r3, r2]
 8002210:	b29b      	uxth	r3, r3
 8002212:	001a      	movs	r2, r3
 8002214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002216:	189b      	adds	r3, r3, r2
 8002218:	633b      	str	r3, [r7, #48]	; 0x30
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	00da      	lsls	r2, r3, #3
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	18d3      	adds	r3, r2, r3
 8002224:	4aa8      	ldr	r2, [pc, #672]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 8002226:	4694      	mov	ip, r2
 8002228:	4463      	add	r3, ip
 800222a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	623b      	str	r3, [r7, #32]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	785b      	ldrb	r3, [r3, #1]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d125      	bne.n	800228c <HAL_PCD_EP_DB_Transmit+0x158>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2250      	movs	r2, #80	; 0x50
 800224c:	5a9b      	ldrh	r3, [r3, r2]
 800224e:	b29b      	uxth	r3, r3
 8002250:	001a      	movs	r2, r3
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	189b      	adds	r3, r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	00da      	lsls	r2, r3, #3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	18d3      	adds	r3, r2, r3
 8002262:	4a9c      	ldr	r2, [pc, #624]	; (80024d4 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 8002264:	4694      	mov	ip, r2
 8002266:	4463      	add	r3, ip
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	b29b      	uxth	r3, r3
 8002270:	4a96      	ldr	r2, [pc, #600]	; (80024cc <HAL_PCD_EP_DB_Transmit+0x398>)
 8002272:	4013      	ands	r3, r2
 8002274:	b29a      	uxth	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	801a      	strh	r2, [r3, #0]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	881b      	ldrh	r3, [r3, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4a93      	ldr	r2, [pc, #588]	; (80024d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 8002282:	4313      	orrs	r3, r2
 8002284:	b29a      	uxth	r2, r3
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	801a      	strh	r2, [r3, #0]
 800228a:	e018      	b.n	80022be <HAL_PCD_EP_DB_Transmit+0x18a>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	785b      	ldrb	r3, [r3, #1]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d114      	bne.n	80022be <HAL_PCD_EP_DB_Transmit+0x18a>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2250      	movs	r2, #80	; 0x50
 800229a:	5a9b      	ldrh	r3, [r3, r2]
 800229c:	b29b      	uxth	r3, r3
 800229e:	001a      	movs	r2, r3
 80022a0:	6a3b      	ldr	r3, [r7, #32]
 80022a2:	189b      	adds	r3, r3, r2
 80022a4:	623b      	str	r3, [r7, #32]
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	00da      	lsls	r2, r3, #3
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	18d3      	adds	r3, r2, r3
 80022b0:	4a88      	ldr	r2, [pc, #544]	; (80024d4 <HAL_PCD_EP_DB_Transmit+0x3a0>)
 80022b2:	4694      	mov	ip, r2
 80022b4:	4463      	add	r3, ip
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	2200      	movs	r2, #0
 80022bc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0011      	movs	r1, r2
 80022c6:	0018      	movs	r0, r3
 80022c8:	f005 fd28 	bl	8007d1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80022cc:	1dbb      	adds	r3, r7, #6
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	01db      	lsls	r3, r3, #7
 80022d4:	4013      	ands	r3, r2
 80022d6:	d100      	bne.n	80022da <HAL_PCD_EP_DB_Transmit+0x1a6>
 80022d8:	e2d4      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	001a      	movs	r2, r3
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	18d3      	adds	r3, r2, r3
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	2012      	movs	r0, #18
 80022ee:	183b      	adds	r3, r7, r0
 80022f0:	4979      	ldr	r1, [pc, #484]	; (80024d8 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 80022f2:	400a      	ands	r2, r1
 80022f4:	801a      	strh	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	001a      	movs	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	18d3      	adds	r3, r2, r3
 8002304:	183a      	adds	r2, r7, r0
 8002306:	8812      	ldrh	r2, [r2, #0]
 8002308:	4974      	ldr	r1, [pc, #464]	; (80024dc <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800230a:	430a      	orrs	r2, r1
 800230c:	b292      	uxth	r2, r2
 800230e:	801a      	strh	r2, [r3, #0]
 8002310:	e2b8      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002312:	1dbb      	adds	r3, r7, #6
 8002314:	881a      	ldrh	r2, [r3, #0]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	01db      	lsls	r3, r3, #7
 800231a:	4013      	ands	r3, r2
 800231c:	d01a      	beq.n	8002354 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	001a      	movs	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	18d3      	adds	r3, r2, r3
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	b29a      	uxth	r2, r3
 8002330:	2044      	movs	r0, #68	; 0x44
 8002332:	183b      	adds	r3, r7, r0
 8002334:	4968      	ldr	r1, [pc, #416]	; (80024d8 <HAL_PCD_EP_DB_Transmit+0x3a4>)
 8002336:	400a      	ands	r2, r1
 8002338:	801a      	strh	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	001a      	movs	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	18d3      	adds	r3, r2, r3
 8002348:	183a      	adds	r2, r7, r0
 800234a:	8812      	ldrh	r2, [r2, #0]
 800234c:	4963      	ldr	r1, [pc, #396]	; (80024dc <HAL_PCD_EP_DB_Transmit+0x3a8>)
 800234e:	430a      	orrs	r2, r1
 8002350:	b292      	uxth	r2, r2
 8002352:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d000      	beq.n	8002360 <HAL_PCD_EP_DB_Transmit+0x22c>
 800235e:	e291      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	214e      	movs	r1, #78	; 0x4e
 8002366:	187b      	adds	r3, r7, r1
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	18d2      	adds	r2, r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	69da      	ldr	r2, [r3, #28]
 8002374:	187b      	adds	r3, r7, r1
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	18d2      	adds	r2, r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	6a1a      	ldr	r2, [r3, #32]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	429a      	cmp	r2, r3
 8002388:	d309      	bcc.n	800239e <HAL_PCD_EP_DB_Transmit+0x26a>
        {
          len = ep->maxpacket;
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	6a1a      	ldr	r2, [r3, #32]
 8002394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002396:	1ad2      	subs	r2, r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	621a      	str	r2, [r3, #32]
 800239c:	e016      	b.n	80023cc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else if (ep->xfer_len_db == 0U)
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d108      	bne.n	80023b8 <HAL_PCD_EP_DB_Transmit+0x284>
        {
          len = TxByteNbre;
 80023a6:	234e      	movs	r3, #78	; 0x4e
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	881b      	ldrh	r3, [r3, #0]
 80023ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2224      	movs	r2, #36	; 0x24
 80023b2:	2100      	movs	r1, #0
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	e009      	b.n	80023cc <HAL_PCD_EP_DB_Transmit+0x298>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	2100      	movs	r1, #0
 80023be:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	785b      	ldrb	r3, [r3, #1]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d150      	bne.n	8002476 <HAL_PCD_EP_DB_Transmit+0x342>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2250      	movs	r2, #80	; 0x50
 80023e0:	5a9b      	ldrh	r3, [r3, r2]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	001a      	movs	r2, r3
 80023e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e8:	189b      	adds	r3, r3, r2
 80023ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	00da      	lsls	r2, r3, #3
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f4:	18d3      	adds	r3, r2, r3
 80023f6:	4a34      	ldr	r2, [pc, #208]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80023f8:	4694      	mov	ip, r2
 80023fa:	4463      	add	r3, ip
 80023fc:	637b      	str	r3, [r7, #52]	; 0x34
 80023fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002400:	2b00      	cmp	r3, #0
 8002402:	d110      	bne.n	8002426 <HAL_PCD_EP_DB_Transmit+0x2f2>
 8002404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002406:	881b      	ldrh	r3, [r3, #0]
 8002408:	b29b      	uxth	r3, r3
 800240a:	4a30      	ldr	r2, [pc, #192]	; (80024cc <HAL_PCD_EP_DB_Transmit+0x398>)
 800240c:	4013      	ands	r3, r2
 800240e:	b29a      	uxth	r2, r3
 8002410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002412:	801a      	strh	r2, [r3, #0]
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800241c:	4313      	orrs	r3, r2
 800241e:	b29a      	uxth	r2, r3
 8002420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002422:	801a      	strh	r2, [r3, #0]
 8002424:	e044      	b.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002428:	2b3e      	cmp	r3, #62	; 0x3e
 800242a:	d810      	bhi.n	800244e <HAL_PCD_EP_DB_Transmit+0x31a>
 800242c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800242e:	085b      	lsrs	r3, r3, #1
 8002430:	64bb      	str	r3, [r7, #72]	; 0x48
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002434:	2201      	movs	r2, #1
 8002436:	4013      	ands	r3, r2
 8002438:	d002      	beq.n	8002440 <HAL_PCD_EP_DB_Transmit+0x30c>
 800243a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800243c:	3301      	adds	r3, #1
 800243e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002442:	b29b      	uxth	r3, r3
 8002444:	029b      	lsls	r3, r3, #10
 8002446:	b29a      	uxth	r2, r3
 8002448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	e030      	b.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 800244e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002450:	095b      	lsrs	r3, r3, #5
 8002452:	64bb      	str	r3, [r7, #72]	; 0x48
 8002454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002456:	221f      	movs	r2, #31
 8002458:	4013      	ands	r3, r2
 800245a:	d102      	bne.n	8002462 <HAL_PCD_EP_DB_Transmit+0x32e>
 800245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245e:	3b01      	subs	r3, #1
 8002460:	64bb      	str	r3, [r7, #72]	; 0x48
 8002462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002464:	b29b      	uxth	r3, r3
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	b29b      	uxth	r3, r3
 800246a:	4a19      	ldr	r2, [pc, #100]	; (80024d0 <HAL_PCD_EP_DB_Transmit+0x39c>)
 800246c:	4313      	orrs	r3, r2
 800246e:	b29a      	uxth	r2, r3
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	801a      	strh	r2, [r3, #0]
 8002474:	e01c      	b.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d118      	bne.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x37c>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2250      	movs	r2, #80	; 0x50
 800248a:	5a9b      	ldrh	r3, [r3, r2]
 800248c:	b29b      	uxth	r3, r3
 800248e:	001a      	movs	r2, r3
 8002490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002492:	189b      	adds	r3, r3, r2
 8002494:	643b      	str	r3, [r7, #64]	; 0x40
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	00da      	lsls	r2, r3, #3
 800249c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800249e:	18d3      	adds	r3, r2, r3
 80024a0:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_PCD_EP_DB_Transmit+0x394>)
 80024a2:	4694      	mov	ip, r2
 80024a4:	4463      	add	r3, ip
 80024a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6818      	ldr	r0, [r3, #0]
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	6959      	ldr	r1, [r3, #20]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	891a      	ldrh	r2, [r3, #8]
 80024bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f003 fe58 	bl	8006174 <USB_WritePMA>
 80024c4:	e1de      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	00000402 	.word	0x00000402
 80024cc:	ffff83ff 	.word	0xffff83ff
 80024d0:	ffff8000 	.word	0xffff8000
 80024d4:	00000406 	.word	0x00000406
 80024d8:	ffff8f8f 	.word	0xffff8f8f
 80024dc:	ffffc080 	.word	0xffffc080
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2250      	movs	r2, #80	; 0x50
 80024e6:	5a9b      	ldrh	r3, [r3, r2]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	001a      	movs	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	18d2      	adds	r2, r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	18d3      	adds	r3, r2, r3
 80024fa:	4aca      	ldr	r2, [pc, #808]	; (8002824 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80024fc:	4694      	mov	ip, r2
 80024fe:	4463      	add	r3, ip
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	214e      	movs	r1, #78	; 0x4e
 8002504:	187b      	adds	r3, r7, r1
 8002506:	0592      	lsls	r2, r2, #22
 8002508:	0d92      	lsrs	r2, r2, #22
 800250a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxByteNbre)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	699a      	ldr	r2, [r3, #24]
 8002510:	187b      	adds	r3, r7, r1
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d307      	bcc.n	8002528 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxByteNbre;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	699a      	ldr	r2, [r3, #24]
 800251c:	187b      	adds	r3, r7, r1
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	1ad2      	subs	r2, r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	619a      	str	r2, [r3, #24]
 8002526:	e002      	b.n	800252e <HAL_PCD_EP_DB_Transmit+0x3fa>
    }
    else
    {
      ep->xfer_len = 0U;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d000      	beq.n	8002538 <HAL_PCD_EP_DB_Transmit+0x404>
 8002536:	e0c0      	b.n	80026ba <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d125      	bne.n	800258c <HAL_PCD_EP_DB_Transmit+0x458>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2250      	movs	r2, #80	; 0x50
 800254c:	5a9b      	ldrh	r3, [r3, r2]
 800254e:	b29b      	uxth	r3, r3
 8002550:	001a      	movs	r2, r3
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	189b      	adds	r3, r3, r2
 8002556:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00da      	lsls	r2, r3, #3
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002560:	18d3      	adds	r3, r2, r3
 8002562:	4ab1      	ldr	r2, [pc, #708]	; (8002828 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 8002564:	4694      	mov	ip, r2
 8002566:	4463      	add	r3, ip
 8002568:	66bb      	str	r3, [r7, #104]	; 0x68
 800256a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4aae      	ldr	r2, [pc, #696]	; (800282c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002572:	4013      	ands	r3, r2
 8002574:	b29a      	uxth	r2, r3
 8002576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	b29b      	uxth	r3, r3
 8002580:	4aab      	ldr	r2, [pc, #684]	; (8002830 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002582:	4313      	orrs	r3, r2
 8002584:	b29a      	uxth	r2, r3
 8002586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002588:	801a      	strh	r2, [r3, #0]
 800258a:	e01b      	b.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x490>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d117      	bne.n	80025c4 <HAL_PCD_EP_DB_Transmit+0x490>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	677b      	str	r3, [r7, #116]	; 0x74
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2250      	movs	r2, #80	; 0x50
 80025a0:	5a9b      	ldrh	r3, [r3, r2]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	001a      	movs	r2, r3
 80025a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a8:	189b      	adds	r3, r3, r2
 80025aa:	677b      	str	r3, [r7, #116]	; 0x74
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	00da      	lsls	r2, r3, #3
 80025b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025b4:	18d3      	adds	r3, r2, r3
 80025b6:	4a9c      	ldr	r2, [pc, #624]	; (8002828 <HAL_PCD_EP_DB_Transmit+0x6f4>)
 80025b8:	4694      	mov	ip, r2
 80025ba:	4463      	add	r3, ip
 80025bc:	673b      	str	r3, [r7, #112]	; 0x70
 80025be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025c0:	2200      	movs	r2, #0
 80025c2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	785b      	ldrb	r3, [r3, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d130      	bne.n	8002634 <HAL_PCD_EP_DB_Transmit+0x500>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	187a      	adds	r2, r7, r1
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2250      	movs	r2, #80	; 0x50
 80025e2:	5a9b      	ldrh	r3, [r3, r2]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	001a      	movs	r2, r3
 80025e8:	187b      	adds	r3, r7, r1
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	189b      	adds	r3, r3, r2
 80025ee:	187a      	adds	r2, r7, r1
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	00da      	lsls	r2, r3, #3
 80025f8:	187b      	adds	r3, r7, r1
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	18d3      	adds	r3, r2, r3
 80025fe:	4a89      	ldr	r2, [pc, #548]	; (8002824 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 8002600:	4694      	mov	ip, r2
 8002602:	4463      	add	r3, ip
 8002604:	2184      	movs	r1, #132	; 0x84
 8002606:	187a      	adds	r2, r7, r1
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	187b      	adds	r3, r7, r1
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	881b      	ldrh	r3, [r3, #0]
 8002610:	b29b      	uxth	r3, r3
 8002612:	4a86      	ldr	r2, [pc, #536]	; (800282c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 8002614:	4013      	ands	r3, r2
 8002616:	b29a      	uxth	r2, r3
 8002618:	187b      	adds	r3, r7, r1
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	801a      	strh	r2, [r3, #0]
 800261e:	187b      	adds	r3, r7, r1
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4a82      	ldr	r2, [pc, #520]	; (8002830 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	b29a      	uxth	r2, r3
 800262c:	187b      	adds	r3, r7, r1
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	e018      	b.n	8002666 <HAL_PCD_EP_DB_Transmit+0x532>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	785b      	ldrb	r3, [r3, #1]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d114      	bne.n	8002666 <HAL_PCD_EP_DB_Transmit+0x532>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2250      	movs	r2, #80	; 0x50
 8002642:	5a9b      	ldrh	r3, [r3, r2]
 8002644:	b29b      	uxth	r3, r3
 8002646:	001a      	movs	r2, r3
 8002648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800264a:	189b      	adds	r3, r3, r2
 800264c:	67bb      	str	r3, [r7, #120]	; 0x78
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	00da      	lsls	r2, r3, #3
 8002654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002656:	18d3      	adds	r3, r2, r3
 8002658:	4a72      	ldr	r2, [pc, #456]	; (8002824 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 800265a:	4694      	mov	ip, r2
 800265c:	4463      	add	r3, ip
 800265e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002662:	2200      	movs	r2, #0
 8002664:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	781a      	ldrb	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f005 fb54 	bl	8007d1c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002674:	1dbb      	adds	r3, r7, #6
 8002676:	881a      	ldrh	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	01db      	lsls	r3, r3, #7
 800267c:	4013      	ands	r3, r2
 800267e:	d000      	beq.n	8002682 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002680:	e100      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	001a      	movs	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	18d3      	adds	r3, r2, r3
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29a      	uxth	r2, r3
 8002694:	2046      	movs	r0, #70	; 0x46
 8002696:	183b      	adds	r3, r7, r0
 8002698:	4966      	ldr	r1, [pc, #408]	; (8002834 <HAL_PCD_EP_DB_Transmit+0x700>)
 800269a:	400a      	ands	r2, r1
 800269c:	801a      	strh	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	001a      	movs	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	18d3      	adds	r3, r2, r3
 80026ac:	183a      	adds	r2, r7, r0
 80026ae:	8812      	ldrh	r2, [r2, #0]
 80026b0:	4961      	ldr	r1, [pc, #388]	; (8002838 <HAL_PCD_EP_DB_Transmit+0x704>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	b292      	uxth	r2, r2
 80026b6:	801a      	strh	r2, [r3, #0]
 80026b8:	e0e4      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026ba:	1dbb      	adds	r3, r7, #6
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	01db      	lsls	r3, r3, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	d11a      	bne.n	80026fc <HAL_PCD_EP_DB_Transmit+0x5c8>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	001a      	movs	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	18d3      	adds	r3, r2, r3
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	204c      	movs	r0, #76	; 0x4c
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	4955      	ldr	r1, [pc, #340]	; (8002834 <HAL_PCD_EP_DB_Transmit+0x700>)
 80026de:	400a      	ands	r2, r1
 80026e0:	801a      	strh	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	001a      	movs	r2, r3
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	18d3      	adds	r3, r2, r3
 80026f0:	183a      	adds	r2, r7, r0
 80026f2:	8812      	ldrh	r2, [r2, #0]
 80026f4:	4950      	ldr	r1, [pc, #320]	; (8002838 <HAL_PCD_EP_DB_Transmit+0x704>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	b292      	uxth	r2, r2
 80026fa:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	5c9b      	ldrb	r3, [r3, r2]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d000      	beq.n	8002708 <HAL_PCD_EP_DB_Transmit+0x5d4>
 8002706:	e0bd      	b.n	8002884 <HAL_PCD_EP_DB_Transmit+0x750>
      {
        ep->xfer_buff += TxByteNbre;
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	214e      	movs	r1, #78	; 0x4e
 800270e:	187b      	adds	r3, r7, r1
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	18d2      	adds	r2, r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	187b      	adds	r3, r7, r1
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	18d2      	adds	r2, r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6a1a      	ldr	r2, [r3, #32]
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	d309      	bcc.n	8002746 <HAL_PCD_EP_DB_Transmit+0x612>
        {
          len = ep->maxpacket;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6a1a      	ldr	r2, [r3, #32]
 800273c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800273e:	1ad2      	subs	r2, r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	621a      	str	r2, [r3, #32]
 8002744:	e016      	b.n	8002774 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else if (ep->xfer_len_db == 0U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_PCD_EP_DB_Transmit+0x62c>
        {
          len = TxByteNbre;
 800274e:	234e      	movs	r3, #78	; 0x4e
 8002750:	18fb      	adds	r3, r7, r3
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2224      	movs	r2, #36	; 0x24
 800275a:	2100      	movs	r1, #0
 800275c:	5499      	strb	r1, [r3, r2]
 800275e:	e009      	b.n	8002774 <HAL_PCD_EP_DB_Transmit+0x640>
        }
        else
        {
          len = ep->xfer_len_db;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2224      	movs	r2, #36	; 0x24
 8002770:	2100      	movs	r1, #0
 8002772:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	667b      	str	r3, [r7, #100]	; 0x64
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	785b      	ldrb	r3, [r3, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15c      	bne.n	800283c <HAL_PCD_EP_DB_Transmit+0x708>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2250      	movs	r2, #80	; 0x50
 800278e:	5a9b      	ldrh	r3, [r3, r2]
 8002790:	b29b      	uxth	r3, r3
 8002792:	001a      	movs	r2, r3
 8002794:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002796:	189b      	adds	r3, r3, r2
 8002798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027a2:	18d3      	adds	r3, r2, r3
 80027a4:	4a1f      	ldr	r2, [pc, #124]	; (8002824 <HAL_PCD_EP_DB_Transmit+0x6f0>)
 80027a6:	4694      	mov	ip, r2
 80027a8:	4463      	add	r3, ip
 80027aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d110      	bne.n	80027d4 <HAL_PCD_EP_DB_Transmit+0x6a0>
 80027b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_PCD_EP_DB_Transmit+0x6f8>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	b29a      	uxth	r2, r3
 80027be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c0:	801a      	strh	r2, [r3, #0]
 80027c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027d0:	801a      	strh	r2, [r3, #0]
 80027d2:	e04d      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x73c>
 80027d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027d6:	2b3e      	cmp	r3, #62	; 0x3e
 80027d8:	d810      	bhi.n	80027fc <HAL_PCD_EP_DB_Transmit+0x6c8>
 80027da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027dc:	085b      	lsrs	r3, r3, #1
 80027de:	657b      	str	r3, [r7, #84]	; 0x54
 80027e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e2:	2201      	movs	r2, #1
 80027e4:	4013      	ands	r3, r2
 80027e6:	d002      	beq.n	80027ee <HAL_PCD_EP_DB_Transmit+0x6ba>
 80027e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ea:	3301      	adds	r3, #1
 80027ec:	657b      	str	r3, [r7, #84]	; 0x54
 80027ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	029b      	lsls	r3, r3, #10
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027f8:	801a      	strh	r2, [r3, #0]
 80027fa:	e039      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x73c>
 80027fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	657b      	str	r3, [r7, #84]	; 0x54
 8002802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002804:	221f      	movs	r2, #31
 8002806:	4013      	ands	r3, r2
 8002808:	d102      	bne.n	8002810 <HAL_PCD_EP_DB_Transmit+0x6dc>
 800280a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800280c:	3b01      	subs	r3, #1
 800280e:	657b      	str	r3, [r7, #84]	; 0x54
 8002810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002812:	b29b      	uxth	r3, r3
 8002814:	029b      	lsls	r3, r3, #10
 8002816:	b29b      	uxth	r3, r3
 8002818:	4a05      	ldr	r2, [pc, #20]	; (8002830 <HAL_PCD_EP_DB_Transmit+0x6fc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	b29a      	uxth	r2, r3
 800281e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002820:	801a      	strh	r2, [r3, #0]
 8002822:	e025      	b.n	8002870 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002824:	00000406 	.word	0x00000406
 8002828:	00000402 	.word	0x00000402
 800282c:	ffff83ff 	.word	0xffff83ff
 8002830:	ffff8000 	.word	0xffff8000
 8002834:	ffff8f8f 	.word	0xffff8f8f
 8002838:	ffffc080 	.word	0xffffc080
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d115      	bne.n	8002870 <HAL_PCD_EP_DB_Transmit+0x73c>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2250      	movs	r2, #80	; 0x50
 800284a:	5a9b      	ldrh	r3, [r3, r2]
 800284c:	b29b      	uxth	r3, r3
 800284e:	001a      	movs	r2, r3
 8002850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002852:	189b      	adds	r3, r3, r2
 8002854:	667b      	str	r3, [r7, #100]	; 0x64
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	00da      	lsls	r2, r3, #3
 800285c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800285e:	18d3      	adds	r3, r2, r3
 8002860:	4a1e      	ldr	r2, [pc, #120]	; (80028dc <HAL_PCD_EP_DB_Transmit+0x7a8>)
 8002862:	4694      	mov	ip, r2
 8002864:	4463      	add	r3, ip
 8002866:	663b      	str	r3, [r7, #96]	; 0x60
 8002868:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800286a:	b29a      	uxth	r2, r3
 800286c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800286e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	6959      	ldr	r1, [r3, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	895a      	ldrh	r2, [r3, #10]
 800287c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800287e:	b29b      	uxth	r3, r3
 8002880:	f003 fc78 	bl	8006174 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	001a      	movs	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	18d3      	adds	r3, r2, r3
 8002892:	881b      	ldrh	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
 8002896:	2010      	movs	r0, #16
 8002898:	183b      	adds	r3, r7, r0
 800289a:	4911      	ldr	r1, [pc, #68]	; (80028e0 <HAL_PCD_EP_DB_Transmit+0x7ac>)
 800289c:	400a      	ands	r2, r1
 800289e:	801a      	strh	r2, [r3, #0]
 80028a0:	183b      	adds	r3, r7, r0
 80028a2:	183a      	adds	r2, r7, r0
 80028a4:	8812      	ldrh	r2, [r2, #0]
 80028a6:	2110      	movs	r1, #16
 80028a8:	404a      	eors	r2, r1
 80028aa:	801a      	strh	r2, [r3, #0]
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	183a      	adds	r2, r7, r0
 80028b0:	8812      	ldrh	r2, [r2, #0]
 80028b2:	2120      	movs	r1, #32
 80028b4:	404a      	eors	r2, r1
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	001a      	movs	r2, r3
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	18d3      	adds	r3, r2, r3
 80028c6:	183a      	adds	r2, r7, r0
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	4906      	ldr	r1, [pc, #24]	; (80028e4 <HAL_PCD_EP_DB_Transmit+0x7b0>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	b292      	uxth	r2, r2
 80028d0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	0018      	movs	r0, r3
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b022      	add	sp, #136	; 0x88
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00000406 	.word	0x00000406
 80028e0:	ffff8fbf 	.word	0xffff8fbf
 80028e4:	ffff8080 	.word	0xffff8080

080028e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80028e8:	b590      	push	{r4, r7, lr}
 80028ea:	b087      	sub	sp, #28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	0008      	movs	r0, r1
 80028f2:	0011      	movs	r1, r2
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	240a      	movs	r4, #10
 80028f8:	193b      	adds	r3, r7, r4
 80028fa:	1c02      	adds	r2, r0, #0
 80028fc:	801a      	strh	r2, [r3, #0]
 80028fe:	2308      	movs	r3, #8
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	1c0a      	adds	r2, r1, #0
 8002904:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002906:	0021      	movs	r1, r4
 8002908:	187b      	adds	r3, r7, r1
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	4013      	ands	r3, r2
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002916:	187b      	adds	r3, r7, r1
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	2207      	movs	r2, #7
 800291c:	4013      	ands	r3, r2
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	0013      	movs	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	189b      	adds	r3, r3, r2
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	18d3      	adds	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e00b      	b.n	8002948 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002930:	230a      	movs	r3, #10
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	881a      	ldrh	r2, [r3, #0]
 8002936:	0013      	movs	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	189b      	adds	r3, r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	3369      	adds	r3, #105	; 0x69
 8002940:	33ff      	adds	r3, #255	; 0xff
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	18d3      	adds	r3, r2, r3
 8002946:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002948:	2308      	movs	r3, #8
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d107      	bne.n	8002962 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2200      	movs	r2, #0
 8002956:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	b29a      	uxth	r2, r3
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	80da      	strh	r2, [r3, #6]
 8002960:	e00b      	b.n	800297a <HAL_PCDEx_PMAConfig+0x92>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2201      	movs	r2, #1
 8002966:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	b29a      	uxth	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	b29a      	uxth	r2, r3
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	0018      	movs	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	b007      	add	sp, #28
 8002982:	bd90      	pop	{r4, r7, pc}

08002984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	23ba      	movs	r3, #186	; 0xba
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	2101      	movs	r1, #1
 800299a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	23b8      	movs	r3, #184	; 0xb8
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	2100      	movs	r1, #0
 80029a4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2254      	movs	r2, #84	; 0x54
 80029aa:	5a9b      	ldrh	r3, [r3, r2]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2201      	movs	r2, #1
 80029b0:	4313      	orrs	r3, r2
 80029b2:	b299      	uxth	r1, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2254      	movs	r2, #84	; 0x54
 80029b8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2254      	movs	r2, #84	; 0x54
 80029be:	5a9b      	ldrh	r3, [r3, r2]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	2202      	movs	r2, #2
 80029c4:	4313      	orrs	r3, r2
 80029c6:	b299      	uxth	r1, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2254      	movs	r2, #84	; 0x54
 80029cc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	0018      	movs	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	000a      	movs	r2, r1
 80029e2:	1cfb      	adds	r3, r7, #3
 80029e4:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b08a      	sub	sp, #40	; 0x28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f000 fbbf 	bl	8003182 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	4bc9      	ldr	r3, [pc, #804]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	220c      	movs	r2, #12
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0e:	4bc7      	ldr	r3, [pc, #796]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	025b      	lsls	r3, r3, #9
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4013      	ands	r3, r2
 8002a22:	d100      	bne.n	8002a26 <HAL_RCC_OscConfig+0x36>
 8002a24:	e07e      	b.n	8002b24 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d007      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d112      	bne.n	8002a58 <HAL_RCC_OscConfig+0x68>
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	025b      	lsls	r3, r3, #9
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10d      	bne.n	8002a58 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a3c:	4bbb      	ldr	r3, [pc, #748]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	029b      	lsls	r3, r3, #10
 8002a44:	4013      	ands	r3, r2
 8002a46:	d100      	bne.n	8002a4a <HAL_RCC_OscConfig+0x5a>
 8002a48:	e06b      	b.n	8002b22 <HAL_RCC_OscConfig+0x132>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d167      	bne.n	8002b22 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f000 fb95 	bl	8003182 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	2380      	movs	r3, #128	; 0x80
 8002a5e:	025b      	lsls	r3, r3, #9
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x84>
 8002a64:	4bb1      	ldr	r3, [pc, #708]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4bb0      	ldr	r3, [pc, #704]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a6a:	2180      	movs	r1, #128	; 0x80
 8002a6c:	0249      	lsls	r1, r1, #9
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]
 8002a72:	e027      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	23a0      	movs	r3, #160	; 0xa0
 8002a7a:	02db      	lsls	r3, r3, #11
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d10e      	bne.n	8002a9e <HAL_RCC_OscConfig+0xae>
 8002a80:	4baa      	ldr	r3, [pc, #680]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4ba9      	ldr	r3, [pc, #676]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	02c9      	lsls	r1, r1, #11
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	4ba7      	ldr	r3, [pc, #668]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4ba6      	ldr	r3, [pc, #664]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002a94:	2180      	movs	r1, #128	; 0x80
 8002a96:	0249      	lsls	r1, r1, #9
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e012      	b.n	8002ac4 <HAL_RCC_OscConfig+0xd4>
 8002a9e:	4ba3      	ldr	r3, [pc, #652]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	4ba2      	ldr	r3, [pc, #648]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002aa4:	49a2      	ldr	r1, [pc, #648]	; (8002d30 <HAL_RCC_OscConfig+0x340>)
 8002aa6:	400a      	ands	r2, r1
 8002aa8:	601a      	str	r2, [r3, #0]
 8002aaa:	4ba0      	ldr	r3, [pc, #640]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	2380      	movs	r3, #128	; 0x80
 8002ab0:	025b      	lsls	r3, r3, #9
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4b9c      	ldr	r3, [pc, #624]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b9b      	ldr	r3, [pc, #620]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002abe:	499d      	ldr	r1, [pc, #628]	; (8002d34 <HAL_RCC_OscConfig+0x344>)
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002acc:	f7fd fed0 	bl	8000870 <HAL_GetTick>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ad4:	e009      	b.n	8002aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ad6:	f7fd fecb 	bl	8000870 <HAL_GetTick>
 8002ada:	0002      	movs	r2, r0
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d902      	bls.n	8002aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	f000 fb4c 	bl	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aea:	4b90      	ldr	r3, [pc, #576]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	029b      	lsls	r3, r3, #10
 8002af2:	4013      	ands	r3, r2
 8002af4:	d0ef      	beq.n	8002ad6 <HAL_RCC_OscConfig+0xe6>
 8002af6:	e015      	b.n	8002b24 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af8:	f7fd feba 	bl	8000870 <HAL_GetTick>
 8002afc:	0003      	movs	r3, r0
 8002afe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b00:	e008      	b.n	8002b14 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b02:	f7fd feb5 	bl	8000870 <HAL_GetTick>
 8002b06:	0002      	movs	r2, r0
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b64      	cmp	r3, #100	; 0x64
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e336      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b14:	4b85      	ldr	r3, [pc, #532]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d1f0      	bne.n	8002b02 <HAL_RCC_OscConfig+0x112>
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d100      	bne.n	8002b30 <HAL_RCC_OscConfig+0x140>
 8002b2e:	e099      	b.n	8002c64 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b38:	2220      	movs	r2, #32
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002b3e:	4b7b      	ldr	r3, [pc, #492]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	4b7a      	ldr	r3, [pc, #488]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b44:	2120      	movs	r1, #32
 8002b46:	430a      	orrs	r2, r1
 8002b48:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	4393      	bics	r3, r2
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	2b04      	cmp	r3, #4
 8002b56:	d005      	beq.n	8002b64 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d13e      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1ec>
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d13b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002b64:	4b71      	ldr	r3, [pc, #452]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2204      	movs	r2, #4
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_RCC_OscConfig+0x188>
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e304      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b6c      	ldr	r3, [pc, #432]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6e      	ldr	r2, [pc, #440]	; (8002d38 <HAL_RCC_OscConfig+0x348>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	021a      	lsls	r2, r3, #8
 8002b88:	4b68      	ldr	r3, [pc, #416]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002b8e:	4b67      	ldr	r3, [pc, #412]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2209      	movs	r2, #9
 8002b94:	4393      	bics	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	4b64      	ldr	r3, [pc, #400]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba0:	f000 fc42 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8002ba4:	0001      	movs	r1, r0
 8002ba6:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	091b      	lsrs	r3, r3, #4
 8002bac:	220f      	movs	r2, #15
 8002bae:	4013      	ands	r3, r2
 8002bb0:	4a62      	ldr	r2, [pc, #392]	; (8002d3c <HAL_RCC_OscConfig+0x34c>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	40da      	lsrs	r2, r3
 8002bb8:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_OscConfig+0x350>)
 8002bba:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002bbc:	4b61      	ldr	r3, [pc, #388]	; (8002d44 <HAL_RCC_OscConfig+0x354>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2513      	movs	r5, #19
 8002bc2:	197c      	adds	r4, r7, r5
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f7fd fe0d 	bl	80007e4 <HAL_InitTick>
 8002bca:	0003      	movs	r3, r0
 8002bcc:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002bce:	197b      	adds	r3, r7, r5
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d046      	beq.n	8002c64 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002bd6:	197b      	adds	r3, r7, r5
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	e2d2      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d027      	beq.n	8002c32 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002be2:	4b52      	ldr	r3, [pc, #328]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2209      	movs	r2, #9
 8002be8:	4393      	bics	r3, r2
 8002bea:	0019      	movs	r1, r3
 8002bec:	4b4f      	ldr	r3, [pc, #316]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7fd fe3c 	bl	8000870 <HAL_GetTick>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bfe:	f7fd fe37 	bl	8000870 <HAL_GetTick>
 8002c02:	0002      	movs	r2, r0
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e2b8      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c10:	4b46      	ldr	r3, [pc, #280]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2204      	movs	r2, #4
 8002c16:	4013      	ands	r3, r2
 8002c18:	d0f1      	beq.n	8002bfe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <HAL_RCC_OscConfig+0x348>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	021a      	lsls	r2, r3, #8
 8002c2a:	4b40      	ldr	r3, [pc, #256]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
 8002c30:	e018      	b.n	8002c64 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	4b3e      	ldr	r3, [pc, #248]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	438a      	bics	r2, r1
 8002c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3e:	f7fd fe17 	bl	8000870 <HAL_GetTick>
 8002c42:	0003      	movs	r3, r0
 8002c44:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fd fe12 	bl	8000870 <HAL_GetTick>
 8002c4c:	0002      	movs	r2, r0
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e293      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c5a:	4b34      	ldr	r3, [pc, #208]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2204      	movs	r2, #4
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f1      	bne.n	8002c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d100      	bne.n	8002c70 <HAL_RCC_OscConfig+0x280>
 8002c6e:	e0a2      	b.n	8002db6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d140      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c76:	4b2d      	ldr	r3, [pc, #180]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d005      	beq.n	8002c8e <HAL_RCC_OscConfig+0x29e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e279      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c8e:	4b27      	ldr	r3, [pc, #156]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a2d      	ldr	r2, [pc, #180]	; (8002d48 <HAL_RCC_OscConfig+0x358>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c9c:	4b23      	ldr	r3, [pc, #140]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	0a19      	lsrs	r1, r3, #8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a1b      	ldr	r3, [r3, #32]
 8002cae:	061a      	lsls	r2, r3, #24
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	0b5b      	lsrs	r3, r3, #13
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	0212      	lsls	r2, r2, #8
 8002cc2:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002cc4:	4b19      	ldr	r3, [pc, #100]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	210f      	movs	r1, #15
 8002ccc:	400b      	ands	r3, r1
 8002cce:	491b      	ldr	r1, [pc, #108]	; (8002d3c <HAL_RCC_OscConfig+0x34c>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002cd4:	4b1a      	ldr	r3, [pc, #104]	; (8002d40 <HAL_RCC_OscConfig+0x350>)
 8002cd6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCC_OscConfig+0x354>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2513      	movs	r5, #19
 8002cde:	197c      	adds	r4, r7, r5
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fd fd7f 	bl	80007e4 <HAL_InitTick>
 8002ce6:	0003      	movs	r3, r0
 8002ce8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002cea:	197b      	adds	r3, r7, r5
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d061      	beq.n	8002db6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002cf2:	197b      	adds	r3, r7, r5
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	e244      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	69db      	ldr	r3, [r3, #28]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d040      	beq.n	8002d82 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d00:	4b0a      	ldr	r3, [pc, #40]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_OscConfig+0x33c>)
 8002d06:	2180      	movs	r1, #128	; 0x80
 8002d08:	0049      	lsls	r1, r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7fd fdaf 	bl	8000870 <HAL_GetTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d16:	e019      	b.n	8002d4c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d18:	f7fd fdaa 	bl	8000870 <HAL_GetTick>
 8002d1c:	0002      	movs	r2, r0
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d912      	bls.n	8002d4c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e22b      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	fffeffff 	.word	0xfffeffff
 8002d34:	fffbffff 	.word	0xfffbffff
 8002d38:	ffffe0ff 	.word	0xffffe0ff
 8002d3c:	08008380 	.word	0x08008380
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004
 8002d48:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d4c:	4bca      	ldr	r3, [pc, #808]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4013      	ands	r3, r2
 8002d56:	d0df      	beq.n	8002d18 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d58:	4bc7      	ldr	r3, [pc, #796]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4ac7      	ldr	r2, [pc, #796]	; (800307c <HAL_RCC_OscConfig+0x68c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d66:	4bc4      	ldr	r3, [pc, #784]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d6c:	4bc2      	ldr	r3, [pc, #776]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	0a19      	lsrs	r1, r3, #8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	061a      	lsls	r2, r3, #24
 8002d7a:	4bbf      	ldr	r3, [pc, #764]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e019      	b.n	8002db6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d82:	4bbd      	ldr	r3, [pc, #756]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4bbc      	ldr	r3, [pc, #752]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002d88:	49bd      	ldr	r1, [pc, #756]	; (8003080 <HAL_RCC_OscConfig+0x690>)
 8002d8a:	400a      	ands	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8e:	f7fd fd6f 	bl	8000870 <HAL_GetTick>
 8002d92:	0003      	movs	r3, r0
 8002d94:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002d96:	e008      	b.n	8002daa <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d98:	f7fd fd6a 	bl	8000870 <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e1eb      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002daa:	4bb3      	ldr	r3, [pc, #716]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4013      	ands	r3, r2
 8002db4:	d1f0      	bne.n	8002d98 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2208      	movs	r2, #8
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d019      	beq.n	8002dfc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc8:	4bab      	ldr	r3, [pc, #684]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002dca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dcc:	4baa      	ldr	r3, [pc, #680]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd4:	f7fd fd4c 	bl	8000870 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dde:	f7fd fd47 	bl	8000870 <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e1c8      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002df0:	4ba1      	ldr	r3, [pc, #644]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df4:	2202      	movs	r2, #2
 8002df6:	4013      	ands	r3, r2
 8002df8:	d0f1      	beq.n	8002dde <HAL_RCC_OscConfig+0x3ee>
 8002dfa:	e018      	b.n	8002e2e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e00:	4b9d      	ldr	r3, [pc, #628]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e08:	f7fd fd32 	bl	8000870 <HAL_GetTick>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e12:	f7fd fd2d 	bl	8000870 <HAL_GetTick>
 8002e16:	0002      	movs	r2, r0
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1ae      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e24:	4b94      	ldr	r3, [pc, #592]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	d1f1      	bne.n	8002e12 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2204      	movs	r2, #4
 8002e34:	4013      	ands	r3, r2
 8002e36:	d100      	bne.n	8002e3a <HAL_RCC_OscConfig+0x44a>
 8002e38:	e0ae      	b.n	8002f98 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e3a:	2023      	movs	r0, #35	; 0x23
 8002e3c:	183b      	adds	r3, r7, r0
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e42:	4b8d      	ldr	r3, [pc, #564]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e46:	2380      	movs	r3, #128	; 0x80
 8002e48:	055b      	lsls	r3, r3, #21
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	4b8a      	ldr	r3, [pc, #552]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002e50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e52:	4b89      	ldr	r3, [pc, #548]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002e54:	2180      	movs	r1, #128	; 0x80
 8002e56:	0549      	lsls	r1, r1, #21
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002e5c:	183b      	adds	r3, r7, r0
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e62:	4b88      	ldr	r3, [pc, #544]	; (8003084 <HAL_RCC_OscConfig+0x694>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d11a      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6e:	4b85      	ldr	r3, [pc, #532]	; (8003084 <HAL_RCC_OscConfig+0x694>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b84      	ldr	r3, [pc, #528]	; (8003084 <HAL_RCC_OscConfig+0x694>)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0049      	lsls	r1, r1, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7c:	f7fd fcf8 	bl	8000870 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7fd fcf3 	bl	8000870 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b64      	cmp	r3, #100	; 0x64
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e174      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b7a      	ldr	r3, [pc, #488]	; (8003084 <HAL_RCC_OscConfig+0x694>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	2380      	movs	r3, #128	; 0x80
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x4d0>
 8002eb0:	4b71      	ldr	r3, [pc, #452]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002eb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb4:	4b70      	ldr	r3, [pc, #448]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	0049      	lsls	r1, r1, #1
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ebe:	e031      	b.n	8002f24 <HAL_RCC_OscConfig+0x534>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x4f2>
 8002ec8:	4b6b      	ldr	r3, [pc, #428]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002eca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ecc:	4b6a      	ldr	r3, [pc, #424]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002ece:	496c      	ldr	r1, [pc, #432]	; (8003080 <HAL_RCC_OscConfig+0x690>)
 8002ed0:	400a      	ands	r2, r1
 8002ed2:	651a      	str	r2, [r3, #80]	; 0x50
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002ed6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ed8:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002eda:	496b      	ldr	r1, [pc, #428]	; (8003088 <HAL_RCC_OscConfig+0x698>)
 8002edc:	400a      	ands	r2, r1
 8002ede:	651a      	str	r2, [r3, #80]	; 0x50
 8002ee0:	e020      	b.n	8002f24 <HAL_RCC_OscConfig+0x534>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689a      	ldr	r2, [r3, #8]
 8002ee6:	23a0      	movs	r3, #160	; 0xa0
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d10e      	bne.n	8002f0c <HAL_RCC_OscConfig+0x51c>
 8002eee:	4b62      	ldr	r3, [pc, #392]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ef2:	4b61      	ldr	r3, [pc, #388]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002ef4:	2180      	movs	r1, #128	; 0x80
 8002ef6:	00c9      	lsls	r1, r1, #3
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	651a      	str	r2, [r3, #80]	; 0x50
 8002efc:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f00:	4b5d      	ldr	r3, [pc, #372]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	0049      	lsls	r1, r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	651a      	str	r2, [r3, #80]	; 0x50
 8002f0a:	e00b      	b.n	8002f24 <HAL_RCC_OscConfig+0x534>
 8002f0c:	4b5a      	ldr	r3, [pc, #360]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f10:	4b59      	ldr	r3, [pc, #356]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f12:	495b      	ldr	r1, [pc, #364]	; (8003080 <HAL_RCC_OscConfig+0x690>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	651a      	str	r2, [r3, #80]	; 0x50
 8002f18:	4b57      	ldr	r3, [pc, #348]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f1c:	4b56      	ldr	r3, [pc, #344]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f1e:	495a      	ldr	r1, [pc, #360]	; (8003088 <HAL_RCC_OscConfig+0x698>)
 8002f20:	400a      	ands	r2, r1
 8002f22:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d015      	beq.n	8002f58 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2c:	f7fd fca0 	bl	8000870 <HAL_GetTick>
 8002f30:	0003      	movs	r3, r0
 8002f32:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f34:	e009      	b.n	8002f4a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f36:	f7fd fc9b 	bl	8000870 <HAL_GetTick>
 8002f3a:	0002      	movs	r2, r0
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_RCC_OscConfig+0x69c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e11b      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f4a:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0ef      	beq.n	8002f36 <HAL_RCC_OscConfig+0x546>
 8002f56:	e014      	b.n	8002f82 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f58:	f7fd fc8a 	bl	8000870 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f60:	e009      	b.n	8002f76 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f62:	f7fd fc85 	bl	8000870 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	4a47      	ldr	r2, [pc, #284]	; (800308c <HAL_RCC_OscConfig+0x69c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e105      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f76:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d1ef      	bne.n	8002f62 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f82:	2323      	movs	r3, #35	; 0x23
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f90:	4b39      	ldr	r3, [pc, #228]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002f92:	493f      	ldr	r1, [pc, #252]	; (8003090 <HAL_RCC_OscConfig+0x6a0>)
 8002f94:	400a      	ands	r2, r1
 8002f96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d049      	beq.n	8003036 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d026      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002faa:	4b33      	ldr	r3, [pc, #204]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	4b32      	ldr	r3, [pc, #200]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fba:	4b2f      	ldr	r3, [pc, #188]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fc2:	4b34      	ldr	r3, [pc, #208]	; (8003094 <HAL_RCC_OscConfig+0x6a4>)
 8002fc4:	6a1a      	ldr	r2, [r3, #32]
 8002fc6:	4b33      	ldr	r3, [pc, #204]	; (8003094 <HAL_RCC_OscConfig+0x6a4>)
 8002fc8:	2180      	movs	r1, #128	; 0x80
 8002fca:	0189      	lsls	r1, r1, #6
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fd fc4e 	bl	8000870 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fda:	f7fd fc49 	bl	8000870 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0ca      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fec:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d0f1      	beq.n	8002fda <HAL_RCC_OscConfig+0x5ea>
 8002ff6:	e01e      	b.n	8003036 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	4b1e      	ldr	r3, [pc, #120]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8002ffe:	2101      	movs	r1, #1
 8003000:	438a      	bics	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_RCC_OscConfig+0x6a4>)
 8003006:	6a1a      	ldr	r2, [r3, #32]
 8003008:	4b22      	ldr	r3, [pc, #136]	; (8003094 <HAL_RCC_OscConfig+0x6a4>)
 800300a:	4923      	ldr	r1, [pc, #140]	; (8003098 <HAL_RCC_OscConfig+0x6a8>)
 800300c:	400a      	ands	r2, r1
 800300e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fd fc2e 	bl	8000870 <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800301a:	f7fd fc29 	bl	8000870 <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e0aa      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2202      	movs	r2, #2
 8003032:	4013      	ands	r3, r2
 8003034:	d1f1      	bne.n	800301a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	d100      	bne.n	8003040 <HAL_RCC_OscConfig+0x650>
 800303e:	e09f      	b.n	8003180 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b0c      	cmp	r3, #12
 8003044:	d100      	bne.n	8003048 <HAL_RCC_OscConfig+0x658>
 8003046:	e078      	b.n	800313a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	2b02      	cmp	r3, #2
 800304e:	d159      	bne.n	8003104 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4b08      	ldr	r3, [pc, #32]	; (8003078 <HAL_RCC_OscConfig+0x688>)
 8003056:	4911      	ldr	r1, [pc, #68]	; (800309c <HAL_RCC_OscConfig+0x6ac>)
 8003058:	400a      	ands	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fd fc08 	bl	8000870 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003064:	e01c      	b.n	80030a0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003066:	f7fd fc03 	bl	8000870 <HAL_GetTick>
 800306a:	0002      	movs	r2, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d915      	bls.n	80030a0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e084      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
 8003078:	40021000 	.word	0x40021000
 800307c:	ffff1fff 	.word	0xffff1fff
 8003080:	fffffeff 	.word	0xfffffeff
 8003084:	40007000 	.word	0x40007000
 8003088:	fffffbff 	.word	0xfffffbff
 800308c:	00001388 	.word	0x00001388
 8003090:	efffffff 	.word	0xefffffff
 8003094:	40010000 	.word	0x40010000
 8003098:	ffffdfff 	.word	0xffffdfff
 800309c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	049b      	lsls	r3, r3, #18
 80030a8:	4013      	ands	r3, r2
 80030aa:	d1dc      	bne.n	8003066 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ac:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	4a37      	ldr	r2, [pc, #220]	; (8003190 <HAL_RCC_OscConfig+0x7a0>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	431a      	orrs	r2, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c4:	431a      	orrs	r2, r3
 80030c6:	4b31      	ldr	r3, [pc, #196]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 80030c8:	430a      	orrs	r2, r1
 80030ca:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b2f      	ldr	r3, [pc, #188]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b2e      	ldr	r3, [pc, #184]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	0449      	lsls	r1, r1, #17
 80030d6:	430a      	orrs	r2, r1
 80030d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030da:	f7fd fbc9 	bl	8000870 <HAL_GetTick>
 80030de:	0003      	movs	r3, r0
 80030e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e4:	f7fd fbc4 	bl	8000870 <HAL_GetTick>
 80030e8:	0002      	movs	r2, r0
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e045      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80030f6:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	049b      	lsls	r3, r3, #18
 80030fe:	4013      	ands	r3, r2
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x6f4>
 8003102:	e03d      	b.n	8003180 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003104:	4b21      	ldr	r3, [pc, #132]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 800310a:	4922      	ldr	r1, [pc, #136]	; (8003194 <HAL_RCC_OscConfig+0x7a4>)
 800310c:	400a      	ands	r2, r1
 800310e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7fd fbae 	bl	8000870 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311a:	f7fd fba9 	bl	8000870 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e02a      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800312c:	4b17      	ldr	r3, [pc, #92]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	049b      	lsls	r3, r3, #18
 8003134:	4013      	ands	r3, r2
 8003136:	d1f0      	bne.n	800311a <HAL_RCC_OscConfig+0x72a>
 8003138:	e022      	b.n	8003180 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e01d      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003146:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_RCC_OscConfig+0x79c>)
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	025b      	lsls	r3, r3, #9
 8003152:	401a      	ands	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	429a      	cmp	r2, r3
 800315a:	d10f      	bne.n	800317c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	23f0      	movs	r3, #240	; 0xf0
 8003160:	039b      	lsls	r3, r3, #14
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d107      	bne.n	800317c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	23c0      	movs	r3, #192	; 0xc0
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	401a      	ands	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003178:	429a      	cmp	r2, r3
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b00a      	add	sp, #40	; 0x28
 8003188:	bdb0      	pop	{r4, r5, r7, pc}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	40021000 	.word	0x40021000
 8003190:	ff02ffff 	.word	0xff02ffff
 8003194:	feffffff 	.word	0xfeffffff

08003198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003198:	b5b0      	push	{r4, r5, r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e128      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	4b96      	ldr	r3, [pc, #600]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d91e      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ba:	4b93      	ldr	r3, [pc, #588]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	4b90      	ldr	r3, [pc, #576]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031cc:	f7fd fb50 	bl	8000870 <HAL_GetTick>
 80031d0:	0003      	movs	r3, r0
 80031d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031d4:	e009      	b.n	80031ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7fd fb4b 	bl	8000870 <HAL_GetTick>
 80031da:	0002      	movs	r2, r0
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	4a8a      	ldr	r2, [pc, #552]	; (800340c <HAL_RCC_ClockConfig+0x274>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e109      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b87      	ldr	r3, [pc, #540]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2201      	movs	r2, #1
 80031f0:	4013      	ands	r3, r2
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d1ee      	bne.n	80031d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2202      	movs	r2, #2
 80031fe:	4013      	ands	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003202:	4b83      	ldr	r3, [pc, #524]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	22f0      	movs	r2, #240	; 0xf0
 8003208:	4393      	bics	r3, r2
 800320a:	0019      	movs	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	4b7f      	ldr	r3, [pc, #508]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 8003212:	430a      	orrs	r2, r1
 8003214:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2201      	movs	r2, #1
 800321c:	4013      	ands	r3, r2
 800321e:	d100      	bne.n	8003222 <HAL_RCC_ClockConfig+0x8a>
 8003220:	e089      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800322a:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	029b      	lsls	r3, r3, #10
 8003232:	4013      	ands	r3, r2
 8003234:	d120      	bne.n	8003278 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0e1      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d107      	bne.n	8003252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003242:	4b73      	ldr	r3, [pc, #460]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	049b      	lsls	r3, r3, #18
 800324a:	4013      	ands	r3, r2
 800324c:	d114      	bne.n	8003278 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e0d5      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d106      	bne.n	8003268 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800325a:	4b6d      	ldr	r3, [pc, #436]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2204      	movs	r2, #4
 8003260:	4013      	ands	r3, r2
 8003262:	d109      	bne.n	8003278 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0ca      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003268:	4b69      	ldr	r3, [pc, #420]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4013      	ands	r3, r2
 8003272:	d101      	bne.n	8003278 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e0c2      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003278:	4b65      	ldr	r3, [pc, #404]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2203      	movs	r2, #3
 800327e:	4393      	bics	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	4b62      	ldr	r3, [pc, #392]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7fd faf0 	bl	8000870 <HAL_GetTick>
 8003290:	0003      	movs	r3, r0
 8003292:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d111      	bne.n	80032c0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800329c:	e009      	b.n	80032b2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800329e:	f7fd fae7 	bl	8000870 <HAL_GetTick>
 80032a2:	0002      	movs	r2, r0
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	4a58      	ldr	r2, [pc, #352]	; (800340c <HAL_RCC_ClockConfig+0x274>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0a5      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80032b2:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	220c      	movs	r2, #12
 80032b8:	4013      	ands	r3, r2
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d1ef      	bne.n	800329e <HAL_RCC_ClockConfig+0x106>
 80032be:	e03a      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d111      	bne.n	80032ec <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c8:	e009      	b.n	80032de <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fd fad1 	bl	8000870 <HAL_GetTick>
 80032ce:	0002      	movs	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	4a4d      	ldr	r2, [pc, #308]	; (800340c <HAL_RCC_ClockConfig+0x274>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e08f      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032de:	4b4c      	ldr	r3, [pc, #304]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	220c      	movs	r2, #12
 80032e4:	4013      	ands	r3, r2
 80032e6:	2b0c      	cmp	r3, #12
 80032e8:	d1ef      	bne.n	80032ca <HAL_RCC_ClockConfig+0x132>
 80032ea:	e024      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d11b      	bne.n	800332c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f4:	e009      	b.n	800330a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032f6:	f7fd fabb 	bl	8000870 <HAL_GetTick>
 80032fa:	0002      	movs	r2, r0
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	4a42      	ldr	r2, [pc, #264]	; (800340c <HAL_RCC_ClockConfig+0x274>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d901      	bls.n	800330a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e079      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800330a:	4b41      	ldr	r3, [pc, #260]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	220c      	movs	r2, #12
 8003310:	4013      	ands	r3, r2
 8003312:	2b04      	cmp	r3, #4
 8003314:	d1ef      	bne.n	80032f6 <HAL_RCC_ClockConfig+0x15e>
 8003316:	e00e      	b.n	8003336 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fd faaa 	bl	8000870 <HAL_GetTick>
 800331c:	0002      	movs	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	4a3a      	ldr	r2, [pc, #232]	; (800340c <HAL_RCC_ClockConfig+0x274>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d901      	bls.n	800332c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e068      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800332c:	4b38      	ldr	r3, [pc, #224]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	220c      	movs	r2, #12
 8003332:	4013      	ands	r3, r2
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003336:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	2201      	movs	r2, #1
 800333c:	4013      	ands	r3, r2
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d21e      	bcs.n	8003382 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003344:	4b30      	ldr	r3, [pc, #192]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2201      	movs	r2, #1
 800334a:	4393      	bics	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003356:	f7fd fa8b 	bl	8000870 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	e009      	b.n	8003374 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003360:	f7fd fa86 	bl	8000870 <HAL_GetTick>
 8003364:	0002      	movs	r2, r0
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	4a28      	ldr	r2, [pc, #160]	; (800340c <HAL_RCC_ClockConfig+0x274>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d901      	bls.n	8003374 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e044      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003374:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_ClockConfig+0x270>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2201      	movs	r2, #1
 800337a:	4013      	ands	r3, r2
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d1ee      	bne.n	8003360 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2204      	movs	r2, #4
 8003388:	4013      	ands	r3, r2
 800338a:	d009      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a20      	ldr	r2, [pc, #128]	; (8003414 <HAL_RCC_ClockConfig+0x27c>)
 8003392:	4013      	ands	r3, r2
 8003394:	0019      	movs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	4013      	ands	r3, r2
 80033a8:	d00a      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033aa:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	4a1a      	ldr	r2, [pc, #104]	; (8003418 <HAL_RCC_ClockConfig+0x280>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	0019      	movs	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	00da      	lsls	r2, r3, #3
 80033ba:	4b15      	ldr	r3, [pc, #84]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 80033bc:	430a      	orrs	r2, r1
 80033be:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033c0:	f000 f832 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 80033c4:	0001      	movs	r1, r0
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x278>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	091b      	lsrs	r3, r3, #4
 80033cc:	220f      	movs	r2, #15
 80033ce:	4013      	ands	r3, r2
 80033d0:	4a12      	ldr	r2, [pc, #72]	; (800341c <HAL_RCC_ClockConfig+0x284>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	000a      	movs	r2, r1
 80033d6:	40da      	lsrs	r2, r3
 80033d8:	4b11      	ldr	r3, [pc, #68]	; (8003420 <HAL_RCC_ClockConfig+0x288>)
 80033da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80033dc:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_RCC_ClockConfig+0x28c>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	250b      	movs	r5, #11
 80033e2:	197c      	adds	r4, r7, r5
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7fd f9fd 	bl	80007e4 <HAL_InitTick>
 80033ea:	0003      	movs	r3, r0
 80033ec:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80033ee:	197b      	adds	r3, r7, r5
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80033f6:	197b      	adds	r3, r7, r5
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	e000      	b.n	80033fe <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	0018      	movs	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bdb0      	pop	{r4, r5, r7, pc}
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	40022000 	.word	0x40022000
 800340c:	00001388 	.word	0x00001388
 8003410:	40021000 	.word	0x40021000
 8003414:	fffff8ff 	.word	0xfffff8ff
 8003418:	ffffc7ff 	.word	0xffffc7ff
 800341c:	08008380 	.word	0x08008380
 8003420:	20000000 	.word	0x20000000
 8003424:	20000004 	.word	0x20000004

08003428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800342e:	4b4c      	ldr	r3, [pc, #304]	; (8003560 <HAL_RCC_GetSysClockFreq+0x138>)
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003436:	230c      	movs	r3, #12
 8003438:	4013      	ands	r3, r2
 800343a:	2b0c      	cmp	r3, #12
 800343c:	d014      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x40>
 800343e:	d900      	bls.n	8003442 <HAL_RCC_GetSysClockFreq+0x1a>
 8003440:	e07b      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x112>
 8003442:	2b04      	cmp	r3, #4
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x24>
 8003446:	2b08      	cmp	r3, #8
 8003448:	d00b      	beq.n	8003462 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e076      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800344c:	4b44      	ldr	r3, [pc, #272]	; (8003560 <HAL_RCC_GetSysClockFreq+0x138>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2210      	movs	r2, #16
 8003452:	4013      	ands	r3, r2
 8003454:	d002      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003456:	4b43      	ldr	r3, [pc, #268]	; (8003564 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003458:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800345a:	e07c      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800345c:	4b42      	ldr	r3, [pc, #264]	; (8003568 <HAL_RCC_GetSysClockFreq+0x140>)
 800345e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003460:	e079      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003462:	4b42      	ldr	r3, [pc, #264]	; (800356c <HAL_RCC_GetSysClockFreq+0x144>)
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003466:	e076      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	0c9a      	lsrs	r2, r3, #18
 800346c:	230f      	movs	r3, #15
 800346e:	401a      	ands	r2, r3
 8003470:	4b3f      	ldr	r3, [pc, #252]	; (8003570 <HAL_RCC_GetSysClockFreq+0x148>)
 8003472:	5c9b      	ldrb	r3, [r3, r2]
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003478:	0d9a      	lsrs	r2, r3, #22
 800347a:	2303      	movs	r3, #3
 800347c:	4013      	ands	r3, r2
 800347e:	3301      	adds	r3, #1
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003482:	4b37      	ldr	r3, [pc, #220]	; (8003560 <HAL_RCC_GetSysClockFreq+0x138>)
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	2380      	movs	r3, #128	; 0x80
 8003488:	025b      	lsls	r3, r3, #9
 800348a:	4013      	ands	r3, r2
 800348c:	d01a      	beq.n	80034c4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800348e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003490:	61bb      	str	r3, [r7, #24]
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	4a35      	ldr	r2, [pc, #212]	; (800356c <HAL_RCC_GetSysClockFreq+0x144>)
 8003498:	2300      	movs	r3, #0
 800349a:	69b8      	ldr	r0, [r7, #24]
 800349c:	69f9      	ldr	r1, [r7, #28]
 800349e:	f7fc fedf 	bl	8000260 <__aeabi_lmul>
 80034a2:	0002      	movs	r2, r0
 80034a4:	000b      	movs	r3, r1
 80034a6:	0010      	movs	r0, r2
 80034a8:	0019      	movs	r1, r3
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	613b      	str	r3, [r7, #16]
 80034ae:	2300      	movs	r3, #0
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f7fc feb3 	bl	8000220 <__aeabi_uldivmod>
 80034ba:	0002      	movs	r2, r0
 80034bc:	000b      	movs	r3, r1
 80034be:	0013      	movs	r3, r2
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34
 80034c2:	e037      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034c4:	4b26      	ldr	r3, [pc, #152]	; (8003560 <HAL_RCC_GetSysClockFreq+0x138>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2210      	movs	r2, #16
 80034ca:	4013      	ands	r3, r2
 80034cc:	d01a      	beq.n	8003504 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4a23      	ldr	r2, [pc, #140]	; (8003564 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034d8:	2300      	movs	r3, #0
 80034da:	68b8      	ldr	r0, [r7, #8]
 80034dc:	68f9      	ldr	r1, [r7, #12]
 80034de:	f7fc febf 	bl	8000260 <__aeabi_lmul>
 80034e2:	0002      	movs	r2, r0
 80034e4:	000b      	movs	r3, r1
 80034e6:	0010      	movs	r0, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f7fc fe93 	bl	8000220 <__aeabi_uldivmod>
 80034fa:	0002      	movs	r2, r0
 80034fc:	000b      	movs	r3, r1
 80034fe:	0013      	movs	r3, r2
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
 8003502:	e017      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	0018      	movs	r0, r3
 8003508:	2300      	movs	r3, #0
 800350a:	0019      	movs	r1, r3
 800350c:	4a16      	ldr	r2, [pc, #88]	; (8003568 <HAL_RCC_GetSysClockFreq+0x140>)
 800350e:	2300      	movs	r3, #0
 8003510:	f7fc fea6 	bl	8000260 <__aeabi_lmul>
 8003514:	0002      	movs	r2, r0
 8003516:	000b      	movs	r3, r1
 8003518:	0010      	movs	r0, r2
 800351a:	0019      	movs	r1, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	001c      	movs	r4, r3
 8003520:	2300      	movs	r3, #0
 8003522:	001d      	movs	r5, r3
 8003524:	0022      	movs	r2, r4
 8003526:	002b      	movs	r3, r5
 8003528:	f7fc fe7a 	bl	8000220 <__aeabi_uldivmod>
 800352c:	0002      	movs	r2, r0
 800352e:	000b      	movs	r3, r1
 8003530:	0013      	movs	r3, r2
 8003532:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003538:	e00d      	b.n	8003556 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800353a:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_GetSysClockFreq+0x138>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	2207      	movs	r2, #7
 8003542:	4013      	ands	r3, r2
 8003544:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	3301      	adds	r3, #1
 800354a:	2280      	movs	r2, #128	; 0x80
 800354c:	0212      	lsls	r2, r2, #8
 800354e:	409a      	lsls	r2, r3
 8003550:	0013      	movs	r3, r2
 8003552:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003554:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003558:	0018      	movs	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	b00e      	add	sp, #56	; 0x38
 800355e:	bdb0      	pop	{r4, r5, r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	003d0900 	.word	0x003d0900
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200
 8003570:	08008398 	.word	0x08008398

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b02      	ldr	r3, [pc, #8]	; (8003584 <HAL_RCC_GetHCLKFreq+0x10>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	0018      	movs	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	20000000 	.word	0x20000000

08003588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800358c:	f7ff fff2 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003590:	0001      	movs	r1, r0
 8003592:	4b06      	ldr	r3, [pc, #24]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	0a1b      	lsrs	r3, r3, #8
 8003598:	2207      	movs	r2, #7
 800359a:	4013      	ands	r3, r2
 800359c:	4a04      	ldr	r2, [pc, #16]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800359e:	5cd3      	ldrb	r3, [r2, r3]
 80035a0:	40d9      	lsrs	r1, r3
 80035a2:	000b      	movs	r3, r1
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	40021000 	.word	0x40021000
 80035b0:	08008390 	.word	0x08008390

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035b8:	f7ff ffdc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035bc:	0001      	movs	r1, r0
 80035be:	4b06      	ldr	r3, [pc, #24]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	0adb      	lsrs	r3, r3, #11
 80035c4:	2207      	movs	r2, #7
 80035c6:	4013      	ands	r3, r2
 80035c8:	4a04      	ldr	r2, [pc, #16]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035ca:	5cd3      	ldrb	r3, [r2, r3]
 80035cc:	40d9      	lsrs	r1, r3
 80035ce:	000b      	movs	r3, r1
}
 80035d0:	0018      	movs	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	40021000 	.word	0x40021000
 80035dc:	08008390 	.word	0x08008390

080035e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80035e8:	2317      	movs	r3, #23
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	2200      	movs	r2, #0
 80035ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2220      	movs	r2, #32
 80035f6:	4013      	ands	r3, r2
 80035f8:	d106      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	2380      	movs	r3, #128	; 0x80
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	4013      	ands	r3, r2
 8003604:	d100      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003606:	e0d9      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003608:	4ba4      	ldr	r3, [pc, #656]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800360a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800360c:	2380      	movs	r3, #128	; 0x80
 800360e:	055b      	lsls	r3, r3, #21
 8003610:	4013      	ands	r3, r2
 8003612:	d10a      	bne.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003614:	4ba1      	ldr	r3, [pc, #644]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003618:	4ba0      	ldr	r3, [pc, #640]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800361a:	2180      	movs	r1, #128	; 0x80
 800361c:	0549      	lsls	r1, r1, #21
 800361e:	430a      	orrs	r2, r1
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2201      	movs	r2, #1
 8003628:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800362a:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	2380      	movs	r3, #128	; 0x80
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	4013      	ands	r3, r2
 8003634:	d11a      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003636:	4b9a      	ldr	r3, [pc, #616]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b99      	ldr	r3, [pc, #612]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800363c:	2180      	movs	r1, #128	; 0x80
 800363e:	0049      	lsls	r1, r1, #1
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003644:	f7fd f914 	bl	8000870 <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	e008      	b.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800364e:	f7fd f90f 	bl	8000870 <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b64      	cmp	r3, #100	; 0x64
 800365a:	d901      	bls.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e118      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	4b8f      	ldr	r3, [pc, #572]	; (80038a0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	2380      	movs	r3, #128	; 0x80
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4013      	ands	r3, r2
 800366a:	d0f0      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800366c:	4b8b      	ldr	r3, [pc, #556]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	23c0      	movs	r3, #192	; 0xc0
 8003672:	039b      	lsls	r3, r3, #14
 8003674:	4013      	ands	r3, r2
 8003676:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	23c0      	movs	r3, #192	; 0xc0
 800367e:	039b      	lsls	r3, r3, #14
 8003680:	4013      	ands	r3, r2
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	23c0      	movs	r3, #192	; 0xc0
 800368e:	039b      	lsls	r3, r3, #14
 8003690:	4013      	ands	r3, r2
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	429a      	cmp	r2, r3
 8003696:	d013      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685a      	ldr	r2, [r3, #4]
 800369c:	23c0      	movs	r3, #192	; 0xc0
 800369e:	029b      	lsls	r3, r3, #10
 80036a0:	401a      	ands	r2, r3
 80036a2:	23c0      	movs	r3, #192	; 0xc0
 80036a4:	029b      	lsls	r3, r3, #10
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d10a      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80036aa:	4b7c      	ldr	r3, [pc, #496]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	2380      	movs	r3, #128	; 0x80
 80036b0:	029b      	lsls	r3, r3, #10
 80036b2:	401a      	ands	r2, r3
 80036b4:	2380      	movs	r3, #128	; 0x80
 80036b6:	029b      	lsls	r3, r3, #10
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d101      	bne.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0e8      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80036c0:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80036c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80036c4:	23c0      	movs	r3, #192	; 0xc0
 80036c6:	029b      	lsls	r3, r3, #10
 80036c8:	4013      	ands	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d049      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	23c0      	movs	r3, #192	; 0xc0
 80036d8:	029b      	lsls	r3, r3, #10
 80036da:	4013      	ands	r3, r2
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d004      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2220      	movs	r2, #32
 80036e8:	4013      	ands	r3, r2
 80036ea:	d10d      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	029b      	lsls	r3, r3, #10
 80036f4:	4013      	ands	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d034      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	011b      	lsls	r3, r3, #4
 8003704:	4013      	ands	r3, r2
 8003706:	d02e      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003708:	4b64      	ldr	r3, [pc, #400]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800370e:	4013      	ands	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003712:	4b62      	ldr	r3, [pc, #392]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003716:	4b61      	ldr	r3, [pc, #388]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003718:	2180      	movs	r1, #128	; 0x80
 800371a:	0309      	lsls	r1, r1, #12
 800371c:	430a      	orrs	r2, r1
 800371e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003720:	4b5e      	ldr	r3, [pc, #376]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003722:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003724:	4b5d      	ldr	r3, [pc, #372]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003726:	4960      	ldr	r1, [pc, #384]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003728:	400a      	ands	r2, r1
 800372a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800372c:	4b5b      	ldr	r3, [pc, #364]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	4013      	ands	r3, r2
 800373a:	d014      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fd f898 	bl	8000870 <HAL_GetTick>
 8003740:	0003      	movs	r3, r0
 8003742:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003744:	e009      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003746:	f7fd f893 	bl	8000870 <HAL_GetTick>
 800374a:	0002      	movs	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	4a56      	ldr	r2, [pc, #344]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e09b      	b.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800375a:	4b50      	ldr	r3, [pc, #320]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800375c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800375e:	2380      	movs	r3, #128	; 0x80
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4013      	ands	r3, r2
 8003764:	d0ef      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	23c0      	movs	r3, #192	; 0xc0
 800376c:	029b      	lsls	r3, r3, #10
 800376e:	401a      	ands	r2, r3
 8003770:	23c0      	movs	r3, #192	; 0xc0
 8003772:	029b      	lsls	r3, r3, #10
 8003774:	429a      	cmp	r2, r3
 8003776:	d10c      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8003778:	4b48      	ldr	r3, [pc, #288]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a4c      	ldr	r2, [pc, #304]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800377e:	4013      	ands	r3, r2
 8003780:	0019      	movs	r1, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	23c0      	movs	r3, #192	; 0xc0
 8003788:	039b      	lsls	r3, r3, #14
 800378a:	401a      	ands	r2, r3
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800378e:	430a      	orrs	r2, r1
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	4b42      	ldr	r3, [pc, #264]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003794:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	23c0      	movs	r3, #192	; 0xc0
 800379c:	029b      	lsls	r3, r3, #10
 800379e:	401a      	ands	r2, r3
 80037a0:	4b3e      	ldr	r3, [pc, #248]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037a2:	430a      	orrs	r2, r1
 80037a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037a6:	2317      	movs	r3, #23
 80037a8:	18fb      	adds	r3, r7, r3
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d105      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b0:	4b3a      	ldr	r3, [pc, #232]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b4:	4b39      	ldr	r3, [pc, #228]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037b6:	493f      	ldr	r1, [pc, #252]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037b8:	400a      	ands	r2, r1
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	4013      	ands	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037c6:	4b35      	ldr	r3, [pc, #212]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	2203      	movs	r2, #3
 80037cc:	4393      	bics	r3, r2
 80037ce:	0019      	movs	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037d6:	430a      	orrs	r2, r1
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2202      	movs	r2, #2
 80037e0:	4013      	ands	r3, r2
 80037e2:	d009      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037e4:	4b2d      	ldr	r3, [pc, #180]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e8:	220c      	movs	r2, #12
 80037ea:	4393      	bics	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	4b2a      	ldr	r3, [pc, #168]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 80037f4:	430a      	orrs	r2, r1
 80037f6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	d009      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003806:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003808:	4013      	ands	r3, r2
 800380a:	0019      	movs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695a      	ldr	r2, [r3, #20]
 8003810:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003812:	430a      	orrs	r2, r1
 8003814:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2208      	movs	r2, #8
 800381c:	4013      	ands	r3, r2
 800381e:	d009      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003826:	4013      	ands	r3, r2
 8003828:	0019      	movs	r1, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	4b1b      	ldr	r3, [pc, #108]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003830:	430a      	orrs	r2, r1
 8003832:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003840:	4b16      	ldr	r3, [pc, #88]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003844:	4a17      	ldr	r2, [pc, #92]	; (80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003846:	4013      	ands	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003850:	430a      	orrs	r2, r1
 8003852:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	4013      	ands	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800385e:	4b0f      	ldr	r3, [pc, #60]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003862:	4a17      	ldr	r2, [pc, #92]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003864:	4013      	ands	r3, r2
 8003866:	0019      	movs	r1, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800386e:	430a      	orrs	r2, r1
 8003870:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2280      	movs	r2, #128	; 0x80
 8003878:	4013      	ands	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800387e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003880:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003882:	4013      	ands	r3, r2
 8003884:	0019      	movs	r1, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1a      	ldr	r2, [r3, #32]
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800388c:	430a      	orrs	r2, r1
 800388e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	0018      	movs	r0, r3
 8003894:	46bd      	mov	sp, r7
 8003896:	b006      	add	sp, #24
 8003898:	bd80      	pop	{r7, pc}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	40021000 	.word	0x40021000
 80038a0:	40007000 	.word	0x40007000
 80038a4:	fffcffff 	.word	0xfffcffff
 80038a8:	fff7ffff 	.word	0xfff7ffff
 80038ac:	00001388 	.word	0x00001388
 80038b0:	ffcfffff 	.word	0xffcfffff
 80038b4:	efffffff 	.word	0xefffffff
 80038b8:	fffff3ff 	.word	0xfffff3ff
 80038bc:	ffffcfff 	.word	0xffffcfff
 80038c0:	fbffffff 	.word	0xfbffffff
 80038c4:	fff3ffff 	.word	0xfff3ffff

080038c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e044      	b.n	8003964 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d107      	bne.n	80038f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2274      	movs	r2, #116	; 0x74
 80038e6:	2100      	movs	r1, #0
 80038e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f7fc fec1 	bl	8000674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2224      	movs	r2, #36	; 0x24
 80038f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2101      	movs	r1, #1
 8003904:	438a      	bics	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	0018      	movs	r0, r3
 800390c:	f000 f830 	bl	8003970 <UART_SetConfig>
 8003910:	0003      	movs	r3, r0
 8003912:	2b01      	cmp	r3, #1
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e024      	b.n	8003964 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	0018      	movs	r0, r3
 8003926:	f000 fae1 	bl	8003eec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	490d      	ldr	r1, [pc, #52]	; (800396c <HAL_UART_Init+0xa4>)
 8003936:	400a      	ands	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	212a      	movs	r1, #42	; 0x2a
 8003946:	438a      	bics	r2, r1
 8003948:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2101      	movs	r1, #1
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	0018      	movs	r0, r3
 800395e:	f000 fb79 	bl	8004054 <UART_CheckIdleState>
 8003962:	0003      	movs	r3, r0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b002      	add	sp, #8
 800396a:	bd80      	pop	{r7, pc}
 800396c:	ffffb7ff 	.word	0xffffb7ff

08003970 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003970:	b5b0      	push	{r4, r5, r7, lr}
 8003972:	b08e      	sub	sp, #56	; 0x38
 8003974:	af00      	add	r7, sp, #0
 8003976:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003978:	231a      	movs	r3, #26
 800397a:	2218      	movs	r2, #24
 800397c:	4694      	mov	ip, r2
 800397e:	44bc      	add	ip, r7
 8003980:	4463      	add	r3, ip
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	689a      	ldr	r2, [r3, #8]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	431a      	orrs	r2, r3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	431a      	orrs	r2, r3
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	69db      	ldr	r3, [r3, #28]
 800399a:	4313      	orrs	r3, r2
 800399c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4ab0      	ldr	r2, [pc, #704]	; (8003c68 <UART_SetConfig+0x2f8>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	0019      	movs	r1, r3
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039b0:	430a      	orrs	r2, r1
 80039b2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4aac      	ldr	r2, [pc, #688]	; (8003c6c <UART_SetConfig+0x2fc>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4aa6      	ldr	r2, [pc, #664]	; (8003c70 <UART_SetConfig+0x300>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039e2:	4313      	orrs	r3, r2
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4aa1      	ldr	r2, [pc, #644]	; (8003c74 <UART_SetConfig+0x304>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f8:	430a      	orrs	r2, r1
 80039fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a9d      	ldr	r2, [pc, #628]	; (8003c78 <UART_SetConfig+0x308>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d136      	bne.n	8003a74 <UART_SetConfig+0x104>
 8003a06:	4b9d      	ldr	r3, [pc, #628]	; (8003c7c <UART_SetConfig+0x30c>)
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	d020      	beq.n	8003a54 <UART_SetConfig+0xe4>
 8003a12:	d827      	bhi.n	8003a64 <UART_SetConfig+0xf4>
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d00d      	beq.n	8003a34 <UART_SetConfig+0xc4>
 8003a18:	d824      	bhi.n	8003a64 <UART_SetConfig+0xf4>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0xb4>
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d010      	beq.n	8003a44 <UART_SetConfig+0xd4>
 8003a22:	e01f      	b.n	8003a64 <UART_SetConfig+0xf4>
 8003a24:	231b      	movs	r3, #27
 8003a26:	2218      	movs	r2, #24
 8003a28:	4694      	mov	ip, r2
 8003a2a:	44bc      	add	ip, r7
 8003a2c:	4463      	add	r3, ip
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	e0c5      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003a34:	231b      	movs	r3, #27
 8003a36:	2218      	movs	r2, #24
 8003a38:	4694      	mov	ip, r2
 8003a3a:	44bc      	add	ip, r7
 8003a3c:	4463      	add	r3, ip
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e0bd      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003a44:	231b      	movs	r3, #27
 8003a46:	2218      	movs	r2, #24
 8003a48:	4694      	mov	ip, r2
 8003a4a:	44bc      	add	ip, r7
 8003a4c:	4463      	add	r3, ip
 8003a4e:	2204      	movs	r2, #4
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e0b5      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003a54:	231b      	movs	r3, #27
 8003a56:	2218      	movs	r2, #24
 8003a58:	4694      	mov	ip, r2
 8003a5a:	44bc      	add	ip, r7
 8003a5c:	4463      	add	r3, ip
 8003a5e:	2208      	movs	r2, #8
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	e0ad      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003a64:	231b      	movs	r3, #27
 8003a66:	2218      	movs	r2, #24
 8003a68:	4694      	mov	ip, r2
 8003a6a:	44bc      	add	ip, r7
 8003a6c:	4463      	add	r3, ip
 8003a6e:	2210      	movs	r2, #16
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e0a5      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a81      	ldr	r2, [pc, #516]	; (8003c80 <UART_SetConfig+0x310>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d136      	bne.n	8003aec <UART_SetConfig+0x17c>
 8003a7e:	4b7f      	ldr	r3, [pc, #508]	; (8003c7c <UART_SetConfig+0x30c>)
 8003a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a82:	220c      	movs	r2, #12
 8003a84:	4013      	ands	r3, r2
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	d020      	beq.n	8003acc <UART_SetConfig+0x15c>
 8003a8a:	d827      	bhi.n	8003adc <UART_SetConfig+0x16c>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d00d      	beq.n	8003aac <UART_SetConfig+0x13c>
 8003a90:	d824      	bhi.n	8003adc <UART_SetConfig+0x16c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <UART_SetConfig+0x12c>
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d010      	beq.n	8003abc <UART_SetConfig+0x14c>
 8003a9a:	e01f      	b.n	8003adc <UART_SetConfig+0x16c>
 8003a9c:	231b      	movs	r3, #27
 8003a9e:	2218      	movs	r2, #24
 8003aa0:	4694      	mov	ip, r2
 8003aa2:	44bc      	add	ip, r7
 8003aa4:	4463      	add	r3, ip
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	701a      	strb	r2, [r3, #0]
 8003aaa:	e089      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003aac:	231b      	movs	r3, #27
 8003aae:	2218      	movs	r2, #24
 8003ab0:	4694      	mov	ip, r2
 8003ab2:	44bc      	add	ip, r7
 8003ab4:	4463      	add	r3, ip
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	e081      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003abc:	231b      	movs	r3, #27
 8003abe:	2218      	movs	r2, #24
 8003ac0:	4694      	mov	ip, r2
 8003ac2:	44bc      	add	ip, r7
 8003ac4:	4463      	add	r3, ip
 8003ac6:	2204      	movs	r2, #4
 8003ac8:	701a      	strb	r2, [r3, #0]
 8003aca:	e079      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003acc:	231b      	movs	r3, #27
 8003ace:	2218      	movs	r2, #24
 8003ad0:	4694      	mov	ip, r2
 8003ad2:	44bc      	add	ip, r7
 8003ad4:	4463      	add	r3, ip
 8003ad6:	2208      	movs	r2, #8
 8003ad8:	701a      	strb	r2, [r3, #0]
 8003ada:	e071      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003adc:	231b      	movs	r3, #27
 8003ade:	2218      	movs	r2, #24
 8003ae0:	4694      	mov	ip, r2
 8003ae2:	44bc      	add	ip, r7
 8003ae4:	4463      	add	r3, ip
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	701a      	strb	r2, [r3, #0]
 8003aea:	e069      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a64      	ldr	r2, [pc, #400]	; (8003c84 <UART_SetConfig+0x314>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d107      	bne.n	8003b06 <UART_SetConfig+0x196>
 8003af6:	231b      	movs	r3, #27
 8003af8:	2218      	movs	r2, #24
 8003afa:	4694      	mov	ip, r2
 8003afc:	44bc      	add	ip, r7
 8003afe:	4463      	add	r3, ip
 8003b00:	2200      	movs	r2, #0
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e05c      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a5f      	ldr	r2, [pc, #380]	; (8003c88 <UART_SetConfig+0x318>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d107      	bne.n	8003b20 <UART_SetConfig+0x1b0>
 8003b10:	231b      	movs	r3, #27
 8003b12:	2218      	movs	r2, #24
 8003b14:	4694      	mov	ip, r2
 8003b16:	44bc      	add	ip, r7
 8003b18:	4463      	add	r3, ip
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	e04f      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <UART_SetConfig+0x300>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d143      	bne.n	8003bb2 <UART_SetConfig+0x242>
 8003b2a:	4b54      	ldr	r3, [pc, #336]	; (8003c7c <UART_SetConfig+0x30c>)
 8003b2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b2e:	23c0      	movs	r3, #192	; 0xc0
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	4013      	ands	r3, r2
 8003b34:	22c0      	movs	r2, #192	; 0xc0
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d02a      	beq.n	8003b92 <UART_SetConfig+0x222>
 8003b3c:	22c0      	movs	r2, #192	; 0xc0
 8003b3e:	0112      	lsls	r2, r2, #4
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d82e      	bhi.n	8003ba2 <UART_SetConfig+0x232>
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	0112      	lsls	r2, r2, #4
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d012      	beq.n	8003b72 <UART_SetConfig+0x202>
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	0112      	lsls	r2, r2, #4
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d826      	bhi.n	8003ba2 <UART_SetConfig+0x232>
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d004      	beq.n	8003b62 <UART_SetConfig+0x1f2>
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	00d2      	lsls	r2, r2, #3
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d010      	beq.n	8003b82 <UART_SetConfig+0x212>
 8003b60:	e01f      	b.n	8003ba2 <UART_SetConfig+0x232>
 8003b62:	231b      	movs	r3, #27
 8003b64:	2218      	movs	r2, #24
 8003b66:	4694      	mov	ip, r2
 8003b68:	44bc      	add	ip, r7
 8003b6a:	4463      	add	r3, ip
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
 8003b70:	e026      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003b72:	231b      	movs	r3, #27
 8003b74:	2218      	movs	r2, #24
 8003b76:	4694      	mov	ip, r2
 8003b78:	44bc      	add	ip, r7
 8003b7a:	4463      	add	r3, ip
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e01e      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003b82:	231b      	movs	r3, #27
 8003b84:	2218      	movs	r2, #24
 8003b86:	4694      	mov	ip, r2
 8003b88:	44bc      	add	ip, r7
 8003b8a:	4463      	add	r3, ip
 8003b8c:	2204      	movs	r2, #4
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e016      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	4694      	mov	ip, r2
 8003b98:	44bc      	add	ip, r7
 8003b9a:	4463      	add	r3, ip
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	e00e      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003ba2:	231b      	movs	r3, #27
 8003ba4:	2218      	movs	r2, #24
 8003ba6:	4694      	mov	ip, r2
 8003ba8:	44bc      	add	ip, r7
 8003baa:	4463      	add	r3, ip
 8003bac:	2210      	movs	r2, #16
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e006      	b.n	8003bc0 <UART_SetConfig+0x250>
 8003bb2:	231b      	movs	r3, #27
 8003bb4:	2218      	movs	r2, #24
 8003bb6:	4694      	mov	ip, r2
 8003bb8:	44bc      	add	ip, r7
 8003bba:	4463      	add	r3, ip
 8003bbc:	2210      	movs	r2, #16
 8003bbe:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a2a      	ldr	r2, [pc, #168]	; (8003c70 <UART_SetConfig+0x300>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d000      	beq.n	8003bcc <UART_SetConfig+0x25c>
 8003bca:	e09e      	b.n	8003d0a <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bcc:	231b      	movs	r3, #27
 8003bce:	2218      	movs	r2, #24
 8003bd0:	4694      	mov	ip, r2
 8003bd2:	44bc      	add	ip, r7
 8003bd4:	4463      	add	r3, ip
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b08      	cmp	r3, #8
 8003bda:	d01d      	beq.n	8003c18 <UART_SetConfig+0x2a8>
 8003bdc:	dc20      	bgt.n	8003c20 <UART_SetConfig+0x2b0>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d015      	beq.n	8003c0e <UART_SetConfig+0x29e>
 8003be2:	dc1d      	bgt.n	8003c20 <UART_SetConfig+0x2b0>
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <UART_SetConfig+0x27e>
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d005      	beq.n	8003bf8 <UART_SetConfig+0x288>
 8003bec:	e018      	b.n	8003c20 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bee:	f7ff fccb 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8003bf2:	0003      	movs	r3, r0
 8003bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003bf6:	e01d      	b.n	8003c34 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bf8:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <UART_SetConfig+0x30c>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2210      	movs	r2, #16
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d002      	beq.n	8003c08 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <UART_SetConfig+0x31c>)
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c06:	e015      	b.n	8003c34 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <UART_SetConfig+0x320>)
 8003c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c0c:	e012      	b.n	8003c34 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7ff fc0b 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8003c12:	0003      	movs	r3, r0
 8003c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c16:	e00d      	b.n	8003c34 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c1e:	e009      	b.n	8003c34 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c24:	231a      	movs	r3, #26
 8003c26:	2218      	movs	r2, #24
 8003c28:	4694      	mov	ip, r2
 8003c2a:	44bc      	add	ip, r7
 8003c2c:	4463      	add	r3, ip
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
        break;
 8003c32:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d100      	bne.n	8003c3c <UART_SetConfig+0x2cc>
 8003c3a:	e13c      	b.n	8003eb6 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	0013      	movs	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	189b      	adds	r3, r3, r2
 8003c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d305      	bcc.n	8003c58 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d91d      	bls.n	8003c94 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8003c58:	231a      	movs	r3, #26
 8003c5a:	2218      	movs	r2, #24
 8003c5c:	4694      	mov	ip, r2
 8003c5e:	44bc      	add	ip, r7
 8003c60:	4463      	add	r3, ip
 8003c62:	2201      	movs	r2, #1
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e126      	b.n	8003eb6 <UART_SetConfig+0x546>
 8003c68:	efff69f3 	.word	0xefff69f3
 8003c6c:	ffffcfff 	.word	0xffffcfff
 8003c70:	40004800 	.word	0x40004800
 8003c74:	fffff4ff 	.word	0xfffff4ff
 8003c78:	40013800 	.word	0x40013800
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40004400 	.word	0x40004400
 8003c84:	40004c00 	.word	0x40004c00
 8003c88:	40005000 	.word	0x40005000
 8003c8c:	003d0900 	.word	0x003d0900
 8003c90:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	6939      	ldr	r1, [r7, #16]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	000b      	movs	r3, r1
 8003ca2:	0e1b      	lsrs	r3, r3, #24
 8003ca4:	0010      	movs	r0, r2
 8003ca6:	0205      	lsls	r5, r0, #8
 8003ca8:	431d      	orrs	r5, r3
 8003caa:	000b      	movs	r3, r1
 8003cac:	021c      	lsls	r4, r3, #8
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	60bb      	str	r3, [r7, #8]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	68b8      	ldr	r0, [r7, #8]
 8003cbc:	68f9      	ldr	r1, [r7, #12]
 8003cbe:	1900      	adds	r0, r0, r4
 8003cc0:	4169      	adcs	r1, r5
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f7fc faa6 	bl	8000220 <__aeabi_uldivmod>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	000b      	movs	r3, r1
 8003cd8:	0013      	movs	r3, r2
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cde:	23c0      	movs	r3, #192	; 0xc0
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d309      	bcc.n	8003cfa <UART_SetConfig+0x38a>
 8003ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	035b      	lsls	r3, r3, #13
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d204      	bcs.n	8003cfa <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cf6:	60da      	str	r2, [r3, #12]
 8003cf8:	e0dd      	b.n	8003eb6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8003cfa:	231a      	movs	r3, #26
 8003cfc:	2218      	movs	r2, #24
 8003cfe:	4694      	mov	ip, r2
 8003d00:	44bc      	add	ip, r7
 8003d02:	4463      	add	r3, ip
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
 8003d08:	e0d5      	b.n	8003eb6 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d000      	beq.n	8003d18 <UART_SetConfig+0x3a8>
 8003d16:	e074      	b.n	8003e02 <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8003d18:	231b      	movs	r3, #27
 8003d1a:	2218      	movs	r2, #24
 8003d1c:	4694      	mov	ip, r2
 8003d1e:	44bc      	add	ip, r7
 8003d20:	4463      	add	r3, ip
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d822      	bhi.n	8003d6e <UART_SetConfig+0x3fe>
 8003d28:	009a      	lsls	r2, r3, #2
 8003d2a:	4b6b      	ldr	r3, [pc, #428]	; (8003ed8 <UART_SetConfig+0x568>)
 8003d2c:	18d3      	adds	r3, r2, r3
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7ff fc29 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8003d36:	0003      	movs	r3, r0
 8003d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d3a:	e022      	b.n	8003d82 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7ff fc3a 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8003d40:	0003      	movs	r3, r0
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d44:	e01d      	b.n	8003d82 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d46:	4b65      	ldr	r3, [pc, #404]	; (8003edc <UART_SetConfig+0x56c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2210      	movs	r2, #16
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	d002      	beq.n	8003d56 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d50:	4b63      	ldr	r3, [pc, #396]	; (8003ee0 <UART_SetConfig+0x570>)
 8003d52:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d54:	e015      	b.n	8003d82 <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8003d56:	4b63      	ldr	r3, [pc, #396]	; (8003ee4 <UART_SetConfig+0x574>)
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d5a:	e012      	b.n	8003d82 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5c:	f7ff fb64 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8003d60:	0003      	movs	r3, r0
 8003d62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d64:	e00d      	b.n	8003d82 <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	021b      	lsls	r3, r3, #8
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d6c:	e009      	b.n	8003d82 <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d72:	231a      	movs	r3, #26
 8003d74:	2218      	movs	r2, #24
 8003d76:	4694      	mov	ip, r2
 8003d78:	44bc      	add	ip, r7
 8003d7a:	4463      	add	r3, ip
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
        break;
 8003d80:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d100      	bne.n	8003d8a <UART_SetConfig+0x41a>
 8003d88:	e095      	b.n	8003eb6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d8c:	005a      	lsls	r2, r3, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	18d2      	adds	r2, r2, r3
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	0010      	movs	r0, r2
 8003d9e:	f7fc f9b3 	bl	8000108 <__udivsi3>
 8003da2:	0003      	movs	r3, r0
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003daa:	2b0f      	cmp	r3, #15
 8003dac:	d921      	bls.n	8003df2 <UART_SetConfig+0x482>
 8003dae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	025b      	lsls	r3, r3, #9
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d21c      	bcs.n	8003df2 <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	200e      	movs	r0, #14
 8003dbe:	2418      	movs	r4, #24
 8003dc0:	193b      	adds	r3, r7, r4
 8003dc2:	181b      	adds	r3, r3, r0
 8003dc4:	210f      	movs	r1, #15
 8003dc6:	438a      	bics	r2, r1
 8003dc8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dcc:	085b      	lsrs	r3, r3, #1
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2207      	movs	r2, #7
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	b299      	uxth	r1, r3
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	181b      	adds	r3, r3, r0
 8003dda:	193a      	adds	r2, r7, r4
 8003ddc:	1812      	adds	r2, r2, r0
 8003dde:	8812      	ldrh	r2, [r2, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	193a      	adds	r2, r7, r4
 8003dea:	1812      	adds	r2, r2, r0
 8003dec:	8812      	ldrh	r2, [r2, #0]
 8003dee:	60da      	str	r2, [r3, #12]
 8003df0:	e061      	b.n	8003eb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003df2:	231a      	movs	r3, #26
 8003df4:	2218      	movs	r2, #24
 8003df6:	4694      	mov	ip, r2
 8003df8:	44bc      	add	ip, r7
 8003dfa:	4463      	add	r3, ip
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e059      	b.n	8003eb6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e02:	231b      	movs	r3, #27
 8003e04:	2218      	movs	r2, #24
 8003e06:	4694      	mov	ip, r2
 8003e08:	44bc      	add	ip, r7
 8003e0a:	4463      	add	r3, ip
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d822      	bhi.n	8003e58 <UART_SetConfig+0x4e8>
 8003e12:	009a      	lsls	r2, r3, #2
 8003e14:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <UART_SetConfig+0x578>)
 8003e16:	18d3      	adds	r3, r2, r3
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7ff fbb4 	bl	8003588 <HAL_RCC_GetPCLK1Freq>
 8003e20:	0003      	movs	r3, r0
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e24:	e022      	b.n	8003e6c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e26:	f7ff fbc5 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8003e2a:	0003      	movs	r3, r0
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e2e:	e01d      	b.n	8003e6c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e30:	4b2a      	ldr	r3, [pc, #168]	; (8003edc <UART_SetConfig+0x56c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	4013      	ands	r3, r2
 8003e38:	d002      	beq.n	8003e40 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e3a:	4b29      	ldr	r3, [pc, #164]	; (8003ee0 <UART_SetConfig+0x570>)
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e3e:	e015      	b.n	8003e6c <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8003e40:	4b28      	ldr	r3, [pc, #160]	; (8003ee4 <UART_SetConfig+0x574>)
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e44:	e012      	b.n	8003e6c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e46:	f7ff faef 	bl	8003428 <HAL_RCC_GetSysClockFreq>
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e4e:	e00d      	b.n	8003e6c <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e50:	2380      	movs	r3, #128	; 0x80
 8003e52:	021b      	lsls	r3, r3, #8
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e56:	e009      	b.n	8003e6c <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003e5c:	231a      	movs	r3, #26
 8003e5e:	2218      	movs	r2, #24
 8003e60:	4694      	mov	ip, r2
 8003e62:	44bc      	add	ip, r7
 8003e64:	4463      	add	r3, ip
 8003e66:	2201      	movs	r2, #1
 8003e68:	701a      	strb	r2, [r3, #0]
        break;
 8003e6a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d021      	beq.n	8003eb6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	085a      	lsrs	r2, r3, #1
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	18d2      	adds	r2, r2, r3
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	0019      	movs	r1, r3
 8003e82:	0010      	movs	r0, r2
 8003e84:	f7fc f940 	bl	8000108 <__udivsi3>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	2b0f      	cmp	r3, #15
 8003e92:	d909      	bls.n	8003ea8 <UART_SetConfig+0x538>
 8003e94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d204      	bcs.n	8003ea8 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ea4:	60da      	str	r2, [r3, #12]
 8003ea6:	e006      	b.n	8003eb6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003ea8:	231a      	movs	r3, #26
 8003eaa:	2218      	movs	r2, #24
 8003eac:	4694      	mov	ip, r2
 8003eae:	44bc      	add	ip, r7
 8003eb0:	4463      	add	r3, ip
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ec2:	231a      	movs	r3, #26
 8003ec4:	2218      	movs	r2, #24
 8003ec6:	4694      	mov	ip, r2
 8003ec8:	44bc      	add	ip, r7
 8003eca:	4463      	add	r3, ip
 8003ecc:	781b      	ldrb	r3, [r3, #0]
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b00e      	add	sp, #56	; 0x38
 8003ed4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	080083a4 	.word	0x080083a4
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	003d0900 	.word	0x003d0900
 8003ee4:	00f42400 	.word	0x00f42400
 8003ee8:	080083c8 	.word	0x080083c8

08003eec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	2201      	movs	r2, #1
 8003efa:	4013      	ands	r3, r2
 8003efc:	d00b      	beq.n	8003f16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <UART_AdvFeatureConfig+0x144>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	0019      	movs	r1, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	d00b      	beq.n	8003f38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	4a43      	ldr	r2, [pc, #268]	; (8004034 <UART_AdvFeatureConfig+0x148>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	0019      	movs	r1, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d00b      	beq.n	8003f5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <UART_AdvFeatureConfig+0x14c>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	0019      	movs	r1, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	2208      	movs	r2, #8
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	4a34      	ldr	r2, [pc, #208]	; (800403c <UART_AdvFeatureConfig+0x150>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2210      	movs	r2, #16
 8003f82:	4013      	ands	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	4a2c      	ldr	r2, [pc, #176]	; (8004040 <UART_AdvFeatureConfig+0x154>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	0019      	movs	r1, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d00b      	beq.n	8003fc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	4a25      	ldr	r2, [pc, #148]	; (8004044 <UART_AdvFeatureConfig+0x158>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	2240      	movs	r2, #64	; 0x40
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d01d      	beq.n	8004006 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <UART_AdvFeatureConfig+0x15c>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	0019      	movs	r1, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003fe6:	2380      	movs	r3, #128	; 0x80
 8003fe8:	035b      	lsls	r3, r3, #13
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d10b      	bne.n	8004006 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	4a15      	ldr	r2, [pc, #84]	; (800404c <UART_AdvFeatureConfig+0x160>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	430a      	orrs	r2, r1
 8004004:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	4013      	ands	r3, r2
 800400e:	d00b      	beq.n	8004028 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <UART_AdvFeatureConfig+0x164>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
  }
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}
 8004030:	fffdffff 	.word	0xfffdffff
 8004034:	fffeffff 	.word	0xfffeffff
 8004038:	fffbffff 	.word	0xfffbffff
 800403c:	ffff7fff 	.word	0xffff7fff
 8004040:	ffffefff 	.word	0xffffefff
 8004044:	ffffdfff 	.word	0xffffdfff
 8004048:	ffefffff 	.word	0xffefffff
 800404c:	ff9fffff 	.word	0xff9fffff
 8004050:	fff7ffff 	.word	0xfff7ffff

08004054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af02      	add	r7, sp, #8
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	2100      	movs	r1, #0
 8004062:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004064:	f7fc fc04 	bl	8000870 <HAL_GetTick>
 8004068:	0003      	movs	r3, r0
 800406a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2208      	movs	r2, #8
 8004074:	4013      	ands	r3, r2
 8004076:	2b08      	cmp	r3, #8
 8004078:	d10c      	bne.n	8004094 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2280      	movs	r2, #128	; 0x80
 800407e:	0391      	lsls	r1, r2, #14
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <UART_CheckIdleState+0x8c>)
 8004084:	9200      	str	r2, [sp, #0]
 8004086:	2200      	movs	r2, #0
 8004088:	f000 f82c 	bl	80040e4 <UART_WaitOnFlagUntilTimeout>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e021      	b.n	80040d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2204      	movs	r2, #4
 800409c:	4013      	ands	r3, r2
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d10c      	bne.n	80040bc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2280      	movs	r2, #128	; 0x80
 80040a6:	03d1      	lsls	r1, r2, #15
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	4a0d      	ldr	r2, [pc, #52]	; (80040e0 <UART_CheckIdleState+0x8c>)
 80040ac:	9200      	str	r2, [sp, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f000 f818 	bl	80040e4 <UART_WaitOnFlagUntilTimeout>
 80040b4:	1e03      	subs	r3, r0, #0
 80040b6:	d001      	beq.n	80040bc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e00d      	b.n	80040d8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2274      	movs	r2, #116	; 0x74
 80040d2:	2100      	movs	r1, #0
 80040d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	01ffffff 	.word	0x01ffffff

080040e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b094      	sub	sp, #80	; 0x50
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	1dfb      	adds	r3, r7, #7
 80040f2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	e0a3      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80040f8:	3301      	adds	r3, #1
 80040fa:	d100      	bne.n	80040fe <UART_WaitOnFlagUntilTimeout+0x1a>
 80040fc:	e09f      	b.n	800423e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fe:	f7fc fbb7 	bl	8000870 <HAL_GetTick>
 8004102:	0002      	movs	r2, r0
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800410a:	429a      	cmp	r2, r3
 800410c:	d302      	bcc.n	8004114 <UART_WaitOnFlagUntilTimeout+0x30>
 800410e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004110:	2b00      	cmp	r3, #0
 8004112:	d13d      	bne.n	8004190 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004114:	f3ef 8310 	mrs	r3, PRIMASK
 8004118:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800411c:	647b      	str	r3, [r7, #68]	; 0x44
 800411e:	2301      	movs	r3, #1
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004124:	f383 8810 	msr	PRIMASK, r3
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	494c      	ldr	r1, [pc, #304]	; (8004268 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800413c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	f383 8810 	msr	PRIMASK, r3
}
 8004144:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	643b      	str	r3, [r7, #64]	; 0x40
 8004150:	2301      	movs	r3, #1
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2274      	movs	r2, #116	; 0x74
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e067      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2204      	movs	r2, #4
 8004198:	4013      	ands	r3, r2
 800419a:	d050      	beq.n	800423e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	2380      	movs	r3, #128	; 0x80
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	401a      	ands	r2, r3
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d146      	bne.n	800423e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	0112      	lsls	r2, r2, #4
 80041b8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	613b      	str	r3, [r7, #16]
  return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	2301      	movs	r3, #1
 80041c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4923      	ldr	r1, [pc, #140]	; (8004268 <UART_WaitOnFlagUntilTimeout+0x184>)
 80041dc:	400a      	ands	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f383 8810 	msr	PRIMASK, r3
}
 80041ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ec:	f3ef 8310 	mrs	r3, PRIMASK
 80041f0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041f2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f6:	2301      	movs	r3, #1
 80041f8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2101      	movs	r1, #1
 800420e:	438a      	bics	r2, r1
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	f383 8810 	msr	PRIMASK, r3
}
 800421c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2220      	movs	r2, #32
 8004222:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2280      	movs	r2, #128	; 0x80
 800422e:	2120      	movs	r1, #32
 8004230:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2274      	movs	r2, #116	; 0x74
 8004236:	2100      	movs	r1, #0
 8004238:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e010      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	68ba      	ldr	r2, [r7, #8]
 8004246:	4013      	ands	r3, r2
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	425a      	negs	r2, r3
 800424e:	4153      	adcs	r3, r2
 8004250:	b2db      	uxtb	r3, r3
 8004252:	001a      	movs	r2, r3
 8004254:	1dfb      	adds	r3, r7, #7
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d100      	bne.n	800425e <UART_WaitOnFlagUntilTimeout+0x17a>
 800425c:	e74b      	b.n	80040f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b014      	add	sp, #80	; 0x50
 8004266:	bd80      	pop	{r7, pc}
 8004268:	fffffe5f 	.word	0xfffffe5f

0800426c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2244      	movs	r2, #68	; 0x44
 8004278:	2100      	movs	r1, #0
 800427a:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <USB_EnableGlobalInt+0x28>)
 800427e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	b299      	uxth	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2240      	movs	r2, #64	; 0x40
 8004288:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b004      	add	sp, #16
 8004292:	bd80      	pop	{r7, pc}
 8004294:	0000bf80 	.word	0x0000bf80

08004298 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <USB_DisableGlobalInt+0x30>)
 80042a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2240      	movs	r2, #64	; 0x40
 80042a8:	5a9b      	ldrh	r3, [r3, r2]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	b292      	uxth	r2, r2
 80042b0:	43d2      	mvns	r2, r2
 80042b2:	b292      	uxth	r2, r2
 80042b4:	4013      	ands	r3, r2
 80042b6:	b299      	uxth	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b004      	add	sp, #16
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	0000bf80 	.word	0x0000bf80

080042cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80042cc:	b084      	sub	sp, #16
 80042ce:	b590      	push	{r4, r7, lr}
 80042d0:	46c6      	mov	lr, r8
 80042d2:	b500      	push	{lr}
 80042d4:	b082      	sub	sp, #8
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	2004      	movs	r0, #4
 80042dc:	2410      	movs	r4, #16
 80042de:	46a4      	mov	ip, r4
 80042e0:	2408      	movs	r4, #8
 80042e2:	46a0      	mov	r8, r4
 80042e4:	44b8      	add	r8, r7
 80042e6:	44c4      	add	ip, r8
 80042e8:	4460      	add	r0, ip
 80042ea:	6001      	str	r1, [r0, #0]
 80042ec:	6042      	str	r2, [r0, #4]
 80042ee:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2240      	movs	r2, #64	; 0x40
 80042f4:	2101      	movs	r1, #1
 80042f6:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2240      	movs	r2, #64	; 0x40
 80042fc:	2100      	movs	r1, #0
 80042fe:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2244      	movs	r2, #68	; 0x44
 8004304:	2100      	movs	r1, #0
 8004306:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2250      	movs	r2, #80	; 0x50
 800430c:	2100      	movs	r1, #0
 800430e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bc80      	pop	{r7}
 800431a:	46b8      	mov	r8, r7
 800431c:	bc90      	pop	{r4, r7}
 800431e:	bc08      	pop	{r3}
 8004320:	b004      	add	sp, #16
 8004322:	4718      	bx	r3

08004324 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b09c      	sub	sp, #112	; 0x70
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800432e:	236f      	movs	r3, #111	; 0x6f
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2200      	movs	r2, #0
 8004334:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	18d3      	adds	r3, r2, r3
 8004340:	881b      	ldrh	r3, [r3, #0]
 8004342:	b29a      	uxth	r2, r3
 8004344:	236c      	movs	r3, #108	; 0x6c
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	49cf      	ldr	r1, [pc, #828]	; (8004688 <USB_ActivateEndpoint+0x364>)
 800434a:	400a      	ands	r2, r1
 800434c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	78db      	ldrb	r3, [r3, #3]
 8004352:	2b03      	cmp	r3, #3
 8004354:	d017      	beq.n	8004386 <USB_ActivateEndpoint+0x62>
 8004356:	dc28      	bgt.n	80043aa <USB_ActivateEndpoint+0x86>
 8004358:	2b02      	cmp	r3, #2
 800435a:	d00e      	beq.n	800437a <USB_ActivateEndpoint+0x56>
 800435c:	dc25      	bgt.n	80043aa <USB_ActivateEndpoint+0x86>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <USB_ActivateEndpoint+0x44>
 8004362:	2b01      	cmp	r3, #1
 8004364:	d018      	beq.n	8004398 <USB_ActivateEndpoint+0x74>
 8004366:	e020      	b.n	80043aa <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004368:	226c      	movs	r2, #108	; 0x6c
 800436a:	18bb      	adds	r3, r7, r2
 800436c:	18ba      	adds	r2, r7, r2
 800436e:	8812      	ldrh	r2, [r2, #0]
 8004370:	2180      	movs	r1, #128	; 0x80
 8004372:	0089      	lsls	r1, r1, #2
 8004374:	430a      	orrs	r2, r1
 8004376:	801a      	strh	r2, [r3, #0]
      break;
 8004378:	e01c      	b.n	80043b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800437a:	226c      	movs	r2, #108	; 0x6c
 800437c:	18bb      	adds	r3, r7, r2
 800437e:	18ba      	adds	r2, r7, r2
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	801a      	strh	r2, [r3, #0]
      break;
 8004384:	e016      	b.n	80043b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004386:	226c      	movs	r2, #108	; 0x6c
 8004388:	18bb      	adds	r3, r7, r2
 800438a:	18ba      	adds	r2, r7, r2
 800438c:	8812      	ldrh	r2, [r2, #0]
 800438e:	21c0      	movs	r1, #192	; 0xc0
 8004390:	00c9      	lsls	r1, r1, #3
 8004392:	430a      	orrs	r2, r1
 8004394:	801a      	strh	r2, [r3, #0]
      break;
 8004396:	e00d      	b.n	80043b4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004398:	226c      	movs	r2, #108	; 0x6c
 800439a:	18bb      	adds	r3, r7, r2
 800439c:	18ba      	adds	r2, r7, r2
 800439e:	8812      	ldrh	r2, [r2, #0]
 80043a0:	2180      	movs	r1, #128	; 0x80
 80043a2:	00c9      	lsls	r1, r1, #3
 80043a4:	430a      	orrs	r2, r1
 80043a6:	801a      	strh	r2, [r3, #0]
      break;
 80043a8:	e004      	b.n	80043b4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80043aa:	236f      	movs	r3, #111	; 0x6f
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	2201      	movs	r2, #1
 80043b0:	701a      	strb	r2, [r3, #0]
      break;
 80043b2:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	18d3      	adds	r3, r2, r3
 80043be:	226c      	movs	r2, #108	; 0x6c
 80043c0:	18ba      	adds	r2, r7, r2
 80043c2:	8812      	ldrh	r2, [r2, #0]
 80043c4:	49b1      	ldr	r1, [pc, #708]	; (800468c <USB_ActivateEndpoint+0x368>)
 80043c6:	430a      	orrs	r2, r1
 80043c8:	b292      	uxth	r2, r2
 80043ca:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	18d3      	adds	r3, r2, r3
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b21b      	sxth	r3, r3
 80043dc:	4aac      	ldr	r2, [pc, #688]	; (8004690 <USB_ActivateEndpoint+0x36c>)
 80043de:	4013      	ands	r3, r2
 80043e0:	b21a      	sxth	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b21b      	sxth	r3, r3
 80043e8:	4313      	orrs	r3, r2
 80043ea:	b21a      	sxth	r2, r3
 80043ec:	2166      	movs	r1, #102	; 0x66
 80043ee:	187b      	adds	r3, r7, r1
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	18d3      	adds	r3, r2, r3
 80043fc:	187a      	adds	r2, r7, r1
 80043fe:	8812      	ldrh	r2, [r2, #0]
 8004400:	49a2      	ldr	r1, [pc, #648]	; (800468c <USB_ActivateEndpoint+0x368>)
 8004402:	430a      	orrs	r2, r1
 8004404:	b292      	uxth	r2, r2
 8004406:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	7b1b      	ldrb	r3, [r3, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d000      	beq.n	8004412 <USB_ActivateEndpoint+0xee>
 8004410:	e150      	b.n	80046b4 <USB_ActivateEndpoint+0x390>
  {
    if (ep->is_in != 0U)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	785b      	ldrb	r3, [r3, #1]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d100      	bne.n	800441c <USB_ActivateEndpoint+0xf8>
 800441a:	e07a      	b.n	8004512 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2250      	movs	r2, #80	; 0x50
 8004424:	5a9b      	ldrh	r3, [r3, r2]
 8004426:	b29b      	uxth	r3, r3
 8004428:	001a      	movs	r2, r3
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	189b      	adds	r3, r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	00da      	lsls	r2, r3, #3
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	18d3      	adds	r3, r2, r3
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	00d2      	lsls	r2, r2, #3
 800443e:	4694      	mov	ip, r2
 8004440:	4463      	add	r3, ip
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	88db      	ldrh	r3, [r3, #6]
 8004448:	085b      	lsrs	r3, r3, #1
 800444a:	b29b      	uxth	r3, r3
 800444c:	18db      	adds	r3, r3, r3
 800444e:	b29a      	uxth	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	18d2      	adds	r2, r2, r3
 800445e:	2112      	movs	r1, #18
 8004460:	187b      	adds	r3, r7, r1
 8004462:	8812      	ldrh	r2, [r2, #0]
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	187b      	adds	r3, r7, r1
 8004468:	881b      	ldrh	r3, [r3, #0]
 800446a:	2240      	movs	r2, #64	; 0x40
 800446c:	4013      	ands	r3, r2
 800446e:	d016      	beq.n	800449e <USB_ActivateEndpoint+0x17a>
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	18d3      	adds	r3, r2, r3
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29a      	uxth	r2, r3
 800447e:	2010      	movs	r0, #16
 8004480:	183b      	adds	r3, r7, r0
 8004482:	4983      	ldr	r1, [pc, #524]	; (8004690 <USB_ActivateEndpoint+0x36c>)
 8004484:	400a      	ands	r2, r1
 8004486:	801a      	strh	r2, [r3, #0]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	18d3      	adds	r3, r2, r3
 8004492:	183a      	adds	r2, r7, r0
 8004494:	8812      	ldrh	r2, [r2, #0]
 8004496:	497f      	ldr	r1, [pc, #508]	; (8004694 <USB_ActivateEndpoint+0x370>)
 8004498:	430a      	orrs	r2, r1
 800449a:	b292      	uxth	r2, r2
 800449c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	78db      	ldrb	r3, [r3, #3]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d01d      	beq.n	80044e2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	18d3      	adds	r3, r2, r3
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	200c      	movs	r0, #12
 80044b6:	183b      	adds	r3, r7, r0
 80044b8:	4977      	ldr	r1, [pc, #476]	; (8004698 <USB_ActivateEndpoint+0x374>)
 80044ba:	400a      	ands	r2, r1
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	183a      	adds	r2, r7, r0
 80044c2:	8812      	ldrh	r2, [r2, #0]
 80044c4:	2120      	movs	r1, #32
 80044c6:	404a      	eors	r2, r1
 80044c8:	801a      	strh	r2, [r3, #0]
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	18d3      	adds	r3, r2, r3
 80044d4:	183a      	adds	r2, r7, r0
 80044d6:	8812      	ldrh	r2, [r2, #0]
 80044d8:	496c      	ldr	r1, [pc, #432]	; (800468c <USB_ActivateEndpoint+0x368>)
 80044da:	430a      	orrs	r2, r1
 80044dc:	b292      	uxth	r2, r2
 80044de:	801a      	strh	r2, [r3, #0]
 80044e0:	e27a      	b.n	80049d8 <USB_ActivateEndpoint+0x6b4>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	200e      	movs	r0, #14
 80044f2:	183b      	adds	r3, r7, r0
 80044f4:	4968      	ldr	r1, [pc, #416]	; (8004698 <USB_ActivateEndpoint+0x374>)
 80044f6:	400a      	ands	r2, r1
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	687a      	ldr	r2, [r7, #4]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	18d3      	adds	r3, r2, r3
 8004504:	183a      	adds	r2, r7, r0
 8004506:	8812      	ldrh	r2, [r2, #0]
 8004508:	4960      	ldr	r1, [pc, #384]	; (800468c <USB_ActivateEndpoint+0x368>)
 800450a:	430a      	orrs	r2, r1
 800450c:	b292      	uxth	r2, r2
 800450e:	801a      	strh	r2, [r3, #0]
 8004510:	e262      	b.n	80049d8 <USB_ActivateEndpoint+0x6b4>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	633b      	str	r3, [r7, #48]	; 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2250      	movs	r2, #80	; 0x50
 800451a:	5a9b      	ldrh	r3, [r3, r2]
 800451c:	b29b      	uxth	r3, r3
 800451e:	001a      	movs	r2, r3
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	189b      	adds	r3, r3, r2
 8004524:	633b      	str	r3, [r7, #48]	; 0x30
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	00da      	lsls	r2, r3, #3
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	18d3      	adds	r3, r2, r3
 8004530:	4a5a      	ldr	r2, [pc, #360]	; (800469c <USB_ActivateEndpoint+0x378>)
 8004532:	4694      	mov	ip, r2
 8004534:	4463      	add	r3, ip
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	88db      	ldrh	r3, [r3, #6]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	18db      	adds	r3, r3, r3
 8004542:	b29a      	uxth	r2, r3
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2250      	movs	r2, #80	; 0x50
 8004550:	5a9b      	ldrh	r3, [r3, r2]
 8004552:	b29b      	uxth	r3, r3
 8004554:	001a      	movs	r2, r3
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	189b      	adds	r3, r3, r2
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	00da      	lsls	r2, r3, #3
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	18d3      	adds	r3, r2, r3
 8004566:	4a4e      	ldr	r2, [pc, #312]	; (80046a0 <USB_ActivateEndpoint+0x37c>)
 8004568:	4694      	mov	ip, r2
 800456a:	4463      	add	r3, ip
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d110      	bne.n	8004598 <USB_ActivateEndpoint+0x274>
 8004576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	4a49      	ldr	r2, [pc, #292]	; (80046a4 <USB_ActivateEndpoint+0x380>)
 800457e:	4013      	ands	r3, r2
 8004580:	b29a      	uxth	r2, r3
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	801a      	strh	r2, [r3, #0]
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	881b      	ldrh	r3, [r3, #0]
 800458a:	b29b      	uxth	r3, r3
 800458c:	4a46      	ldr	r2, [pc, #280]	; (80046a8 <USB_ActivateEndpoint+0x384>)
 800458e:	4313      	orrs	r3, r2
 8004590:	b29a      	uxth	r2, r3
 8004592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004594:	801a      	strh	r2, [r3, #0]
 8004596:	e02b      	b.n	80045f0 <USB_ActivateEndpoint+0x2cc>
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	2b3e      	cmp	r3, #62	; 0x3e
 800459e:	d812      	bhi.n	80045c6 <USB_ActivateEndpoint+0x2a2>
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2201      	movs	r2, #1
 80045ae:	4013      	ands	r3, r2
 80045b0:	d002      	beq.n	80045b8 <USB_ActivateEndpoint+0x294>
 80045b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045b4:	3301      	adds	r3, #1
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	029b      	lsls	r3, r3, #10
 80045be:	b29a      	uxth	r2, r3
 80045c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c2:	801a      	strh	r2, [r3, #0]
 80045c4:	e014      	b.n	80045f0 <USB_ActivateEndpoint+0x2cc>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	221f      	movs	r2, #31
 80045d4:	4013      	ands	r3, r2
 80045d6:	d102      	bne.n	80045de <USB_ActivateEndpoint+0x2ba>
 80045d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045da:	3b01      	subs	r3, #1
 80045dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	029b      	lsls	r3, r3, #10
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4a30      	ldr	r2, [pc, #192]	; (80046a8 <USB_ActivateEndpoint+0x384>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045f0:	687a      	ldr	r2, [r7, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	18d2      	adds	r2, r2, r3
 80045fa:	2122      	movs	r1, #34	; 0x22
 80045fc:	187b      	adds	r3, r7, r1
 80045fe:	8812      	ldrh	r2, [r2, #0]
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	187b      	adds	r3, r7, r1
 8004604:	881a      	ldrh	r2, [r3, #0]
 8004606:	2380      	movs	r3, #128	; 0x80
 8004608:	01db      	lsls	r3, r3, #7
 800460a:	4013      	ands	r3, r2
 800460c:	d016      	beq.n	800463c <USB_ActivateEndpoint+0x318>
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	18d3      	adds	r3, r2, r3
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29a      	uxth	r2, r3
 800461c:	2020      	movs	r0, #32
 800461e:	183b      	adds	r3, r7, r0
 8004620:	491b      	ldr	r1, [pc, #108]	; (8004690 <USB_ActivateEndpoint+0x36c>)
 8004622:	400a      	ands	r2, r1
 8004624:	801a      	strh	r2, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	18d3      	adds	r3, r2, r3
 8004630:	183a      	adds	r2, r7, r0
 8004632:	8812      	ldrh	r2, [r2, #0]
 8004634:	491d      	ldr	r1, [pc, #116]	; (80046ac <USB_ActivateEndpoint+0x388>)
 8004636:	430a      	orrs	r2, r1
 8004638:	b292      	uxth	r2, r2
 800463a:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	18d3      	adds	r3, r2, r3
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29a      	uxth	r2, r3
 800464a:	201e      	movs	r0, #30
 800464c:	183b      	adds	r3, r7, r0
 800464e:	4918      	ldr	r1, [pc, #96]	; (80046b0 <USB_ActivateEndpoint+0x38c>)
 8004650:	400a      	ands	r2, r1
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	183b      	adds	r3, r7, r0
 8004656:	183a      	adds	r2, r7, r0
 8004658:	8812      	ldrh	r2, [r2, #0]
 800465a:	2180      	movs	r1, #128	; 0x80
 800465c:	0149      	lsls	r1, r1, #5
 800465e:	404a      	eors	r2, r1
 8004660:	801a      	strh	r2, [r3, #0]
 8004662:	183b      	adds	r3, r7, r0
 8004664:	183a      	adds	r2, r7, r0
 8004666:	8812      	ldrh	r2, [r2, #0]
 8004668:	2180      	movs	r1, #128	; 0x80
 800466a:	0189      	lsls	r1, r1, #6
 800466c:	404a      	eors	r2, r1
 800466e:	801a      	strh	r2, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	18d3      	adds	r3, r2, r3
 800467a:	183a      	adds	r2, r7, r0
 800467c:	8812      	ldrh	r2, [r2, #0]
 800467e:	4903      	ldr	r1, [pc, #12]	; (800468c <USB_ActivateEndpoint+0x368>)
 8004680:	430a      	orrs	r2, r1
 8004682:	b292      	uxth	r2, r2
 8004684:	801a      	strh	r2, [r3, #0]
 8004686:	e1a7      	b.n	80049d8 <USB_ActivateEndpoint+0x6b4>
 8004688:	ffff898f 	.word	0xffff898f
 800468c:	ffff8080 	.word	0xffff8080
 8004690:	ffff8f8f 	.word	0xffff8f8f
 8004694:	ffff80c0 	.word	0xffff80c0
 8004698:	ffff8fbf 	.word	0xffff8fbf
 800469c:	00000404 	.word	0x00000404
 80046a0:	00000406 	.word	0x00000406
 80046a4:	ffff83ff 	.word	0xffff83ff
 80046a8:	ffff8000 	.word	0xffff8000
 80046ac:	ffffc080 	.word	0xffffc080
 80046b0:	ffffbf8f 	.word	0xffffbf8f
    }
  }
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	78db      	ldrb	r3, [r3, #3]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d117      	bne.n	80046ec <USB_ActivateEndpoint+0x3c8>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	18d3      	adds	r3, r2, r3
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	2062      	movs	r0, #98	; 0x62
 80046cc:	183b      	adds	r3, r7, r0
 80046ce:	49c6      	ldr	r1, [pc, #792]	; (80049e8 <USB_ActivateEndpoint+0x6c4>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	18d3      	adds	r3, r2, r3
 80046de:	183a      	adds	r2, r7, r0
 80046e0:	8812      	ldrh	r2, [r2, #0]
 80046e2:	49c2      	ldr	r1, [pc, #776]	; (80049ec <USB_ActivateEndpoint+0x6c8>)
 80046e4:	430a      	orrs	r2, r1
 80046e6:	b292      	uxth	r2, r2
 80046e8:	801a      	strh	r2, [r3, #0]
 80046ea:	e016      	b.n	800471a <USB_ActivateEndpoint+0x3f6>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	18d3      	adds	r3, r2, r3
 80046f6:	881b      	ldrh	r3, [r3, #0]
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	2064      	movs	r0, #100	; 0x64
 80046fc:	183b      	adds	r3, r7, r0
 80046fe:	49bc      	ldr	r1, [pc, #752]	; (80049f0 <USB_ActivateEndpoint+0x6cc>)
 8004700:	400a      	ands	r2, r1
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	18d3      	adds	r3, r2, r3
 800470e:	183a      	adds	r2, r7, r0
 8004710:	8812      	ldrh	r2, [r2, #0]
 8004712:	49b8      	ldr	r1, [pc, #736]	; (80049f4 <USB_ActivateEndpoint+0x6d0>)
 8004714:	430a      	orrs	r2, r1
 8004716:	b292      	uxth	r2, r2
 8004718:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2250      	movs	r2, #80	; 0x50
 8004722:	5a9b      	ldrh	r3, [r3, r2]
 8004724:	b29b      	uxth	r3, r3
 8004726:	001a      	movs	r2, r3
 8004728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800472a:	189b      	adds	r3, r3, r2
 800472c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	00da      	lsls	r2, r3, #3
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	18d3      	adds	r3, r2, r3
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	00d2      	lsls	r2, r2, #3
 800473c:	4694      	mov	ip, r2
 800473e:	4463      	add	r3, ip
 8004740:	65bb      	str	r3, [r7, #88]	; 0x58
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	891b      	ldrh	r3, [r3, #8]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	18db      	adds	r3, r3, r3
 800474c:	b29a      	uxth	r2, r3
 800474e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	657b      	str	r3, [r7, #84]	; 0x54
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2250      	movs	r2, #80	; 0x50
 800475a:	5a9b      	ldrh	r3, [r3, r2]
 800475c:	b29b      	uxth	r3, r3
 800475e:	001a      	movs	r2, r3
 8004760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004762:	189b      	adds	r3, r3, r2
 8004764:	657b      	str	r3, [r7, #84]	; 0x54
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	00da      	lsls	r2, r3, #3
 800476c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800476e:	18d3      	adds	r3, r2, r3
 8004770:	4aa1      	ldr	r2, [pc, #644]	; (80049f8 <USB_ActivateEndpoint+0x6d4>)
 8004772:	4694      	mov	ip, r2
 8004774:	4463      	add	r3, ip
 8004776:	653b      	str	r3, [r7, #80]	; 0x50
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	895b      	ldrh	r3, [r3, #10]
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	b29b      	uxth	r3, r3
 8004780:	18db      	adds	r3, r3, r3
 8004782:	b29a      	uxth	r2, r3
 8004784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004786:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	785b      	ldrb	r3, [r3, #1]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d000      	beq.n	8004792 <USB_ActivateEndpoint+0x46e>
 8004790:	e087      	b.n	80048a2 <USB_ActivateEndpoint+0x57e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	18d2      	adds	r2, r2, r3
 800479c:	2140      	movs	r1, #64	; 0x40
 800479e:	187b      	adds	r3, r7, r1
 80047a0:	8812      	ldrh	r2, [r2, #0]
 80047a2:	801a      	strh	r2, [r3, #0]
 80047a4:	187b      	adds	r3, r7, r1
 80047a6:	881a      	ldrh	r2, [r3, #0]
 80047a8:	2380      	movs	r3, #128	; 0x80
 80047aa:	01db      	lsls	r3, r3, #7
 80047ac:	4013      	ands	r3, r2
 80047ae:	d016      	beq.n	80047de <USB_ActivateEndpoint+0x4ba>
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	18d3      	adds	r3, r2, r3
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29a      	uxth	r2, r3
 80047be:	203e      	movs	r0, #62	; 0x3e
 80047c0:	183b      	adds	r3, r7, r0
 80047c2:	4989      	ldr	r1, [pc, #548]	; (80049e8 <USB_ActivateEndpoint+0x6c4>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	18d3      	adds	r3, r2, r3
 80047d2:	183a      	adds	r2, r7, r0
 80047d4:	8812      	ldrh	r2, [r2, #0]
 80047d6:	4989      	ldr	r1, [pc, #548]	; (80049fc <USB_ActivateEndpoint+0x6d8>)
 80047d8:	430a      	orrs	r2, r1
 80047da:	b292      	uxth	r2, r2
 80047dc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	18d2      	adds	r2, r2, r3
 80047e8:	213c      	movs	r1, #60	; 0x3c
 80047ea:	187b      	adds	r3, r7, r1
 80047ec:	8812      	ldrh	r2, [r2, #0]
 80047ee:	801a      	strh	r2, [r3, #0]
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	4013      	ands	r3, r2
 80047f8:	d016      	beq.n	8004828 <USB_ActivateEndpoint+0x504>
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	18d3      	adds	r3, r2, r3
 8004804:	881b      	ldrh	r3, [r3, #0]
 8004806:	b29a      	uxth	r2, r3
 8004808:	203a      	movs	r0, #58	; 0x3a
 800480a:	183b      	adds	r3, r7, r0
 800480c:	4976      	ldr	r1, [pc, #472]	; (80049e8 <USB_ActivateEndpoint+0x6c4>)
 800480e:	400a      	ands	r2, r1
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	18d3      	adds	r3, r2, r3
 800481c:	183a      	adds	r2, r7, r0
 800481e:	8812      	ldrh	r2, [r2, #0]
 8004820:	4977      	ldr	r1, [pc, #476]	; (8004a00 <USB_ActivateEndpoint+0x6dc>)
 8004822:	430a      	orrs	r2, r1
 8004824:	b292      	uxth	r2, r2
 8004826:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	18d3      	adds	r3, r2, r3
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	b29a      	uxth	r2, r3
 8004836:	2038      	movs	r0, #56	; 0x38
 8004838:	183b      	adds	r3, r7, r0
 800483a:	4972      	ldr	r1, [pc, #456]	; (8004a04 <USB_ActivateEndpoint+0x6e0>)
 800483c:	400a      	ands	r2, r1
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	183b      	adds	r3, r7, r0
 8004842:	183a      	adds	r2, r7, r0
 8004844:	8812      	ldrh	r2, [r2, #0]
 8004846:	2180      	movs	r1, #128	; 0x80
 8004848:	0149      	lsls	r1, r1, #5
 800484a:	404a      	eors	r2, r1
 800484c:	801a      	strh	r2, [r3, #0]
 800484e:	183b      	adds	r3, r7, r0
 8004850:	183a      	adds	r2, r7, r0
 8004852:	8812      	ldrh	r2, [r2, #0]
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0189      	lsls	r1, r1, #6
 8004858:	404a      	eors	r2, r1
 800485a:	801a      	strh	r2, [r3, #0]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	18d3      	adds	r3, r2, r3
 8004866:	183a      	adds	r2, r7, r0
 8004868:	8812      	ldrh	r2, [r2, #0]
 800486a:	4962      	ldr	r1, [pc, #392]	; (80049f4 <USB_ActivateEndpoint+0x6d0>)
 800486c:	430a      	orrs	r2, r1
 800486e:	b292      	uxth	r2, r2
 8004870:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29a      	uxth	r2, r3
 8004880:	2036      	movs	r0, #54	; 0x36
 8004882:	183b      	adds	r3, r7, r0
 8004884:	4960      	ldr	r1, [pc, #384]	; (8004a08 <USB_ActivateEndpoint+0x6e4>)
 8004886:	400a      	ands	r2, r1
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	183a      	adds	r2, r7, r0
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	4956      	ldr	r1, [pc, #344]	; (80049f4 <USB_ActivateEndpoint+0x6d0>)
 800489a:	430a      	orrs	r2, r1
 800489c:	b292      	uxth	r2, r2
 800489e:	801a      	strh	r2, [r3, #0]
 80048a0:	e09a      	b.n	80049d8 <USB_ActivateEndpoint+0x6b4>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	18d2      	adds	r2, r2, r3
 80048ac:	214e      	movs	r1, #78	; 0x4e
 80048ae:	187b      	adds	r3, r7, r1
 80048b0:	8812      	ldrh	r2, [r2, #0]
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	187b      	adds	r3, r7, r1
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	2380      	movs	r3, #128	; 0x80
 80048ba:	01db      	lsls	r3, r3, #7
 80048bc:	4013      	ands	r3, r2
 80048be:	d016      	beq.n	80048ee <USB_ActivateEndpoint+0x5ca>
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	18d3      	adds	r3, r2, r3
 80048ca:	881b      	ldrh	r3, [r3, #0]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	204c      	movs	r0, #76	; 0x4c
 80048d0:	183b      	adds	r3, r7, r0
 80048d2:	4945      	ldr	r1, [pc, #276]	; (80049e8 <USB_ActivateEndpoint+0x6c4>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	009b      	lsls	r3, r3, #2
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	183a      	adds	r2, r7, r0
 80048e4:	8812      	ldrh	r2, [r2, #0]
 80048e6:	4945      	ldr	r1, [pc, #276]	; (80049fc <USB_ActivateEndpoint+0x6d8>)
 80048e8:	430a      	orrs	r2, r1
 80048ea:	b292      	uxth	r2, r2
 80048ec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	18d2      	adds	r2, r2, r3
 80048f8:	214a      	movs	r1, #74	; 0x4a
 80048fa:	187b      	adds	r3, r7, r1
 80048fc:	8812      	ldrh	r2, [r2, #0]
 80048fe:	801a      	strh	r2, [r3, #0]
 8004900:	187b      	adds	r3, r7, r1
 8004902:	881b      	ldrh	r3, [r3, #0]
 8004904:	2240      	movs	r2, #64	; 0x40
 8004906:	4013      	ands	r3, r2
 8004908:	d016      	beq.n	8004938 <USB_ActivateEndpoint+0x614>
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	18d3      	adds	r3, r2, r3
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	2048      	movs	r0, #72	; 0x48
 800491a:	183b      	adds	r3, r7, r0
 800491c:	4932      	ldr	r1, [pc, #200]	; (80049e8 <USB_ActivateEndpoint+0x6c4>)
 800491e:	400a      	ands	r2, r1
 8004920:	801a      	strh	r2, [r3, #0]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	18d3      	adds	r3, r2, r3
 800492c:	183a      	adds	r2, r7, r0
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	4933      	ldr	r1, [pc, #204]	; (8004a00 <USB_ActivateEndpoint+0x6dc>)
 8004932:	430a      	orrs	r2, r1
 8004934:	b292      	uxth	r2, r2
 8004936:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	78db      	ldrb	r3, [r3, #3]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d01d      	beq.n	800497c <USB_ActivateEndpoint+0x658>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	18d3      	adds	r3, r2, r3
 800494a:	881b      	ldrh	r3, [r3, #0]
 800494c:	b29a      	uxth	r2, r3
 800494e:	2044      	movs	r0, #68	; 0x44
 8004950:	183b      	adds	r3, r7, r0
 8004952:	492d      	ldr	r1, [pc, #180]	; (8004a08 <USB_ActivateEndpoint+0x6e4>)
 8004954:	400a      	ands	r2, r1
 8004956:	801a      	strh	r2, [r3, #0]
 8004958:	183b      	adds	r3, r7, r0
 800495a:	183a      	adds	r2, r7, r0
 800495c:	8812      	ldrh	r2, [r2, #0]
 800495e:	2120      	movs	r1, #32
 8004960:	404a      	eors	r2, r1
 8004962:	801a      	strh	r2, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	18d3      	adds	r3, r2, r3
 800496e:	183a      	adds	r2, r7, r0
 8004970:	8812      	ldrh	r2, [r2, #0]
 8004972:	4920      	ldr	r1, [pc, #128]	; (80049f4 <USB_ActivateEndpoint+0x6d0>)
 8004974:	430a      	orrs	r2, r1
 8004976:	b292      	uxth	r2, r2
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	e016      	b.n	80049aa <USB_ActivateEndpoint+0x686>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	18d3      	adds	r3, r2, r3
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	b29a      	uxth	r2, r3
 800498a:	2046      	movs	r0, #70	; 0x46
 800498c:	183b      	adds	r3, r7, r0
 800498e:	491e      	ldr	r1, [pc, #120]	; (8004a08 <USB_ActivateEndpoint+0x6e4>)
 8004990:	400a      	ands	r2, r1
 8004992:	801a      	strh	r2, [r3, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	781b      	ldrb	r3, [r3, #0]
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	18d3      	adds	r3, r2, r3
 800499e:	183a      	adds	r2, r7, r0
 80049a0:	8812      	ldrh	r2, [r2, #0]
 80049a2:	4914      	ldr	r1, [pc, #80]	; (80049f4 <USB_ActivateEndpoint+0x6d0>)
 80049a4:	430a      	orrs	r2, r1
 80049a6:	b292      	uxth	r2, r2
 80049a8:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	18d3      	adds	r3, r2, r3
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	2042      	movs	r0, #66	; 0x42
 80049ba:	183b      	adds	r3, r7, r0
 80049bc:	4911      	ldr	r1, [pc, #68]	; (8004a04 <USB_ActivateEndpoint+0x6e0>)
 80049be:	400a      	ands	r2, r1
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	18d3      	adds	r3, r2, r3
 80049cc:	183a      	adds	r2, r7, r0
 80049ce:	8812      	ldrh	r2, [r2, #0]
 80049d0:	4908      	ldr	r1, [pc, #32]	; (80049f4 <USB_ActivateEndpoint+0x6d0>)
 80049d2:	430a      	orrs	r2, r1
 80049d4:	b292      	uxth	r2, r2
 80049d6:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
 80049d8:	236f      	movs	r3, #111	; 0x6f
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	781b      	ldrb	r3, [r3, #0]
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b01c      	add	sp, #112	; 0x70
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	ffff8f8f 	.word	0xffff8f8f
 80049ec:	ffff8180 	.word	0xffff8180
 80049f0:	ffff8e8f 	.word	0xffff8e8f
 80049f4:	ffff8080 	.word	0xffff8080
 80049f8:	00000404 	.word	0x00000404
 80049fc:	ffffc080 	.word	0xffffc080
 8004a00:	ffff80c0 	.word	0xffff80c0
 8004a04:	ffffbf8f 	.word	0xffffbf8f
 8004a08:	ffff8fbf 	.word	0xffff8fbf

08004a0c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	7b1b      	ldrb	r3, [r3, #12]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d000      	beq.n	8004a20 <USB_DeactivateEndpoint+0x14>
 8004a1e:	e07e      	b.n	8004b1e <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d03c      	beq.n	8004aa2 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	18d2      	adds	r2, r2, r3
 8004a32:	210c      	movs	r1, #12
 8004a34:	187b      	adds	r3, r7, r1
 8004a36:	8812      	ldrh	r2, [r2, #0]
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	187b      	adds	r3, r7, r1
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	2240      	movs	r2, #64	; 0x40
 8004a40:	4013      	ands	r3, r2
 8004a42:	d016      	beq.n	8004a72 <USB_DeactivateEndpoint+0x66>
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	18d3      	adds	r3, r2, r3
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	200a      	movs	r0, #10
 8004a54:	183b      	adds	r3, r7, r0
 8004a56:	49c7      	ldr	r1, [pc, #796]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004a58:	400a      	ands	r2, r1
 8004a5a:	801a      	strh	r2, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	18d3      	adds	r3, r2, r3
 8004a66:	183a      	adds	r2, r7, r0
 8004a68:	8812      	ldrh	r2, [r2, #0]
 8004a6a:	49c3      	ldr	r1, [pc, #780]	; (8004d78 <USB_DeactivateEndpoint+0x36c>)
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	18d3      	adds	r3, r2, r3
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	b29a      	uxth	r2, r3
 8004a80:	2008      	movs	r0, #8
 8004a82:	183b      	adds	r3, r7, r0
 8004a84:	49bd      	ldr	r1, [pc, #756]	; (8004d7c <USB_DeactivateEndpoint+0x370>)
 8004a86:	400a      	ands	r2, r1
 8004a88:	801a      	strh	r2, [r3, #0]
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	18d3      	adds	r3, r2, r3
 8004a94:	183a      	adds	r2, r7, r0
 8004a96:	8812      	ldrh	r2, [r2, #0]
 8004a98:	49b9      	ldr	r1, [pc, #740]	; (8004d80 <USB_DeactivateEndpoint+0x374>)
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	801a      	strh	r2, [r3, #0]
 8004aa0:	e163      	b.n	8004d6a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	18d2      	adds	r2, r2, r3
 8004aac:	2112      	movs	r1, #18
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	8812      	ldrh	r2, [r2, #0]
 8004ab2:	801a      	strh	r2, [r3, #0]
 8004ab4:	187b      	adds	r3, r7, r1
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	01db      	lsls	r3, r3, #7
 8004abc:	4013      	ands	r3, r2
 8004abe:	d016      	beq.n	8004aee <USB_DeactivateEndpoint+0xe2>
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	18d3      	adds	r3, r2, r3
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	2010      	movs	r0, #16
 8004ad0:	183b      	adds	r3, r7, r0
 8004ad2:	49a8      	ldr	r1, [pc, #672]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004ad4:	400a      	ands	r2, r1
 8004ad6:	801a      	strh	r2, [r3, #0]
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	18d3      	adds	r3, r2, r3
 8004ae2:	183a      	adds	r2, r7, r0
 8004ae4:	8812      	ldrh	r2, [r2, #0]
 8004ae6:	49a7      	ldr	r1, [pc, #668]	; (8004d84 <USB_DeactivateEndpoint+0x378>)
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	b292      	uxth	r2, r2
 8004aec:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	18d3      	adds	r3, r2, r3
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	200e      	movs	r0, #14
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	49a1      	ldr	r1, [pc, #644]	; (8004d88 <USB_DeactivateEndpoint+0x37c>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	18d3      	adds	r3, r2, r3
 8004b10:	183a      	adds	r2, r7, r0
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	499a      	ldr	r1, [pc, #616]	; (8004d80 <USB_DeactivateEndpoint+0x374>)
 8004b16:	430a      	orrs	r2, r1
 8004b18:	b292      	uxth	r2, r2
 8004b1a:	801a      	strh	r2, [r3, #0]
 8004b1c:	e125      	b.n	8004d6a <USB_DeactivateEndpoint+0x35e>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	785b      	ldrb	r3, [r3, #1]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d000      	beq.n	8004b28 <USB_DeactivateEndpoint+0x11c>
 8004b26:	e090      	b.n	8004c4a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	18d2      	adds	r2, r2, r3
 8004b32:	2120      	movs	r1, #32
 8004b34:	187b      	adds	r3, r7, r1
 8004b36:	8812      	ldrh	r2, [r2, #0]
 8004b38:	801a      	strh	r2, [r3, #0]
 8004b3a:	187b      	adds	r3, r7, r1
 8004b3c:	881a      	ldrh	r2, [r3, #0]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	01db      	lsls	r3, r3, #7
 8004b42:	4013      	ands	r3, r2
 8004b44:	d016      	beq.n	8004b74 <USB_DeactivateEndpoint+0x168>
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	201e      	movs	r0, #30
 8004b56:	183b      	adds	r3, r7, r0
 8004b58:	4986      	ldr	r1, [pc, #536]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004b5a:	400a      	ands	r2, r1
 8004b5c:	801a      	strh	r2, [r3, #0]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	18d3      	adds	r3, r2, r3
 8004b68:	183a      	adds	r2, r7, r0
 8004b6a:	8812      	ldrh	r2, [r2, #0]
 8004b6c:	4985      	ldr	r1, [pc, #532]	; (8004d84 <USB_DeactivateEndpoint+0x378>)
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	b292      	uxth	r2, r2
 8004b72:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	18d2      	adds	r2, r2, r3
 8004b7e:	211c      	movs	r1, #28
 8004b80:	187b      	adds	r3, r7, r1
 8004b82:	8812      	ldrh	r2, [r2, #0]
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	187b      	adds	r3, r7, r1
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	2240      	movs	r2, #64	; 0x40
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	d016      	beq.n	8004bbe <USB_DeactivateEndpoint+0x1b2>
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	18d3      	adds	r3, r2, r3
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	b29a      	uxth	r2, r3
 8004b9e:	201a      	movs	r0, #26
 8004ba0:	183b      	adds	r3, r7, r0
 8004ba2:	4974      	ldr	r1, [pc, #464]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004ba4:	400a      	ands	r2, r1
 8004ba6:	801a      	strh	r2, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	18d3      	adds	r3, r2, r3
 8004bb2:	183a      	adds	r2, r7, r0
 8004bb4:	8812      	ldrh	r2, [r2, #0]
 8004bb6:	4970      	ldr	r1, [pc, #448]	; (8004d78 <USB_DeactivateEndpoint+0x36c>)
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	18d3      	adds	r3, r2, r3
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	2018      	movs	r0, #24
 8004bce:	183b      	adds	r3, r7, r0
 8004bd0:	4968      	ldr	r1, [pc, #416]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	801a      	strh	r2, [r3, #0]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	18d3      	adds	r3, r2, r3
 8004be0:	183a      	adds	r2, r7, r0
 8004be2:	8812      	ldrh	r2, [r2, #0]
 8004be4:	4964      	ldr	r1, [pc, #400]	; (8004d78 <USB_DeactivateEndpoint+0x36c>)
 8004be6:	430a      	orrs	r2, r1
 8004be8:	b292      	uxth	r2, r2
 8004bea:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	18d3      	adds	r3, r2, r3
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29a      	uxth	r2, r3
 8004bfa:	2016      	movs	r0, #22
 8004bfc:	183b      	adds	r3, r7, r0
 8004bfe:	4962      	ldr	r1, [pc, #392]	; (8004d88 <USB_DeactivateEndpoint+0x37c>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	18d3      	adds	r3, r2, r3
 8004c0e:	183a      	adds	r2, r7, r0
 8004c10:	8812      	ldrh	r2, [r2, #0]
 8004c12:	495b      	ldr	r1, [pc, #364]	; (8004d80 <USB_DeactivateEndpoint+0x374>)
 8004c14:	430a      	orrs	r2, r1
 8004c16:	b292      	uxth	r2, r2
 8004c18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	18d3      	adds	r3, r2, r3
 8004c24:	881b      	ldrh	r3, [r3, #0]
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	2014      	movs	r0, #20
 8004c2a:	183b      	adds	r3, r7, r0
 8004c2c:	4953      	ldr	r1, [pc, #332]	; (8004d7c <USB_DeactivateEndpoint+0x370>)
 8004c2e:	400a      	ands	r2, r1
 8004c30:	801a      	strh	r2, [r3, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	18d3      	adds	r3, r2, r3
 8004c3c:	183a      	adds	r2, r7, r0
 8004c3e:	8812      	ldrh	r2, [r2, #0]
 8004c40:	494f      	ldr	r1, [pc, #316]	; (8004d80 <USB_DeactivateEndpoint+0x374>)
 8004c42:	430a      	orrs	r2, r1
 8004c44:	b292      	uxth	r2, r2
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	e08f      	b.n	8004d6a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	18d2      	adds	r2, r2, r3
 8004c54:	212e      	movs	r1, #46	; 0x2e
 8004c56:	187b      	adds	r3, r7, r1
 8004c58:	8812      	ldrh	r2, [r2, #0]
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	187b      	adds	r3, r7, r1
 8004c5e:	881a      	ldrh	r2, [r3, #0]
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	01db      	lsls	r3, r3, #7
 8004c64:	4013      	ands	r3, r2
 8004c66:	d016      	beq.n	8004c96 <USB_DeactivateEndpoint+0x28a>
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	18d3      	adds	r3, r2, r3
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	202c      	movs	r0, #44	; 0x2c
 8004c78:	183b      	adds	r3, r7, r0
 8004c7a:	493e      	ldr	r1, [pc, #248]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	801a      	strh	r2, [r3, #0]
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	18d3      	adds	r3, r2, r3
 8004c8a:	183a      	adds	r2, r7, r0
 8004c8c:	8812      	ldrh	r2, [r2, #0]
 8004c8e:	493d      	ldr	r1, [pc, #244]	; (8004d84 <USB_DeactivateEndpoint+0x378>)
 8004c90:	430a      	orrs	r2, r1
 8004c92:	b292      	uxth	r2, r2
 8004c94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	18d2      	adds	r2, r2, r3
 8004ca0:	212a      	movs	r1, #42	; 0x2a
 8004ca2:	187b      	adds	r3, r7, r1
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	801a      	strh	r2, [r3, #0]
 8004ca8:	187b      	adds	r3, r7, r1
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	4013      	ands	r3, r2
 8004cb0:	d016      	beq.n	8004ce0 <USB_DeactivateEndpoint+0x2d4>
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	18d3      	adds	r3, r2, r3
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	2028      	movs	r0, #40	; 0x28
 8004cc2:	183b      	adds	r3, r7, r0
 8004cc4:	492b      	ldr	r1, [pc, #172]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	801a      	strh	r2, [r3, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	183a      	adds	r2, r7, r0
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	4927      	ldr	r1, [pc, #156]	; (8004d78 <USB_DeactivateEndpoint+0x36c>)
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	18d3      	adds	r3, r2, r3
 8004cea:	881b      	ldrh	r3, [r3, #0]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	2026      	movs	r0, #38	; 0x26
 8004cf0:	183b      	adds	r3, r7, r0
 8004cf2:	4920      	ldr	r1, [pc, #128]	; (8004d74 <USB_DeactivateEndpoint+0x368>)
 8004cf4:	400a      	ands	r2, r1
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	18d3      	adds	r3, r2, r3
 8004d02:	183a      	adds	r2, r7, r0
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	491f      	ldr	r1, [pc, #124]	; (8004d84 <USB_DeactivateEndpoint+0x378>)
 8004d08:	430a      	orrs	r2, r1
 8004d0a:	b292      	uxth	r2, r2
 8004d0c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	18d3      	adds	r3, r2, r3
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	b29a      	uxth	r2, r3
 8004d1c:	2024      	movs	r0, #36	; 0x24
 8004d1e:	183b      	adds	r3, r7, r0
 8004d20:	4916      	ldr	r1, [pc, #88]	; (8004d7c <USB_DeactivateEndpoint+0x370>)
 8004d22:	400a      	ands	r2, r1
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	18d3      	adds	r3, r2, r3
 8004d30:	183a      	adds	r2, r7, r0
 8004d32:	8812      	ldrh	r2, [r2, #0]
 8004d34:	4912      	ldr	r1, [pc, #72]	; (8004d80 <USB_DeactivateEndpoint+0x374>)
 8004d36:	430a      	orrs	r2, r1
 8004d38:	b292      	uxth	r2, r2
 8004d3a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	18d3      	adds	r3, r2, r3
 8004d46:	881b      	ldrh	r3, [r3, #0]
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	2022      	movs	r0, #34	; 0x22
 8004d4c:	183b      	adds	r3, r7, r0
 8004d4e:	490e      	ldr	r1, [pc, #56]	; (8004d88 <USB_DeactivateEndpoint+0x37c>)
 8004d50:	400a      	ands	r2, r1
 8004d52:	801a      	strh	r2, [r3, #0]
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	18d3      	adds	r3, r2, r3
 8004d5e:	183a      	adds	r2, r7, r0
 8004d60:	8812      	ldrh	r2, [r2, #0]
 8004d62:	4907      	ldr	r1, [pc, #28]	; (8004d80 <USB_DeactivateEndpoint+0x374>)
 8004d64:	430a      	orrs	r2, r1
 8004d66:	b292      	uxth	r2, r2
 8004d68:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b00c      	add	sp, #48	; 0x30
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	ffff8f8f 	.word	0xffff8f8f
 8004d78:	ffff80c0 	.word	0xffff80c0
 8004d7c:	ffff8fbf 	.word	0xffff8fbf
 8004d80:	ffff8080 	.word	0xffff8080
 8004d84:	ffffc080 	.word	0xffffc080
 8004d88:	ffffbf8f 	.word	0xffffbf8f

08004d8c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d8c:	b590      	push	{r4, r7, lr}
 8004d8e:	b0c3      	sub	sp, #268	; 0x10c
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	785b      	ldrb	r3, [r3, #1]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d001      	beq.n	8004da2 <USB_EPStartXfer+0x16>
 8004d9e:	f000 fcef 	bl	8005780 <USB_EPStartXfer+0x9f4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d905      	bls.n	8004dba <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	1d7a      	adds	r2, r7, #5
 8004db4:	32ff      	adds	r2, #255	; 0xff
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e004      	b.n	8004dc4 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	1d7a      	adds	r2, r7, #5
 8004dc0:	32ff      	adds	r2, #255	; 0xff
 8004dc2:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	7b1b      	ldrb	r3, [r3, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d125      	bne.n	8004e18 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	6959      	ldr	r1, [r3, #20]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	88da      	ldrh	r2, [r3, #6]
 8004dd4:	1d7b      	adds	r3, r7, #5
 8004dd6:	33ff      	adds	r3, #255	; 0xff
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f001 f9c9 	bl	8006174 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	613b      	str	r3, [r7, #16]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2250      	movs	r2, #80	; 0x50
 8004dea:	5a9b      	ldrh	r3, [r3, r2]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	001a      	movs	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	613b      	str	r3, [r7, #16]
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	00da      	lsls	r2, r3, #3
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	18d3      	adds	r3, r2, r3
 8004e00:	4acc      	ldr	r2, [pc, #816]	; (8005134 <USB_EPStartXfer+0x3a8>)
 8004e02:	4694      	mov	ip, r2
 8004e04:	4463      	add	r3, ip
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	1d7b      	adds	r3, r7, #5
 8004e0a:	33ff      	adds	r3, #255	; 0xff
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	801a      	strh	r2, [r3, #0]
 8004e14:	f000 fc8f 	bl	8005736 <USB_EPStartXfer+0x9aa>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	78db      	ldrb	r3, [r3, #3]
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d000      	beq.n	8004e22 <USB_EPStartXfer+0x96>
 8004e20:	e33a      	b.n	8005498 <USB_EPStartXfer+0x70c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d800      	bhi.n	8004e30 <USB_EPStartXfer+0xa4>
 8004e2e:	e2df      	b.n	80053f0 <USB_EPStartXfer+0x664>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	18d3      	adds	r3, r2, r3
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	2056      	movs	r0, #86	; 0x56
 8004e40:	183b      	adds	r3, r7, r0
 8004e42:	49bd      	ldr	r1, [pc, #756]	; (8005138 <USB_EPStartXfer+0x3ac>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	18d3      	adds	r3, r2, r3
 8004e52:	183a      	adds	r2, r7, r0
 8004e54:	8812      	ldrh	r2, [r2, #0]
 8004e56:	49b9      	ldr	r1, [pc, #740]	; (800513c <USB_EPStartXfer+0x3b0>)
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	b292      	uxth	r2, r2
 8004e5c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	6a1a      	ldr	r2, [r3, #32]
 8004e62:	1d7b      	adds	r3, r7, #5
 8004e64:	33ff      	adds	r3, #255	; 0xff
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	1ad2      	subs	r2, r2, r3
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	18d3      	adds	r3, r2, r3
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	001a      	movs	r2, r3
 8004e7e:	2340      	movs	r3, #64	; 0x40
 8004e80:	4013      	ands	r3, r2
 8004e82:	d100      	bne.n	8004e86 <USB_EPStartXfer+0xfa>
 8004e84:	e162      	b.n	800514c <USB_EPStartXfer+0x3c0>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	633b      	str	r3, [r7, #48]	; 0x30
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	785b      	ldrb	r3, [r3, #1]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d16a      	bne.n	8004f68 <USB_EPStartXfer+0x1dc>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2250      	movs	r2, #80	; 0x50
 8004e9a:	5a9b      	ldrh	r3, [r3, r2]
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	001a      	movs	r2, r3
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	00da      	lsls	r2, r3, #3
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	4aa3      	ldr	r2, [pc, #652]	; (8005140 <USB_EPStartXfer+0x3b4>)
 8004eb2:	4694      	mov	ip, r2
 8004eb4:	4463      	add	r3, ip
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb8:	1d7b      	adds	r3, r7, #5
 8004eba:	33ff      	adds	r3, #255	; 0xff
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d110      	bne.n	8004ee4 <USB_EPStartXfer+0x158>
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4a9e      	ldr	r2, [pc, #632]	; (8005144 <USB_EPStartXfer+0x3b8>)
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4a9b      	ldr	r2, [pc, #620]	; (8005148 <USB_EPStartXfer+0x3bc>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	801a      	strh	r2, [r3, #0]
 8004ee2:	e05c      	b.n	8004f9e <USB_EPStartXfer+0x212>
 8004ee4:	1d7b      	adds	r3, r7, #5
 8004ee6:	33ff      	adds	r3, #255	; 0xff
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b3e      	cmp	r3, #62	; 0x3e
 8004eec:	d81c      	bhi.n	8004f28 <USB_EPStartXfer+0x19c>
 8004eee:	1d7b      	adds	r3, r7, #5
 8004ef0:	33ff      	adds	r3, #255	; 0xff
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	1c7a      	adds	r2, r7, #1
 8004ef8:	32ff      	adds	r2, #255	; 0xff
 8004efa:	6013      	str	r3, [r2, #0]
 8004efc:	1d7b      	adds	r3, r7, #5
 8004efe:	33ff      	adds	r3, #255	; 0xff
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	4013      	ands	r3, r2
 8004f06:	d006      	beq.n	8004f16 <USB_EPStartXfer+0x18a>
 8004f08:	1c7b      	adds	r3, r7, #1
 8004f0a:	33ff      	adds	r3, #255	; 0xff
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	1c7a      	adds	r2, r7, #1
 8004f12:	32ff      	adds	r2, #255	; 0xff
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	1c7b      	adds	r3, r7, #1
 8004f18:	33ff      	adds	r3, #255	; 0xff
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f24:	801a      	strh	r2, [r3, #0]
 8004f26:	e03a      	b.n	8004f9e <USB_EPStartXfer+0x212>
 8004f28:	1d7b      	adds	r3, r7, #5
 8004f2a:	33ff      	adds	r3, #255	; 0xff
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	095b      	lsrs	r3, r3, #5
 8004f30:	1c7a      	adds	r2, r7, #1
 8004f32:	32ff      	adds	r2, #255	; 0xff
 8004f34:	6013      	str	r3, [r2, #0]
 8004f36:	1d7b      	adds	r3, r7, #5
 8004f38:	33ff      	adds	r3, #255	; 0xff
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	221f      	movs	r2, #31
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d106      	bne.n	8004f50 <USB_EPStartXfer+0x1c4>
 8004f42:	1c7b      	adds	r3, r7, #1
 8004f44:	33ff      	adds	r3, #255	; 0xff
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	1c7a      	adds	r2, r7, #1
 8004f4c:	32ff      	adds	r2, #255	; 0xff
 8004f4e:	6013      	str	r3, [r2, #0]
 8004f50:	1c7b      	adds	r3, r7, #1
 8004f52:	33ff      	adds	r3, #255	; 0xff
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	4a7a      	ldr	r2, [pc, #488]	; (8005148 <USB_EPStartXfer+0x3bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	801a      	strh	r2, [r3, #0]
 8004f66:	e01a      	b.n	8004f9e <USB_EPStartXfer+0x212>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	785b      	ldrb	r3, [r3, #1]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d116      	bne.n	8004f9e <USB_EPStartXfer+0x212>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2250      	movs	r2, #80	; 0x50
 8004f74:	5a9b      	ldrh	r3, [r3, r2]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	001a      	movs	r2, r3
 8004f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7c:	189b      	adds	r3, r3, r2
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00da      	lsls	r2, r3, #3
 8004f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f88:	18d3      	adds	r3, r2, r3
 8004f8a:	4a6d      	ldr	r2, [pc, #436]	; (8005140 <USB_EPStartXfer+0x3b4>)
 8004f8c:	4694      	mov	ip, r2
 8004f8e:	4463      	add	r3, ip
 8004f90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f92:	1d7b      	adds	r3, r7, #5
 8004f94:	33ff      	adds	r3, #255	; 0xff
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004f9e:	2076      	movs	r0, #118	; 0x76
 8004fa0:	183b      	adds	r3, r7, r0
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	8952      	ldrh	r2, [r2, #10]
 8004fa6:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	6959      	ldr	r1, [r3, #20]
 8004fac:	1d7b      	adds	r3, r7, #5
 8004fae:	33ff      	adds	r3, #255	; 0xff
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	b29c      	uxth	r4, r3
 8004fb4:	183b      	adds	r3, r7, r0
 8004fb6:	881a      	ldrh	r2, [r3, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	0023      	movs	r3, r4
 8004fbc:	f001 f8da 	bl	8006174 <USB_WritePMA>
            ep->xfer_buff += len;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	1d7b      	adds	r3, r7, #5
 8004fc6:	33ff      	adds	r3, #255	; 0xff
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	18d2      	adds	r2, r2, r3
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	6a1a      	ldr	r2, [r3, #32]
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d908      	bls.n	8004fee <USB_EPStartXfer+0x262>
            {
              ep->xfer_len_db -= len;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6a1a      	ldr	r2, [r3, #32]
 8004fe0:	1d7b      	adds	r3, r7, #5
 8004fe2:	33ff      	adds	r3, #255	; 0xff
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	1ad2      	subs	r2, r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	621a      	str	r2, [r3, #32]
 8004fec:	e007      	b.n	8004ffe <USB_EPStartXfer+0x272>
            }
            else
            {
              len = ep->xfer_len_db;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	1d7a      	adds	r2, r7, #5
 8004ff4:	32ff      	adds	r2, #255	; 0xff
 8004ff6:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d166      	bne.n	80050d4 <USB_EPStartXfer+0x348>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2250      	movs	r2, #80	; 0x50
 800500e:	5a9b      	ldrh	r3, [r3, r2]
 8005010:	b29b      	uxth	r3, r3
 8005012:	001a      	movs	r2, r3
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	189b      	adds	r3, r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	00da      	lsls	r2, r3, #3
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	18d3      	adds	r3, r2, r3
 8005024:	4a43      	ldr	r2, [pc, #268]	; (8005134 <USB_EPStartXfer+0x3a8>)
 8005026:	4694      	mov	ip, r2
 8005028:	4463      	add	r3, ip
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	1d7b      	adds	r3, r7, #5
 800502e:	33ff      	adds	r3, #255	; 0xff
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d110      	bne.n	8005058 <USB_EPStartXfer+0x2cc>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	881b      	ldrh	r3, [r3, #0]
 800503a:	b29b      	uxth	r3, r3
 800503c:	4a41      	ldr	r2, [pc, #260]	; (8005144 <USB_EPStartXfer+0x3b8>)
 800503e:	4013      	ands	r3, r2
 8005040:	b29a      	uxth	r2, r3
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	801a      	strh	r2, [r3, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	4a3e      	ldr	r2, [pc, #248]	; (8005148 <USB_EPStartXfer+0x3bc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	b29a      	uxth	r2, r3
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	e05a      	b.n	800510e <USB_EPStartXfer+0x382>
 8005058:	1d7b      	adds	r3, r7, #5
 800505a:	33ff      	adds	r3, #255	; 0xff
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2b3e      	cmp	r3, #62	; 0x3e
 8005060:	d81a      	bhi.n	8005098 <USB_EPStartXfer+0x30c>
 8005062:	1d7b      	adds	r3, r7, #5
 8005064:	33ff      	adds	r3, #255	; 0xff
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	085b      	lsrs	r3, r3, #1
 800506a:	21fc      	movs	r1, #252	; 0xfc
 800506c:	187a      	adds	r2, r7, r1
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	1d7b      	adds	r3, r7, #5
 8005072:	33ff      	adds	r3, #255	; 0xff
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2201      	movs	r2, #1
 8005078:	4013      	ands	r3, r2
 800507a:	d004      	beq.n	8005086 <USB_EPStartXfer+0x2fa>
 800507c:	187b      	adds	r3, r7, r1
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	187a      	adds	r2, r7, r1
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	23fc      	movs	r3, #252	; 0xfc
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	029b      	lsls	r3, r3, #10
 8005090:	b29a      	uxth	r2, r3
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	e03a      	b.n	800510e <USB_EPStartXfer+0x382>
 8005098:	1d7b      	adds	r3, r7, #5
 800509a:	33ff      	adds	r3, #255	; 0xff
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	095b      	lsrs	r3, r3, #5
 80050a0:	21fc      	movs	r1, #252	; 0xfc
 80050a2:	187a      	adds	r2, r7, r1
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	1d7b      	adds	r3, r7, #5
 80050a8:	33ff      	adds	r3, #255	; 0xff
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	221f      	movs	r2, #31
 80050ae:	4013      	ands	r3, r2
 80050b0:	d104      	bne.n	80050bc <USB_EPStartXfer+0x330>
 80050b2:	187b      	adds	r3, r7, r1
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	187a      	adds	r2, r7, r1
 80050ba:	6013      	str	r3, [r2, #0]
 80050bc:	23fc      	movs	r3, #252	; 0xfc
 80050be:	18fb      	adds	r3, r7, r3
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <USB_EPStartXfer+0x3bc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	e01c      	b.n	800510e <USB_EPStartXfer+0x382>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	785b      	ldrb	r3, [r3, #1]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d118      	bne.n	800510e <USB_EPStartXfer+0x382>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2250      	movs	r2, #80	; 0x50
 80050e4:	5a9b      	ldrh	r3, [r3, r2]
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	001a      	movs	r2, r3
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	189b      	adds	r3, r3, r2
 80050ee:	623b      	str	r3, [r7, #32]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	00da      	lsls	r2, r3, #3
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	18d3      	adds	r3, r2, r3
 80050fa:	4a0e      	ldr	r2, [pc, #56]	; (8005134 <USB_EPStartXfer+0x3a8>)
 80050fc:	4694      	mov	ip, r2
 80050fe:	4463      	add	r3, ip
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	1d7b      	adds	r3, r7, #5
 8005104:	33ff      	adds	r3, #255	; 0xff
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800510e:	2076      	movs	r0, #118	; 0x76
 8005110:	183b      	adds	r3, r7, r0
 8005112:	683a      	ldr	r2, [r7, #0]
 8005114:	8912      	ldrh	r2, [r2, #8]
 8005116:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	6959      	ldr	r1, [r3, #20]
 800511c:	1d7b      	adds	r3, r7, #5
 800511e:	33ff      	adds	r3, #255	; 0xff
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b29c      	uxth	r4, r3
 8005124:	183b      	adds	r3, r7, r0
 8005126:	881a      	ldrh	r2, [r3, #0]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	0023      	movs	r3, r4
 800512c:	f001 f822 	bl	8006174 <USB_WritePMA>
 8005130:	e301      	b.n	8005736 <USB_EPStartXfer+0x9aa>
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	00000402 	.word	0x00000402
 8005138:	ffff8f8f 	.word	0xffff8f8f
 800513c:	ffff8180 	.word	0xffff8180
 8005140:	00000406 	.word	0x00000406
 8005144:	ffff83ff 	.word	0xffff83ff
 8005148:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d166      	bne.n	8005222 <USB_EPStartXfer+0x496>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	64bb      	str	r3, [r7, #72]	; 0x48
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2250      	movs	r2, #80	; 0x50
 800515c:	5a9b      	ldrh	r3, [r3, r2]
 800515e:	b29b      	uxth	r3, r3
 8005160:	001a      	movs	r2, r3
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005164:	189b      	adds	r3, r3, r2
 8005166:	64bb      	str	r3, [r7, #72]	; 0x48
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	00da      	lsls	r2, r3, #3
 800516e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005170:	18d3      	adds	r3, r2, r3
 8005172:	4ac3      	ldr	r2, [pc, #780]	; (8005480 <USB_EPStartXfer+0x6f4>)
 8005174:	4694      	mov	ip, r2
 8005176:	4463      	add	r3, ip
 8005178:	647b      	str	r3, [r7, #68]	; 0x44
 800517a:	1d7b      	adds	r3, r7, #5
 800517c:	33ff      	adds	r3, #255	; 0xff
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d110      	bne.n	80051a6 <USB_EPStartXfer+0x41a>
 8005184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	4abe      	ldr	r2, [pc, #760]	; (8005484 <USB_EPStartXfer+0x6f8>)
 800518c:	4013      	ands	r3, r2
 800518e:	b29a      	uxth	r2, r3
 8005190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	b29b      	uxth	r3, r3
 800519a:	4abb      	ldr	r2, [pc, #748]	; (8005488 <USB_EPStartXfer+0x6fc>)
 800519c:	4313      	orrs	r3, r2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051a2:	801a      	strh	r2, [r3, #0]
 80051a4:	e05a      	b.n	800525c <USB_EPStartXfer+0x4d0>
 80051a6:	1d7b      	adds	r3, r7, #5
 80051a8:	33ff      	adds	r3, #255	; 0xff
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b3e      	cmp	r3, #62	; 0x3e
 80051ae:	d81a      	bhi.n	80051e6 <USB_EPStartXfer+0x45a>
 80051b0:	1d7b      	adds	r3, r7, #5
 80051b2:	33ff      	adds	r3, #255	; 0xff
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	21f8      	movs	r1, #248	; 0xf8
 80051ba:	187a      	adds	r2, r7, r1
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	1d7b      	adds	r3, r7, #5
 80051c0:	33ff      	adds	r3, #255	; 0xff
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2201      	movs	r2, #1
 80051c6:	4013      	ands	r3, r2
 80051c8:	d004      	beq.n	80051d4 <USB_EPStartXfer+0x448>
 80051ca:	187b      	adds	r3, r7, r1
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	187a      	adds	r2, r7, r1
 80051d2:	6013      	str	r3, [r2, #0]
 80051d4:	23f8      	movs	r3, #248	; 0xf8
 80051d6:	18fb      	adds	r3, r7, r3
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	b29b      	uxth	r3, r3
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	b29a      	uxth	r2, r3
 80051e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051e2:	801a      	strh	r2, [r3, #0]
 80051e4:	e03a      	b.n	800525c <USB_EPStartXfer+0x4d0>
 80051e6:	1d7b      	adds	r3, r7, #5
 80051e8:	33ff      	adds	r3, #255	; 0xff
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	21f8      	movs	r1, #248	; 0xf8
 80051f0:	187a      	adds	r2, r7, r1
 80051f2:	6013      	str	r3, [r2, #0]
 80051f4:	1d7b      	adds	r3, r7, #5
 80051f6:	33ff      	adds	r3, #255	; 0xff
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	221f      	movs	r2, #31
 80051fc:	4013      	ands	r3, r2
 80051fe:	d104      	bne.n	800520a <USB_EPStartXfer+0x47e>
 8005200:	187b      	adds	r3, r7, r1
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3b01      	subs	r3, #1
 8005206:	187a      	adds	r2, r7, r1
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	23f8      	movs	r3, #248	; 0xf8
 800520c:	18fb      	adds	r3, r7, r3
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	029b      	lsls	r3, r3, #10
 8005214:	b29b      	uxth	r3, r3
 8005216:	4a9c      	ldr	r2, [pc, #624]	; (8005488 <USB_EPStartXfer+0x6fc>)
 8005218:	4313      	orrs	r3, r2
 800521a:	b29a      	uxth	r2, r3
 800521c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e01c      	b.n	800525c <USB_EPStartXfer+0x4d0>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d118      	bne.n	800525c <USB_EPStartXfer+0x4d0>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	653b      	str	r3, [r7, #80]	; 0x50
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2250      	movs	r2, #80	; 0x50
 8005232:	5a9b      	ldrh	r3, [r3, r2]
 8005234:	b29b      	uxth	r3, r3
 8005236:	001a      	movs	r2, r3
 8005238:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523a:	189b      	adds	r3, r3, r2
 800523c:	653b      	str	r3, [r7, #80]	; 0x50
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	00da      	lsls	r2, r3, #3
 8005244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005246:	18d3      	adds	r3, r2, r3
 8005248:	4a8d      	ldr	r2, [pc, #564]	; (8005480 <USB_EPStartXfer+0x6f4>)
 800524a:	4694      	mov	ip, r2
 800524c:	4463      	add	r3, ip
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	1d7b      	adds	r3, r7, #5
 8005252:	33ff      	adds	r3, #255	; 0xff
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	b29a      	uxth	r2, r3
 8005258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800525a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800525c:	2076      	movs	r0, #118	; 0x76
 800525e:	183b      	adds	r3, r7, r0
 8005260:	683a      	ldr	r2, [r7, #0]
 8005262:	8912      	ldrh	r2, [r2, #8]
 8005264:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	6959      	ldr	r1, [r3, #20]
 800526a:	1d7b      	adds	r3, r7, #5
 800526c:	33ff      	adds	r3, #255	; 0xff
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	b29c      	uxth	r4, r3
 8005272:	183b      	adds	r3, r7, r0
 8005274:	881a      	ldrh	r2, [r3, #0]
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	0023      	movs	r3, r4
 800527a:	f000 ff7b 	bl	8006174 <USB_WritePMA>
            ep->xfer_buff += len;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	1d7b      	adds	r3, r7, #5
 8005284:	33ff      	adds	r3, #255	; 0xff
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	18d2      	adds	r2, r2, r3
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d908      	bls.n	80052ac <USB_EPStartXfer+0x520>
            {
              ep->xfer_len_db -= len;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	6a1a      	ldr	r2, [r3, #32]
 800529e:	1d7b      	adds	r3, r7, #5
 80052a0:	33ff      	adds	r3, #255	; 0xff
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1ad2      	subs	r2, r2, r3
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	621a      	str	r2, [r3, #32]
 80052aa:	e007      	b.n	80052bc <USB_EPStartXfer+0x530>
            }
            else
            {
              len = ep->xfer_len_db;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	1d7a      	adds	r2, r7, #5
 80052b2:	32ff      	adds	r2, #255	; 0xff
 80052b4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2200      	movs	r2, #0
 80052ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	643b      	str	r3, [r7, #64]	; 0x40
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d166      	bne.n	8005396 <USB_EPStartXfer+0x60a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2250      	movs	r2, #80	; 0x50
 80052d0:	5a9b      	ldrh	r3, [r3, r2]
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	001a      	movs	r2, r3
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	189b      	adds	r3, r3, r2
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	00da      	lsls	r2, r3, #3
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	18d3      	adds	r3, r2, r3
 80052e6:	4a69      	ldr	r2, [pc, #420]	; (800548c <USB_EPStartXfer+0x700>)
 80052e8:	4694      	mov	ip, r2
 80052ea:	4463      	add	r3, ip
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34
 80052ee:	1d7b      	adds	r3, r7, #5
 80052f0:	33ff      	adds	r3, #255	; 0xff
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d110      	bne.n	800531a <USB_EPStartXfer+0x58e>
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	4a61      	ldr	r2, [pc, #388]	; (8005484 <USB_EPStartXfer+0x6f8>)
 8005300:	4013      	ands	r3, r2
 8005302:	b29a      	uxth	r2, r3
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	801a      	strh	r2, [r3, #0]
 8005308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800530a:	881b      	ldrh	r3, [r3, #0]
 800530c:	b29b      	uxth	r3, r3
 800530e:	4a5e      	ldr	r2, [pc, #376]	; (8005488 <USB_EPStartXfer+0x6fc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	b29a      	uxth	r2, r3
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	801a      	strh	r2, [r3, #0]
 8005318:	e058      	b.n	80053cc <USB_EPStartXfer+0x640>
 800531a:	1d7b      	adds	r3, r7, #5
 800531c:	33ff      	adds	r3, #255	; 0xff
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b3e      	cmp	r3, #62	; 0x3e
 8005322:	d81a      	bhi.n	800535a <USB_EPStartXfer+0x5ce>
 8005324:	1d7b      	adds	r3, r7, #5
 8005326:	33ff      	adds	r3, #255	; 0xff
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	085b      	lsrs	r3, r3, #1
 800532c:	21f4      	movs	r1, #244	; 0xf4
 800532e:	187a      	adds	r2, r7, r1
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	1d7b      	adds	r3, r7, #5
 8005334:	33ff      	adds	r3, #255	; 0xff
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2201      	movs	r2, #1
 800533a:	4013      	ands	r3, r2
 800533c:	d004      	beq.n	8005348 <USB_EPStartXfer+0x5bc>
 800533e:	187b      	adds	r3, r7, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3301      	adds	r3, #1
 8005344:	187a      	adds	r2, r7, r1
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	23f4      	movs	r3, #244	; 0xf4
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	b29b      	uxth	r3, r3
 8005350:	029b      	lsls	r3, r3, #10
 8005352:	b29a      	uxth	r2, r3
 8005354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005356:	801a      	strh	r2, [r3, #0]
 8005358:	e038      	b.n	80053cc <USB_EPStartXfer+0x640>
 800535a:	1d7b      	adds	r3, r7, #5
 800535c:	33ff      	adds	r3, #255	; 0xff
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	095b      	lsrs	r3, r3, #5
 8005362:	21f4      	movs	r1, #244	; 0xf4
 8005364:	187a      	adds	r2, r7, r1
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	1d7b      	adds	r3, r7, #5
 800536a:	33ff      	adds	r3, #255	; 0xff
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	221f      	movs	r2, #31
 8005370:	4013      	ands	r3, r2
 8005372:	d104      	bne.n	800537e <USB_EPStartXfer+0x5f2>
 8005374:	187b      	adds	r3, r7, r1
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3b01      	subs	r3, #1
 800537a:	187a      	adds	r2, r7, r1
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	23f4      	movs	r3, #244	; 0xf4
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	b29b      	uxth	r3, r3
 8005386:	029b      	lsls	r3, r3, #10
 8005388:	b29b      	uxth	r3, r3
 800538a:	4a3f      	ldr	r2, [pc, #252]	; (8005488 <USB_EPStartXfer+0x6fc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	b29a      	uxth	r2, r3
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	801a      	strh	r2, [r3, #0]
 8005394:	e01a      	b.n	80053cc <USB_EPStartXfer+0x640>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	785b      	ldrb	r3, [r3, #1]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d116      	bne.n	80053cc <USB_EPStartXfer+0x640>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2250      	movs	r2, #80	; 0x50
 80053a2:	5a9b      	ldrh	r3, [r3, r2]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	001a      	movs	r2, r3
 80053a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	643b      	str	r3, [r7, #64]	; 0x40
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	00da      	lsls	r2, r3, #3
 80053b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b6:	18d3      	adds	r3, r2, r3
 80053b8:	4a34      	ldr	r2, [pc, #208]	; (800548c <USB_EPStartXfer+0x700>)
 80053ba:	4694      	mov	ip, r2
 80053bc:	4463      	add	r3, ip
 80053be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053c0:	1d7b      	adds	r3, r7, #5
 80053c2:	33ff      	adds	r3, #255	; 0xff
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053cc:	2076      	movs	r0, #118	; 0x76
 80053ce:	183b      	adds	r3, r7, r0
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	8952      	ldrh	r2, [r2, #10]
 80053d4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6959      	ldr	r1, [r3, #20]
 80053da:	1d7b      	adds	r3, r7, #5
 80053dc:	33ff      	adds	r3, #255	; 0xff
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	b29c      	uxth	r4, r3
 80053e2:	183b      	adds	r3, r7, r0
 80053e4:	881a      	ldrh	r2, [r3, #0]
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	0023      	movs	r3, r4
 80053ea:	f000 fec3 	bl	8006174 <USB_WritePMA>
 80053ee:	e1a2      	b.n	8005736 <USB_EPStartXfer+0x9aa>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	1d7a      	adds	r2, r7, #5
 80053f6:	32ff      	adds	r2, #255	; 0xff
 80053f8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	18d3      	adds	r3, r2, r3
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	b29a      	uxth	r2, r3
 8005408:	2062      	movs	r0, #98	; 0x62
 800540a:	183b      	adds	r3, r7, r0
 800540c:	4920      	ldr	r1, [pc, #128]	; (8005490 <USB_EPStartXfer+0x704>)
 800540e:	400a      	ands	r2, r1
 8005410:	801a      	strh	r2, [r3, #0]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	18d3      	adds	r3, r2, r3
 800541c:	183a      	adds	r2, r7, r0
 800541e:	8812      	ldrh	r2, [r2, #0]
 8005420:	491c      	ldr	r1, [pc, #112]	; (8005494 <USB_EPStartXfer+0x708>)
 8005422:	430a      	orrs	r2, r1
 8005424:	b292      	uxth	r2, r2
 8005426:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2250      	movs	r2, #80	; 0x50
 8005430:	5a9b      	ldrh	r3, [r3, r2]
 8005432:	b29b      	uxth	r3, r3
 8005434:	001a      	movs	r2, r3
 8005436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005438:	189b      	adds	r3, r3, r2
 800543a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	00da      	lsls	r2, r3, #3
 8005442:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005444:	18d3      	adds	r3, r2, r3
 8005446:	4a0e      	ldr	r2, [pc, #56]	; (8005480 <USB_EPStartXfer+0x6f4>)
 8005448:	4694      	mov	ip, r2
 800544a:	4463      	add	r3, ip
 800544c:	65bb      	str	r3, [r7, #88]	; 0x58
 800544e:	1d7b      	adds	r3, r7, #5
 8005450:	33ff      	adds	r3, #255	; 0xff
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005458:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800545a:	2076      	movs	r0, #118	; 0x76
 800545c:	183b      	adds	r3, r7, r0
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	8912      	ldrh	r2, [r2, #8]
 8005462:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6959      	ldr	r1, [r3, #20]
 8005468:	1d7b      	adds	r3, r7, #5
 800546a:	33ff      	adds	r3, #255	; 0xff
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	b29c      	uxth	r4, r3
 8005470:	183b      	adds	r3, r7, r0
 8005472:	881a      	ldrh	r2, [r3, #0]
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	0023      	movs	r3, r4
 8005478:	f000 fe7c 	bl	8006174 <USB_WritePMA>
 800547c:	e15b      	b.n	8005736 <USB_EPStartXfer+0x9aa>
 800547e:	46c0      	nop			; (mov r8, r8)
 8005480:	00000402 	.word	0x00000402
 8005484:	ffff83ff 	.word	0xffff83ff
 8005488:	ffff8000 	.word	0xffff8000
 800548c:	00000406 	.word	0x00000406
 8005490:	ffff8e8f 	.word	0xffff8e8f
 8005494:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	1d7b      	adds	r3, r7, #5
 800549e:	33ff      	adds	r3, #255	; 0xff
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	1ad2      	subs	r2, r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	18d3      	adds	r3, r2, r3
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	001a      	movs	r2, r3
 80054b8:	2340      	movs	r3, #64	; 0x40
 80054ba:	4013      	ands	r3, r2
 80054bc:	d100      	bne.n	80054c0 <USB_EPStartXfer+0x734>
 80054be:	e099      	b.n	80055f4 <USB_EPStartXfer+0x868>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	673b      	str	r3, [r7, #112]	; 0x70
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	785b      	ldrb	r3, [r3, #1]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d166      	bne.n	800559a <USB_EPStartXfer+0x80e>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2250      	movs	r2, #80	; 0x50
 80054d4:	5a9b      	ldrh	r3, [r3, r2]
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	001a      	movs	r2, r3
 80054da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054dc:	189b      	adds	r3, r3, r2
 80054de:	66bb      	str	r3, [r7, #104]	; 0x68
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	00da      	lsls	r2, r3, #3
 80054e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054e8:	18d3      	adds	r3, r2, r3
 80054ea:	4ad0      	ldr	r2, [pc, #832]	; (800582c <USB_EPStartXfer+0xaa0>)
 80054ec:	4694      	mov	ip, r2
 80054ee:	4463      	add	r3, ip
 80054f0:	667b      	str	r3, [r7, #100]	; 0x64
 80054f2:	1d7b      	adds	r3, r7, #5
 80054f4:	33ff      	adds	r3, #255	; 0xff
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d110      	bne.n	800551e <USB_EPStartXfer+0x792>
 80054fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	4acb      	ldr	r2, [pc, #812]	; (8005830 <USB_EPStartXfer+0xaa4>)
 8005504:	4013      	ands	r3, r2
 8005506:	b29a      	uxth	r2, r3
 8005508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550a:	801a      	strh	r2, [r3, #0]
 800550c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	4ac8      	ldr	r2, [pc, #800]	; (8005834 <USB_EPStartXfer+0xaa8>)
 8005514:	4313      	orrs	r3, r2
 8005516:	b29a      	uxth	r2, r3
 8005518:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	e058      	b.n	80055d0 <USB_EPStartXfer+0x844>
 800551e:	1d7b      	adds	r3, r7, #5
 8005520:	33ff      	adds	r3, #255	; 0xff
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b3e      	cmp	r3, #62	; 0x3e
 8005526:	d81a      	bhi.n	800555e <USB_EPStartXfer+0x7d2>
 8005528:	1d7b      	adds	r3, r7, #5
 800552a:	33ff      	adds	r3, #255	; 0xff
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	085b      	lsrs	r3, r3, #1
 8005530:	21f0      	movs	r1, #240	; 0xf0
 8005532:	187a      	adds	r2, r7, r1
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	1d7b      	adds	r3, r7, #5
 8005538:	33ff      	adds	r3, #255	; 0xff
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2201      	movs	r2, #1
 800553e:	4013      	ands	r3, r2
 8005540:	d004      	beq.n	800554c <USB_EPStartXfer+0x7c0>
 8005542:	187b      	adds	r3, r7, r1
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3301      	adds	r3, #1
 8005548:	187a      	adds	r2, r7, r1
 800554a:	6013      	str	r3, [r2, #0]
 800554c:	23f0      	movs	r3, #240	; 0xf0
 800554e:	18fb      	adds	r3, r7, r3
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	b29a      	uxth	r2, r3
 8005558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800555a:	801a      	strh	r2, [r3, #0]
 800555c:	e038      	b.n	80055d0 <USB_EPStartXfer+0x844>
 800555e:	1d7b      	adds	r3, r7, #5
 8005560:	33ff      	adds	r3, #255	; 0xff
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	21f0      	movs	r1, #240	; 0xf0
 8005568:	187a      	adds	r2, r7, r1
 800556a:	6013      	str	r3, [r2, #0]
 800556c:	1d7b      	adds	r3, r7, #5
 800556e:	33ff      	adds	r3, #255	; 0xff
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	221f      	movs	r2, #31
 8005574:	4013      	ands	r3, r2
 8005576:	d104      	bne.n	8005582 <USB_EPStartXfer+0x7f6>
 8005578:	187b      	adds	r3, r7, r1
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	3b01      	subs	r3, #1
 800557e:	187a      	adds	r2, r7, r1
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	23f0      	movs	r3, #240	; 0xf0
 8005584:	18fb      	adds	r3, r7, r3
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b29b      	uxth	r3, r3
 800558a:	029b      	lsls	r3, r3, #10
 800558c:	b29b      	uxth	r3, r3
 800558e:	4aa9      	ldr	r2, [pc, #676]	; (8005834 <USB_EPStartXfer+0xaa8>)
 8005590:	4313      	orrs	r3, r2
 8005592:	b29a      	uxth	r2, r3
 8005594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005596:	801a      	strh	r2, [r3, #0]
 8005598:	e01a      	b.n	80055d0 <USB_EPStartXfer+0x844>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d116      	bne.n	80055d0 <USB_EPStartXfer+0x844>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2250      	movs	r2, #80	; 0x50
 80055a6:	5a9b      	ldrh	r3, [r3, r2]
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	001a      	movs	r2, r3
 80055ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	673b      	str	r3, [r7, #112]	; 0x70
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	00da      	lsls	r2, r3, #3
 80055b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055ba:	18d3      	adds	r3, r2, r3
 80055bc:	4a9b      	ldr	r2, [pc, #620]	; (800582c <USB_EPStartXfer+0xaa0>)
 80055be:	4694      	mov	ip, r2
 80055c0:	4463      	add	r3, ip
 80055c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c4:	1d7b      	adds	r3, r7, #5
 80055c6:	33ff      	adds	r3, #255	; 0xff
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80055d0:	2076      	movs	r0, #118	; 0x76
 80055d2:	183b      	adds	r3, r7, r0
 80055d4:	683a      	ldr	r2, [r7, #0]
 80055d6:	8952      	ldrh	r2, [r2, #10]
 80055d8:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6959      	ldr	r1, [r3, #20]
 80055de:	1d7b      	adds	r3, r7, #5
 80055e0:	33ff      	adds	r3, #255	; 0xff
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	b29c      	uxth	r4, r3
 80055e6:	183b      	adds	r3, r7, r0
 80055e8:	881a      	ldrh	r2, [r3, #0]
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	0023      	movs	r3, r4
 80055ee:	f000 fdc1 	bl	8006174 <USB_WritePMA>
 80055f2:	e0a0      	b.n	8005736 <USB_EPStartXfer+0x9aa>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d166      	bne.n	80056ca <USB_EPStartXfer+0x93e>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2250      	movs	r2, #80	; 0x50
 8005604:	5a9b      	ldrh	r3, [r3, r2]
 8005606:	b29b      	uxth	r3, r3
 8005608:	001a      	movs	r2, r3
 800560a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800560c:	189b      	adds	r3, r3, r2
 800560e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00da      	lsls	r2, r3, #3
 8005616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005618:	18d3      	adds	r3, r2, r3
 800561a:	4a87      	ldr	r2, [pc, #540]	; (8005838 <USB_EPStartXfer+0xaac>)
 800561c:	4694      	mov	ip, r2
 800561e:	4463      	add	r3, ip
 8005620:	67bb      	str	r3, [r7, #120]	; 0x78
 8005622:	1d7b      	adds	r3, r7, #5
 8005624:	33ff      	adds	r3, #255	; 0xff
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d110      	bne.n	800564e <USB_EPStartXfer+0x8c2>
 800562c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800562e:	881b      	ldrh	r3, [r3, #0]
 8005630:	b29b      	uxth	r3, r3
 8005632:	4a7f      	ldr	r2, [pc, #508]	; (8005830 <USB_EPStartXfer+0xaa4>)
 8005634:	4013      	ands	r3, r2
 8005636:	b29a      	uxth	r2, r3
 8005638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	4a7c      	ldr	r2, [pc, #496]	; (8005834 <USB_EPStartXfer+0xaa8>)
 8005644:	4313      	orrs	r3, r2
 8005646:	b29a      	uxth	r2, r3
 8005648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e062      	b.n	8005714 <USB_EPStartXfer+0x988>
 800564e:	1d7b      	adds	r3, r7, #5
 8005650:	33ff      	adds	r3, #255	; 0xff
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b3e      	cmp	r3, #62	; 0x3e
 8005656:	d81a      	bhi.n	800568e <USB_EPStartXfer+0x902>
 8005658:	1d7b      	adds	r3, r7, #5
 800565a:	33ff      	adds	r3, #255	; 0xff
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	21ec      	movs	r1, #236	; 0xec
 8005662:	187a      	adds	r2, r7, r1
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	1d7b      	adds	r3, r7, #5
 8005668:	33ff      	adds	r3, #255	; 0xff
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2201      	movs	r2, #1
 800566e:	4013      	ands	r3, r2
 8005670:	d004      	beq.n	800567c <USB_EPStartXfer+0x8f0>
 8005672:	187b      	adds	r3, r7, r1
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3301      	adds	r3, #1
 8005678:	187a      	adds	r2, r7, r1
 800567a:	6013      	str	r3, [r2, #0]
 800567c:	23ec      	movs	r3, #236	; 0xec
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	029b      	lsls	r3, r3, #10
 8005686:	b29a      	uxth	r2, r3
 8005688:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e042      	b.n	8005714 <USB_EPStartXfer+0x988>
 800568e:	1d7b      	adds	r3, r7, #5
 8005690:	33ff      	adds	r3, #255	; 0xff
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	095b      	lsrs	r3, r3, #5
 8005696:	21ec      	movs	r1, #236	; 0xec
 8005698:	187a      	adds	r2, r7, r1
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	1d7b      	adds	r3, r7, #5
 800569e:	33ff      	adds	r3, #255	; 0xff
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	221f      	movs	r2, #31
 80056a4:	4013      	ands	r3, r2
 80056a6:	d104      	bne.n	80056b2 <USB_EPStartXfer+0x926>
 80056a8:	187b      	adds	r3, r7, r1
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	187a      	adds	r2, r7, r1
 80056b0:	6013      	str	r3, [r2, #0]
 80056b2:	23ec      	movs	r3, #236	; 0xec
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	029b      	lsls	r3, r3, #10
 80056bc:	b29b      	uxth	r3, r3
 80056be:	4a5d      	ldr	r2, [pc, #372]	; (8005834 <USB_EPStartXfer+0xaa8>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	b29a      	uxth	r2, r3
 80056c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c6:	801a      	strh	r2, [r3, #0]
 80056c8:	e024      	b.n	8005714 <USB_EPStartXfer+0x988>
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	785b      	ldrb	r3, [r3, #1]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d120      	bne.n	8005714 <USB_EPStartXfer+0x988>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2184      	movs	r1, #132	; 0x84
 80056d6:	187a      	adds	r2, r7, r1
 80056d8:	6013      	str	r3, [r2, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2250      	movs	r2, #80	; 0x50
 80056de:	5a9b      	ldrh	r3, [r3, r2]
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	001a      	movs	r2, r3
 80056e4:	187b      	adds	r3, r7, r1
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	189b      	adds	r3, r3, r2
 80056ea:	187a      	adds	r2, r7, r1
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	00da      	lsls	r2, r3, #3
 80056f4:	187b      	adds	r3, r7, r1
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	18d3      	adds	r3, r2, r3
 80056fa:	4a4f      	ldr	r2, [pc, #316]	; (8005838 <USB_EPStartXfer+0xaac>)
 80056fc:	4694      	mov	ip, r2
 80056fe:	4463      	add	r3, ip
 8005700:	2180      	movs	r1, #128	; 0x80
 8005702:	187a      	adds	r2, r7, r1
 8005704:	6013      	str	r3, [r2, #0]
 8005706:	1d7b      	adds	r3, r7, #5
 8005708:	33ff      	adds	r3, #255	; 0xff
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	b29a      	uxth	r2, r3
 800570e:	187b      	adds	r3, r7, r1
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005714:	2076      	movs	r0, #118	; 0x76
 8005716:	183b      	adds	r3, r7, r0
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	8912      	ldrh	r2, [r2, #8]
 800571c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6959      	ldr	r1, [r3, #20]
 8005722:	1d7b      	adds	r3, r7, #5
 8005724:	33ff      	adds	r3, #255	; 0xff
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	b29c      	uxth	r4, r3
 800572a:	183b      	adds	r3, r7, r0
 800572c:	881a      	ldrh	r2, [r3, #0]
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	0023      	movs	r3, r4
 8005732:	f000 fd1f 	bl	8006174 <USB_WritePMA>
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	18d3      	adds	r3, r2, r3
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	200a      	movs	r0, #10
 8005746:	183b      	adds	r3, r7, r0
 8005748:	493c      	ldr	r1, [pc, #240]	; (800583c <USB_EPStartXfer+0xab0>)
 800574a:	400a      	ands	r2, r1
 800574c:	801a      	strh	r2, [r3, #0]
 800574e:	183b      	adds	r3, r7, r0
 8005750:	183a      	adds	r2, r7, r0
 8005752:	8812      	ldrh	r2, [r2, #0]
 8005754:	2110      	movs	r1, #16
 8005756:	404a      	eors	r2, r1
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	183b      	adds	r3, r7, r0
 800575c:	183a      	adds	r2, r7, r0
 800575e:	8812      	ldrh	r2, [r2, #0]
 8005760:	2120      	movs	r1, #32
 8005762:	404a      	eors	r2, r1
 8005764:	801a      	strh	r2, [r3, #0]
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	18d3      	adds	r3, r2, r3
 8005770:	183a      	adds	r2, r7, r0
 8005772:	8812      	ldrh	r2, [r2, #0]
 8005774:	4932      	ldr	r1, [pc, #200]	; (8005840 <USB_EPStartXfer+0xab4>)
 8005776:	430a      	orrs	r2, r1
 8005778:	b292      	uxth	r2, r2
 800577a:	801a      	strh	r2, [r3, #0]
 800577c:	f000 fbaf 	bl	8005ede <USB_EPStartXfer+0x1152>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	7b1b      	ldrb	r3, [r3, #12]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d000      	beq.n	800578a <USB_EPStartXfer+0x9fe>
 8005788:	e09e      	b.n	80058c8 <USB_EPStartXfer+0xb3c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	699a      	ldr	r2, [r3, #24]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	429a      	cmp	r2, r3
 8005794:	d90d      	bls.n	80057b2 <USB_EPStartXfer+0xa26>
      {
        len = ep->maxpacket;
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	1d7a      	adds	r2, r7, #5
 800579c:	32ff      	adds	r2, #255	; 0xff
 800579e:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	1d7b      	adds	r3, r7, #5
 80057a6:	33ff      	adds	r3, #255	; 0xff
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	1ad2      	subs	r2, r2, r3
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	619a      	str	r2, [r3, #24]
 80057b0:	e007      	b.n	80057c2 <USB_EPStartXfer+0xa36>
      }
      else
      {
        len = ep->xfer_len;
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	1d7a      	adds	r2, r7, #5
 80057b8:	32ff      	adds	r2, #255	; 0xff
 80057ba:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2200      	movs	r2, #0
 80057c0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2190      	movs	r1, #144	; 0x90
 80057c6:	187a      	adds	r2, r7, r1
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2250      	movs	r2, #80	; 0x50
 80057ce:	5a9b      	ldrh	r3, [r3, r2]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	001a      	movs	r2, r3
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	189b      	adds	r3, r3, r2
 80057da:	187a      	adds	r2, r7, r1
 80057dc:	6013      	str	r3, [r2, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	00da      	lsls	r2, r3, #3
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	18d3      	adds	r3, r2, r3
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <USB_EPStartXfer+0xaa0>)
 80057ec:	4694      	mov	ip, r2
 80057ee:	4463      	add	r3, ip
 80057f0:	218c      	movs	r1, #140	; 0x8c
 80057f2:	187a      	adds	r2, r7, r1
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	1d7b      	adds	r3, r7, #5
 80057f8:	33ff      	adds	r3, #255	; 0xff
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d121      	bne.n	8005844 <USB_EPStartXfer+0xab8>
 8005800:	187b      	adds	r3, r7, r1
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	4a09      	ldr	r2, [pc, #36]	; (8005830 <USB_EPStartXfer+0xaa4>)
 800580a:	4013      	ands	r3, r2
 800580c:	b29a      	uxth	r2, r3
 800580e:	187b      	adds	r3, r7, r1
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	801a      	strh	r2, [r3, #0]
 8005814:	187b      	adds	r3, r7, r1
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	4a05      	ldr	r2, [pc, #20]	; (8005834 <USB_EPStartXfer+0xaa8>)
 800581e:	4313      	orrs	r3, r2
 8005820:	b29a      	uxth	r2, r3
 8005822:	187b      	adds	r3, r7, r1
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	801a      	strh	r2, [r3, #0]
 8005828:	e334      	b.n	8005e94 <USB_EPStartXfer+0x1108>
 800582a:	46c0      	nop			; (mov r8, r8)
 800582c:	00000406 	.word	0x00000406
 8005830:	ffff83ff 	.word	0xffff83ff
 8005834:	ffff8000 	.word	0xffff8000
 8005838:	00000402 	.word	0x00000402
 800583c:	ffff8fbf 	.word	0xffff8fbf
 8005840:	ffff8080 	.word	0xffff8080
 8005844:	1d7b      	adds	r3, r7, #5
 8005846:	33ff      	adds	r3, #255	; 0xff
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b3e      	cmp	r3, #62	; 0x3e
 800584c:	d81c      	bhi.n	8005888 <USB_EPStartXfer+0xafc>
 800584e:	1d7b      	adds	r3, r7, #5
 8005850:	33ff      	adds	r3, #255	; 0xff
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	21e8      	movs	r1, #232	; 0xe8
 8005858:	187a      	adds	r2, r7, r1
 800585a:	6013      	str	r3, [r2, #0]
 800585c:	1d7b      	adds	r3, r7, #5
 800585e:	33ff      	adds	r3, #255	; 0xff
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	4013      	ands	r3, r2
 8005866:	d004      	beq.n	8005872 <USB_EPStartXfer+0xae6>
 8005868:	187b      	adds	r3, r7, r1
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3301      	adds	r3, #1
 800586e:	187a      	adds	r2, r7, r1
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	23e8      	movs	r3, #232	; 0xe8
 8005874:	18fb      	adds	r3, r7, r3
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	029b      	lsls	r3, r3, #10
 800587c:	b29a      	uxth	r2, r3
 800587e:	238c      	movs	r3, #140	; 0x8c
 8005880:	18fb      	adds	r3, r7, r3
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	801a      	strh	r2, [r3, #0]
 8005886:	e305      	b.n	8005e94 <USB_EPStartXfer+0x1108>
 8005888:	1d7b      	adds	r3, r7, #5
 800588a:	33ff      	adds	r3, #255	; 0xff
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	095b      	lsrs	r3, r3, #5
 8005890:	21e8      	movs	r1, #232	; 0xe8
 8005892:	187a      	adds	r2, r7, r1
 8005894:	6013      	str	r3, [r2, #0]
 8005896:	1d7b      	adds	r3, r7, #5
 8005898:	33ff      	adds	r3, #255	; 0xff
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	221f      	movs	r2, #31
 800589e:	4013      	ands	r3, r2
 80058a0:	d104      	bne.n	80058ac <USB_EPStartXfer+0xb20>
 80058a2:	187b      	adds	r3, r7, r1
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3b01      	subs	r3, #1
 80058a8:	187a      	adds	r2, r7, r1
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	23e8      	movs	r3, #232	; 0xe8
 80058ae:	18fb      	adds	r3, r7, r3
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	029b      	lsls	r3, r3, #10
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	4aca      	ldr	r2, [pc, #808]	; (8005be4 <USB_EPStartXfer+0xe58>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	238c      	movs	r3, #140	; 0x8c
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	801a      	strh	r2, [r3, #0]
 80058c6:	e2e5      	b.n	8005e94 <USB_EPStartXfer+0x1108>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	78db      	ldrb	r3, [r3, #3]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d000      	beq.n	80058d2 <USB_EPStartXfer+0xb46>
 80058d0:	e16f      	b.n	8005bb2 <USB_EPStartXfer+0xe26>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	785b      	ldrb	r3, [r3, #1]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d16f      	bne.n	80059ba <USB_EPStartXfer+0xc2e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	21ac      	movs	r1, #172	; 0xac
 80058de:	187a      	adds	r2, r7, r1
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2250      	movs	r2, #80	; 0x50
 80058e6:	5a9b      	ldrh	r3, [r3, r2]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	001a      	movs	r2, r3
 80058ec:	187b      	adds	r3, r7, r1
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	189b      	adds	r3, r3, r2
 80058f2:	187a      	adds	r2, r7, r1
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	00da      	lsls	r2, r3, #3
 80058fc:	187b      	adds	r3, r7, r1
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	18d3      	adds	r3, r2, r3
 8005902:	4ab9      	ldr	r2, [pc, #740]	; (8005be8 <USB_EPStartXfer+0xe5c>)
 8005904:	4694      	mov	ip, r2
 8005906:	4463      	add	r3, ip
 8005908:	21a8      	movs	r1, #168	; 0xa8
 800590a:	187a      	adds	r2, r7, r1
 800590c:	6013      	str	r3, [r2, #0]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d114      	bne.n	8005940 <USB_EPStartXfer+0xbb4>
 8005916:	187b      	adds	r3, r7, r1
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	b29b      	uxth	r3, r3
 800591e:	4ab3      	ldr	r2, [pc, #716]	; (8005bec <USB_EPStartXfer+0xe60>)
 8005920:	4013      	ands	r3, r2
 8005922:	b29a      	uxth	r2, r3
 8005924:	187b      	adds	r3, r7, r1
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	801a      	strh	r2, [r3, #0]
 800592a:	187b      	adds	r3, r7, r1
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	b29b      	uxth	r3, r3
 8005932:	4aac      	ldr	r2, [pc, #688]	; (8005be4 <USB_EPStartXfer+0xe58>)
 8005934:	4313      	orrs	r3, r2
 8005936:	b29a      	uxth	r2, r3
 8005938:	187b      	adds	r3, r7, r1
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	801a      	strh	r2, [r3, #0]
 800593e:	e060      	b.n	8005a02 <USB_EPStartXfer+0xc76>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	2b3e      	cmp	r3, #62	; 0x3e
 8005946:	d81a      	bhi.n	800597e <USB_EPStartXfer+0xbf2>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	21e4      	movs	r1, #228	; 0xe4
 8005950:	187a      	adds	r2, r7, r1
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	2201      	movs	r2, #1
 800595a:	4013      	ands	r3, r2
 800595c:	d004      	beq.n	8005968 <USB_EPStartXfer+0xbdc>
 800595e:	187b      	adds	r3, r7, r1
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	187a      	adds	r2, r7, r1
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	23e4      	movs	r3, #228	; 0xe4
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	b29a      	uxth	r2, r3
 8005974:	23a8      	movs	r3, #168	; 0xa8
 8005976:	18fb      	adds	r3, r7, r3
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	e041      	b.n	8005a02 <USB_EPStartXfer+0xc76>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	21e4      	movs	r1, #228	; 0xe4
 8005986:	187a      	adds	r2, r7, r1
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	221f      	movs	r2, #31
 8005990:	4013      	ands	r3, r2
 8005992:	d104      	bne.n	800599e <USB_EPStartXfer+0xc12>
 8005994:	187b      	adds	r3, r7, r1
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3b01      	subs	r3, #1
 800599a:	187a      	adds	r2, r7, r1
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	23e4      	movs	r3, #228	; 0xe4
 80059a0:	18fb      	adds	r3, r7, r3
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	029b      	lsls	r3, r3, #10
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	4a8e      	ldr	r2, [pc, #568]	; (8005be4 <USB_EPStartXfer+0xe58>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	23a8      	movs	r3, #168	; 0xa8
 80059b2:	18fb      	adds	r3, r7, r3
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	801a      	strh	r2, [r3, #0]
 80059b8:	e023      	b.n	8005a02 <USB_EPStartXfer+0xc76>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	785b      	ldrb	r3, [r3, #1]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d11f      	bne.n	8005a02 <USB_EPStartXfer+0xc76>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	21b4      	movs	r1, #180	; 0xb4
 80059c6:	187a      	adds	r2, r7, r1
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2250      	movs	r2, #80	; 0x50
 80059ce:	5a9b      	ldrh	r3, [r3, r2]
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	001a      	movs	r2, r3
 80059d4:	187b      	adds	r3, r7, r1
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	189b      	adds	r3, r3, r2
 80059da:	187a      	adds	r2, r7, r1
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00da      	lsls	r2, r3, #3
 80059e4:	187b      	adds	r3, r7, r1
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	18d3      	adds	r3, r2, r3
 80059ea:	4a7f      	ldr	r2, [pc, #508]	; (8005be8 <USB_EPStartXfer+0xe5c>)
 80059ec:	4694      	mov	ip, r2
 80059ee:	4463      	add	r3, ip
 80059f0:	21b0      	movs	r1, #176	; 0xb0
 80059f2:	187a      	adds	r2, r7, r1
 80059f4:	6013      	str	r3, [r2, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	b29a      	uxth	r2, r3
 80059fc:	187b      	adds	r3, r7, r1
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	801a      	strh	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	22a4      	movs	r2, #164	; 0xa4
 8005a06:	18ba      	adds	r2, r7, r2
 8005a08:	6013      	str	r3, [r2, #0]
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d16f      	bne.n	8005af2 <USB_EPStartXfer+0xd66>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	219c      	movs	r1, #156	; 0x9c
 8005a16:	187a      	adds	r2, r7, r1
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2250      	movs	r2, #80	; 0x50
 8005a1e:	5a9b      	ldrh	r3, [r3, r2]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	001a      	movs	r2, r3
 8005a24:	187b      	adds	r3, r7, r1
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	189b      	adds	r3, r3, r2
 8005a2a:	187a      	adds	r2, r7, r1
 8005a2c:	6013      	str	r3, [r2, #0]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	00da      	lsls	r2, r3, #3
 8005a34:	187b      	adds	r3, r7, r1
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	18d3      	adds	r3, r2, r3
 8005a3a:	4a6d      	ldr	r2, [pc, #436]	; (8005bf0 <USB_EPStartXfer+0xe64>)
 8005a3c:	4694      	mov	ip, r2
 8005a3e:	4463      	add	r3, ip
 8005a40:	2198      	movs	r1, #152	; 0x98
 8005a42:	187a      	adds	r2, r7, r1
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d114      	bne.n	8005a78 <USB_EPStartXfer+0xcec>
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	881b      	ldrh	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4a65      	ldr	r2, [pc, #404]	; (8005bec <USB_EPStartXfer+0xe60>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	801a      	strh	r2, [r3, #0]
 8005a62:	187b      	adds	r3, r7, r1
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4a5e      	ldr	r2, [pc, #376]	; (8005be4 <USB_EPStartXfer+0xe58>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	187b      	adds	r3, r7, r1
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	801a      	strh	r2, [r3, #0]
 8005a76:	e05d      	b.n	8005b34 <USB_EPStartXfer+0xda8>
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a7e:	d81a      	bhi.n	8005ab6 <USB_EPStartXfer+0xd2a>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	085b      	lsrs	r3, r3, #1
 8005a86:	21e0      	movs	r1, #224	; 0xe0
 8005a88:	187a      	adds	r2, r7, r1
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2201      	movs	r2, #1
 8005a92:	4013      	ands	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <USB_EPStartXfer+0xd14>
 8005a96:	187b      	adds	r3, r7, r1
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	3301      	adds	r3, #1
 8005a9c:	187a      	adds	r2, r7, r1
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	23e0      	movs	r3, #224	; 0xe0
 8005aa2:	18fb      	adds	r3, r7, r3
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	2398      	movs	r3, #152	; 0x98
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	801a      	strh	r2, [r3, #0]
 8005ab4:	e03e      	b.n	8005b34 <USB_EPStartXfer+0xda8>
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	21e0      	movs	r1, #224	; 0xe0
 8005abe:	187a      	adds	r2, r7, r1
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	221f      	movs	r2, #31
 8005ac8:	4013      	ands	r3, r2
 8005aca:	d104      	bne.n	8005ad6 <USB_EPStartXfer+0xd4a>
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	187a      	adds	r2, r7, r1
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	23e0      	movs	r3, #224	; 0xe0
 8005ad8:	18fb      	adds	r3, r7, r3
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	029b      	lsls	r3, r3, #10
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	4a40      	ldr	r2, [pc, #256]	; (8005be4 <USB_EPStartXfer+0xe58>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	2398      	movs	r3, #152	; 0x98
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	801a      	strh	r2, [r3, #0]
 8005af0:	e020      	b.n	8005b34 <USB_EPStartXfer+0xda8>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d11c      	bne.n	8005b34 <USB_EPStartXfer+0xda8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2250      	movs	r2, #80	; 0x50
 8005afe:	5a9b      	ldrh	r3, [r3, r2]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	001a      	movs	r2, r3
 8005b04:	21a4      	movs	r1, #164	; 0xa4
 8005b06:	187b      	adds	r3, r7, r1
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	189b      	adds	r3, r3, r2
 8005b0c:	187a      	adds	r2, r7, r1
 8005b0e:	6013      	str	r3, [r2, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	00da      	lsls	r2, r3, #3
 8005b16:	187b      	adds	r3, r7, r1
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	18d3      	adds	r3, r2, r3
 8005b1c:	4a34      	ldr	r2, [pc, #208]	; (8005bf0 <USB_EPStartXfer+0xe64>)
 8005b1e:	4694      	mov	ip, r2
 8005b20:	4463      	add	r3, ip
 8005b22:	21a0      	movs	r1, #160	; 0xa0
 8005b24:	187a      	adds	r2, r7, r1
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d100      	bne.n	8005b3e <USB_EPStartXfer+0xdb2>
 8005b3c:	e1aa      	b.n	8005e94 <USB_EPStartXfer+0x1108>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	18d2      	adds	r2, r2, r3
 8005b48:	2196      	movs	r1, #150	; 0x96
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	8812      	ldrh	r2, [r2, #0]
 8005b4e:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	881a      	ldrh	r2, [r3, #0]
 8005b54:	2380      	movs	r3, #128	; 0x80
 8005b56:	01db      	lsls	r3, r3, #7
 8005b58:	4013      	ands	r3, r2
 8005b5a:	d004      	beq.n	8005b66 <USB_EPStartXfer+0xdda>
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	2240      	movs	r2, #64	; 0x40
 8005b62:	4013      	ands	r3, r2
 8005b64:	d10d      	bne.n	8005b82 <USB_EPStartXfer+0xdf6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b66:	2196      	movs	r1, #150	; 0x96
 8005b68:	187b      	adds	r3, r7, r1
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	2380      	movs	r3, #128	; 0x80
 8005b6e:	01db      	lsls	r3, r3, #7
 8005b70:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b72:	d000      	beq.n	8005b76 <USB_EPStartXfer+0xdea>
 8005b74:	e18e      	b.n	8005e94 <USB_EPStartXfer+0x1108>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b76:	187b      	adds	r3, r7, r1
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	2240      	movs	r2, #64	; 0x40
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	d000      	beq.n	8005b82 <USB_EPStartXfer+0xdf6>
 8005b80:	e188      	b.n	8005e94 <USB_EPStartXfer+0x1108>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	18d3      	adds	r3, r2, r3
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	2094      	movs	r0, #148	; 0x94
 8005b92:	183b      	adds	r3, r7, r0
 8005b94:	4917      	ldr	r1, [pc, #92]	; (8005bf4 <USB_EPStartXfer+0xe68>)
 8005b96:	400a      	ands	r2, r1
 8005b98:	801a      	strh	r2, [r3, #0]
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	18d3      	adds	r3, r2, r3
 8005ba4:	183a      	adds	r2, r7, r0
 8005ba6:	8812      	ldrh	r2, [r2, #0]
 8005ba8:	4913      	ldr	r1, [pc, #76]	; (8005bf8 <USB_EPStartXfer+0xe6c>)
 8005baa:	430a      	orrs	r2, r1
 8005bac:	b292      	uxth	r2, r2
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	e170      	b.n	8005e94 <USB_EPStartXfer+0x1108>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	78db      	ldrb	r3, [r3, #3]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d000      	beq.n	8005bbc <USB_EPStartXfer+0xe30>
 8005bba:	e169      	b.n	8005e90 <USB_EPStartXfer+0x1104>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699a      	ldr	r2, [r3, #24]
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d919      	bls.n	8005bfc <USB_EPStartXfer+0xe70>
        {
          len = ep->maxpacket;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	1d7a      	adds	r2, r7, #5
 8005bce:	32ff      	adds	r2, #255	; 0xff
 8005bd0:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	1d7b      	adds	r3, r7, #5
 8005bd8:	33ff      	adds	r3, #255	; 0xff
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	1ad2      	subs	r2, r2, r3
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	619a      	str	r2, [r3, #24]
 8005be2:	e013      	b.n	8005c0c <USB_EPStartXfer+0xe80>
 8005be4:	ffff8000 	.word	0xffff8000
 8005be8:	00000402 	.word	0x00000402
 8005bec:	ffff83ff 	.word	0xffff83ff
 8005bf0:	00000406 	.word	0x00000406
 8005bf4:	ffff8f8f 	.word	0xffff8f8f
 8005bf8:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	1d7a      	adds	r2, r7, #5
 8005c02:	32ff      	adds	r2, #255	; 0xff
 8005c04:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d000      	beq.n	8005c16 <USB_EPStartXfer+0xe8a>
 8005c14:	e075      	b.n	8005d02 <USB_EPStartXfer+0xf76>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	21cc      	movs	r1, #204	; 0xcc
 8005c1a:	187a      	adds	r2, r7, r1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2250      	movs	r2, #80	; 0x50
 8005c22:	5a9b      	ldrh	r3, [r3, r2]
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	001a      	movs	r2, r3
 8005c28:	187b      	adds	r3, r7, r1
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	189b      	adds	r3, r3, r2
 8005c2e:	187a      	adds	r2, r7, r1
 8005c30:	6013      	str	r3, [r2, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	00da      	lsls	r2, r3, #3
 8005c38:	187b      	adds	r3, r7, r1
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	18d3      	adds	r3, r2, r3
 8005c3e:	4aaa      	ldr	r2, [pc, #680]	; (8005ee8 <USB_EPStartXfer+0x115c>)
 8005c40:	4694      	mov	ip, r2
 8005c42:	4463      	add	r3, ip
 8005c44:	21c8      	movs	r1, #200	; 0xc8
 8005c46:	187a      	adds	r2, r7, r1
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	1d7b      	adds	r3, r7, #5
 8005c4c:	33ff      	adds	r3, #255	; 0xff
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d114      	bne.n	8005c7e <USB_EPStartXfer+0xef2>
 8005c54:	187b      	adds	r3, r7, r1
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	4aa3      	ldr	r2, [pc, #652]	; (8005eec <USB_EPStartXfer+0x1160>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	187b      	adds	r3, r7, r1
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	801a      	strh	r2, [r3, #0]
 8005c68:	187b      	adds	r3, r7, r1
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	4a9f      	ldr	r2, [pc, #636]	; (8005ef0 <USB_EPStartXfer+0x1164>)
 8005c72:	4313      	orrs	r3, r2
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	187b      	adds	r3, r7, r1
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	801a      	strh	r2, [r3, #0]
 8005c7c:	e066      	b.n	8005d4c <USB_EPStartXfer+0xfc0>
 8005c7e:	1d7b      	adds	r3, r7, #5
 8005c80:	33ff      	adds	r3, #255	; 0xff
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b3e      	cmp	r3, #62	; 0x3e
 8005c86:	d81c      	bhi.n	8005cc2 <USB_EPStartXfer+0xf36>
 8005c88:	1d7b      	adds	r3, r7, #5
 8005c8a:	33ff      	adds	r3, #255	; 0xff
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	21dc      	movs	r1, #220	; 0xdc
 8005c92:	187a      	adds	r2, r7, r1
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	1d7b      	adds	r3, r7, #5
 8005c98:	33ff      	adds	r3, #255	; 0xff
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d004      	beq.n	8005cac <USB_EPStartXfer+0xf20>
 8005ca2:	187b      	adds	r3, r7, r1
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	187a      	adds	r2, r7, r1
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	23dc      	movs	r3, #220	; 0xdc
 8005cae:	18fb      	adds	r3, r7, r3
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	029b      	lsls	r3, r3, #10
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	23c8      	movs	r3, #200	; 0xc8
 8005cba:	18fb      	adds	r3, r7, r3
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	801a      	strh	r2, [r3, #0]
 8005cc0:	e044      	b.n	8005d4c <USB_EPStartXfer+0xfc0>
 8005cc2:	1d7b      	adds	r3, r7, #5
 8005cc4:	33ff      	adds	r3, #255	; 0xff
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	21dc      	movs	r1, #220	; 0xdc
 8005ccc:	187a      	adds	r2, r7, r1
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	1d7b      	adds	r3, r7, #5
 8005cd2:	33ff      	adds	r3, #255	; 0xff
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	221f      	movs	r2, #31
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d104      	bne.n	8005ce6 <USB_EPStartXfer+0xf5a>
 8005cdc:	187b      	adds	r3, r7, r1
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	187a      	adds	r2, r7, r1
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	23dc      	movs	r3, #220	; 0xdc
 8005ce8:	18fb      	adds	r3, r7, r3
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	4a7f      	ldr	r2, [pc, #508]	; (8005ef0 <USB_EPStartXfer+0x1164>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	23c8      	movs	r3, #200	; 0xc8
 8005cfa:	18fb      	adds	r3, r7, r3
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	801a      	strh	r2, [r3, #0]
 8005d00:	e024      	b.n	8005d4c <USB_EPStartXfer+0xfc0>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	785b      	ldrb	r3, [r3, #1]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d120      	bne.n	8005d4c <USB_EPStartXfer+0xfc0>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	21d4      	movs	r1, #212	; 0xd4
 8005d0e:	187a      	adds	r2, r7, r1
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2250      	movs	r2, #80	; 0x50
 8005d16:	5a9b      	ldrh	r3, [r3, r2]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	001a      	movs	r2, r3
 8005d1c:	187b      	adds	r3, r7, r1
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	189b      	adds	r3, r3, r2
 8005d22:	187a      	adds	r2, r7, r1
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	00da      	lsls	r2, r3, #3
 8005d2c:	187b      	adds	r3, r7, r1
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	18d3      	adds	r3, r2, r3
 8005d32:	4a6d      	ldr	r2, [pc, #436]	; (8005ee8 <USB_EPStartXfer+0x115c>)
 8005d34:	4694      	mov	ip, r2
 8005d36:	4463      	add	r3, ip
 8005d38:	21d0      	movs	r1, #208	; 0xd0
 8005d3a:	187a      	adds	r2, r7, r1
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	1d7b      	adds	r3, r7, #5
 8005d40:	33ff      	adds	r3, #255	; 0xff
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	b29a      	uxth	r2, r3
 8005d46:	187b      	adds	r3, r7, r1
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	801a      	strh	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	22c4      	movs	r2, #196	; 0xc4
 8005d50:	18ba      	adds	r2, r7, r2
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	785b      	ldrb	r3, [r3, #1]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d000      	beq.n	8005d5e <USB_EPStartXfer+0xfd2>
 8005d5c:	e075      	b.n	8005e4a <USB_EPStartXfer+0x10be>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	21bc      	movs	r1, #188	; 0xbc
 8005d62:	187a      	adds	r2, r7, r1
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2250      	movs	r2, #80	; 0x50
 8005d6a:	5a9b      	ldrh	r3, [r3, r2]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	001a      	movs	r2, r3
 8005d70:	187b      	adds	r3, r7, r1
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	189b      	adds	r3, r3, r2
 8005d76:	187a      	adds	r2, r7, r1
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	00da      	lsls	r2, r3, #3
 8005d80:	187b      	adds	r3, r7, r1
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	18d3      	adds	r3, r2, r3
 8005d86:	4a5b      	ldr	r2, [pc, #364]	; (8005ef4 <USB_EPStartXfer+0x1168>)
 8005d88:	4694      	mov	ip, r2
 8005d8a:	4463      	add	r3, ip
 8005d8c:	21b8      	movs	r1, #184	; 0xb8
 8005d8e:	187a      	adds	r2, r7, r1
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	1d7b      	adds	r3, r7, #5
 8005d94:	33ff      	adds	r3, #255	; 0xff
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d114      	bne.n	8005dc6 <USB_EPStartXfer+0x103a>
 8005d9c:	187b      	adds	r3, r7, r1
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	4a51      	ldr	r2, [pc, #324]	; (8005eec <USB_EPStartXfer+0x1160>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	187b      	adds	r3, r7, r1
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	801a      	strh	r2, [r3, #0]
 8005db0:	187b      	adds	r3, r7, r1
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	4a4d      	ldr	r2, [pc, #308]	; (8005ef0 <USB_EPStartXfer+0x1164>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	187b      	adds	r3, r7, r1
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	801a      	strh	r2, [r3, #0]
 8005dc4:	e066      	b.n	8005e94 <USB_EPStartXfer+0x1108>
 8005dc6:	1d7b      	adds	r3, r7, #5
 8005dc8:	33ff      	adds	r3, #255	; 0xff
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b3e      	cmp	r3, #62	; 0x3e
 8005dce:	d81c      	bhi.n	8005e0a <USB_EPStartXfer+0x107e>
 8005dd0:	1d7b      	adds	r3, r7, #5
 8005dd2:	33ff      	adds	r3, #255	; 0xff
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	21d8      	movs	r1, #216	; 0xd8
 8005dda:	187a      	adds	r2, r7, r1
 8005ddc:	6013      	str	r3, [r2, #0]
 8005dde:	1d7b      	adds	r3, r7, #5
 8005de0:	33ff      	adds	r3, #255	; 0xff
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	4013      	ands	r3, r2
 8005de8:	d004      	beq.n	8005df4 <USB_EPStartXfer+0x1068>
 8005dea:	187b      	adds	r3, r7, r1
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	3301      	adds	r3, #1
 8005df0:	187a      	adds	r2, r7, r1
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	23d8      	movs	r3, #216	; 0xd8
 8005df6:	18fb      	adds	r3, r7, r3
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	029b      	lsls	r3, r3, #10
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	23b8      	movs	r3, #184	; 0xb8
 8005e02:	18fb      	adds	r3, r7, r3
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	801a      	strh	r2, [r3, #0]
 8005e08:	e044      	b.n	8005e94 <USB_EPStartXfer+0x1108>
 8005e0a:	1d7b      	adds	r3, r7, #5
 8005e0c:	33ff      	adds	r3, #255	; 0xff
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	095b      	lsrs	r3, r3, #5
 8005e12:	21d8      	movs	r1, #216	; 0xd8
 8005e14:	187a      	adds	r2, r7, r1
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	1d7b      	adds	r3, r7, #5
 8005e1a:	33ff      	adds	r3, #255	; 0xff
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	221f      	movs	r2, #31
 8005e20:	4013      	ands	r3, r2
 8005e22:	d104      	bne.n	8005e2e <USB_EPStartXfer+0x10a2>
 8005e24:	187b      	adds	r3, r7, r1
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	187a      	adds	r2, r7, r1
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	23d8      	movs	r3, #216	; 0xd8
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	029b      	lsls	r3, r3, #10
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	4a2d      	ldr	r2, [pc, #180]	; (8005ef0 <USB_EPStartXfer+0x1164>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	23b8      	movs	r3, #184	; 0xb8
 8005e42:	18fb      	adds	r3, r7, r3
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	801a      	strh	r2, [r3, #0]
 8005e48:	e024      	b.n	8005e94 <USB_EPStartXfer+0x1108>
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d120      	bne.n	8005e94 <USB_EPStartXfer+0x1108>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2250      	movs	r2, #80	; 0x50
 8005e56:	5a9b      	ldrh	r3, [r3, r2]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	001a      	movs	r2, r3
 8005e5c:	21c4      	movs	r1, #196	; 0xc4
 8005e5e:	187b      	adds	r3, r7, r1
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	189b      	adds	r3, r3, r2
 8005e64:	187a      	adds	r2, r7, r1
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	00da      	lsls	r2, r3, #3
 8005e6e:	187b      	adds	r3, r7, r1
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	18d3      	adds	r3, r2, r3
 8005e74:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <USB_EPStartXfer+0x1168>)
 8005e76:	4694      	mov	ip, r2
 8005e78:	4463      	add	r3, ip
 8005e7a:	21c0      	movs	r1, #192	; 0xc0
 8005e7c:	187a      	adds	r2, r7, r1
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	1d7b      	adds	r3, r7, #5
 8005e82:	33ff      	adds	r3, #255	; 0xff
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e001      	b.n	8005e94 <USB_EPStartXfer+0x1108>
      }
      else
      {
        return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e025      	b.n	8005ee0 <USB_EPStartXfer+0x1154>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	18d3      	adds	r3, r2, r3
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	208a      	movs	r0, #138	; 0x8a
 8005ea4:	183b      	adds	r3, r7, r0
 8005ea6:	4914      	ldr	r1, [pc, #80]	; (8005ef8 <USB_EPStartXfer+0x116c>)
 8005ea8:	400a      	ands	r2, r1
 8005eaa:	801a      	strh	r2, [r3, #0]
 8005eac:	183b      	adds	r3, r7, r0
 8005eae:	183a      	adds	r2, r7, r0
 8005eb0:	8812      	ldrh	r2, [r2, #0]
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	0149      	lsls	r1, r1, #5
 8005eb6:	404a      	eors	r2, r1
 8005eb8:	801a      	strh	r2, [r3, #0]
 8005eba:	183b      	adds	r3, r7, r0
 8005ebc:	183a      	adds	r2, r7, r0
 8005ebe:	8812      	ldrh	r2, [r2, #0]
 8005ec0:	2180      	movs	r1, #128	; 0x80
 8005ec2:	0189      	lsls	r1, r1, #6
 8005ec4:	404a      	eors	r2, r1
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	18d3      	adds	r3, r2, r3
 8005ed2:	183a      	adds	r2, r7, r0
 8005ed4:	8812      	ldrh	r2, [r2, #0]
 8005ed6:	4909      	ldr	r1, [pc, #36]	; (8005efc <USB_EPStartXfer+0x1170>)
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	b292      	uxth	r2, r2
 8005edc:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	0018      	movs	r0, r3
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	b043      	add	sp, #268	; 0x10c
 8005ee6:	bd90      	pop	{r4, r7, pc}
 8005ee8:	00000402 	.word	0x00000402
 8005eec:	ffff83ff 	.word	0xffff83ff
 8005ef0:	ffff8000 	.word	0xffff8000
 8005ef4:	00000406 	.word	0x00000406
 8005ef8:	ffffbf8f 	.word	0xffffbf8f
 8005efc:	ffff8080 	.word	0xffff8080

08005f00 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d01d      	beq.n	8005f4e <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	18d3      	adds	r3, r2, r3
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	200c      	movs	r0, #12
 8005f22:	183b      	adds	r3, r7, r0
 8005f24:	491b      	ldr	r1, [pc, #108]	; (8005f94 <USB_EPSetStall+0x94>)
 8005f26:	400a      	ands	r2, r1
 8005f28:	801a      	strh	r2, [r3, #0]
 8005f2a:	183b      	adds	r3, r7, r0
 8005f2c:	183a      	adds	r2, r7, r0
 8005f2e:	8812      	ldrh	r2, [r2, #0]
 8005f30:	2110      	movs	r1, #16
 8005f32:	404a      	eors	r2, r1
 8005f34:	801a      	strh	r2, [r3, #0]
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	18d3      	adds	r3, r2, r3
 8005f40:	183a      	adds	r2, r7, r0
 8005f42:	8812      	ldrh	r2, [r2, #0]
 8005f44:	4914      	ldr	r1, [pc, #80]	; (8005f98 <USB_EPSetStall+0x98>)
 8005f46:	430a      	orrs	r2, r1
 8005f48:	b292      	uxth	r2, r2
 8005f4a:	801a      	strh	r2, [r3, #0]
 8005f4c:	e01d      	b.n	8005f8a <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	200e      	movs	r0, #14
 8005f5e:	183b      	adds	r3, r7, r0
 8005f60:	490e      	ldr	r1, [pc, #56]	; (8005f9c <USB_EPSetStall+0x9c>)
 8005f62:	400a      	ands	r2, r1
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	183b      	adds	r3, r7, r0
 8005f68:	183a      	adds	r2, r7, r0
 8005f6a:	8812      	ldrh	r2, [r2, #0]
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	0149      	lsls	r1, r1, #5
 8005f70:	404a      	eors	r2, r1
 8005f72:	801a      	strh	r2, [r3, #0]
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	18d3      	adds	r3, r2, r3
 8005f7e:	183a      	adds	r2, r7, r0
 8005f80:	8812      	ldrh	r2, [r2, #0]
 8005f82:	4905      	ldr	r1, [pc, #20]	; (8005f98 <USB_EPSetStall+0x98>)
 8005f84:	430a      	orrs	r2, r1
 8005f86:	b292      	uxth	r2, r2
 8005f88:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b004      	add	sp, #16
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	ffff8fbf 	.word	0xffff8fbf
 8005f98:	ffff8080 	.word	0xffff8080
 8005f9c:	ffffbf8f 	.word	0xffffbf8f

08005fa0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	7b1b      	ldrb	r3, [r3, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d000      	beq.n	8005fb4 <USB_EPClearStall+0x14>
 8005fb2:	e095      	b.n	80060e0 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d046      	beq.n	800604a <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	18d2      	adds	r2, r2, r3
 8005fc6:	2110      	movs	r1, #16
 8005fc8:	187b      	adds	r3, r7, r1
 8005fca:	8812      	ldrh	r2, [r2, #0]
 8005fcc:	801a      	strh	r2, [r3, #0]
 8005fce:	187b      	adds	r3, r7, r1
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	2240      	movs	r2, #64	; 0x40
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d016      	beq.n	8006006 <USB_EPClearStall+0x66>
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	18d3      	adds	r3, r2, r3
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	b29a      	uxth	r2, r3
 8005fe6:	200e      	movs	r0, #14
 8005fe8:	183b      	adds	r3, r7, r0
 8005fea:	4940      	ldr	r1, [pc, #256]	; (80060ec <USB_EPClearStall+0x14c>)
 8005fec:	400a      	ands	r2, r1
 8005fee:	801a      	strh	r2, [r3, #0]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	18d3      	adds	r3, r2, r3
 8005ffa:	183a      	adds	r2, r7, r0
 8005ffc:	8812      	ldrh	r2, [r2, #0]
 8005ffe:	493c      	ldr	r1, [pc, #240]	; (80060f0 <USB_EPClearStall+0x150>)
 8006000:	430a      	orrs	r2, r1
 8006002:	b292      	uxth	r2, r2
 8006004:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	78db      	ldrb	r3, [r3, #3]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d068      	beq.n	80060e0 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	18d3      	adds	r3, r2, r3
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	b29a      	uxth	r2, r3
 800601c:	200c      	movs	r0, #12
 800601e:	183b      	adds	r3, r7, r0
 8006020:	4934      	ldr	r1, [pc, #208]	; (80060f4 <USB_EPClearStall+0x154>)
 8006022:	400a      	ands	r2, r1
 8006024:	801a      	strh	r2, [r3, #0]
 8006026:	183b      	adds	r3, r7, r0
 8006028:	183a      	adds	r2, r7, r0
 800602a:	8812      	ldrh	r2, [r2, #0]
 800602c:	2120      	movs	r1, #32
 800602e:	404a      	eors	r2, r1
 8006030:	801a      	strh	r2, [r3, #0]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	18d3      	adds	r3, r2, r3
 800603c:	183a      	adds	r2, r7, r0
 800603e:	8812      	ldrh	r2, [r2, #0]
 8006040:	492d      	ldr	r1, [pc, #180]	; (80060f8 <USB_EPClearStall+0x158>)
 8006042:	430a      	orrs	r2, r1
 8006044:	b292      	uxth	r2, r2
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	e04a      	b.n	80060e0 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	18d2      	adds	r2, r2, r3
 8006054:	2116      	movs	r1, #22
 8006056:	187b      	adds	r3, r7, r1
 8006058:	8812      	ldrh	r2, [r2, #0]
 800605a:	801a      	strh	r2, [r3, #0]
 800605c:	187b      	adds	r3, r7, r1
 800605e:	881a      	ldrh	r2, [r3, #0]
 8006060:	2380      	movs	r3, #128	; 0x80
 8006062:	01db      	lsls	r3, r3, #7
 8006064:	4013      	ands	r3, r2
 8006066:	d016      	beq.n	8006096 <USB_EPClearStall+0xf6>
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	18d3      	adds	r3, r2, r3
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29a      	uxth	r2, r3
 8006076:	2014      	movs	r0, #20
 8006078:	183b      	adds	r3, r7, r0
 800607a:	491c      	ldr	r1, [pc, #112]	; (80060ec <USB_EPClearStall+0x14c>)
 800607c:	400a      	ands	r2, r1
 800607e:	801a      	strh	r2, [r3, #0]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	18d3      	adds	r3, r2, r3
 800608a:	183a      	adds	r2, r7, r0
 800608c:	8812      	ldrh	r2, [r2, #0]
 800608e:	491b      	ldr	r1, [pc, #108]	; (80060fc <USB_EPClearStall+0x15c>)
 8006090:	430a      	orrs	r2, r1
 8006092:	b292      	uxth	r2, r2
 8006094:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	b29a      	uxth	r2, r3
 80060a4:	2012      	movs	r0, #18
 80060a6:	183b      	adds	r3, r7, r0
 80060a8:	4915      	ldr	r1, [pc, #84]	; (8006100 <USB_EPClearStall+0x160>)
 80060aa:	400a      	ands	r2, r1
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	183b      	adds	r3, r7, r0
 80060b0:	183a      	adds	r2, r7, r0
 80060b2:	8812      	ldrh	r2, [r2, #0]
 80060b4:	2180      	movs	r1, #128	; 0x80
 80060b6:	0149      	lsls	r1, r1, #5
 80060b8:	404a      	eors	r2, r1
 80060ba:	801a      	strh	r2, [r3, #0]
 80060bc:	183b      	adds	r3, r7, r0
 80060be:	183a      	adds	r2, r7, r0
 80060c0:	8812      	ldrh	r2, [r2, #0]
 80060c2:	2180      	movs	r1, #128	; 0x80
 80060c4:	0189      	lsls	r1, r1, #6
 80060c6:	404a      	eors	r2, r1
 80060c8:	801a      	strh	r2, [r3, #0]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	18d3      	adds	r3, r2, r3
 80060d4:	183a      	adds	r2, r7, r0
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	4907      	ldr	r1, [pc, #28]	; (80060f8 <USB_EPClearStall+0x158>)
 80060da:	430a      	orrs	r2, r1
 80060dc:	b292      	uxth	r2, r2
 80060de:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	0018      	movs	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	b006      	add	sp, #24
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	ffff8f8f 	.word	0xffff8f8f
 80060f0:	ffff80c0 	.word	0xffff80c0
 80060f4:	ffff8fbf 	.word	0xffff8fbf
 80060f8:	ffff8080 	.word	0xffff8080
 80060fc:	ffffc080 	.word	0xffffc080
 8006100:	ffffbf8f 	.word	0xffffbf8f

08006104 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	000a      	movs	r2, r1
 800610e:	1cfb      	adds	r3, r7, #3
 8006110:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 8006112:	1cfb      	adds	r3, r7, #3
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	224c      	movs	r2, #76	; 0x4c
 800611e:	2180      	movs	r1, #128	; 0x80
 8006120:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	0018      	movs	r0, r3
 8006126:	46bd      	mov	sp, r7
 8006128:	b002      	add	sp, #8
 800612a:	bd80      	pop	{r7, pc}

0800612c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2258      	movs	r2, #88	; 0x58
 8006138:	5a9b      	ldrh	r3, [r3, r2]
 800613a:	b29b      	uxth	r3, r3
 800613c:	4a05      	ldr	r2, [pc, #20]	; (8006154 <USB_DevConnect+0x28>)
 800613e:	4313      	orrs	r3, r2
 8006140:	b299      	uxth	r1, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2258      	movs	r2, #88	; 0x58
 8006146:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	0018      	movs	r0, r3
 800614c:	46bd      	mov	sp, r7
 800614e:	b002      	add	sp, #8
 8006150:	bd80      	pop	{r7, pc}
 8006152:	46c0      	nop			; (mov r8, r8)
 8006154:	ffff8000 	.word	0xffff8000

08006158 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2244      	movs	r2, #68	; 0x44
 8006164:	5a9b      	ldrh	r3, [r3, r2]
 8006166:	b29b      	uxth	r3, r3
 8006168:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800616a:	68fb      	ldr	r3, [r7, #12]
}
 800616c:	0018      	movs	r0, r3
 800616e:	46bd      	mov	sp, r7
 8006170:	b004      	add	sp, #16
 8006172:	bd80      	pop	{r7, pc}

08006174 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	; 0x30
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	0019      	movs	r1, r3
 8006180:	1dbb      	adds	r3, r7, #6
 8006182:	801a      	strh	r2, [r3, #0]
 8006184:	1d3b      	adds	r3, r7, #4
 8006186:	1c0a      	adds	r2, r1, #0
 8006188:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800618a:	1d3b      	adds	r3, r7, #4
 800618c:	881b      	ldrh	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800619c:	1dbb      	adds	r3, r7, #6
 800619e:	881a      	ldrh	r2, [r3, #0]
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	18d3      	adds	r3, r2, r3
 80061a4:	2280      	movs	r2, #128	; 0x80
 80061a6:	00d2      	lsls	r2, r2, #3
 80061a8:	4694      	mov	ip, r2
 80061aa:	4463      	add	r3, ip
 80061ac:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061b2:	e01b      	b.n	80061ec <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80061b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	3301      	adds	r3, #1
 80061be:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	001a      	movs	r2, r3
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80061da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061dc:	3302      	adds	r3, #2
 80061de:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	3301      	adds	r3, #1
 80061e4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80061e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e8:	3b01      	subs	r3, #1
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e0      	bne.n	80061b4 <USB_WritePMA+0x40>
  }
}
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	46c0      	nop			; (mov r8, r8)
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b00c      	add	sp, #48	; 0x30
 80061fa:	bd80      	pop	{r7, pc}

080061fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	60f8      	str	r0, [r7, #12]
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	0019      	movs	r1, r3
 8006208:	1dbb      	adds	r3, r7, #6
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	1d3b      	adds	r3, r7, #4
 800620e:	1c0a      	adds	r2, r1, #0
 8006210:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006212:	1d3b      	adds	r3, r7, #4
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	085b      	lsrs	r3, r3, #1
 8006218:	b29b      	uxth	r3, r3
 800621a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006224:	1dbb      	adds	r3, r7, #6
 8006226:	881a      	ldrh	r2, [r3, #0]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	18d3      	adds	r3, r2, r3
 800622c:	2280      	movs	r2, #128	; 0x80
 800622e:	00d2      	lsls	r2, r2, #3
 8006230:	4694      	mov	ip, r2
 8006232:	4463      	add	r3, ip
 8006234:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
 800623a:	e018      	b.n	800626e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	881b      	ldrh	r3, [r3, #0]
 8006240:	b29b      	uxth	r3, r3
 8006242:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	3302      	adds	r3, #2
 8006248:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	b2da      	uxtb	r2, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	3301      	adds	r3, #1
 8006256:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	b2da      	uxtb	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	3b01      	subs	r3, #1
 800626c:	627b      	str	r3, [r7, #36]	; 0x24
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e3      	bne.n	800623c <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006274:	1d3b      	adds	r3, r7, #4
 8006276:	881b      	ldrh	r3, [r3, #0]
 8006278:	2201      	movs	r2, #1
 800627a:	4013      	ands	r3, r2
 800627c:	b29b      	uxth	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d007      	beq.n	8006292 <USB_ReadPMA+0x96>
  {
    temp = *pdwVal;
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	881b      	ldrh	r3, [r3, #0]
 8006286:	b29b      	uxth	r3, r3
 8006288:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	b2da      	uxtb	r2, r3
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	701a      	strb	r2, [r3, #0]
  }
}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	46bd      	mov	sp, r7
 8006296:	b00a      	add	sp, #40	; 0x28
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	60b9      	str	r1, [r7, #8]
 80062a4:	1dfb      	adds	r3, r7, #7
 80062a6:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80062ae:	2302      	movs	r3, #2
 80062b0:	e020      	b.n	80062f4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	23ad      	movs	r3, #173	; 0xad
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	58d3      	ldr	r3, [r2, r3]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d004      	beq.n	80062c8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	23ad      	movs	r3, #173	; 0xad
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	2100      	movs	r1, #0
 80062c6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	23ac      	movs	r3, #172	; 0xac
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	68b9      	ldr	r1, [r7, #8]
 80062d6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	23a7      	movs	r3, #167	; 0xa7
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	2101      	movs	r1, #1
 80062e0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	1dfa      	adds	r2, r7, #7
 80062e6:	7812      	ldrb	r2, [r2, #0]
 80062e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	0018      	movs	r0, r3
 80062ee:	f001 fda1 	bl	8007e34 <USBD_LL_Init>

  return USBD_OK;
 80062f2:	2300      	movs	r3, #0
}
 80062f4:	0018      	movs	r0, r3
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b004      	add	sp, #16
 80062fa:	bd80      	pop	{r7, pc}

080062fc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006306:	200f      	movs	r0, #15
 8006308:	183b      	adds	r3, r7, r0
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d008      	beq.n	8006326 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	23ad      	movs	r3, #173	; 0xad
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	6839      	ldr	r1, [r7, #0]
 800631c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800631e:	183b      	adds	r3, r7, r0
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	e003      	b.n	800632e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006326:	230f      	movs	r3, #15
 8006328:	18fb      	adds	r3, r7, r3
 800632a:	2202      	movs	r2, #2
 800632c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800632e:	230f      	movs	r3, #15
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	781b      	ldrb	r3, [r3, #0]
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b004      	add	sp, #16
 800633a:	bd80      	pop	{r7, pc}

0800633c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	0018      	movs	r0, r3
 8006348:	f001 fdc4 	bl	8007ed4 <USBD_LL_Start>

  return USBD_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	0018      	movs	r0, r3
 8006350:	46bd      	mov	sp, r7
 8006352:	b002      	add	sp, #8
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	0018      	movs	r0, r3
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}

08006368 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	000a      	movs	r2, r1
 8006372:	1cfb      	adds	r3, r7, #3
 8006374:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006376:	240f      	movs	r4, #15
 8006378:	193b      	adds	r3, r7, r4
 800637a:	2202      	movs	r2, #2
 800637c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	23ad      	movs	r3, #173	; 0xad
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	58d3      	ldr	r3, [r2, r3]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d00e      	beq.n	80063a8 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	23ad      	movs	r3, #173	; 0xad
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	58d3      	ldr	r3, [r2, r3]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	1cfa      	adds	r2, r7, #3
 8006396:	7811      	ldrb	r1, [r2, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	0010      	movs	r0, r2
 800639c:	4798      	blx	r3
 800639e:	1e03      	subs	r3, r0, #0
 80063a0:	d102      	bne.n	80063a8 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 80063a2:	193b      	adds	r3, r7, r4
 80063a4:	2200      	movs	r2, #0
 80063a6:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 80063a8:	230f      	movs	r3, #15
 80063aa:	18fb      	adds	r3, r7, r3
 80063ac:	781b      	ldrb	r3, [r3, #0]
}
 80063ae:	0018      	movs	r0, r3
 80063b0:	46bd      	mov	sp, r7
 80063b2:	b005      	add	sp, #20
 80063b4:	bd90      	pop	{r4, r7, pc}

080063b6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80063b6:	b580      	push	{r7, lr}
 80063b8:	b082      	sub	sp, #8
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	000a      	movs	r2, r1
 80063c0:	1cfb      	adds	r3, r7, #3
 80063c2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	23ad      	movs	r3, #173	; 0xad
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	58d3      	ldr	r3, [r2, r3]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	1cfa      	adds	r2, r7, #3
 80063d0:	7811      	ldrb	r1, [r2, #0]
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	0010      	movs	r0, r2
 80063d6:	4798      	blx	r3

  return USBD_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	0018      	movs	r0, r3
 80063dc:	46bd      	mov	sp, r7
 80063de:	b002      	add	sp, #8
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	22aa      	movs	r2, #170	; 0xaa
 80063f2:	0092      	lsls	r2, r2, #2
 80063f4:	4694      	mov	ip, r2
 80063f6:	4463      	add	r3, ip
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	0011      	movs	r1, r2
 80063fc:	0018      	movs	r0, r3
 80063fe:	f001 f810 	bl	8007422 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	23a5      	movs	r3, #165	; 0xa5
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	2101      	movs	r1, #1
 800640a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a23      	ldr	r2, [pc, #140]	; (800649c <USBD_LL_SetupStage+0xb8>)
 8006410:	5a9b      	ldrh	r3, [r3, r2]
 8006412:	0019      	movs	r1, r3
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	23a6      	movs	r3, #166	; 0xa6
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	23aa      	movs	r3, #170	; 0xaa
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	5cd3      	ldrb	r3, [r2, r3]
 8006424:	001a      	movs	r2, r3
 8006426:	231f      	movs	r3, #31
 8006428:	4013      	ands	r3, r2
 800642a:	2b02      	cmp	r3, #2
 800642c:	d019      	beq.n	8006462 <USBD_LL_SetupStage+0x7e>
 800642e:	d822      	bhi.n	8006476 <USBD_LL_SetupStage+0x92>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <USBD_LL_SetupStage+0x56>
 8006434:	2b01      	cmp	r3, #1
 8006436:	d00a      	beq.n	800644e <USBD_LL_SetupStage+0x6a>
 8006438:	e01d      	b.n	8006476 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	22aa      	movs	r2, #170	; 0xaa
 800643e:	0092      	lsls	r2, r2, #2
 8006440:	189a      	adds	r2, r3, r2
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	0011      	movs	r1, r2
 8006446:	0018      	movs	r0, r3
 8006448:	f000 fa10 	bl	800686c <USBD_StdDevReq>
      break;
 800644c:	e020      	b.n	8006490 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	22aa      	movs	r2, #170	; 0xaa
 8006452:	0092      	lsls	r2, r2, #2
 8006454:	189a      	adds	r2, r3, r2
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	0011      	movs	r1, r2
 800645a:	0018      	movs	r0, r3
 800645c:	f000 fa78 	bl	8006950 <USBD_StdItfReq>
      break;
 8006460:	e016      	b.n	8006490 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	22aa      	movs	r2, #170	; 0xaa
 8006466:	0092      	lsls	r2, r2, #2
 8006468:	189a      	adds	r2, r3, r2
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	0011      	movs	r1, r2
 800646e:	0018      	movs	r0, r3
 8006470:	f000 fac5 	bl	80069fe <USBD_StdEPReq>
      break;
 8006474:	e00c      	b.n	8006490 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	23aa      	movs	r3, #170	; 0xaa
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	5cd3      	ldrb	r3, [r2, r3]
 800647e:	227f      	movs	r2, #127	; 0x7f
 8006480:	4393      	bics	r3, r2
 8006482:	b2da      	uxtb	r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	0011      	movs	r1, r2
 8006488:	0018      	movs	r0, r3
 800648a:	f001 fdaa 	bl	8007fe2 <USBD_LL_StallEP>
      break;
 800648e:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b002      	add	sp, #8
 8006498:	bd80      	pop	{r7, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	000002ae 	.word	0x000002ae

080064a0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	607a      	str	r2, [r7, #4]
 80064aa:	200b      	movs	r0, #11
 80064ac:	183b      	adds	r3, r7, r0
 80064ae:	1c0a      	adds	r2, r1, #0
 80064b0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80064b2:	183b      	adds	r3, r7, r0
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d154      	bne.n	8006564 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	3355      	adds	r3, #85	; 0x55
 80064be:	33ff      	adds	r3, #255	; 0xff
 80064c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	23a5      	movs	r3, #165	; 0xa5
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	58d3      	ldr	r3, [r2, r3]
 80064ca:	2b03      	cmp	r3, #3
 80064cc:	d139      	bne.n	8006542 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	68da      	ldr	r2, [r3, #12]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d919      	bls.n	800650e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	1ad2      	subs	r2, r2, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	68da      	ldr	r2, [r3, #12]
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d203      	bcs.n	80064fc <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	e002      	b.n	8006502 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006500:	b29b      	uxth	r3, r3
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	68f8      	ldr	r0, [r7, #12]
 8006506:	001a      	movs	r2, r3
 8006508:	f001 fa21 	bl	800794e <USBD_CtlContinueRx>
 800650c:	e045      	b.n	800659a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	23ad      	movs	r3, #173	; 0xad
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	58d3      	ldr	r3, [r2, r3]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00d      	beq.n	8006538 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	23a7      	movs	r3, #167	; 0xa7
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006524:	2b03      	cmp	r3, #3
 8006526:	d107      	bne.n	8006538 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	23ad      	movs	r3, #173	; 0xad
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	58d3      	ldr	r3, [r2, r3]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	0010      	movs	r0, r2
 8006536:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	0018      	movs	r0, r3
 800653c:	f001 fa1a 	bl	8007974 <USBD_CtlSendStatus>
 8006540:	e02b      	b.n	800659a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	23a5      	movs	r3, #165	; 0xa5
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	58d3      	ldr	r3, [r2, r3]
 800654a:	2b05      	cmp	r3, #5
 800654c:	d125      	bne.n	800659a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	23a5      	movs	r3, #165	; 0xa5
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	2100      	movs	r1, #0
 8006556:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2100      	movs	r1, #0
 800655c:	0018      	movs	r0, r3
 800655e:	f001 fd40 	bl	8007fe2 <USBD_LL_StallEP>
 8006562:	e01a      	b.n	800659a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	23ad      	movs	r3, #173	; 0xad
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	58d3      	ldr	r3, [r2, r3]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d011      	beq.n	8006596 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	23a7      	movs	r3, #167	; 0xa7
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800657a:	2b03      	cmp	r3, #3
 800657c:	d10b      	bne.n	8006596 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	23ad      	movs	r3, #173	; 0xad
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	58d3      	ldr	r3, [r2, r3]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	220b      	movs	r2, #11
 800658a:	18ba      	adds	r2, r7, r2
 800658c:	7811      	ldrb	r1, [r2, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	0010      	movs	r0, r2
 8006592:	4798      	blx	r3
 8006594:	e001      	b.n	800659a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006596:	2302      	movs	r3, #2
 8006598:	e000      	b.n	800659c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	0018      	movs	r0, r3
 800659e:	46bd      	mov	sp, r7
 80065a0:	b006      	add	sp, #24
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b086      	sub	sp, #24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	200b      	movs	r0, #11
 80065b0:	183b      	adds	r3, r7, r0
 80065b2:	1c0a      	adds	r2, r1, #0
 80065b4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80065b6:	183b      	adds	r3, r7, r0
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d000      	beq.n	80065c0 <USBD_LL_DataInStage+0x1c>
 80065be:	e08e      	b.n	80066de <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3314      	adds	r3, #20
 80065c4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	23a5      	movs	r3, #165	; 0xa5
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	58d3      	ldr	r3, [r2, r3]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d164      	bne.n	800669c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d915      	bls.n	800660a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	1ad2      	subs	r2, r2, r3
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f001 f996 	bl	8007928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	2300      	movs	r3, #0
 8006600:	2200      	movs	r2, #0
 8006602:	2100      	movs	r1, #0
 8006604:	f001 fdd6 	bl	80081b4 <USBD_LL_PrepareReceive>
 8006608:	e059      	b.n	80066be <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	689a      	ldr	r2, [r3, #8]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	0019      	movs	r1, r3
 8006614:	0010      	movs	r0, r2
 8006616:	f7f9 fdfd 	bl	8000214 <__aeabi_uidivmod>
 800661a:	1e0b      	subs	r3, r1, #0
 800661c:	d11f      	bne.n	800665e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006626:	429a      	cmp	r2, r3
 8006628:	d319      	bcc.n	800665e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	23a6      	movs	r3, #166	; 0xa6
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006636:	429a      	cmp	r2, r3
 8006638:	d211      	bcs.n	800665e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	2100      	movs	r1, #0
 8006640:	0018      	movs	r0, r3
 8006642:	f001 f971 	bl	8007928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	23a6      	movs	r3, #166	; 0xa6
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	2100      	movs	r1, #0
 800664e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	2300      	movs	r3, #0
 8006654:	2200      	movs	r2, #0
 8006656:	2100      	movs	r1, #0
 8006658:	f001 fdac 	bl	80081b4 <USBD_LL_PrepareReceive>
 800665c:	e02f      	b.n	80066be <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	23ad      	movs	r3, #173	; 0xad
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	58d3      	ldr	r3, [r2, r3]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00d      	beq.n	8006688 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	23a7      	movs	r3, #167	; 0xa7
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006674:	2b03      	cmp	r3, #3
 8006676:	d107      	bne.n	8006688 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	23ad      	movs	r3, #173	; 0xad
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	58d3      	ldr	r3, [r2, r3]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	0010      	movs	r0, r2
 8006686:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	0018      	movs	r0, r3
 800668e:	f001 fca8 	bl	8007fe2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	0018      	movs	r0, r3
 8006696:	f001 f981 	bl	800799c <USBD_CtlReceiveStatus>
 800669a:	e010      	b.n	80066be <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	23a5      	movs	r3, #165	; 0xa5
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	58d3      	ldr	r3, [r2, r3]
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d005      	beq.n	80066b4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	23a5      	movs	r3, #165	; 0xa5
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d104      	bne.n	80066be <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	0018      	movs	r0, r3
 80066ba:	f001 fc92 	bl	8007fe2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	23a8      	movs	r3, #168	; 0xa8
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	5cd3      	ldrb	r3, [r2, r3]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d124      	bne.n	8006714 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	0018      	movs	r0, r3
 80066ce:	f7ff fe42 	bl	8006356 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	23a8      	movs	r3, #168	; 0xa8
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	2100      	movs	r1, #0
 80066da:	54d1      	strb	r1, [r2, r3]
 80066dc:	e01a      	b.n	8006714 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	23ad      	movs	r3, #173	; 0xad
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	58d3      	ldr	r3, [r2, r3]
 80066e6:	695b      	ldr	r3, [r3, #20]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d011      	beq.n	8006710 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	23a7      	movs	r3, #167	; 0xa7
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 80066f4:	2b03      	cmp	r3, #3
 80066f6:	d10b      	bne.n	8006710 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	23ad      	movs	r3, #173	; 0xad
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	58d3      	ldr	r3, [r2, r3]
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	220b      	movs	r2, #11
 8006704:	18ba      	adds	r2, r7, r2
 8006706:	7811      	ldrb	r1, [r2, #0]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	0010      	movs	r0, r2
 800670c:	4798      	blx	r3
 800670e:	e001      	b.n	8006714 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006710:	2302      	movs	r3, #2
 8006712:	e000      	b.n	8006716 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	0018      	movs	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	b006      	add	sp, #24
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	2340      	movs	r3, #64	; 0x40
 800672a:	2200      	movs	r2, #0
 800672c:	2100      	movs	r1, #0
 800672e:	f001 fbf6 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	23ac      	movs	r3, #172	; 0xac
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	2101      	movs	r1, #1
 800673a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	23b2      	movs	r3, #178	; 0xb2
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	2140      	movs	r1, #64	; 0x40
 8006744:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	2340      	movs	r3, #64	; 0x40
 800674a:	2200      	movs	r2, #0
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	f001 fbe6 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2240      	movs	r2, #64	; 0x40
 800675c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	23a7      	movs	r3, #167	; 0xa7
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	2101      	movs	r1, #1
 8006766:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	23a5      	movs	r3, #165	; 0xa5
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	2100      	movs	r1, #0
 8006770:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	23a9      	movs	r3, #169	; 0xa9
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	2100      	movs	r1, #0
 8006780:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	23ae      	movs	r3, #174	; 0xae
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	58d3      	ldr	r3, [r2, r3]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	23ad      	movs	r3, #173	; 0xad
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	58d3      	ldr	r3, [r2, r3]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	b2d9      	uxtb	r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	0018      	movs	r0, r3
 80067a2:	4790      	blx	r2
  }

  return USBD_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b002      	add	sp, #8
 80067ac:	bd80      	pop	{r7, pc}

080067ae <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b082      	sub	sp, #8
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	000a      	movs	r2, r1
 80067b8:	1cfb      	adds	r3, r7, #3
 80067ba:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	1cfa      	adds	r2, r7, #3
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	0018      	movs	r0, r3
 80067c8:	46bd      	mov	sp, r7
 80067ca:	b002      	add	sp, #8
 80067cc:	bd80      	pop	{r7, pc}
	...

080067d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	23a7      	movs	r3, #167	; 0xa7
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	5cd1      	ldrb	r1, [r2, r3]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a06      	ldr	r2, [pc, #24]	; (80067fc <USBD_LL_Suspend+0x2c>)
 80067e4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	23a7      	movs	r3, #167	; 0xa7
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	2104      	movs	r1, #4
 80067ee:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	0018      	movs	r0, r3
 80067f4:	46bd      	mov	sp, r7
 80067f6:	b002      	add	sp, #8
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	46c0      	nop			; (mov r8, r8)
 80067fc:	0000029d 	.word	0x0000029d

08006800 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	23a7      	movs	r3, #167	; 0xa7
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	5cd3      	ldrb	r3, [r2, r3]
 8006810:	2b04      	cmp	r3, #4
 8006812:	d106      	bne.n	8006822 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a05      	ldr	r2, [pc, #20]	; (800682c <USBD_LL_Resume+0x2c>)
 8006818:	5c99      	ldrb	r1, [r3, r2]
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	23a7      	movs	r3, #167	; 0xa7
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006822:	2300      	movs	r3, #0
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b002      	add	sp, #8
 800682a:	bd80      	pop	{r7, pc}
 800682c:	0000029d 	.word	0x0000029d

08006830 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	23a7      	movs	r3, #167	; 0xa7
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	5cd3      	ldrb	r3, [r2, r3]
 8006840:	2b03      	cmp	r3, #3
 8006842:	d10e      	bne.n	8006862 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	23ad      	movs	r3, #173	; 0xad
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	58d3      	ldr	r3, [r2, r3]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d007      	beq.n	8006862 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	23ad      	movs	r3, #173	; 0xad
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	58d3      	ldr	r3, [r2, r3]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	0010      	movs	r0, r2
 8006860:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	0018      	movs	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}

0800686c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006876:	230f      	movs	r3, #15
 8006878:	18fb      	adds	r3, r7, r3
 800687a:	2200      	movs	r2, #0
 800687c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	001a      	movs	r2, r3
 8006884:	2360      	movs	r3, #96	; 0x60
 8006886:	4013      	ands	r3, r2
 8006888:	2b40      	cmp	r3, #64	; 0x40
 800688a:	d004      	beq.n	8006896 <USBD_StdDevReq+0x2a>
 800688c:	d84f      	bhi.n	800692e <USBD_StdDevReq+0xc2>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <USBD_StdDevReq+0x3e>
 8006892:	2b20      	cmp	r3, #32
 8006894:	d14b      	bne.n	800692e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	23ad      	movs	r3, #173	; 0xad
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	58d3      	ldr	r3, [r2, r3]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	0010      	movs	r0, r2
 80068a6:	4798      	blx	r3
      break;
 80068a8:	e048      	b.n	800693c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	785b      	ldrb	r3, [r3, #1]
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d835      	bhi.n	800691e <USBD_StdDevReq+0xb2>
 80068b2:	009a      	lsls	r2, r3, #2
 80068b4:	4b25      	ldr	r3, [pc, #148]	; (800694c <USBD_StdDevReq+0xe0>)
 80068b6:	18d3      	adds	r3, r2, r3
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80068bc:	683a      	ldr	r2, [r7, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	0011      	movs	r1, r2
 80068c2:	0018      	movs	r0, r3
 80068c4:	f000 fa52 	bl	8006d6c <USBD_GetDescriptor>
          break;
 80068c8:	e030      	b.n	800692c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80068ca:	683a      	ldr	r2, [r7, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0011      	movs	r1, r2
 80068d0:	0018      	movs	r0, r3
 80068d2:	f000 fbfd 	bl	80070d0 <USBD_SetAddress>
          break;
 80068d6:	e029      	b.n	800692c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	0011      	movs	r1, r2
 80068de:	0018      	movs	r0, r3
 80068e0:	f000 fc4a 	bl	8007178 <USBD_SetConfig>
          break;
 80068e4:	e022      	b.n	800692c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	0011      	movs	r1, r2
 80068ec:	0018      	movs	r0, r3
 80068ee:	f000 fce7 	bl	80072c0 <USBD_GetConfig>
          break;
 80068f2:	e01b      	b.n	800692c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80068f4:	683a      	ldr	r2, [r7, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	0011      	movs	r1, r2
 80068fa:	0018      	movs	r0, r3
 80068fc:	f000 fd1b 	bl	8007336 <USBD_GetStatus>
          break;
 8006900:	e014      	b.n	800692c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006902:	683a      	ldr	r2, [r7, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	0011      	movs	r1, r2
 8006908:	0018      	movs	r0, r3
 800690a:	f000 fd4e 	bl	80073aa <USBD_SetFeature>
          break;
 800690e:	e00d      	b.n	800692c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	0011      	movs	r1, r2
 8006916:	0018      	movs	r0, r3
 8006918:	f000 fd5d 	bl	80073d6 <USBD_ClrFeature>
          break;
 800691c:	e006      	b.n	800692c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	0011      	movs	r1, r2
 8006924:	0018      	movs	r0, r3
 8006926:	f000 fdb7 	bl	8007498 <USBD_CtlError>
          break;
 800692a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800692c:	e006      	b.n	800693c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	0011      	movs	r1, r2
 8006934:	0018      	movs	r0, r3
 8006936:	f000 fdaf 	bl	8007498 <USBD_CtlError>
      break;
 800693a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800693c:	230f      	movs	r3, #15
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	781b      	ldrb	r3, [r3, #0]
}
 8006942:	0018      	movs	r0, r3
 8006944:	46bd      	mov	sp, r7
 8006946:	b004      	add	sp, #16
 8006948:	bd80      	pop	{r7, pc}
 800694a:	46c0      	nop			; (mov r8, r8)
 800694c:	080083ec 	.word	0x080083ec

08006950 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800695a:	230f      	movs	r3, #15
 800695c:	18fb      	adds	r3, r7, r3
 800695e:	2200      	movs	r2, #0
 8006960:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	001a      	movs	r2, r3
 8006968:	2360      	movs	r3, #96	; 0x60
 800696a:	4013      	ands	r3, r2
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	d004      	beq.n	800697a <USBD_StdItfReq+0x2a>
 8006970:	d839      	bhi.n	80069e6 <USBD_StdItfReq+0x96>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <USBD_StdItfReq+0x2a>
 8006976:	2b20      	cmp	r3, #32
 8006978:	d135      	bne.n	80069e6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	23a7      	movs	r3, #167	; 0xa7
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	5cd3      	ldrb	r3, [r2, r3]
 8006982:	3b01      	subs	r3, #1
 8006984:	2b02      	cmp	r3, #2
 8006986:	d825      	bhi.n	80069d4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	889b      	ldrh	r3, [r3, #4]
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b01      	cmp	r3, #1
 8006990:	d819      	bhi.n	80069c6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	23ad      	movs	r3, #173	; 0xad
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	58d3      	ldr	r3, [r2, r3]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	250f      	movs	r5, #15
 800699e:	197c      	adds	r4, r7, r5
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	0010      	movs	r0, r2
 80069a6:	4798      	blx	r3
 80069a8:	0003      	movs	r3, r0
 80069aa:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	88db      	ldrh	r3, [r3, #6]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d116      	bne.n	80069e2 <USBD_StdItfReq+0x92>
 80069b4:	197b      	adds	r3, r7, r5
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d112      	bne.n	80069e2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	0018      	movs	r0, r3
 80069c0:	f000 ffd8 	bl	8007974 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80069c4:	e00d      	b.n	80069e2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	0011      	movs	r1, r2
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 fd63 	bl	8007498 <USBD_CtlError>
          break;
 80069d2:	e006      	b.n	80069e2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80069d4:	683a      	ldr	r2, [r7, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	0011      	movs	r1, r2
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 fd5c 	bl	8007498 <USBD_CtlError>
          break;
 80069e0:	e000      	b.n	80069e4 <USBD_StdItfReq+0x94>
          break;
 80069e2:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80069e4:	e006      	b.n	80069f4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	0011      	movs	r1, r2
 80069ec:	0018      	movs	r0, r3
 80069ee:	f000 fd53 	bl	8007498 <USBD_CtlError>
      break;
 80069f2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	0018      	movs	r0, r3
 80069f8:	46bd      	mov	sp, r7
 80069fa:	b004      	add	sp, #16
 80069fc:	bdb0      	pop	{r4, r5, r7, pc}

080069fe <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80069fe:	b5b0      	push	{r4, r5, r7, lr}
 8006a00:	b084      	sub	sp, #16
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006a08:	230f      	movs	r3, #15
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	889a      	ldrh	r2, [r3, #4]
 8006a14:	230e      	movs	r3, #14
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	001a      	movs	r2, r3
 8006a20:	2360      	movs	r3, #96	; 0x60
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d006      	beq.n	8006a36 <USBD_StdEPReq+0x38>
 8006a28:	d900      	bls.n	8006a2c <USBD_StdEPReq+0x2e>
 8006a2a:	e190      	b.n	8006d4e <USBD_StdEPReq+0x350>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00c      	beq.n	8006a4a <USBD_StdEPReq+0x4c>
 8006a30:	2b20      	cmp	r3, #32
 8006a32:	d000      	beq.n	8006a36 <USBD_StdEPReq+0x38>
 8006a34:	e18b      	b.n	8006d4e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	23ad      	movs	r3, #173	; 0xad
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	58d3      	ldr	r3, [r2, r3]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	0010      	movs	r0, r2
 8006a46:	4798      	blx	r3
      break;
 8006a48:	e188      	b.n	8006d5c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	001a      	movs	r2, r3
 8006a50:	2360      	movs	r3, #96	; 0x60
 8006a52:	4013      	ands	r3, r2
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d10f      	bne.n	8006a78 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	23ad      	movs	r3, #173	; 0xad
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	58d3      	ldr	r3, [r2, r3]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	250f      	movs	r5, #15
 8006a64:	197c      	adds	r4, r7, r5
 8006a66:	6839      	ldr	r1, [r7, #0]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	0010      	movs	r0, r2
 8006a6c:	4798      	blx	r3
 8006a6e:	0003      	movs	r3, r0
 8006a70:	7023      	strb	r3, [r4, #0]

        return ret;
 8006a72:	197b      	adds	r3, r7, r5
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	e174      	b.n	8006d62 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d007      	beq.n	8006a90 <USBD_StdEPReq+0x92>
 8006a80:	dd00      	ble.n	8006a84 <USBD_StdEPReq+0x86>
 8006a82:	e15c      	b.n	8006d3e <USBD_StdEPReq+0x340>
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d100      	bne.n	8006a8a <USBD_StdEPReq+0x8c>
 8006a88:	e092      	b.n	8006bb0 <USBD_StdEPReq+0x1b2>
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d04b      	beq.n	8006b26 <USBD_StdEPReq+0x128>
 8006a8e:	e156      	b.n	8006d3e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a90:	687a      	ldr	r2, [r7, #4]
 8006a92:	23a7      	movs	r3, #167	; 0xa7
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	5cd3      	ldrb	r3, [r2, r3]
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d002      	beq.n	8006aa2 <USBD_StdEPReq+0xa4>
 8006a9c:	2b03      	cmp	r3, #3
 8006a9e:	d01d      	beq.n	8006adc <USBD_StdEPReq+0xde>
 8006aa0:	e039      	b.n	8006b16 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006aa2:	220e      	movs	r2, #14
 8006aa4:	18bb      	adds	r3, r7, r2
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <USBD_StdEPReq+0xd0>
 8006aac:	18bb      	adds	r3, r7, r2
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b80      	cmp	r3, #128	; 0x80
 8006ab2:	d00c      	beq.n	8006ace <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006ab4:	18bb      	adds	r3, r7, r2
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0011      	movs	r1, r2
 8006abc:	0018      	movs	r0, r3
 8006abe:	f001 fa90 	bl	8007fe2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f001 fa8b 	bl	8007fe2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006acc:	e02a      	b.n	8006b24 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	0011      	movs	r1, r2
 8006ad4:	0018      	movs	r0, r3
 8006ad6:	f000 fcdf 	bl	8007498 <USBD_CtlError>
              break;
 8006ada:	e023      	b.n	8006b24 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	885b      	ldrh	r3, [r3, #2]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d113      	bne.n	8006b0c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8006ae4:	220e      	movs	r2, #14
 8006ae6:	18bb      	adds	r3, r7, r2
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00e      	beq.n	8006b0c <USBD_StdEPReq+0x10e>
 8006aee:	18bb      	adds	r3, r7, r2
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d00a      	beq.n	8006b0c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	88db      	ldrh	r3, [r3, #6]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d106      	bne.n	8006b0c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006afe:	18bb      	adds	r3, r7, r2
 8006b00:	781a      	ldrb	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0011      	movs	r1, r2
 8006b06:	0018      	movs	r0, r3
 8006b08:	f001 fa6b 	bl	8007fe2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 ff30 	bl	8007974 <USBD_CtlSendStatus>

              break;
 8006b14:	e006      	b.n	8006b24 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	0011      	movs	r1, r2
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	f000 fcbb 	bl	8007498 <USBD_CtlError>
              break;
 8006b22:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006b24:	e112      	b.n	8006d4c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	23a7      	movs	r3, #167	; 0xa7
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	5cd3      	ldrb	r3, [r2, r3]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d002      	beq.n	8006b38 <USBD_StdEPReq+0x13a>
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d01d      	beq.n	8006b72 <USBD_StdEPReq+0x174>
 8006b36:	e032      	b.n	8006b9e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b38:	220e      	movs	r2, #14
 8006b3a:	18bb      	adds	r3, r7, r2
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d010      	beq.n	8006b64 <USBD_StdEPReq+0x166>
 8006b42:	18bb      	adds	r3, r7, r2
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b80      	cmp	r3, #128	; 0x80
 8006b48:	d00c      	beq.n	8006b64 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b4a:	18bb      	adds	r3, r7, r2
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0011      	movs	r1, r2
 8006b52:	0018      	movs	r0, r3
 8006b54:	f001 fa45 	bl	8007fe2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2180      	movs	r1, #128	; 0x80
 8006b5c:	0018      	movs	r0, r3
 8006b5e:	f001 fa40 	bl	8007fe2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b62:	e024      	b.n	8006bae <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	0011      	movs	r1, r2
 8006b6a:	0018      	movs	r0, r3
 8006b6c:	f000 fc94 	bl	8007498 <USBD_CtlError>
              break;
 8006b70:	e01d      	b.n	8006bae <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	885b      	ldrh	r3, [r3, #2]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d118      	bne.n	8006bac <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006b7a:	210e      	movs	r1, #14
 8006b7c:	187b      	adds	r3, r7, r1
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	227f      	movs	r2, #127	; 0x7f
 8006b82:	4013      	ands	r3, r2
 8006b84:	d006      	beq.n	8006b94 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006b86:	187b      	adds	r3, r7, r1
 8006b88:	781a      	ldrb	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	0011      	movs	r1, r2
 8006b8e:	0018      	movs	r0, r3
 8006b90:	f001 fa52 	bl	8008038 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	0018      	movs	r0, r3
 8006b98:	f000 feec 	bl	8007974 <USBD_CtlSendStatus>
              }
              break;
 8006b9c:	e006      	b.n	8006bac <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	0011      	movs	r1, r2
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f000 fc77 	bl	8007498 <USBD_CtlError>
              break;
 8006baa:	e000      	b.n	8006bae <USBD_StdEPReq+0x1b0>
              break;
 8006bac:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006bae:	e0cd      	b.n	8006d4c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	23a7      	movs	r3, #167	; 0xa7
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	5cd3      	ldrb	r3, [r2, r3]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d002      	beq.n	8006bc2 <USBD_StdEPReq+0x1c4>
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	d03c      	beq.n	8006c3a <USBD_StdEPReq+0x23c>
 8006bc0:	e0b5      	b.n	8006d2e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bc2:	220e      	movs	r2, #14
 8006bc4:	18bb      	adds	r3, r7, r2
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <USBD_StdEPReq+0x1e4>
 8006bcc:	18bb      	adds	r3, r7, r2
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	d006      	beq.n	8006be2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8006bd4:	683a      	ldr	r2, [r7, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	0011      	movs	r1, r2
 8006bda:	0018      	movs	r0, r3
 8006bdc:	f000 fc5c 	bl	8007498 <USBD_CtlError>
                break;
 8006be0:	e0ac      	b.n	8006d3c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006be2:	220e      	movs	r2, #14
 8006be4:	18bb      	adds	r3, r7, r2
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b25b      	sxtb	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	da0c      	bge.n	8006c08 <USBD_StdEPReq+0x20a>
 8006bee:	18bb      	adds	r3, r7, r2
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	227f      	movs	r2, #127	; 0x7f
 8006bf4:	401a      	ands	r2, r3
 8006bf6:	0013      	movs	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	189b      	adds	r3, r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	3310      	adds	r3, #16
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	18d3      	adds	r3, r2, r3
 8006c04:	3304      	adds	r3, #4
 8006c06:	e00d      	b.n	8006c24 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c08:	230e      	movs	r3, #14
 8006c0a:	18fb      	adds	r3, r7, r3
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	227f      	movs	r2, #127	; 0x7f
 8006c10:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c12:	0013      	movs	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	189b      	adds	r3, r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	3351      	adds	r3, #81	; 0x51
 8006c1c:	33ff      	adds	r3, #255	; 0xff
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	18d3      	adds	r3, r2, r3
 8006c22:	3304      	adds	r3, #4
 8006c24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2202      	movs	r2, #2
 8006c32:	0018      	movs	r0, r3
 8006c34:	f000 fe58 	bl	80078e8 <USBD_CtlSendData>
              break;
 8006c38:	e080      	b.n	8006d3c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c3a:	220e      	movs	r2, #14
 8006c3c:	18bb      	adds	r3, r7, r2
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b25b      	sxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	da14      	bge.n	8006c70 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c46:	18bb      	adds	r3, r7, r2
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	220f      	movs	r2, #15
 8006c4c:	401a      	ands	r2, r3
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	0013      	movs	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	189b      	adds	r3, r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	18cb      	adds	r3, r1, r3
 8006c5a:	3318      	adds	r3, #24
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d11e      	bne.n	8006ca0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	0011      	movs	r1, r2
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f000 fc15 	bl	8007498 <USBD_CtlError>
                  break;
 8006c6e:	e065      	b.n	8006d3c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006c70:	230e      	movs	r3, #14
 8006c72:	18fb      	adds	r3, r7, r3
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	220f      	movs	r2, #15
 8006c78:	401a      	ands	r2, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	23ac      	movs	r3, #172	; 0xac
 8006c7e:	0059      	lsls	r1, r3, #1
 8006c80:	0013      	movs	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	189b      	adds	r3, r3, r2
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	18c3      	adds	r3, r0, r3
 8006c8a:	185b      	adds	r3, r3, r1
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d106      	bne.n	8006ca0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8006c92:	683a      	ldr	r2, [r7, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f000 fbfd 	bl	8007498 <USBD_CtlError>
                  break;
 8006c9e:	e04d      	b.n	8006d3c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ca0:	220e      	movs	r2, #14
 8006ca2:	18bb      	adds	r3, r7, r2
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	b25b      	sxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	da0c      	bge.n	8006cc6 <USBD_StdEPReq+0x2c8>
 8006cac:	18bb      	adds	r3, r7, r2
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	227f      	movs	r2, #127	; 0x7f
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	0013      	movs	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	189b      	adds	r3, r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	3310      	adds	r3, #16
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	18d3      	adds	r3, r2, r3
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	e00d      	b.n	8006ce2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cc6:	230e      	movs	r3, #14
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	227f      	movs	r2, #127	; 0x7f
 8006cce:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cd0:	0013      	movs	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	189b      	adds	r3, r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	3351      	adds	r3, #81	; 0x51
 8006cda:	33ff      	adds	r3, #255	; 0xff
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	18d3      	adds	r3, r2, r3
 8006ce0:	3304      	adds	r3, #4
 8006ce2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006ce4:	220e      	movs	r2, #14
 8006ce6:	18bb      	adds	r3, r7, r2
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d003      	beq.n	8006cf6 <USBD_StdEPReq+0x2f8>
 8006cee:	18bb      	adds	r3, r7, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b80      	cmp	r3, #128	; 0x80
 8006cf4:	d103      	bne.n	8006cfe <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e010      	b.n	8006d20 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006cfe:	230e      	movs	r3, #14
 8006d00:	18fb      	adds	r3, r7, r3
 8006d02:	781a      	ldrb	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	0011      	movs	r1, r2
 8006d08:	0018      	movs	r0, r3
 8006d0a:	f001 f9c0 	bl	800808e <USBD_LL_IsStallEP>
 8006d0e:	1e03      	subs	r3, r0, #0
 8006d10:	d003      	beq.n	8006d1a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
 8006d18:	e002      	b.n	8006d20 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	0018      	movs	r0, r3
 8006d28:	f000 fdde 	bl	80078e8 <USBD_CtlSendData>
              break;
 8006d2c:	e006      	b.n	8006d3c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	0011      	movs	r1, r2
 8006d34:	0018      	movs	r0, r3
 8006d36:	f000 fbaf 	bl	8007498 <USBD_CtlError>
              break;
 8006d3a:	46c0      	nop			; (mov r8, r8)
          }
          break;
 8006d3c:	e006      	b.n	8006d4c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	0011      	movs	r1, r2
 8006d44:	0018      	movs	r0, r3
 8006d46:	f000 fba7 	bl	8007498 <USBD_CtlError>
          break;
 8006d4a:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8006d4c:	e006      	b.n	8006d5c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	0011      	movs	r1, r2
 8006d54:	0018      	movs	r0, r3
 8006d56:	f000 fb9f 	bl	8007498 <USBD_CtlError>
      break;
 8006d5a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006d5c:	230f      	movs	r3, #15
 8006d5e:	18fb      	adds	r3, r7, r3
 8006d60:	781b      	ldrb	r3, [r3, #0]
}
 8006d62:	0018      	movs	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	b004      	add	sp, #16
 8006d68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006d6c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d76:	2308      	movs	r3, #8
 8006d78:	18fb      	adds	r3, r7, r3
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d82:	230b      	movs	r3, #11
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	885b      	ldrh	r3, [r3, #2]
 8006d8e:	0a1b      	lsrs	r3, r3, #8
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b07      	cmp	r3, #7
 8006d94:	d900      	bls.n	8006d98 <USBD_GetDescriptor+0x2c>
 8006d96:	e159      	b.n	800704c <USBD_GetDescriptor+0x2e0>
 8006d98:	009a      	lsls	r2, r3, #2
 8006d9a:	4bcb      	ldr	r3, [pc, #812]	; (80070c8 <USBD_GetDescriptor+0x35c>)
 8006d9c:	18d3      	adds	r3, r2, r3
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	23ac      	movs	r3, #172	; 0xac
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	58d3      	ldr	r3, [r2, r3]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	2108      	movs	r1, #8
 8006db2:	1879      	adds	r1, r7, r1
 8006db4:	0010      	movs	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	0003      	movs	r3, r0
 8006dba:	60fb      	str	r3, [r7, #12]
      break;
 8006dbc:	e153      	b.n	8007066 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7c1b      	ldrb	r3, [r3, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10f      	bne.n	8006de6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	23ad      	movs	r3, #173	; 0xad
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	58d3      	ldr	r3, [r2, r3]
 8006dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd0:	2208      	movs	r2, #8
 8006dd2:	18ba      	adds	r2, r7, r2
 8006dd4:	0010      	movs	r0, r2
 8006dd6:	4798      	blx	r3
 8006dd8:	0003      	movs	r3, r0
 8006dda:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	2202      	movs	r2, #2
 8006de2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006de4:	e13f      	b.n	8007066 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	23ad      	movs	r3, #173	; 0xad
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	58d3      	ldr	r3, [r2, r3]
 8006dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df0:	2208      	movs	r2, #8
 8006df2:	18ba      	adds	r2, r7, r2
 8006df4:	0010      	movs	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	0003      	movs	r3, r0
 8006dfa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	2202      	movs	r2, #2
 8006e02:	701a      	strb	r2, [r3, #0]
      break;
 8006e04:	e12f      	b.n	8007066 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	885b      	ldrh	r3, [r3, #2]
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b05      	cmp	r3, #5
 8006e0e:	d900      	bls.n	8006e12 <USBD_GetDescriptor+0xa6>
 8006e10:	e0d0      	b.n	8006fb4 <USBD_GetDescriptor+0x248>
 8006e12:	009a      	lsls	r2, r3, #2
 8006e14:	4bad      	ldr	r3, [pc, #692]	; (80070cc <USBD_GetDescriptor+0x360>)
 8006e16:	18d3      	adds	r3, r2, r3
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	23ac      	movs	r3, #172	; 0xac
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	58d3      	ldr	r3, [r2, r3]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	23ac      	movs	r3, #172	; 0xac
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	58d3      	ldr	r3, [r2, r3]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	7c12      	ldrb	r2, [r2, #16]
 8006e38:	2108      	movs	r1, #8
 8006e3a:	1879      	adds	r1, r7, r1
 8006e3c:	0010      	movs	r0, r2
 8006e3e:	4798      	blx	r3
 8006e40:	0003      	movs	r3, r0
 8006e42:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e44:	e0c3      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	0011      	movs	r1, r2
 8006e4c:	0018      	movs	r0, r3
 8006e4e:	f000 fb23 	bl	8007498 <USBD_CtlError>
            err++;
 8006e52:	210b      	movs	r1, #11
 8006e54:	187b      	adds	r3, r7, r1
 8006e56:	781a      	ldrb	r2, [r3, #0]
 8006e58:	187b      	adds	r3, r7, r1
 8006e5a:	3201      	adds	r2, #1
 8006e5c:	701a      	strb	r2, [r3, #0]
          break;
 8006e5e:	e0b6      	b.n	8006fce <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	23ac      	movs	r3, #172	; 0xac
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	58d3      	ldr	r3, [r2, r3]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d00d      	beq.n	8006e8a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	23ac      	movs	r3, #172	; 0xac
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	58d3      	ldr	r3, [r2, r3]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	7c12      	ldrb	r2, [r2, #16]
 8006e7c:	2108      	movs	r1, #8
 8006e7e:	1879      	adds	r1, r7, r1
 8006e80:	0010      	movs	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	0003      	movs	r3, r0
 8006e86:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e88:	e0a1      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	0011      	movs	r1, r2
 8006e90:	0018      	movs	r0, r3
 8006e92:	f000 fb01 	bl	8007498 <USBD_CtlError>
            err++;
 8006e96:	210b      	movs	r1, #11
 8006e98:	187b      	adds	r3, r7, r1
 8006e9a:	781a      	ldrb	r2, [r3, #0]
 8006e9c:	187b      	adds	r3, r7, r1
 8006e9e:	3201      	adds	r2, #1
 8006ea0:	701a      	strb	r2, [r3, #0]
          break;
 8006ea2:	e094      	b.n	8006fce <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	23ac      	movs	r3, #172	; 0xac
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	58d3      	ldr	r3, [r2, r3]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00d      	beq.n	8006ece <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	23ac      	movs	r3, #172	; 0xac
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	58d3      	ldr	r3, [r2, r3]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	7c12      	ldrb	r2, [r2, #16]
 8006ec0:	2108      	movs	r1, #8
 8006ec2:	1879      	adds	r1, r7, r1
 8006ec4:	0010      	movs	r0, r2
 8006ec6:	4798      	blx	r3
 8006ec8:	0003      	movs	r3, r0
 8006eca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ecc:	e07f      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	0011      	movs	r1, r2
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f000 fadf 	bl	8007498 <USBD_CtlError>
            err++;
 8006eda:	210b      	movs	r1, #11
 8006edc:	187b      	adds	r3, r7, r1
 8006ede:	781a      	ldrb	r2, [r3, #0]
 8006ee0:	187b      	adds	r3, r7, r1
 8006ee2:	3201      	adds	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
          break;
 8006ee6:	e072      	b.n	8006fce <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	23ac      	movs	r3, #172	; 0xac
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	58d3      	ldr	r3, [r2, r3]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00d      	beq.n	8006f12 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	23ac      	movs	r3, #172	; 0xac
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	58d3      	ldr	r3, [r2, r3]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	2108      	movs	r1, #8
 8006f06:	1879      	adds	r1, r7, r1
 8006f08:	0010      	movs	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	0003      	movs	r3, r0
 8006f0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f10:	e05d      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f12:	683a      	ldr	r2, [r7, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	0011      	movs	r1, r2
 8006f18:	0018      	movs	r0, r3
 8006f1a:	f000 fabd 	bl	8007498 <USBD_CtlError>
            err++;
 8006f1e:	210b      	movs	r1, #11
 8006f20:	187b      	adds	r3, r7, r1
 8006f22:	781a      	ldrb	r2, [r3, #0]
 8006f24:	187b      	adds	r3, r7, r1
 8006f26:	3201      	adds	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]
          break;
 8006f2a:	e050      	b.n	8006fce <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	23ac      	movs	r3, #172	; 0xac
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	58d3      	ldr	r3, [r2, r3]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00d      	beq.n	8006f56 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	23ac      	movs	r3, #172	; 0xac
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	58d3      	ldr	r3, [r2, r3]
 8006f42:	695b      	ldr	r3, [r3, #20]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	7c12      	ldrb	r2, [r2, #16]
 8006f48:	2108      	movs	r1, #8
 8006f4a:	1879      	adds	r1, r7, r1
 8006f4c:	0010      	movs	r0, r2
 8006f4e:	4798      	blx	r3
 8006f50:	0003      	movs	r3, r0
 8006f52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f54:	e03b      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f000 fa9b 	bl	8007498 <USBD_CtlError>
            err++;
 8006f62:	210b      	movs	r1, #11
 8006f64:	187b      	adds	r3, r7, r1
 8006f66:	781a      	ldrb	r2, [r3, #0]
 8006f68:	187b      	adds	r3, r7, r1
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
          break;
 8006f6e:	e02e      	b.n	8006fce <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	23ac      	movs	r3, #172	; 0xac
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	58d3      	ldr	r3, [r2, r3]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00d      	beq.n	8006f9a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	23ac      	movs	r3, #172	; 0xac
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	58d3      	ldr	r3, [r2, r3]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	7c12      	ldrb	r2, [r2, #16]
 8006f8c:	2108      	movs	r1, #8
 8006f8e:	1879      	adds	r1, r7, r1
 8006f90:	0010      	movs	r0, r2
 8006f92:	4798      	blx	r3
 8006f94:	0003      	movs	r3, r0
 8006f96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f98:	e019      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	0011      	movs	r1, r2
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	f000 fa79 	bl	8007498 <USBD_CtlError>
            err++;
 8006fa6:	210b      	movs	r1, #11
 8006fa8:	187b      	adds	r3, r7, r1
 8006faa:	781a      	ldrb	r2, [r3, #0]
 8006fac:	187b      	adds	r3, r7, r1
 8006fae:	3201      	adds	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
          break;
 8006fb2:	e00c      	b.n	8006fce <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	0011      	movs	r1, r2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f000 fa6c 	bl	8007498 <USBD_CtlError>
          err++;
 8006fc0:	210b      	movs	r1, #11
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	187b      	adds	r3, r7, r1
 8006fc8:	3201      	adds	r2, #1
 8006fca:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8006fcc:	e04b      	b.n	8007066 <USBD_GetDescriptor+0x2fa>
 8006fce:	e04a      	b.n	8007066 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7c1b      	ldrb	r3, [r3, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d10b      	bne.n	8006ff0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	23ad      	movs	r3, #173	; 0xad
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	58d3      	ldr	r3, [r2, r3]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe2:	2208      	movs	r2, #8
 8006fe4:	18ba      	adds	r2, r7, r2
 8006fe6:	0010      	movs	r0, r2
 8006fe8:	4798      	blx	r3
 8006fea:	0003      	movs	r3, r0
 8006fec:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fee:	e03a      	b.n	8007066 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	0011      	movs	r1, r2
 8006ff6:	0018      	movs	r0, r3
 8006ff8:	f000 fa4e 	bl	8007498 <USBD_CtlError>
        err++;
 8006ffc:	210b      	movs	r1, #11
 8006ffe:	187b      	adds	r3, r7, r1
 8007000:	781a      	ldrb	r2, [r3, #0]
 8007002:	187b      	adds	r3, r7, r1
 8007004:	3201      	adds	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
      break;
 8007008:	e02d      	b.n	8007066 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	7c1b      	ldrb	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10f      	bne.n	8007032 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	23ad      	movs	r3, #173	; 0xad
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	58d3      	ldr	r3, [r2, r3]
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	2208      	movs	r2, #8
 800701e:	18ba      	adds	r2, r7, r2
 8007020:	0010      	movs	r0, r2
 8007022:	4798      	blx	r3
 8007024:	0003      	movs	r3, r0
 8007026:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	2207      	movs	r2, #7
 800702e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007030:	e019      	b.n	8007066 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	0011      	movs	r1, r2
 8007038:	0018      	movs	r0, r3
 800703a:	f000 fa2d 	bl	8007498 <USBD_CtlError>
        err++;
 800703e:	210b      	movs	r1, #11
 8007040:	187b      	adds	r3, r7, r1
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	187b      	adds	r3, r7, r1
 8007046:	3201      	adds	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
      break;
 800704a:	e00c      	b.n	8007066 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	0011      	movs	r1, r2
 8007052:	0018      	movs	r0, r3
 8007054:	f000 fa20 	bl	8007498 <USBD_CtlError>
      err++;
 8007058:	210b      	movs	r1, #11
 800705a:	187b      	adds	r3, r7, r1
 800705c:	781a      	ldrb	r2, [r3, #0]
 800705e:	187b      	adds	r3, r7, r1
 8007060:	3201      	adds	r2, #1
 8007062:	701a      	strb	r2, [r3, #0]
      break;
 8007064:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 8007066:	230b      	movs	r3, #11
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d127      	bne.n	80070c0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007070:	2108      	movs	r1, #8
 8007072:	187b      	adds	r3, r7, r1
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d019      	beq.n	80070ae <USBD_GetDescriptor+0x342>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	88db      	ldrh	r3, [r3, #6]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d015      	beq.n	80070ae <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	88da      	ldrh	r2, [r3, #6]
 8007086:	187b      	adds	r3, r7, r1
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	1c18      	adds	r0, r3, #0
 800708c:	1c11      	adds	r1, r2, #0
 800708e:	b28a      	uxth	r2, r1
 8007090:	b283      	uxth	r3, r0
 8007092:	429a      	cmp	r2, r3
 8007094:	d900      	bls.n	8007098 <USBD_GetDescriptor+0x32c>
 8007096:	1c01      	adds	r1, r0, #0
 8007098:	b28a      	uxth	r2, r1
 800709a:	2108      	movs	r1, #8
 800709c:	187b      	adds	r3, r7, r1
 800709e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070a0:	187b      	adds	r3, r7, r1
 80070a2:	881a      	ldrh	r2, [r3, #0]
 80070a4:	68f9      	ldr	r1, [r7, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	0018      	movs	r0, r3
 80070aa:	f000 fc1d 	bl	80078e8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	88db      	ldrh	r3, [r3, #6]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d105      	bne.n	80070c2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	0018      	movs	r0, r3
 80070ba:	f000 fc5b 	bl	8007974 <USBD_CtlSendStatus>
 80070be:	e000      	b.n	80070c2 <USBD_GetDescriptor+0x356>
    return;
 80070c0:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80070c2:	46bd      	mov	sp, r7
 80070c4:	b004      	add	sp, #16
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	08008414 	.word	0x08008414
 80070cc:	08008434 	.word	0x08008434

080070d0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070d0:	b590      	push	{r4, r7, lr}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	889b      	ldrh	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d13d      	bne.n	800715e <USBD_SetAddress+0x8e>
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	88db      	ldrh	r3, [r3, #6]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d139      	bne.n	800715e <USBD_SetAddress+0x8e>
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	885b      	ldrh	r3, [r3, #2]
 80070ee:	2b7f      	cmp	r3, #127	; 0x7f
 80070f0:	d835      	bhi.n	800715e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	885b      	ldrh	r3, [r3, #2]
 80070f6:	b2da      	uxtb	r2, r3
 80070f8:	230f      	movs	r3, #15
 80070fa:	18fb      	adds	r3, r7, r3
 80070fc:	217f      	movs	r1, #127	; 0x7f
 80070fe:	400a      	ands	r2, r1
 8007100:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007102:	687a      	ldr	r2, [r7, #4]
 8007104:	23a7      	movs	r3, #167	; 0xa7
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	5cd3      	ldrb	r3, [r2, r3]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d106      	bne.n	800711c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800710e:	683a      	ldr	r2, [r7, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	0011      	movs	r1, r2
 8007114:	0018      	movs	r0, r3
 8007116:	f000 f9bf 	bl	8007498 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711a:	e027      	b.n	800716c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	240f      	movs	r4, #15
 8007120:	193a      	adds	r2, r7, r4
 8007122:	4914      	ldr	r1, [pc, #80]	; (8007174 <USBD_SetAddress+0xa4>)
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007128:	193b      	adds	r3, r7, r4
 800712a:	781a      	ldrb	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	0011      	movs	r1, r2
 8007130:	0018      	movs	r0, r3
 8007132:	f000 ffdd 	bl	80080f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	0018      	movs	r0, r3
 800713a:	f000 fc1b 	bl	8007974 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800713e:	193b      	adds	r3, r7, r4
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d005      	beq.n	8007152 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	23a7      	movs	r3, #167	; 0xa7
 800714a:	009b      	lsls	r3, r3, #2
 800714c:	2102      	movs	r1, #2
 800714e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007150:	e00c      	b.n	800716c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	23a7      	movs	r3, #167	; 0xa7
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	2101      	movs	r1, #1
 800715a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	e006      	b.n	800716c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800715e:	683a      	ldr	r2, [r7, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	0011      	movs	r1, r2
 8007164:	0018      	movs	r0, r3
 8007166:	f000 f997 	bl	8007498 <USBD_CtlError>
  }
}
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	46bd      	mov	sp, r7
 8007170:	b005      	add	sp, #20
 8007172:	bd90      	pop	{r4, r7, pc}
 8007174:	0000029e 	.word	0x0000029e

08007178 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	885b      	ldrh	r3, [r3, #2]
 8007186:	b2da      	uxtb	r2, r3
 8007188:	4b4c      	ldr	r3, [pc, #304]	; (80072bc <USBD_SetConfig+0x144>)
 800718a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800718c:	4b4b      	ldr	r3, [pc, #300]	; (80072bc <USBD_SetConfig+0x144>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d906      	bls.n	80071a2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8007194:	683a      	ldr	r2, [r7, #0]
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	0011      	movs	r1, r2
 800719a:	0018      	movs	r0, r3
 800719c:	f000 f97c 	bl	8007498 <USBD_CtlError>
 80071a0:	e088      	b.n	80072b4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	23a7      	movs	r3, #167	; 0xa7
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	5cd3      	ldrb	r3, [r2, r3]
 80071aa:	2b02      	cmp	r3, #2
 80071ac:	d002      	beq.n	80071b4 <USBD_SetConfig+0x3c>
 80071ae:	2b03      	cmp	r3, #3
 80071b0:	d029      	beq.n	8007206 <USBD_SetConfig+0x8e>
 80071b2:	e071      	b.n	8007298 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80071b4:	4b41      	ldr	r3, [pc, #260]	; (80072bc <USBD_SetConfig+0x144>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01f      	beq.n	80071fc <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 80071bc:	4b3f      	ldr	r3, [pc, #252]	; (80072bc <USBD_SetConfig+0x144>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	001a      	movs	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	23a7      	movs	r3, #167	; 0xa7
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	2103      	movs	r1, #3
 80071ce:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071d0:	4b3a      	ldr	r3, [pc, #232]	; (80072bc <USBD_SetConfig+0x144>)
 80071d2:	781a      	ldrb	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	0011      	movs	r1, r2
 80071d8:	0018      	movs	r0, r3
 80071da:	f7ff f8c5 	bl	8006368 <USBD_SetClassConfig>
 80071de:	0003      	movs	r3, r0
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d106      	bne.n	80071f2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	0011      	movs	r1, r2
 80071ea:	0018      	movs	r0, r3
 80071ec:	f000 f954 	bl	8007498 <USBD_CtlError>
            return;
 80071f0:	e060      	b.n	80072b4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	0018      	movs	r0, r3
 80071f6:	f000 fbbd 	bl	8007974 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071fa:	e05b      	b.n	80072b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	0018      	movs	r0, r3
 8007200:	f000 fbb8 	bl	8007974 <USBD_CtlSendStatus>
        break;
 8007204:	e056      	b.n	80072b4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007206:	4b2d      	ldr	r3, [pc, #180]	; (80072bc <USBD_SetConfig+0x144>)
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d115      	bne.n	800723a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	23a7      	movs	r3, #167	; 0xa7
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	2102      	movs	r1, #2
 8007216:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007218:	4b28      	ldr	r3, [pc, #160]	; (80072bc <USBD_SetConfig+0x144>)
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	001a      	movs	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007222:	4b26      	ldr	r3, [pc, #152]	; (80072bc <USBD_SetConfig+0x144>)
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	0011      	movs	r1, r2
 800722a:	0018      	movs	r0, r3
 800722c:	f7ff f8c3 	bl	80063b6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	0018      	movs	r0, r3
 8007234:	f000 fb9e 	bl	8007974 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007238:	e03c      	b.n	80072b4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800723a:	4b20      	ldr	r3, [pc, #128]	; (80072bc <USBD_SetConfig+0x144>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	001a      	movs	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d022      	beq.n	800728e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0011      	movs	r1, r2
 8007252:	0018      	movs	r0, r3
 8007254:	f7ff f8af 	bl	80063b6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007258:	4b18      	ldr	r3, [pc, #96]	; (80072bc <USBD_SetConfig+0x144>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	001a      	movs	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <USBD_SetConfig+0x144>)
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	0011      	movs	r1, r2
 800726a:	0018      	movs	r0, r3
 800726c:	f7ff f87c 	bl	8006368 <USBD_SetClassConfig>
 8007270:	0003      	movs	r3, r0
 8007272:	2b02      	cmp	r3, #2
 8007274:	d106      	bne.n	8007284 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f000 f90b 	bl	8007498 <USBD_CtlError>
            return;
 8007282:	e017      	b.n	80072b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	0018      	movs	r0, r3
 8007288:	f000 fb74 	bl	8007974 <USBD_CtlSendStatus>
        break;
 800728c:	e012      	b.n	80072b4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	0018      	movs	r0, r3
 8007292:	f000 fb6f 	bl	8007974 <USBD_CtlSendStatus>
        break;
 8007296:	e00d      	b.n	80072b4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	0011      	movs	r1, r2
 800729e:	0018      	movs	r0, r3
 80072a0:	f000 f8fa 	bl	8007498 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80072a4:	4b05      	ldr	r3, [pc, #20]	; (80072bc <USBD_SetConfig+0x144>)
 80072a6:	781a      	ldrb	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	0011      	movs	r1, r2
 80072ac:	0018      	movs	r0, r3
 80072ae:	f7ff f882 	bl	80063b6 <USBD_ClrClassConfig>
        break;
 80072b2:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 80072b4:	46bd      	mov	sp, r7
 80072b6:	b002      	add	sp, #8
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	2000018c 	.word	0x2000018c

080072c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	88db      	ldrh	r3, [r3, #6]
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d006      	beq.n	80072e0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	0011      	movs	r1, r2
 80072d8:	0018      	movs	r0, r3
 80072da:	f000 f8dd 	bl	8007498 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072de:	e026      	b.n	800732e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	23a7      	movs	r3, #167	; 0xa7
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	5cd3      	ldrb	r3, [r2, r3]
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	dc02      	bgt.n	80072f2 <USBD_GetConfig+0x32>
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	dc03      	bgt.n	80072f8 <USBD_GetConfig+0x38>
 80072f0:	e016      	b.n	8007320 <USBD_GetConfig+0x60>
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d00c      	beq.n	8007310 <USBD_GetConfig+0x50>
 80072f6:	e013      	b.n	8007320 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3308      	adds	r3, #8
 8007302:	0019      	movs	r1, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	0018      	movs	r0, r3
 800730a:	f000 faed 	bl	80078e8 <USBD_CtlSendData>
        break;
 800730e:	e00e      	b.n	800732e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	1d19      	adds	r1, r3, #4
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	0018      	movs	r0, r3
 800731a:	f000 fae5 	bl	80078e8 <USBD_CtlSendData>
        break;
 800731e:	e006      	b.n	800732e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	0011      	movs	r1, r2
 8007326:	0018      	movs	r0, r3
 8007328:	f000 f8b6 	bl	8007498 <USBD_CtlError>
        break;
 800732c:	46c0      	nop			; (mov r8, r8)
}
 800732e:	46c0      	nop			; (mov r8, r8)
 8007330:	46bd      	mov	sp, r7
 8007332:	b002      	add	sp, #8
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	23a7      	movs	r3, #167	; 0xa7
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	5cd3      	ldrb	r3, [r2, r3]
 8007348:	3b01      	subs	r3, #1
 800734a:	2b02      	cmp	r3, #2
 800734c:	d822      	bhi.n	8007394 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	88db      	ldrh	r3, [r3, #6]
 8007352:	2b02      	cmp	r3, #2
 8007354:	d006      	beq.n	8007364 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	0011      	movs	r1, r2
 800735c:	0018      	movs	r0, r3
 800735e:	f000 f89b 	bl	8007498 <USBD_CtlError>
        break;
 8007362:	e01e      	b.n	80073a2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	23a9      	movs	r3, #169	; 0xa9
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	58d3      	ldr	r3, [r2, r3]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	2202      	movs	r2, #2
 800737c:	431a      	orrs	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	330c      	adds	r3, #12
 8007386:	0019      	movs	r1, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2202      	movs	r2, #2
 800738c:	0018      	movs	r0, r3
 800738e:	f000 faab 	bl	80078e8 <USBD_CtlSendData>
      break;
 8007392:	e006      	b.n	80073a2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	0011      	movs	r1, r2
 800739a:	0018      	movs	r0, r3
 800739c:	f000 f87c 	bl	8007498 <USBD_CtlError>
      break;
 80073a0:	46c0      	nop			; (mov r8, r8)
  }
}
 80073a2:	46c0      	nop			; (mov r8, r8)
 80073a4:	46bd      	mov	sp, r7
 80073a6:	b002      	add	sp, #8
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	885b      	ldrh	r3, [r3, #2]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d108      	bne.n	80073ce <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	23a9      	movs	r3, #169	; 0xa9
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	2101      	movs	r1, #1
 80073c4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	0018      	movs	r0, r3
 80073ca:	f000 fad3 	bl	8007974 <USBD_CtlSendStatus>
  }
}
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b002      	add	sp, #8
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b082      	sub	sp, #8
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
 80073de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	23a7      	movs	r3, #167	; 0xa7
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	5cd3      	ldrb	r3, [r2, r3]
 80073e8:	3b01      	subs	r3, #1
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d80d      	bhi.n	800740a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	885b      	ldrh	r3, [r3, #2]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d110      	bne.n	8007418 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	23a9      	movs	r3, #169	; 0xa9
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	2100      	movs	r1, #0
 80073fe:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	0018      	movs	r0, r3
 8007404:	f000 fab6 	bl	8007974 <USBD_CtlSendStatus>
      }
      break;
 8007408:	e006      	b.n	8007418 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	0011      	movs	r1, r2
 8007410:	0018      	movs	r0, r3
 8007412:	f000 f841 	bl	8007498 <USBD_CtlError>
      break;
 8007416:	e000      	b.n	800741a <USBD_ClrFeature+0x44>
      break;
 8007418:	46c0      	nop			; (mov r8, r8)
  }
}
 800741a:	46c0      	nop			; (mov r8, r8)
 800741c:	46bd      	mov	sp, r7
 800741e:	b002      	add	sp, #8
 8007420:	bd80      	pop	{r7, pc}

08007422 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	781a      	ldrb	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	785a      	ldrb	r2, [r3, #1]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	3302      	adds	r3, #2
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b29a      	uxth	r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	3303      	adds	r3, #3
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	021b      	lsls	r3, r3, #8
 800744e:	b29b      	uxth	r3, r3
 8007450:	18d3      	adds	r3, r2, r3
 8007452:	b29a      	uxth	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	3304      	adds	r3, #4
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	b29a      	uxth	r2, r3
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	3305      	adds	r3, #5
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	b29b      	uxth	r3, r3
 8007468:	021b      	lsls	r3, r3, #8
 800746a:	b29b      	uxth	r3, r3
 800746c:	18d3      	adds	r3, r2, r3
 800746e:	b29a      	uxth	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	3306      	adds	r3, #6
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	b29a      	uxth	r2, r3
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	3307      	adds	r3, #7
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	021b      	lsls	r3, r3, #8
 8007486:	b29b      	uxth	r3, r3
 8007488:	18d3      	adds	r3, r2, r3
 800748a:	b29a      	uxth	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	80da      	strh	r2, [r3, #6]

}
 8007490:	46c0      	nop			; (mov r8, r8)
 8007492:	46bd      	mov	sp, r7
 8007494:	b002      	add	sp, #8
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2180      	movs	r1, #128	; 0x80
 80074a6:	0018      	movs	r0, r3
 80074a8:	f000 fd9b 	bl	8007fe2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2100      	movs	r1, #0
 80074b0:	0018      	movs	r0, r3
 80074b2:	f000 fd96 	bl	8007fe2 <USBD_LL_StallEP>
}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	46bd      	mov	sp, r7
 80074ba:	b002      	add	sp, #8
 80074bc:	bd80      	pop	{r7, pc}

080074be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80074be:	b590      	push	{r4, r7, lr}
 80074c0:	b087      	sub	sp, #28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80074ca:	2417      	movs	r4, #23
 80074cc:	193b      	adds	r3, r7, r4
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03c      	beq.n	8007552 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	0018      	movs	r0, r3
 80074dc:	f000 f83d 	bl	800755a <USBD_GetLen>
 80074e0:	0003      	movs	r3, r0
 80074e2:	3301      	adds	r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	18db      	adds	r3, r3, r3
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80074ee:	193b      	adds	r3, r7, r4
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	193a      	adds	r2, r7, r4
 80074f4:	1c59      	adds	r1, r3, #1
 80074f6:	7011      	strb	r1, [r2, #0]
 80074f8:	001a      	movs	r2, r3
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	189b      	adds	r3, r3, r2
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	7812      	ldrb	r2, [r2, #0]
 8007502:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007504:	193b      	adds	r3, r7, r4
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	193a      	adds	r2, r7, r4
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	7011      	strb	r1, [r2, #0]
 800750e:	001a      	movs	r2, r3
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	189b      	adds	r3, r3, r2
 8007514:	2203      	movs	r2, #3
 8007516:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007518:	e017      	b.n	800754a <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	1c5a      	adds	r2, r3, #1
 800751e:	60fa      	str	r2, [r7, #12]
 8007520:	2417      	movs	r4, #23
 8007522:	193a      	adds	r2, r7, r4
 8007524:	7812      	ldrb	r2, [r2, #0]
 8007526:	1939      	adds	r1, r7, r4
 8007528:	1c50      	adds	r0, r2, #1
 800752a:	7008      	strb	r0, [r1, #0]
 800752c:	0011      	movs	r1, r2
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	1852      	adds	r2, r2, r1
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007536:	193b      	adds	r3, r7, r4
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	193a      	adds	r2, r7, r4
 800753c:	1c59      	adds	r1, r3, #1
 800753e:	7011      	strb	r1, [r2, #0]
 8007540:	001a      	movs	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	189b      	adds	r3, r3, r2
 8007546:	2200      	movs	r2, #0
 8007548:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1e3      	bne.n	800751a <USBD_GetString+0x5c>
    }
  }
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b007      	add	sp, #28
 8007558:	bd90      	pop	{r4, r7, pc}

0800755a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b084      	sub	sp, #16
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007562:	230f      	movs	r3, #15
 8007564:	18fb      	adds	r3, r7, r3
 8007566:	2200      	movs	r2, #0
 8007568:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800756a:	e008      	b.n	800757e <USBD_GetLen+0x24>
  {
    len++;
 800756c:	210f      	movs	r1, #15
 800756e:	187b      	adds	r3, r7, r1
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	187b      	adds	r3, r7, r1
 8007574:	3201      	adds	r2, #1
 8007576:	701a      	strb	r2, [r3, #0]
    buf++;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3301      	adds	r3, #1
 800757c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1f2      	bne.n	800756c <USBD_GetLen+0x12>
  }

  return len;
 8007586:	230f      	movs	r3, #15
 8007588:	18fb      	adds	r3, r7, r3
 800758a:	781b      	ldrb	r3, [r3, #0]
}
 800758c:	0018      	movs	r0, r3
 800758e:	46bd      	mov	sp, r7
 8007590:	b004      	add	sp, #16
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	000a      	movs	r2, r1
 800759e:	1cfb      	adds	r3, r7, #3
 80075a0:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	2304      	movs	r3, #4
 80075a6:	2203      	movs	r2, #3
 80075a8:	2181      	movs	r1, #129	; 0x81
 80075aa:	f000 fcb8 	bl	8007f1e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80075b4:	2010      	movs	r0, #16
 80075b6:	f000 fe35 	bl	8008224 <USBD_static_malloc>
 80075ba:	0001      	movs	r1, r0
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	23ae      	movs	r3, #174	; 0xae
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	23ae      	movs	r3, #174	; 0xae
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	58d3      	ldr	r3, [r2, r3]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80075d0:	2302      	movs	r3, #2
 80075d2:	e006      	b.n	80075e2 <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	23ae      	movs	r3, #174	; 0xae
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	58d3      	ldr	r3, [r2, r3]
 80075dc:	2200      	movs	r2, #0
 80075de:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	0018      	movs	r0, r3
 80075e4:	46bd      	mov	sp, r7
 80075e6:	b002      	add	sp, #8
 80075e8:	bd80      	pop	{r7, pc}

080075ea <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	000a      	movs	r2, r1
 80075f4:	1cfb      	adds	r3, r7, #3
 80075f6:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2181      	movs	r1, #129	; 0x81
 80075fc:	0018      	movs	r0, r3
 80075fe:	f000 fcc5 	bl	8007f8c <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	23ae      	movs	r3, #174	; 0xae
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	58d3      	ldr	r3, [r2, r3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	23ae      	movs	r3, #174	; 0xae
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	58d3      	ldr	r3, [r2, r3]
 800761c:	0018      	movs	r0, r3
 800761e:	f000 fe0d 	bl	800823c <USBD_static_free>
    pdev->pClassData = NULL;
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	23ae      	movs	r3, #174	; 0xae
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	2100      	movs	r1, #0
 800762a:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	0018      	movs	r0, r3
 8007630:	46bd      	mov	sp, r7
 8007632:	b002      	add	sp, #8
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b088      	sub	sp, #32
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	23ae      	movs	r3, #174	; 0xae
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	58d3      	ldr	r3, [r2, r3]
 800764a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800764c:	231e      	movs	r3, #30
 800764e:	18fb      	adds	r3, r7, r3
 8007650:	2200      	movs	r2, #0
 8007652:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8007654:	2300      	movs	r3, #0
 8007656:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007658:	230e      	movs	r3, #14
 800765a:	18fb      	adds	r3, r7, r3
 800765c:	2200      	movs	r2, #0
 800765e:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007660:	2317      	movs	r3, #23
 8007662:	18fb      	adds	r3, r7, r3
 8007664:	2200      	movs	r2, #0
 8007666:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	001a      	movs	r2, r3
 800766e:	2360      	movs	r3, #96	; 0x60
 8007670:	4013      	ands	r3, r2
 8007672:	d03a      	beq.n	80076ea <USBD_HID_Setup+0xb2>
 8007674:	2b20      	cmp	r3, #32
 8007676:	d000      	beq.n	800767a <USBD_HID_Setup+0x42>
 8007678:	e0d6      	b.n	8007828 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	785b      	ldrb	r3, [r3, #1]
 800767e:	2b0b      	cmp	r3, #11
 8007680:	d008      	beq.n	8007694 <USBD_HID_Setup+0x5c>
 8007682:	dc26      	bgt.n	80076d2 <USBD_HID_Setup+0x9a>
 8007684:	2b0a      	cmp	r3, #10
 8007686:	d013      	beq.n	80076b0 <USBD_HID_Setup+0x78>
 8007688:	dc23      	bgt.n	80076d2 <USBD_HID_Setup+0x9a>
 800768a:	2b02      	cmp	r3, #2
 800768c:	d019      	beq.n	80076c2 <USBD_HID_Setup+0x8a>
 800768e:	2b03      	cmp	r3, #3
 8007690:	d007      	beq.n	80076a2 <USBD_HID_Setup+0x6a>
 8007692:	e01e      	b.n	80076d2 <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	885b      	ldrh	r3, [r3, #2]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	001a      	movs	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	601a      	str	r2, [r3, #0]
          break;
 80076a0:	e022      	b.n	80076e8 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80076a2:	6939      	ldr	r1, [r7, #16]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2201      	movs	r2, #1
 80076a8:	0018      	movs	r0, r3
 80076aa:	f000 f91d 	bl	80078e8 <USBD_CtlSendData>
          break;
 80076ae:	e01b      	b.n	80076e8 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	885b      	ldrh	r3, [r3, #2]
 80076b4:	0a1b      	lsrs	r3, r3, #8
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	001a      	movs	r2, r3
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	605a      	str	r2, [r3, #4]
          break;
 80076c0:	e012      	b.n	80076e8 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1d19      	adds	r1, r3, #4
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 f90c 	bl	80078e8 <USBD_CtlSendData>
          break;
 80076d0:	e00a      	b.n	80076e8 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 80076d2:	683a      	ldr	r2, [r7, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	0011      	movs	r1, r2
 80076d8:	0018      	movs	r0, r3
 80076da:	f7ff fedd 	bl	8007498 <USBD_CtlError>
          ret = USBD_FAIL;
 80076de:	2317      	movs	r3, #23
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	2202      	movs	r2, #2
 80076e4:	701a      	strb	r2, [r3, #0]
          break;
 80076e6:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80076e8:	e0a9      	b.n	800783e <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	785b      	ldrb	r3, [r3, #1]
 80076ee:	2b0b      	cmp	r3, #11
 80076f0:	d100      	bne.n	80076f4 <USBD_HID_Setup+0xbc>
 80076f2:	e075      	b.n	80077e0 <USBD_HID_Setup+0x1a8>
 80076f4:	dd00      	ble.n	80076f8 <USBD_HID_Setup+0xc0>
 80076f6:	e08b      	b.n	8007810 <USBD_HID_Setup+0x1d8>
 80076f8:	2b0a      	cmp	r3, #10
 80076fa:	d057      	beq.n	80077ac <USBD_HID_Setup+0x174>
 80076fc:	dd00      	ble.n	8007700 <USBD_HID_Setup+0xc8>
 80076fe:	e087      	b.n	8007810 <USBD_HID_Setup+0x1d8>
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <USBD_HID_Setup+0xd2>
 8007704:	2b06      	cmp	r3, #6
 8007706:	d019      	beq.n	800773c <USBD_HID_Setup+0x104>
 8007708:	e082      	b.n	8007810 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	23a7      	movs	r3, #167	; 0xa7
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	5cd3      	ldrb	r3, [r2, r3]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d107      	bne.n	8007726 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007716:	230e      	movs	r3, #14
 8007718:	18f9      	adds	r1, r7, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2202      	movs	r2, #2
 800771e:	0018      	movs	r0, r3
 8007720:	f000 f8e2 	bl	80078e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007724:	e07f      	b.n	8007826 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	0011      	movs	r1, r2
 800772c:	0018      	movs	r0, r3
 800772e:	f7ff feb3 	bl	8007498 <USBD_CtlError>
            ret = USBD_FAIL;
 8007732:	2317      	movs	r3, #23
 8007734:	18fb      	adds	r3, r7, r3
 8007736:	2202      	movs	r2, #2
 8007738:	701a      	strb	r2, [r3, #0]
          break;
 800773a:	e074      	b.n	8007826 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	885b      	ldrh	r3, [r3, #2]
 8007740:	0a1b      	lsrs	r3, r3, #8
 8007742:	b29b      	uxth	r3, r3
 8007744:	2b22      	cmp	r3, #34	; 0x22
 8007746:	d10b      	bne.n	8007760 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	88db      	ldrh	r3, [r3, #6]
 800774c:	221e      	movs	r2, #30
 800774e:	18ba      	adds	r2, r7, r2
 8007750:	b299      	uxth	r1, r3
 8007752:	2955      	cmp	r1, #85	; 0x55
 8007754:	d900      	bls.n	8007758 <USBD_HID_Setup+0x120>
 8007756:	2355      	movs	r3, #85	; 0x55
 8007758:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 800775a:	4b3c      	ldr	r3, [pc, #240]	; (800784c <USBD_HID_Setup+0x214>)
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	e01c      	b.n	800779a <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	885b      	ldrh	r3, [r3, #2]
 8007764:	0a1b      	lsrs	r3, r3, #8
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b21      	cmp	r3, #33	; 0x21
 800776a:	d10b      	bne.n	8007784 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 800776c:	4b38      	ldr	r3, [pc, #224]	; (8007850 <USBD_HID_Setup+0x218>)
 800776e:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	88db      	ldrh	r3, [r3, #6]
 8007774:	221e      	movs	r2, #30
 8007776:	18ba      	adds	r2, r7, r2
 8007778:	b299      	uxth	r1, r3
 800777a:	2909      	cmp	r1, #9
 800777c:	d900      	bls.n	8007780 <USBD_HID_Setup+0x148>
 800777e:	2309      	movs	r3, #9
 8007780:	8013      	strh	r3, [r2, #0]
 8007782:	e00a      	b.n	800779a <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007784:	683a      	ldr	r2, [r7, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	0011      	movs	r1, r2
 800778a:	0018      	movs	r0, r3
 800778c:	f7ff fe84 	bl	8007498 <USBD_CtlError>
            ret = USBD_FAIL;
 8007790:	2317      	movs	r3, #23
 8007792:	18fb      	adds	r3, r7, r3
 8007794:	2202      	movs	r2, #2
 8007796:	701a      	strb	r2, [r3, #0]
            break;
 8007798:	e045      	b.n	8007826 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800779a:	231e      	movs	r3, #30
 800779c:	18fb      	adds	r3, r7, r3
 800779e:	881a      	ldrh	r2, [r3, #0]
 80077a0:	69b9      	ldr	r1, [r7, #24]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	0018      	movs	r0, r3
 80077a6:	f000 f89f 	bl	80078e8 <USBD_CtlSendData>
          break;
 80077aa:	e03c      	b.n	8007826 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	23a7      	movs	r3, #167	; 0xa7
 80077b0:	009b      	lsls	r3, r3, #2
 80077b2:	5cd3      	ldrb	r3, [r2, r3]
 80077b4:	2b03      	cmp	r3, #3
 80077b6:	d108      	bne.n	80077ca <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	3308      	adds	r3, #8
 80077bc:	0019      	movs	r1, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2201      	movs	r2, #1
 80077c2:	0018      	movs	r0, r3
 80077c4:	f000 f890 	bl	80078e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077c8:	e02d      	b.n	8007826 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	0011      	movs	r1, r2
 80077d0:	0018      	movs	r0, r3
 80077d2:	f7ff fe61 	bl	8007498 <USBD_CtlError>
            ret = USBD_FAIL;
 80077d6:	2317      	movs	r3, #23
 80077d8:	18fb      	adds	r3, r7, r3
 80077da:	2202      	movs	r2, #2
 80077dc:	701a      	strb	r2, [r3, #0]
          break;
 80077de:	e022      	b.n	8007826 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	23a7      	movs	r3, #167	; 0xa7
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	5cd3      	ldrb	r3, [r2, r3]
 80077e8:	2b03      	cmp	r3, #3
 80077ea:	d106      	bne.n	80077fa <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	885b      	ldrh	r3, [r3, #2]
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	001a      	movs	r2, r3
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077f8:	e015      	b.n	8007826 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	0011      	movs	r1, r2
 8007800:	0018      	movs	r0, r3
 8007802:	f7ff fe49 	bl	8007498 <USBD_CtlError>
            ret = USBD_FAIL;
 8007806:	2317      	movs	r3, #23
 8007808:	18fb      	adds	r3, r7, r3
 800780a:	2202      	movs	r2, #2
 800780c:	701a      	strb	r2, [r3, #0]
          break;
 800780e:	e00a      	b.n	8007826 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	0011      	movs	r1, r2
 8007816:	0018      	movs	r0, r3
 8007818:	f7ff fe3e 	bl	8007498 <USBD_CtlError>
          ret = USBD_FAIL;
 800781c:	2317      	movs	r3, #23
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	2202      	movs	r2, #2
 8007822:	701a      	strb	r2, [r3, #0]
          break;
 8007824:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8007826:	e00a      	b.n	800783e <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	0011      	movs	r1, r2
 800782e:	0018      	movs	r0, r3
 8007830:	f7ff fe32 	bl	8007498 <USBD_CtlError>
      ret = USBD_FAIL;
 8007834:	2317      	movs	r3, #23
 8007836:	18fb      	adds	r3, r7, r3
 8007838:	2202      	movs	r2, #2
 800783a:	701a      	strb	r2, [r3, #0]
      break;
 800783c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800783e:	2317      	movs	r3, #23
 8007840:	18fb      	adds	r3, r7, r3
 8007842:	781b      	ldrb	r3, [r3, #0]
}
 8007844:	0018      	movs	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	b008      	add	sp, #32
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200000c8 	.word	0x200000c8
 8007850:	200000b0 	.word	0x200000b0

08007854 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2222      	movs	r2, #34	; 0x22
 8007860:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007862:	4b02      	ldr	r3, [pc, #8]	; (800786c <USBD_HID_GetFSCfgDesc+0x18>)
}
 8007864:	0018      	movs	r0, r3
 8007866:	46bd      	mov	sp, r7
 8007868:	b002      	add	sp, #8
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000044 	.word	0x20000044

08007870 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2222      	movs	r2, #34	; 0x22
 800787c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 800787e:	4b02      	ldr	r3, [pc, #8]	; (8007888 <USBD_HID_GetHSCfgDesc+0x18>)
}
 8007880:	0018      	movs	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	b002      	add	sp, #8
 8007886:	bd80      	pop	{r7, pc}
 8007888:	20000068 	.word	0x20000068

0800788c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2222      	movs	r2, #34	; 0x22
 8007898:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800789a:	4b02      	ldr	r3, [pc, #8]	; (80078a4 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 800789c:	0018      	movs	r0, r3
 800789e:	46bd      	mov	sp, r7
 80078a0:	b002      	add	sp, #8
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	2000008c 	.word	0x2000008c

080078a8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	000a      	movs	r2, r1
 80078b2:	1cfb      	adds	r3, r7, #3
 80078b4:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	23ae      	movs	r3, #174	; 0xae
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	58d3      	ldr	r3, [r2, r3]
 80078be:	2200      	movs	r2, #0
 80078c0:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	0018      	movs	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b002      	add	sp, #8
 80078ca:	bd80      	pop	{r7, pc}

080078cc <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	220a      	movs	r2, #10
 80078d8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80078da:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 80078dc:	0018      	movs	r0, r3
 80078de:	46bd      	mov	sp, r7
 80078e0:	b002      	add	sp, #8
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200000bc 	.word	0x200000bc

080078e8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	1dbb      	adds	r3, r7, #6
 80078f4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078f6:	68fa      	ldr	r2, [r7, #12]
 80078f8:	23a5      	movs	r3, #165	; 0xa5
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	2102      	movs	r1, #2
 80078fe:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007900:	1dbb      	adds	r3, r7, #6
 8007902:	881a      	ldrh	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007908:	1dbb      	adds	r3, r7, #6
 800790a:	881a      	ldrh	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007910:	1dbb      	adds	r3, r7, #6
 8007912:	881b      	ldrh	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	2100      	movs	r1, #0
 800791a:	f000 fc14 	bl	8008146 <USBD_LL_Transmit>

  return USBD_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	0018      	movs	r0, r3
 8007922:	46bd      	mov	sp, r7
 8007924:	b004      	add	sp, #16
 8007926:	bd80      	pop	{r7, pc}

08007928 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	1dbb      	adds	r3, r7, #6
 8007934:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007936:	1dbb      	adds	r3, r7, #6
 8007938:	881b      	ldrh	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	2100      	movs	r1, #0
 8007940:	f000 fc01 	bl	8008146 <USBD_LL_Transmit>

  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	0018      	movs	r0, r3
 8007948:	46bd      	mov	sp, r7
 800794a:	b004      	add	sp, #16
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b084      	sub	sp, #16
 8007952:	af00      	add	r7, sp, #0
 8007954:	60f8      	str	r0, [r7, #12]
 8007956:	60b9      	str	r1, [r7, #8]
 8007958:	1dbb      	adds	r3, r7, #6
 800795a:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800795c:	1dbb      	adds	r3, r7, #6
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	2100      	movs	r1, #0
 8007966:	f000 fc25 	bl	80081b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	0018      	movs	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	b004      	add	sp, #16
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	23a5      	movs	r3, #165	; 0xa5
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	2104      	movs	r1, #4
 8007984:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	2300      	movs	r3, #0
 800798a:	2200      	movs	r2, #0
 800798c:	2100      	movs	r1, #0
 800798e:	f000 fbda 	bl	8008146 <USBD_LL_Transmit>

  return USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	0018      	movs	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	b002      	add	sp, #8
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	23a5      	movs	r3, #165	; 0xa5
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	2105      	movs	r1, #5
 80079ac:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	2300      	movs	r3, #0
 80079b2:	2200      	movs	r2, #0
 80079b4:	2100      	movs	r1, #0
 80079b6:	f000 fbfd 	bl	80081b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	0018      	movs	r0, r3
 80079be:	46bd      	mov	sp, r7
 80079c0:	b002      	add	sp, #8
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079c8:	490f      	ldr	r1, [pc, #60]	; (8007a08 <MX_USB_DEVICE_Init+0x44>)
 80079ca:	4b10      	ldr	r3, [pc, #64]	; (8007a0c <MX_USB_DEVICE_Init+0x48>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	0018      	movs	r0, r3
 80079d0:	f7fe fc63 	bl	800629a <USBD_Init>
 80079d4:	1e03      	subs	r3, r0, #0
 80079d6:	d001      	beq.n	80079dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079d8:	f7f8 fe32 	bl	8000640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80079dc:	4a0c      	ldr	r2, [pc, #48]	; (8007a10 <MX_USB_DEVICE_Init+0x4c>)
 80079de:	4b0b      	ldr	r3, [pc, #44]	; (8007a0c <MX_USB_DEVICE_Init+0x48>)
 80079e0:	0011      	movs	r1, r2
 80079e2:	0018      	movs	r0, r3
 80079e4:	f7fe fc8a 	bl	80062fc <USBD_RegisterClass>
 80079e8:	1e03      	subs	r3, r0, #0
 80079ea:	d001      	beq.n	80079f0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80079ec:	f7f8 fe28 	bl	8000640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80079f0:	4b06      	ldr	r3, [pc, #24]	; (8007a0c <MX_USB_DEVICE_Init+0x48>)
 80079f2:	0018      	movs	r0, r3
 80079f4:	f7fe fca2 	bl	800633c <USBD_Start>
 80079f8:	1e03      	subs	r3, r0, #0
 80079fa:	d001      	beq.n	8007a00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80079fc:	f7f8 fe20 	bl	8000640 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a00:	46c0      	nop			; (mov r8, r8)
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	46c0      	nop			; (mov r8, r8)
 8007a08:	20000120 	.word	0x20000120
 8007a0c:	2000022c 	.word	0x2000022c
 8007a10:	2000000c 	.word	0x2000000c

08007a14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	0002      	movs	r2, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	1dfb      	adds	r3, r7, #7
 8007a20:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2212      	movs	r2, #18
 8007a26:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	b002      	add	sp, #8
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	46c0      	nop			; (mov r8, r8)
 8007a34:	2000013c 	.word	0x2000013c

08007a38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b082      	sub	sp, #8
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	0002      	movs	r2, r0
 8007a40:	6039      	str	r1, [r7, #0]
 8007a42:	1dfb      	adds	r3, r7, #7
 8007a44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	2204      	movs	r2, #4
 8007a4a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007a4c:	4b02      	ldr	r3, [pc, #8]	; (8007a58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007a4e:	0018      	movs	r0, r3
 8007a50:	46bd      	mov	sp, r7
 8007a52:	b002      	add	sp, #8
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	20000150 	.word	0x20000150

08007a5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	0002      	movs	r2, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	1dfb      	adds	r3, r7, #7
 8007a68:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007a6a:	1dfb      	adds	r3, r7, #7
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d106      	bne.n	8007a80 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	4908      	ldr	r1, [pc, #32]	; (8007a98 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <USBD_FS_ProductStrDescriptor+0x40>)
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7ff fd20 	bl	80074be <USBD_GetString>
 8007a7e:	e005      	b.n	8007a8c <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a80:	683a      	ldr	r2, [r7, #0]
 8007a82:	4905      	ldr	r1, [pc, #20]	; (8007a98 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007a84:	4b05      	ldr	r3, [pc, #20]	; (8007a9c <USBD_FS_ProductStrDescriptor+0x40>)
 8007a86:	0018      	movs	r0, r3
 8007a88:	f7ff fd19 	bl	80074be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a8c:	4b02      	ldr	r3, [pc, #8]	; (8007a98 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007a8e:	0018      	movs	r0, r3
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b002      	add	sp, #8
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	200004f0 	.word	0x200004f0
 8007a9c:	08008338 	.word	0x08008338

08007aa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	0002      	movs	r2, r0
 8007aa8:	6039      	str	r1, [r7, #0]
 8007aaa:	1dfb      	adds	r3, r7, #7
 8007aac:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007aae:	683a      	ldr	r2, [r7, #0]
 8007ab0:	4904      	ldr	r1, [pc, #16]	; (8007ac4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7ff fd02 	bl	80074be <USBD_GetString>
  return USBD_StrDesc;
 8007aba:	4b02      	ldr	r3, [pc, #8]	; (8007ac4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007abc:	0018      	movs	r0, r3
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	b002      	add	sp, #8
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	200004f0 	.word	0x200004f0
 8007ac8:	08008350 	.word	0x08008350

08007acc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b082      	sub	sp, #8
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	0002      	movs	r2, r0
 8007ad4:	6039      	str	r1, [r7, #0]
 8007ad6:	1dfb      	adds	r3, r7, #7
 8007ad8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	221a      	movs	r2, #26
 8007ade:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007ae0:	f000 f84c 	bl	8007b7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007ae4:	4b02      	ldr	r3, [pc, #8]	; (8007af0 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	b002      	add	sp, #8
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	20000154 	.word	0x20000154

08007af4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	0002      	movs	r2, r0
 8007afc:	6039      	str	r1, [r7, #0]
 8007afe:	1dfb      	adds	r3, r7, #7
 8007b00:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007b02:	1dfb      	adds	r3, r7, #7
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b0a:	683a      	ldr	r2, [r7, #0]
 8007b0c:	4908      	ldr	r1, [pc, #32]	; (8007b30 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007b0e:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007b10:	0018      	movs	r0, r3
 8007b12:	f7ff fcd4 	bl	80074be <USBD_GetString>
 8007b16:	e005      	b.n	8007b24 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	4905      	ldr	r1, [pc, #20]	; (8007b30 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007b1e:	0018      	movs	r0, r3
 8007b20:	f7ff fccd 	bl	80074be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b24:	4b02      	ldr	r3, [pc, #8]	; (8007b30 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007b26:	0018      	movs	r0, r3
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	b002      	add	sp, #8
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	200004f0 	.word	0x200004f0
 8007b34:	08008364 	.word	0x08008364

08007b38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b082      	sub	sp, #8
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	0002      	movs	r2, r0
 8007b40:	6039      	str	r1, [r7, #0]
 8007b42:	1dfb      	adds	r3, r7, #7
 8007b44:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007b46:	1dfb      	adds	r3, r7, #7
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d106      	bne.n	8007b5c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b4e:	683a      	ldr	r2, [r7, #0]
 8007b50:	4908      	ldr	r1, [pc, #32]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007b52:	4b09      	ldr	r3, [pc, #36]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007b54:	0018      	movs	r0, r3
 8007b56:	f7ff fcb2 	bl	80074be <USBD_GetString>
 8007b5a:	e005      	b.n	8007b68 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	4905      	ldr	r1, [pc, #20]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007b62:	0018      	movs	r0, r3
 8007b64:	f7ff fcab 	bl	80074be <USBD_GetString>
  }
  return USBD_StrDesc;
 8007b68:	4b02      	ldr	r3, [pc, #8]	; (8007b74 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	b002      	add	sp, #8
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	46c0      	nop			; (mov r8, r8)
 8007b74:	200004f0 	.word	0x200004f0
 8007b78:	08008370 	.word	0x08008370

08007b7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b084      	sub	sp, #16
 8007b80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <Get_SerialNum+0x48>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b88:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <Get_SerialNum+0x4c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b8e:	4b0f      	ldr	r3, [pc, #60]	; (8007bcc <Get_SerialNum+0x50>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	18d3      	adds	r3, r2, r3
 8007b9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ba2:	490b      	ldr	r1, [pc, #44]	; (8007bd0 <Get_SerialNum+0x54>)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	0018      	movs	r0, r3
 8007baa:	f000 f815 	bl	8007bd8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007bae:	4909      	ldr	r1, [pc, #36]	; (8007bd4 <Get_SerialNum+0x58>)
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	2204      	movs	r2, #4
 8007bb4:	0018      	movs	r0, r3
 8007bb6:	f000 f80f 	bl	8007bd8 <IntToUnicode>
  }
}
 8007bba:	46c0      	nop			; (mov r8, r8)
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	b004      	add	sp, #16
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	46c0      	nop			; (mov r8, r8)
 8007bc4:	1ff80050 	.word	0x1ff80050
 8007bc8:	1ff80054 	.word	0x1ff80054
 8007bcc:	1ff80058 	.word	0x1ff80058
 8007bd0:	20000156 	.word	0x20000156
 8007bd4:	20000166 	.word	0x20000166

08007bd8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	1dfb      	adds	r3, r7, #7
 8007be4:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007be6:	2117      	movs	r1, #23
 8007be8:	187b      	adds	r3, r7, r1
 8007bea:	2200      	movs	r2, #0
 8007bec:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007bee:	187b      	adds	r3, r7, r1
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	701a      	strb	r2, [r3, #0]
 8007bf4:	e02f      	b.n	8007c56 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	0f1b      	lsrs	r3, r3, #28
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	d80d      	bhi.n	8007c1a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	0f1b      	lsrs	r3, r3, #28
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	2317      	movs	r3, #23
 8007c06:	18fb      	adds	r3, r7, r3
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	0019      	movs	r1, r3
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	185b      	adds	r3, r3, r1
 8007c12:	3230      	adds	r2, #48	; 0x30
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	701a      	strb	r2, [r3, #0]
 8007c18:	e00c      	b.n	8007c34 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	0f1b      	lsrs	r3, r3, #28
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	2317      	movs	r3, #23
 8007c22:	18fb      	adds	r3, r7, r3
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	0019      	movs	r1, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	185b      	adds	r3, r3, r1
 8007c2e:	3237      	adds	r2, #55	; 0x37
 8007c30:	b2d2      	uxtb	r2, r2
 8007c32:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007c3a:	2117      	movs	r1, #23
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	3301      	adds	r3, #1
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	18d3      	adds	r3, r2, r3
 8007c48:	2200      	movs	r2, #0
 8007c4a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007c4c:	187b      	adds	r3, r7, r1
 8007c4e:	781a      	ldrb	r2, [r3, #0]
 8007c50:	187b      	adds	r3, r7, r1
 8007c52:	3201      	adds	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
 8007c56:	2317      	movs	r3, #23
 8007c58:	18fa      	adds	r2, r7, r3
 8007c5a:	1dfb      	adds	r3, r7, #7
 8007c5c:	7812      	ldrb	r2, [r2, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	429a      	cmp	r2, r3
 8007c62:	d3c8      	bcc.n	8007bf6 <IntToUnicode+0x1e>
  }
}
 8007c64:	46c0      	nop			; (mov r8, r8)
 8007c66:	46c0      	nop			; (mov r8, r8)
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	b006      	add	sp, #24
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <HAL_PCD_MspInit+0x38>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10e      	bne.n	8007ca0 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007c82:	4b0a      	ldr	r3, [pc, #40]	; (8007cac <HAL_PCD_MspInit+0x3c>)
 8007c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c86:	4b09      	ldr	r3, [pc, #36]	; (8007cac <HAL_PCD_MspInit+0x3c>)
 8007c88:	2180      	movs	r1, #128	; 0x80
 8007c8a:	0409      	lsls	r1, r1, #16
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007c90:	2200      	movs	r2, #0
 8007c92:	2100      	movs	r1, #0
 8007c94:	201f      	movs	r0, #31
 8007c96:	f7f8 fea1 	bl	80009dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007c9a:	201f      	movs	r0, #31
 8007c9c:	f7f8 feb3 	bl	8000a06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007ca0:	46c0      	nop			; (mov r8, r8)
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b002      	add	sp, #8
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	40005c00 	.word	0x40005c00
 8007cac:	40021000 	.word	0x40021000

08007cb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	23bc      	movs	r3, #188	; 0xbc
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	58d2      	ldr	r2, [r2, r3]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	21ac      	movs	r1, #172	; 0xac
 8007cc4:	0089      	lsls	r1, r1, #2
 8007cc6:	468c      	mov	ip, r1
 8007cc8:	4463      	add	r3, ip
 8007cca:	0019      	movs	r1, r3
 8007ccc:	0010      	movs	r0, r2
 8007cce:	f7fe fb89 	bl	80063e4 <USBD_LL_SetupStage>
}
 8007cd2:	46c0      	nop			; (mov r8, r8)
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b002      	add	sp, #8
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cda:	b590      	push	{r4, r7, lr}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	000a      	movs	r2, r1
 8007ce4:	1cfb      	adds	r3, r7, #3
 8007ce6:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	23bc      	movs	r3, #188	; 0xbc
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	58d4      	ldr	r4, [r2, r3]
 8007cf0:	1cfb      	adds	r3, r7, #3
 8007cf2:	781a      	ldrb	r2, [r3, #0]
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	23be      	movs	r3, #190	; 0xbe
 8007cf8:	0059      	lsls	r1, r3, #1
 8007cfa:	0013      	movs	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	18c3      	adds	r3, r0, r3
 8007d04:	185b      	adds	r3, r3, r1
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	1cfb      	adds	r3, r7, #3
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	0019      	movs	r1, r3
 8007d0e:	0020      	movs	r0, r4
 8007d10:	f7fe fbc6 	bl	80064a0 <USBD_LL_DataOutStage>
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	46bd      	mov	sp, r7
 8007d18:	b003      	add	sp, #12
 8007d1a:	bd90      	pop	{r4, r7, pc}

08007d1c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	000a      	movs	r2, r1
 8007d26:	1cfb      	adds	r3, r7, #3
 8007d28:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	23bc      	movs	r3, #188	; 0xbc
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	58d0      	ldr	r0, [r2, r3]
 8007d32:	1cfb      	adds	r3, r7, #3
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	6879      	ldr	r1, [r7, #4]
 8007d38:	0013      	movs	r3, r2
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	189b      	adds	r3, r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	18cb      	adds	r3, r1, r3
 8007d42:	333c      	adds	r3, #60	; 0x3c
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	1cfb      	adds	r3, r7, #3
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	0019      	movs	r1, r3
 8007d4c:	f7fe fc2a 	bl	80065a4 <USBD_LL_DataInStage>
}
 8007d50:	46c0      	nop			; (mov r8, r8)
 8007d52:	46bd      	mov	sp, r7
 8007d54:	b002      	add	sp, #8
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	23bc      	movs	r3, #188	; 0xbc
 8007d64:	009b      	lsls	r3, r3, #2
 8007d66:	58d3      	ldr	r3, [r2, r3]
 8007d68:	0018      	movs	r0, r3
 8007d6a:	f7fe fd61 	bl	8006830 <USBD_LL_SOF>
}
 8007d6e:	46c0      	nop			; (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b002      	add	sp, #8
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b084      	sub	sp, #16
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d7e:	230f      	movs	r3, #15
 8007d80:	18fb      	adds	r3, r7, r3
 8007d82:	2201      	movs	r2, #1
 8007d84:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d001      	beq.n	8007d92 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8007d8e:	f7f8 fc57 	bl	8000640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	23bc      	movs	r3, #188	; 0xbc
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	58d2      	ldr	r2, [r2, r3]
 8007d9a:	230f      	movs	r3, #15
 8007d9c:	18fb      	adds	r3, r7, r3
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	0019      	movs	r1, r3
 8007da2:	0010      	movs	r0, r2
 8007da4:	f7fe fd03 	bl	80067ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	23bc      	movs	r3, #188	; 0xbc
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	58d3      	ldr	r3, [r2, r3]
 8007db0:	0018      	movs	r0, r3
 8007db2:	f7fe fcb4 	bl	800671e <USBD_LL_Reset>
}
 8007db6:	46c0      	nop			; (mov r8, r8)
 8007db8:	46bd      	mov	sp, r7
 8007dba:	b004      	add	sp, #16
 8007dbc:	bd80      	pop	{r7, pc}
	...

08007dc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	23bc      	movs	r3, #188	; 0xbc
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	58d3      	ldr	r3, [r2, r3]
 8007dd0:	0018      	movs	r0, r3
 8007dd2:	f7fe fcfd 	bl	80067d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d005      	beq.n	8007dea <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007dde:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <HAL_PCD_SuspendCallback+0x34>)
 8007de0:	691a      	ldr	r2, [r3, #16]
 8007de2:	4b04      	ldr	r3, [pc, #16]	; (8007df4 <HAL_PCD_SuspendCallback+0x34>)
 8007de4:	2106      	movs	r1, #6
 8007de6:	430a      	orrs	r2, r1
 8007de8:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	46bd      	mov	sp, r7
 8007dee:	b002      	add	sp, #8
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	46c0      	nop			; (mov r8, r8)
 8007df4:	e000ed00 	.word	0xe000ed00

08007df8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d007      	beq.n	8007e18 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <HAL_PCD_ResumeCallback+0x38>)
 8007e0a:	691a      	ldr	r2, [r3, #16]
 8007e0c:	4b08      	ldr	r3, [pc, #32]	; (8007e30 <HAL_PCD_ResumeCallback+0x38>)
 8007e0e:	2106      	movs	r1, #6
 8007e10:	438a      	bics	r2, r1
 8007e12:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8007e14:	f000 fa1a 	bl	800824c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	23bc      	movs	r3, #188	; 0xbc
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	58d3      	ldr	r3, [r2, r3]
 8007e20:	0018      	movs	r0, r3
 8007e22:	f7fe fced 	bl	8006800 <USBD_LL_Resume>
}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b002      	add	sp, #8
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	e000ed00 	.word	0xe000ed00

08007e34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007e3c:	4a23      	ldr	r2, [pc, #140]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e3e:	23bc      	movs	r3, #188	; 0xbc
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	6879      	ldr	r1, [r7, #4]
 8007e44:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	23b0      	movs	r3, #176	; 0xb0
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	491f      	ldr	r1, [pc, #124]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e4e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8007e50:	4b1e      	ldr	r3, [pc, #120]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e52:	4a1f      	ldr	r2, [pc, #124]	; (8007ed0 <USBD_LL_Init+0x9c>)
 8007e54:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007e56:	4b1d      	ldr	r3, [pc, #116]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e58:	2208      	movs	r2, #8
 8007e5a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007e5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e5e:	2202      	movs	r2, #2
 8007e60:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e62:	4b1a      	ldr	r3, [pc, #104]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e64:	2202      	movs	r2, #2
 8007e66:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007e68:	4b18      	ldr	r3, [pc, #96]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007e6e:	4b17      	ldr	r3, [pc, #92]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007e74:	4b15      	ldr	r3, [pc, #84]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007e7a:	4b14      	ldr	r3, [pc, #80]	; (8007ecc <USBD_LL_Init+0x98>)
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	f7f8 ff5d 	bl	8000d3c <HAL_PCD_Init>
 8007e82:	1e03      	subs	r3, r0, #0
 8007e84:	d001      	beq.n	8007e8a <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8007e86:	f7f8 fbdb 	bl	8000640 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	23b0      	movs	r3, #176	; 0xb0
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	58d0      	ldr	r0, [r2, r3]
 8007e92:	2318      	movs	r3, #24
 8007e94:	2200      	movs	r2, #0
 8007e96:	2100      	movs	r1, #0
 8007e98:	f7fa fd26 	bl	80028e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	23b0      	movs	r3, #176	; 0xb0
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	58d0      	ldr	r0, [r2, r3]
 8007ea4:	2358      	movs	r3, #88	; 0x58
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2180      	movs	r1, #128	; 0x80
 8007eaa:	f7fa fd1d 	bl	80028e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	23b0      	movs	r3, #176	; 0xb0
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	58d0      	ldr	r0, [r2, r3]
 8007eb6:	2380      	movs	r3, #128	; 0x80
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	2200      	movs	r2, #0
 8007ebc:	2181      	movs	r1, #129	; 0x81
 8007ebe:	f7fa fd13 	bl	80028e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	b002      	add	sp, #8
 8007eca:	bd80      	pop	{r7, pc}
 8007ecc:	200006f0 	.word	0x200006f0
 8007ed0:	40005c00 	.word	0x40005c00

08007ed4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007edc:	210f      	movs	r1, #15
 8007ede:	187b      	adds	r3, r7, r1
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee4:	260e      	movs	r6, #14
 8007ee6:	19bb      	adds	r3, r7, r6
 8007ee8:	2200      	movs	r2, #0
 8007eea:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	23b0      	movs	r3, #176	; 0xb0
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	58d3      	ldr	r3, [r2, r3]
 8007ef4:	000d      	movs	r5, r1
 8007ef6:	187c      	adds	r4, r7, r1
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f7f9 f82f 	bl	8000f5c <HAL_PCD_Start>
 8007efe:	0003      	movs	r3, r0
 8007f00:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f02:	19bc      	adds	r4, r7, r6
 8007f04:	197b      	adds	r3, r7, r5
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	0018      	movs	r0, r3
 8007f0a:	f000 f9a6 	bl	800825a <USBD_Get_USB_Status>
 8007f0e:	0003      	movs	r3, r0
 8007f10:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f12:	19bb      	adds	r3, r7, r6
 8007f14:	781b      	ldrb	r3, [r3, #0]
}
 8007f16:	0018      	movs	r0, r3
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	b005      	add	sp, #20
 8007f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f1e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
 8007f26:	000c      	movs	r4, r1
 8007f28:	0010      	movs	r0, r2
 8007f2a:	0019      	movs	r1, r3
 8007f2c:	1cfb      	adds	r3, r7, #3
 8007f2e:	1c22      	adds	r2, r4, #0
 8007f30:	701a      	strb	r2, [r3, #0]
 8007f32:	1cbb      	adds	r3, r7, #2
 8007f34:	1c02      	adds	r2, r0, #0
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	003b      	movs	r3, r7
 8007f3a:	1c0a      	adds	r2, r1, #0
 8007f3c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3e:	260f      	movs	r6, #15
 8007f40:	19bb      	adds	r3, r7, r6
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f46:	250e      	movs	r5, #14
 8007f48:	197b      	adds	r3, r7, r5
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	23b0      	movs	r3, #176	; 0xb0
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	58d0      	ldr	r0, [r2, r3]
 8007f56:	19bc      	adds	r4, r7, r6
 8007f58:	1cbb      	adds	r3, r7, #2
 8007f5a:	781d      	ldrb	r5, [r3, #0]
 8007f5c:	003b      	movs	r3, r7
 8007f5e:	881a      	ldrh	r2, [r3, #0]
 8007f60:	1cfb      	adds	r3, r7, #3
 8007f62:	7819      	ldrb	r1, [r3, #0]
 8007f64:	002b      	movs	r3, r5
 8007f66:	f7f9 f9c6 	bl	80012f6 <HAL_PCD_EP_Open>
 8007f6a:	0003      	movs	r3, r0
 8007f6c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f6e:	250e      	movs	r5, #14
 8007f70:	197c      	adds	r4, r7, r5
 8007f72:	19bb      	adds	r3, r7, r6
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	0018      	movs	r0, r3
 8007f78:	f000 f96f 	bl	800825a <USBD_Get_USB_Status>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007f80:	197b      	adds	r3, r7, r5
 8007f82:	781b      	ldrb	r3, [r3, #0]
}
 8007f84:	0018      	movs	r0, r3
 8007f86:	46bd      	mov	sp, r7
 8007f88:	b005      	add	sp, #20
 8007f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007f8c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f8e:	b085      	sub	sp, #20
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	000a      	movs	r2, r1
 8007f96:	1cfb      	adds	r3, r7, #3
 8007f98:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f9a:	210f      	movs	r1, #15
 8007f9c:	187b      	adds	r3, r7, r1
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa2:	260e      	movs	r6, #14
 8007fa4:	19bb      	adds	r3, r7, r6
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	23b0      	movs	r3, #176	; 0xb0
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	58d2      	ldr	r2, [r2, r3]
 8007fb2:	000d      	movs	r5, r1
 8007fb4:	187c      	adds	r4, r7, r1
 8007fb6:	1cfb      	adds	r3, r7, #3
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	0019      	movs	r1, r3
 8007fbc:	0010      	movs	r0, r2
 8007fbe:	f7f9 fa12 	bl	80013e6 <HAL_PCD_EP_Close>
 8007fc2:	0003      	movs	r3, r0
 8007fc4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fc6:	19bc      	adds	r4, r7, r6
 8007fc8:	197b      	adds	r3, r7, r5
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f000 f944 	bl	800825a <USBD_Get_USB_Status>
 8007fd2:	0003      	movs	r3, r0
 8007fd4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8007fd6:	19bb      	adds	r3, r7, r6
 8007fd8:	781b      	ldrb	r3, [r3, #0]
}
 8007fda:	0018      	movs	r0, r3
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	b005      	add	sp, #20
 8007fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fe2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	000a      	movs	r2, r1
 8007fec:	1cfb      	adds	r3, r7, #3
 8007fee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff0:	210f      	movs	r1, #15
 8007ff2:	187b      	adds	r3, r7, r1
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff8:	260e      	movs	r6, #14
 8007ffa:	19bb      	adds	r3, r7, r6
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	23b0      	movs	r3, #176	; 0xb0
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	58d2      	ldr	r2, [r2, r3]
 8008008:	000d      	movs	r5, r1
 800800a:	187c      	adds	r4, r7, r1
 800800c:	1cfb      	adds	r3, r7, #3
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	0019      	movs	r1, r3
 8008012:	0010      	movs	r0, r2
 8008014:	f7f9 fac5 	bl	80015a2 <HAL_PCD_EP_SetStall>
 8008018:	0003      	movs	r3, r0
 800801a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800801c:	19bc      	adds	r4, r7, r6
 800801e:	197b      	adds	r3, r7, r5
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	0018      	movs	r0, r3
 8008024:	f000 f919 	bl	800825a <USBD_Get_USB_Status>
 8008028:	0003      	movs	r3, r0
 800802a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800802c:	19bb      	adds	r3, r7, r6
 800802e:	781b      	ldrb	r3, [r3, #0]
}
 8008030:	0018      	movs	r0, r3
 8008032:	46bd      	mov	sp, r7
 8008034:	b005      	add	sp, #20
 8008036:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008038 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	000a      	movs	r2, r1
 8008042:	1cfb      	adds	r3, r7, #3
 8008044:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008046:	210f      	movs	r1, #15
 8008048:	187b      	adds	r3, r7, r1
 800804a:	2200      	movs	r2, #0
 800804c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804e:	260e      	movs	r6, #14
 8008050:	19bb      	adds	r3, r7, r6
 8008052:	2200      	movs	r2, #0
 8008054:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008056:	687a      	ldr	r2, [r7, #4]
 8008058:	23b0      	movs	r3, #176	; 0xb0
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	58d2      	ldr	r2, [r2, r3]
 800805e:	000d      	movs	r5, r1
 8008060:	187c      	adds	r4, r7, r1
 8008062:	1cfb      	adds	r3, r7, #3
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	0019      	movs	r1, r3
 8008068:	0010      	movs	r0, r2
 800806a:	f7f9 faf6 	bl	800165a <HAL_PCD_EP_ClrStall>
 800806e:	0003      	movs	r3, r0
 8008070:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008072:	19bc      	adds	r4, r7, r6
 8008074:	197b      	adds	r3, r7, r5
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	0018      	movs	r0, r3
 800807a:	f000 f8ee 	bl	800825a <USBD_Get_USB_Status>
 800807e:	0003      	movs	r3, r0
 8008080:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008082:	19bb      	adds	r3, r7, r6
 8008084:	781b      	ldrb	r3, [r3, #0]
}
 8008086:	0018      	movs	r0, r3
 8008088:	46bd      	mov	sp, r7
 800808a:	b005      	add	sp, #20
 800808c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800808e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	000a      	movs	r2, r1
 8008098:	1cfb      	adds	r3, r7, #3
 800809a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800809c:	687a      	ldr	r2, [r7, #4]
 800809e:	23b0      	movs	r3, #176	; 0xb0
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	58d3      	ldr	r3, [r2, r3]
 80080a4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080a6:	1cfb      	adds	r3, r7, #3
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	da0d      	bge.n	80080cc <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080b0:	1cfb      	adds	r3, r7, #3
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	227f      	movs	r2, #127	; 0x7f
 80080b6:	4013      	ands	r3, r2
 80080b8:	68f9      	ldr	r1, [r7, #12]
 80080ba:	1c5a      	adds	r2, r3, #1
 80080bc:	0013      	movs	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	189b      	adds	r3, r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	18cb      	adds	r3, r1, r3
 80080c6:	3302      	adds	r3, #2
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	e00d      	b.n	80080e8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80080cc:	1cfb      	adds	r3, r7, #3
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	227f      	movs	r2, #127	; 0x7f
 80080d2:	401a      	ands	r2, r3
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	23b5      	movs	r3, #181	; 0xb5
 80080d8:	0059      	lsls	r1, r3, #1
 80080da:	0013      	movs	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	189b      	adds	r3, r3, r2
 80080e0:	00db      	lsls	r3, r3, #3
 80080e2:	18c3      	adds	r3, r0, r3
 80080e4:	185b      	adds	r3, r3, r1
 80080e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80080e8:	0018      	movs	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	b004      	add	sp, #16
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80080f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	000a      	movs	r2, r1
 80080fa:	1cfb      	adds	r3, r7, #3
 80080fc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080fe:	210f      	movs	r1, #15
 8008100:	187b      	adds	r3, r7, r1
 8008102:	2200      	movs	r2, #0
 8008104:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008106:	260e      	movs	r6, #14
 8008108:	19bb      	adds	r3, r7, r6
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	23b0      	movs	r3, #176	; 0xb0
 8008112:	009b      	lsls	r3, r3, #2
 8008114:	58d2      	ldr	r2, [r2, r3]
 8008116:	000d      	movs	r5, r1
 8008118:	187c      	adds	r4, r7, r1
 800811a:	1cfb      	adds	r3, r7, #3
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	0019      	movs	r1, r3
 8008120:	0010      	movs	r0, r2
 8008122:	f7f9 f8bd 	bl	80012a0 <HAL_PCD_SetAddress>
 8008126:	0003      	movs	r3, r0
 8008128:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800812a:	19bc      	adds	r4, r7, r6
 800812c:	197b      	adds	r3, r7, r5
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	0018      	movs	r0, r3
 8008132:	f000 f892 	bl	800825a <USBD_Get_USB_Status>
 8008136:	0003      	movs	r3, r0
 8008138:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800813a:	19bb      	adds	r3, r7, r6
 800813c:	781b      	ldrb	r3, [r3, #0]
}
 800813e:	0018      	movs	r0, r3
 8008140:	46bd      	mov	sp, r7
 8008142:	b005      	add	sp, #20
 8008144:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008148:	b087      	sub	sp, #28
 800814a:	af00      	add	r7, sp, #0
 800814c:	60f8      	str	r0, [r7, #12]
 800814e:	0008      	movs	r0, r1
 8008150:	607a      	str	r2, [r7, #4]
 8008152:	0019      	movs	r1, r3
 8008154:	230b      	movs	r3, #11
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	1c02      	adds	r2, r0, #0
 800815a:	701a      	strb	r2, [r3, #0]
 800815c:	2408      	movs	r4, #8
 800815e:	193b      	adds	r3, r7, r4
 8008160:	1c0a      	adds	r2, r1, #0
 8008162:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008164:	2117      	movs	r1, #23
 8008166:	187b      	adds	r3, r7, r1
 8008168:	2200      	movs	r2, #0
 800816a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800816c:	2516      	movs	r5, #22
 800816e:	197b      	adds	r3, r7, r5
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008174:	68fa      	ldr	r2, [r7, #12]
 8008176:	23b0      	movs	r3, #176	; 0xb0
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	58d0      	ldr	r0, [r2, r3]
 800817c:	193b      	adds	r3, r7, r4
 800817e:	881d      	ldrh	r5, [r3, #0]
 8008180:	000e      	movs	r6, r1
 8008182:	187c      	adds	r4, r7, r1
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	230b      	movs	r3, #11
 8008188:	18fb      	adds	r3, r7, r3
 800818a:	7819      	ldrb	r1, [r3, #0]
 800818c:	002b      	movs	r3, r5
 800818e:	f7f9 f9bf 	bl	8001510 <HAL_PCD_EP_Transmit>
 8008192:	0003      	movs	r3, r0
 8008194:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008196:	2516      	movs	r5, #22
 8008198:	197c      	adds	r4, r7, r5
 800819a:	19bb      	adds	r3, r7, r6
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	0018      	movs	r0, r3
 80081a0:	f000 f85b 	bl	800825a <USBD_Get_USB_Status>
 80081a4:	0003      	movs	r3, r0
 80081a6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80081a8:	197b      	adds	r3, r7, r5
 80081aa:	781b      	ldrb	r3, [r3, #0]
}
 80081ac:	0018      	movs	r0, r3
 80081ae:	46bd      	mov	sp, r7
 80081b0:	b007      	add	sp, #28
 80081b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	0008      	movs	r0, r1
 80081be:	607a      	str	r2, [r7, #4]
 80081c0:	0019      	movs	r1, r3
 80081c2:	230b      	movs	r3, #11
 80081c4:	18fb      	adds	r3, r7, r3
 80081c6:	1c02      	adds	r2, r0, #0
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	2408      	movs	r4, #8
 80081cc:	193b      	adds	r3, r7, r4
 80081ce:	1c0a      	adds	r2, r1, #0
 80081d0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d2:	2117      	movs	r1, #23
 80081d4:	187b      	adds	r3, r7, r1
 80081d6:	2200      	movs	r2, #0
 80081d8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081da:	2516      	movs	r5, #22
 80081dc:	197b      	adds	r3, r7, r5
 80081de:	2200      	movs	r2, #0
 80081e0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	23b0      	movs	r3, #176	; 0xb0
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	58d0      	ldr	r0, [r2, r3]
 80081ea:	193b      	adds	r3, r7, r4
 80081ec:	881d      	ldrh	r5, [r3, #0]
 80081ee:	000e      	movs	r6, r1
 80081f0:	187c      	adds	r4, r7, r1
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	230b      	movs	r3, #11
 80081f6:	18fb      	adds	r3, r7, r3
 80081f8:	7819      	ldrb	r1, [r3, #0]
 80081fa:	002b      	movs	r3, r5
 80081fc:	f7f9 f944 	bl	8001488 <HAL_PCD_EP_Receive>
 8008200:	0003      	movs	r3, r0
 8008202:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008204:	2516      	movs	r5, #22
 8008206:	197c      	adds	r4, r7, r5
 8008208:	19bb      	adds	r3, r7, r6
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	0018      	movs	r0, r3
 800820e:	f000 f824 	bl	800825a <USBD_Get_USB_Status>
 8008212:	0003      	movs	r3, r0
 8008214:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008216:	197b      	adds	r3, r7, r5
 8008218:	781b      	ldrb	r3, [r3, #0]
}
 800821a:	0018      	movs	r0, r3
 800821c:	46bd      	mov	sp, r7
 800821e:	b007      	add	sp, #28
 8008220:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008224 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800822c:	4b02      	ldr	r3, [pc, #8]	; (8008238 <USBD_static_malloc+0x14>)
}
 800822e:	0018      	movs	r0, r3
 8008230:	46bd      	mov	sp, r7
 8008232:	b002      	add	sp, #8
 8008234:	bd80      	pop	{r7, pc}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	20000190 	.word	0x20000190

0800823c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b082      	sub	sp, #8
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]

}
 8008244:	46c0      	nop			; (mov r8, r8)
 8008246:	46bd      	mov	sp, r7
 8008248:	b002      	add	sp, #8
 800824a:	bd80      	pop	{r7, pc}

0800824c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008250:	f7f8 f932 	bl	80004b8 <SystemClock_Config>
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	0002      	movs	r2, r0
 8008262:	1dfb      	adds	r3, r7, #7
 8008264:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008266:	230f      	movs	r3, #15
 8008268:	18fb      	adds	r3, r7, r3
 800826a:	2200      	movs	r2, #0
 800826c:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800826e:	1dfb      	adds	r3, r7, #7
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b03      	cmp	r3, #3
 8008274:	d017      	beq.n	80082a6 <USBD_Get_USB_Status+0x4c>
 8008276:	dc1b      	bgt.n	80082b0 <USBD_Get_USB_Status+0x56>
 8008278:	2b02      	cmp	r3, #2
 800827a:	d00f      	beq.n	800829c <USBD_Get_USB_Status+0x42>
 800827c:	dc18      	bgt.n	80082b0 <USBD_Get_USB_Status+0x56>
 800827e:	2b00      	cmp	r3, #0
 8008280:	d002      	beq.n	8008288 <USBD_Get_USB_Status+0x2e>
 8008282:	2b01      	cmp	r3, #1
 8008284:	d005      	beq.n	8008292 <USBD_Get_USB_Status+0x38>
 8008286:	e013      	b.n	80082b0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008288:	230f      	movs	r3, #15
 800828a:	18fb      	adds	r3, r7, r3
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
    break;
 8008290:	e013      	b.n	80082ba <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008292:	230f      	movs	r3, #15
 8008294:	18fb      	adds	r3, r7, r3
 8008296:	2202      	movs	r2, #2
 8008298:	701a      	strb	r2, [r3, #0]
    break;
 800829a:	e00e      	b.n	80082ba <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800829c:	230f      	movs	r3, #15
 800829e:	18fb      	adds	r3, r7, r3
 80082a0:	2201      	movs	r2, #1
 80082a2:	701a      	strb	r2, [r3, #0]
    break;
 80082a4:	e009      	b.n	80082ba <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80082a6:	230f      	movs	r3, #15
 80082a8:	18fb      	adds	r3, r7, r3
 80082aa:	2202      	movs	r2, #2
 80082ac:	701a      	strb	r2, [r3, #0]
    break;
 80082ae:	e004      	b.n	80082ba <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80082b0:	230f      	movs	r3, #15
 80082b2:	18fb      	adds	r3, r7, r3
 80082b4:	2202      	movs	r2, #2
 80082b6:	701a      	strb	r2, [r3, #0]
    break;
 80082b8:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 80082ba:	230f      	movs	r3, #15
 80082bc:	18fb      	adds	r3, r7, r3
 80082be:	781b      	ldrb	r3, [r3, #0]
}
 80082c0:	0018      	movs	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b004      	add	sp, #16
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <__libc_init_array>:
 80082c8:	b570      	push	{r4, r5, r6, lr}
 80082ca:	2600      	movs	r6, #0
 80082cc:	4d0c      	ldr	r5, [pc, #48]	; (8008300 <__libc_init_array+0x38>)
 80082ce:	4c0d      	ldr	r4, [pc, #52]	; (8008304 <__libc_init_array+0x3c>)
 80082d0:	1b64      	subs	r4, r4, r5
 80082d2:	10a4      	asrs	r4, r4, #2
 80082d4:	42a6      	cmp	r6, r4
 80082d6:	d109      	bne.n	80082ec <__libc_init_array+0x24>
 80082d8:	2600      	movs	r6, #0
 80082da:	f000 f821 	bl	8008320 <_init>
 80082de:	4d0a      	ldr	r5, [pc, #40]	; (8008308 <__libc_init_array+0x40>)
 80082e0:	4c0a      	ldr	r4, [pc, #40]	; (800830c <__libc_init_array+0x44>)
 80082e2:	1b64      	subs	r4, r4, r5
 80082e4:	10a4      	asrs	r4, r4, #2
 80082e6:	42a6      	cmp	r6, r4
 80082e8:	d105      	bne.n	80082f6 <__libc_init_array+0x2e>
 80082ea:	bd70      	pop	{r4, r5, r6, pc}
 80082ec:	00b3      	lsls	r3, r6, #2
 80082ee:	58eb      	ldr	r3, [r5, r3]
 80082f0:	4798      	blx	r3
 80082f2:	3601      	adds	r6, #1
 80082f4:	e7ee      	b.n	80082d4 <__libc_init_array+0xc>
 80082f6:	00b3      	lsls	r3, r6, #2
 80082f8:	58eb      	ldr	r3, [r5, r3]
 80082fa:	4798      	blx	r3
 80082fc:	3601      	adds	r6, #1
 80082fe:	e7f2      	b.n	80082e6 <__libc_init_array+0x1e>
 8008300:	08008454 	.word	0x08008454
 8008304:	08008454 	.word	0x08008454
 8008308:	08008454 	.word	0x08008454
 800830c:	08008458 	.word	0x08008458

08008310 <memset>:
 8008310:	0003      	movs	r3, r0
 8008312:	1882      	adds	r2, r0, r2
 8008314:	4293      	cmp	r3, r2
 8008316:	d100      	bne.n	800831a <memset+0xa>
 8008318:	4770      	bx	lr
 800831a:	7019      	strb	r1, [r3, #0]
 800831c:	3301      	adds	r3, #1
 800831e:	e7f9      	b.n	8008314 <memset+0x4>

08008320 <_init>:
 8008320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008322:	46c0      	nop			; (mov r8, r8)
 8008324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008326:	bc08      	pop	{r3}
 8008328:	469e      	mov	lr, r3
 800832a:	4770      	bx	lr

0800832c <_fini>:
 800832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008332:	bc08      	pop	{r3}
 8008334:	469e      	mov	lr, r3
 8008336:	4770      	bx	lr
